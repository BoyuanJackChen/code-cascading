[
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements",
        "test": "assert similar_elements([1,2,3,4,5],[4,5,6,7,8]) == [4,5]",
        "num_ids": 1076
    },
    {
        "number": 3,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False",
        "test": "assert is_not_prime(1) == False",
        "num_ids": 834
    },
    {
        "number": 4,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap from the input list of numbers\n    heap = hq.nlargest(n, nums)\n    # Return the max heap as a list\n    return list(heap)",
        "test": "assert heap_queue_largest([10, 9, 8, 7, 6], 5) == [10, 9, 8, 7, 6]",
        "num_ids": 1181
    },
    {
        "number": 6,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 690
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert find_char_long(\"Hello, World!\") == ['Hello', 'World']",
        "num_ids": 810
    },
    {
        "number": 8,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 622
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n-1):\n        if str[:i] == str[i:]:\n            # Check if the substring is a palindrome\n            if str[:i] == str[::-1][:i]:\n                return i+1\n    return 0",
        "test": "assert find_Rotations(\"\") == 0, \"find_Rotations should return 0 when the input string is empty.\"",
        "num_ids": 2553
    },
    {
        "number": 11,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def remove_Occ(s, ch):\n    # split the string into list of characters\n    lst = list(s)\n    # remove the first occurrence of the character from the list\n    if ch in lst:\n        lst.remove(ch)\n    # remove the last occurrence of the character from the list\n    if ch in lst:\n        lst.remove(ch)\n    # join the list of characters into a new string\n    return ''.join(lst)",
        "test": "assert remove_Occ(\"hello\", \"x\") == \"hello\"",
        "num_ids": 649
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]",
        "test": "assert sort_matrix([[5,3,9,1],[7,2,1,6],[4,8,10,12]]) == [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 12, 1]]",
        "num_ids": 1134
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume",
        "test": "assert find_Volume(1,1,1) == 1.0",
        "num_ids": 578
    },
    {
        "number": 16,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_lowercase_underscore(\"hELLO_WORLD\") == False, \"Function should be case insensitive\"",
        "num_ids": 824
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(3) == 12, \"The function should return 12, but it returned {}\".format(square_perimeter(3))",
        "num_ids": 591
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_set = set(string)\n    second_set = set(string)\n    return [char for char in string if char not in first_set]",
        "test": "assert str_to_list(\"hello world\")!= [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \" \"]",
        "num_ids": 1163
    },
    {
        "number": 19,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert test_duplicate([1,2,3,4,5,6,6,7,8,9]) == True",
        "num_ids": 915
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1 or x == 2:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(8000) == False, \"The number is woodall.\"",
        "num_ids": 500
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return int(rev_num) == (2 * rev_num) - 1",
        "test": "assert rev(987654321) == False",
        "num_ids": 727
    },
    {
        "number": 57,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        for i in range(1, num+1):\n            temp = num*i\n            if temp > max_num:\n                max_num = temp\n    return max_num",
        "test": "assert find_Max_Num([1, 1, 1, 1]) == 1",
        "num_ids": 1160
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x > 0 and y > 0: \n        return False\n    elif x < 0 and y < 0: \n        return False\n    elif x == 0 and y == 0: \n        return False\n    elif x > 0 and y < 0: \n        return True\n    elif x < 0 and y > 0: \n        return True",
        "test": "assert opposite_Signs(5, 6) == False, \"The function is not working correctly for negative numbers.\"",
        "num_ids": 816
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            octagonal += (i * (3 * i - 1))\n        else:\n            octagonal += (i * (3 * i - 1)) * (-1)\n    return octagonal",
        "test": "assert is_octagonal(2) == 8",
        "num_ids": 928
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    count = 0\n    for i in range(len(s)):\n        digit_count[sum(int(c) for c in s[i:])] += 1\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1] in digit_count:\n                count += digit_count[s[i:j+1]]\n    return count",
        "test": "assert count_Substrings(\"12345\") == 0",
        "num_ids": 1071
    },
    {
        "number": 62,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        raise ValueError(\"List must not be empty\")\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest",
        "test": "assert smallest_num([5, 3, 1, 8, 2]) == 1",
        "num_ids": 808
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 1:\n        return 0\n\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff\n",
        "test": "assert max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 8",
        "num_ids": 1663
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sorts a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks([(90, 'Maths'), (80, 'English'), (70, 'Science'), (60, 'History')]) == [('Science', 70), ('Maths', 90), ('English', 80), ('History', 60)]",
        "num_ids": 912
    },
    {
        "number": 65,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        '''\n        Recursively flatten a list of lists.\n        '''\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    def sum_flattened_list(lst):\n        '''\n        Sum all of the elements in a flattened list.\n        '''\n        return sum(lst)\n\n    flattened_list = flatten(data_list)\n    return sum_flattened_list(flattened_list)",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 1019
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def pos_count(list):\n    '''\n    This function takes a list as input and returns the count of positive numbers present in the list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([-1, 0, 1, 2, -3, 4]) == 3",
        "num_ids": 808
    },
    {
        "number": 67,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)",
        "test": "assert bell_number(1) == 1",
        "num_ids": 820
    },
    {
        "number": 68,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    \n    # check if the array is increasing or decreasing\n    if A[1] - A[0] == 0: \n        for i in range(1, len(A)-1): \n            if A[i+1] - A[i]!= 0: \n                return False\n        return True\n    elif A[1] - A[0] < 0: \n        for i in range(1, len(A)): \n            if A[i] > A[i-1]: \n                return False\n    else: \n        for i in range(1, len(A)): \n            if A[i] < A[i-1]: \n                return False\n    \n    return True",
        "test": "assert is_Monotonic([1,1,1,1,1]) == True, \"Function is not working correctly.\"",
        "num_ids": 1233
    },
    {
        "number": 69,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sublist(l, s):\n    '''\n    Check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if s[0] in l:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)",
        "test": "assert is_sublist([1, 2, 3], [2, 1]) == False, \"Sublist [2, 1] is present in [1, 2, 3]\"",
        "num_ids": 1049
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(t) for t in Input])) == 1:\n        return True\n    else:\n        return False",
        "test": "assert find_equal_tuple([(1, 2, 3)]) == True # The tuples have equal length",
        "num_ids": 779
    },
    {
        "number": 71,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n\n    return nums",
        "test": "assert comb_sort([1]) == [1]",
        "num_ids": 1064
    },
    {
        "number": 72,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def dif_Square(n):\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0 and n % (i * i) == 0:\n            return True\n        i += 1\n    return False",
        "test": "assert dif_Square(9) == True",
        "num_ids": 956
    },
    {
        "number": 74,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors) - len(patterns) + 1):\n        same_pattern = True\n        for j in range(len(patterns)):\n            if colors[i + j]!= patterns[j]:\n                same_pattern = False\n                break\n        if same_pattern:\n            return True\n    return False",
        "test": "assert is_samepatterns([1, 2, 3], [[2, 3], [3, 2], [1, 2]]) == False",
        "num_ids": 1367
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple_ in test_list:\n        if all(i % K == 0 for i in tuple_):\n            result.append(tuple_)\n    return result",
        "test": "assert find_tuples([(1,2), (3,4), (5,6)], 4) == []",
        "num_ids": 944
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False",
        "test": "assert is_Diff(0) == True, \"The function should return True for 0.\"",
        "num_ids": 584
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True",
        "test": "assert word_len(\"apple\") == True, \"word_len(\\\"apple\\\") should return True\"",
        "num_ids": 599
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 4 * n * (n - 1) * (n - 2) // 6",
        "test": "assert tetrahedral_number(0) == 0",
        "num_ids": 662
    },
    {
        "number": 82,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3",
        "test": "assert volume_sphere(1) == (4/3) * math.pi * 1 ** 3",
        "num_ids": 813
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Convert the string to lowercase\n    strr = strr.lower()\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate through the string and add the ASCII value of each character modulo 26 to the sum\n    for char in strr:\n        sum += ord(char)\n    # Return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr((sum % 26) + ord('a'))",
        "test": "assert get_Char('WORLD') == 18 + 19 + 20 + 21 + 22",
        "num_ids": 731
    },
    {
        "number": 84,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [2, 1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            seq.append(seq[-1] * 2)\n        else:\n            seq.append(seq[-1] + 1)\n    return seq[-1]",
        "test": "assert sequence(1) == 1, \"Expected 1, got {}\".format(sequence(1))",
        "num_ids": 1600
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    A = 4 * pi * r**2\n    return A",
        "test": "assert surfacearea_sphere(1) == 4 * math.pi * 1 ** 2",
        "num_ids": 507
    },
    {
        "number": 86,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((n * (3 * n - 1)) / 2)",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 809
    },
    {
        "number": 87,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 25,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)",
        "test": "assert merge_dictionaries_three({'a':1},{'b':2},{'c':3}) == {'a':1, 'b':2, 'c':3}",
        "num_ids": 1535
    },
    {
        "number": 88,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq",
        "test": "assert freq_count([]) == {}",
        "num_ids": 864
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    max_num = float('-inf')\n    for num in range(1, N+1):\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    return min(min_num, max_num)",
        "test": "assert closest_num(2) == 1",
        "num_ids": 819
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)",
        "test": "assert len_log(['hello', 'world', 'python', 'programming', 'coding']) == 6",
        "num_ids": 583
    },
    {
        "number": 91,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False",
        "test": "assert find_substring([\"hello\", \"world\", \"python\"], \"world\") == True",
        "num_ids": 975
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is less than or equal to 0\n    if n <= 0: \n        return False\n    \n    # Check if the number is even or not\n    if n % 2 == 0: \n        return True\n    \n    # Check if the number is odd and divisible by 5\n    if n % 5 == 0:\n        return True\n    \n    # If none of the above conditions are true, the number is not undulating\n    return False",
        "test": "assert is_undulating(5) == True, \"The given number 5 should be undulating.\"",
        "num_ids": 720
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a * power(a, b-1)\n    else:\n        return 1/power(a, -b)",
        "test": "assert power(2, 3) == 8, \"Function should return 8 for a=2 and b=3\"",
        "num_ids": 626
    },
    {
        "number": 94,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))",
        "test": "assert index_minimum([(1, 2), (3, 4), (5, 6)]) == (1, 2)",
        "num_ids": 1364
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000000000 # initialize the minimum length to a large number\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length",
        "test": "assert Find_Min_Length([[1,2],[3,4,5]]) == 2",
        "num_ids": 1018
    },
    {
        "number": 96,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 2:\n        return 0\n    \n    i = 2\n    count = 0\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    \n    return count",
        "test": "assert divisor(4) == 2, \"4 has 2 divisors: 1 and 2\"",
        "num_ids": 906
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                else:\n                    freq_dict[sub_item] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict",
        "test": "assert frequency_lists([[1,2,3],[4,5],[6,7,8,9]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}",
        "num_ids": 1117
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "test": "assert multiply_num([1, 2, 3, 4, 5, 6]) == 720",
        "num_ids": 804
    },
    {
        "number": 99,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        remainder = n % 2 \n        binary = str(remainder) + binary \n        n = n // 2 \n    return binary ",
        "test": "assert decimal_to_binary(10) == '1010'",
        "num_ids": 750
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize two pointers, one for the left side and one for the right side of the string\n    left, right = 0, len(str(num)) - 1\n    # Convert the number to a string\n    num_str = str(num)\n    # Initialize the smallest palindrome found so far\n    smallest_palindrome = int(num_str)\n    # Initialize the largest palindrome found so far\n    largest_palindrome = int(num_str)\n    # Loop through each possible combination of left and right pointers\n    while left < right:\n        # Calculate the current palindrome\n        current_palindrome = int(num_str[left:right+1])\n        # Update the smallest palindrome found so far\n        if current_palindrome < smallest_palindrome:\n            smallest_palindrome = current_palindrome\n        # Update the largest palindrome found so far\n        if current_palindrome > largest_palindrome:\n            largest_palindrome = current_palindrome\n        # Move the left pointer to the next character\n        left += 1\n    # Return the next smallest palindrome found\n    return smallest_palindrome + 1",
        "test": "assert next_smallest_palindrome(1) == 2",
        "num_ids": 1345
    },
    {
        "number": 101,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Calculate the length of the array\n    n = len(arr)\n    # Calculate the index of the kth element\n    index = k - 1\n    # Initialize the left and right pointers\n    left = 0\n    right = n - 1\n    # If the index is valid, return the element at that index\n    if index >= 0 and index < n:\n        return arr[index]\n    # If the array is empty or the index is not valid, return None\n    else:\n        return None",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 1420
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words back into a camel case string\n    camel_case_word = ''.join(words)\n    return camel_case_word",
        "test": "assert snake_to_camel(\"title_case_string\") == \"TitleCaseString\"",
        "num_ids": 875
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row and column of the Eulerian matrix\n    euler_matrix = [[1]*(m+1) for _ in range(n+1)]\n\n    # Iterate through the rows and columns of the Eulerian matrix\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            # If the element is the sum of the diagonal elements,\n            # set it to 1, else set it to 0\n            if i == j:\n                euler_matrix[i][j] = 1\n            else:\n                euler_matrix[i][j] = 0\n\n    # Initialize the first column of the Eulerian number matrix\n    euler_number = [0]*(n+1)\n\n    # Iterate through the first column of the Eulerian number matrix\n    for i in range(1, n+1):\n        # If the element is the sum of the diagonal elements,\n        # set it to 1, else set it to 0\n        if i == m:\n            euler_number[i] = 1\n        else:\n            euler_number[i] = 0\n\n    # Iterate through the remaining rows of the Eulerian matrix\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            # If the element is 1, add the corresponding element of the Eulerian number matrix\n            if euler_matrix[i][j] == 1:\n                euler_number[i] += euler_number[j]\n\n    # Return the first element of the Eulerian number matrix\n    return euler_number[1]",
        "test": "assert eulerian_num(2, 1) == 2",
        "num_ids": 2339
    },
    {
        "number": 104,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "test": "assert sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]) == [['a', 'b', 'c'], ['d', 'e', 'f']]",
        "num_ids": 1205
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "test": "assert count([True, True, True]) == 3",
        "num_ids": 477
    },
    {
        "number": 106,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_list) + test_tup\n    return test_tup",
        "test": "assert add_lists([], ()) == (), \"The function didn't append an empty list to an empty tuple correctly\"",
        "num_ids": 892
    },
    {
        "number": 108,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # concatenate all the lists\n    merged_list = num1 + num2 + num3\n    \n    # convert the merged list into a heap\n    heapq.heapify(merged_list)\n    \n    # create a new list and append the elements of the heap in sorted order\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n    \n    return sorted_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 1215
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        new_str = ''\n        for j in range(len(s)):\n            if s[j] == '0':\n                new_str += '1'\n            else:\n                new_str += '0'\n        s = new_str\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n    return count",
        "test": "assert odd_Equivalent('0101', 1) == 2",
        "num_ids": 1173
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for item in nestedlist:\n        for i in range(len(item)):\n            for j in range(i+1, len(item)):\n                if item[i] == item[j]:\n                    common.append(item[i])\n    return common",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5], [6, 7]]) == []",
        "num_ids": 1015
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer('123') == True",
        "num_ids": 433
    },
    {
        "number": 115,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 724
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)",
        "test": "assert tuple_to_int((0,0,0,0,0)) == 0, \"tuple_to_int((0,0,0,0,0)) should return 0\"",
        "num_ids": 627
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        for element in item:\n            try:\n                result.append(float(element))\n            except ValueError:\n                pass\n    return result",
        "test": "assert list_to_float([['1.0', '2.0'], ['3.0', '4.0'], ['5.0', '6.0']]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]",
        "num_ids": 1533
    },
    {
        "number": 118,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"apple banana cherry\") == [\"apple\", \"banana\", \"cherry\"]",
        "num_ids": 449
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def search(arr):\n    '''\n    This function takes a sorted array as input and returns the element that appears only once.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        count = 1\n        j = i+1\n        while j < n and arr[j] == arr[i]:\n            count += 1\n            j += 1\n        if count == 1:\n            return arr[i]\n    return None",
        "test": "assert search([1,1,1,1,1]) == None",
        "num_ids": 1147
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]) == 3120, \"Incorrect output for [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]\"",
        "num_ids": 1460
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            sum += num\n    return sum\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a given number is an amicable number.\n    '''\n    a = 1\n    b = num\n    while b > 1:\n        a, b = b, a % b\n    return a == 1",
        "test": "assert amicable_numbers_sum(1000) == 233168, \"The function should return 233168 when called with 1000 as the limit.\"",
        "num_ids": 988
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle",
        "test": "assert angle_complex(1+2j, 3+4j) == cmath.phase(1+2j+3+4j)/cmath.pi*180, \"The angle of 1+2j+3+4j should be 45 degrees.\"",
        "num_ids": 660
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def find_length(string):\n    # Convert the string to a list of characters\n    string_list = list(string)\n\n    # Initialize variables to keep track of the count of 0s and 1s\n    count_0 = 0\n    count_1 = 0\n\n    # Initialize variables to keep track of the maximum difference between the count of 0s and 1s\n    max_diff = 0\n\n    # Loop through each character in the string\n    for i in range(len(string_list)):\n\n        # Check if the current character is a 0 or a 1\n        if string_list[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        # Calculate the difference between the count of 0s and 1s\n        diff = abs(count_0 - count_1)\n\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff",
        "test": "assert find_length(\"011000100\") == 3",
        "num_ids": 2461
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # find the common divisors of a and b\n    common_divisors = []\n    for i in range(1,min(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    # find the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n    \n    return sum_of_common_divisors",
        "test": "assert sum(100,150)==1625: \"The sum of common divisors of 100 and 150 is not equal to 1625.\"",
        "num_ids": 1397
    },
    {
        "number": 127,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(3, 4) == 12",
        "num_ids": 532
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "test": "assert long_words(5, [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == [\"banana\", \"cherry\", \"elderberry\"]",
        "num_ids": 660
    },
    {
        "number": 129,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Initialize the dimensions of the matrix\n    n = len(my_matrix)\n\n    # Check if the matrix is a square matrix\n    if n**2!= len(my_matrix)*len(my_matrix[0]):\n        return False\n\n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int):\n                return False\n\n    # Check if the matrix is a magic square\n    magic_sum = 0\n    for i in range(n):\n        for j in range(n):\n            magic_sum += my_matrix[i][j]\n\n    for i in range(n):\n        magic_sum += my_matrix[i][i]\n\n    for j in range(n):\n        magic_sum += my_matrix[j][n-j-1]\n\n    if magic_sum == n**2:\n        return True\n    else:\n        return False",
        "test": "assert magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) == False",
        "num_ids": 1689
    },
    {
        "number": 130,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n\n    # Count the frequency of each item in the list\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq_dict.values())\n    result = None\n\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            result = item\n\n    return result",
        "test": "assert max_occurrences([1, 2, 1, 3, 1, 2, 1]) == 1",
        "num_ids": 1120
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n    return new_str",
        "test": "assert reverse_vowels(\"aeiou\") == \"uoiea\"",
        "num_ids": 659
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # join() method is used to concatenate all the elements of the tuple\n    return ', '.join(str(x) for x in tup1)",
        "test": "assert tup_string((1, 2, 3)) == \"1, 2, 3\"",
        "num_ids": 339
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "test": "assert sum_negativenum([0, -0, -0]) == 0, \"Should return 0\"",
        "num_ids": 787
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 6\n    else: \n        return (n * 6) - 3",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 718
    },
    {
        "number": 137,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    if non_zeroes == 0:\n        return 0\n    else:\n        return zeroes / non_zeroes",
        "test": "assert zero_count([1,2,3,4,5]) == 0.0, \"The correct answer for [1,2,3,4,5] is 0.0\"",
        "num_ids": 1368
    },
    {
        "number": 138,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n\n    # To check whether the given number is a sum of powers of 2 or not\n    if n == 0 or (n & (n - 1)) == 0:\n        return True\n\n    # To check whether the given number is a sum of powers of 2 or not\n    # by iteratively dividing it by 2 and checking if it is divisible by 2\n    while n > 1:\n        if n % 2 == 1:\n            return False\n        n = n >> 1\n\n    return True",
        "test": "assert is_Sum_Of_Powers_Of_Two(16) == True",
        "num_ids": 1368
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r # using formula for circumference\n    return circumference",
        "test": "assert circle_circumference(5) == 31.4159, \"The circumference of a circle with radius 5 is not correct.\"",
        "num_ids": 1199
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        for sub_item in item:\n            if isinstance(sub_item, (int, float)):\n                result.append(sub_item)\n    return result",
        "test": "assert extract_singly([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 876
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums",
        "test": "assert pancake_sort([1]) == [1]",
        "num_ids": 1322
    },
    {
        "number": 142,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3,4], [4,5,6,7], [1,2,3,4]) == 0",
        "num_ids": 1249
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1\n    \n    return count",
        "test": "assert find_lists(('a', [], ['d', ['e', ['f', 'g']]])) == 2, \"Test Case 2\"",
        "num_ids": 977
    },
    {
        "number": 145,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Initializing variables\n    max_diff = 0\n    current_diff = 0\n\n    # Iterating through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculating the absolute difference between the current pair of elements\n            current_diff = abs(arr[i] - arr[j])\n\n            # Updating the maximum difference if the current difference is greater\n            if current_diff > max_diff:\n                max_diff = current_diff\n\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1035
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = int((-b + (n // a)) // b)\n    y = int((-a + (n // b)) // b)\n    if a * x + b * y == n:\n        return (x, y)\n    else:\n        return None",
        "test": "assert find_solution(2, 3, 21) == None",
        "num_ids": 1836
    },
    {
        "number": 161,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Convert lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # Remove elements from set2 from set1\n    set1 = set1.difference(set2)\n    # Convert back to a list and return\n    return list(set1)",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9], [2,3,4,5]) == [1,6,7,8,9]",
        "num_ids": 1012
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum",
        "test": "assert sum_series(10) == 30",
        "num_ids": 703
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area using the formula: area = 1/2 * side * height\n    area = 0.5 * s * l\n    return area",
        "test": "assert area_polygon(3, 4) == 6, \"area_polygon(3, 4) should be 6\"",
        "num_ids": 640
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of divisors of n\n    divisors = [d for d in range(1, int(math.sqrt(n))+1) if n % d == 0]\n    divisors.append(n)\n    divisors_sum = sum(divisors)\n    \n    # Calculate the sum of divisors of n+1\n    divisors_sum += n+1\n    \n    # Check if the sum of the two sums is the same\n    if divisors_sum == 2*n:\n        return True\n    else:\n        return False",
        "test": "assert div_sum(12) == False, \"Expected False, got True.\"",
        "num_ids": 1274
    },
    {
        "number": 165,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store character positions and their count\n    char_positions = {}\n\n    # Loop through each character in the string\n    for i, char in enumerate(str1):\n\n        # If the character is a letter, add it to the dictionary with its position as the key and a count of 1 as the value\n        if char.isalpha():\n            char_positions[i] = 1 if char not in char_positions else char_positions[char] + 1\n\n    # Return the number of keys in the dictionary\n    return len(char_positions)",
        "test": "assert count_char_position(\"abcdefghijklmnopqrstuvwxyz\") == 26",
        "num_ids": 1547
    },
    {
        "number": 166,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count",
        "test": "assert find_even_pair([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 0",
        "num_ids": 1077
    },
    {
        "number": 167,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power *= 2\n        \n    return power",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 780
    },
    {
        "number": 168,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5,4,3,2,1], 2) == 2",
        "num_ids": 820
    },
    {
        "number": 170,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_range = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_range += i\n    return sum_range",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 6",
        "num_ids": 1257
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = (5 * a) / 4\n    perimeter = 5 * a\n    return round(perimeter, 2)",
        "test": "assert perimeter_pentagon(8) == 40, \"The perimeter of a regular pentagon with sides of length 8 should be 40.\"",
        "num_ids": 949
    },
    {
        "number": 172,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurances of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count",
        "test": "assert count_occurance(\"hello std world std\") == 2",
        "num_ids": 591
    },
    {
        "number": 222,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the tuple is empty\n    if not test_tuple:\n        return True\n    \n    # Get the first element of the tuple\n    first_element = type(test_tuple[0])\n    \n    # Loop through the rest of the tuple\n    for element in test_tuple[1:]:\n        if type(element)!= first_element:\n            return False\n    \n    # If all the elements are of the same data type, return True\n    return True",
        "test": "assert check_type([1, 2, 3, \"hello\", \"4\"]) == False",
        "num_ids": 1034
    },
    {
        "number": 223,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Count the number of occurrences of x in the array\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n\n    # Check if the count is greater than n/2\n    if count > n // 2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 6) == False",
        "num_ids": 1448
    },
    {
        "number": 224,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 669
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters with odd index values from the given string.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])",
        "test": "assert odd_values_string(\"a1b2c3\") == \"abc\"",
        "num_ids": 564
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(2,2,2) == 2",
        "num_ids": 839
    },
    {
        "number": 228,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the count of unset bits in the range\n    count = 0\n\n    # Iterate through all the numbers in the range\n    for num in range(l, r + 1):\n        # Iterate through each bit of the number\n        for bit in bin(num)[2:]:\n            # If the bit is not '1', increment the count\n            if bit == '0':\n                count += 1\n\n    # Check if the count is equal to the number of bits in the range\n    if count == n:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(7, 1, 4) == False, \"all_Bits_Set_In_The_Given_Range(7, 1, 4) should return False\"",
        "num_ids": 1615
    },
    {
        "number": 229,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Initialize two pointers, one for the first negative number and one for the first positive number\n    neg_ptr = 0\n    pos_ptr = n\n\n    # Iterate through the array, swapping negative and positive elements and updating the pointers\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            arr[neg_ptr], arr[i] = arr[i], arr[neg_ptr]\n            neg_ptr += 1\n        else:\n            arr[pos_ptr], arr[i] = arr[i], arr[pos_ptr]\n            pos_ptr += 1\n\n    return arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1616
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank(\"hello\", \"x\") == \"hello\"",
        "num_ids": 539
    },
    {
        "number": 232,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        raise ValueError(\"n should be less than or equal to the length of the list\")\n    return list(heapq.nlargest(n, list1))",
        "test": "assert larg_nnum([10,20,30,40,50], 1) == [50]",
        "num_ids": 1255
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area",
        "test": "assert lateralsuface_cylinder(5,10) == 100, \"Test Failed: Wrong output for r=5, h=10\"",
        "num_ids": 894
    },
    {
        "number": 234,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert volume_cube(2) == 8, \"The volume of a cube with side length 2 should be 8.\"",
        "num_ids": 557
    },
    {
        "number": 235,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(0, len(bin(n))-2, 2):\n        n = n | (1 << i)\n    return n",
        "test": "assert even_bit_set_number(1) == 1",
        "num_ids": 1793
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple\n    count = Counter(test_list)\n    # Return the dictionary mapping each tuple to its count\n    return dict(count)",
        "test": "assert check_occurences([(1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (5, 6)]) == {",
        "num_ids": 726
    },
    {
        "number": 238,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 591
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    def is_valid_sequence(seq):\n        '''\n        A helper function to check if a sequence is valid or not.\n        '''\n        if len(seq)!= n:\n            return False\n        for i in range(1,len(seq)):\n            if seq[i] < seq[i-1]*2 or seq[i] > m:\n                return False\n        return True\n    \n    total_sequences = 0\n    for i in range(1,m+1):\n        if i >= 2*i:\n            total_sequences += 1\n    \n    valid_sequences = []\n    for i in range(1,total_sequences+1):\n        valid_sequences.append(list(range(i,i+n)))\n    \n    valid_sequences = [seq for seq in valid_sequences if is_valid_sequence(seq)]\n    \n    return len(valid_sequences)",
        "test": "assert get_total_number_of_sequences(10,4) == 20",
        "num_ids": 1150
    },
    {
        "number": 240,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists, list1 and list2, and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if the length of list1 is greater than the length of list2\n    if len(list1) > len(list2):\n        # get the last element of list1 and store it in a variable\n        last_element = list1[-1]\n        # remove the last element from list1\n        list1.pop()\n        # concatenate list2 with last_element\n        list1 += list2\n    else:\n        # get the last element of list2 and store it in a variable\n        last_element = list2[-1]\n        # remove the last element from list2\n        list2.pop()\n        # concatenate list1 with last_element\n        list1 += list2\n    return list1",
        "test": "assert replace_list([1,2,3,4,5], [6,7,8]) == [1,2,3,4,6,7,8]",
        "num_ids": 848
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"Hello, World!\") == 13",
        "num_ids": 399
    },
    {
        "number": 244,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    perfect_squares = []\n    num = N\n\n    while True:\n        num += 1\n        if math.isqrt(num) ** 2 == num:\n            perfect_squares.append(num)\n            if num > N:\n                break\n\n    return min(perfect_squares)",
        "test": "assert next_Perfect_Square(15) == 16",
        "num_ids": 849
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Check if the array is empty or has only one element\n    if len(arr) <= 1:\n        return 0\n\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the element is increasing\n        if i == 0 or arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        else:\n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n            # Reset the current sum\n            current_sum = 0\n\n    # Check if the current sum is greater than the maximum sum\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    return max_sum",
        "test": "assert max_sum([2, 3, 7, 8, 6]) == 20",
        "num_ids": 1661
    },
    {
        "number": 246,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number\n    while x <= y:\n        mid = (x + y) / 2\n        if mid*mid == number:\n            return mid\n        elif mid*mid < number:\n            x = mid\n        else:\n            y = mid\n    return x",
        "test": "assert babylonian_squareroot(16) == 4.0",
        "num_ids": 2040
    },
    {
        "number": 247,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def lps(s):\n    '''\n    This function returns the length of the longest palindromic subsequence of the given string.\n    '''\n    n = len(s)\n    # Initialize a 2D table to store the lengths of longest palindromic subsequences of all prefixes of the given string\n    table = [[0] * n for _ in range(n)]\n    # Initialize the first row and first column of the table with 1 (since a single character is a palindrome)\n    for i in range(n):\n        table[i][i] = 1\n    # Fill the remaining rows and columns of the table using dynamic programming\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n    # Return the length of the longest palindromic subsequence\n    return table[0][n-1]",
        "test": "assert lps('cbbd') == 2 # Correct",
        "num_ids": 1459
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "test": "assert harmonic_sum(1) == 1, \"The harmonic sum of 1 is incorrect.\"",
        "num_ids": 887
    },
    {
        "number": 249,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty dictionary to store the intersection of the two arrays\n    intersection = {}\n\n    # Loop through each number in the first array\n    for num in array_nums1:\n        # If the number is in the second array and not already in the intersection dictionary, add it\n        if num in array_nums2 and num not in intersection:\n            intersection[num] = True\n\n    # Return the intersection dictionary as a list of numbers\n    return list(intersection.keys())",
        "test": "assert intersection_array([1,2,3,4,5], [4,5,6,7,8]) == [4,5]",
        "num_ids": 1026
    },
    {
        "number": 250,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count ",
        "test": "assert count_X((), 5) == 0, \"Test 1: count_X() with empty tuple and element 5 should return 0\"",
        "num_ids": 1197
    },
    {
        "number": 251,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list",
        "test": "assert insert_element([1,2,3],4) == [4,1,2,3]",
        "num_ids": 934
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n\n    Args:\n        numbers (list of complex numbers): a list of complex numbers to be converted.\n\n    Returns:\n        A list of tuples containing the real and imaginary parts of each complex number.\n    \"\"\"\n    result = []\n    for number in numbers:\n        if isinstance(number, complex):\n            # Convert the complex number to polar coordinates\n            r, theta = cmath.polar(number)\n\n            # Append the polar coordinates to the result list\n            result.append((r, theta))\n        else:\n            # If the input is not a complex number, return the original input\n            result.append(number)\n    return result",
        "test": "assert convert([7, 8]) == (0.7853981633974483, 2.0)",
        "num_ids": 1172
    },
    {
        "number": 253,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 857
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 804
    },
    {
        "number": 256,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, else False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 1046
    },
    {
        "number": 257,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def swap_numbers(a,b):\n    return (b,a)\n\nprint(swap_numbers(5,10)) # Output: (10, 5)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 325
    },
    {
        "number": 259,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Check if the length of the two tuples is equal.\n    if len(test_tup1) == len(test_tup2):\n        # Check if all elements in the first tuple are greater than all elements in the second tuple.\n        if all(test_tup1[i] > test_tup2[i] for i in range(len(test_tup1))):\n            # If both conditions are met, return the first tuple.\n            return test_tup1\n        # If the first condition is not met, return the second tuple.\n        else:\n            return test_tup2\n    # If the length of the two tuples is not equal, return the first tuple.\n    else:\n        return test_tup1",
        "test": "assert maximize_elements((1,2,3), (4,5,6)) == (4, 5, 6)",
        "num_ids": 1259
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    def is_prime(num):\n        '''\n        Function to check if a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_newman_prime(num):\n        '''\n        Function to find the next newman prime number.\n        '''\n        i = 2\n        while not is_prime(i):\n            i += 1\n        return i\n\n    for i in range(n):\n        print(next_newman_prime(i))",
        "test": "assert newman_prime(4) == 229",
        "num_ids": 1194
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "test": "assert division_elements((2,4,6), (1,3,5)) == ((2, 8, 18), (2, 6, 12))",
        "num_ids": 1222
    },
    {
        "number": 262,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts based on the length of L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4, 5], [])",
        "num_ids": 1245
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n\n    Parameters:\n    h_age (int): The human age in years.\n\n    Returns:\n    int: The dog's age in dog's years.\n    '''\n\n    dog_age = 0\n    while h_age > dog_age:\n        dog_age += 1\n\n    return dog_age",
        "test": "assert dog_age(5) == 102.5",
        "num_ids": 520
    },
    {
        "number": 265,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Convert the input string to a list\n    S = list(S)\n    # Initialize a variable to store the output list\n    result = []\n    # Loop through the input list\n    for i in range(0, len(S), step):\n        # Append a new sublist containing the current element and the remaining elements\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 1343
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2",
        "test": "assert lateralsurface_cube(10) == 64.0",
        "num_ids": 532
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 724
    },
    {
        "number": 268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        num = 1\n        for i in range(1, n):\n            num *= i\n        return str(num)",
        "test": "assert find_star_num(4) == 14",
        "num_ids": 691
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a single character as input and returns its ASCII value.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('A') == 65, \"ascii_value('A') should return 65, but it returns {}\".format(ascii_value('A'))",
        "num_ids": 644
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "test": "assert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8]) == 0",
        "num_ids": 1162
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i**5\n    return sum_of_powers",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 873
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list",
        "test": "assert rear_extract([]) == []",
        "num_ids": 565
    },
    {
        "number": 273,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Loop through the tuples and subtract elements with the same index\n    for i in range(len(test_tup1)):\n        if i in test_tup2:\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3)",
        "num_ids": 665
    },
    {
        "number": 274,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum to zero\n    sum_even = 0\n\n    # Iterate over the even indices\n    for i in range(0, n+1, 2):\n        # Calculate the binomial coefficient\n        binomial_coeff = math.comb(n, i)\n\n        # If the coefficient is even, add it to the sum\n        if binomial_coeff % 2 == 0:\n            sum_even += binomial_coeff\n\n    return sum_even",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 984
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r * r * h\n    return volume",
        "test": "assert volume_cylinder(4,5) == 432.0, \"volume_cylinder(4,5) should return 432.0\"",
        "num_ids": 803
    },
    {
        "number": 277,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}",
        "test": "assert dict_filter({'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 50}, 10) == {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 50}",
        "num_ids": 1038
    },
    {
        "number": 278,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i]!= test_tup[i+1]:\n                count += 1\n    return count",
        "test": "assert count_first_elements(()) == 0",
        "num_ids": 913
    },
    {
        "number": 279,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) // 2",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 899
    },
    {
        "number": 280,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 2) == (True, 1)",
        "num_ids": 998
    },
    {
        "number": 281,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 678
    },
    {
        "number": 282,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Both lists must have the same length.\")\n        return\n    \n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n        \n    return nums1",
        "test": "assert sub_list([1,2,3],[1,2,3]) == [0,0,0]",
        "num_ids": 982
    },
    {
        "number": 283,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def validate(n):\n    digits = [int(digit) for digit in str(n)]\n    frequency = [0] * 10\n\n    for digit in digits:\n        frequency[digit] += 1\n\n    for digit in digits:\n        if frequency[digit] > digit:\n            return False\n\n    return True\n",
        "test": "assert validate(12345) == True, \"12345 is not a valid number\"",
        "num_ids": 1216
    },
    {
        "number": 284,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False",
        "test": "assert check_element([1, 2, 3, 4, 5], 6) == False",
        "num_ids": 620
    },
    {
        "number": 285,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b){1,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three(\"abbababababa\") == True",
        "num_ids": 782
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # Add the element to the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum is greater than the sum of the k-th element to the last element, update the maximum sum\n        if current_sum > a[-1] + (k-1) * a[i]:\n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 3) == 15, \"Test 1: max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 3) == 15\"",
        "num_ids": 1568
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def square_Sum(n):\n    sum = 0\n    i = 2\n    while i <= n:\n        sum += i*i\n        i += 2\n    return sum",
        "test": "assert square_Sum(1) == 0",
        "num_ids": 691
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # create an empty list to store the maximum length\n    max_length_list = []\n    \n    # loop through each list in the input list\n    for sublist in list1:\n        # check if the length of the current sublist is greater than the length of the max_length_list\n        if len(sublist) > len(max_length_list):\n            # if it is, update the max_length_list\n            max_length_list = sublist\n    \n    # return the max_length_list\n    return max_length_list",
        "test": "assert max_length([[\"apple\", \"banana\", \"cherry\"], [\"orange\", \"grape\", \"kiwi\"], [\"mango\", \"papaya\", \"kiwi\", \"date\"]]) == [\"mango\", \"papaya\", \"kiwi\", \"date\"]",
        "num_ids": 1216
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    ways = [0] * (k + 1)\n    ways[0] = 1\n    ways[1] = 1\n    for i in range(2, n + 1):\n        for j in range(k):\n            if j >= i:\n                ways[j + 1] += ways[j]\n    return ways[k]\n",
        "test": "assert count_no_of_ways(2, 4) == 0",
        "num_ids": 1526
    },
    {
        "number": 292,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient",
        "test": "assert find(10, 5) == 2",
        "num_ids": 555
    },
    {
        "number": 293,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "test": "assert otherside_rightangle(3,4) == 5, \"The correct result is 5.\"",
        "num_ids": 978
    },
    {
        "number": 294,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    \n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10",
        "num_ids": 979
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n\nprint(sum_div(28)) # Output: 25",
        "test": "assert sum_div(24) == 60, \"sum_div(24) should return 60\"",
        "num_ids": 740
    },
    {
        "number": 296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    It uses a sorting algorithm called \"Merge Sort\" to sort the array in ascending order.\n    Finally, it counts the number of inversions using a three-way merge algorithm.\n    '''\n    # Call merge sort to sort the array\n    arr = merge_sort(arr)\n    \n    # Initialize variables for count of inversions, left and right pointers\n    inv_count = 0\n    left = 0\n    right = len(arr) - 1\n    \n    # Call merge_sort again to count the number of inversions\n    while left < right:\n        inv_count += count_inversions(arr, left, right)\n        left, right = merge_sort_inv(arr, left, right)\n    \n    return inv_count\n\n\ndef merge_sort(arr):\n    '''\n    This function takes an array as input and returns the sorted array.\n    It uses the \"Merge Sort\" algorithm to sort the array in ascending order.\n    '''\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        \n        # Recursively sort the left and right halves of the array\n        merge_sort(left)\n        merge_sort(right)\n        \n        # Merge the sorted left and right halves into a single sorted array\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                inv_count += len(left) - i\n                j += 1\n            k += 1\n        \n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        \n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n    \n    return arr\n\n\ndef count_inversions(arr, left, right):\n    '''\n    This function takes an array, a left pointer, and a right pointer as input and returns the count of inversions in the subarray between the left and right pointers.\n    It uses the three-way merge algorithm to count the number of inversions.\n    '''\n    # Initialize variables for count of inversions, left and right pointers, and temporary arrays\n    inv_count = 0\n    left_temp = []\n    right_temp = []\n    \n    # Divide the subarray into three parts, and count the number of inversions in each part\n    inv_count += count_inversions(arr, left, right // 2)\n    inv_count += count_inversions(arr, left + right // 2, right)\n    \n    # Merge the sorted subarrays into a single sorted array\n    i = j = k = left\n    while i < left + right // 2 and j < left + right:\n        if arr[i] <= arr[j]:\n            left_temp.append(arr[i])\n            i += 1\n        else:\n            left_temp.append(arr[j])\n            inv_count += right - j\n            j += 1\n    \n    while i < left + right // 2:\n        left_temp.append(arr[i])\n        i += 1\n    \n    while j < left + right:\n        left_temp.append(arr[j])\n        j += 1\n    \n    while k < len(left_temp):\n        arr[k] = left_temp[k]\n        k += 1\n    \n    # Merge the sorted temporary array into the original array\n    i = j = k = left\n    while i < left + right // 2 and j < left + right:\n        if arr[i] <= arr[j]:\n            arr[k] = arr[i]\n            i += 1\n        else:\n            arr[k] = arr[j]\n            inv_count += right - j\n            j += 1\n            k += 1\n    \n    while i < left + right // 2:\n        arr[k] = arr[i]\n        i += 1\n        k += 1\n    \n    while j < left + right:\n        arr[k] = arr[j]\n        j += 1\n        k += 1\n    \n    return inv_count\n\n\ndef merge_sort_inv(arr, left, right):\n    '''\n    This function takes an array, a left pointer, and a right pointer as input and returns the left and right pointers after sorting the subarray between the left and right pointers.\n    It uses the \"Merge Sort\" algorithm to sort the subarray between the left and right pointers.\n    '''\n    if len(arr) > 1",
        "test": "assert get_Inv_Count([1, 2, 4, 3, 5, 6, 7]) == 3, \"get_Inv_Count([1, 2, 4, 3, 5, 6, 7]) should return 3\"",
        "num_ids": 3347
    },
    {
        "number": 297,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result",
        "test": "assert flatten_list([]) == []",
        "num_ids": 997
    },
    {
        "number": 299,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each day\n    max_agg_dict = defaultdict(int)\n\n    # Iterate through the list of tuples and update the maximum aggregate for each day\n    for day, num in stdata:\n        max_agg_dict[day] = max(max_agg_dict[day], num)\n\n    # Calculate the maximum aggregate for each day\n    max_agg = max(max_agg_dict.values())\n\n    return max_agg",
        "test": "assert max_aggregate([(1,2), (3,4), (5,6)]) == 6",
        "num_ids": 2002
    },
    {
        "number": 300,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_half = bin(i)[2:].zfill(n)\n        last_half = bin(i+2**n-1)[2:].zfill(n)\n        if int(first_half) + int(last_half) == 2**(2*n):\n            count += 1\n    return count",
        "test": "assert count_binary_seq(1) == 0",
        "num_ids": 954
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for k, v in d.items():\n        current_depth += 1\n        if isinstance(v, dict):\n            new_depth = dict_depth(v)\n            max_depth = max(max_depth, current_depth + new_depth)\n        else:\n            max_depth = max(max_depth, current_depth)\n    return max_depth",
        "test": "assert dict_depth({\"a\":1}) == 1, \"single key dictionary has depth 1\"",
        "num_ids": 868
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges for each rotation, and the number of rotations.\n    It returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    # Calculate the rotation index for the given index\n    rotation_index = index % len(ranges)\n    \n    # Calculate the current range index\n    range_index = rotation_index % len(ranges)\n    \n    # Calculate the remaining index in the current range\n    remaining_index = (index - range_index) % len(ranges[range_index])\n    \n    # Calculate the new index after the rotation\n    new_index = (ranges[range_index][remaining_index] + rotation_index) % len(arr)\n    \n    # Return the element at the new index\n    return arr[new_index]",
        "test": "assert find_Element([1, 2, 3, 4, 5], [[0, 5]], [[1, 1]], 0) == 1",
        "num_ids": 2171
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words",
        "test": "assert start_withp(['python', 'programming', 'programming', 'programming', 'programming']) == ['python', 'programming']",
        "num_ids": 766
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    curr_index = 0\n    max_ending_here = 0\n    \n    # Traverse through array from index to k-1\n    for i in range(index, k):\n        # Update max_ending_here if current element is greater\n        if a[i] > a[curr_index]:\n            max_ending_here = a[i]\n            curr_index = i\n        # Update curr_sum if max_ending_here is greater\n        curr_sum = max(curr_sum + a[i], max_ending_here)\n        # Update max_sum if curr_sum is greater\n        max_sum = max(max_sum, curr_sum)\n    \n    # Return max_sum\n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5, 6, 7], 7, 6, 5) == 11",
        "num_ids": 2318
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    This function takes a tuple and a row and column number as input. It returns a new tuple with the values from the input tuple that are in the specified row and column range.\n    \"\"\"\n    col_range = range(m, n+1)\n    row_range = range(len(tuplex))\n    new_tuplex = []\n    for i in col_range:\n        new_tuplex += [tuplex[j][i] for j in row_range]\n    return tuple(new_tuplex)",
        "test": "assert colon_tuplex((1,2,3),(3,2,1),4) == (3, 2, 3)",
        "num_ids": 1457
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Get the maximum number of products we want to find\n    max_products = N\n\n    # Initialize the variables for the largest products found so far\n    max_product1 = float('-inf')\n    max_product2 = float('-inf')\n\n    # Iterate over the possible combinations of factors to select\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the two selected factors\n            product = nums1[i] * nums2[j]\n\n            # Check if the product is larger than the current largest products\n            if product > max_product1:\n                max_product2 = max_product1\n                max_product1 = product\n            elif product > max_product2:\n                max_product2 = product\n\n            # Check if we have found the maximum number of products\n            if max_products == 0:\n                break\n\n    # Return the largest products found\n    return max_product1, max_product2",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1919
    },
    {
        "number": 309,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(5,10) == 10",
        "num_ids": 475
    },
    {
        "number": 310,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"Hello\") == ('H', 'e', 'l', 'l', 'o')",
        "num_ids": 555
    },
    {
        "number": 311,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Get the binary representation of the number\n    binary_str = bin(n)[2:]\n\n    # Find the position of the leftmost unset bit\n    leftmost_unset_bit = len(binary_str)\n    for i in range(len(binary_str)):\n        if binary_str[i] == '0':\n            leftmost_unset_bit = i\n            break\n\n    # Shift the binary representation to the left by the position of the leftmost unset bit\n    shifted_binary = '0' * leftmost_unset_bit + binary_str\n\n    # Convert the shifted binary to an integer\n    return int(shifted_binary, 2)",
        "test": "assert set_left_most_unset_bit(1) == 1, \"set_left_most_unset_bit failed to set the left most unset bit\"",
        "num_ids": 1409
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function calculates the volume of a cone.\n    \n    Args:\n        r (float): radius of the cone.\n        h (float): height of the cone.\n        \n    Returns:\n        float: volume of the cone.\n    '''\n    \n    # Calculating the volume of the cone using the formula: V = 1/3 * \u03c0 * r^2 * h\n    volume = (1/3) * math.pi * r**2 * h\n    \n    return volume",
        "test": "assert volume_cone(0,1) == 0.0, \"The volume of a cone with base radius 0 and height 1 should be 0.0.\"",
        "num_ids": 931
    },
    {
        "number": 388,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize variables\n    power = 1\n    highest = 0\n\n    # Iterate through all possible powers of 2 until we find the highest power of 2\n    while power <= n:\n        highest = power\n        power <<= 1\n\n    return highest",
        "test": "assert highest_Power_of_2(4) == 4",
        "num_ids": 747
    },
    {
        "number": 389,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(0) == 2, \"Expected 2, but got {}\".format(find_lucas(0))",
        "num_ids": 913
    },
    {
        "number": 390,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "test": "assert add_string(['apple', 'banana', 'cherry'], '{0} is delicious!') == ['apple is delicious!', 'banana is delicious!', 'cherry is delicious!']",
        "num_ids": 824
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    This function takes any number of lists as arguments and converts them into a nested dictionary.\n    '''\n    result = {}\n    for arg in args:\n        for item in arg:\n            if isinstance(item, list):\n                for subitem in item:\n                    if isinstance(subitem, dict):\n                        result.update(subitem)\n                    else:\n                        result[item] = subitem\n            else:\n                if isinstance(item, dict):\n                    result.update(item)\n                else:\n                    result[item] = item\n    return result",
        "test": "assert convert_list_dictionary([1,2,3], [4,5,6], [7,8,9]) == [{'key1': [1,2,3], 'key2': [4,5,6]}, {'key1': [7,8,9]}]",
        "num_ids": 988
    },
    {
        "number": 392,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 5\n    \n    if n == 4:\n        return 14\n    \n    if n == 5:\n        return 42\n    \n    if n == 6:\n        return 132\n    \n    if n == 7:\n        return 429\n    \n    if n == 8:\n        return 1430\n    \n    if n == 9:\n        return 4862\n    \n    if n == 10:\n        return 16796\n    \n    if n == 11:\n        return 65611\n    \n    if n == 12:\n        return 220801\n    \n    if n == 13:\n        return 832742\n    \n    if n == 14:\n        return 3244142\n    \n    if n == 15:\n        return 11764960\n    \n    if n == 16:\n        return 49992760\n    \n    if n == 17:\n        return 191781000\n    \n    if n == 18:\n        return 811739720\n    \n    if n == 19:\n        return 3556874200\n    \n    if n == 20:\n        return 15330839744\n    \n    if n == 21:\n        return 66236261600\n    \n    if n == 22:\n        return 273282136832\n    \n    if n == 23:\n        return 1142745313800\n    \n    if n == 24:\n        return 4450813839872\n    \n    if n == 25:\n        return 18896836089600\n    \n    if n == 26:\n        return 79764617589760\n    \n    if n == 27:\n        return 319108660442112\n    \n    if n == 28:\n        return 1302874259373728\n    \n    if n == 29:\n        return 5448251889943808\n    \n    if n == 30:\n        return 21075859104096512\n    \n    if n == 31:\n        return 86086593275740160\n    \n    if n == 32:\n        return 386143140668467200\n    \n    if n == 33:\n        return 1650930616654801920\n    \n    if n == 34:\n        return 6509712963398993408\n    \n    if n == 35:\n        return 26575200210939594240\n    \n    if n == 36:\n        return 102937577893699101440\n    \n    if n == 37:\n        return 429310184178640757760\n    \n    if n == 38:\n        return 1768063406944327664640\n    \n    if n == 39:\n        return 69887717669714933027840\n    \n    if n == 40:\n        return 288444543658829584645120\n    \n    if n == 41:\n        return 1246383034791593797015552\n    \n    if n == 42:\n        return 50904",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1798
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list of integers as input and returns the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 808
    },
    {
        "number": 394,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(test_tup)\n    # Check if set is empty\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False",
        "test": "assert check_distinct(('a', 'b', 'c')) == True",
        "num_ids": 801
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in it.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Loop through the dictionary and find the first character with frequency 1\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # If no character with frequency 1 is found, return None\n    return None",
        "test": "assert first_non_repeating_character(\"\") == None, \"Function should return None when the input string is empty.\"",
        "num_ids": 1226
    },
    {
        "number": 396,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_char('a') == True, \"Expected True, got False\"",
        "num_ids": 753
    },
    {
        "number": 397,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    '''\n    # Sorting the three numbers\n    sorted_nums = sorted([a, b, c])\n\n    # Finding the length of the array\n    n = len(sorted_nums)\n\n    # If the length of the array is odd, then the median is the middle element\n    if n % 2 == 1:\n        median = sorted_nums[n//2]\n    # If the length of the array is even, then the median is the average of the middle two elements\n    else:\n        median = (sorted_nums[n//2] + sorted_nums[n//2 - 1]) / 2\n\n    return median",
        "test": "assert median_numbers(5, 2, 7) == 5, \"median_numbers failed for input (5, 2, 7)\"",
        "num_ids": 1298
    },
    {
        "number": 398,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        # Convert the number to a string and iterate over each digit\n        for digit in str(num):\n            digit_sum += int(digit)\n        total_sum += digit_sum\n    return total_sum",
        "test": "assert sum_of_digits([123]) == 6",
        "num_ids": 1033
    },
    {
        "number": 399,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "test": "assert bitwise_xor((0,0,0), (0,0,0)) == (0,0,0), 'Incorrect result for (0,0,0) ^ (0,0,0)'",
        "num_ids": 928
    },
    {
        "number": 400,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return len(freq)",
        "test": "assert extract_freq(['hello', 'world', 'python', 'programming']) == 4",
        "num_ids": 1026
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same number of elements.\")\n        return\n    \n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n    \n    return tuple(result)\n",
        "test": "assert add_nested_tuples(((1,2), (3,4)), ((5,6), (7,8))) == ((6,8), (10,12))",
        "num_ids": 1154
    },
    {
        "number": 404,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(1,2) == 1, \"minimum function returns incorrect result\"",
        "num_ids": 509
    },
    {
        "number": 405,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two parameters, tuplex (the tuple to be searched) and tuple1 (the tuple to be searched in).\n    The function checks if any element of the first tuple exists within the second tuple.\n    If an element exists, the function returns True, else, it returns False.\n    \"\"\"\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False",
        "test": "assert check_tuplex(('apple', 'banana', 'cherry'), ('apple', 'banana', 'cherry')) == True",
        "num_ids": 693
    },
    {
        "number": 406,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0: \n        print(x, \"is even.\") \n        return False\n    else: \n        print(x, \"is odd.\") \n        return True",
        "test": "assert find_Parity(5) == True, \"The parity of 5 should be True\"",
        "num_ids": 679
    },
    {
        "number": 407,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rearrange_bigger(n):\n    # convert the given number to a list of digits\n    num_list = [int(digit) for digit in str(n)]\n    # reverse the list of digits\n    num_list.reverse()\n    # calculate the sum of the digits\n    num_sum = sum(num_list)\n    # reverse the list of digits again to get the next bigger number\n    next_num = int(''.join(map(str, num_list)))\n    # check if the next bigger number is greater than the original number\n    if next_num > n:\n        # return the next bigger number\n        return next_num\n    else:\n        # if the next bigger number is not greater than the original number,\n        # return the original number\n        return n",
        "test": "assert rearrange_bigger(111111111) == 111111111",
        "num_ids": 1404
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Sort the input arrays in ascending order\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize the result list\n    result = []\n\n    # Initialize the left pointer of the first array and the right pointer of the second array\n    left, right = 0, len(nums2) - 1\n\n    # While the result list has not reached k elements\n    while len(result) < k:\n\n        # Calculate the sum of the current element of the first array and the current element of the second array\n        current_sum = nums1[left] + nums2[right]\n\n        # If the current sum is less than or equal to zero, increase the left pointer of the first array\n        if current_sum <= 0:\n            left += 1\n\n        # If the current sum is greater than zero, decrease the right pointer of the second array\n        elif current_sum > 0:\n            right -= 1\n\n        # If the current sum is equal to zero, add the pair to the result list\n        elif current_sum == 0:\n            heapq.heappush(result, (nums1[left], nums2[right]))\n            left += 1\n            right -= 1\n\n    # Return the result list\n    return result",
        "test": "assert k_smallest_pairs([], [], 0) == []",
        "num_ids": 2700
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1,2,3), (4,5,6), (7,8,9)]) == (6, 7, 8) # example input",
        "num_ids": 960
    },
    {
        "number": 410,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val",
        "test": "assert min_val(['apple', 'banana', 'cherry']) == 'apple'",
        "num_ids": 784
    },
    {
        "number": 411,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all the words in the string to lowercase\n    words = word.lower()\n    # Remove any leading or trailing underscores\n    words = words.strip('_')\n    # Split the string into words using underscores as separators\n    words = words.split('_')\n    # Convert each word to camel case\n    camel_case = words[0]\n    for i in range(1, len(words)):\n        camel_case += words[i][0].upper() + words[i][1:]\n    return camel_case",
        "test": "assert snake_to_camel('snake_case') =='snakeCase'",
        "num_ids": 932
    },
    {
        "number": 412,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 807
    },
    {
        "number": 413,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes two arguments: the list of tuples and the value of n.\n    It returns the nth element of the list as a tuple.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        return None",
        "test": "assert extract_nth_element([(1, 2, 3), (4, 5, 6)], 1) == (1, 2, 3)",
        "num_ids": 786
    },
    {
        "number": 414,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Check if the list1 is a subsequence of list2\n    for item in list2:\n        if item in list1:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3,4,5], [2,3,4,5,6]) == True, \"Should return True\"",
        "num_ids": 917
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        if arr[i] * arr[i - 1] > max_product:\n            max_product = arr[i] * arr[i - 1]\n            max_pair = (arr[i], arr[i - 1])\n\n    return max_pair",
        "test": "assert max_Product([2, 3, -2, 4, -1]) == (2, 3)",
        "num_ids": 1087
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def group_tuples(Input): \n    # Create an empty dictionary to store the common elements\n    common_dict = {}\n    \n    # Loop through the list of tuples\n    for tup in Input: \n        # Extract the first element of the tuple\n        element = tup[0]\n        \n        # Check if the element is already in the dictionary\n        if element in common_dict: \n            # If it is, add the second element to the list of elements in the dictionary\n            common_dict[element].append(tup[1])\n        else: \n            # If it's not, add the element to the dictionary with a list containing only the second element\n            common_dict[element] = [tup[1]]\n    \n    # Create an empty list to store the groups of common elements\n    result = []\n    \n    # Loop through the dictionary to find groups of common elements\n    for element, values in common_dict.items(): \n        # Check if the list of values has more than one element\n        if len(values) > 1: \n            # If it does, create a new group with the common elements and append it to the result list\n            result.append((element, values))\n    \n    # Return the result list\n    return result",
        "test": "assert group_tuples([('apple', 'banana'), ('orange', 'banana'), ('apple', 'orange')]) == [('apple', ['banana', 'orange'])]",
        "num_ids": 880
    },
    {
        "number": 418,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    for element in lst:\n        length = len(str(element))\n        if length > max_length:\n            max_length = length\n            max_element = element\n    return max_element",
        "test": "assert Find_Max(['apple', 'banana', 'cherry']) == 'banana'",
        "num_ids": 813
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "test": "assert round_and_sum([1000, 1000, 1000, 1000, 1000]) == 10000000000",
        "num_ids": 823
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes\n",
        "test": "assert cube_Sum(0) == 0, \"cube_Sum(0) should be 0\"",
        "num_ids": 649
    },
    {
        "number": 421,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(str(elem) for elem in test_tup)",
        "test": "assert concatenate_tuple( () ) == \"\"",
        "num_ids": 742
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i*i*i\n    average = sum_of_cubes / n\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 0",
        "num_ids": 1033
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_element = []\n    for string in test_tuple:\n        rear_element.append(string[-1])\n    return rear_element",
        "test": "assert extract_rear(('hello', 'world', 'python', 'programming', 'java')) == ['world', 'python', 'java']",
        "num_ids": 553
    },
    {
        "number": 425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, 1, 2, 3, 1, 2, 3], 4) == 0",
        "num_ids": 873
    },
    {
        "number": 426,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 930
    },
    {
        "number": 427,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        return dt",
        "test": "assert change_date_format('2022-12-01') == '01-12-2022'",
        "num_ids": 1275
    },
    {
        "number": 428,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest gap\n    gap = len(my_list)\n    while gap > 1:\n        gap //= 2\n\n    # Do a gapped insertion sort for a list of n elements\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n\n        # Reduce the gap size\n        gap //= 2\n\n    return my_list\n",
        "test": "assert shell_sort([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "num_ids": 1639
    },
    {
        "number": 429,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check that the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length\")\n    # Initialize an empty list to store the result tuples\n    result_list = []\n    # Iterate over the elements of the tuples\n    for i in range(len(test_tup1)):\n        # Extract the i-th element from both tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        # Perform the elementwise and operation\n        result_elem = elem1 & elem2\n        # Append the result element to the result list\n        result_list.append(result_elem)\n    # Return the result list as a tuple\n    return tuple(result_list)",
        "test": "assert and_tuples((True, False), (True, False)) == (True, False), \"Incorrect result for and_tuples\"",
        "num_ids": 1221
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    directrix = -b / (2*a)\n\n    return directrix\n",
        "test": "assert parabola_directrix(1, 0, 1) == 0.0",
        "num_ids": 1453
    },
    {
        "number": 431,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Create a set of elements in list1 and list2\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Find the intersection of the two sets\n    intersect = set1.intersection(set2)\n\n    # Return True if there is at least one element in the intersection set\n    return True if intersect else False",
        "test": "assert common_element([1, 2, 3], [3, 4, 5]) == True",
        "num_ids": 859
    },
    {
        "number": 432,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * base2 * height\n    # Use the area to calculate the length of the base and height\n    base = math.sqrt(area / height)\n    height = area / base\n    # Calculate the length of the trapezium using the formula\n    trapezium_length = 0.5 * (base + height)\n    # Calculate the median of the trapezium\n    median = trapezium_length\n    return median",
        "test": "assert median_trapezium(1, 2, 1) == 1, \"median_trapezium(1, 2, 1) == 1\"",
        "num_ids": 2043
    },
    {
        "number": 433,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3], 0) == True",
        "num_ids": 846
    },
    {
        "number": 434,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba\\w*b\\b'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_one(\"abbab\") == True, \"text_match_one failed for 'abbab'\"",
        "num_ids": 1589
    },
    {
        "number": 435,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # use string formatting to extract the last digit of n\n    last_digit = str(n)[-1]\n    # return the last digit of n\n    return int(last_digit)",
        "test": "assert last_Digit(1234) == 4",
        "num_ids": 572
    },
    {
        "number": 436,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([1, 2, 3, -4, 5]) == [-4]",
        "num_ids": 724
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum(): # check if the character is alphanumeric\n            new_str += char # add the alphanumeric character to the new string\n    return new_str",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 492
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] < test_list[j][0] < test_list[i][1] or test_list[i][1] < test_list[j][0] < test_list[i][0]) and \\\n               (test_list[j][0] < test_list[i][0] < test_list[j][1] or test_list[j][1] < test_list[i][0] < test_list[j][0]):\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(\"apple\", \"banana\"), (\"orange\", \"banana\"), (\"grape\", \"pineapple\")]) == 1",
        "num_ids": 1712
    },
    {
        "number": 439,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize a variable to store the sum of all integers in the list\n    total = 0\n    # loop through each integer in the list\n    for num in L:\n        # add the integer to the total\n        total += num\n    # return the total\n    return total",
        "test": "assert multiple_to_single([1, 2, 3]) == 6",
        "num_ids": 855
    },
    {
        "number": 440,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Remove punctuation and split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Define a regular expression pattern for finding adverbs\n    pattern = r'\\b(very|quite|kindly|joyfully|greatly|not)\\b'\n    \n    # Initialize an empty list to store adverbs and their positions\n    adverbs = []\n    \n    # Loop through each word in the text\n    for i, word in enumerate(words):\n        # Check if the word matches the adverb pattern\n        if re.match(pattern, word):\n            # If it does, add it to the list of adverbs and its position in the sentence\n            adverbs.append((word, i))\n    \n    # Return the list of adverbs and their positions\n    return adverbs",
        "test": "assert find_adverb_position(\"The cat is too lazy.\") == []",
        "num_ids": 2196
    },
    {
        "number": 441,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2",
        "test": "assert surfacearea_cube(1) == 6, \"Failed to find surface area of a cube with side length 1.\"",
        "num_ids": 920
    },
    {
        "number": 442,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0",
        "num_ids": 1193
    },
    {
        "number": 443,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_max = float('-inf')\n    for num in list1:\n        if num < 0 and num > neg_max:\n            neg_max = num\n    return neg_max",
        "test": "assert largest_neg([-1, -2, -3, -4, -5]) == -1",
        "num_ids": 917
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + test_list[i][-K:])\n    return test_list",
        "test": "assert trim_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)], 0) == [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]",
        "num_ids": 1067
    },
    {
        "number": 445,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == (4, 10, 18)",
        "num_ids": 811
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the tuple\n    count = Counter(tup)\n    \n    # Loop through the list and check if each element is in the dictionary\n    for num in lst:\n        if num in count:\n            # If it is, increment the count of that element in the dictionary\n            count[num] += 1\n    \n    # Print the count of each element in the tuple\n    for key, value in count.items():\n        print(key, \":\", value)",
        "test": "assert count_Occurrence((('a', 'b', 'c'), ('d', 'e', 'f')), ['a', 'b', 'c', 'd', 'e', 'f']) == {'a': 2, 'b': 2, 'c': 1, 'd': 1, 'e': 1, 'f': 1}",
        "num_ids": 1150
    },
    {
        "number": 447,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 723
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    while p <= n:\n        sum += p\n        p += 1\n    return sum",
        "test": "assert cal_sum(100) == 5050, \"The output is not correct.\"",
        "num_ids": 801
    },
    {
        "number": 450,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts a specified size of strings from a list of string values.\n\n    Args:\n        str_list (list): List of string values.\n        size (int): Size of the strings to be extracted.\n\n    Returns:\n        list: List of extracted strings.\n    '''\n\n    return [str for str in str_list[:size]]",
        "test": "assert extract_string(['hello', 'world', 'python'], 0) == []",
        "num_ids": 859
    },
    {
        "number": 451,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    return re.sub('\\s+', '', text1)",
        "test": "assert remove_whitespaces('') == ''",
        "num_ids": 470
    },
    {
        "number": 452,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0",
        "test": "assert loss_amount(5000, 5000) == 0",
        "num_ids": 588
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum",
        "test": "assert sumofFactors(20) == 136 # Correct output: 136",
        "num_ids": 846
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\bwordz\\b'\n    return re.findall(pattern, text)",
        "test": "assert text_match_wordz('The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the zoo. The quick brown fox jumps over the lazy dog.') == True",
        "num_ids": 734
    },
    {
        "number": 455,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        return True\n    elif monthnum2 in ['02']:\n        if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) or (year % 4 == 0 and year % 100 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 in ['04', '06', '09', '11']:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(4) == False, 'The month number 4 does not have 31 days.'",
        "num_ids": 1460
    },
    {
        "number": 456,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string using slicing\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 537
    },
    {
        "number": 457,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) < min_len:\n                min_len = len(lst[i:j])\n                min_lst = lst[i:j]\n    return min_lst",
        "test": "assert Find_Min([1]) == [1]",
        "num_ids": 1167
    },
    {
        "number": 458,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b",
        "test": "assert rectangle_area(2,3) == 6",
        "num_ids": 446
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings in the string\n    upper_subs = re.findall(r'[A-Z]+', str1)\n\n    # Iterate over each uppercase substring and replace it with an empty string\n    for upper_sub in upper_subs:\n        str1 = str1.replace(upper_sub, '')\n\n    return str1",
        "test": "assert remove_uppercase(\"hello world\") == \"hello world\"",
        "num_ids": 602
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([[1,2,3],[4,5,6]]) == [1, 4]",
        "num_ids": 522
    },
    {
        "number": 461,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 26",
        "num_ids": 529
    },
    {
        "number": 462,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def combinations_list(lst):\n    result = []\n    n = len(lst)\n    for i in range(1, n+1):\n        for j in range(i):\n            result.append(lst[j:j+i])\n    return result",
        "test": "assert combinations_list([]) == []",
        "num_ids": 1382
    },
    {
        "number": 463,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_product = arr[0]\n    current_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n        \n    return max_product",
        "test": "assert max_subarray_product([-2,0,-1]) == 0",
        "num_ids": 1040
    },
    {
        "number": 464,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get the values of the dictionary\n    values = list(dict.values())\n    # Check if all values are same\n    if all(value == values[0] for value in values):\n        return True\n    else:\n        return False",
        "test": "assert check_value({'a': 1, 'b': 2, 'c': 3}, 1) == False",
        "num_ids": 1027
    },
    {
        "number": 465,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': None}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}",
        "num_ids": 932
    },
    {
        "number": 468,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # find the maximum subsequence sum\n    max_sum = 0\n    for i in range(len(arr)):\n        curr_sum = 0\n        for j in range(i, len(arr)):\n            curr_sum += arr[j]\n            max_sum = max(max_sum, curr_sum)\n\n    # find the maximum subsequence product\n    max_product = 0\n    for i in range(len(arr)):\n        curr_product = 1\n        for j in range(i, len(arr)):\n            curr_product *= arr[j]\n            max_product = max(max_product, curr_product)\n\n    return max_product",
        "test": "assert max_product([-2, 0, -1]) == 0, \"Incorrect result for [-2, 0, -1]\"",
        "num_ids": 1393
    },
    {
        "number": 470,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize variables\n    result = 0\n    n = len(test_tup)\n\n    # iterate over the tuple and add the pairwise sum to result\n    for i in range(n-1):\n        result += test_tup[i] + test_tup[i+1]\n\n    return result",
        "test": "assert add_pairwise((4, 5)) == 9",
        "num_ids": 1056
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product",
        "test": "assert find_remainder([7, 8, 9], 7) == 0",
        "num_ids": 930
    },
    {
        "number": 472,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return \"The list should have at least two numbers to be considered consecutive.\"\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n\n    return True",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 860
    },
    {
        "number": 473,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Creating a set for each list to remove duplicates\n    list1_set = set(test_list1)\n    list2_set = set(test_list2)\n\n    # Finding the intersection of two sets\n    intersection = list1_set.intersection(list2_set)\n\n    # Converting the intersection list back to tuple and returning it\n    return tuple(intersection)",
        "test": "assert tuple_intersection((1,2,3),(2,3,4)) == (2,3)",
        "num_ids": 1170
    },
    {
        "number": 474,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1: string, the original string\n    ch: string, the character to be replaced\n    newch: string, the new character to replace the old character with\n\n    Returns:\n    string, the modified string with the old character replaced by the new character\n    \"\"\"\n    return str1.replace(ch, newch)",
        "test": "assert replace_char('hello', 'l', 'z') == 'hezzo'",
        "num_ids": 727
    },
    {
        "number": 475,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_counter)",
        "test": "assert sort_counter({'apple': 2, 'banana': 1, 'cherry': 3, 'date': 4, 'elderberry': 5}) == {'elderberry': 5, 'apple': 2, 'cherry': 3, 'banana': 1, 'date': 4}",
        "num_ids": 986
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # initialize the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # loop through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # calculate the sum of the largest and smallest values\n    return largest + smallest",
        "test": "assert big_sum([0, 0, 0]) == 0",
        "num_ids": 996
    },
    {
        "number": 477,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string",
        "test": "assert is_lower(\"Hello\") == \"hello\", \"is_lower(Hello) returns incorrect result\"",
        "num_ids": 497
    },
    {
        "number": 478,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expression to find all lowercase substrings in the given string\n    pattern = r'\\b[a-z]+\\b'\n    # Use findall method to get all the lowercase substrings\n    lowercase_substrings = re.findall(pattern, str1)\n    # Remove all the lowercase substrings from the given string\n    for substring in lowercase_substrings:\n        str1 = re.sub(substring, '', str1)\n    return str1",
        "test": "assert remove_lowercase(\"Hello, World!\") == \"Hello, World!\"",
        "num_ids": 705
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit",
        "test": "assert first_Digit(0) == 0, \"The first digit of 0 should be 0.\"",
        "num_ids": 682
    },
    {
        "number": 554,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in range(len(list)):\n        if list[i] % 2!= 0:\n            odd_list.append(list[i])\n    return odd_list",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 621
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes_sum = sum([i**3 for i in range(1, n+1)])\n    sum_sum = sum(range(1, n+1))\n    return abs(cubes_sum - sum_sum)",
        "test": "assert difference(0) == 0",
        "num_ids": 853
    },
    {
        "number": 556,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_values = [0] * N\n    count = 0\n    \n    for i in range(N):\n        xor_values[i] = A[i] ^ A[(i+1)%N]\n        if xor_values[i] % 2!= 0:\n            count += 1\n    \n    return count",
        "test": "assert find_Odd_Pair([2, 4, 6, 8, 10], 5) == 0",
        "num_ids": 863
    },
    {
        "number": 557,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # Get the current character\n        current_char = string[i]\n        # Get the lowercase version of the character\n        lowercase_char = current_char.lower()\n        # Get the uppercase version of the character\n        uppercase_char = current_char.upper()\n        # Check if the current character is uppercase\n        if current_char.isupper():\n            # If the character is uppercase, make it lowercase\n            string = string[:i] + lowercase_char + string[i+1:]\n        else:\n            # If the character is lowercase, make it uppercase\n            string = string[:i] + uppercase_char + string[i+1:]\n    # Return the updated string\n    return string",
        "test": "assert toggle_string('12345') == '12345'",
        "num_ids": 806
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = 0\n    while n1!= 0 or n2!= 0:\n        digit1 = n1 % 10\n        digit2 = n2 % 10\n        if digit1!= digit2:\n            difference += abs(digit1 - digit2)\n        n1 = n1 // 10\n        n2 = n2 // 10\n    return difference",
        "test": "assert digit_distance_nums(0, 0) == 0",
        "num_ids": 1402
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    \n    max_sum = max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_sum = max(max_sum, max_ending_here)\n        \n    return max_sum",
        "test": "assert max_sub_array_sum([1, 2, 3, 4, 5], 5) == 15",
        "num_ids": 1285
    },
    {
        "number": 560,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Check if both tuples have elements\n    if not test_tup1 or not test_tup2:\n        return None\n\n    # Convert both tuples into sets\n    set_1 = set(test_tup1)\n    set_2 = set(test_tup2)\n\n    # Union of both sets\n    union_set = set_1.union(set_2)\n\n    # Convert the union set back to a list and sort it\n    sorted_union_list = sorted(list(union_set))\n\n    # Output the sorted union list\n    return sorted_union_list",
        "test": "assert union_elements((1, 3, 5), (2, 4, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1198
    },
    {
        "number": 562,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            current_length = 1\n        else:\n            current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length\n",
        "test": "assert Find_Max_Length([]) == 0, \"Empty list should return 0\"",
        "num_ids": 1151
    },
    {
        "number": 563,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert extract_values('Hello \"world\"') == ['world']",
        "num_ids": 720
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5], 5) == 10",
        "num_ids": 955
    },
    {
        "number": 565,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 551
    },
    {
        "number": 566,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and then iterate over its characters and add them up.\n    total = sum(int(digit) for digit in str(n))\n    return total",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 782
    },
    {
        "number": 567,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True, \"The list is not sorted in ascending order\"",
        "num_ids": 905
    },
    {
        "number": 568,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 273
    },
    {
        "number": 569,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Use the sort() method to sort the sublist\n        sublist.sort()\n\n    return list1",
        "test": "assert sort_sublists([[1,2,3],[4,5,6],[7,8,9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 746
    },
    {
        "number": 572,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result",
        "test": "assert two_unique_nums([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 1090
    },
    {
        "number": 573,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    unique_product = 1\n    for num in unique_list:\n        unique_product *= num\n    return unique_product",
        "test": "assert unique_product([1, 1, 1, 1, 1]) == 1 # product of unique numbers in the list [1, 1, 1, 1, 1]",
        "num_ids": 1045
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14159*r**2 + 2*3.14159*r*h + 2*3.14159*h**2\n    return area",
        "test": "assert surfacearea_cylinder(4,5) == 172.78759596326762, \"Failed on test case: surfacearea_cylinder(4,5)\"",
        "num_ids": 1025
    },
    {
        "number": 576,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] in B:\n            if A[i:].index(A[i]) == 0:\n                return True\n    return False",
        "test": "assert is_Sub_Array([1, 2, 3], [1, 2]) == False, \"Test case 1 failed\"",
        "num_ids": 1177
    },
    {
        "number": 577,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the input number to a string\n    str_n = str(n)\n\n    # Find the last digit of the factorial of the input number\n    last_digit = str_n[len(str_n)-1]\n\n    # Return the last digit of the factorial\n    return int(last_digit)",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 1827
    },
    {
        "number": 578,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    interleaved_list = []\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            interleaved_list.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            interleaved_list.append(list2[j])\n            j += 1\n        else:\n            interleaved_list.append(list3[k])\n            k += 1\n            \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            interleaved_list.append(list1[i])\n            i += 1\n        else:\n            interleaved_list.append(list2[j])\n            j += 1\n            \n    while i < len(list1) and k < len(list3):\n        if list1[i] < list3[k]:\n            interleaved_list.append(list1[i])\n            i += 1\n        else:\n            interleaved_list.append(list3[k])\n            k += 1\n            \n    while j < len(list2) and k < len(list3):\n        if list2[j] < list3[k]:\n            interleaved_list.append(list2[j])\n            j += 1\n        else:\n            interleaved_list.append(list3[k])\n            k += 1\n            \n    while i < len(list1):\n        interleaved_list.append(list1[i])\n        i += 1\n        \n    while j < len(list2):\n        interleaved_list.append(list2[j])\n        j += 1\n        \n    while k < len(list3):\n        interleaved_list.append(list3[k])\n        k += 1\n        \n    return interleaved_list",
        "test": "assert interleave_lists([],[],[]) == []",
        "num_ids": 1379
    },
    {
        "number": 579,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements",
        "test": "assert find_dissimilar(('a', 'b', 'c', 'd', 'e'), ('a', 'b', 'c', 'd', 'e')) == []",
        "num_ids": 1032
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def flatten(nested_tuple):\n        '''\n        Flatten the nested tuple.\n        '''\n        flattened_list = []\n        for i in nested_tuple:\n            if type(i) is tuple:\n                flattened_list.extend(flatten(i))\n            else:\n                flattened_list.append(i)\n        return flattened_list\n\n    def remove_unequal(lst, fnc):\n        '''\n        Remove the unequal elements from the list using a function.\n        '''\n        return [x for x in lst if fnc(x, lst[0])]\n\n    flattened_list = flatten(test_tuple)\n    even_list = remove_unequal(flattened_list, lambda x, y: x == y)\n\n    return even_list\n",
        "test": "assert even_ele((1, 2, 3), lambda x: x % 2 == 0) == (1, 2, 3)",
        "num_ids": 1058
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s \n    print(\"The surface area of the square pyramid is:\", area)",
        "test": "assert surface_Area(3,4) == 16, \"The surface area of a square pyramid with base edge 3 and height 4 is incorrect.\"",
        "num_ids": 698
    },
    {
        "number": 582,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({1: \"apple\", 2: \"banana\", 3: \"cherry\"}) == False, \"The dictionary is not empty\"",
        "num_ids": 510
    },
    {
        "number": 583,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)\n\nprint(catalan_number(5)) # Output: 16796",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 729
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with \"ly\"\n    pattern = r'\\b(\\w+ly)\\b'\n\n    # Use the regular expression search method to find all matches in the given string\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the adverb and its positions\n    adverbs = []\n\n    # Iterate over the matches and add the adverb and its positions to the adverbs list\n    for match in matches:\n        start = text.find(match[0])\n        end = start + len(match[0])\n        adverbs.append((match[0], start, end))\n\n    # Return the list of adverbs and their positions\n    return adverbs",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy doge.\") == [('over', 27), ('the', 35)]",
        "num_ids": 1102
    },
    {
        "number": 585,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the top n most expensive items\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items from the min heap\n    return min_heap[:n]",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 1153
    },
    {
        "number": 586,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n > len(l):\n        return 'Invalid index'\n    else:\n        return l[:n] + [l[n]] + l[n+1:]",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 925
    },
    {
        "number": 587,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 408
    },
    {
        "number": 588,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if not nums:\n        return \"List is empty!\"\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return abs(largest - smallest)",
        "test": "assert big_diff([1, 1, 1, 1, 1]) == 0",
        "num_ids": 848
    },
    {
        "number": 589,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        for j in range(i, b+1):\n            if i*i + j*j == i*i:\n                result.append(i)\n    return result",
        "test": "assert perfect_squares(10, 15) == []",
        "num_ids": 1110
    },
    {
        "number": 590,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    This function takes in polar coordinates (rho and theta) and returns\n    the corresponding rectangular coordinates (x and y).\n    \n    Args:\n        rho (float): The radius of the point in polar coordinates.\n        theta (float): The angle (in radians) of the point in polar coordinates.\n    \n    Returns:\n        x (float): The corresponding x coordinate of the point in rectangular coordinates.\n        y (float): The corresponding y coordinate of the point in rectangular coordinates.\n    \"\"\"\n    \n    # Convert the angle to radians\n    theta = cmath.pi * theta / 180\n    \n    # Calculate the rectangular coordinates\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    \n    return x, y",
        "test": "assert polar_rect(3, 0) == (3, 0)",
        "num_ids": 871
    },
    {
        "number": 591,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an argument and swaps the first and last elements of the list.\n    '''\n    # Check if the list is empty\n    if len(newList) == 0:\n        return newList\n\n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # Return the swapped list\n    return newList",
        "test": "assert swap_List(['a', 'b', 'c']) == ['c', 'b', 'a']",
        "num_ids": 900
    },
    {
        "number": 592,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize variables\n    num = 1\n    den = 1\n\n    # Find the product of consecutive binomial co-efficients\n    for i in range(1,k+1):\n        num *= (n-i+1)\n        den *= i\n\n    # Find the sum of the product of consecutive binomial co-efficients\n    result = num / den\n\n    return result",
        "test": "assert binomial_Coeff(1,1) == 1",
        "num_ids": 1055
    },
    {
        "number": 593,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeroes from the ip address\n    ip = re.sub(r'^0+', '', ip)\n\n    # Return the modified ip address\n    return ip",
        "test": "assert removezero_ip('192.168.1.100') == '192.168.1.100'",
        "num_ids": 912
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = list1[0]\n    first_odd = list1[1]\n    \n    if first_even % 2 == 0 and first_odd % 2 == 1:\n        diff = first_even - first_odd\n    else:\n        diff = first_odd - first_even\n        \n    return diff",
        "test": "assert diff_even_odd([2, 4, 6, 8, 10]) == 2",
        "num_ids": 984
    },
    {
        "number": 595,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    dp = [[0]*(n+1) for i in range(m+1)]\n\n    # build the DP table\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[j-1] == str2[i-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][n]",
        "test": "assert min_Swaps(\"101010\", \"101010\") == 0, \"Incorrect output\"",
        "num_ids": 1651
    },
    {
        "number": 596,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size",
        "test": "assert tuple_size( () ) == 0",
        "num_ids": 666
    },
    {
        "number": 597,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes three arguments:\n    - arr1: first sorted array\n    - arr2: second sorted array\n    - k: the value of k\n    '''\n    # initialize the index variables\n    i = 0\n    j = 0\n    # initialize the kth variable\n    kth_element = None\n\n    # loop through the arrays until we find k elements\n    while i < len(arr1) and j < len(arr2) and k > 0:\n        # compare the first elements of each array\n        if arr1[i] < arr2[j]:\n            # if arr1 is smaller, increase i and decrease k\n            i += 1\n            k -= 1\n        elif arr1[i] > arr2[j]:\n            # if arr2 is smaller, increase j and decrease k\n            j += 1\n            k -= 1\n        else:\n            # if arr1 and arr2 have the same elements, increment both indexes\n            i += 1\n            j += 1\n            k -= 1\n\n    # if we find k elements, return the kth element\n    if k == 0:\n        kth_element = arr1[i] if i < len(arr1) else arr2[j]\n    return kth_element",
        "test": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 100) == None",
        "num_ids": 2010
    },
    {
        "number": 598,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Calculate the sum of the cubes of the digits\n    sum_of_cubes = 0\n    for digit in number_str:\n        digit_cube = int(digit)**3\n        sum_of_cubes += digit_cube\n\n    # Compare the sum of cubes with the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(1634) == False, \"Failed for 1634\"",
        "num_ids": 1009
    },
    {
        "number": 599,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average",
        "test": "assert sum_average(5) == (15, 3.0)",
        "num_ids": 816
    },
    {
        "number": 600,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 445
    },
    {
        "number": 602,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None",
        "test": "assert first_repeated_char(\"aabbccddeeffgg\") == \"a\"",
        "num_ids": 702
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers",
        "test": "assert get_ludic(1) == []",
        "num_ids": 2278
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string by spaces\n    reversed_words = [] # create an empty list to store reversed words\n    for i in range(len(words)-1, -1, -1): # iterate over the words in reverse order\n        reversed_words.append(words[i]) # add the reversed word to the list\n    reversed_string =''.join(reversed_words) # join the reversed words with spaces\n    return reversed_string # return the reversed string",
        "test": "assert reverse_words(\"\") == \"\"",
        "num_ids": 671
    },
    {
        "number": 605,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is 2\n    if num == 2:\n        return True\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    # If the number is not divisible by any number between 2 and the square root of the number\n    return True\n",
        "test": "assert prime_num(2) == True, \"2 is not a prime number\"",
        "num_ids": 795
    },
    {
        "number": 606,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian",
        "test": "assert radian_degree(90) == math.pi/2, \"The function is not correct for converting 90 degrees to radians.\"",
        "num_ids": 830
    },
    {
        "number": 607,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None",
        "test": "assert find_literals(\"hello world\", r'\\w+') == (\"hello\", 0, 5)",
        "num_ids": 997
    },
    {
        "number": 608,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [0, 1]\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    return bell_numbers[n]",
        "test": "assert bell_Number(1) == 1, \"bell_Number(1) should be 1.\"",
        "num_ids": 873
    },
    {
        "number": 610,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1160
    },
    {
        "number": 611,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize the max value as 0\n    max_val = 0\n\n    # loop through the matrix and find the max of then'th column\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n\n    return max_val",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 8",
        "num_ids": 1203
    },
    {
        "number": 612,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list",
        "test": "assert merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]",
        "num_ids": 945
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum",
        "test": "assert cummulative_sum((1, 2, 3, 4, 5)) == 15",
        "num_ids": 842
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        avg = total/len(nums[i])\n        avg_list.append(avg)\n    return avg_list",
        "test": "assert average_tuple([(1,2),(3,4),(5,6),(7,8),(9,10)]) == [2.75, 4.75, 6.75]",
        "num_ids": 906
    },
    {
        "number": 616,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(i % j for i, j in zip(test_tup1, test_tup2))",
        "test": "assert tuple_modulo((1, 2, 3), (2, 3, 4)) == (1, 2, 3)",
        "num_ids": 956
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    curr_pos = (0, 0)\n    # Loop through steps\n    for i in range(steps):\n        # Move to next position\n        if curr_pos[1] >= d:\n            curr_pos = (curr_pos[0], curr_pos[1] - d)\n            jumps += 1\n        else:\n            curr_pos = (curr_pos[0] + 1, curr_pos[1])\n    # Return number of jumps\n    return jumps",
        "test": "assert min_Jumps(100, 1) == 0",
        "num_ids": 1868
    },
    {
        "number": 618,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns their element-wise division.\n    '''\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]",
        "test": "assert div_list([1,2,3,4,5],[2,3,4,5,6]) == [0.5, 0.6666666666666666, 0.75, 0.8, 0.8333333333333334]",
        "num_ids": 805
    },
    {
        "number": 619,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # initialize variables to keep track of the numbers and letters\n    nums = []\n    letters = []\n\n    # loop through each character in the string\n    for char in test_str:\n\n        # if the character is a number, append it to the nums list\n        if char.isdigit():\n            nums.append(char)\n\n        # otherwise, append it to the letters list\n        else:\n            letters.append(char)\n\n    # concatenate the two lists into one and return the result\n    return ''.join(letters + nums)",
        "test": "assert move_num(\"12345\") == \"12345\"",
        "num_ids": 1164
    },
    {
        "number": 620,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize variables to keep track of largest subset size and the current subset size\n    max_size = 0\n    curr_size = 1\n    \n    # Iterate over each number in the list\n    for i in range(1, len(a)):\n        # If the difference between the current number and the next number is divisible by 2, add the current number to the subset\n        if a[i] % 2 == 0 and (i == len(a)-1 or a[i+1] % 2!= 0):\n            curr_size += 1\n        else:\n            # If the current subset is larger than the largest subset found so far, update the largest subset size\n            if curr_size > max_size:\n                max_size = curr_size\n            # Reset the current subset size to 1\n            curr_size = 1\n            \n    # If the current subset size is larger than the largest subset found so far, update the largest subset size\n    if curr_size > max_size:\n        max_size = curr_size\n        \n    return max_size",
        "test": "assert largest_subset([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1623
    },
    {
        "number": 622,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # sort the two lists\n    arr1.sort()\n    arr2.sort()\n    \n    # find the median based on the size of the lists\n    if n % 2 == 0:\n        # if the size is even, take the average of the middle two elements\n        median = (arr1[n//2-1] + arr1[n//2]) / 2.0\n    else:\n        # if the size is odd, take the middle element\n        median = arr1[n//2]\n    \n    # return the median\n    return median",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 3) == 3.0, \"Median should be 3.0\"",
        "num_ids": 1614
    },
    {
        "number": 623,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([2,3,4], 3) == [8, 27, 64]",
        "num_ids": 649
    },
    {
        "number": 624,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 323
    },
    {
        "number": 625,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 853
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the area of the smallest triangle that can be inscribed in the semicircle\n    area1 = math.pi * r * r\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area2 = math.pi * r * r * math.sqrt(3) / 4\n    # return the maximum area\n    return max(area1, area2)",
        "test": "assert triangle_area(1) == 3.141592653589793",
        "num_ids": 1249
    },
    {
        "number": 627,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes an array of natural numbers and returns the smallest missing number in the array.\n    If the array is not sorted, the function can be called with start and end arguments to specify the range of the array.\n    \"\"\"\n\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if array[i]!= i+1:\n            return i+1\n\n    return end+1",
        "test": "assert find_First_Missing([1,2,3,4,5]) == 6",
        "num_ids": 1209
    },
    {
        "number": 628,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 312
    },
    {
        "number": 629,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]",
        "num_ids": 832
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Check if the element is a tuple and not a list\n    if type(ele)!= list:\n        ele = [ele]\n\n    # Extract adjacent coordinates\n    adj = []\n    for i in range(len(ele)):\n        for j in range(i+1, len(ele)):\n            adj.append((ele[i], ele[j]))\n\n    # Add sub-lists to adjacent coordinates\n    for s in sub:\n        if type(s)!= list:\n            s = [s]\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                adj.append((s[i], s[j]))\n\n    return adj",
        "test": "assert adjac((1, 2), [(3, 4)]) == []",
        "num_ids": 1949
    },
    {
        "number": 631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with underscores and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")",
        "test": "assert replace_spaces('hello   world') == 'hello__world'",
        "num_ids": 617
    },
    {
        "number": 632,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            count += 1\n    return num_list",
        "test": "assert move_zero([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1306
    },
    {
        "number": 633,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def pair_xor_Sum(arr,n):\n    xor_sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum",
        "test": "assert pair_xor_Sum([1,2,3,4,5,6,7], 7) == 0",
        "num_ids": 683
    },
    {
        "number": 635,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Build max heap\n    hq.heapify(iterable)\n    # Extract elements from heap\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1375
    },
    {
        "number": 637,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(0, 0) == True",
        "num_ids": 872
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v >= 3 and v <= 6 and t >= 0 and t <= 40:\n        chill = (13.12 + 0.6215 * t) * math.log(v)\n        chill = round(chill)\n        return chill\n    else:\n        return \"Invalid inputs\"",
        "test": "assert wind_chill(20, 10) == 15",
        "num_ids": 1156
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of the lengths of the names\n    name_length_sum = 0\n    \n    # loop through each name in the list\n    for name in sample_names:\n        # if the name starts with a lowercase letter, skip to the next name\n        if name[0].islower():\n            continue\n        # else, add the length of the name to the sum\n        else:\n            name_length_sum += len(name)\n            \n    # return the sum of the lengths of the names\n    return name_length_sum",
        "test": "assert sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Harry\"]) == 35, \"Incorrect output for sample_nam(['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Harry'])\"",
        "num_ids": 1282
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\(.*?\\)'\n    regex = re.compile(pattern)\n    result = regex.sub('', items)\n    return result",
        "test": "assert remove_parenthesis(\"hello world\") == \"hello world\"",
        "num_ids": 607
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a, b = 1, 2\n    for i in range(2, n+1):\n        a, b = b, a + b\n    return a",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 706
    },
    {
        "number": 643,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r\"(?<=\\b)(z)(?=\\b)\")\n    match = pattern.search(text)\n    if match:\n        return True\n    return False",
        "test": "assert text_match_wordz_middle('The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.') == False",
        "num_ids": 904
    },
    {
        "number": 644,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Reverse the array from the start to k-1\n    for i in range(0, k-1): \n        input[i], input[k-1-i] = input[k-1-i], input[i] \n        \n    # Reverse the array from k to n-1\n    for i in range(k, len(input)): \n        input[i], input[k-1-i] = input[k-1-i], input[i] \n        \n    return input",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 1229
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup",
        "test": "assert add_dict_to_tuple(test_tup=(1, 2, 3), test_dict={\"key1\": 4, \"key2\": 5}) == (1, 2, 3, {\"key1\": 4, \"key2\": 5})",
        "num_ids": 744
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_sum = float('-inf')\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                # If the cell is the top-left corner, its sum is its cost\n                max_sum = cost[i][j]\n            elif i == 0:\n                # If the cell is on the top row, its sum is the sum of the cost to the left cell and the current cell\n                max_sum = max(max_sum, cost[i][j] + cost[i][j-1])\n            elif j == 0:\n                # If the cell is on the left column, its sum is the sum of the cost above the current cell and the current cell\n                max_sum = max(max_sum, cost[i][j] + cost[i-1][j])\n            else:\n                # If the cell is in the middle, its sum is the sum of the cost to the left cell, the current cell, and the cost above the current cell\n                max_sum = max(max_sum, cost[i][j] + cost[i-1][j] + cost[i][j-1])\n\n    # Compute the average over all paths\n    num_paths = N * N\n    avg_sum = max_sum / num_paths\n\n    return avg_sum",
        "test": "assert maxAverageOfPath([[1]]) == 1.0",
        "num_ids": 2083
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = (height, weight)\n    return result",
        "test": "assert filter_data({'Alice': (170, 80), 'Bob': (175, 90), 'Charlie': (165, 75), 'David': (180, 100)}, 160, 70) == {'Charlie': (165, 75)}",
        "num_ids": 1895
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 1283
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # loop through each digit of the base\n    for digit in str(base):\n        # add the digit to the sum to the specified power\n        sum += int(digit) ** power\n    # return the sum\n    return sum",
        "test": "assert power_base_sum(3, 3) == 27 # 3^3 = 3 * 3 * 3 = 27",
        "num_ids": 1076
    },
    {
        "number": 725,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Define the pattern to match quotation marks and values between them\n    pattern = r'\"([^\"]+)\"'\n\n    # Use the re.findall() function to extract all the values between quotation marks\n    values = re.findall(pattern, text1)\n\n    return values",
        "test": "assert extract_quotation(\"He said, \\\"The yellow dog slept in the green room.\\\"\") == ['The yellow dog slept in the green room.']",
        "num_ids": 1019
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # define the length of the tuple\n    N = len(test_tup)\n    # create an empty tuple to store the result\n    result_tup = ()\n    # loop through the tuple, multiplying the current element with the next element and appending to the result tuple\n    for i in range(N-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    # append the last element to the result tuple\n    result_tup += (test_tup[-1],)\n    # return the result tuple\n    return result_tup",
        "test": "assert multiply_elements((0,1,0,1,0)) == (0,0,0,0,0)",
        "num_ids": 1040
    },
    {
        "number": 728,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]",
        "test": "assert sum_list([], []) == []",
        "num_ids": 753
    },
    {
        "number": 730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group consecutive duplicates\n    grouped = groupby(enumerate(nums), lambda x: x[0] == x[1])\n\n    # remove duplicates and return as list\n    return [num for group in grouped for num in group[1]]",
        "test": "assert consecutive_duplicates([1,2,3,1,2,3,4,5,6,1,2,3,4,5]) == [1,2,3,4,5,6]",
        "num_ids": 824
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r**2 * h",
        "test": "assert lateralsurface_cone(4, 7) == math.pi * (4**2 + 7**2)",
        "num_ids": 877
    },
    {
        "number": 732,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # create a regular expression pattern for matching spaces, commas, and dots\n    pattern = re.compile(r'[^\\w\\s]')\n    # replace all occurrences of special characters with colons\n    text = pattern.sub(':', text)\n    return text",
        "test": "assert replace_specialchar(\"test, test.\") == \"test: test:\"",
        "num_ids": 654
    },
    {
        "number": 733,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 2, 3, 3, 4], 3) == 3",
        "num_ids": 1054
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    MOD = 1000000007\n    \n    # Function to calculate products of subarrays\n    def subarray_prod(arr, start, end):\n        prod = 1\n        for i in range(start, end+1):\n            prod = (prod*arr[i] % MOD)\n        return prod\n    \n    # Calculate sum of products of all possible sublists\n    sum_prod = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_prod += subarray_prod(arr, i, j)\n            sum_prod %= MOD\n    \n    return sum_prod",
        "test": "assert sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 1678
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # get the number of bits in the number\n    num_bits = len(bin(n)[2:])\n    \n    # loop over the middle bits (excluding first and last)\n    for i in range(1, num_bits - 1):\n        # set the bit to the opposite value\n        n = n ^ (1 << i)\n    \n    # return the modified number\n    return n",
        "test": "assert set_middle_bits(0) == 0, \"set_middle_bits(0) should return 0\"",
        "num_ids": 1131
    },
    {
        "number": 736,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    if a[index] == x:\n        return index\n    elif x < a[index]:\n        return index\n    else:\n        return index + 1",
        "test": "assert left_insertion([1,3,4,5,6], 3) == 1, \"left_insertion([1,3,4,5,6], 3) should be 1\"",
        "num_ids": 1173
    },
    {
        "number": 737,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.search(regex, string))",
        "test": "assert check_str(\"123\") == False, \"check_str('123') should return False\"",
        "num_ids": 681
    },
    {
        "number": 738,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 620
    },
    {
        "number": 739,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    sum_natural = sum(range(1, n+1))\n    return math.floor(math.log10(sum_natural) + math.log10(n)) + 1",
        "test": "assert find_Index(1) == 1",
        "num_ids": 1239
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Create an empty dictionary\n    dict_ = {}\n    # Loop through the tuple elements\n    for i in range(len(test_tup)):\n        # If the current index is even, add the current element and the next element to the dictionary\n        if i % 2 == 0:\n            dict_[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return dict_",
        "test": "assert tuple_to_dict((1, (2, (3, 4)))) == {1: 2, 3: 4}",
        "num_ids": 1108
    },
    {
        "number": 741,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert all_Characters_Same(\"abced\") == False",
        "num_ids": 841
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side ** 2",
        "test": "assert area_tetrahedron(1) == math.sqrt(3), \"Incorrect area of tetrahedron\"",
        "num_ids": 699
    },
    {
        "number": 743,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list",
        "test": "assert rotate_right([1,2,3,4,5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1189
    },
    {
        "number": 744,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3, None, 'four')) == True",
        "num_ids": 619
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two parameters startnum and endnum and returns a list containing all the numbers within the given range where every number is divisible by every digit it contains.\n    \"\"\"\n\n    # Helper function to check if a number is divisible by a certain digit\n    def is_divisible(num, digit):\n        return num % digit == 0\n\n    # Helper function to check if a number is divisible by all digits in a range\n    def is_divisible_all(num, start, end):\n        for i in range(start, end+1):\n            if not is_divisible(num, i):\n                return False\n        return True\n\n    # Helper function to check if a number is divisible by a range of digits\n    def is_divisible_range(num, start, end):\n        for i in range(start, end+1):\n            if not is_divisible(num, i):\n                return False\n        return True\n\n    # Helper function to check if a number is divisible by all digits in a list\n    def is_divisible_list(num, digits):\n        for digit in digits:\n            if not is_divisible(num, digit):\n                return False\n        return True\n\n    # Helper function to check if a number is divisible by a range of digits in a list\n    def is_divisible_range_list(num, start, end, digits):\n        for digit in digits:\n            if not is_divisible_range(num, start, end):\n                return False\n        return True\n\n    # Helper function to check if a number is divisible by all digits in a range\n    def is_divisible_range_digits(num, start, end, digits):\n        for digit in digits:\n            if not is_divisible_range(num, digit, digit):\n                return False\n        return True\n\n    # Function to check if a number is divisible by every digit in a range\n    def is_divisible_by_digits_helper(num, start, end):\n        # Check if the number is divisible by all digits in the range\n        if not is_divisible_all(num, start, end):\n            return False\n\n        # Check if the number is divisible by a range of digits\n        if not is_divisible_range_digits(num, start, end, [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n            return False\n\n        # Check if the number is divisible by a list of digits\n        if not is_divisible_list(num, [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n            return False\n\n        # Check if the number is divisible by a range of digits in a list\n        if not is_divisible_range_list(num, start, end, [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n            return False\n\n        # If all the checks pass, the number is divisible by every digit in the range\n        return True\n\n    # Initialize a list to store the divisible numbers\n    divisible_numbers = []\n\n    # Iterate over the range of numbers and check if they are divisible by every digit in the range\n    for num in range(startnum, endnum+1):\n        if is_divisible_by_digits_helper(num, 1, 9):\n            divisible_numbers.append(num)\n\n    # Return the list of divisible numbers\n    return divisible_numbers",
        "test": "assert divisible_by_digits(10, 99) == [12, 24, 36, 48, 60, 72, 84, 96]",
        "num_ids": 1785
    },
    {
        "number": 746,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r\n",
        "test": "assert sector_area(10,360) == math.pi*10**2, \"Test failed for radius 10 and angle 360\"",
        "num_ids": 1001
    },
    {
        "number": 747,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def lcs_of_three(X, Y, Z): \n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for i in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                p[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    lcs = []\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GXTXAYB\") == \"GTAB\"",
        "num_ids": 2642
    },
    {
        "number": 748,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n\n    # Find all occurrences of capital words\n    matches = re.findall(r'\\b\\w+\\b', string)\n\n    # Iterate over the matches and replace them with spaces\n    for match in matches:\n        string = re.sub(f'\\b{match}\\b', f' {match} ', string)\n\n    # Return the modified string\n    return string",
        "test": "assert capital_words_spaces('') == ''",
        "num_ids": 1061
    },
    {
        "number": 749,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    # Convert all strings to integers\n    nums = [int(num) for num in nums_str]\n\n    # Sort the list numerically\n    nums.sort()\n\n    # Convert sorted list back to strings\n    sorted_nums = [str(num) for num in nums]\n\n    return sorted_nums",
        "test": "assert sort_numeric_strings([\"10\", \"2\", \"5\", \"12\", \"1\"]) == [\"1\", \"2\", \"5\", \"10\", \"12\"]",
        "num_ids": 1420
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)",
        "test": "assert add_tuple([1], (1, 2, 3)) == [1, 2, 3]",
        "num_ids": 712
    },
    {
        "number": 751,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) % 2!= 0:\n        print(\"Array should have even length\")\n        return False\n    return check_min_heap_helper(arr, len(arr)//2)\n",
        "test": "assert check_min_heap_helper([1,2,3], 2) == True, \"Case 4: Max heap\"",
        "num_ids": 1834
    },
    {
        "number": 752,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 1:\n        return n\n\n    a = 1\n    b = 1\n    c = a + b\n    for i in range(2, n):\n        a, b = b, c\n        c = a + b\n\n    return c",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 2202
    },
    {
        "number": 753,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # Sort the list of tuples\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize minimum k and index\n    min_k_index = 0\n    min_k = test_list[0]\n\n    # Loop through the list of tuples\n    for i in range(K):\n        if test_list[i][1] < min_k[1]:\n            min_k_index = i\n            min_k = test_list[i]\n\n    # Return the minimum k\n    return min_k",
        "test": "assert min_k([('apple', 2), ('banana', 1), ('orange', 4), ('kiwi', 3)], 2) == ('banana', 1)",
        "num_ids": 1783
    },
    {
        "number": 754,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common:\n            common.append(l1[i])\n    return common",
        "test": "assert extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) == []",
        "num_ids": 1219
    },
    {
        "number": 755,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n    return second_smallest",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 742
    },
    {
        "number": 756,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'\\b(a)\\1*\\b')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one('abcde') == False",
        "num_ids": 1655
    },
    {
        "number": 757,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j]!= test_list[i]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs(['aaa', 'bbb', 'ccc', 'ddd', 'eee']) == 0, 'count_reverse_pairs([\\'aaa\\', \\'bbb\\', \\'ccc\\', \\'ddd\\', \\'eee\\']) == 0'",
        "num_ids": 1294
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n    \n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert the list to a tuple and add it to the dictionary\n        if tuple(sublist) in count_dict:\n            count_dict[tuple(sublist)] += 1\n        else:\n            count_dict[tuple(sublist)] = 1\n    \n    # Return the dictionary\n    return count_dict",
        "test": "assert unique_sublists([1, 2, 3, 4, 5, 5]) == {('5',): 2, ('1', '2', '3', '4', '5'): 1}",
        "num_ids": 1201
    },
    {
        "number": 759,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Split the input string into a list of digits\n    num_list = list(str(num))\n\n    # Check if the first and last digits are 0\n    if num_list[0] == '0' and num_list[-1] == '0':\n        return False\n\n    # Iterate through the list and check if the digits are followed by a period\n    is_decimal = True\n    for i in range(1, len(num_list)-1):\n        if num_list[i] == '.' and num_list[i+1:i+3] == '00':\n            is_decimal = False\n            break\n\n    return is_decimal",
        "test": "assert is_decimal(\"0.1\") == True, \"Test 2: '0.1' should be True\"",
        "num_ids": 1318
    },
    {
        "number": 760,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            unique = False\n            break\n    return unique",
        "test": "assert unique_Element([1, 2, 3, 4, 5]) == True, \"unique_Element([1, 2, 3, 4, 5]) should return True\"",
        "num_ids": 1176
    },
    {
        "number": 762,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(4) == False, \"Month number 4 should not contain 30 days.\"",
        "num_ids": 900
    },
    {
        "number": 763,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff",
        "test": "assert find_min_diff([1, 5, 3, 7, 9, 2, 6], 7) == 1 # correct output",
        "num_ids": 1063
    },
    {
        "number": 764,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"1234\") == 4, \"The function should return 4 for the input '1234'\"",
        "num_ids": 692
    },
    {
        "number": 765,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. \n    '''\n    # Find the nth polite number \n    if n == 1: \n        return 1 \n    elif n == 2: \n        return 3 \n    else: \n        # Use trial division to check if the number is polite \n        i = 2 \n        while i * i <= n: \n            if n % i == 0: \n                return i + 2 # Return the next prime number after i \n            i += 1 \n        return n + 1 # Return the nth prime number ",
        "test": "assert is_polite(1) == 1, \"Function is_polite should return 1 for 1th polite number\"",
        "num_ids": 1401
    },
    {
        "number": 766,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result",
        "test": "assert pair_wise([]) == []",
        "num_ids": 851
    },
    {
        "number": 767,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 6) == 2, \"There are not enough pairs whose sum is equal to 6 in the array [1, 2, 3, 4, 5]\"",
        "num_ids": 1227
    },
    {
        "number": 769,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))",
        "test": "assert Diff([], []) == []",
        "num_ids": 808
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers",
        "test": "assert odd_num_sum(4) == 157",
        "num_ids": 1047
    },
    {
        "number": 771,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isspace():\n            continue\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert check_expression('(a+b) * (c-d)') == True",
        "num_ids": 888
    },
    {
        "number": 772,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    return \" \".join(words)",
        "test": "assert remove_length(\"This is a test string\", 10) == \"This is a test string\"",
        "num_ids": 755
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None",
        "test": "assert occurance_substring(\"Hello World\", \"x\") is None",
        "num_ids": 889
    },
    {
        "number": 775,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if every odd index contains odd numbers, and False otherwise.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if not all(nums[i] % 2 == 0 for j in range(i, len(nums), 2)):\n            return False\n    return True",
        "test": "assert odd_position([1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == False, \"Test case 3 failed\"",
        "num_ids": 862
    },
    {
        "number": 776,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            if all(neighbor in vowels for neighbor in test_str[i:j]):\n                count += 1\n                \n    return count",
        "test": "assert count_vowels('hello') == 2, 'Count should be 2, since \"e\" and \"o\" are the only vowels which have neighbors.'",
        "num_ids": 911
    },
    {
        "number": 777,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to keep track of the non-repeated elements\n    non_repeated = set(arr)\n    # Initialize the sum variable to 0\n    sum_non_repeated = 0\n    # Iterate through the set and add the sum of non-repeated elements to the sum_non_repeated variable\n    for num in non_repeated:\n        sum_non_repeated += num\n    return sum_non_repeated",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1311
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group the list elements by their indices and count the number of consecutive duplicates\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[0] == x[1]):\n        if k == 0:\n            continue\n        count = sum(1 for _ in groupby(g, lambda x: x[1]))\n        result.append([k] * count)\n    return result",
        "test": "assert pack_consecutive_duplicates([1, 1, 1, 1, 1, 1]) == [[1]]",
        "num_ids": 1241
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Initialize an empty dictionary\n    sublist_count = {}\n\n    # Loop through each list in the given list\n    for sublist in list1:\n        # Turn the list into a tuple and check if it's already in the dictionary\n        if tuple(sublist) in sublist_count:\n            # If it is, increment its count by 1\n            sublist_count[tuple(sublist)] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            sublist_count[tuple(sublist)] = 1\n\n    # Return the dictionary\n    return sublist_count",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1425
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # sort the list of tuples in ascending order\n    test_list.sort(key=lambda x: x[0])\n    # initialize an empty list to store the combinations\n    result = []\n    # loop through all possible pairs of tuples in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # check if the sum of the current pair of tuples is equal to the sum of the entire list\n            if test_list[i][0]+test_list[j][0] == sum(test_list):\n                # create a tuple of the two tuples and add it to the result list\n                result.append((test_list[i], test_list[j]))\n    return result",
        "test": "assert find_combinations([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [(1, 4, 7), (1, 4, 8), (1, 4, 9), (1, 5, 7), (1, 5, 8), (1, 5, 9), (2, 4, 7), (2, 4, 8), (2, 4, 9), (2, 5, 7), (2, 5, 8), (2, 5, 9), (3, 4, 7), (3, 4, 8), (3, 4, 9), (3, 5, 7), (3, 5, 8), (3, 5, 9)]",
        "num_ids": 2871
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 1\n            if n // i!= i:\n                divisor_count += 1\n    if divisor_count % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert count_divisors(10) == 1, \"count_divisors(10) should return 1\"",
        "num_ids": 1189
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    n = len(arr)\n    for i in range(n):\n        if i + 3 <= n:\n            for j in range(i+2, i+4):\n                if j < n:\n                    result += arr[j]\n                else:\n                    break\n        if i + 1 <= n:\n            for j in range(i+1, i+3):\n                if j < n:\n                    result += arr[j]\n                else:\n                    break\n    return result",
        "test": "assert odd_length_sum([1, 2]) == 2, \"Odd length subarrays are not summed correctly\"",
        "num_ids": 1206
    },
    {
        "number": 783,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r, g, b to float and range 0-255 to 0-1\n    r, g, b = r/255, g/255, b/255\n\n    # Convert r, g, b to int and range 0-255 to 0-255\n    r, g, b = int(r*255), int(g*255), int(b*255)\n\n    # Find the minimum and maximum values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    delta = max_val - min_val\n\n    # Calculate the value of h\n    if max_val == 0:\n        h = 0\n    elif delta == 0:\n        h = 0\n    elif max_val == r:\n        h = 60*((g-b)/delta)\n    elif max_val == g:\n        h = 60*((b-r)/delta + 2)\n    else:\n        h = 60*((r-g)/delta + 4)\n\n    # Calculate the value of s\n    if delta == 0:\n        s = 0\n    else:\n        s = delta/max_val\n\n    # Calculate the value of v\n    v = max_val\n\n    # Convert h, s, v to float\n    h, s, v = h/60, s, v/255\n\n    return round(h, 2), round(s, 2), round(v, 2)",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0), \"Expected (0.0, 0.0, 0.0), got {}\".format(rgb_to_hsv(0, 0, 0))",
        "num_ids": 2379
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum",
        "test": "assert mul_even_odd([]) == 0",
        "num_ids": 948
    },
    {
        "number": 785,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n    # Initialize an empty list for the integer tuple\n    int_list = []\n    # Loop through the list of characters\n    for char in char_list:\n        # If the character is a digit, append it to the integer tuple\n        if char.isdigit():\n            int_list.append(int(char))\n    # Return the integer tuple\n    return tuple(int_list)",
        "test": "assert tuple_str_int(('1', '2', '3')) == (1, 2, 3)",
        "num_ids": 734
    },
    {
        "number": 786,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect.bisect_right to find the right insertion point\n    index = bisect.bisect_right(a, x)\n    # Check if the index is the length of the list\n    if index == len(a):\n        return index\n    # If the index is greater than the length of the list, it means the value is greater than all the values in the list.\n    if x > a[index]:\n        return index\n    # If the value is equal to a[index], we need to find the rightmost occurrence of the value in the list.\n    else:\n        # Use a loop to find the rightmost occurrence of the value in the list.\n        for i in range(index, -1, -1):\n            if a[i] == x:\n                return i\n        # If the value is not found in the list, return the index.\n        return index",
        "test": "assert right_insertion([], 0) == 0",
        "num_ids": 1043
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_match_three('') == False",
        "num_ids": 622
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): A list of strings.\n    test_str (str): A string.\n\n    Returns:\n    A new tuple containing the values of test_list and test_str.\n\n    \"\"\"\n    new_tuple = tuple(test_list)\n    new_tuple += (test_str,)\n    return new_tuple",
        "test": "assert new_tuple(['a', 'b', 'c'], 'hello') == ('a', 'b', 'c', 'hello')",
        "num_ids": 483
    },
    {
        "number": 790,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count = 0\n            for j in range(i+1, len(nums)):\n                if nums[j] % 2 == 0:\n                    count += 1\n                if count > 1:\n                    return False\n    return True",
        "test": "assert even_position([2, 4, 6, 8, 10]) == False",
        "num_ids": 1185
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    def flatten(nested):\n        \"\"\"\n        Flatten a nested tuple.\n        \"\"\"\n        flat = []\n        for element in nested:\n            if type(element) == tuple:\n                flat.extend(flatten(element))\n            else:\n                flat.append(element)\n        return flat\n\n    flattened = flatten(test_tup)\n    return tuple(flattened)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 709
    },
    {
        "number": 792,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count",
        "test": "assert count_list([[1,2,3], [4,5,6], [7,8,9]]) == 3",
        "num_ids": 911
    },
    {
        "number": 793,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in an array and an element x and returns the index of the last occurrence of the element in the array.\n    If the element is not found in the array, it will return -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if left!= len(arr) else -1",
        "test": "assert last([1, 3, 5, 7, 9], 10) == -1",
        "num_ids": 998
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b$'\n    return re.search(pattern, text)",
        "test": "assert text_starta_endb(\"abc\") == False",
        "num_ids": 546
    },
    {
        "number": 796,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def return_sum(dictionary):\n    '''\n    Function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dictionary.items():\n        total += value\n    return total",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == 15",
        "num_ids": 654
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum_odd = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum_odd += l\n        l += 1\n    return sum_odd",
        "test": "assert sum_odd(0) == 0",
        "num_ids": 701
    },
    {
        "number": 798,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0  \n    for num in arr:  \n        total += num  \n    return total",
        "test": "assert _sum([]) == 0, \"The function should return 0 when the array is empty\"",
        "num_ids": 645
    },
    {
        "number": 799,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to a binary string\n    bin_str = bin(n)[2:]\n    \n    # If the number of bits is less than d, pad it with zeros\n    if len(bin_str) < d:\n        bin_str = '0'*(d - len(bin_str)) + bin_str\n    \n    # Shift the first d bits to the right\n    rotated_bin = bin_str[-d:] + bin_str[:-d]\n    \n    # Convert the rotated binary string back to an integer\n    rotated_num = int(rotated_bin, 2)\n    \n    return rotated_num",
        "test": "assert left_rotate(1, 0) == 1",
        "num_ids": 1105
    },
    {
        "number": 800,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces('hello world') == 'helloworld'",
        "num_ids": 451
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z:\n        count += 1\n    if x == z or y == z:\n        count += 1\n    return count",
        "test": "assert test_three_equal(1, 1, 1) == 3, \"test_three_equal failed\"",
        "num_ids": 848
    },
    {
        "number": 802,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i + 1\n        while j < n and arr[j] < arr[i]:\n            j += 1\n        if j == n:\n            break\n        count += j - i - 1\n        i = j - 1\n    return count",
        "test": "assert count_rotation([1,2,3,4,5]) == 0",
        "num_ids": 1039
    },
    {
        "number": 803,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square, False otherwise.\n    \"\"\"\n    root = int(n ** 0.5)\n    return root * root == n",
        "test": "assert is_perfect_square(2) == False, \"is_perfect_square(2) should return False\"",
        "num_ids": 996
    },
    {
        "number": 804,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2, 3, 4, 5, 6]) == True, \"The product of [2, 3, 4, 5, 6] should be even.\"",
        "num_ids": 790
    },
    {
        "number": 805,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_lists = []\n    for lst in lists:\n        total = sum(lst)\n        if total > max_sum:\n            max_sum = total\n            max_lists = [lst]\n        elif total == max_sum:\n            max_lists.append(lst)\n    return max_lists",
        "test": "assert max_sum_list([[1,-2],[3,4]]) == [[3,4]]",
        "num_ids": 1913
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        if current_run > max_run:\n            max_run = current_run\n        i += 1\n    return max_run",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 1098
    },
    {
        "number": 807,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 811
    },
    {
        "number": 808,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K((1,2,3),(4,5)) == False, \"check_K((1,2,3),(4,5)) should return False\"",
        "num_ids": 891
    },
    {
        "number": 809,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1,2),(2,1)) == False",
        "num_ids": 878
    }
]