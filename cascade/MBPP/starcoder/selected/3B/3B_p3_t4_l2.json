[
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create a dictionary to store the frequency of each element in both lists\n    freq_dict = {}\n    for element in test_tup1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    for element in test_tup2:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    # create a list to store the shared elements\n    shared_elements = []\n    # iterate through the dictionary and append elements with a frequency of 2 or more\n    for element, frequency in freq_dict.items():\n        if frequency >= 2:\n            shared_elements.append(element)\n    return shared_elements",
        "test": "assert similar_elements([1, 2, 3], [3, 4, 5]) == [3]",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(3) == False, \"is_not_prime(3) should return False\"",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a heap of size n\n    heap = hq.nlargest(n, nums)\n    \n    # convert the heap back to a list and return it\n    return list(heap)",
        "test": "assert heap_queue_largest([3, 5, 1, 9, 8], 1) == [9]",
        "num_ids": 651,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'  # Matches words that are at least 4 characters long\n    return re.findall(pattern, text)",
        "test": "assert find_char_long(\"abc\") == []",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = 0\n    for i in range(n//2):\n        if str[i]!= str[n-1-i]:\n            min_rotations += 1\n            str = str[-1-i] + str[i] + str[-1-i]\n            n -= 1\n    return min_rotations",
        "test": "assert find_Rotations(\"racecar\") == 0, \"find_Rotations('racecar') should return 0.\"",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'').replace(ch,'',1)",
        "test": "assert remove_Occ(\"hello world\", \"h\") == \"ello world\"",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sort_matrix(M):\n    # Find the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n\n    # Sort the row sums in ascending order\n    row_sums.sort()\n\n    # Create a list of lists to store the sorted matrix\n    sorted_matrix = [[0] * len(M[0]) for _ in range(len(M))]\n\n    # Reconstruct the sorted matrix\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            sorted_matrix[row_sums.index(sum(M[i]))][j] = M[i][j]\n\n    return sorted_matrix",
        "test": "assert sort_matrix([[1, 3, 5], [2, 4, 6], [7, 9, 11]]) == [[1, 3, 5], [2, 4, 6], [7, 9, 11]]",
        "num_ids": 1312,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = l*b\n    volume = area*h\n    return volume",
        "test": "assert find_Volume(1,2,3) == 6.0, \"The volume of a triangle prism with length = 1, width = 2, height = 3 should be 6.0.\"",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![\\d])[a-z]+(?=[\\d_])'\n    return bool(re.search(pattern, text))",
        "test": "assert text_lowercase_underscore('hello_world') == True",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(5) == 20, \"Incorrect perimeter calculation for side length 5\"",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    for char in char_set:\n        string = string.replace(char, '')\n    return string",
        "test": "assert str_to_list(\"!@#$%^&*()\") == \"\"",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5, 5]) == True",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 6 and x <= 12:\n        return True\n    elif x >= 13 and x <= 20:\n        return True\n    elif x >= 21 and x <= 28:\n        return True\n    elif x >= 29 and x <= 36:\n        return True\n    elif x >= 37 and x <= 44:\n        return True\n    elif x >= 45 and x <= 52:\n        return True\n    elif x >= 53 and x <= 60:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(99) == False, \"99 should not be a woodball\"",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    num_str = str(num)\n    reversed_num_str = num_str[::-1]\n    reversed_num = int(reversed_num_str)\n    if reversed_num < 2 * num:\n        return True\n    else:\n        return False",
        "test": "assert rev(1234) == False",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the given digits.\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    n = len(arr)\n    max_num = 0\n\n    for i in range(n):\n        for j in range(n - i - 1):\n            if arr[j] > max_num:\n                max_num = arr[j]\n                break\n\n    return max_num\n",
        "test": "assert find_Max_Num([2, 3, 4, 6, 9]) == 9",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def opposite_Signs(x, y):\n    if x*y < 0:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-1,2) == True",
        "num_ids": 310,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_octagonal(n):\n    if n < 1 or n > 9:\n        return False\n    digits = [int(digit) for digit in str(n)]\n    square_sum = sum(digit ** 2 for digit in digits)\n    return n == square_sum",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the frequency of each digit in the string\n    digit_freq = defaultdict(int)\n    for i in s:\n        digit_freq[i] += 1\n\n    # Create a dictionary to store the frequency of each substring ending with each digit\n    substring_freq = defaultdict(int)\n    for i in range(len(s)-1):\n        for j in range(i+1, len(s)+1):\n            substring_freq[s[i:j]] += 1\n\n    # Count the number of substrings with the sum of digits equal to their length\n    count = 0\n    for digit in digit_freq:\n        count += (digit_freq[digit] * substring_freq[str(digit_freq[digit]) + digit])\n\n    return count",
        "test": "assert count_Substrings(\"\") == 0",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    diff = 0\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 8",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "test": "assert subject_marks([(80, 'Maths'), (85, 'Physics'), (90, 'Chemistry'), (82, 'English')]) == [(80, 'Maths'), (82, 'English'), (85, 'Physics'), (90, 'Chemistry')]",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum([recursive_list_sum(item) for item in data_list])\n    else:\n        return data_list",
        "test": "assert recursive_list_sum([1, [2, [3, [4, 5]]]]) == 15",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([-1, -2, -3, -4, -5]) == 0",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * bell_number(n - 1)) + bell_number(n - 2)",
        "test": "assert bell_number(1) == 1",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            if i == 0 or A[i] < A[i-1]:\n                return False\n            \n    return True",
        "test": "assert is_Monotonic([1, 1, 1]) == True, \"Failed for input [1, 1, 1]\"",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "test": "assert is_sublist([1, 2, 3, 4, 5], [2, 3, 6]) == False",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    equal_length = True\n    \n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            equal_length = False\n            break\n    \n    return equal_length",
        "test": "assert find_equal_tuple(()) == True",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n\n    return nums",
        "test": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Failed to sort the list correctly.\"",
        "num_ids": 655,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the number is even or odd\n    if n % 2 == 0: \n        # check if the square of the number is a perfect square\n        square = n ** 0.5\n        if square ** 2 == n: \n            return True\n        else: \n            return False\n    else: \n        # check if the difference of the square of the number and its complement is a perfect square\n        square = (n + 1) ** 0.5\n        if square ** 2 == n + 1: \n            return True\n        else: \n            return False",
        "test": "assert dif_Square(12) == False",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n-1):\n        if colors[i] == colors[i+1]:\n            for j in range(len(patterns)):\n                if patterns[j] == colors[i]:\n                    break\n                if j == len(patterns)-1:\n                    return False\n    return True",
        "test": "assert is_samepatterns([\"red\", \"blue\", \"green\", \"yellow\", \"orange\"], [[0, 1, 2], [3, 4]]) == True",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_tuples = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            filtered_tuples.append(tup)\n    return filtered_tuples",
        "test": "assert find_tuples([(1,2,3),(4,5,6),(7,8,9)],3) == [(1,2,3),(4,5,6)]",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False",
        "test": "assert is_Diff(10) == False",
        "num_ids": 313,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def word_len(s):\n    for i in s:\n        if len(i) % 2 == 1:\n            return False\n    return True\n",
        "test": "assert word_len(\"hello\") == False",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = n * (3 * n - 1) // 2\n    return t",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in a radius r and returns the volume of a sphere.\n    '''\n\n    return (4/3) * math.pi * (r ** 3)",
        "test": "assert volume_sphere(1) == 4/3 * math.pi * 1**3 # Correct output for radius 1",
        "num_ids": 562,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char_val = sum([ord(i) for i in strr]) % 26\n    return chr(ord('a') + char_val)",
        "test": "assert get_Char(\"Python\") == 147",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sequence(n):\n    # Initialize sequence with first two numbers\n    sequence = [1, 1]\n\n    # Loop through the remaining numbers\n    for i in range(2, n):\n        # Calculate next number in sequence\n        next_number = sequence[-1] + sequence[-2]\n\n        # Add next number to sequence\n        sequence.append(next_number)\n\n    # Return nth number in sequence\n    return sequence[n-1]",
        "test": "assert sequence(1) == 1, \"The first number in the sequence is not 1\"",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == math.pi*4*1**2 # check for radius of 1",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize the result variable\n    result = 0\n    \n    # Initialize the number of rows and columns\n    rows = n // 2\n    cols = n // 2\n    \n    # Initialize the number of spaces in the top row\n    num_spaces = 2 * n - 1\n    \n    # Loop through the rows and columns\n    for i in range(rows + 1):\n        for j in range(cols + 1):\n            # Calculate the number of spaces in the current row and column\n            num_spaces = (2 * n - 1) - (i * 2 + j)\n            \n            # Add the spaces to the result\n            result += num_spaces\n    \n    # Return the result\n    return result",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict",
        "test": "assert freq_count([1, 2, 3, 4, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 2, 5: 1}",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def closest_num(N):\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    else:\n        return closest_num(N//2) + 1",
        "test": "assert closest_num(6) == 3",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n\n    Parameters:\n    list1 (list of str): List of words\n\n    Returns:\n    int: Length of the longest word in the list\n\n    Example:\n    ```python\n    >>> len_log(['apple', 'banana', 'cherry', 'date', 'elderberry'])\n    7\n    ```\n    \"\"\"\n\n    # Initialize max_len to 0\n    max_len = 0\n\n    # Loop through each word in the list\n    for word in list1:\n\n        # Find the length of the current word\n        len_word = len(word)\n\n        # If the current word is longer than max_len, update max_len\n        if len_word > max_len:\n            max_len = len_word\n\n    # Return the value of max_len\n    return max_len",
        "test": "assert len_log(['']) == 0, 'Incorrect result'",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1) == list:\n        for value in str1:\n            if sub_str in value:\n                return True\n        return False\n    else:\n        if sub_str in str1:\n            return True\n        return False",
        "test": "assert find_substring([\"hello\", \"world\"], \"world\") == True",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_undulating(10) == False, \"Function should return False for undulating numbers\"",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,3) == 8, \"power(2,3) should be 8, but it is {}.\".format(power(2,3))",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]",
        "test": "assert index_minimum([(1, 2), (3, 4), (5, 6)]) == 1",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = float('inf')   # initializing the length variable with infinite value\n    for sublist in lst:    # iterating through each sublist in the list\n        if len(sublist) < length:    # checking if the length of the sublist is less than the length variable\n            length = len(sublist)    # updating the length variable with the length of the smallest sublist\n    return length",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    \n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n            i = 1\n    \n    if n > 1:\n        count += 1\n        \n    return count",
        "test": "assert divisor(0) == 0 # correctness check: 0 has 0 divisors: 0",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "test": "assert multiply_num([0,1,0,1,0]) == 0",
        "num_ids": 352,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    binary_num = ''\n\n    while n > 0:\n        remainder = n % 2\n        binary_num = str(remainder) + binary_num\n        n = n // 2\n\n    return binary_num",
        "test": "assert decimal_to_binary(10) == \"1010\"",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    if num < 0:\n        num = abs(num)\n    else:\n        num = str(num)\n    return num == num[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest_palindrome = sys.maxsize\n    for i in range(num, 0, -1):\n        if is_palindrome(i):\n            smallest_palindrome = i\n            break\n    return smallest_palindrome",
        "test": "assert next_smallest_palindrome(12) == 65432109",
        "num_ids": 841,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case = [words[0].capitalize()]\n    # Add the rest of the words to the camel case string\n    for i in range(1, len(words)):\n        camel_case.append(words[i].capitalize())\n    # Convert the camel case string to a single string\n    return ''.join(camel_case)",
        "test": "assert snake_to_camel('lowercase_with_numbers_32') == 'lowercaseWithNumbers32'",
        "num_ids": 521,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize the array of lists for the Pascal's triangle\n    pascal_triangle = [[1] * (m+1) for _ in range(n+1)]\n\n    # Fill the Pascal's triangle with the required values\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if j == 1:\n                pascal_triangle[i][j] = 1\n            else:\n                pascal_triangle[i][j] = pascal_triangle[i-1][j-1] + pascal_triangle[i-1][j]\n\n    # Initialize the array of lists for the integer combinations\n    integer_combinations = [[1] * (m+1) for _ in range(2*n+1)]\n\n    # Fill the integer combinations with the required values\n    for i in range(1, 2*n+1):\n        for j in range(1, m+1):\n            if j == 1:\n                integer_combinations[i][j] = 1\n            else:\n                integer_combinations[i][j] = integer_combinations[i-1][j-1] + integer_combinations[i-1][j]\n\n    # Calculate the required value of the Eulerian number\n    eulerian_number = integer_combinations[2*n][m]\n\n    return eulerian_number",
        "test": "assert eulerian_num(30, 15) == 2203160, \"The Eulerian number should be 2203160.\"",
        "num_ids": 1235,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "test": "assert sort_sublists([[1, 2, 3], [4, 5, 6], ['a', 'b', 'c']]) == [[1, 2, 3], [4, 5, 6], ['a', 'b', 'c']]",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "test": "assert count([False, False, False, False, False]) == 0, \"Count should be 0\"",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuples to lists\n    list_test_list = list(test_list)\n    tuple_test_list = list(test_tup)\n    \n    # Append the lists to the tuples\n    new_list = list_test_list + tuple_test_list\n    \n    # Convert the new list back to a tuple\n    new_tuple = tuple(new_list)\n    \n    return new_tuple",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Merge num1 and num2\n    merged_list = num1 + num2\n    \n    # Merge merged_list and num3\n    merged_list += num3\n    \n    # Sort the merged_list\n    sorted_list = sorted(merged_list)\n    \n    return sorted_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 835,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list of bits\n    bits = [int(bit) for bit in list(s)]\n    # Find the length of the binary string\n    length = len(bits)\n    # Initialize a variable to count the number of odd numbers\n    count = 0\n    # Loop through each bit of the binary string\n    for i in range(length):\n        # If the bit is odd, increment the count\n        if bits[i] % 2!= 0:\n            count += 1\n        # Rotate the bits to the right by one position\n        bits = bits[1:] + [bits[0]]\n        # Rotate the bits to the right by n positions\n        for j in range(n):\n            bits = bits[1:] + [bits[0]]\n    # Return the count of odd numbers found\n    return count",
        "test": "assert odd_Equivalent(\"11001\", 3) == 5, \"odd_Equivalent('11001', 3) should be 5\"",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Helper function to find intersection of two lists\n    def find_intersection(list1, list2):\n        intersection = []\n        for i in list1:\n            if i in list2:\n                intersection.append(i)\n        return intersection\n    \n    # Find the intersection of the first two lists\n    first_list = nestedlist[0]\n    second_list = nestedlist[1]\n    intersection = find_intersection(first_list, second_list)\n    \n    # Find the intersection of the remaining nested lists\n    for i in range(2, len(nestedlist)):\n        new_intersection = find_intersection(intersection, nestedlist[i])\n        intersection = new_intersection\n    \n    return intersection",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]) == [4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18]",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer('123') == True",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True",
        "test": "assert empty_dit([{'a': 1}, {'b': 2}, {'c': 3}]) == False, \"empty_dit([{'a': 1}, {'b': 2}, {'c': 3}]) should return False\"",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)",
        "test": "assert tuple_to_int((0, 0, 0, 0, 0)) == 0, \"tuple_to_int function should convert a tuple of zeros to a single integer.\"",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                item = float(item)\n            except ValueError:\n                pass",
        "test": "assert list_to_float([['a', 'b', 'c'], [1, 2, 3], ['4.5', 6, 7.8]]) == [0, 1, 4.5, 6.0, 7.8]",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = None\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            if unique_element is None:\n                unique_element = arr[i]\n            elif arr[i] == unique_element:\n                return unique_element\n    return None",
        "test": "assert search([3, 2, 1, 4, 1]) == None",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables for maximum absolute product and current product\n    max_product = 0\n    current_product = 1\n    \n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        # Get the first number in the tuple\n        num1 = list1[i][0]\n        \n        # Iterate through each tuple in the list from the next index\n        for j in range(i+1, len(list1)):\n            # Get the second number in the tuple\n            num2 = list1[j][1]\n            \n            # Calculate the absolute difference between the two numbers\n            diff = abs(num1 - num2)\n            \n            # Update the maximum absolute product if this difference is larger\n            max_product = max(max_product, diff)\n            \n            # Update the current product with the maximum absolute product\n            current_product = max(current_product, num1*num2)\n            \n    # Return the current product\n    return current_product",
        "test": "assert max_product_tuple([(-2, 5), (-3, -1), (0, 3), (2, -2)]) == 6",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def is_amicable(num):\n    '''\n    Helper function to check if a number is amicable or not.\n    '''\n    return any(d in str(num) for d in range(1, int(num**0.5)+1) if num % d == 0)\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            total += num\n    return total",
        "test": "assert amicable_numbers_sum(200) == 1060",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle",
        "test": "assert angle_complex(0+0j, 0+0j) == 0",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    zeros = 0\n    ones = 0\n\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            zeros += 1\n        else:\n            ones += 1\n\n        if zeros > ones:\n            ones = 0\n            zeros += 1\n        elif ones > zeros:\n            zeros = 0\n            ones += 1\n\n    return max(zeros - ones, ones - zeros)\n",
        "test": "assert find_length
        "num_ids": 1899,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # find the common divisors of two numbers\n    common = set()\n    for i in range(1, b+1):\n        if b%i == 0:\n            common.add(i)\n            if i!= b/i:\n                common.add(b/i)\n\n    # find the sum of common divisors\n    total = 0\n    for i in range(1, a+1):\n        if i in common:\n            total += i\n    \n    return total",
        "test": "assert sum(9, 36) == 18, \"The correct output is 18.\"",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "test": "assert multiply_int(2, 3) == 6, \"Test case 1 failed\"",
        "num_ids": 253,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words",
        "test": "assert long_words(3, ['apple', 'banana', 'cherry', 'date', 'elderberry']) == []",
        "num_ids": 564,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def magic_square_test(my_matrix):\n    # check if the matrix has the correct dimensions\n    if len(my_matrix)!= len(my_matrix[0]) or len(my_matrix[0])!= 3:\n        return False\n    \n    # check if the matrix contains only integers\n    for row in my_matrix:\n        if not all(isinstance(x, int) for x in row):\n            return False\n    \n    # check if the matrix is a magic square\n    magic_sum = sum(sum(row) for row in my_matrix)\n    if magic_sum!= 30:\n        return False\n    \n    return True",
        "test": "assert magic_square_test([[5, 3, 4], [1, 5, 8], [6, 7, 2]]) == False",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    # count frequency of each item in the list\n    for num in nums:\n        freq[num] += 1\n\n    # find item with maximum frequency\n    max_freq = max(freq.values())\n    max_item = None\n    for num, f in freq.items():\n        if f == max_freq:\n            max_item = num\n            break\n\n    return max_item",
        "test": "assert max_occurrences([1, 2, 3, 2, 1, 4, 2, 3, 1, 2]) == 2",
        "num_ids": 1537,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char not in vowels:\n            new_str += char\n    return new_str[::-1]",
        "test": "assert reverse_vowels(\"Python is awesome\") == \"emosewa sihtyP\"",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string((3.14, 2.71, 1.618)) == \"3.14, 2.71, 1.618\"",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum",
        "test": "assert sum_negativenum([1,2,3,4,5,6,7,8,9,-10,-20,-30]) == -60",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Finding the value of n\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        # Initializing the sum variable\n        hex_sum = 1\n        \n        # Calculating the nth hexagonal number\n        for i in range(2, n+1):\n            hex_sum += 2*i\n        \n        # Returning the nth hexagonal number\n        return hex_sum",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * len(nums))\n    for num in nums:\n        count[num] += 1\n    zero_count = sum(count) / len(count)\n    return zero_count",
        "test": "assert zero_count([0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1.0",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    \n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        return True\n    \n    # Check if the number is a sum of powers of 2\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if i == 2:\n                return True\n            if n // i == 1:\n                return True\n    \n    return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(2) == True",
        "num_ids": 822,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r # formula to find circumference\n    return circumference",
        "test": "assert circle_circumference(5) == 31.4159",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)",
        "test": "assert extract_singly([[1, 2, 3], [4, 5, 6]]) == {1, 2, 3, 4, 5, 6}",
        "num_ids": 377,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    # Find the length of the list\n    n = len(nums)\n    # Create a list of size n-1 filled with True\n    swapped = [True] * (n - 1)\n\n    while True:\n        # Find the first element that is not sorted\n        for i in range(n - 1):\n            if swapped[i] == True:\n                # If the element is greater than the next element, swap them\n                if nums[i] > nums[i + 1]:\n                    nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                    swapped[i], swapped[i + 1] = swapped[i + 1], swapped[i]\n                else:\n                    # If the element is already sorted, break out of the inner loop\n                    break\n\n        # If all elements are sorted, break out of the outer loop\n        if all(swapped):\n            break\n\n    return nums",
        "test": "assert pancake_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3,4,5], [4,5,6,7,8], [5,6,7,8,9]) == 0",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "test": "assert find_lists([]) == 0",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Find all the pairs of integers that satisfy the equation\n    pairs = [(x, y) for x in range(a) for y in range(b)]\n\n    # Filter the pairs to only include those that satisfy the equation\n    valid_pairs = [(x, y) for x, y in pairs if a * x + b * y == n]\n\n    # If there is no valid pair, return None\n    if not valid_pairs:\n        return None\n\n    # Sort the valid pairs by x and y\n    sorted_pairs = sorted(valid_pairs, key=lambda x: (x[0], x[1]))\n\n    # Return the first valid pair\n    return sorted_pairs[0]",
        "test": "assert find_solution(8, 1, 64) == (4, 3), \"find_solution(8, 1, 64) returns (4, 3), expected (None)\"",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n\n    Parameters:\n    list1 (list): The original list.\n    list2 (list): The list of elements to remove from list1.\n\n    Returns:\n    list: A new list without the elements present in list2.\n    \"\"\"\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Calculate the sum of the first n terms\n    sum_n = (n * (n+1)) // 2\n    \n    # Initialize the sum of the remaining terms\n    sum_remaining = 0\n    \n    # Initialize the counter\n    i = 0\n    \n    while sum_remaining < 0:\n        # Calculate the sum of the current term\n        current_sum = n - 2 * i\n        \n        # Update the sum of the remaining terms\n        sum_remaining += current_sum\n        \n        # Update the counter\n        i += 1\n        \n    # Return the sum of the first n terms\n    return sum_n",
        "test": "assert sum_series(5) == 15 # correct for n=5",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculating the area using Heron's formula\n    a = s/2\n    h = tan(pi/l)*a\n    area = 3*h/2\n    return area",
        "test": "assert area_polygon(9, 10) == (9 * 10 * (tan(pi/10)**2) * pi)",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [] \n    for i in range(1, n+1): \n        if n % i == 0: \n            divisors.append(i) \n    divisors.sort() \n\n    for i in range(1, len(divisors)): \n        for j in range(i+1, len(divisors)): \n            if divisors[i] + divisors[j] == n: \n                return True \n    return False",
        "test": "assert div_sum(15) == False # false as 15 does not have any common divisor",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    count = 0\n    for i in range(26):\n        char = chr(i+65)\n        count += str1.lower().count(char.lower())\n    return count",
        "test": "assert count_char_position('abcdefghijklmnopqrstuvwxyz') == 26",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([]) == 0",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # If n is already a power of 2, return it\n    if n >= 2**1 and n < 2**32:\n        return n\n\n    # Check if n is already a power of 2\n    power = 2\n    while power < n:\n        power <<= 1\n\n    return power",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,2,1,4,5,4,3,2], 2) == 3",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 6",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n",
        "test": "assert perimeter_pentagon(5) == 25",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "test": "assert count_occurance('hello world') == 0",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the length of the tuple is 0\n    if len(test_tuple) == 0:\n        return True\n\n    # Get the first element in the tuple\n    first_element = type(test_tuple[0])\n\n    # Iterate over the rest of the tuple\n    for element in test_tuple[1:]:\n        # Check if the element has same data type as the first element\n        if type(element)!= first_element:\n            return False\n\n    # If all the elements have same data type, return True\n    return True",
        "test": "assert check_type((1,2,3)) == True",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([2, 2, 3, 3, 3, 4, 4, 5, 5], 8, 4) == False",
        "num_ids": 1634,
        "indeed": true
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Set_Bits(n): \n    count = 0 \n    while n > 0: \n        if n & 1 == 1: \n            count += 1 \n        n = n >> 1 \n    return count ",
        "test": "assert count_Set_Bits(0b0000000000000000000000000000000) == 0",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Initialize an empty string to store the new string\n    new_str = \"\"\n    # Loop through each character in the original string\n    for char in str:\n        # Check if the current character has an odd index\n        if len(str) % 2 == 0:\n            # If the current character has an odd index, add it to the new string\n            new_str += char\n        else:\n            # If the current character has an even index, ignore it\n            pass\n    # Return the new string\n    return new_str",
        "test": "assert odd_values_string('') == ''",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)",
        "test": "assert min_of_three(1,2,3) == 1, \"min_of_three(1,2,3) should return 1, but it returns {}\".format(min_of_three(1,2,3))",
        "num_ids": 573,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize a counter variable to keep track of unset bits in the range\n    count = 0\n\n    # Iterate over all the bits in the given range\n    for i in range(l, r+1):\n        # Check if the current bit is set or not\n        if n & (1 << i):\n            # If the current bit is set, increment the count variable\n            count += 1\n        else:\n            # If the current bit is not set, break out of the loop\n            break\n\n    # If the count variable is equal to 0, then all the bits are set in the given range\n    if count == 0:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(10, 0, 0) == True, \"Test Case 4 Failed\"",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Count the number of negative and positive elements in the array\n    pos_count = 0\n    neg_count = 0\n    for i in arr:\n        if i >= 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    \n    # If there are not enough negative and positive elements in the array, return the original array\n    if pos_count + neg_count < n:\n        return arr\n    \n    # If there are enough negative and positive elements, sort the array based on the relative order\n    pos_arr = [x for x in arr if x >= 0]\n    neg_arr = [x for x in arr if x < 0]\n    neg_arr.sort(reverse=True)\n    sorted_arr = pos_arr + neg_arr\n    \n    # Re-arrange the first n elements of the sorted array based on the relative order\n    re_arr = []\n    for i in range(n):\n        if i < pos_count:\n            re_arr.append(sorted_arr[i])\n        else:\n            re_arr.append(sorted_arr[i - pos_count])\n    return re_arr",
        "test": "assert re_arrange_array([-2, -1, 0, 1, 2], 3) == [-2, -1, 0, 2, 1]",
        "num_ids": 1662,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank(\"  hello  world   \", \"!\") == \"hello world!\"",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "test": "assert larg_nnum([1], 1) == [1]",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi*(r**2)+(2*math.pi*r*h)\n    return area",
        "test": "assert lateralsuface_cylinder(1,2)==6, \"lateral surface area of cylinder with radius 1 and height 2 is not correct\"",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert volume_cube(3) == 27, \"Incorrect volume calculation\"",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Check if the given number is non-negative\n    if n < 0:\n        return \"The given number is negative.\"\n\n    # Initialize the result variable with 0\n    result = 0\n\n    # Iterate over each bit in the binary representation of the given number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set the corresponding bit in the result variable\n        if int(bit) % 2 == 0:\n            result |= (1 << (int(bit) - 1))\n\n    # Return the result variable\n    return result",
        "test": "assert even_bit_set_number(100) == 200",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Using Counter to count the occurrences of each unique tuple\n    unique_tuples_count = Counter(test_list)\n    \n    # Return the dictionary of unique tuples and their counts\n    return unique_tuples_count",
        "test": "assert check_occurences([('a', 1), ('b', 2), ('c', 1), ('d', 1), ('e', 3)]) == {'a': 1, 'b': 2, 'c': 1, 'd': 1, 'e': 3}",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def number_of_substrings(str): \n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "test": "assert number_of_substrings('') == 0, 'Empty string'",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def get_total_number_of_sequences(m,n): \n    # initialize the number of possible sequences to 0\n    count = 0\n    \n    # iterate through all possible sequences of length n\n    for i in range(2,m):\n        j = i\n        # iterate through all possible elements in the sequence\n        while j < n:\n            if j >= 2*i:\n                count += 1\n            j += 1\n    \n    return count",
        "test": "assert get_total_number_of_sequences(30, 5) == 75, \"The number of possible sequences of length 5, where each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to 30, is incorrect.\"",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def replace_list(list1, list2):\n    # get the last element of the first list\n    last_element = list1[-1]\n    # remove the last element from the first list\n    list1.pop()\n    # append the elements of the second list to the first list\n    list1.extend(list2)\n    # return the modified first list\n    return list1",
        "test": "assert replace_list([1,2,3], [4,5]) == [1,2,4,5]",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"Hello World\") == 11",
        "num_ids": 236,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    low, high = 1, N\n    while low < high:\n        mid = (low + high) // 2\n        if mid*mid == N:\n            high = mid\n        elif mid*mid < N:\n            low = mid + 1\n        else:\n            high = mid\n    return low",
        "test": "assert next_Perfect_Square(1) == 1",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize max_so_far and max_ending_here with the first element of the array\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    # Loop through the array from the second element to the last\n    for i in range(1, len(arr)):\n        # If the current element is less than or equal to the last maximum, then it is increasing, so we add it to max_ending_here\n        if arr[i] <= max_ending_here:\n            max_ending_here += arr[i]\n        # Otherwise, it is decreasing, so we add the maximum ending here to max_so_far and set max_ending_here to the current element\n        else:\n            max_so_far = max(max_so_far, max_ending_here)\n            max_ending_here = arr[i]\n\n    # Add the maximum ending here to max_so_far\n    max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "test": "assert max_sum([2, 7, 9, 4, 1]) == 38",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize the guess as the square root of the number\n    guess = number ** 0.5\n\n    # initialize the previous guess and difference\n    prev_guess = guess\n    difference = 0\n\n    while difference > 0.000001:\n        # compute the next guess using the babylonian method\n        next_guess = guess - ((guess ** 3) - number) / (3 * guess ** 2)\n\n        # check if the next guess is closer to the target number than the previous guess\n        if abs(next_guess - number) < abs(guess - number):\n            # update the previous guess and difference\n            prev_guess = guess\n            difference = abs(next_guess - number)\n\n        # update the guess\n        guess = next_guess\n\n    return guess",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D array of size (n+1) x (n+1) to store the lengths of the longest palindromic subsequences ending at each index\n    dp = [[0]*(n+1) for _ in range(n+1)]\n\n    # Initialize all values in the first row and first column to 1\n    for i in range(n+1):\n        dp[0][i] = 1\n        dp[i][0] = 1\n\n    # Fill the dp array using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            # If the characters at the current indices are the same, then we can extend the longest palindromic subsequence ending at index j-1 with the longest palindromic subsequence ending at index i-1\n            if str[j-1] == str[i-1]:\n                dp[i][j] = 2 + dp[i-1][j-1]\n            # If the characters at the current indices are different, then we can extend the longest palindromic subsequence ending at index j-1 with the longest palindromic subsequence ending at index i\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence ending at index n\n    return dp[n][n]",
        "test": "assert lps(\"acca\") == 4",
        "num_ids": 1193,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1 / i\n    return harmonic_sum",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 468,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a dictionary to store the count of each element in array_nums2\n    count_dict = {}\n    \n    # Iterate through each element in array_nums2\n    for num in array_nums2:\n        # If the element is not in the count_dict, add it with a count of 0\n        if num not in count_dict:\n            count_dict[num] = 0\n        \n        # Increment the count by 1\n        count_dict[num] += 1\n    \n    # Initialize an empty list to store the intersection of the two arrays\n    intersection = []\n    \n    # Iterate through each element in array_nums1\n    for num in array_nums1:\n        # If the element is in the count_dict and the count is greater than 0, add it to the intersection\n        if num in count_dict and count_dict[num] > 0:\n            intersection.append(num)\n            count_dict[num] -= 1\n    \n    return intersection",
        "test": "assert intersection_array([1, 2, 2, 1], [3, 3]) == []",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 2, 1, 4, 3, 2, 1), 2) == 3",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(1, len(list)):\n        list.insert(i, element)\n    return list\n",
        "test": "assert insert_element([1, 2, 3, 4, 5], 1) == [0, 1, 2, 3, 4, 5]",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        # Converting the complex number to polar coordinates using cmath module\n        angle = cmath.phase(num)\n        magnitude = cmath.abs(num)\n        print(f\"{num.real} + {num.imag}i ({magnitude} | {angle}\u00b0)\")",
        "test": "assert convert(1 + 0j) == (1, 0)",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 576,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l)):\n        for comb in combinations_with_replacement(l[i:], n):\n            combos.append(tuple(comb))\n    return combos",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 2), (1, 3), (2, 3)]",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(4) == 2",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 212,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = None\n    if test_tup1[0] > test_tup2[0]:\n        max_tuple = test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        max_tuple = test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            max_tuple = test_tup1\n        else:\n            max_tuple = test_tup2\n    return max_tuple",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6))!= (4, 5, 7)",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a list of primes found so far\n    primes = [2]\n    # Initialize the current number to check\n    current = 3\n    # Initialize the number of primes found so far\n    count = 0\n    # Loop through each number up to the square root of the current number\n    while current <= int(current ** 0.5):\n        # Check if the current number is prime\n        if current % 2 == 1 and current > 2:\n            # Check if the current number is a newman\u2013shanks\u2013williams prime\n            if is_newman_prime(current):\n                # If it is, add it to the list of primes found so far and increment the count\n                primes.append(current)\n                count += 1\n        current += 2\n    # If n is greater than the current count of primes, return an error message\n    if n > count:\n        return \"Error: n is greater than the current count of primes.\"\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    else:\n        return primes[n-1]\n\n\ndef is_newman_prime(n):\n    '''\n    Write a helper function to check if a number is a newman\u2013shanks\u2013williams prime.\n    '''\n    # Initialize a counter variable\n    count = 0\n    # Loop through each number from 2 to the square root of the current number\n    for i in range(2, int(n ** 0.5) + 1):\n        # Check if the current number is divisible by the current number being checked\n        if n % i == 0:\n            # If it is, increment the counter variable and check if the counter variable is greater than 3\n            if count > 3:\n                # If it is, return False (the number is not a newman\u2013shanks\u2013williams prime)\n                return False\n            # If the counter variable is less than or equal to 3, check if the current number is divisible by any of the previous numbers in the list of primes found so far\n            else:\n                for prime in primes:\n                    if prime % i == 0:\n                        # If it is, increment the counter variable and check if the counter variable is greater than 3\n                        count += 1\n                        if count > 3:\n                            # If it is, return False (the number is not a newman\u2013shanks\u2013williams prime)\n                            return False\n    # If the loop completes without returning False, the number is a newman\u2013shanks\u2013williams prime and the counter variable should be 0\n    if count == 0:\n        return True\n    # If the loop completes with the counter variable greater than 3, the number is not a newman\u2013shanks\u2013williams prime and the counter variable should be greater than 3\n    else:\n        return False",
        "test": "assert newman_prime(4) == 7",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result",
        "test": "assert division_elements((1, 2), (3, 4)) == (0.3333333333333333, 0.5)",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # If the length of the list is less than L, split it into two parts of the same length\n    if len(list1) < L:\n        return (list1[:], list1[:])\n    \n    # Split the list into two parts of the same length\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    # Return the two parts in a tuple\n    return (first_part, second_part)",
        "test": "assert split_two_parts([1,2,3,4,5], 2) == ([1,2], [3,4,5])",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dob = input(\"Enter your date of birth (MM/DD/YYYY): \")\n    dob = dob.split('/')\n    dob_age = (datetime.date.today() - datetime.date(int(dob[2]), int(dob[0]), int(dob[1]))).days / 365\n    return dob_age",
        "test": "assert dog_age(30) == 21.5    # correctness test for dog_age function with h_age=30",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_split(S, step):\n    if step <= 0:\n        raise ValueError(\"Step must be positive.\")\n\n    if not isinstance(S, list):\n        raise TypeError(\"Input must be a list.\")\n\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n\n    return result",
        "test": "assert list_split([1,2,3,4,5,6,7,8,9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * (l ** 2)  # Cube surface area = 6 * side_length^2\n    return surface_area",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    # initialize the sum variable to zero\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current number to the sum\n        sum += i*i\n    \n    # return the sum of the squares of the first n odd natural numbers\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the star number to 1\n    star_num = 1\n\n    # Loop through the range of n+1\n    for i in range(1, n+1):\n        # Add 1 to the current star number\n        star_num += 1\n\n        # Print the current star number\n        print(star_num, end=' ')",
        "test": "assert find_star_num(4) == \"4***\"",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90, 'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122, '0': 48, '1': 49, '2': 50, '3': 51, '4': 52, '5': 53, '6': 54, '7': 55, '8': 56, '9': 57}\n    return ascii_dict.get(k, None)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 829,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8]) == 0",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (2**5)**i\n    return sum",
        "test": "assert even_Power_Sum(5) == 210",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # initialize an empty list to hold the rear elements\n    rear_list = []\n    # iterate through each tuple in the input list\n    for i in range(len(test_list)):\n        # extract the rear element from the current tuple\n        rear_elem = test_list[i][-1]\n        # append the rear element to the rear_list\n        rear_list.append(rear_elem)\n    return rear_list",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [6, 4, 2]",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup",
        "test": "assert substract_elements((1,2,3),(2,3)) == (1,2,4)",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r**2 * h\n    return volume",
        "test": "assert volume_cylinder(2,3) == 16.59, \"Radius should be 2\"",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}",
        "test": "assert dict_filter({'a': 1, 'b': 2, 'c': 3}, 4) == {}",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count",
        "test": "assert count_first_elements(()) == 0",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0: \n        return False\n    else: \n        decagonal = (n * (3 * n - 1)) // 2\n        return decagonal",
        "test": "assert is_num_decagonal(2) == 5",
        "num_ids": 462,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2), \"sequential_search([1, 2, 3, 4, 5], 3) should return (True, 2)\"",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True, \"all_unique([1, 2, 3, 4, 5]) == True, but it returns False\"",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([-1,-2,-3],[-4,-5,-6]) == [3,3,3]",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def validate(n):\n    # create a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    # loop through each digit in the integer and update the frequency in the dictionary\n    for digit in str(n):\n        freq[int(digit)] = freq.get(int(digit), 0) + 1\n    # loop through the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    return True",
        "test": "assert validate(12345) == True",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    all_equal = True\n    for item in list:\n        if item!= element:\n            all_equal = False\n            break\n    return all_equal",
        "test": "assert check_element([1, 2, 3], 2) == False # The list [1, 2, 3] is not equal to 2",
        "num_ids": 476,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three(\"abbabb\") == True",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_list = []\n    max_sum = float('-inf')\n    for i in range(n):\n        if i < k:\n            sum_list.append(a[i])\n        else:\n            if i == n-1:\n                max_sum = max(max_sum, sum(sum_list))\n                break\n            else:\n                sum_list.append(a[i])\n                max_sum = max(max_sum, sum(sum_list))\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1,2,3,4,5], 5, 5) == 15",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i*i\n    return sum_squares",
        "test": "assert square_Sum(1) == 0, \"square_Sum(1) should be 0\"",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    # Initialize maximum length to be 0\n    max_length = 0\n\n    # Loop through each list in the list1\n    for lst in list1:\n        # Find the length of each list\n        length = len(lst)\n        # Update the maximum length if necessary\n        if length > max_length:\n            max_length = length\n\n    # Return the list of maximum length\n    return [max_length]",
        "test": "assert max_length([[1, 2, 3], [4, 5, 6]]) == [3]",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def count_no_of_ways(n, k):\n    def helper(n, k, color1, color2):\n        if n == 0:\n            return 1\n        elif n == 1:\n            if color1 == color2:\n                return 1\n            else:\n                return 0\n        else:\n            color1_count = 0 if color1 == k else helper(n-1, k, color1, color2)\n            color2_count = 0 if color2 == k else helper(n-1, k, color1, color2)\n            same_color_count = 0 if color1 == color2 else helper(n-1, k, color1, color2)\n            return color1_count + color2_count + same_color_count\n    \n    return helper(n, k, 0, 0)",
        "test": "assert count_no_of_ways(3, 3) == 4",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def find(n,m):\n    '''\n    This function takes two integers as input and returns the quotient rounded down to the nearest integer.\n    '''\n\n    return round(n/m)",
        "test": "assert find(10,3) == 3",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the length of the hypotenuse\n    c = math.sqrt(w**2 + h**2)\n\n    # Return the third side of the right angled triangle\n    return c",
        "test": "assert otherside_rightangle(3,4) == math.sqrt(3**2 + 4**2)",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5, \"max_val([1, 2, 3, 4, 5]) should return 5\"",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert sum_div(12) == 28,'sum_div(12) should return 28'",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Sort the array in O(nlogn) time complexity\n    arr.sort()\n    # Initialize variables to keep track of count of inversions\n    inv_count = 0\n    # Traverse the array from the first and last elements\n    for i in range(n-1):\n        # If the current element is greater than the previous one, \n        # then count an inversion\n        if arr[i] > arr[i+1]:\n            inv_count += n - i - 1\n    return inv_count",
        "test": "assert get_Inv_Count([1, 2, 3]) == 0, \"get_Inv_Count([1, 2, 3]) should return 0.\"",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "test": "assert flatten_list([[1, 2], 3, [[4], 5]]) == [1, 2, 3, 4, 5]",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n    # Iterate through the list of tuples\n    for item, count in stdata:\n        # Increment the count of each item in the defaultdict\n        freq[item] += count\n    # Calculate the maximum aggregate\n    max_agg = max(freq.values())\n    return max_agg",
        "test": "assert max_aggregate([(1, 2), (3, 4)]) == 4, \"max_aggregate([(1, 2), (3, 4)]) should return 4.\"",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n), 2**(2*n+2)-1):\n        sum1 = sum(int(digit) for digit in bin(i)[2:])\n        sum2 = sum(int(digit) for digit in bin(i)[-2:])\n        if sum1 == sum2:\n            count += 1\n    return count",
        "test": "assert count_binary_seq(1) == 0",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n    return depth",
        "test": "assert dict_depth({\"a\": {\"b\": {\"c\": 3}}}) == 4",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n    arr (list): list of elements\n    ranges (list): list of ranges\n    rotations (int): number of rotations\n    index (int): index of the element to find\n\n    Returns:\n    int: element at the given index after number of rotations\n\n    '''\n    # Initialize the starting and ending indexes of the sub-array to rotate\n    start_index = index - rotations\n    end_index = index - 1\n\n    # Check if the sub-array is within the bounds of the list\n    if start_index < 0:\n        start_index = 0\n    if end_index >= len(arr):\n        end_index = len(arr) - 1\n\n    # Find the sum of the elements in the sub-array and the element at the given index\n    sub_array_sum = sum(arr[start_index:end_index+1])\n    given_element = arr[index]\n\n    # Calculate the new element after rotating the sub-array\n    new_element = (given_element + sub_array_sum) % 1000000007\n\n    # Find the new index of the given element after rotating the sub-array\n    new_index = arr.index(new_element)\n\n    # Return the element at the new index\n    return arr[new_index]",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[1,3]],[0,1],3) == 4",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = r\"^p.*\"\n    for word in words:\n        if re.match(pattern, word):\n            return word, re.sub(pattern, \"\", word)\n    return None, None",
        "test": "assert start_withp(['apple', 'banana', 'orange', 'pear', 'grape']) == ('pear', 'grape')",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0, []\n    if index == k:\n        return a[index], [a[index]]\n\n    # Find the maximum sum of increasing subsequence from prefix until the ith index\n    max_sum, max_sum_subseq = max_sum_increasing_subseq(a, n, index+1, k)\n\n    # Check if the current element is larger than the kth element, if yes, include it in the subsequence\n    if a[index] > a[k]:\n        max_sum = max(max_sum, a[index]+max_sum_increasing_subseq(a, n, index+1, k+1)[0])\n        max_sum_subseq.append(a[index])\n\n    return max_sum, max_sum_subseq",
        "test": "assert max_sum_increasing_subseq([1, 3, 4, 2, 6, 5], 6, 0, 2) == 21, \"Test case failed.\"",
        "num_ids": 1332,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a new list to store the colon\n    colon = []\n\n    # Loop through the tuple to get each element\n    for i in range(m):\n        # Get the tuple index for the current element\n        index = i * n\n\n        # Check if the index is in bounds\n        if index < len(tuplex):\n            # If it is, append the element to the colon list\n            colon.append(tuplex[index])\n        else:\n            # If the index is out of bounds, append None to the colon list\n            colon.append(None)\n\n    # Return the colon as a tuple\n    return tuple(colon)",
        "test": "assert colon_tuplex((1,2),(2,3),(3,4),m=2,n=3) == (1,2,3)",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products\n    largest_product1 = 0\n    largest_product2 = 0\n\n    # Loop through the desired number of products\n    for i in range(N):\n        # Multiply the two largest numbers in each list and add the result to the total\n        product1 = nums1[-1] * nums1[-2]\n        product2 = nums2[-1] * nums2[-2]\n        total_product = product1 + product2\n\n        # Update the largest products if needed\n        if total_product > largest_product1:\n            largest_product2 = largest_product1\n            largest_product1 = total_product\n        elif total_product > largest_product2:\n            largest_product2 = total_product\n\n    return largest_product1, largest_product2",
        "test": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3) == [120, 60, 40]",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def maximum(a, b):\n    '''\n    This function takes in two numbers and returns the larger of them.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2,3) == 3 # correctness of maximum function with two numbers",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('') == ()",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the index variable and the current binary representation of n\n    index = 0\n    binary_rep = bin(n)[2:]\n\n    # Traverse through the binary representation of n and set the left most unset bit to 1\n    while index < len(binary_rep):\n        if binary_rep[index] == '0':\n            binary_rep = binary_rep[:index] + '1' + binary_rep[index+1:]\n            break\n        index += 1\n\n    # Convert the binary representation back to an integer and return the result\n    return int(binary_rep, 2)",
        "test": "assert set_left_most_unset_bit(0) == 0",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone with a given base radius and height.\n    \"\"\"\n    return math.pi * r**2 * h",
        "test": "assert volume_cone(1,1) == math.pi*1*1",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1",
        "test": "assert highest_Power_of_2(0) == 0",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(2) == 3, \"The third lucas number is 3.\"",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]",
        "test": "assert add_string([], '%s %s') == []",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create a nested dictionary to store the data\n    data = {}\n    \n    # Iterate through the first list and add key-value pairs to the nested dictionary\n    for i, val in enumerate(l1):\n        data[str(i)] = val\n    \n    # Iterate through the second list and add key-value pairs to the nested dictionary\n    for i, val in enumerate(l2):\n        data[str(i)][\"value\"] = val\n    \n    # Iterate through the third list and add key-value pairs to the nested dictionary\n    for i, val in enumerate(l3):\n        data[str(i)][\"value\"][\"subvalue\"] = val\n    \n    return data",
        "test": "assert convert_list_dictionary([1, 2, 3], [4, 5, 6], [7, 8, 9]) == {1: [4, 5, 6], 2: [7, 8, 9]}",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return n\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(str(item)) > max_len:\n            max_len = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_len:\n            max_list.append(item)\n    \n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False",
        "test": "assert check_distinct((1, 2, 3)) == True",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the frequency of characters in the string\n    freq = {}\n    \n    # Iterate through the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # Iterate through the dictionary to find the first non-repeated character\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None",
        "test": "assert first_non_repeating_character(\"aabbcc\") == \"b\"",
        "num_ids": 553,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if not re.search(regex, string):\n        return False\n    \n    if len(string) > 1 and string[0] == string[-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_char(\"123\") == False",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Get the length of the sorted list\n    length = len(numbers)\n\n    # Check if the length is odd or even\n    if length % 2 == 0:\n        # If the length is even, calculate the average of the two middle numbers\n        median = (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n    else:\n        # If the length is odd, simply return the middle number\n        median = numbers[length // 2]\n\n    return median",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 576,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        sum_of_digits += digit_sum\n    return sum_of_digits",
        "test": "assert sum_of_digits([0, 0, 0]) == 0",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "test": "assert bitwise_xor((1, 2), (3, 4)) == (2, 6)",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # convert the list to set to remove duplicates\n    unique_set = set(test_list)\n    # convert the set back to a list and count its length\n    unique_list = list(unique_set)\n    return len(unique_list)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same number of elements\")\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            tup1_elem = test_tup1[i]\n            tup2_elem = test_tup2[i]\n            if isinstance(tup1_elem, tuple) and isinstance(tup2_elem, tuple):\n                result.append(add_nested_tuples(tup1_elem, tup2_elem))\n            else:\n                result.append(tup1_elem + tup2_elem)\n        return tuple(result)",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2,3) == 2",
        "num_ids": 198,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two tuples as input and checks whether an element exists within the first tuple.\n    If an element is found, the function returns True. Otherwise, it returns False.\n    '''\n\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False",
        "test": "assert check_tuplex(tuplex=(1,2,3), tuple1=(4,)) == False, \"check_tuplex failed\"",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert find_Parity(5) == True, \"The parity of 5 should be odd.\"",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Initialize a variable to store the next bigger number\n    next_bigger = 0\n\n    # Reverse the digits of the given number\n    rev_n = int(str(n)[::-1])\n\n    # Check if the reversed number is 9 or more digits\n    if len(str(rev_n)) > 9:\n        # If it is, loop through each digit from the end to the beginning\n        for i in range(len(str(rev_n))-1, -1, -1):\n            # Check if the digit is 0\n            if int(str(rev_n)[i]) == 0:\n                # If it is, check if the next digit is 9\n                if int(str(rev_n)[i+1]) == 9:\n                    # If it is, update the next bigger number by reversing the digits of the reversed number\n                    next_bigger = int(str(rev_n)[i+1:][::-1]) + 10**len(str(rev_n)[i+1:])\n                else:\n                    # If not, update the next bigger number by reversing the digits of the reversed number\n                    next_bigger = int(str(rev_n)[i+1:][::-1]) + 10**(len(str(rev_n)[i+1:])-1)\n                break\n            # If the digit is not 0, update the next bigger number by reversing the digits of the reversed number\n            else:\n                next_bigger = int(str(rev_n)[i:][::-1])\n                break\n\n    # If the reversed number is less than or equal to 9 digits, check if the last digit is 9\n    elif int(str(rev_n)[-1]) == 9:\n        # If it is, update the next bigger number by reversing the digits of the reversed number\n        next_bigger = int(str(rev_n)[-1:][::-1]) + 10**(len(str(rev_n))-1)\n\n    else:\n        # If the last digit is not 9, update the next bigger number by reversing the digits of the reversed number\n        next_bigger = int(str(rev_n)[-1:][::-1]) + 10**(len(str(rev_n))-2)\n\n    return next_bigger",
        "test": "assert rearrange_bigger(1234567) == 987654321",
        "num_ids": 1196,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    min_heap = []\n    result = []\n\n    for i, num1 in enumerate(nums1):\n        for j, num2 in enumerate(nums2):\n            pair = (min(num1, num2), num1, num2)\n            heapq.heappush(min_heap, pair)\n\n            if len(min_heap) == k:\n                pair = heapq.heappop(min_heap)\n                result.append([pair[1], pair[2]])\n\n    return result",
        "test": "assert k_smallest_pairs([],[],0) == []",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        list1 (list): A list of tuples containing numbers.\n\n    Returns:\n        float: The minimum product of all pairs of tuples.\n\n    \"\"\"\n    # Sort the list in ascending order of the first element in each tuple\n    list1.sort(key=lambda x: x[0])\n\n    # Initialize the minimum product to be equal to the first element of the first tuple\n    min_product = list1[0][0]\n\n    # Loop through the remaining tuples\n    for i in range(1, len(list1)):\n        # Calculate the product of the remaining elements in the current tuple\n        product = list1[i][1:] * list1[i][0]\n\n        # Update the minimum product if the current product is smaller\n        if product < min_product:\n            min_product = product\n\n    return min_product",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]) == 128000",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val",
        "test": "assert min_val(['apple', 'banana', 'cherry']) == 'apple'",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert snake case to camel case\n    camel_case = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    # return camel case string\n    return camel_case.lower()",
        "test": "assert snake_to_camel(\"snake\") == \"snake\"",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list",
        "test": "assert remove_odd([]) == []",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # Check if the list is empty\n    if not list1:\n        return None\n    # Extract the nth element from the list of tuples\n    for i in range(len(list1)):\n        if i == n - 1:\n            return list1[i]",
        "test": "assert extract_nth_element([(\"apple\", 1), (\"banana\", 2), (\"orange\", 3), (\"grape\", 4)], 2) == (\"banana\", 2)",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3], [4,5,6]) == False, \"overlapping([1,2,3], [4,5,6]) should return False\"",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to store the maximum product of the first and second elements\n    max_product1 = max_product2 = arr[0] * arr[1]\n\n    # Loop through the array from the second element to the last element\n    for i in range(2, len(arr)):\n        # Update the maximum product of the first and second elements\n        if arr[i] * arr[i-1] > max_product2:\n            max_product2 = arr[i] * arr[i-1]\n        # Update the maximum product of the second and third elements\n        if arr[i] * arr[i-2] > max_product1:\n            max_product1 = arr[i] * arr[i-2]\n\n    return max_product1, max_product2",
        "test": "assert max_Product([1,1,1,1]) == (1,1), \"Test 4 failed\"",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = []\n    for tuple_ in Input:\n        if tuple_[0] not in common_first:\n            common_first.append(tuple_[0])\n    return common_first",
        "test": "assert group_tuples([('apple', 'banana', 'cherry'), ('banana', 'cherry', 'orange')])[0] == 'apple'",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n    return max_element",
        "test": "assert Find_Max([]) == None",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round the numbers in the list\n    rounded_list = [round(num, 2) for num in list1]\n\n    # Calculate the sum of the rounded numbers\n    total_sum = sum(rounded_list)\n\n    # Multiply the total sum by the length of the list\n    total_sum *= len(list1)\n\n    # Print the result\n    print(\"The total sum is:\", total_sum)",
        "test": "assert round_and_sum([1.2, 3.4, 5.6, 7.8, 9.10]) == 14.65",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum",
        "test": "assert cube_Sum(4) == 100",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for item in test_tup:\n        result += str(item)\n    return result",
        "test": "assert concatenate_tuple((\"Hello\", \"World\", \"!!!\")) == \"HelloWorld!!!\"",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n",
        "test": "assert find_Average_Of_Cube(5) == 157.00000000000002",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(string[-1])\n    return rear_index",
        "test": "assert extract_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\")) == (\"fig\",)",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, [4, 5], 6, [7, [8, 9]]], 5) == 2",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return day + '-' + month + '-' + year\n    else:\n        return 'Invalid date format'",
        "test": "assert change_date_format('2021-05-15') == '15-05-2021'",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Calculate the gap\n    gap = n // 2\n    while gap > 0:\n        # Move the gap to the next position\n        for i in range(gap, n):\n            # Compare the current element with the elements before it\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                # Swap the elements\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        # Reduce the gap\n        gap //= 2\n    return my_list",
        "test": "assert shell_sort([1, 5, 3, 8, 2, 7, 4, 6, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup",
        "test": "assert and_tuples((True, False, True), (True, False, True)) == (True, False, True)",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import math \n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n    return directrix",
        "test": "assert parabola_directrix(3, 4, 5) == 2.0",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == True, \"Function should return True.\"",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the lengths of each half of the trapezium\n    half1 = base1 * height\n    half2 = base2 * height\n\n    # Calculate the areas of the trapezium and the areas of its two halves\n    area1 = half1 * 0.5\n    area2 = half2 * 0.5\n\n    # Calculate the trapezium's base and height\n    base = (area1 + area2) / height\n\n    # Calculate the length of the trapezium's base\n    length1 = base / 2\n\n    # Calculate the length of the trapezium's first half\n    length2 = half1 - length1\n\n    # Calculate the length of the trapezium's second half\n    length3 = half2 - length2\n\n    # Calculate the median length of the trapezium's first half\n    median1 = length2 / 2\n\n    # Calculate the median length of the trapezium's second half\n    median2 = length3 / 2\n\n    # Calculate the median length of the trapezium\n    median = (median1 + median2) / 2\n\n    return median",
        "test": "assert median_trapezium(1,2,3) == 2.0",
        "num_ids": 1984,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            print(f\"{number} is greater than {element}\")\n            return True\n    print(f\"{number} is not greater than any element in the array.\")\n    return False",
        "test": "assert check_greater([], 1) == False",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[bB]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_match_one('ababab') == False, 'test failed'",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(12345) == 5, \"last_Digit(12345) should return 5\"",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst",
        "test": "assert neg_nos([-5, -4, -3, -2, -1]) == [-5, -4, -3, -2, -1]",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str\n",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Create an empty string\n    result = \"\"\n    # Iterate over each element in the list\n    for element in L:\n        # If the element is a multiple of 10, add a \"0\" to the result string\n        if element % 10 == 0:\n            result += \"0\"\n        # Append the element to the result string\n        result += str(element)\n    # Return the result string as an integer\n    return int(result)",
        "test": "assert multiple_to_single([1, 2, 3]) == 1234",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Compile a regular expression pattern for adverbs\n    pattern = re.compile(r'\\b(?:[a-z]+\\b)s\\b')\n    \n    # Find all the occurrences of adverbs in the sentence\n    matches = pattern.findall(text)\n    \n    # If there are no adverbs, return an empty list\n    if not matches:\n        return []\n    \n    # Find the first adverb and its position in the sentence\n    first_adverb = matches[0]\n    first_position = text.find(first_adverb)\n    \n    # Return a list of adverb positions and their corresponding adverbs\n    return [(first_position, first_adverb)]",
        "test": "assert find_adverb_position(\"The girl was so beautiful that she could not resist the temptation.\") == [(1, \"beautiful\"), (6, \"could not resist\")]",
        "num_ids": 947,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 313,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    positive_list = []\n\n    for num in nums:\n        if num > 0:\n            positive_list.append(num)\n            count += 1\n\n    if count == 0:\n        return 0.0\n\n    positive_sum = sum(positive_list)\n    return float(positive_sum) / count",
        "test": "assert positive_count([0, 0, 0, 0, 0]) == 0",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest_num:\n            largest_num = list1[i]\n    return largest_num",
        "test": "assert largest_neg([-1,2,3,4,5]) == -1",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list",
        "test": "assert trim_tuple([], 10) == []",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result",
        "test": "assert index_multiplication((1,2,3),(4,5)) == (4, 10, None)",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # Using Counter module to count the occurence of each element in the tuple.\n    count_dict = Counter(tup) \n    \n    # Using a for loop to iterate through the elements in the list and count the occurence of each element in the tuple.\n    for element in lst: \n        count_dict[element] += 1 \n        \n    # Using a for loop to print the result.\n    for key, value in count_dict.items(): \n        print(key, ':', value) ",
        "test": "assert count_Occurrence(('a', 'b', 'a', 'c', 'd'), ['a', 'b', 'c', 'd']) == Counter({'a': 2, 'b': 1, 'c': 1, 'd': 1})",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum",
        "test": "assert cal_sum(0) == 0, \"cal_sum(0) should be 0\"",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a specified size of string to be extracted as inputs.\n    The function returns a list of string values of the specified size.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings",
        "test": "assert extract_string(['hello', 'world', 'python', 'programming'], 3) == []",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # define regular expression to match whitespaces\n    pattern = re.compile(r'\\s+')\n    \n    # remove all whitespaces using replace() method\n    return pattern.sub('', text)",
        "test": "assert remove_whitespaces('  Hello  World  ') == 'HelloWorld'",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0",
        "test": "assert loss_amount(1000,1000) == 0, \"loss_amount(1000,1000) should return 0\"",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum",
        "test": "assert sumofFactors(100) == 3000",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[A-Z][a-z]*[zZ]\\b'\n    return re.search(pattern, text)",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy cat\") == None",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None",
        "test": "assert check_monthnumb_number(12) == True, \"The month number 12 contains 31 days.\"",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyP\"]",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    \n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist",
        "test": "assert Find_Min([1, 2]) == [1]",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(2,3) == 6",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    This function removes all uppercase substrings from a given string.\n    \"\"\"\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)",
        "test": "assert remove_uppercase(\"this is a test\") == \"this is a test\"",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([]) == []",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the count of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"\") == 0",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize the result list\n    result = []\n\n    # Sort the input list\n    sorted_list = sorted(list1)\n\n    # Iterate over all possible pairs of elements\n    for i in range(len(sorted_list)):\n        for j in range(i + 1, len(sorted_list)):\n            # Append the pair to the result list\n            result.append((sorted_list[i], sorted_list[j]))\n\n    # Return the result list\n    return result",
        "test": "assert combinations_list([]) == []",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray of the array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        if num < 0:\n            current_product *= num\n        else:\n            current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product",
        "test": "assert max_subarray_product([-2, 0, -1]) == 0",
        "num_ids": 614,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return len(set(values)) == 1 and len(values) == n",
        "test": "assert check_value({'a': 1, 'b': 2, 'c': 3}, 2) == False, \"Error in check_value\"",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3}",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # Initialize variables\n    max_product = float('-inf')\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Update max_ending_here and min_ending_here\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        # Update max_product\n        max_product = max(max_product, max_ending_here * min_ending_here)\n        \n    # Return the maximum product\n    return max_product",
        "test": "assert max_product([5, 4, 3, 2, 1]) == 20 # correct",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        print(\"Invalid input tuple!\")\n        return\n\n    for i in range(len(test_tup)-1):\n        print(test_tup[i] + test_tup[i+1])",
        "test": "assert add_pairwise((1,2,3,4,5)) == 15",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product",
        "test": "assert find_remainder([7, 8, 9], 12) == 0, \"find_remainder([7, 8, 9], 12)!= 0\"",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i]+1!= l[i+1]: \n            return False\n    return True",
        "test": "assert check_Consecutive([1,2,3,4,5,6,7,8,9,10]) == True, \"The list [1,2,3,4,5,6,7,8,9,10] should contain consecutive numbers.\"",
        "num_ids": 631,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set from the first list to get unique elements\n    unique_elements1 = set(test_list1)\n    # Create another set from the second list to get unique elements\n    unique_elements2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = unique_elements1.intersection(unique_elements2)\n    # Convert the intersection set to a list and return it\n    return list(intersection)",
        "test": "assert tuple_intersection([(1,2,3),(4,5,6),(7,8,9)], [(1,2,3),(5,6,7)]) == [(1,2,3)]",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"Hello world\", \"l\", \"!\") == \"Hell!o worl!\"",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Sort a dictionary by value.\n\n    Args:\n        dict1 (dict): A dictionary to be sorted by value.\n\n    Returns:\n        dict: The sorted dictionary.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "test": "assert sort_counter({'a': 1, 'b': 3, 'c': 2}) == {'b': 3, 'a': 1, 'c': 2}",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Find the sum of the largest and smallest value\n    largest_sum = nums[0] + nums[1]\n    smallest_sum = nums[0] + nums[1]\n    \n    # Return the sum\n    return largest_sum + smallest_sum",
        "test": "assert big_sum([]) == 0, \"The sum of the largest and smallest values should be 0\"",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower('Hello World!') == 'hello world!', 'The function should convert the given string to lower case.'",
        "num_ids": 302,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1",
        "test": "assert remove_lowercase('Python is AWESOME') == 'Pyth Is Awesom'",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Check if the input is a valid integer\n    if type(n)!= int:\n        print(\"Error: Please enter a valid integer.\")\n        return\n    \n    # Convert the number to a string\n    num = str(n)\n    \n    # Get the first digit of the string\n    first_digit = num[0]\n    \n    # Return the first digit as an integer\n    return int(first_digit)",
        "test": "assert first_Digit(12345) == 1, \"first_Digit failed for 12345\"",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for i in lst:\n        if i % 2!= 0:\n            result.append(i)\n    return result",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Find the sum of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n\n    # Return the difference between the two sums\n    return sum_cubes - sum_numbers",
        "test": "assert difference(5) == 120",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes in a list of integers A and an integer N and returns the number of pairs whose xor value is odd.\n    '''\n    # initialize a counter variable to keep track of the number of odd pairs\n    count = 0\n    # loop through all pairs of indices i and j in the list A\n    for i in range(N):\n        for j in range(i+1, N):\n            # calculate the xor of A[i] and A[j]\n            xor = A[i] ^ A[j]\n            # if the xor value is odd, increment the counter\n            if xor % 2!= 0:\n                count += 1\n    # return the final count of odd pairs\n    return count",
        "test": "assert find_Odd_Pair([1,2,3,4,5], 0) == 0, \"The result is incorrect for the input [1,2,3,4,5], 0\"",
        "num_ids": 887,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()",
        "test": "assert toggle_string('hello world') == 'HELLO WORLD'",
        "num_ids": 398,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to lists of digits\n    num1 = [int(digit) for digit in str(n1)]\n    num2 = [int(digit) for digit in str(n2)]\n\n    # Calculate the absolute difference between the two numbers\n    abs_diff = [abs(num1[i] - num2[i]) for i in range(len(num1))]\n\n    # Calculate the sum of the per-digit differences\n    digit_diff_sum = sum(abs_diff)\n\n    return digit_diff_sum",
        "test": "assert digit_distance_nums(0, 999999) == 440000",
        "num_ids": 1011,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if i > 0 and curr_sum < 0:\n            curr_sum = 0\n    return max_sum",
        "test": "assert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 6",
        "num_ids": 775,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1 + test_tup2)\n    sorted_union = sorted(union_set)\n    print(sorted_union)",
        "test": "assert union_elements((1, 3, 5), (2, 4, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length",
        "test": "assert Find_Max_Length([1, 2, 3, 4, 5]) == 5, \"Incorrect output for list [1, 2, 3, 4, 5]\"",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    # Define the regular expression pattern to match the values between quotation marks\n    pattern = r'(?<=\")([^\"]*)(?=\")'\n    # Use the re.findall() method to extract all the values between quotation marks from the text\n    values = re.findall(pattern, text)\n    return values",
        "test": "assert extract_values('\"hello world\"') == ['hello world']",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def count_Pairs(arr, n):\n    # Initialize count to zero\n    count = 0\n\n    # Iterate through all possible pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the sum of the two elements is not equal to the current element\n            if arr[i] + arr[j]!= arr[j]:\n                count += 1\n\n    # Return the count of possible pairs\n    return count",
        "test": "assert count_Pairs([2,2,2,2,2],5) == 10",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 260,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then convert each character to an integer\n    digits = [int(digit) for digit in str(n)]\n    # Initialize a variable to store the sum of the digits\n    total = 0\n    # Loop through each digit and add it to the total\n    for digit in digits:\n        total += digit\n    # Return the total sum of the digits\n    return total",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([5,4,3,2,1]) == False",
        "num_ids": 542,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 195,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list of lists\n    for sublist in list1:\n        # Sort the sublist in ascending order using the sorted function\n        sorted_sublist = sorted(sublist)\n        # Replace the original sublist with the sorted sublist\n        list1[list1.index(sublist)] = sorted_sublist",
        "test": "assert sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]) == [['a', 'b', 'c'], ['d', 'e', 'f']]",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "test": "assert two_unique_nums([1, 2, 3, 2, 1, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "test": "assert unique_product([1, 2, 3, 2, 1]) == 6, \"The product of the unique numbers in the list [1, 2, 3, 2, 1] is incorrect.\"",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * r  # formula to calculate the surface area of a cylinder\n    volume = (3.14159 * r * r * h) / 3  # formula to calculate the volume of a cylinder\n    return area, volume\n",
        "test": "assert surfacearea_cylinder(1, 2) == 31.4159",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False",
        "test": "assert is_Sub_Array([1,2,3,4], [1,3,4]) == False",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0: \n        factorial = factorial * n\n        n = n - 1\n    return factorial % 10",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n    list1 (list): The first list to be interleaved.\n    list2 (list): The second list to be interleaved.\n    list3 (list): The third list to be interleaved.\n\n    Returns:\n    list: A flat list with the elements of list1, list2, and list3 interleaved.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Use sets to remove duplicates from each tuple\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the set intersection\n    intersection = set1.intersection(set2)\n\n    # Find the set difference\n    difference = set1.difference(set2)\n\n    # Combine the two sets to get the final set of dissimilar elements\n    dissimilar = set1.union(difference)\n\n    # Return the set of dissimilar elements\n    return dissimilar",
        "test": "assert find_dissimilar((1,2,3),(4,5,6)) == (3,)",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    filtered_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            if len(item) % 2 == 0:\n                filtered_tuple.append(even_fnc(item))\n            else:\n                filtered_tuple.append(item)\n        else:\n            filtered_tuple.append(item)\n    return filtered_tuple",
        "test": "assert even_ele((('a', 1), ('b', 2), ('c', 4)), lambda x: x%2 == 0) == [('a', 2), ('c', 4)]",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * (b * s + b * s + b + b * s + b * s)",
        "test": "assert surface_Area(10, 20) == 200, \"surface area should be 200 for base edge 10 and height 20\"",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w*[aeiou][^aeiou]*ly\\b'\n    matches = re.findall(pattern, text)\n    positions = []\n    for match in matches:\n        positions.append((match.start(), match.end()))\n    return positions",
        "test": "assert find_adverbs('The quick brown fox is a quick brown fox.') == []",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes in a list of items and an integer n as input, and returns a list of the n most expensive items in the dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) <= n:\n        return l\n    else:\n        l1 = l[:n]\n        l2 = l[n:]\n        return l2 + l1",
        "test": "assert split_Arr([1,2,3,4,5,6,7,8], 3) == ([1, 2, 3], [4, 5, 6, 7, 8])",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num",
        "test": "assert big_diff([0, 0, 0]) == 0",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through the numbers from a to b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        root = int(i**0.5)\n        if i == root**2:\n            print(i)",
        "test": "assert perfect_squares(4, 4) == []",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "test": "assert polar_rect(0,0) == (0.0, 0.0)",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def swap_List(newList):\n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1]) == [1]",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n: \n        print(\"Error: k should be less than or equal to n.\")\n    elif k == 0: \n        return 1 \n    else: \n        return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)) ",
        "test": "assert binomial_Coeff(5,3) == 5 * 4 * 3",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', r'\\1.\\2.\\3.\\4', ip)\n    return ip",
        "test": "assert removezero_ip('192.168.0.1') == '192.168.0.1'",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2!= 0 and first_odd is None:\n            first_odd = num\n            \n    if first_even is None or first_odd is None:\n        return None\n    \n    diff = first_even - first_odd\n    return diff",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 482,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as strings and returns the minimum number of swaps required to convert them.\n    \"\"\"\n\n    # Convert the binary strings to binary lists\n    binary_list1 = [int(bit) for bit in str1]\n    binary_list2 = [int(bit) for bit in str2]\n\n    # Compare the two lists\n    swaps = 0\n    for i in range(len(binary_list1)):\n        if binary_list1[i]!= binary_list2[i]:\n            swaps += 1\n            # Swap the bits if the first binary list has higher value\n            if binary_list1[i] > binary_list2[i]:\n                binary_list1[i], binary_list2[i] = binary_list2[i], binary_list1[i]\n\n    return swaps\n",
        "test": "assert min_Swaps(\"1010101010\", \"1010101010\") == 0, \"Incorrect result for input '1010101010' and '1010101010'.\"",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if not isinstance(tuple_list, tuple):\n        sys.exit(\"Error: Input must be a tuple.\")\n    else:\n        size = 0\n        for item in tuple_list:\n            size += sys.getsizeof(item)\n        return size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    while i < len(arr1):\n        return arr1[i]\n\n    while j < len(arr2):\n        return arr2[j]",
        "test": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 9) == 10",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Calculate the sum of the cubes of the digits of the number\n    sum_cubes = 0\n    temp_number = number\n    while temp_number > 0:\n        digit = temp_number % 10\n        sum_cubes += digit ** 3\n        temp_number //= 10\n        \n    # Check if the sum of cubes is equal to the original number\n    if sum_cubes == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(25) == False, \"The number 25 is an Armstrong number.\"",
        "num_ids": 612,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_num = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_num += i\n        count += 1\n    average = sum_num/count\n    return sum_num, average",
        "test": "assert sum_average(5) == (15, 3)",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a positive integer as input and returns True if it is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(0) == True",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None",
        "test": "assert first_repeated_char(\"\") == None, \"The empty string should have no repeated character\"",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n+1):\n        l = list(map(str, i))\n        if int(''.join(l)) <= n:\n            ludic.append(int(''.join(l)))\n    return ludic",
        "test": "assert get_ludic(100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    reversed_string =''.join(words)\n    return reversed_string",
        "test": "assert reverse_words(\"apple banana cherry\") == \"cherry banana apple\"",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 383,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "test": "assert radian_degree(0) == 0.0",
        "num_ids": 260,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals('This is a sample text with some literals like \"hello\" or \"world\".', '(?<=[\"])([a-zA-Z]+)([\\\\s\\\\w]+)(?=[\"])', start=30, end=40, flags=re.IGNORECASE) == ('World', 30, 35)",
        "num_ids": 798,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a Python function to find the nth Bell number.\n    \"\"\"\n\n    # Initialize the first two bell numbers\n    bell_1 = 1\n    bell_2 = 1\n\n    # Loop through the rest of the bell numbers\n    for i in range(2, n+1):\n        # Calculate the next bell number\n        next_bell = bell_1 + bell_2\n\n        # Update the values of the previous bell numbers\n        bell_1 = bell_2\n        bell_2 = next_bell\n\n    # Return the nth bell number\n    return bell_1",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L - 1\n    list2 = []\n    for i in range(n):\n        if i!= k:\n            list2.append(list1[i])\n    return list2",
        "test": "assert remove_kth_element([], 0) == []",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if N-1 < len(row):\n            if row[N-1] > max_val:\n                max_val = row[N-1]\n    return max_val",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 8",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n\n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Check if the current tuple has at least one element\n        if len(tup) > 0:\n            # Iterate over each element in the tuple\n            for elem in tup:\n                # Add the element to the cumulative sum\n                cum_sum += elem\n\n    # Return the cumulative sum\n    return cum_sum",
        "test": "assert cummulative_sum([(1,2,3),(4,5,6),(7,8,9)]) == 45",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        average = total / len(tup)\n        average_list.append(average)\n    return average_list",
        "test": "assert average_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3.0, 5.0, 7.0]",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)",
        "test": "assert tuple_modulo((1, 2, 3), (4, 5, 6))!= (1, 2, 3, 4)",
        "num_ids": 570,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    i = 0\n    \n    # Iterate until d is reached\n    while i < steps and d!= 0:\n        # Update d\n        d -= 1\n        \n        # Check if the distance is equal to or less than d\n        if d == i:\n            jumps += 1\n        \n        # Increment i\n        i += 1\n    \n    # Return the number of jumps\n    return jumps",
        "test": "assert min_Jumps(6, 3) == 3",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result",
        "test": "assert div_list([1,2,3], [4,5,6]) == [0.25, 0.4, 0.5]",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a variable to hold the numbers in a list\n    nums = []\n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number to the list\n            nums.append(char)\n    # loop through each character in the string again, but this time, move all numbers to the end of the list\n    new_str = \"\"\n    for char in test_str:\n        # if the character is a number, move it to the end of the list\n        if char.isdigit():\n            # append the number to the new string\n            new_str += nums.pop(0)\n        else:\n            # append the original character to the new string\n            new_str += char\n    # return the new string with all the numbers moved to the end\n    return new_str\n",
        "test": "assert move_num(\"abc\") == \"abc\"",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Check if the list is empty\n    if len(a) == 0:\n        return 0\n\n    # Initialize variables\n    current_subset = [a[0]]\n    largest_subset_size = 1\n    max_subset = [a[0]]\n\n    # Loop over all elements in the list\n    for i in range(1, len(a)):\n        # Check if the current element is divisible by the last element in the subset\n        if a[i] % current_subset[-1] == 0:\n            # If it is, add it to the subset\n            current_subset.append(a[i])\n            # If the size of the subset is larger than the current largest subset, update the largest subset\n            if len(current_subset) > largest_subset_size:\n                largest_subset_size = len(current_subset)\n                max_subset = current_subset\n        # If the current element is not divisible by the last element in the subset, remove the last element from the subset\n        else:\n            current_subset.pop()\n            # If the size of the subset is larger than the current largest subset, update the largest subset\n            if len(current_subset) > largest_subset_size:\n                largest_subset_size = len(current_subset)\n                max_subset = current_subset\n\n    # Return the largest subset size\n    return largest_subset_size",
        "test": "assert largest_subset([1, 3, 5, 7, 9]) == 2",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        median = (arr1[n//2-1] + arr1[n//2]) / 2\n    else:\n        median = arr1[n//2]\n    return median",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 5) == 5",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1,2,3], 2) == [1, 4, 9]",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper('Hello') == 'HELLO'",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 0\n    b = r\n    c = r\n    # calculate the perimeter of the triangle\n    perimeter = a + b + c\n    # calculate the semiperimeter of the triangle\n    semi_perimeter = (a + b + c) / 2\n    # calculate the area of the triangle using Heron's formula\n    area = (semi_perimeter * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c)) ** 0.5\n    # return the area of the largest triangle\n    return area",
        "test": "assert triangle_area(4) == 14.770541852849343",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if i+1 not in array:\n            return i+1",
        "test": "assert find_First_Missing([6,7,8,9,10]) == 1",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 233,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as an argument and returns a new list with only the even numbers from the original list.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x - 1, y))\n    if x < n - 1:\n        adj.append((x + 1, y))\n    if y > 0:\n        adj.append((x, y - 1))\n    if y < m - 1:\n        adj.append((x, y + 1))\n    return adj + sub",
        "test": "assert adjac((0,0)) == [(0,1),(1,0),(1,1),(0,0),(1,0),(0,1),(0,0),(1,1),(1,0),(1,0),(0,1),(0,1),(0,0),(1,1),(1,0),(1,1),(0,0),(1,1),(1,0),(1,1),(0,1),(1,0),(0,1),(1,1),(1,0),(0,0),(0,1),(0,1),(0,0),(1,0),(0,1),(1,0),(1,1),(0,0),(1,0),(1,1),(1,0),(0,1),(0,0),(1,0),(0,0),(0,1),(0,1),(1,1),(0,1),(0,0),(0,0),(0,1),(0,0),(0,0),(1,1),(1,0),(1,0),(0,1),(1,0),(1,1),(0,1),(1,1),(0,0),(0,0),(1,1),(0,0),(1,0),(1,0),(1,1),(1,1),(0,0),(1,1),(1,0),(1,1),(1,1),(0,1),(0,1),(1,0),(0,1),(0,0),(0,0),(0,0),(0,1),(0,0),(0,1),(0,1),(0,1),(1,1),(1,0),(1,0),(0,1),(1,1),(0,0),(0,1),(0,0),(1,1),(1,1),(1,0),(1,1),(0,0),(0,1),(1,0),(1,1),(0,0),(1,1),(1,1),(1,1),(0,0),(0,0),(1,0),(0,0),(1,1),(0,0),(0,1),(0,1),(0,0),(1,0),(1,1),(0,1),(1,0),(1,0),(1,0),(1,1),(0,0),(0,1),(0,1),(1,0),(0,0),(1,1),(0,0),(1,0),(0,1),(0,0),(0,0),(1,0),(1,1),(1,0),(1,0),(1,0),(1,1),(1,0),(0,0),(0,0),(1,1),(0,0),(1,1),(1,0),(0,1),(1,0),(0,1),(0,1),(1,1),(0,1),(1,1),(1,1),(1,1),(1,1),(1,1),(0,0),(1,1),(1,0),(0,0),(1,0),(0,0),(0,0),(1,0),(1,1),(0,1),(0,0),(0,1),(0,0),(1,1),(0,0),(0,1),(0,1),(1,0),(0,0),(1,0),(1,1),(1,0),(0,1),(0,1),(1,1),(0,0),(0,0),(0,0),(0,1),(0,1),(1,1),(1,1),(0,1),(1,1),(0,1),(0,0),(1,0),(1,0),(0,1),(1,0),(1,0),(1,1),(0,1),(0,1),(0,0),(0,1),(0,1),(1,0),(0,0),(1,1),(1,0),(0,1),(0,1),(0,1),(1,0),(1,1),(1,0),(0,0),(0,1),(1,1),(0,0),(1,0),(1,1),(1,1),(0,0),(0,0),(1,0),(1,0),(1,1),(1,0),(0,0),(1,0),(0,0),(0,1),(1,0),(1,0),(0,1),(1,1),(1,0),(0,1),(0,0),(0,1),(0,0),(0,1),(1,0),(0,1),(0,0),(0,1),(1,0),(0,0),(1,1),(0,0),(0,1),(0,0),(1,0),(1,1),(1,1),(1,1),(1,1),(1,1),(1",
        "num_ids": 1757,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    return new_text",
        "test": "assert replace_spaces(\"Hello World\") == \"Hello_World\"",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers and moves all zeroes to the end of the list.\n    \"\"\"\n    # Create a new list to store non-zero elements\n    non_zero_list = []\n    \n    # Iterate through the list and add non-zero elements to the new list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n    \n    # Add all zeroes to the end of the new list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            non_zero_list.append(0)\n    \n    # Return the new list with all zeroes moved to the end\n    return non_zero_list",
        "test": "assert move_zero([0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0]",
        "num_ids": 1117,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR of a pair of numbers is equal to the XOR of that number and the other number in the list\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n\n    # Return the sum of the XOR of all pairs of numbers\n    return xor_sum",
        "test": "assert pair_xor_Sum([1,2,3,4,5,6],7) == 56",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heapsort algorithm.\n    '''\n    # convert the given list to a heap\n    heap = [x for x in iterable]\n    hq.heapify(heap)\n\n    # sort the heap\n    for i in range(len(heap)-1, 0, -1):\n        hq.heapreplace(heap, heap[i])\n\n    # convert the heap back to a list\n    return [x for x in heap]\n",
        "test": "assert heap_sort([4, 7, 9, 2, 5, 1, 3, 8, 6]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    # Check if the actual cost is greater than the sale amount\n    if actual_cost > sale_amount:\n        return True\n    # If not, check if the sale amount is greater than the actual cost\n    elif sale_amount > actual_cost:\n        return False\n    # If both conditions are not satisfied, return None\n    else:\n        return None",
        "test": "assert noprofit_noloss(1000, 800) == True, 'noprofit_noloss(1000, 800) should return True'",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_value = round(13.12 + 0.6215 * t - 35.75 * math.log(t) + 0.4275 * math.log(v))\n    return wind_chill_value",
        "test": "assert wind_chill(10,25) == 10",
        "num_ids": 991,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name.startswith('a') or name.startswith('e') or name.startswith('i') or name.startswith('o') or name.startswith('u'):\n            count += len(name)\n    return count",
        "test": "assert sample_nam([\"adam\", \"Andrew\", \"Alex\", \"jimmy\", \"jim\", \"jimmy\", \"jim\"]) == 15",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis from the string using regular expression\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    # Return the items without the parenthesis\n    return items",
        "test": "assert remove_parenthesis(\"()\") == \"\"",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (n + 1) // 2",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[z]\\w*\\b'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_wordz_middle('middlez') == True, 'Incorrect output for \"middlez\"'",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input) \n    for i in range(n//2): \n        temp = input[i] \n        input[i] = input[n-i-1] \n        input[n-i-1] = temp \n    return input[:k] + input[k][::-1] + input[k+1:] ",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 0) == [5,4,3,2,1]",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary and add the items of test_dict\n    new_dict = test_dict.copy()\n    # create a new tuple with the items of test_tup and the new dictionary\n    new_tup = test_tup + (new_dict,)\n    # return the new tuple\n    return new_tup",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 4, 'b': 5, 'c': 6}) == (1, 2, 3, {'a': 4, 'b': 5, 'c': 6})",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Calculate the total cost and the number of cells visited for each path\n    total_cost = 0\n    num_cells_visited = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i == 0 and j == 0:\n                # We start at the top-left cell\n                total_cost += cost[i][j]\n                num_cells_visited += 1\n            elif i == 0 and j == len(cost[0]) - 1:\n                # We end at the bottom-right cell\n                total_cost += cost[i][j]\n                num_cells_visited += 1\n            elif i == len(cost) - 1 and j == 0:\n                # We end at the bottom-right cell\n                total_cost += cost[i][j]\n                num_cells_visited += 1\n            elif i == len(cost) - 1 and j == len(cost[0]) - 1:\n                # We end at the bottom-right cell\n                total_cost += cost[i][j]\n                num_cells_visited += 1\n            else:\n                # We can move right or down\n                if j < len(cost[0]) - 1:\n                    # We can move right\n                    total_cost += cost[i][j]\n                    num_cells_visited += 1\n                    if i < len(cost) - 1:\n                        # We can move down\n                        total_cost += cost[i + 1][j]\n                        num_cells_visited += 1\n                elif i < len(cost) - 1:\n                    # We can move down\n                    total_cost += cost[i][j]\n                    num_cells_visited += 1\n                    if j < len(cost[0]) - 1:\n                        # We can move right\n                        total_cost += cost[i][j + 1]\n                        num_cells_visited += 1\n\n    # Calculate the maximum average of all paths\n    max_average = total_cost / num_cells_visited\n    return max_average",
        "test": "assert maxAverageOfPath([[1, 3, 1], [1, 5, 1], [4, 2, 1], [2, 2, 2], [1, 3, 1], [1, 5, 1]]) == 12.0",
        "num_ids": 2358,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "test": "assert filter_data({'Alice': (1.75, 80.0), 'Bob': (1.65, 70.0), 'Charlie': (1.70, 85.0)}, 1.7, 70.0) == ['Alice', 'Bob']",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4]) == [4]",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        digit = base % 10\n        base_sum += digit\n        power -= 1\n        base //= 10\n    return base_sum",
        "test": "assert power_base_sum(7, 0) == 0, \"power_base_sum(7, 0) should be 0\"",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Extract values between quotation marks \" \" of the given string.\n\n    :param text: string to extract quotations from\n    :type text: str\n    :return: list of quotations\n    :rtype: list\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    quotations = re.findall(pattern, text)\n    return quotations",
        "test": "assert extract_quotation('\"I am a man, not a person.\"') == ['I am a man, not a person.']",
        "num_ids": 383,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result",
        "test": "assert multiply_elements((7, 8, 9)) == (56, 64, 72)",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5, 7, 9]",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n        else:\n            continue\n    return result",
        "test": "assert consecutive_duplicates([1, 2, 3, 4, 3, 2, 1]) == [1, 2, 3, 4]",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone.\n\n    Args:\n        r (float): The radius of the cone.\n        h (float): The height of the cone.\n\n    Returns:\n        float: The lateral surface area of the cone.\n    \"\"\"\n\n    # Calculate the lateral surface area\n    s = (3 * r * r + h * h) / (3 * math.tan(math.pi / 3))\n\n    return s",
        "test": "assert lateralsurface_cone(5, 2) == math.pi * (5**2 + 2**2)",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expressions to match spaces, commas, and dots\n    space_pattern = re.compile(r'\\s+')\n    comma_pattern = re.compile(r',')\n    dot_pattern = re.compile(r'\\.')\n    # Replace spaces, commas, and dots with colons using a group\n    return space_pattern.sub(':', comma_pattern.sub(':', dot_pattern.sub(':', text)))",
        "test": "assert replace_specialchar('abc,def,ghi') == 'abc:def:ghi'",
        "num_ids": 403,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n\n    low, high = 0, len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2, \"The output of find_first_occurrence([1, 2, 3, 4, 5], 3) should be 2.\"",
        "num_ids": 907,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    def subarray_products(arr):\n        n = len(arr)\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if arr[i] * arr[j] > 0:\n                    dp[i] += dp[j]\n        return dp\n\n    def sum_of_subarrays(arr, dp):\n        n = len(arr)\n        s = 0\n        for i in range(n):\n            s += arr[i] * dp[i]\n        return s\n\n    n = len(arr)\n    dp = subarray_products(arr)\n    s = sum_of_subarrays(arr, dp)\n    return s",
        "test": "assert sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8]) == 3162240 # Test case 4",
        "num_ids": 975,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert the integer to a binary string\n    binary_str = bin(n)[2:]\n    # Find the length of the binary string\n    length = len(binary_str)\n    # Calculate the middle index\n    mid = length // 2\n    # Find the first and last bits\n    first = int(binary_str[0], 2)\n    last = int(binary_str[-1], 2)\n    # Toggle the middle bits\n    binary_str = binary_str[:mid] + ('0' if first else '1') + binary_str[mid+1:-1] + ('0' if last else '1') + binary_str[mid+2:]\n    # Convert the binary string back to an integer\n    return int(binary_str, 2)",
        "test": "assert set_middle_bits(0b1010101010101010) == 0b0010101010101010",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif x < a[index]:\n        return index - 1\n    else:\n        return index",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 5) == 2, \"The left insertion point for 5 in [1, 3, 5, 7, 9] should be 2\"",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"python\") == False",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def triangular(n):\n        \"\"\"Return the nth triangular number\"\"\"\n        return n * (n + 1) // 2\n\n    # Find the minimum value of n such that the triangular number is greater than 10^(n-1)\n    min_n = math.floor(math.log10(10**(n-1))+1)\n\n    # Initialize the index and smallest triangular number with minimum value of n\n    index = min_n\n    min_tri = triangular(min_n)\n\n    # Find the smallest triangular number with n digits\n    while triangular(index).bit_length() < n:\n        index += 1\n\n    # Return the index of the smallest triangular number\n    return index",
        "test": "assert find_Index(1) == 1",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    dictionary = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dictionary[key] = value\n    return dictionary",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert all_Characters_Same('hello world') == False, \"All characters are same\"",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side ** 2",
        "test": "assert area_tetrahedron(4) == 12, \"The area of a tetrahedron with side length 4 is not equal to 12.\"",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 743,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    n = len(list)\n    if n == 0 or m == 0 or m >= n:\n        return list\n    \n    # copying the list to a new list to avoid modifying the original list\n    new_list = list[:]\n    \n    # rotating the new list\n    for i in range(m):\n        new_list.append(new_list.pop(0))\n    \n    # copying the rotated list to the original list\n    list[0:m] = new_list\n    \n    # returning the rotated list\n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none((4, None, 6)) == True",
        "num_ids": 346,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n\n    def is_divisible(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit in its digits.\n        \"\"\"\n        digits = list(str(num))\n        return all(digit in digits for digit in digits)\n\n    return filter(is_divisible, range(startnum, endnum+1))",
        "test": "assert divisible_by_digits(123, 987) == [123, 234, 345, 456, 567, 678, 789, 8910, 91011, 987]",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area\n",
        "test": "assert sector_area(1, 360) == 3.141592653589793",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Create a list to store the length of the longest common subsequence for each three string sequence\n    length_list = []\n\n    # Initialize the length of the longest common subsequence to zero\n    length_list.append(0)\n\n    # Iterate through the three string sequences\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                # Check if the three string sequences are equal at the current index\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    # If they are, then add the length of the current three string sequence to the list\n                    length_list.append(length_list[i-1] + 1)\n                # If the three string sequences are not equal, then find the maximum of the two longest common subsequences and add 1 to it\n                else:\n                    length_list.append(max(length_list[i-1], length_list[j-1]))\n\n    # Return the longest common subsequence using the length_list\n    return X[:length_list[-1]]",
        "test": "assert lcs_of_three(['abc', 'def', 'ghi'], ['xyz', 'uvw', 'xyz'], ['abc', 'xyz']) == []",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the given string into a list of words\n    words = re.findall('\\b\\w+\\b', str1)\n    \n    # Iterate through the list of words and replace words starting with capital letters with spaces\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    \n    # Join the list of words back into a string with spaces between them\n    result = ''.join(words)\n    \n    # Return the modified string\n    return result",
        "test": "assert capital_words_spaces(\"This is an example of a long string\") == \"This is an example of a long string\"",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(num) for num in nums_str]\n    nums.sort()\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str",
        "test": "assert sort_numeric_strings([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\"]",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "test": "assert add_tuple([1,2,3],[4,5,6]) == [1, 2, 3, 4, 5, 6], \"The output of add_tuple([1,2,3],[4,5,6]) should be [1, 2, 3, 4, 5, 6]\"",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array as input and returns True if the array represents a min heap, and False otherwise.\n    '''\n    if len(arr) == 0:\n        return True\n    return check_min_heap_helper(arr, len(arr) - 1)",
        "test": "assert check_min_heap_helper([4, 2, 1, 3, 5], 0) == True, \"The array [4, 2, 1, 3, 5] should be a valid min heap.\"",
        "num_ids": 988,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = 1\n        k = 1\n        l = 2\n\n        while l <= n:\n            j = j + k\n            k = j - k\n            l = l + 1\n\n        return j",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list = sorted(test_list, key=lambda x: x[1])\n    min_list = [test_list[i] for i in range(len(test_list)) if i < K]\n    return min_list",
        "test": "assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 5) == (1, 2, 3)",
        "num_ids": 988,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize a list to store the common elements\n    common_list = []\n    # Loop through each element in l1\n    for i in range(len(l1)):\n        # Check if the element is in l2 and l3, and append it to common_list if it is\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_list:\n            common_list.append(l1[i])\n    # Return the common_list\n    return common_list",
        "test": "assert extract_index_list([1, 2, 3], [3, 4, 5], [2, 4, 6]) == []",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Create a set to store the unique numbers in the list\n    unique_numbers = set(numbers)\n\n    # Convert the set to a list and sort it in ascending order\n    sorted_list = sorted(list(unique_numbers))\n\n    # Return the second smallest number in the sorted list\n    return sorted_list[1]",
        "test": "assert second_smallest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 2, \"Should return 2\"",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result",
        "test": "assert text_match_zero_one('abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "num_ids": 1323,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] or test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 549,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # convert lists to tuples and count occurences\n    counts = {}\n    for i in lst:\n        if isinstance(i, list):\n            i = tuple(i)\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return counts",
        "test": "assert unique_sublists([1,2,3]) == {1: 1, 2: 1, 3: 1}",
        "num_ids": 1470,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Check if the string contains only digits and decimal point\n    if '.' not in num or '.' in num and '.' not in num.split('.')[-1]:\n        return False\n\n    # Check if the string contains no more than two digits after the decimal point\n    if '.' in num and len(num.split('.')[-1]) > 2:\n        return False\n\n    # Check if the string is a valid float\n    try:\n        float(num)\n    except ValueError:\n        return False\n\n    return True",
        "test": "assert is_decimal(\"123.456\") == False",
        "num_ids": 778,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique = set(arr)\n    return len(unique) == 1",
        "test": "assert unique_Element([1, 2, 2, 3, 4, 5]) == False",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days_in_month = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in days_in_month.keys():\n        if days_in_month[monthnum3] == 30:\n            return True\n    return False",
        "test": "assert check_monthnumber_number(1) == False, \"Incorrect output: check_monthnumber_number(1) == True\"",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function finds the minimum difference between any two elements in a given array. \n    The input array arr consists of n integers, where n is the number of elements in the array. \n    The function returns the minimum difference between any two elements in the array. \n    '''\n\n    # Sort the given array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n\n    # Initialize the index variables for left and right pointers\n    left = 0\n    right = n - 1\n\n    while left < right:\n        # Calculate the difference between the left and right pointers\n        diff = arr[right] - arr[left]\n\n        # If the calculated difference is smaller than the current minimum difference\n        if diff < min_diff:\n            # Update the minimum difference\n            min_diff = diff\n\n        # If the difference is negative, we need to move the left pointer to the right\n        elif diff < 0:\n            left += 1\n        # If the difference is positive, we need to move the right pointer to the left\n        else:\n            right -= 1\n\n    return min_diff",
        "test": "assert find_min_diff([1, 5, 3, 7, 9], 5) == 2",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr('') == 0, \"Expected 0, got {}\".format(number_ctr(''))",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    polite_numbers = []\n    # we start with 0 and 1 as first two polite numbers\n    polite_numbers.append(0)\n    polite_numbers.append(1)\n    # we use loop to generate all the polite numbers from 2nd to nth polite number\n    for i in range(2, n+1):\n        # we calculate the sum of all previous polite numbers\n        current_polite = sum(polite_numbers)\n        # we check if the current number is a polite number or not\n        if current_polite % 2 == 0:\n            polite_numbers.append(current_polite)\n        else:\n            # if current number is odd, we add one to the sum\n            current_polite += 1\n            polite_numbers.append(current_polite)\n    # we return the nth polite number\n    return polite_numbers[n]",
        "test": "assert is_polite(1) == 1, \"1st polite number is 1\"",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result",
        "test": "assert pair_wise([]) == []",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 7) == 2",
        "num_ids": 651,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list",
        "test": "assert Diff([],[]) == []",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4\n    return sum",
        "test": "assert odd_num_sum(5) == 315",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "test": "assert check_expression(\"a+b*c\") == True, \"Invalid expression\"",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)",
        "test": "assert remove_length(\"This is a test string\", 3) == \"Ths is a tst strng\"",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None",
        "test": "assert occurance_substring(\"Hello world\", r\"\\b(goodbye)\\b\") == None",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 775,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True",
        "test": "assert odd_position([1, 2, 3, 4, 5]) == True, \"odd_position([1, 2, 3, 4, 5]) == True\"",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count",
        "test": "assert count_vowels(\"\") == 0",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def find_sum(arr):\n    # initializing variables\n    unique_elements = []\n    sum = 0\n    \n    # iterating through the list and adding unique elements to a new list\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    \n    # iterating through the list again to calculate the sum of the unique elements\n    for element in arr:\n        if element not in unique_elements:\n            continue\n        sum += element\n    \n    # returning the sum of unique elements\n    return sum",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Define a lambda function to split a list into two sublists\n    split_func = lambda x: [list(y) for k, y in groupby(x) if k == x[0]]\n    # Iterate over each element in the list\n    for i in range(len(list1)):\n        # If the current element is equal to the next element, add the next element to the current sublist\n        if list1[i] == list1[i+1]:\n            list1[i] = [list1[i], list1[i+1]]\n        # If the current element is not equal to the next element, split the current sublist using the lambda function\n        else:\n            list1[i] = split_func(list1[i])\n    return list1",
        "test": "assert pack_consecutive_duplicates([1, 1, 2, 2, 2, 3, 3]) == [[1, 1, 2, 2], [3, 3]]",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_counts = {}\n    for sublist in list1:\n        if tuple(sublist) not in list_counts:\n            list_counts[tuple(sublist)] = 1\n        else:\n            list_counts[tuple(sublist)] += 1\n    return list_counts",
        "test": "assert unique_sublists([[1,2,3],[4,5,6],[7,8,9],[1,2,3]]) == {tuple([1, 2, 3]): 2, tuple([4, 5, 6]): 1, tuple([7, 8, 9]): 1}",
        "num_ids": 832,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def find_subsets(test_list, i, target_sum, current_sum):\n        if current_sum == target_sum:\n            result.append(tuple(sorted(test_list[i])))\n            return\n        if current_sum > target_sum:\n            return\n\n        if i == len(test_list):\n            return\n\n        find_subsets(test_list, i + 1, target_sum, current_sum + test_list[i])\n        find_subsets(test_list, i + 1, target_sum, current_sum)\n\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            current_sum = test_list[i] + test_list[j]\n            find_subsets(test_list, i, current_sum, 0)\n\n    return result",
        "test": "assert find_combinations([]) == []",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert count_divisors(24) == True, \"count of divisors should be even\"",
        "num_ids": 624,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            continue\n        for j in range(i+1, n):\n            res += sum(arr[i:j+1])\n    return res",
        "test": "assert odd_length_sum([]) == 0",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    del_max = max_val - min_val\n    h = 0\n    s = 0\n    v = max_val / 255.0\n    if del_max == 0:\n        h = 0\n        s = 0\n    else:\n        if max_val == r:\n            h = (g - b) / del_max\n        elif max_val == g:\n            h = 2 + (b - r) / del_max\n        else:\n            h = 4 + (r - g) / del_max\n        h = h / 6.0\n        if h < 0:\n            h = h + 1\n        s = del_max / max_val\n    return h, s, v",
        "test": "assert rgb_to_hsv(255,0,0) == (0.0, 1.0, 1.0)",
        "num_ids": 1270,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n            even_product *= i\n        else:\n            odd_count += 1\n            odd_product *= i\n            \n    if even_count > 0 and odd_count > 0:\n        return even_product * odd_product\n    else:\n        return None",
        "test": "assert mul_even_odd([1, 2, 3, 4, 5]) == 120",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_list = [int(i) for i in test_str]\n    return tuple(int_list)",
        "test": "assert tuple_str_int(('1', '2', '3')) == (1, 2, 3), \"The tuple_str_int function is not working properly for the input (1, 2, 3).\"",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index",
        "test": "assert right_insertion([1, 3, 5, 7], 8) == 4",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a\\w{3}b\"\n    return re.search(pattern, text) is not None",
        "test": "assert text_match_three(\"abbabbabb\") == True",
        "num_ids": 324,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the list and string\n    combined_list_str = test_list + test_str\n    # convert the concatenated string to a list\n    combined_list = list(combined_list_str)\n    # convert the combined list to a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple",
        "test": "assert new_tuple([\"apple\", \"banana\", \"cherry\"], \"apple\") == (\"apple\", \"banana\", \"cherry\", \"apple\")",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(nums[i:i+2]) % 2 == 1:\n            return False\n    return True",
        "test": "assert even_position([1,2,4,6,8]) == False",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while any(isinstance(x, tuple) for x in test_tup):\n        test_tup = [x for x in test_tup if not isinstance(x, tuple)]\n    return test_tup",
        "test": "assert remove_nested([1,2,3,4]) == [1,2,3,4] # Test 2: check if the function does not remove non-nested tuples",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([[1,2,3],[4,5,6]]) == 2",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initializing the left and right indices\n    left = 0\n    right = len(arr)-1\n    \n    # checking if the element is present in the array\n    if arr[left] == x:\n        return left\n    \n    # iterating through the array\n    while left < right:\n        mid = (left+right)//2\n        \n        # checking if the element is present in the left half of the array\n        if arr[mid] == x:\n            right = mid\n        else:\n            left = mid+1\n    \n    # checking if the element is present in the right half of the array\n    if arr[right] == x:\n        return right\n    \n    return -1",
        "test": "assert last([1,2,3,4,5,6,7],7) == 6, \"last([1,2,3,4,5,6,7],7) should be 6\"",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_starta_endb(\"abcab\") == True",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == 10, \"return_sum({'a': 1, 'b': 2, 'c': 3, 'd': 4}) should return 10.\"",
        "num_ids": 394,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum of odd natural numbers to 0\n    sum_odd = 0\n    \n    # iterate through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # if the number is odd, add it to the sum\n        if i % 2 == 1:\n            sum_odd += i\n    \n    # return the sum of odd natural numbers\n    return sum_odd",
        "test": "assert sum_odd(0) == 0",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # If d is greater than 31, we need to rotate by 32 - d bits\n    d = d % 32\n    if d > 0:\n        return (n << d) | (n >> (32 - d))\n    else:\n        return n << -d",
        "test": "assert left_rotate(0, 8) == 0",
        "num_ids": 962,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces('   ') == ''",
        "num_ids": 323,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and y == x:\n        count += 1\n    if y == z and x == y:\n        count += 1\n    return count",
        "test": "assert test_three_equal(3,3,3) == 3",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_rotation(arr):   \n    rotations_dict = {}\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            if arr[i] in rotations_dict:\n                rotations_dict[arr[i]] += 1\n            else:\n                rotations_dict[arr[i]] = 1\n    return sum(rotations_dict.values())",
        "test": "assert count_rotation([1,2,3,4,5]) == 0",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    low, high = 1, n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid*mid == n:\n            return True\n        elif mid*mid < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False",
        "test": "assert is_perfect_square(26) == False, \"26 is not a perfect square\"",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0: \n        return True \n    elif len(arr) == 1: \n        return arr[0] % 2 == 0\n    else:\n        product = arr[0] * is_product_even(arr[1:])\n        return product % 2 == 0",
        "test": "assert is_product_even([2, 4, 6, 8, 10]) == True",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize the maximum sum and the current sum variables to zero\n    max_sum = 0\n    current_sum = 0\n\n    # Loop through each list in the input list of lists\n    for list in lists:\n        # Loop through each element in the current list\n        for element in list:\n            # Add the current element to the current sum\n            current_sum += element\n\n            # Check if the current sum is greater than the maximum sum so far\n            if current_sum > max_sum:\n                # Update the maximum sum to be the current sum\n                max_sum = current_sum\n\n    # Return the list with the maximum sum\n    return lists[lists.index(max(lists, key=lambda x: sum(x)))]",
        "test": "assert max_sum_list([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]]",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables to store the maximum run of uppercase characters\n    max_run = 0\n    current_run = 0\n\n    # Iterate through each character in the string\n    for i in range(len(test_str)):\n\n        # If the current character is uppercase, add 1 to the current run\n        if test_str[i].isupper():\n            current_run += 1\n\n        # If the current character is lowercase or if the current run is greater than the maximum run, update the maximum run\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    # Update the maximum run with the last character in the string\n    max_run = max(max_run, current_run)\n\n    # Return the maximum run of uppercase characters\n    return max_run",
        "test": "assert max_run_uppercase(\"A man, a plan, a canal, Panama!\") == 1, \"The maximum run of uppercase characters is not correct.\"",
        "num_ids": 878,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1,2,3,4,5]) == 1",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K((1, 2, 3), 3) == True",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 2, 3), (1, 2, 3)) == True",
        "num_ids": 536,
        "indeed": false
    }
]