[
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "test": "assert similar_elements([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []",
        "num_ids": 1958
    },
    {
        "number": 3,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(10) == True",
        "num_ids": 1521
    },
    {
        "number": 4,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a max heap from the input list\n    heap = hq.nlargest(n, nums)\n    # Return the max heap as a list\n    return list(heap)\n",
        "test": "assert heap_queue_largest([1,3,2,5,4], 0) == []",
        "num_ids": 2199
    },
    {
        "number": 6,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x!= 0:\n        x &= (x - 1)\n        count += 1\n    return count == 1",
        "test": "assert is_Power_Of_Two(3) == False",
        "num_ids": 1609
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert find_char_long(\"\") == []",
        "num_ids": 2721
    },
    {
        "number": 8,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 1783
    },
    {
        "number": 9,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    min_rot = n\n    for i in range(n): \n        if str[i] == str[(i+n) % n]: \n            min_rot = min(min_rot, i+1)\n    return min_rot",
        "test": "assert find_Rotations(\"abba\") == 1",
        "num_ids": 3056
    },
    {
        "number": 11,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of the given character from the string.\n    '''\n    if not s:\n        return ''\n    else:\n        return s.replace(ch, '', 1).replace(ch, '', -1)",
        "test": "assert remove_Occ(\"abcde\", \"f\") == \"abcde\", \"remove_Occ failed for no occurrence\"",
        "num_ids": 1627
    },
    {
        "number": 12,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M",
        "test": "assert sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 3060
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    print(\"The volume of the triangular prism is:\", V)",
        "test": "assert find_Volume(10,4,5) == None, \"The function returns None when the input values are invalid.\"",
        "num_ids": 1447
    },
    {
        "number": 16,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Regular expression pattern to match lowercase letters followed by underscore\n    pattern = r'[a-z](?=_)'\n    # Check if the input string matches the pattern\n    return bool(re.search(pattern, text))",
        "test": "assert text_lowercase_underscore('aBcD') == False",
        "num_ids": 1757
    },
    {
        "number": 17,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a  # multiply side length by 4 to get perimeter\n    return perimeter",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 1255
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def str_to_list(string):\n    # Create a list of characters to remove\n    chars_to_remove = set(string)\n    # Create an empty list to store the modified string\n    modified_string = []\n    # Iterate over each character in the input string\n    for char in string:\n        # If the character is not present in the set of characters to remove, append it to the modified string\n        if char not in chars_to_remove:\n            modified_string.append(char)\n    # Join the modified string into a single string and return it\n    return ''.join(modified_string)",
        "test": "assert str_to_list(\"\") == \"\"",
        "num_ids": 2317
    },
    {
        "number": 19,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums) <= 1:\n        return False\n\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False, \"test_duplicate failed for valid input\"",
        "num_ids": 2178
    },
    {
        "number": 20,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(23) == False # incorrect output",
        "num_ids": 1320
    },
    {
        "number": 56,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to string\n    num_str = str(num)\n\n    # Convert the reverse of the number to string\n    rev_str = str(int(num_str[::-1]))\n\n    # Compare the original and reverse numbers\n    if int(num_str) - int(rev_str) < 2:\n        return True\n    else:\n        return False",
        "test": "assert rev(100) == False",
        "num_ids": 1724
    },
    {
        "number": 57,
        "max_answer_num": 24,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num",
        "test": "assert find_Max_Num([1, 4, 5, 7]) == 7",
        "num_ids": 2521
    },
    {
        "number": 58,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x >= 0 and y < 0:\n        return True\n    elif x < 0 and y >= 0:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-5, 2) == True",
        "num_ids": 1431
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    octagonal_num = 0\n\n    while i <= n:\n        octagonal_num += i * i\n        i += 1\n\n    return octagonal_num",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1696
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    digits = defaultdict(int)\n    for i in range(n):\n        digits[s[i]] += 1\n\n    for length in range(n, 0, -1):\n        for start in range(n - length + 1):\n            count += digits[s[start + length - 1]] - digits[s[start - 1]]\n\n    return count",
        "test": "assert count_Substrings(\"12345\") == 0",
        "num_ids": 2095
    },
    {
        "number": 62,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        raise ValueError(\"List is empty\")\n    else:\n        return min(xs)",
        "test": "assert smallest_num([1, 5, 3, 4, 2]) == 1",
        "num_ids": 1443
    },
    {
        "number": 63,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([]) == 0",
        "num_ids": 2559
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples by the second value\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "test": "assert subject_marks([(50, 'Math'), (80, 'English'), (90, 'Science'), (70, 'History'), (60, 'Geography')]) == [(70, 'History'), (60, 'Geography'), (80, 'English'), (50, 'Math'), (90, 'Science')]",
        "num_ids": 2017
    },
    {
        "number": 65,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(data_list):\n        '''\n        Helper function to flatten a list.\n        '''\n        if isinstance(data_list, list):\n            for item in data_list:\n                flatten(item)\n        else:\n            result.append(data_list)\n\n    result = []\n    flatten(data_list)\n    return sum(result)",
        "test": "assert recursive_list_sum([]) == 0, \"The sum of an empty list should be 0.\"",
        "num_ids": 1809
    },
    {
        "number": 66,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]) == 8",
        "num_ids": 1545
    },
    {
        "number": 67,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a dictionary to store the number of ways to partition the Bell numbers\n    bell_count = {0: 1, 1: 1}\n    \n    # Loop through all the numbers from 2 to n\n    for i in range(2, n+1):\n        # Initialize a variable to store the number of ways to partition the current Bell number\n        ways = 0\n        # Loop through all the numbers from 1 to i-1\n        for j in range(1, i+1):\n            # If the current Bell number is divisible by j, add 1 to the number of ways to partition it\n            if i % j == 0:\n                ways += 1\n        # Add the number of ways to partition the current Bell number to the total count\n        bell_count[i] = ways\n    \n    # Return the total number of ways to partition the Bell numbers\n    return bell_count[n]",
        "test": "assert bell_number(1) == 1",
        "num_ids": 1897
    },
    {
        "number": 68,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n < 2:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, n):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, n):\n            if A[i] > A[i-1]:\n                return False\n        return True",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True, \"The given array is monotonic.\"",
        "num_ids": 2625
    },
    {
        "number": 69,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for item in s:\n        if item not in l:\n            return False\n    return True",
        "test": "assert is_sublist([1, 2, 3], [4, 5]) == False",
        "num_ids": 1708
    },
    {
        "number": 70,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # initialize a variable to store whether all tuples have equal length or not\n    equal_length = True\n\n    # iterate through each tuple in the input list\n    for i in range(len(Input)):\n        # get the length of the current tuple\n        length = len(Input[i])\n\n        # check if all tuples have equal length\n        if not equal_length:\n            break\n        for j in range(len(Input)):\n            if i!= j:\n                if length!= len(Input[j]):\n                    equal_length = False\n                    break\n\n    # return the value of the variable equal_length\n    return equal_length",
        "test": "assert find_equal_tuple([(1, 2, 3), (4, 5)]) == False",
        "num_ids": 1591
    },
    {
        "number": 71,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # define a function to swap two elements in the list\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # define a function to check if the list is sorted\n    def is_sorted(nums):\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1]:\n                return False\n        return True\n\n    # define a function to partition the list around a pivot element\n    def partition(nums, low, high):\n        pivot = nums[high]\n        i = low - 1\n        for j in range(low, high):\n            if nums[j] <= pivot:\n                i += 1\n                swap(nums, i, j)\n        swap(nums, i+1, high)\n        return i+1\n\n    # define a function to do the actual sorting\n    def sort(nums, low, high):\n        if low < high:\n            pi = partition(nums, low, high)\n            sort(nums, low, pi-1)\n            sort(nums, pi+1, high)\n\n    # call the sort function on the list\n    sort(nums, 0, len(nums)-1)\n\n    # return the sorted list\n    return nums",
        "test": "assert comb_sort([]) == []",
        "num_ids": 3525
    },
    {
        "number": 72,
        "max_answer_num": 28,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Calculate the square of the given number\n    num_sq = n*n\n    # Check if the square of the given number is the difference of two squares\n    for i in range(1, n+1):\n        if num_sq - i*i == 0:\n            return True\n    return False",
        "test": "assert dif_Square(0) == False, \"Test Failed\"",
        "num_ids": 3061
    },
    {
        "number": 74,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for i, color in enumerate(colors):\n        if patterns[i] == color:\n            if i < len(colors) - 1 and patterns[i + 1] == color:\n                if i < len(colors) - 2 and patterns[i + 2] == color:\n                    if i < len(colors) - 3 and patterns[i + 3] == color:\n                        return True\n            else:\n                return True\n    return False",
        "test": "assert is_samepatterns([\"red\", \"green\", \"blue\"], [[0, 1, 2], [1, 2, 0], [2, 0, 1]]) == False",
        "num_ids": 2766
    },
    {
        "number": 75,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # convert the list of tuples into a dictionary to easily check for divisibility\n    dict_test_list = {}\n    for item in test_list:\n        for i in range(len(item)):\n            key = str(i) + '_' + str(item[i])\n            if key in dict_test_list:\n                dict_test_list[key] += 1\n            else:\n                dict_test_list[key] = 1\n    \n    # create a new list to store the tuples that have all elements divisible by k\n    result = []\n    for key, value in dict_test_list.items():\n        if value == K:\n            # convert the key into a list of indices and check if all elements are divisible by k\n            indices = [int(i) for i in key.split('_')]\n            is_divisible = True\n            for i in indices:\n                if i % K!= 0:\n                    is_divisible = False\n                    break\n            if is_divisible:\n                result.append(test_list[int(indices[0])])\n    \n    return result",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 10) == []",
        "num_ids": 2917
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(45) == False",
        "num_ids": 1196
    },
    {
        "number": 79,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def word_len(s): \n    words = s.split() \n    for word in words: \n        if len(word) % 2!= 0: \n            return True\n    return False",
        "test": "assert word_len(\"\") == False",
        "num_ids": 1286
    },
    {
        "number": 80,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n+1)) * (n+2) // 6",
        "test": "assert tetrahedral_number(0) == 0",
        "num_ids": 1814
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r ** 3\n    return V",
        "test": "assert volume_sphere(1) == 4.1887902047863905",
        "num_ids": 1335
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    result = 0\n    for i in range(len(strr)):\n        result += ord(strr[i])\n    return result % 26",
        "test": "assert get_Char(\"\") == 0, \"get_Char('') should return 0\"",
        "num_ids": 2757
    },
    {
        "number": 84,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(n-1):\n        if sequence[-1] == 1:\n            sequence.append(1)\n            sequence.append(1)\n        else:\n            sequence.append(0)\n    return sequence[-1]",
        "test": "assert sequence(0) == 1",
        "num_ids": 2442
    },
    {
        "number": 85,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Find the surface area of a sphere using the formula\n    # A = 4 * pi * r^2\n    A = 4 * math.pi * r**2\n    return A",
        "test": "assert surfacearea_sphere(2) == math.pi * 4 * 2**2",
        "num_ids": 1565
    },
    {
        "number": 86,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 21\n    elif n == 4:\n        return 84\n    elif n == 5:\n        return 289\n    elif n == 6:\n        return 1006\n    elif n == 7:\n        return 3438\n    elif n == 8:\n        return 12247\n    elif n == 9:\n        return 44464\n    elif n == 10:\n        return 159136\n    elif n == 11:\n        return 590497\n    elif n == 12:\n        return 2006360\n    elif n == 13:\n        return 6895281\n    elif n == 14:\n        return 24976168\n    elif n == 15:\n        return 93914209\n    elif n == 16:\n        return 377919360\n    elif n == 17:\n        return 1386425361\n    elif n == 18:\n        return 5247716168\n    elif n == 19:\n        return 19134373037\n    elif n == 20:\n        return 75319339792\n    elif n == 21:\n        return 294476136049\n    elif n == 22:\n        return 1037737979360\n    elif n == 23:\n        return 4072197339041\n    elif n == 24:\n        return 13367962141856\n    elif n == 25:\n        return 53690636884481\n    elif n == 26:\n        return 197081603600960\n    elif n == 27:\n        return 804243249348225\n    elif n == 28:\n        return 3195190427337984\n    elif n == 29:\n        return 11057283710274945\n    elif n == 30:\n        return 46292512771761664\n    elif n == 31:\n        return 150530452846200065\n    elif n == 32:\n        return 621848359892138880\n    else:\n        raise ValueError(\"Invalid input.\")",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 2314
    },
    {
        "number": 87,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # combine dictionaries using the `update()` method\n    combined_dict = {**dict1, **dict2, **dict3}\n    return combined_dict",
        "test": "assert merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 2381
    },
    {
        "number": 88,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function returns a dictionary where the keys are the elements in the list\n    and the values are their frequency in the list.\n    \"\"\"\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return freq_dict",
        "test": "assert freq_count([]) == {}",
        "num_ids": 1573
    },
    {
        "number": 89,
        "max_answer_num": 29,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n\n    min_diff = float('inf')\n    closest_num = -1\n\n    for i in range(1, N):\n        diff = abs(N - i)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = i\n\n    return closest_num",
        "test": "assert closest_num(2) == 1",
        "num_ids": 2501
    },
    {
        "number": 90,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "test": "assert len_log([]) == 0",
        "num_ids": 1742
    },
    {
        "number": 91,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # loop through each value in the list\n    for value in str1:\n        # check if the substring is present in the value\n        if sub_str in value:\n            return True\n\n    # if the loop completes without finding the substring, return False\n    return False",
        "test": "assert find_substring(['apple', 'banana', 'cherry', 'date'], 'orange') == False",
        "num_ids": 1470
    },
    {
        "number": 92,
        "max_answer_num": 22,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # If the given number is odd, it is undulating.\n    if n % 2!= 0:\n        return True\n    \n    # If the given number is even, it is not undulating.\n    return False",
        "test": "assert is_undulating(3) == True, \"3 is undulating\"",
        "num_ids": 1435
    },
    {
        "number": 93,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2, 3) == 8, \"power(2, 3) should be 8\"",
        "num_ids": 1506
    },
    {
        "number": 94,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]",
        "test": "assert index_minimum([(3, 4), (1, 2), (5, 6), (7, 8), (9, 10)]) == 1",
        "num_ids": 2537
    },
    {
        "number": 95,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "test": "assert Find_Min_Length([[1,2],[3,4],[5,6]]) == 2",
        "num_ids": 2242
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(1) == 1",
        "num_ids": 1536
    },
    {
        "number": 97,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for sub_item in item:\n            if sub_item not in freq_dict:\n                freq_dict[sub_item] = 0\n            freq_dict[sub_item] += 1\n    return freq_dict",
        "test": "assert frequency_lists([[],[],[]]) == {}",
        "num_ids": 2817
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "test": "assert multiply_num([1]) == 1.0, \"The multiplication of all the numbers in the list is incorrect.\"",
        "num_ids": 2526
    },
    {
        "number": 99,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\" \n    binary_str = \"\" \n    while n > 0: \n        binary_str = str(n % 2) + binary_str \n        n //= 2 \n    return binary_str ",
        "test": "assert decimal_to_binary(5) == \"101\"",
        "num_ids": 2557
    },
    {
        "number": 100,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def is_palindrome(num):\n    '''\n    Check if a number is a palindrome or not.\n    '''\n    num_str = str(num)\n    return num_str == num_str[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        return num\n    else:\n        next_num = num + 1\n        while not is_palindrome(next_num):\n            next_num += 1\n        return next_num",
        "test": "assert next_smallest_palindrome(1000000) == 1000001, \"The function should return the next smallest palindrome of 1000000 as 1000001\"",
        "num_ids": 3797
    },
    {
        "number": 101,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    else:\n        return arr[k-1]",
        "test": "assert kth_element([1,2,3,4,5], 1) == 1, \"kth_element should return 1\"",
        "num_ids": 2914
    },
    {
        "number": 102,
        "max_answer_num": 31,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    parts = word.split('_')\n    if len(parts) == 1:\n        return word\n    else:\n        camel_case = parts[0].lower()\n        for i in range(1, len(parts)):\n            camel_case += parts[i].capitalize()\n        return camel_case",
        "test": "assert snake_to_camel(\"2_words\") == \"2Words\", \"snake_to_camel failed to convert 2_words to 2Words\"",
        "num_ids": 1660
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m * m\n    elif n == 2:\n        return m * (m - 1) // 2\n    else:\n        return eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m)",
        "test": "assert eulerian_num(3, 2) == 1, \"Failed test 1\"",
        "num_ids": 2505
    },
    {
        "number": 104,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "test": "assert sort_sublists([['a','b','c'],['d','e','f'],['g','h','i']]) == [['a','b','c'],['d','e','f'],['g','h','i']]",
        "num_ids": 1848
    },
    {
        "number": 105,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item:\n                count += 1\n    return count",
        "test": "assert count([True, True, True, True]) == 4, \"count([True, True, True, True]) should be 4.\"",
        "num_ids": 1127
    },
    {
        "number": 106,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # convert the given lists into tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n\n    # append the list to the tuple\n    test_tup += test_list\n\n    # return the modified tuple\n    return test_tup",
        "test": "assert add_lists([1, 2, 3], (4, 5)) == (4, 5, 1, 2, 3)",
        "num_ids": 1542
    },
    {
        "number": 108,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Concatenate the three lists\n    all_nums = num1 + num2 + num3\n    # Create a min heap of all the numbers\n    heap = list(set(all_nums))\n    heapq.heapify(heap)\n    # Remove the smallest number from the heap and add it to the result list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 2692
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert the binary string to a list of digits\n    binary_list = list(bin(int(s))[2:])\n\n    # rotate the list of digits n times\n    for i in range(n):\n        binary_list.insert(0, binary_list.pop())\n\n    # count the number of odd digits\n    count = 0\n    for i in binary_list:\n        if i == '1':\n            count += 1\n\n    return count",
        "test": "assert odd_Equivalent(\"0000000\", 0) == 0",
        "num_ids": 2676
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n    # Iterate over each nested list in the input list\n    for lst in nestedlist:\n        # Iterate over each element in the nested list\n        for elem in lst:\n            # If the element is already in the set, add it to the result list\n            if elem in common:\n                common.add(elem)\n    # Convert the set to a list and return it\n    return list(common)",
        "test": "assert common_in_nested_lists([]) == []",
        "num_ids": 2519
    },
    {
        "number": 113,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer('123') == True, 'check_integer(\"123\") should return True'",
        "num_ids": 1257
    },
    {
        "number": 115,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True, \"Expected empty_dit([]) == True, but got {}\".format(empty_dit([]))",
        "num_ids": 1462
    },
    {
        "number": 116,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total",
        "test": "assert tuple_to_int(()) == 0, \"Incorrect result for tuple_to_int(())\"",
        "num_ids": 1311
    },
    {
        "number": 117,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    test_list[i][j] = None\n    return test_list",
        "test": "assert list_to_float([[1, 2.0, 3], [4, 5.0, 6]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]",
        "num_ids": 3194
    },
    {
        "number": 118,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the list of resulting strings\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 1425
    },
    {
        "number": 119,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n\n    # Initialize count to 0\n    count = 0\n\n    # Initialize index of the first occurrence of the element\n    index = 0\n\n    # Initialize the last index\n    last_index = len(arr) - 1\n\n    # Iterate through the array\n    for i in range(last_index):\n        # If the current element is equal to the element at index i, increment count and move the index\n        if arr[i] == arr[i + 1]:\n            count += 1\n            index = i + 1\n\n        # If count reaches 2, return the element at index\n        if count == 2:\n            return arr[index]\n\n        # If the count becomes 1, move the index to the next element\n        elif count == 1:\n            index = i + 1\n\n        # Reset count and index if the element at index is not equal to the element at index i\n        else:\n            count = 0\n            index = i + 1\n\n    # If the loop completes without finding the element, return None\n    return None",
        "test": "assert search([]) == None",
        "num_ids": 2798
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = abs(list1[i][0] * list1[j][1])\n            if pair_product > max_product:\n                max_product = pair_product\n    return max_product",
        "test": "assert max_product_tuple([(1, 1), (-2, 2), (3, 3)]) == 6, \"Incorrect output for the input [(1, 1), (-2, 2), (3, 3)].\"",
        "num_ids": 2522
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a list to store all the amicable numbers\n    amicable_numbers = []\n    \n    # Loop through numbers from 2 to the specified limit\n    for i in range(2, limit + 1):\n        \n        # Check if the number is amicable by checking if it's divisible by any number from 2 to the square root of the number\n        for j in range(2, int(i**0.5) + 1):\n            \n            # If the number is divisible by any of these numbers, it's not amicable\n            if i % j == 0:\n                break\n        else:\n            # If the number is not divisible by any of these numbers, it's amicable and can be added to the list\n            amicable_numbers.append(i)\n            \n    # Return the sum of all amicable numbers\n    return sum(amicable_numbers)",
        "test": "assert amicable_numbers_sum(100) == 1060",
        "num_ids": 2396
    },
    {
        "number": 124,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j) # use the complex conjugate to obtain the angle in radians\n    return angle",
        "test": "assert angle_complex(0, 0) == 0.0",
        "num_ids": 1436
    },
    {
        "number": 125,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    length = len(string)\n    max_diff = 0\n    for i in range(length):\n        count_0 = string[:i].count('0')\n        count_1 = string[:i].count('1')\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "test": "assert find_length(\"\") == 0",
        "num_ids": 4314
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        Recursive function to find the greatest common divisor of two numbers.\n        \"\"\"\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def is_common_divisor(a, b, d):\n        \"\"\"\n        Function to check if a number is a common divisor of a, b and d.\n        \"\"\"\n        return d % gcd(a, b) == 0\n\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if is_common_divisor(a, b, i):\n            common_divisors.append(i)\n\n    return sum(common_divisors)",
        "test": "assert sum(24, 60) == 96, \"The sum of common divisors of 24 and 60 is not equal to 96.\"",
        "num_ids": 2087
    },
    {
        "number": 127,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(0, 0) == 0",
        "num_ids": 882
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]",
        "test": "assert long_words(4, ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi', 'lemon','mango', 'nectarine', 'orange', 'papaya', 'raspberry','strawberry', 'tangerine', 'watermelon']) == ['banana', 'date', 'elderberry','mango', 'watermelon']",
        "num_ids": 2108
    },
    {
        "number": 129,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # check if all elements in the matrix are distinct\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return False\n    # check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j] == i+j+1:\n                return False\n    return True",
        "test": "assert magic_square_test([[1, 2, 3], [4, 0, 6], [7, 8, 9]]) == False",
        "num_ids": 3731
    },
    {
        "number": 130,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = max(freq.values())\n    max_item = None\n    \n    for num in nums:\n        if freq[num] == max_freq:\n            max_item = num\n    \n    return max_item",
        "test": "assert max_occurrences([1, 2, 3, 2, 1, 4, 2]) == 2",
        "num_ids": 2872
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_list = []\n    for char in str1:\n        if char in vowels:\n            vowel_list.append(char)\n    vowel_list.reverse()\n    return ''.join(vowel_list)",
        "test": "assert reverse_vowels(\"a\") == \"a\"",
        "num_ids": 1604
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a list\n    lst = list(tup1)\n    # convert the list to a string\n    return ', '.join(str(x) for x in lst)",
        "test": "assert tup_string(('hello', 'world')) == 'hello, world'",
        "num_ids": 740
    },
    {
        "number": 133,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1895
    },
    {
        "number": 135,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # base cases \n    if n == 1: \n        return 1 \n    elif n == 2: \n        return 6 \n    elif n == 3: \n        return 21 \n    elif n == 4: \n        return 72 \n    elif n == 5: \n        return 243 \n    elif n == 6: \n        return 840\n\n    # recursive case \n    else: \n        return hexagonal_num(n-1) + hexagonal_num(n-2) ",
        "test": "assert hexagonal_num(1) == 1 # 1st hexagonal number",
        "num_ids": 1490
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list so that we can manipulate it directly\n    nums = list(nums)\n    \n    # Find the total number of elements in the array\n    total = len(nums)\n    \n    # Count the number of zeroes\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zeroes / total\n    \n    return ratio",
        "test": "assert zero_count([1, 1, 1, 1, 1, 1]) == 0.0",
        "num_ids": 2495
    },
    {
        "number": 138,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 1:\n        return True\n    elif n % 2 == 1:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True",
        "test": "assert is_Sum_Of_Powers_Of_Two(49) == False, \"Test failed for 49\"",
        "num_ids": 2433
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 1610
    },
    {
        "number": 140,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if type(item) == list:\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return set(flattened_list)",
        "test": "assert extract_singly([[1,2,3],[4,5],[6]]) == {1, 2, 3, 4, 5, 6}, \"Test case 1 failed\"",
        "num_ids": 1918
    },
    {
        "number": 141,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # create a list of the indices of the numbers, starting from 0\n    indices = [i for i in range(n)]\n    # bubble sort each sublist, from the largest to the smallest\n    for i in range(n-1, 0, -1):\n        # iterate over each sublist from the largest to the (i-th) smallest\n        for j in range(i):\n            # compare the sublists and swap them if necessary\n            if nums[indices[j]] > nums[indices[j+1]]:\n                nums[indices[j]], nums[indices[j+1]] = nums[indices[j+1]], nums[indices[j]]\n                # swap their indices too\n                indices[j], indices[j+1] = indices[j+1], indices[j]\n    return nums",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 3346
    },
    {
        "number": 142,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3,4,5], [6,7,8,9,10], [6,7,8,9,10]) == 0",
        "num_ids": 2157
    },
    {
        "number": 143,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert find_lists(()) == 0, \"The function should return 0 if the input tuple is empty.\"",
        "num_ids": 1246
    },
    {
        "number": 145,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "test": "assert max_Abs_Diff([5, 5, 5, 5, 5]) == 0",
        "num_ids": 1971
    },
    {
        "number": 160,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if n is divisible by a and b\n    if n % a!= 0 and n % b!= 0:\n        return None\n\n    # Find the two integers x and y that satisfy the equation\n    x = int(n / a)\n    y = int(n / b)\n\n    # Check if the solution is valid\n    if a * x + b * y!= n:\n        return None\n\n    # Return the solution\n    return (x, y)",
        "test": "assert find_solution(1, -2, 10) is None",
        "num_ids": 4192
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 1682
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    total = 0\n    while i < n // 2:\n        total += n - 2 * i\n        i += 1\n    return total",
        "test": "assert sum_series(10) == 30",
        "num_ids": 1662
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (l ** 2)\n    return area",
        "test": "assert area_polygon(4, 5) == 50, \"Incorrect output\"",
        "num_ids": 1720
    },
    {
        "number": 164,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = [i for i in range(1, int(n**0.5)+1) if n%i == 0]\n    div_sum_list = [sum(div_list[:i+1]) for i in range(len(div_list))]\n    if div_sum_list[0] == div_sum_list[-1]:\n        return True\n    else:\n        return False",
        "test": "assert div_sum(28) == False, \"div_sum(28) should be False.\"",
        "num_ids": 2138
    },
    {
        "number": 165,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count += 1\n    return count",
        "test": "assert count_char_position('') == 0",
        "num_ids": 2385
    },
    {
        "number": 166,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_even_pair(A): \n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    even_pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0:\n                even_pair_count += 1\n    return even_pair_count",
        "test": "assert find_even_pair([]) == 0",
        "num_ids": 2405
    },
    {
        "number": 167,
        "max_answer_num": 34,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i <<= 1\n    return i",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 1580
    },
    {
        "number": 168,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5,4,3,2,1], 4) == 2, \"frequency([1,2,3,4,5,4,3,2,1], 4) == 2\"",
        "num_ids": 1638
    },
    {
        "number": 170,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 2015
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the area of the pentagon\n    area = 5 * a**2 / (4 * math.tan(math.pi / 5))\n    # calculate the perimeter of the pentagon using the formula for the sum of the sides\n    perimeter = 5 * area\n    return perimeter",
        "test": "assert perimeter_pentagon(20) == 60, \"perimeter_pentagon(20) should return 60, but it returns {}\".format(perimeter_pentagon(20))",
        "num_ids": 1851
    },
    {
        "number": 172,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count",
        "test": "assert count_occurance(\"hello\") == 0",
        "num_ids": 1435
    },
    {
        "number": 222,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if all(isinstance(x, type(test_tuple[0])) for x in test_tuple):\n        return True\n    else:\n        return False",
        "test": "assert check_type((1, 2, \"Hello\")) == False, \"Check if all elements in tuple have same data type\"",
        "num_ids": 1941
    },
    {
        "number": 223,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n            if count == n//2:\n                return True\n    return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 2) == False",
        "num_ids": 2692
    },
    {
        "number": 224,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0b0000000000000000000000000000000) == 0, \"Test case 1 failed.\"",
        "num_ids": 1734
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])",
        "test": "assert odd_values_string('') == ''",
        "num_ids": 1251
    },
    {
        "number": 227,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as inputs and returns the minimum of those numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 1559
    },
    {
        "number": 228,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # converting the input values to binary form\n    n = bin(n)[2:]\n    l = bin(l)[2:]\n    r = bin(r)[2:]\n\n    # padding the binary numbers with 0's to make them of equal length\n    n = '0'*(len(l)-len(n)) + n\n    l = '0'*(len(l)-len(l)) + l\n    r = '0'*(len(l)-len(r)) + r\n\n    # comparing the binary numbers\n    for i in range(len(l)):\n        if n[i] == '0' and (int(l[i]) < int(r[i])):\n            return False\n\n    # if all the bits are set in the given range then return True\n    return True",
        "test": "assert all_Bits_Set_In_The_Given_Range(0,1,0) == True, \"all_Bits_Set_In_The_Given_Range(0,1,0) should return True\"",
        "num_ids": 2908
    },
    {
        "number": 229,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Count the number of negative and positive elements in the array\n    neg_count = 0\n    pos_count = 0\n    \n    for element in arr:\n        if element < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n            \n    # If the sum of negative and positive elements is equal to n, no re-arranging is needed\n    if neg_count + pos_count == n:\n        return arr\n    \n    # If the sum of negative and positive elements is less than n, then we need to add more negative elements\n    if neg_count + pos_count < n:\n        add_count = n - neg_count - pos_count\n        for i in range(add_count):\n            arr.append(-1)\n            neg_count += 1\n            \n    # If the sum of negative and positive elements is more than n, then we need to remove negative elements\n    else:\n        remove_count = neg_count - pos_count\n        for i in range(remove_count):\n            arr.pop(0)\n            neg_count -= 1\n            \n    # Sort the array in non-decreasing order\n    arr.sort()\n    \n    # Return the sorted array\n    return arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 4342
    },
    {
        "number": 230,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "test": "assert replace_blank(\"hello world\", \"*\") == \"hello*world\"",
        "num_ids": 940
    },
    {
        "number": 232,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([1], 1) == [1]",
        "num_ids": 1857
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = math.pi*(r**2)*(h/2)\n    return lateral_area",
        "test": "assert lateralsuface_cylinder(2,3) == 18.84955592153876",
        "num_ids": 1409
    },
    {
        "number": 234,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert volume_cube(2) == 8, \"volume_cube failed for side length 2\"",
        "num_ids": 1017
    },
    {
        "number": 235,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    for i in range(32):\n        if n & (1 << i):\n            result |= (1 << i)\n    return result",
        "test": "assert even_bit_set_number(2) == 2",
        "num_ids": 1948
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)",
        "test": "assert check_occurences([('apple', 1), ('banana', 2), ('orange', 1), ('orange', 1)]) == {}",
        "num_ids": 2165
    },
    {
        "number": 238,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count",
        "test": "assert number_of_substrings('') == 0, \"number_of_substrings('') should return 0.\"",
        "num_ids": 1615
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    prev = None\n    for i in range(1, m + 1):\n        if i >= 2 * prev and i <= m:\n            count += 1\n        prev = i\n    return count",
        "test": "assert get_total_number_of_sequences(5,5) == 15",
        "num_ids": 2177
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2\n    return list1",
        "test": "assert replace_list([], []) == []",
        "num_ids": 1466
    },
    {
        "number": 242,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"\") == 0, \"count_charac('') should return 0\"",
        "num_ids": 1130
    },
    {
        "number": 244,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        N = -N # convert negative to positive\n    is_perfect_square = True\n    sqrt_N = math.sqrt(N)\n    if sqrt_N.is_integer():\n        is_perfect_square = False\n    else:\n        sqrt_N = int(sqrt_N) + 1\n    \n    next_sq = int(sqrt_N ** 2)\n    if next_sq > N:\n        return next_sq\n    else:\n        return next_Perfect_Square(N + 1)",
        "test": "assert next_Perfect_Square(3) == 4   # 3 is a perfect square",
        "num_ids": 2142
    },
    {
        "number": 245,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    left = 0\n    right = 0\n\n    while right < n - 1:\n        if arr[left] < arr[right]:\n            max_sum = max(max_sum, arr[left] + arr[right + 1])\n            left += 1\n        else:\n            max_sum = max(max_sum, arr[right] + arr[left])\n            right += 1\n\n    return max_sum",
        "test": "assert max_sum([1, 2, 3, 2, 1]) == 6",
        "num_ids": 3332
    },
    {
        "number": 246,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Check if the input number is an integer or float\n    if not isinstance(number, int) and not isinstance(number, float):\n        raise TypeError(\"Input must be an integer or float.\")\n\n    # Check if the input number is negative\n    if number < 0:\n        raise ValueError(\"Input must be a non-negative number.\")\n\n    # Initialize variables\n    x = number\n    prev_x = 0\n    n = 0\n\n    # Keep iterating until the difference between x and the previous x is small enough\n    while abs(x - prev_x) > 10**-10:\n        prev_x = x\n        x = (x + number/x) / 2\n        n += 1\n\n    # Return the square root using the babylonian method\n    return x",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 2130
    },
    {
        "number": 247,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def lps(str): \n    # Initialize a list to store the length of the longest palindromic subsequence ending at each index in the string\n    l = [1] * len(str)\n\n    # Initialize a variable to store the maximum length of a palindromic subsequence found so far\n    max_l = 1\n\n    # Iterate through the string from the beginning to the end\n    for i in range(1, len(str)): \n        # Check if the character at the current index is a palindrome or not\n        if str[i] == str[i - 1]: \n            # If the character is a palindrome, set the length of the longest palindromic subsequence ending at this index as 2 + the length of the longest palindromic subsequence ending at the previous index\n            l[i] = 2 + l[i - 1]\n            # Update the maximum length of a palindromic subsequence found so far\n            max_l = max(max_l, l[i])\n        else: \n            # If the character is not a palindrome, set the length of the longest palindromic subsequence ending at this index as the maximum of 1 (the empty string) and 2 (the longest palindromic subsequence ending at the previous index)\n            l[i] = max(l[i - 1], 2)\n            # Update the maximum length of a palindromic subsequence found so far\n            max_l = max(max_l, l[i])\n\n    # Return the maximum length of a palindromic subsequence found so far\n    return max_l",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 3460
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 1/(1/(2*(n-1))+1/(2*(n-2)))",
        "test": "assert harmonic_sum(1) == 0",
        "num_ids": 1707
    },
    {
        "number": 249,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input, array_nums1 and array_nums2.\n    It then returns the intersection of the two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "test": "assert intersection_array([], [1,2,3,4]) == []",
        "num_ids": 2345
    },
    {
        "number": 250,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X(('apple', 'banana', 'cherry', 'apple', 'orange'), 'apple') == 2",
        "num_ids": 1566
    },
    {
        "number": 251,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # use list comprehension to insert the element before each element in the list\n    result = [element] + list\n    return result",
        "test": "assert insert_element([1,2,3,4,5],0) == [0,1,2,3,4,5]",
        "num_ids": 1918
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        mag = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        print('Magnitude:', mag, 'Angle:', angle)",
        "test": "assert convert([7, 8]) == cmath.polar(7 + 8*1j)",
        "num_ids": 1962
    },
    {
        "number": 253,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5, \"count_integer([1, 2, 3, 4, 5]) == 5\"",
        "num_ids": 1452
    },
    {
        "number": 255,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)-n+1):\n        comb = tuple(l[i:i+n])\n        combs.append(comb)\n    return combs",
        "test": "assert combinations_colors([], 2) == []",
        "num_ids": 1972
    },
    {
        "number": 256,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 1712
    },
    {
        "number": 257,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def swap_numbers(a, b):\n    return (b, a)",
        "test": "assert swap_numbers(1, 2) == (2, 1)",
        "num_ids": 656
    },
    {
        "number": 259,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6))!= (5, 5, 5)",
        "num_ids": 2991
    },
    {
        "number": 260,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        count = 0\n        num = 1\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    return nth_prime(n)",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 2323
    },
    {
        "number": 261,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # initialize result tuple\n    result_tup = ()\n    \n    # iterate through elements in both tuples\n    for i in range(len(test_tup1)):\n        # perform element-wise division and append result to result tuple\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    \n    # return result tuple\n    return result_tup",
        "test": "assert division_elements( (), () ) == ()",
        "num_ids": 2436
    },
    {
        "number": 262,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create an empty list to store the first part of the list\n    part1 = []\n\n    # Loop through the list and add elements to the first part of the list\n    for i in range(L):\n        if i < len(list1):\n            part1.append(list1[i])\n\n    # Create an empty list to store the second part of the list\n    part2 = []\n\n    # Loop through the list from the length of the first part to the end\n    for i in range(L, len(list1)):\n        if i < len(list1):\n            part2.append(list1[i])\n\n    # Return the two parts of the list in a tuple\n    return (part1, part2)",
        "test": "assert split_two_parts([], 3) == ([], [])",
        "num_ids": 2405
    },
    {
        "number": 264,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 0\n    if h_age < 5:\n        dog_years = h_age * 7\n    elif h_age < 12:\n        dog_years = (h_age - 5) * 5\n    else:\n        dog_years = (h_age - 12) * 3\n    return dog_years\n",
        "test": "assert dog_age(0) == 0, \"Failed to test 0.\"",
        "num_ids": 1256
    },
    {
        "number": 265,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        sublist = S[i:i+step]\n        result.append(sublist)\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]",
        "num_ids": 2999
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    return 6 * l ** 2",
        "test": "assert lateralsurface_cube(1) == 6, \"lateral surface area of a cube with side length 1 is not correct\"",
        "num_ids": 1606
    },
    {
        "number": 267,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of squares of odd natural numbers\n    sum_of_squares = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the current odd natural number to the sum of squares\n        sum_of_squares += i*i\n    \n    return sum_of_squares",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 1716
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return find_star_num(n - 1) + '*'",
        "test": "assert find_star_num(2) == '**'",
        "num_ids": 1708
    },
    {
        "number": 269,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('A') == 65, 'ascii_value failed for A'",
        "num_ids": 1383
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum",
        "test": "assert sum_even_and_even_index([1,3,5,7,9]) == 0",
        "num_ids": 2457
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 1466
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list",
        "test": "assert rear_extract([(1,2),(3,4),(5,6)]) == [2,4,6]",
        "num_ids": 1083
    },
    {
        "number": 273,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have the same length.')\n    \n    # initialize a new tuple to store the result\n    result_tup = ()\n    \n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # check if the current index has the same element in both tuples\n        if test_tup1[i] == test_tup2[i]:\n            # if so, add the difference between the current element of the first tuple and the current element of the second tuple to the result tuple\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        # if not, add the element of the first tuple to the result tuple\n        else:\n            result_tup += (test_tup1[i],)\n    \n    # return the result tuple\n    return result_tup",
        "test": "assert substract_elements((), ()) == ()",
        "num_ids": 1935
    },
    {
        "number": 274,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize variables\n    a = 0\n    b = 0\n    sum_even_index_coeffs = 0\n\n    # Iterate through values of a and b\n    for i in range(2, n+1):\n        # Calculate the value of a\n        a = i - 1\n\n        # Calculate the value of b\n        b = n // i\n\n        # Calculate the value of the binomial coefficient\n        binomial_coeff = math.comb(n, a)\n\n        # Check if the value of b is even\n        if b % 2 == 0:\n            # Add the even index binomial coefficient to the sum\n            sum_even_index_coeffs += binomial_coeff\n\n    # Return the sum of even index binomial coefficients\n    return sum_even_index_coeffs",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1794
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14 * r * r * h  # formula for cylinder volume using formula for volume of a sphere\n    return volume",
        "test": "assert volume_cylinder(1,1) == 3.141592653589793, \"volume_cylinder(1,1) is incorrect\"",
        "num_ids": 1668
    },
    {
        "number": 277,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}",
        "test": "assert dict_filter({'a':10,'b':20,'c':30,'d':40,'e':50},20) == {'b':20,'c':30,'d':40,'e':50}",
        "num_ids": 1449
    },
    {
        "number": 278,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) // 2:\n            count += 1\n    return count",
        "test": "assert count_first_elements(()) == 0",
        "num_ids": 1945
    },
    {
        "number": 279,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 1\n    for i in range(1, n + 1):\n        decagonal = (decagonal * (3 * i - 1)) // 2\n    return decagonal\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1784
    },
    {
        "number": 280,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 2082
    },
    {
        "number": 281,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set to remove any duplicates\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 3]) == False",
        "num_ids": 2001
    },
    {
        "number": 282,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[1,2,3]) == [0,0,0]",
        "num_ids": 1929
    },
    {
        "number": 283,
        "max_answer_num": 23,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for digit in str(n):\n        count = 0\n        for i in str(n):\n            if int(digit) == int(i):\n                count += 1\n        if count > int(digit):\n            return False\n    return True",
        "test": "assert validate(12345) == True, \"The function should return True for 12345\"",
        "num_ids": 2050
    },
    {
        "number": 284,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) > 0 and list[0] == element:\n        return True\n    else:\n        return False",
        "test": "assert check_element([1],1) == True, \"check_element([1],1) should return True\"",
        "num_ids": 1602
    },
    {
        "number": 285,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    matches = re.findall(pattern, text)\n    return bool(matches)",
        "test": "assert text_match_two_three(\"abbbbbbbbabbbbabbbbbbabbbbabbbbabbbbbbabbbbbbabbbbbbabbbbbbabbbbba\") == True, \"Expected True, got False\"",
        "num_ids": 2242
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    total_sum = sum(a)\n    max_sum = total_sum\n    repeated_sum = k * total_sum\n    \n    for i in range(n - k):\n        temp_sum = a[i] * (k - 1) + a[i + 1] * k\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n        \n        if temp_sum == repeated_sum:\n            return max_sum\n            \n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 1) == 15",
        "num_ids": 2986
    },
    {
        "number": 287,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 1492
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def max_length(lst):\n    \"\"\"\n    Returns the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = [len(sublist) for sublist in lst]\n    return max(lengths)",
        "test": "assert max_length([[1,2,3],[4,5,6],[7,8,9]]) == 3, \"The list of maximum length in the given list of lists should be 3.\"",
        "num_ids": 1932
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize the count to 0\n    count = 0\n    # Loop through all the possibilities\n    for i in range(2, n+1):\n        # For each possibility, loop through all the possibilities of having 2 or 1 adjacent posts with the same color\n        for j in range(1, n-i+2):\n            # If the number of adjacent posts with the same color is less than or equal to 2, add 1 to the count\n            if j <= 2:\n                count += 1\n    # Return the count of ways of painting the fence\n    return count",
        "test": "assert count_no_of_ways(4, 2) == 5",
        "num_ids": 3040
    },
    {
        "number": 292,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # calculate quotient by dividing the larger number by the smaller number\n    quotient = n // m\n    \n    # return the quotient rounded down to the nearest integer\n    return quotient",
        "test": "assert find(0,10) == 0 # find quotient of 0 and 10",
        "num_ids": 1089
    },
    {
        "number": 293,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    c = math.sqrt(w ** 2 + h ** 2)\n    return c",
        "test": "assert otherside_rightangle(3,4)==5",
        "num_ids": 1592
    },
    {
        "number": 294,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    max_val = listval[0]\n    \n    for i in range(1, len(listval)):\n        if type(listval[i])!= type(max_val):\n            return None\n            \n        if listval[i] > max_val:\n            max_val = listval[i]\n            \n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1612
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "test": "assert sum_div(12) == 36",
        "num_ids": 1439
    },
    {
        "number": 296,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # Count the number of inversions in the array \n    inv_count = 0 \n    # Sort the array in increasing order \n    arr.sort() \n    # Iterate through the array and find the inversions \n    for i in range(n): \n        # Calculate the index of the maximum element in the remaining unsorted part of the array \n        max_index = i \n        for j in range(i+1, n): \n            if arr[j] > arr[max_index]: \n                max_index = j \n        # If the maximum element is greater than the i-th element, then there is an inversion \n        if arr[i] > arr[max_index]: \n            inv_count += n - i - 1 \n        # Swap the i-th and the maximum element in the array \n        arr[i], arr[max_index] = arr[max_index], arr[i] \n    # Return the number of inversions found in the array \n    return inv_count ",
        "test": "assert get_Inv_Count([1, 2]) == 0",
        "num_ids": 2896
    },
    {
        "number": 297,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    A recursive function to flatten a nested list structure.\n\n    Args:\n        lst: The list to be flattened.\n\n    Returns:\n        A flattened list.\n    \"\"\"\n    if not lst:\n        return []\n    elif isinstance(lst, list):\n        return [elem for sublist in lst for elem in flatten_list(sublist)]\n    else:\n        return [lst]",
        "test": "assert flatten_list([1, [2, [3, [4]], 5], 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1880
    },
    {
        "number": 299,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the count of each item in the list\n    item_count = defaultdict(int)\n    # loop through the list of tuples\n    for item, count in stdata:\n        # add the count of the current item to the item_count dictionary\n        item_count[item] += count\n    # loop through the item_count dictionary to find the maximum aggregate\n    max_agg = 0\n    for count in item_count.values():\n        max_agg = max(max_agg, count)\n    return max_agg",
        "test": "assert max_aggregate([(1,2)]) == 2",
        "num_ids": 2535
    },
    {
        "number": 300,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n): \n        seq = bin(i)[2:].zfill(n) \n        if sum(int(j) for j in seq[:n]) == sum(int(j) for j in seq[n:]): \n            count += 1\n    return count",
        "test": "assert count_binary_seq(1) == 1",
        "num_ids": 2071
    },
    {
        "number": 301,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth",
        "test": "assert dict_depth({}) == 0",
        "num_ids": 1434
    },
    {
        "number": 304,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after a certain number of rotations.\n    It takes in the following arguments:\n    arr: a list of integers\n    ranges: a list of tuples, where each tuple contains two integers representing the range of numbers to be considered for rotations.\n    rotations: the number of rotations to apply to the array.\n    index: the index of the element to be found.\n\n    This function returns the element at the specified index after the given number of rotations.\n    \"\"\"\n    # Initialize a variable to keep track of the current rotation index\n    current_rotation = 0\n\n    # Loop through each element of the array\n    for element in arr:\n        # Check if the current element falls within the current range of numbers to consider for rotations\n        if element >= ranges[current_rotation][0] and element <= ranges[current_rotation][1]:\n            # If the element falls within the current range, check if it is the element we are looking for\n            if index == current_rotation + 1:\n                return element\n\n            # If the element is not the element we are looking for, increment the current rotation index\n            else:\n                current_rotation += 1\n\n            # If we have applied the maximum number of rotations to the array and the element is not the element we are looking for, return None\n            if current_rotation >= rotations and index!= current_rotation + 1:\n                return None\n\n    # If we have made it through the entire array and have not found the element we are looking for, return None\n    return None",
        "test": "assert find_Element([1,2,3,4,5],[(0,3),(3,5)],3,2) == 3",
        "num_ids": 3566
    },
    {
        "number": 305,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words",
        "test": "assert start_withp(['apple', 'banana', 'pear', 'pineapple', 'potato']) == ['pear', 'pineapple']",
        "num_ids": 1313
    },
    {
        "number": 306,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Parameters:\n    a (list): A list of integers.\n    n (int): Length of the list.\n    index (int): Index at which we want to find the maximum sum of increasing subsequence.\n    k (int): A given kth element which is after index.\n\n    Returns:\n    int: The maximum sum of increasing subsequence from prefix until index and including kth element.\n\n    \"\"\"\n\n    if index == 0:\n        return a[index]\n\n    if index == n - 1:\n        if a[index] > a[index + 1] + k:\n            return a[index] + k\n        else:\n            return a[index]\n\n    max_sum = max(max_sum_increasing_subseq(a, n, index - 1, k), a[index])\n\n    if a[index] < a[index + 1]:\n        max_sum = max(max_sum, a[index] + k)\n\n    if a[index] > a[index + 1] + k:\n        max_sum = max(max_sum, a[index] + k - a[index + 1])\n\n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1], 1, 0, 1) == 1",
        "num_ids": 3799
    },
    {
        "number": 307,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Get the length of the tuple\n    length = len(tuplex)\n\n    # If the tuple is empty, return an empty tuple\n    if length == 0:\n        return ()\n\n    # If the tuple has one element, return a tuple containing that element\n    if length == 1:\n        return (tuplex[0],)\n\n    # If the tuple has more than one element, create a new tuple with the specified length\n    colon_tuplex = deepcopy(tuplex)\n    colon_tuplex = colon_tuplex[:m] + (colon_tuplex[m],) + colon_tuplex[m+1:]\n    return colon_tuplex",
        "test": "assert colon_tuplex(deepcopy((1,2,3,4,5)),4,4) == (1,2,3,4,5)",
        "num_ids": 2468
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_product = float('-inf')\n    result = []\n    \n    # Loop through all possible pairs of factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the two factors\n            product = nums1[i] * nums2[j]\n            \n            # If the product is greater than the current largest, update the largest and the result list\n            if product > largest_product:\n                largest_product = product\n                result = [nums1[i], nums2[j]]\n            \n            # If the result list has N elements, exit the loop\n            if len(result) == N:\n                break\n            \n    return result",
        "test": "assert large_product([1, 2, 3, 4], [5, 6, 7, 8], 4) == 240",
        "num_ids": 3518
    },
    {
        "number": 309,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function finds the maximum of two numbers using the if-else statement.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(5,10) == 10, \"maximum(5,10) should return 10\"",
        "num_ids": 1042
    },
    {
        "number": 310,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple and return it\n    return tuple(lst)",
        "test": "assert string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 1118
    },
    {
        "number": 311,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 1\n    while mask & n == 0:\n        mask <<= 1\n    return mask",
        "test": "assert set_left_most_unset_bit(1) == 1",
        "num_ids": 1852
    },
    {
        "number": 312,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r * r * h  # formula for volume of a cone\n    return V",
        "test": "assert volume_cone(1, 1) == math.pi*1**2*1",
        "num_ids": 1611
    },
    {
        "number": 388,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the variable to store the highest power of 2\n    highest = 1\n    \n    # Loop through all powers of 2 up to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        # Check if the current power of 2 is less than or equal to n\n        if i*i > n:\n            # If it is, update the highest power of 2\n            highest = i\n    \n    # Return the highest power of 2\n    return highest\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 1697
    },
    {
        "number": 389,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Find the nth lucas number.\n    \"\"\"\n    a, b = 2, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 1657
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]",
        "test": "assert add_string(['apple', 'banana', 'cherry'], 'I have {}.') == ['I have apple.', 'I have banana.', 'I have cherry.']",
        "num_ids": 1113
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1 (list): A list of dictionaries.\n    l2 (list): A list of tuples.\n    l3 (list): A list of strings.\n\n    Returns:\n    dict: A dictionary where the keys are the elements of l1, l2, and l3, and the values are lists of their corresponding elements.\n    '''\n    d = {}\n\n    # Iterate through each list in turn\n    for lst in [l1, l2, l3]:\n        # Iterate through each element in the list\n        for i in range(len(lst)):\n            # If the element is a dictionary, add its key-value pairs to the dictionary\n            if isinstance(lst[i], dict):\n                for key, value in lst[i].items():\n                    if key in d:\n                        d[key].append(value)\n                    else:\n                        d[key] = [value]\n            # If the element is a tuple, add its elements to the dictionary\n            elif isinstance(lst[i], tuple):\n                if lst[i] in d:\n                    d[lst[i]].append(lst[i+1])\n                else:\n                    d[lst[i]] = [lst[i+1]]\n            # If the element is a string, add it to the dictionary as a key with an empty list as its value\n            else:\n                if lst[i] in d:\n                    d[lst[i]].append('')\n                else:\n                    d[lst[i]] = ['']\n\n    # Return the dictionary\n    return d",
        "test": "assert convert_list_dictionary([],[],[]) == {}",
        "num_ids": 2299
    },
    {
        "number": 392,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 2043
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 2028
    },
    {
        "number": 394,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True",
        "test": "assert check_distinct((1,2,3,2,1)) == False",
        "num_ids": 1334
    },
    {
        "number": 395,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char",
        "test": "assert first_non_repeating_character(\"abcbde\") == \"a\"",
        "num_ids": 1884
    },
    {
        "number": 396,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    This function takes a string as input and returns True if it starts and ends with the same character, False otherwise.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_char(\"a\") == True, \"check_char('a') should return True\"",
        "num_ids": 1457
    },
    {
        "number": 397,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        return numbers[mid]",
        "test": "assert median_numbers(2, 2, 2) == 2",
        "num_ids": 2075
    },
    {
        "number": 398,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total += digit_sum\n    return total",
        "test": "assert sum_of_digits([123]) == 6",
        "num_ids": 2240
    },
    {
        "number": 399,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    if len(test_tup1) > len(test_tup2):\n        result_tup += test_tup1[len(test_tup2):]\n    elif len(test_tup2) > len(test_tup1):\n        result_tup += test_tup2[len(test_tup1):]\n    return result_tup",
        "test": "assert bitwise_xor((1, 2, 3), (4, 5, 6))!= (5, 6, 7)",
        "num_ids": 2205
    },
    {
        "number": 400,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n\n    freq_dict = {}  # create an empty dictionary to store unique tuples and their frequencies\n\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1  # increment the frequency of each unique tuple\n        else:\n            freq_dict[item] = 1  # initialize the frequency of each unique tuple to 1\n\n    unique_freq_tuples = []\n    for key, value in freq_dict.items():\n        unique_freq_tuples.append((key, value))\n\n    return len(unique_freq_tuples)",
        "test": "assert extract_freq([]) == 0, \"The function should return 0 as there are 0 unique tuples in the empty list\"",
        "num_ids": 2029
    },
    {
        "number": 401,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Initialize a variable to store the resultant tuple\n    result_tup = ()\n    # Initialize a variable to store the length of the two tuples\n    length = len(test_tup1)\n    # Loop through each index of the first tuple\n    for i in range(length):\n        # Append the result of adding the corresponding elements of the two tuples\n        result_tup = result_tup + (test_tup1[i] + test_tup2[i],)\n    # Return the resultant tuple\n    return result_tup",
        "test": "assert add_nested_tuples((), ()) == ()",
        "num_ids": 2363
    },
    {
        "number": 404,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of those numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(5, 10) == 5, \"The function should return the minimum value between 5 and 10.\"",
        "num_ids": 871
    },
    {
        "number": 405,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False",
        "test": "assert check_tuplex(('a','b','c'),('d','e')) == False, 'The function should return False'",
        "num_ids": 1147
    },
    {
        "number": 406,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        print(str(x) + \" is even.\")\n        return False\n    else:\n        print(str(x) + \" is odd.\")\n        return True",
        "test": "assert find_Parity(5) == True, \"find_Parity(5) should return True\"",
        "num_ids": 1357
    },
    {
        "number": 407,
        "max_answer_num": 22,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    digits.sort(reverse=True)\n    new_number = int(''.join(digits))\n    return new_number\n",
        "test": "assert rearrange_bigger(111) == 111",
        "num_ids": 2880
    },
    {
        "number": 408,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a set to store unique pairs\n    unique_pairs = set()\n\n    # create a min heap to store the elements of the first array\n    min_heap = []\n\n    # create a variable to store the minimum element of the second array\n    second_min = float('inf')\n\n    # loop through the first array\n    for num in nums1:\n        # if the number is greater than or equal to the minimum element of the second array,\n        # add it to the min heap and update the minimum element of the second array\n        if num >= second_min:\n            heapq.heappush(min_heap, num)\n            second_min = min(num, second_min)\n\n        # if the size of the min heap is equal to k, check if the smallest pair is already in the unique_pairs set\n        if len(min_heap) == k:\n            # if it's not, add it to the unique_pairs set and remove the minimum elements from the min heap\n            if (min_heap[0], min_heap[-1]) not in unique_pairs:\n                unique_pairs.add((min_heap[0], min_heap[-1]))\n                heapq.heappop(min_heap)\n                heapq.heappop(min_heap)\n\n    # return a list of the unique pairs\n    return list(unique_pairs)",
        "test": "assert k_smallest_pairs([], [], 0) == []",
        "num_ids": 4271
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([[1,2],[3,4],[5,6]]) == 36",
        "num_ids": 2995
    },
    {
        "number": 410,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val",
        "test": "assert min_val([1,2,3,4,5]) == 1",
        "num_ids": 1934
    },
    {
        "number": 411,
        "max_answer_num": 30,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.)', lambda x: x.group(1).upper(), word)",
        "test": "assert snake_to_camel('_single_leading_underscore') == 'SingleLeadingUnderscore'",
        "num_ids": 1662
    },
    {
        "number": 412,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "test": "assert remove_odd([]) == []",
        "num_ids": 1356
    },
    {
        "number": 413,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]",
        "test": "assert extract_nth_element([('apple', 1), ('banana', 2), ('cherry', 3), ('date', 4), ('elderberry', 5)], 2) == ('banana', 2)",
        "num_ids": 1854
    },
    {
        "number": 414,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns True if any value in the first sequence exists in the second sequence,\n    and returns False otherwise.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3,4,5], [2,3,4,5,6]) == True",
        "num_ids": 1845
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (arr[i], arr[j])\n            if current_product < min_product:\n                min_product = current_product\n                min_pair = (arr[i], arr[j])\n\n    return max_pair",
        "test": "assert max_Product([0, 0, 0, 0, 0]) == (0, 0), \"Wrong output: max_Product([0, 0, 0, 0, 0]) should return (0, 0)\"",
        "num_ids": 2917
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_elements = []\n    for item in Input:\n        if item[0] in common_first_elements:\n            continue\n        common_first_elements.append(item[0])\n    return common_first_elements",
        "test": "assert group_tuples([(1, 2), (3, 4), (5, 6)]) == [1, 3, 5]",
        "num_ids": 2835
    },
    {
        "number": 418,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_len:\n            max_len = len(str(element))\n            max_element = element\n            \n    return max_element",
        "test": "assert Find_Max(['apple', 'banana', 'cherry', 'date']) == 'banana'",
        "num_ids": 1734
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))",
        "test": "assert round_and_sum([1.5, 2.7, 3.14, 4.2, 5.0]) == 141.5 and round_and_sum([1.2, 3.4, 5.6, 7.8, 9.0]) == 104.0",
        "num_ids": 1949
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of cubes of even natural numbers\n    cube_sum = 0\n    \n    # iterate n times\n    for i in range(n):\n        # calculate the cube of the next even natural number and add it to the sum\n        cube_sum += i*i*i\n    \n    return cube_sum",
        "test": "assert cube_Sum(0) == 0, \"cube_Sum(0) should return 0\"",
        "num_ids": 1452
    },
    {
        "number": 421,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Create an empty string to hold the concatenated elements\n    concatenated_str = \"\"\n    \n    # Loop through each element of the tuple\n    for element in test_tup:\n        # Append the element to the concatenated string\n        concatenated_str += str(element)\n    \n    # Return the concatenated string\n    return concatenated_str",
        "test": "assert concatenate_tuple(()) == \"\"",
        "num_ids": 1256
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0  \n    for i in range(n):  \n        sum_of_cubes += i*i*i  \n    average_of_cubes = sum_of_cubes/n  \n    return average_of_cubes  ",
        "test": "assert find_Average_Of_Cube(1) == 0, \"find_Average_Of_Cube(1) should return 0\"",
        "num_ids": 1656
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple) - 1\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[rear_index][i])\n    return rear_list",
        "test": "assert extract_rear(('orange', 'lemon', 'lime')) == ('lime',)",
        "num_ids": 1527
    },
    {
        "number": 425,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function takes a list and a particular element as input and returns the number of sublists that contain that element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 10) == 0",
        "num_ids": 2250
    },
    {
        "number": 426,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 1544
    },
    {
        "number": 427,
        "max_answer_num": 28,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)",
        "test": "assert change_date_format('2022-01-01') == '01-01-2022'",
        "num_ids": 2325
    },
    {
        "number": 428,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
        "test": "assert shell_sort([1,4,3,2,5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2239
    },
    {
        "number": 429,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Loop through the two tuples and create a new tuple with the elementwise and values\n    and_tup = tuple([x and y for x, y in zip(test_tup1, test_tup2)])\n    return and_tup",
        "test": "assert and_tuples((True, True, True), (True, True, True)) == (True, True, True)",
        "num_ids": 1911
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Check if the discriminant is real and positive\n    if disc < 0:\n        print('The discriminant is negative. The directrix is complex.')\n        return None\n    elif disc == 0:\n        print('The discriminant is zero. The directrix is unique.')\n        return -b/2*a\n    else:\n        print('The discriminant is positive. The directrix is real.')\n        return (-b + disc**0.5)/(2*a)",
        "test": "assert parabola_directrix(1, 0, 0) == 0",
        "num_ids": 2313
    },
    {
        "number": 431,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == False",
        "num_ids": 2043
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n\n    Parameters:\n    base1: float, the length of the first base of the trapezium\n    base2: float, the length of the second base of the trapezium\n    height: float, the height of the trapezium\n\n    Returns:\n    float, the median length of the trapezium\n    '''\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n\n    # Calculate the median length of the trapezium\n    median = area / 2\n\n    return median",
        "test": "assert median_trapezium(1,2,4) == 3.0",
        "num_ids": 3458
    },
    {
        "number": 433,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n\n    # Check if the number is greater than the elements of the array\n    if number > max(arr):\n        return True\n    else:\n        return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 5) == False",
        "num_ids": 1711
    },
    {
        "number": 434,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one('aabab') == True",
        "num_ids": 2117
    },
    {
        "number": 435,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 1121
    },
    {
        "number": 436,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst",
        "test": "assert neg_nos([]) == []",
        "num_ids": 1576
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in str1:\n        if char.isdigit():\n            odd_chars.append(char)\n    result = \"\"\n    for char in odd_chars:\n        result += char\n    return result",
        "test": "assert remove_odd('') == ''",
        "num_ids": 1026
    },
    {
        "number": 438,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                bidirectional_count += 1\n    return bidirectional_count",
        "test": "assert count_bidirectional([]) == 0, \"Test case 1: Test for empty list\"",
        "num_ids": 2130
    },
    {
        "number": 439,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    single_int = 1\n    for num in L:\n        single_int *= num\n    return single_int",
        "test": "assert multiple_to_single([1]) == 1",
        "num_ids": 1294
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the text into individual words\n    words = text.split()\n\n    # Find all adverbs in the text\n    adverbs = re.findall(r'\\b\\w*[a-zA-Z]+\\w*[a-zA-Z]*\\b', text)\n\n    # Sort the adverbs by their position in the sentence\n    adverbs.sort(key=lambda x: words.index(x))\n\n    # Check if there are any adverbs in the text\n    if len(adverbs) == 0:\n        return None\n\n    # Find the first adverb and its position in the text\n    first_adverb = adverbs[0]\n    first_adverb_position = words.index(first_adverb)\n\n    return first_adverb, first_adverb_position",
        "test": "assert find_adverb_position(\"The quick brown fox is looking for a lazy dog.\") == (0, 6, 22)",
        "num_ids": 3062
    },
    {
        "number": 441,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l * l\n    return surface_area",
        "test": "assert surfacearea_cube(1) == 6, \"surfacearea_cube(1) should return 6\"",
        "num_ids": 1643
    },
    {
        "number": 442,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return count / len(nums)",
        "test": "assert positive_count([-1, -2, -3, -4, -5]) == 0.0",
        "num_ids": 2330
    },
    {
        "number": 443,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest = None \n    for num in list1: \n        if num < 0 and (largest is None or num > largest): \n            largest = num \n    return largest ",
        "test": "assert largest_neg([-1,-2,-3,-4,-5]) == -1, \"Test 2 failed\"",
        "num_ids": 1565
    },
    {
        "number": 444,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list",
        "test": "assert trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 4) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]",
        "num_ids": 2661
    },
    {
        "number": 445,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 1574
    },
    {
        "number": 446,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input. \n    The function counts the frequency of each element of the list in the tuple and returns the result as a dictionary.\n    '''\n    freq = Counter(lst)\n    return freq",
        "test": "assert count_Occurrence((1,2,3,4,5), [1,2,3,4,5]) == {1:1, 2:1, 3:1, 4:1, 5:1}",
        "num_ids": 1989
    },
    {
        "number": 447,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n\n    # Loop through each element in the list and calculate its cube\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 1859
    },
    {
        "number": 448,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]\n    return sum(perrin_nums[:n])",
        "test": "assert cal_sum(1) == 1",
        "num_ids": 2749
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of strings containing the specified size of strings from the given list of strings.\n    '''\n\n    # Initialize an empty list to hold the extracted strings\n    extracted_strings = []\n\n    # Loop through the list of strings\n    for i in range(len(str_list)):\n        # Check if the length of the current string is less than or equal to the specified size\n        if len(str_list[i]) <= size:\n            # If the length is less than or equal to the specified size, append the string to the extracted strings list\n            extracted_strings.append(str_list[i])\n\n    return extracted_strings",
        "test": "assert extract_string(['hello', 'world'], 5) == ['hello', 'world']",
        "num_ids": 1705
    },
    {
        "number": 451,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub('\\s+','', text).strip()",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"",
        "num_ids": 1026
    },
    {
        "number": 452,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(100, 100) == 0",
        "num_ids": 1416
    },
    {
        "number": 453,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum",
        "test": "assert sumofFactors(10) == 2, \"sumofFactors(10) should return 2, but it returns {}\".format(sumofFactors(10))",
        "num_ids": 1739
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_match_wordz('Howdy there.') == False",
        "num_ids": 2777
    },
    {
        "number": 455,
        "max_answer_num": 24,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 4 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 % 2 == 0:\n        if monthnum2 % 4 == 0:\n            return True\n        else:\n            return False\n    else:\n        return True",
        "test": "assert check_monthnumb_number(4) == True, \"Month number 4 does not have 30 days\"",
        "num_ids": 2317
    },
    {
        "number": 456,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list([\"hello\", \"world\"]) == [\"olleh\", \"dlrow\"]",
        "num_ids": 1237
    },
    {
        "number": 457,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < len(min_sublist):\n                min_sublist = lst[i:j+1]\n    return min_sublist",
        "test": "assert Find_Min([]) == [], \"Find_Min([]) should return []\"",
        "num_ids": 2273
    },
    {
        "number": 458,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(2,3) == 6 # correct test case for rectangle_area function",
        "num_ids": 1185
    },
    {
        "number": 459,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define a pattern to match uppercase substrings\n    pattern = r'\\b[A-Z]+\\b'\n\n    # Use the re.sub() function to remove all uppercase substrings\n    str2 = re.sub(pattern, '', str1)\n\n    return str2",
        "test": "assert remove_uppercase(\"12345\") == \"12345\"",
        "num_ids": 1418
    },
    {
        "number": 460,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # create an empty list to store the first elements\n    first_lst = []\n    # loop through the list\n    for sub_lst in lst:\n        # if the sub-list is not empty, add the first element to the first_lst\n        if sub_lst:\n            first_lst.append(sub_lst[0])\n    # return the first_lst\n    return first_lst",
        "test": "assert Extract([]) == []",
        "num_ids": 2332
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"Hello World!\") == 2, \"upper_ctr() function should return 2 for the given string 'Hello World!'\"",
        "num_ids": 1167
    },
    {
        "number": 462,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # create an empty list to store the combinations\n    combinations = []\n\n    # loop through each element in the list\n    for i in range(len(list1)):\n\n        # loop through each element after the current one\n        for j in range(i+1, len(list1)):\n\n            # create a tuple with the current and next elements\n            current = (list1[i], list1[j])\n\n            # add the current combination to the list of combinations\n            combinations.append(current)\n\n    # return the list of combinations\n    return combinations",
        "test": "assert combinations_list([]) == []",
        "num_ids": 2147
    },
    {
        "number": 463,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    \n    return max_so_far\n",
        "test": "assert max_subarray_product([1]) == 1",
        "num_ids": 2248
    },
    {
        "number": 464,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Check if the length of the dictionary is less than n\n    if len(dict) < n:\n        return False\n\n    # Check if all the values are same\n    for val in dict.values():\n        if val!= dict[list(dict.keys())[0]]:\n            return False\n\n    return True",
        "test": "assert check_value({'a': 1, 'b': 2, 'c': 3}, 4) == False, \"Test 4 failed\"",
        "num_ids": 2157
    },
    {
        "number": 465,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict",
        "test": "assert drop_empty({\"a\": \"b\", \"c\": \"d\"}) == {\"a\": \"b\", \"c\": \"d\"}",
        "num_ids": 1400
    },
    {
        "number": 468,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far",
        "test": "assert max_product([-2, 0, -1]) == 0",
        "num_ids": 3001
    },
    {
        "number": 470,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Loop through the tuple and find the pairwise sum of each element\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n\n    return pairwise_sum",
        "test": "assert add_pairwise((8, 9)) == 17",
        "num_ids": 1594
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number n as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product",
        "test": "assert find_remainder([1, 2, 3], 3) == 0",
        "num_ids": 1297
    },
    {
        "number": 472,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False",
        "test": "assert check_Consecutive([1, 3, 5, 7, 9]) == False",
        "num_ids": 1726
    },
    {
        "number": 473,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty list to store the intersection of the given tuples\n    result = []\n    # Loop through both the tuple lists\n    for tup1 in test_list1:\n        # Loop through the second tuple list and check if each tuple in the first tuple list is present in the second tuple list\n        for tup2 in test_list2:\n            # If the tuple is present in the second tuple list, add it to the result list\n            if tup1 == tup2:\n                result.append(tup1)\n                break\n    # Return the result list\n    return result",
        "test": "assert tuple_intersection([(1, 2, 3), (2, 3, 4)], [(2, 3, 4), (4, 5)]) == [(2, 3, 4)]",
        "num_ids": 2328
    },
    {
        "number": 474,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string with the old character replaced with the new character\n    str2 = str1.replace(ch, newch)\n    return str2",
        "test": "assert replace_char(\"hello\", \"l\", \"m\") == \"hemmo\"",
        "num_ids": 1330
    },
    {
        "number": 475,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)",
        "test": "assert sort_counter({'apple': 2, 'banana': 1, 'cherry': 3}) == {'banana': 1, 'apple': 2, 'cherry': 3}",
        "num_ids": 1715
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest",
        "test": "assert big_sum([-10, -5, 0, 5, 10]) == 0",
        "num_ids": 1840
    },
    {
        "number": 477,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"Python\") == \"python\"",
        "num_ids": 803
    },
    {
        "number": 478,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define the pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # Use the search() method to find all matches of the pattern in the string\n    matches = pattern.findall(str1)\n    # Remove all lowercase matches from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    return str1",
        "test": "assert remove_lowercase(\"1234567890\") == \"1234567890\"",
        "num_ids": 1413
    },
    {
        "number": 479,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of the number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    if n == 0:\n        return 0\n    else:\n        return n % 10",
        "test": "assert first_Digit(0) == 0, \"The function is not working correctly.\"",
        "num_ids": 1216
    },
    {
        "number": 554,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "test": "assert Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]",
        "num_ids": 1703
    },
    {
        "number": 555,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def difference(n):\n    # initialize the variables\n    sum_cubes = 0\n    sum_natural = 0\n\n    # compute the sum of cubes of the first n natural numbers\n    for i in range(n):\n        sum_cubes += i**3\n\n    # compute the sum of the first n natural numbers\n    for i in range(n):\n        sum_natural += i\n\n    # compute the difference between the two sums\n    diff = abs(sum_cubes - sum_natural)\n\n    # return the difference\n    return diff",
        "test": "assert difference(0) == 0",
        "num_ids": 1974
    },
    {
        "number": 556,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    xor_value = 0\n    for i in range(N):\n        xor_value ^= A[i]\n        xor_value ^= i\n    for i in range(N):\n        if (xor_value & 1) == 1:\n            count += 1\n        xor_value >>= 1\n    return count",
        "test": "assert find_Odd_Pair([1,2,3,4,5], 0) == 0",
        "num_ids": 1958
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)",
        "test": "assert toggle_string(\"Hello, World!\") == \"hELLO, wORLD!\"",
        "num_ids": 1120
    },
    {
        "number": 558,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    sum_diff = 0\n\n    while diff > 0:\n        sum_diff += diff % 10\n        diff //= 10\n\n    return sum_diff",
        "test": "assert digit_distance_nums(0, 0) == 0",
        "num_ids": 2222
    },
    {
        "number": 559,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf') # initializing the max_sum variable\n    current_sum = 0 # initializing the current_sum variable\n    \n    # iterating through the list\n    for i in range(size):\n        current_sum += a[i] # adding the current element to the current_sum variable\n        \n        # checking if the current_sum variable is greater than the max_sum variable\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # checking if the current_sum variable becomes negative\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum",
        "test": "assert max_sub_array_sum([1], 1) == 1",
        "num_ids": 2366
    },
    {
        "number": 560,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # initialize an empty set to store the unique elements\n    union_set = set()\n    # add the elements of both tuples to the set\n    union_set.update(test_tup1)\n    union_set.update(test_tup2)\n    # convert the set to a list and sort it\n    sorted_union_list = sorted(list(union_set))\n    # return the sorted list\n    return sorted_union_list",
        "test": "assert union_elements((2, 5, 7), (3, 8, 9)) == [2, 3, 5, 7, 8, 9]",
        "num_ids": 2521
    },
    {
        "number": 562,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            longest_length = max(longest_length, len(lst[i:j+1]))  \n    return longest_length  ",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 2158
    },
    {
        "number": 563,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and extracts values between quotation marks.\n    '''\n    # Define a regular expression pattern to match values between quotation marks\n    pattern = r'(?<!\\\\)\"([^\"]*)\"(?!\\\\)'\n\n    # Use the re.findall() function to find all the matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n\n    # Return a list of the values extracted from the input string\n    return matches",
        "test": "assert extract_values('The \"cat\" in the hat is cool.') == ['cat']",
        "num_ids": 1401
    },
    {
        "number": 564,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5], 5) == 10, \"count_Pairs([1,2,3,4,5], 5) should be 10.\"",
        "num_ids": 1856
    },
    {
        "number": 565,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 1076
    },
    {
        "number": 566,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    sum = 0\n    # Loop through each digit of the input number and add it to the sum\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    # Return the final sum of digits\n    return sum",
        "test": "assert sum_digits(123) == 6, \"The sum of the digits of 123 is 6.\"",
        "num_ids": 1653
    },
    {
        "number": 567,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([]) == True",
        "num_ids": 1781
    },
    {
        "number": 568,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 578
    },
    {
        "number": 569,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def sort_sublists(list1):\n    for i, sublist in enumerate(list1):\n        sublist.sort()\n    return list1",
        "test": "assert sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]) == [['a', 'b', 'c'], ['d', 'e', 'f']]",
        "num_ids": 2410
    },
    {
        "number": 572,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of numbers.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2239
    },
    {
        "number": 573,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product",
        "test": "assert unique_product([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1, \"The function should return 1 for the given list.\"",
        "num_ids": 2026
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2 + h**2)",
        "test": "assert surfacearea_cylinder(1, 2) == 31.4159 or surfacearea_cylinder(1, 2) == 31.415907817072536 or surfacearea_cylinder(1, 2) == 31.41592653589793 or surfacearea_cylinder(1, 2) == 31.415926535897932, \"The output of surfacearea_cylinder(1, 2) is not correct\"",
        "num_ids": 2025
    },
    {
        "number": 576,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    # Check if the second list is a sublist of the first list\n    if B in A:\n        return True\n    # If the second list is not a sublist of the first list, check if there is a common element\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False",
        "test": "assert is_Sub_Array([1, 2, 3, 4, 5], [6, 7, 8]) == False",
        "num_ids": 2364
    },
    {
        "number": 577,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert n to a string\n    n_str = str(n)\n\n    # Get the last digit of the string\n    last_digit = int(n_str[-1])\n\n    # Find factorial of the number\n    factorial = 1\n    for i in range(2, last_digit + 1):\n        factorial *= i\n\n    # Return the last digit of the factorial\n    return last_digit",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 2238
    },
    {
        "number": 578,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 2578
    },
    {
        "number": 579,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list containing the elements that are present in one tuple but not in the other.\n    '''\n    # First, we create two empty lists to store the elements that are present in one tuple but not in the other\n    dissimilar1 = []\n    dissimilar2 = []\n    # Then, we loop through each element in both tuples and check if it is present in both tuples or not. If it is present only in one tuple, we add it to the appropriate list.\n    for elem in test_tup1:\n        if elem not in test_tup2 and elem not in dissimilar1:\n            dissimilar1.append(elem)\n    for elem in test_tup2:\n        if elem not in test_tup1 and elem not in dissimilar2:\n            dissimilar2.append(elem)\n    # Finally, we return a list containing the elements that are present in one tuple but not in the other\n    return dissimilar1 + dissimilar2",
        "test": "assert find_dissimilar((1, 2, 3), (4, 5, 6))!= (1, 2, 3, 4)",
        "num_ids": 2177
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.extend(even_ele(item, even_fnc))\n        else:\n            new_tuple.append(even_fnc(item))\n    return new_tuple",
        "test": "assert even_ele((('a', 2), (3, ('b', 'c'))), lambda x: x % 2 == 0) == (('a', 2), ('b', 'c'))",
        "num_ids": 2384
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating the surface area of the square pyramid\n    surface_area = 6 * b * s\n    \n    # Returning the surface area of the square pyramid\n    return surface_area",
        "test": "assert surface_Area(6, 10) == 360, \"Error in surface_Area(6, 10)\"",
        "num_ids": 1626
    },
    {
        "number": 582,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def my_dict(dict1):\n    if dict1 == {}:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 1023
    },
    {
        "number": 583,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num < 0:\n        return \"Invalid input\"\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1710
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern to match adverbs ending with ly\n    pattern = r'\\b\\w+(ly|LL|ll|LY|Ll|Ly)\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the positions of adverbs\n    adverb_positions = []\n\n    # Iterate through all matches and add their positions to the adverb_positions list\n    for match in matches:\n        adverb_positions.append(text.index(match))\n\n    # Return the adverb_positions list\n    return adverb_positions",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy dog. The dog is not a good dog.\") == []",
        "num_ids": 2413
    },
    {
        "number": 585,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = heapq.nlargest(n, items)\n    return [heapq.heappop(heap) for _ in range(n)]",
        "test": "assert expensive_items([],0) == []",
        "num_ids": 2309
    },
    {
        "number": 586,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list into two parts\n    first_part = l[:n]\n    second_part = l[n:]\n    # Add the first part to the end of the second part\n    final_list = second_part + first_part\n    return final_list",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1992
    },
    {
        "number": 587,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)",
        "test": "assert list_tuple([]) == ()",
        "num_ids": 955
    },
    {
        "number": 588,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return abs(max_num - min_num)",
        "test": "assert big_diff([2, 4, 6, 8, 10]) == 8",
        "num_ids": 1912
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i**2 == i and i**2 > 0:\n            result.append(i)\n    return result",
        "test": "assert perfect_squares(2, 10) == []",
        "num_ids": 2968
    },
    {
        "number": 590,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # convert polar coordinates to Cartesian coordinates\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.phase(x+y*1j)\n    # convert Cartesian coordinates to rectangular coordinates\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect",
        "test": "assert polar_rect(0, 0) == (0, 0)",
        "num_ids": 1809
    },
    {
        "number": 591,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 1571
    },
    {
        "number": 592,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if n < k:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n\n    C = binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n    return C",
        "test": "assert binomial_Coeff(0,1) == 0",
        "num_ids": 2206
    },
    {
        "number": 593,
        "max_answer_num": 38,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from the ip address\n    ip = re.sub('^0+(?=\\d)', '', ip)\n    return ip",
        "test": "assert removezero_ip('255.255.255.255') == '255.255.255.255'",
        "num_ids": 2252
    },
    {
        "number": 594,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n\n    if even % 2 == 0:\n        even = 0\n    else:\n        even = 1\n\n    if odd % 2 == 0:\n        odd = 0\n    else:\n        odd = 1\n\n    diff = abs(even - odd)\n\n    return diff",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1",
        "num_ids": 2718
    },
    {
        "number": 595,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    min_swaps = n\n    \n    # Find the number of swaps required to convert str1 to str2\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            min_swaps = min(min_swaps, n-i)\n    \n    # Find the number of swaps required to convert str2 to str1\n    for i in range(n):\n        if str2[i]!= str1[i]:\n            min_swaps = min(min_swaps, i+1)\n    \n    return min_swaps",
        "test": "assert min_Swaps('1000', '1001') == 1",
        "num_ids": 4090
    },
    {
        "number": 596,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size",
        "test": "assert tuple_size(tuple()) == 0",
        "num_ids": 1684
    },
    {
        "number": 597,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and an integer k and\n    returns the kth smallest element from the two arrays.\n\n    If k is greater than the total number of elements in the two arrays,\n    it returns None.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # if k is greater than the total number of elements in the two arrays\n    if k > n1 + n2:\n        return None\n\n    # if k is less than or equal to the total number of elements in the two arrays\n    if k <= n1:\n        return arr1[k - 1]\n\n    # find the index of the kth smallest element in the first half of the array\n    index1 = n1 - k\n\n    # if the kth smallest element is in the second half of the array\n    if index1 == n1:\n        return arr2[k - n1]\n\n    # find the kth smallest element in the second half of the array\n    return min(arr2[k - n1], arr1[index1 - 1])",
        "test": "assert find_kth([], [], 1) == None",
        "num_ids": 3467
    },
    {
        "number": 598,
        "max_answer_num": 27,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    number_str = str(number)\n    total = 0\n    power = len(number_str)\n\n    # calculate the total of the digits of the number\n    for digit in number_str:\n        total += int(digit) ** power\n\n    # check if the total of the digits is equal to the original number\n    if total == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(1701) == False",
        "num_ids": 1717
    },
    {
        "number": 599,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 1503
    },
    {
        "number": 600,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(4) == True",
        "num_ids": 1003
    },
    {
        "number": 602,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def first_repeated_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None",
        "test": "assert first_repeated_char('abbccd') == 'b'",
        "num_ids": 1906
    },
    {
        "number": 603,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    i = 1\n    while i <= n:\n        if i == 1:\n            lucid.append(i)\n        elif i == 2:\n            lucid.append(i)\n        elif i % 2 == 0:\n            lucid.append(i)\n        else:\n            if i % 2!= 0:\n                if i % 4!= 0:\n                    lucid.append(i)\n        i += 1\n    return lucid",
        "test": "assert get_ludic(0) == []",
        "num_ids": 4135
    },
    {
        "number": 604,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def reverse_words(s):\n    # split the string into words\n    words = s.split()\n    # reverse each word and join them with a space\n    return \" \".join(words[::-1])",
        "test": "assert reverse_words(\"hello world\") == \"world hello\"",
        "num_ids": 1157
    },
    {
        "number": 605,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        return True\n    else:\n        return False",
        "test": "assert prime_num(2) == True, \"Should return True for 2\"",
        "num_ids": 1469
    },
    {
        "number": 606,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180",
        "test": "assert radian_degree(0) == 0.0",
        "num_ids": 1278
    },
    {
        "number": 607,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None",
        "test": "assert find_literals('hello world', r'\\b[a-z]+\\b') == ('hello', 0, 5)",
        "num_ids": 2159
    },
    {
        "number": 608,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 1\n    b = 1\n    for i in range(n): \n        a, b = b, a+b\n    return a",
        "test": "assert bell_Number(1) == 1, \"bell_Number(1) should be 1.\"",
        "num_ids": 1736
    },
    {
        "number": 610,
        "max_answer_num": 24,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if L > len(list1):\n        return list1\n\n    if L == 1:\n        return list1[1:]\n\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list1):\n        if j == L - 1:\n            list1.pop(i)\n            break\n        i += 1\n        j += 1\n\n    return list1",
        "test": "assert remove_kth_element([1,2,3,4,5], 1) == [2, 3, 4, 5]",
        "num_ids": 2278
    },
    {
        "number": 611,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # initialize max_col to be the value of the first column\n    max_col = test_list[0][N-1]\n\n    # loop through each row of the matrix\n    for row in test_list:\n        # if the value of then'th column in this row is greater than max_col, update max_col\n        if row[N-1] > max_col:\n            max_col = row[N-1]\n\n    return max_col",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6]], 2) == 5",
        "num_ids": 2454
    },
    {
        "number": 612,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def merge(lst):\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 1645
    },
    {
        "number": 614,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize a variable to store the cumulative sum\n    cumulative_sum = 0\n\n    # Loop through each tuple in the list\n    for num in test_list:\n        # Add the current number to the cumulative sum\n        cumulative_sum += num\n\n    # Return the cumulative sum\n    return cumulative_sum",
        "test": "assert cummulative_sum([]) == 0",
        "num_ids": 1899
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    averages = []\n    \n    # Iterate through each tuple in the input tuple\n    for tup in nums:\n        # Calculate the average of the tuple\n        avg = sum(tup) / len(tup)\n        # Append the average to the list of averages\n        averages.append(avg)\n    \n    # Return the list of averages\n    return averages",
        "test": "assert average_tuple([(1,2,3)]) == [2.0]",
        "num_ids": 2010
    },
    {
        "number": 616,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "test": "assert tuple_modulo((1,2,3),(4,5,6)) == (1,2,3)",
        "num_ids": 2124
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def min_Jumps(steps, d): \n    # Convert the steps and d to integers\n    steps = int(steps)\n    d = int(d)\n    \n    # Initialize variables for step count, number of jumps, and current position\n    step_count = 0\n    num_jumps = 0\n    position = 0\n    \n    # Loop until we reach the target point\n    while position < steps:\n        # Move in the direction of the current position\n        if position < d:\n            position += 1\n        else:\n            position += 2\n        \n        # Increment step count\n        step_count += 1\n        \n        # Check if we have reached the target point\n        if position == d:\n            num_jumps += 1\n    \n    # Return the number of jumps\n    return num_jumps",
        "test": "assert min_Jumps(1, 1) == 1",
        "num_ids": 3283
    },
    {
        "number": 618,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            print(\"Cannot divide by zero.\")\n            return\n    return result",
        "test": "assert div_list([1,2,3],[4,4,4]) == [0.25, 0.5, 0.75], \"div_list([1,2,3],[4,4,4]) should return [0.25, 0.5, 0.75]\"",
        "num_ids": 1827
    },
    {
        "number": 619,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    # initialize variables\n    num_found = False\n    num_str = \"\"\n    result_str = \"\"\n    \n    # iterate through each character in the input string\n    for char in test_str:\n        \n        # if the character is a number, append it to the number string\n        if char.isdigit():\n            num_str += char\n            num_found = True\n        \n        # if the number string is not empty and a letter is found, append it to the result string and reset the number string\n        elif num_found and not char.isalpha():\n            result_str += num_str\n            num_str = \"\"\n            num_found = False\n        \n        # if the character is not a number, append it to the result string\n        else:\n            result_str += char\n            \n    # append the remaining number string to the result string\n    result_str += num_str\n    \n    # return the result string\n    return result_str",
        "test": "assert move_num('abc') == 'abc'",
        "num_ids": 2157
    },
    {
        "number": 620,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n\n    return max(dp)",
        "test": "assert largest_subset([2, 3, 4, 5, 6]) == 2",
        "num_ids": 3369
    },
    {
        "number": 622,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    \n    # Find the middle element of the merged list\n    middle = n // 2\n    \n    # If the number of elements is odd, the median is the middle element\n    if n % 2 == 1:\n        median = merged_list[middle]\n    \n    # If the number of elements is even, the median is the average of the two middle elements\n    else:\n        median = (merged_list[middle-1] + merged_list[middle]) / 2\n        \n    return median",
        "test": "assert get_median([1, 3, 5, 7], [2, 4, 6, 8], 5) == 5",
        "num_ids": 3421
    },
    {
        "number": 623,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result",
        "test": "assert nth_nums([1, 2, 3], 1) == [1, 2, 3]",
        "num_ids": 1455
    },
    {
        "number": 624,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"WORLD\") == \"WORLD\"",
        "num_ids": 844
    },
    {
        "number": 625,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    lastIndex = len(newList) - 1\n    temp = newList[lastIndex]\n    newList[lastIndex] = newList[0]\n    newList[0] = temp\n    \n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1712
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (math.pi * r**2) / 3",
        "test": "assert triangle_area(2.5) == 3.875",
        "num_ids": 2457
    },
    {
        "number": 627,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1 + start",
        "test": "assert find_First_Missing([1]) == 1",
        "num_ids": 2804
    },
    {
        "number": 628,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 797
    },
    {
        "number": 629,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a list of even numbers from the input list.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 1409
    },
    {
        "number": 630,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x, y+1))\n    sub.append((x, y-1))\n    sub.append((x+1, y))\n    sub.append((x-1, y))\n    return sub",
        "test": "assert adjac((0, 0)) == [(0, 1), (0, -1), (1, 0), (-1, 0)]",
        "num_ids": 2715
    },
    {
        "number": 631,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return result\n",
        "test": "assert replace_spaces(\"This_is_a_test\") == \"This is a test\"",
        "num_ids": 1267
    },
    {
        "number": 632,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of integers as input and moves all the zeroes to the end of the list.\n    '''\n    # Initialize two pointers, one for the beginning of the list and one for the end of the list\n    start = 0\n    end = len(num_list) - 1\n    \n    # Traverse the list starting from the beginning and move all the zeroes to the end of the list\n    while start < end:\n        if num_list[start] == 0:\n            # Move the current element to the next available position after the end of the list\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n            \n            # Move the end pointer to the previous position to start traversing the list again\n            end -= 1\n        else:\n            start += 1\n    \n    return num_list",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 3490
    },
    {
        "number": 633,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum",
        "test": "assert pair_xor_Sum([0,0,0,0,0], 5) == 0",
        "num_ids": 2121
    },
    {
        "number": 635,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a max heap from the input list\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    # extract items from the heap in sorted order and return them as a list\n    return [hq.heappop(heap) for i in range(len(iterable))]",
        "test": "assert heap_sort([]) == []",
        "num_ids": 2442
    },
    {
        "number": 637,
        "max_answer_num": 25,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # check whether profit and loss are 0\n    if profit == 0 and loss == 0:\n        print(\"The given amount has no profit and no loss.\")\n        return True\n    else:\n        print(\"The given amount does not have no profit and no loss.\")\n        return False",
        "test": "assert noprofit_noloss(100,20) == False, \"No profit and loss for cost 100 and sale amount 20\"",
        "num_ids": 1772
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0 or t <= 0:\n        return None\n    \n    return round((t - 32) * 5/9 + 32)",
        "test": "assert wind_chill(-10,20) == None",
        "num_ids": 2574
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length",
        "test": "assert sample_nam([\"John\", \"Mary\", \"Tom\", \"Jane\", \"Bob\"]) == 0",
        "num_ids": 2132
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'  # regex pattern to match parenthesis and what is inbetween them\n    new_string = re.sub(pattern, '', items)  # replace the parenthesis with an empty string\n    return new_string",
        "test": "assert remove_parenthesis(\"Hello (world) how are you?\") == \"Hello  how are you?\"",
        "num_ids": 1281
    },
    {
        "number": 641,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return (n * (n - 1)) // 2 + n - 1\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 1460
    },
    {
        "number": 643,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+\\b'\n    z_pattern = r'[zZ]'\n    match = re.search(pattern, text)\n    if match:\n        z_index = match.start()\n        if z_index == 0 or z_index == len(match.group()) - 1:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert text_match_wordz_middle('This is a test. It has a z in the middle.') == True",
        "num_ids": 1863
    },
    {
        "number": 644,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k, len(input)):\n        input[i], input[i-k] = input[i-k], input[i]\n    return input",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 2744
    },
    {
        "number": 720,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n\n    Args:\n        test_tup (tuple): A tuple containing integers.\n        test_dict (dict): A dictionary containing key-value pairs.\n\n    Returns:\n        tuple: A tuple containing both the original tuple and the new dictionary.\n    \"\"\"\n    return (test_tup, test_dict)",
        "test": "assert add_dict_to_tuple({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) == ({'a': 1, 'b': 2}, {'c': 3, 'd': 4})",
        "num_ids": 1527
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    \n    # initialize first row and column\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n    for j in range(N):\n        dp[j][0] = cost[j][0]\n    \n    # fill in the rest of the matrix using dynamic programming\n    for i in range(1, N):\n        for j in range(1, N):\n            if cost[i][j] > cost[i-1][j]:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # find the maximum average path\n    max_avg = dp[N-1][N-1]\n    for i in range(N-2, -1, -1):\n        for j in range(N-2, -1, -1):\n            if cost[i][j] > cost[i+1][j]:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    \n    # return the maximum average path\n    return max_avg",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]]) == 24.0",
        "num_ids": 5918
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "test": "assert filter_data({'Alice': (170, 70), 'Bob': (165, 80), 'Charlie': (180, 90)}, 175, 75) == {'Alice': (170, 70), 'Bob': (165, 80)}",
        "num_ids": 2680
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1,2,3,4,5], [4,5,6,7,8]) == 0",
        "num_ids": 2366
    },
    {
        "number": 724,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(1, power+1):\n        sum += int(str(base)[i-1])\n    return sum",
        "test": "assert power_base_sum(0, 1) == 0",
        "num_ids": 2153
    },
    {
        "number": 725,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # defining the regular expression pattern\n    pattern = r'\"([^\"]*)\"'\n    # using re.findall() function to find all matches of the pattern in the string\n    matches = re.findall(pattern, text1)\n    # converting matches into a list and returning it\n    return list(set(matches))",
        "test": "assert extract_quotation(\"This is a string with no quotation marks\") == []",
        "num_ids": 1760
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)",
        "test": "assert multiply_elements(()) == ()",
        "num_ids": 2218
    },
    {
        "number": 728,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 1723
    },
    {
        "number": 730,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 1968
    },
    {
        "number": 731,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * (r ** 2)\n    return s",
        "test": "assert lateralsurface_cone(1,1) == math.pi*1*1",
        "num_ids": 1769
    },
    {
        "number": 732,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[\\s,\\.]'\n    text = re.sub(pattern, ':', text)\n    return text",
        "test": "assert replace_specialchar(\"hello,world\") == \"hello:world\"",
        "num_ids": 1119
    },
    {
        "number": 733,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1",
        "test": "assert find_first_occurrence([1, 3, 5, 7, 9], 5) == 2, \"Test case 1 failed\"",
        "num_ids": 2797
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Create a list to store products of subarrays\n    prod_list = [0] * (n + 1)\n    prod_list[0] = 1\n    # Calculate products of subarrays\n    for i in range(1, n + 1):\n        prod_list[i] = prod_list[i - 1] * arr[i - 1]\n    # Calculate sum of products of subarrays\n    subarray_sum = 0\n    for i in range(n):\n        subarray_sum += prod_list[i] * prod_list[i + 1]\n    return subarray_sum",
        "test": "assert sum_Of_Subarray_Prod([1,2,3]) == 15",
        "num_ids": 2953
    },
    {
        "number": 735,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Iterate through all the bits except the first and the last one\n    for i in range(len(bin(n)[2:][:-1])):\n        # Toggle the i-th bit\n        n = n ^ (1 << i)\n    return n",
        "test": "assert set_middle_bits(0) == 0",
        "num_ids": 2079
    },
    {
        "number": 736,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n        a (list): A sorted list in which the value is to be inserted.\n        x (int): The value to be inserted.\n\n    Returns:\n        int: The index where the value should be inserted in the sorted list.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index",
        "test": "assert left_insertion([1, 3, 4, 5, 6], 1) == 0",
        "num_ids": 2013
    },
    {
        "number": 737,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"apple\") == True",
        "num_ids": 1397
    },
    {
        "number": 738,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (n*geometric_sum(n-1))",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 1206
    },
    {
        "number": 739,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_nums = []\n    # Calculate the sum of the first n natural numbers \n    for i in range(1, n+1):\n        triangular_nums.append(math.factorial(n) // (math.factorial(i) * math.factorial(n-i)))\n    \n    # Find the smallest triangular number with n digits\n    min_triangular_num = 0\n    for i in range(1, len(triangular_nums)):\n        if triangular_nums[i] < triangular_nums[min_triangular_num]:\n            min_triangular_num = i\n    \n    return min_triangular_num",
        "test": "assert find_Index(1) == 0",
        "num_ids": 1883
    },
    {
        "number": 740,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple and returns a dictionary using adjacent elements.\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    # iterate through the tuple and add pairs of adjacent elements to the dictionary\n    for i in range(len(test_tup)-1):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # return the completed dictionary\n    return my_dict",
        "test": "assert tuple_to_dict((1,2,3)) == {1:2, 2:3}",
        "num_ids": 1905
    },
    {
        "number": 741,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(s[i] == s[0] for i in range(len(s)))",
        "test": "assert all_Characters_Same(\"hello\") == False",
        "num_ids": 1574
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side**2",
        "test": "assert area_tetrahedron(2) == 2",
        "num_ids": 1314
    },
    {
        "number": 743,
        "max_answer_num": 36,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 2642
    },
    {
        "number": 744,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none((1, None, 3)) == True",
        "num_ids": 1268
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % int(x) == 0 for digit in str(x)), range(startnum, endnum + 1)))",
        "test": "assert divisible_by_digits(110, 120) == [] # not divisible by any digit",
        "num_ids": 3896
    },
    {
        "number": 746,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function calculates the area of a sector given its radius and angle. If the angle is greater than 360 degrees, the function returns None.\n    '''\n\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r",
        "test": "assert sector_area(2,90) == math.pi * (2**2)",
        "num_ids": 1996
    },
    {
        "number": 747,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a 3x3 table to store the LCS lengths of all three sequences\n    n = len(X)\n    m = len(Y)\n    o = len(Z)\n    LCS = [[[0 for j in range(o+1)] for k in range(m+1)] for i in range(n+1)]\n\n    # Fill in the table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                elif LCS[i-1][j][k] > LCS[i][j-1][k]:\n                    LCS[i][j][k] = LCS[i-1][j][k]\n                elif LCS[i][j-1][k] > LCS[i][j][k-1]:\n                    LCS[i][j][k] = LCS[i][j-1][k]\n                else:\n                    LCS[i][j][k] = LCS[i][j][k-1]\n\n    # Find the LCS starting from the bottom right corner\n    i, j, k = n, m, o\n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i-1][j][k] > LCS[i][j-1][k]:\n            i -= 1\n        elif LCS[i][j-1][k] > LCS[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs",
        "test": "assert lcs_of_three('AGGTAB', 'GXTXAYB', 'GXTXAYB') == 'GTAB'",
        "num_ids": 4797
    },
    {
        "number": 748,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # define regex pattern to find capital words\n    pattern = r'(?<=\\b)(?=[A-Z])'\n    # replace capital words with spaces\n    return re.sub(pattern,'', str1)",
        "test": "assert capital_words_spaces('The quick brown fox') == 'The quick brown fox'",
        "num_ids": 2154
    },
    {
        "number": 749,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all numeric strings to integers\n    nums_int = [int(num) for num in nums_str if num.isdigit()]\n    # Sort the list of integers in ascending order\n    nums_int.sort()\n    # Convert back to strings\n    sorted_nums_str = [str(num) for num in nums_int]\n    return sorted_nums_str",
        "test": "assert sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 3063
    },
    {
        "number": 750,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i]) == tuple:\n            test_list[i] = tuple(test_list[i]) + test_tup\n        elif type(test_list[i]) == list:\n            test_list[i] = add_tuple(test_list[i], test_tup)\n        else:\n            continue\n    return test_list",
        "test": "assert add_tuple([], ()) == []",
        "num_ids": 1312
    },
    {
        "number": 751,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i > 0 and arr[i] > arr[i//2]:\n        return False\n    else:\n        return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    n = len(arr)\n\n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    for i in range(n-1, n//2-1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True",
        "test": "assert check_min_heap_helper([3,2,1,4,5], 0) == True, \"check_min_heap_helper([3,2,1,4,5], 0) == True\"",
        "num_ids": 3571
    },
    {
        "number": 752,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2)\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 2279
    },
    {
        "number": 753,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    count = 0\n    \n    # Sort the list in ascending order\n    test_list.sort()\n    \n    # Iterate over the list and add elements to the min_list\n    for i in test_list:\n        if len(min_list) < K:\n            min_list.append(i)\n            count += 1\n        elif i < min_list[0]:\n            min_list.pop(0)\n            min_list.append(i)\n            count += 1\n        elif i == min_list[0]:\n            count += 1\n    \n    # Return the minimum k records from the list\n    return min_list[:K]",
        "test": "assert min_k([(1, 'apple'), (2, 'banana'), (3, 'cherry'), (4, 'date'), (5, 'elderberry')], 5) == [(1, 'apple'), (2, 'banana'), (3, 'cherry'), (4, 'date'), (5, 'elderberry')]",
        "num_ids": 3556
    },
    {
        "number": 754,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 2386
    },
    {
        "number": 755,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n\n    # sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # return the second element of the sorted list\n    return sorted_numbers[1]",
        "test": "assert second_smallest([1, 2, 3]) == 2, 'Function should return the second smallest number in the list'",
        "num_ids": 1722
    },
    {
        "number": 756,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_zero_one('ababab') == True",
        "num_ids": 2265
    },
    {
        "number": 757,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs(['hello', 'world']) == 0",
        "num_ids": 2445
    },
    {
        "number": 758,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict",
        "test": "assert unique_sublists(['a', 'b', 'c']) == {('a',): 1, ('b',): 1, ('c',): 1}",
        "num_ids": 3443
    },
    {
        "number": 759,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False",
        "test": "assert is_decimal(\"12.34a\") == False",
        "num_ids": 2012
    },
    {
        "number": 760,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 2, 3, 4, 4]) == False",
        "num_ids": 1887
    },
    {
        "number": 762,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0 and monthnum3 % 100!= 0 or monthnum3 % 400 == 0:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(5) == False",
        "num_ids": 2096
    },
    {
        "number": 763,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def find_min_diff(arr, n):\n    # sort the array\n    arr.sort()\n    min_diff = float('inf')\n\n    # iterate through the sorted array\n    for i in range(len(arr) - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff",
        "test": "assert find_min_diff([1,2,3,4,5],5) == 1",
        "num_ids": 2557
    },
    {
        "number": 764,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"1234567890\") == 10, \"Number of digits incorrect for input '1234567890'\"",
        "num_ids": 1186
    },
    {
        "number": 765,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    p = 5\n    q = 2\n    i = 1\n    while i < n:\n        if i % p == 0 and i % q == 0:\n            i += 1\n            continue\n        else:\n            i += 1\n    return i",
        "test": "assert is_polite(1) == 1",
        "num_ids": 2183
    },
    {
        "number": 766,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    if n < 2:\n        return []\n    pairs = []\n    for i in range(n):\n        if i + 1 < n:\n            pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1,2,3,4,5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 1772
    },
    {
        "number": 767,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to'sum'.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 10) == 0",
        "num_ids": 2434
    },
    {
        "number": 769,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list",
        "test": "assert Diff([],[]) == []",
        "num_ids": 1385
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # Initialize the sum and count of odd numbers\n    sum = 0\n    count = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1):\n        \n        # Check if the current number is odd\n        if i % 2!= 0:\n            \n            # Calculate the fourth power of the current number and add it to the sum\n            sum += i**4\n            \n            # Increment the count of odd numbers\n            count += 1\n            \n    # Return the sum of fourth powers of odd numbers\n    return sum",
        "test": "assert odd_num_sum(5) == 254",
        "num_ids": 1554
    },
    {
        "number": 771,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isspace():\n            continue\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            if stack.pop()!= \"(\":\n                return False\n    return not stack",
        "test": "assert check_expression('a+b*c') == True",
        "num_ids": 1868
    },
    {
        "number": 772,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    This function takes a string and an integer as input,\n    where the integer represents the length of the words that need to be removed.\n    It removes all the words with the given length from the string and returns the modified string.\n    \"\"\"\n    # Split the string into words and store them in a list\n    words = test_str.split()\n\n    # Initialize an empty string to store the modified words\n    modified_words = \"\"\n\n    # Loop through the words and remove the words with the given length\n    for word in words:\n        if len(word)!= K:\n            modified_words += word + \" \"\n\n    # Return the modified string\n    return modified_words[:-1]",
        "test": "assert remove_length(\"Hello world, this is a test string\", 7) == \"Hello world, this is a test string\"",
        "num_ids": 1809
    },
    {
        "number": 773,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start()\n    else:\n        return None\n",
        "test": "assert occurance_substring(\"Hello, World! This is a test string\", \"Test\") is None",
        "num_ids": 1948
    },
    {
        "number": 775,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        if nums[i] % 2!= 0:\n            odd_count += 1\n        else:\n            break\n    return odd_count == 0",
        "test": "assert odd_position([1, 3, 5, 7, 9]) == False",
        "num_ids": 2057
    },
    {
        "number": 776,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"\") == 0",
        "num_ids": 1740
    },
    {
        "number": 777,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty set to store the elements of the list\n    set_elements = set()\n    \n    # Loop through the elements of the list\n    for element in arr:\n        # Add the element to the set\n        set_elements.add(element)\n        \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the elements of the set and add their value to the sum variable\n    for element in set_elements:\n        sum += element\n        \n    # Return the sum\n    return sum",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 2480
    },
    {
        "number": 778,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(list1)\n    sublists = []\n    for key, group in grouped:\n        if key == list1[0]:\n            sublists.append([key])\n        else:\n            sublists[-1].append(key)\n    return sublists",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 2094
    },
    {
        "number": 779,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublist_dict = {}\n    for sublist in list1:\n        if sublist not in unique_sublist_dict:\n            unique_sublist_dict[sublist] = 1\n        else:\n            unique_sublist_dict[sublist] += 1\n    return unique_sublist_dict",
        "test": "assert unique_sublists(['apple', 'banana', 'cherry']) == {'apple': 1, 'banana': 1, 'cherry': 1}",
        "num_ids": 2759
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initializing an empty list to store the combinations\n    combinations_list = []\n    # initializing a variable to store the sum of the current combination\n    current_sum = 0\n    # initializing a dictionary to store the remaining tuples in the list\n    remaining_dict = {}\n\n    # loop through each tuple in the given list\n    for i in range(len(test_list)):\n        # check if the current tuple is in the dictionary\n        if test_list[i] not in remaining_dict:\n            # if not, add it to the dictionary and initialize the remaining sum to be the sum of the current tuple and the index of the current tuple\n            remaining_dict[test_list[i]] = [i, test_list[i][0]]\n            current_sum += test_list[i][0]\n        else:\n            # if it is, update the remaining sum to be the difference between the current sum and the index of the current tuple\n            remaining_dict[test_list[i]][1] = remaining_dict[test_list[i]][0] - i\n            # add the current tuple to the list of combinations\n            combinations_list.append(test_list[i])\n            # check if the remaining sum is 0\n            if current_sum == 0:\n                break\n\n    # return the list of combinations\n    return combinations_list",
        "test": "assert find_combinations([(1,2,3),(4,5,6)]) == [(1,2,3),(4,5,6)]",
        "num_ids": 5844
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    if count == 0:\n        count = 1\n    return count",
        "test": "assert count_divisors(56) == 8",
        "num_ids": 2421
    },
    {
        "number": 782,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[0] = 0\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    sum_odd_length_subarrays = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if j - i + 1 % 2 == 1:\n                sum_odd_length_subarrays += prefix_sum[j] - prefix_sum[i - 1]\n    return sum_odd_length_subarrays",
        "test": "assert odd_length_sum([]) == 0",
        "num_ids": 2545
    },
    {
        "number": 783,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    h = 0\n    s = 0\n    v = max_value\n    if delta == 0:\n        h = 0\n    elif max_value == r:\n        h = (g - b) / delta\n    elif max_value == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    h = h / 6 if h < 1 else h\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_value\n    return round(h, 2), round(s, 2), round(v, 2)",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 5165
    },
    {
        "number": 784,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    result = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        result *= min(even_count, odd_count)\n            \n    return result",
        "test": "assert mul_even_odd([2, 4, 6]) == 0",
        "num_ids": 2155
    },
    {
        "number": 785,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for char in test_str:\n        if char.isdigit():\n            result.append(int(char))\n        else:\n            return None\n    return tuple(result)",
        "test": "assert tuple_str_int(('1', '2', '3', '4', '5')) == (1, 2, 3, 4, 5)",
        "num_ids": 1973
    },
    {
        "number": 786,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # initialize the left and right indices to the start and end of the list, respectively\n    left = 0\n    right = len(a) - 1\n\n    # loop until the left index is less than or equal to the right index\n    while left <= right:\n        # calculate the midpoint index\n        mid = (left + right) // 2\n\n        # if the midpoint value is less than the specified value, update the left index to mid + 1\n        if a[mid] < x:\n            left = mid + 1\n        # if the midpoint value is greater than or equal to the specified value, update the right index to mid - 1\n        else:\n            right = mid - 1\n\n    # return the index of the right insertion point\n    return right + 1",
        "test": "assert right_insertion([1,2,3,4,5], 2) == 1",
        "num_ids": 2398
    },
    {
        "number": 787,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(?=.{3}b)'\n    return re.search(pattern, text) is not None",
        "test": "assert text_match_three(\"aab\") == False",
        "num_ids": 3220
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert list to tuple\n    new_list = tuple(test_list)\n    # Convert string to tuple\n    new_str = tuple(test_str)\n    # Combine both tuples\n    combined_tuple = new_list + new_str\n    return combined_tuple",
        "test": "assert new_tuple([1,2,3], 'hello') == (1,2,3, 'h', 'e', 'l', 'l', 'o')",
        "num_ids": 1428
    },
    {
        "number": 790,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n                if count > 1:\n                    return False\n        if count == 0:\n            return False\n    return True",
        "test": "assert even_position([1, 3, 5, 7, 9]) == False, \"The function should return False for the input list [1, 3, 5, 7, 9]\"",
        "num_ids": 2169
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while isinstance(test_tup, tuple):\n        test_tup = list(test_tup)\n    return test_tup",
        "test": "assert remove_nested(()) == []",
        "num_ids": 1605
    },
    {
        "number": 792,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([[1, 2], [3, 4], [5, 6]]) == 3",
        "num_ids": 1485
    },
    {
        "number": 793,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the last position to -1\n    last_position = -1\n\n    # Traverse through the array\n    for i in range(len(arr)):\n        # If the current element is equal to x\n        if arr[i] == x:\n            # Update the last position to i\n            last_position = i\n\n    # Return the last position\n    return last_position",
        "test": "assert last([1,3,5,7,9],1) == 0, \"last([1,3,5,7,9],1) should be 0\"",
        "num_ids": 2828
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_starta_endb(\"aThis is a test.b\") == \"aThis is a test.b\"",
        "num_ids": 1465
    },
    {
        "number": 796,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 1306
    },
    {
        "number": 797,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum",
        "test": "assert sum_odd(2) == 1",
        "num_ids": 1423
    },
    {
        "number": 798,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1604
    },
    {
        "number": 799,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def left_rotate(n, d):\n    # Convert the binary representation of n to a list of digits\n    bin_list = [int(digit) for digit in bin(n)[2:]]\n\n    # Rotate the bits of the list to the left by d positions\n    for _ in range(d):\n        bin_list.append(bin_list.pop(0))\n\n    # Convert the list of digits back to a binary number\n    return int(''.join(map(str, bin_list)), 2)",
        "test": "assert left_rotate(42, 0) == 42  # correct test case 2",
        "num_ids": 2365
    },
    {
        "number": 800,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)",
        "test": "assert remove_all_spaces(\"Hello world\") == \"Helloworld\"",
        "num_ids": 999
    },
    {
        "number": 801,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "test": "assert test_three_equal(1,2,3)!= 4",
        "num_ids": 1634
    },
    {
        "number": 802,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # If the array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n\n    # If the array has a single element, return 1\n    if n == 1:\n        return 1\n\n    # Initialize a variable to store the count of rotations\n    count = 0\n\n    # Initialize two pointers for the array\n    left = 0\n    right = n - 1\n\n    # Loop until the pointers meet\n    while left < right:\n        # Check if the current element is greater than the next element\n        if arr[left] > arr[right]:\n            # Increment the count\n            count += 1\n\n            # Move the left pointer to the right\n            left += 1\n        else:\n            # Move the right pointer to the left\n            right -= 1\n\n    return count",
        "test": "assert count_rotation([1, 1, 1, 1, 1]) == 0",
        "num_ids": 2822
    },
    {
        "number": 803,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n and returns True if it is a perfect square and False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False",
        "test": "assert is_perfect_square(17) == False",
        "num_ids": 1639
    },
    {
        "number": 804,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2, 4, 6, 8, 10]) == True, \"The product of 2, 4, 6, 8, 10 is even.\"",
        "num_ids": 1774
    },
    {
        "number": 805,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_sum_list = []\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = [lists[i]]\n        elif current_sum == max_sum:\n            max_sum_list.append(lists[i])\n    return max_sum_list",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) == [[13, 14, 15]]",
        "num_ids": 3966
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def max_run_uppercase(test_str):\n    # Find the maximum length of the run of uppercase characters in the string\n    max_run = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            curr_run = 0\n        \n        if curr_run > max_run:\n            max_run = curr_run\n    \n    return max_run",
        "test": "assert max_run_uppercase('aBcDeFgHiJkLmNoPqRsTuVwXyZ') == 1",
        "num_ids": 2580
    },
    {
        "number": 807,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None",
        "test": "assert first_odd([]) == None",
        "num_ids": 1325
    },
    {
        "number": 808,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K(((1, 2, 3), (4, 5, 6)), 7) == False",
        "num_ids": 1397
    },
    {
        "number": 809,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    # check if length of both tuples are same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # iterate over both tuples and check if each element of second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True",
        "test": "assert check_smaller((1,3,5),(1,3,4)) == False",
        "num_ids": 2153
    }
]