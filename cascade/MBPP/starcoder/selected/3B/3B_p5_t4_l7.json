[
    {
        "number": 2,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2 and elem not in common_elements:\n            common_elements.append(elem)\n    return common_elements",
        "test": "assert similar_elements([], []) == []",
        "num_ids": 946,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_not_prime(3) == True, \"is_not_prime function failed for 3\"",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a max heap and return the largest n integers\n    return [num for num in hq.nlargest(n,nums)]",
        "test": "assert heap_queue_largest([4, 2, 9, 6, 3, 8, 5, 7, 1], 3) == [9, 8, 7]",
        "num_ids": 1123,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Power_Of_Two(5) == False, \"is_Power_Of_Two(5) should return False.\"",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "test": "assert find_char_long(\"A\") == []",
        "num_ids": 798,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 679,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def find_Rotations(str):\n    if len(str) <= 1:\n        return 0\n    min_rotations = 0\n    for i in range(len(str)):\n        if str[i]!= str[-1-i]:\n            min_rotations += 1\n            break\n    return min_rotations",
        "test": "assert find_Rotations(\"hello\") == 1",
        "num_ids": 1245,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0] == ch:\n        return remove_Occ(s[1:],ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1],ch)\n    else:\n        return s",
        "test": "assert remove_Occ('hello', 'x') == 'hello'",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # find the row with the smallest sum\n        min_sum = float('inf')\n        min_row = -1\n        for j in range(n):\n            if j!= i:\n                row_sum = sum(M[i]) + sum(M[j])\n                if row_sum < min_sum:\n                    min_sum = row_sum\n                    min_row = j\n        # swap the two rows\n        if min_row!= -1:\n            M[i], M[min_row] = M[min_row], M[i]\n    return M",
        "test": "assert sort_matrix([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == [[1, 1, 1], [1, 1, 1], [1, 1, 1]]",
        "num_ids": 1515,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume of the prism using Heron's formula\n    s = (l + b + h) / 2  # semi-perimeter\n    volume = (1 / 3) * l * b * h  # formula for volume using Heron's formula\n\n    # Return the volume of the prism\n    return volume",
        "test": "assert find_Volume(4,4,4) == 54.0, \"Volume should be 54.0\"",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b([a-z]+)_([a-z]+)\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"1234567890\") == False",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a",
        "test": "assert square_perimeter(1) == 4",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def str_to_list(string):\n    \"\"\"\n    This function takes in a string and returns a list of characters that are present in the first string, \n    but not in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    string_list = list(string)\n    char_set = set(string)\n    common_chars = set(string_list) & char_set\n    result = [char for char in string_list if char not in common_chars][:NO_OF_CHARS]\n    return result\n",
        "test": "assert str_to_list(\"12345\") == []",
        "num_ids": 1982,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the elements of the array\n    element_dict = {}\n    \n    # Loop through the array and add each element to the dictionary\n    for num in arraynums:\n        if num in element_dict:\n            return True\n        else:\n            element_dict[num] = True\n    \n    # If no duplicates were found, return False\n    return False",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0 or x == 1 or x == 10 or x == 100:\n        return True\n    elif x > 100 and x % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(12) == False, \"Test case 4: 12 is not woodall\"",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the given number to a string\n    num_str = str(num)\n    # Reverse the string and convert it back to an integer\n    rev_num = int(num_str[::-1])\n    # Check if the reversed number is one less than twice its original number\n    if rev_num - num == 2:\n        return True\n    else:\n        return False",
        "test": "assert rev(124) == False",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_Max_Num(arr): \n    n = len(arr) \n    max_num = 0 \n    for i in range(n): \n        max_num = max(max_num, arr[i]) \n    return max_num",
        "test": "assert find_Max_Num([9,8,7,6,5]) == 9 # correct answer",
        "num_ids": 1200,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-2,4) == True",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Check if a number is octagonal or not.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is octagonal, False otherwise.\n    \"\"\"\n    # Initialize variables\n    num = n\n    octagonal = 0\n    # Calculate the square root of the number\n    sqrt = int(num ** 0.5)\n    # Check if the number is divisible by the square root\n    if num % sqrt == 0:\n        for i in range(1, sqrt+1):\n            # Calculate the square of the current octagonal number\n            octagonal = i ** 2 + i ** 2\n            # Check if the number is divisible by the square of the current octagonal number\n            if num % octagonal == 0:\n                return True\n        # If the number is not divisible by the square of any octagonal number, then it's octagonal\n        return True\n    # If the number is not divisible by the square root, then it's not octagonal\n    return False",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    num_substrings = 0\n    count = defaultdict(int)\n\n    for i in range(len(s)):\n        count[len(s)-i] += 1\n\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(c) for c in s[i:j+1]) == len(s[i:j+1]):\n                num_substrings += count[j-i]\n\n    return num_substrings",
        "test": "assert count_Substrings(\"123456789\") == 0",
        "num_ids": 1265,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        smallest = xs[0]\n        for x in xs[1:]:\n            if x < smallest:\n                smallest = x\n        return smallest",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1, \"smallest_num([1, 2, 3, 4, 5]) == 1\"",
        "num_ids": 1122,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([(1,2), (3,4), (5,6), (7,8), (9,10)]) == 8",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks([(80, 'English'), (90, 'Maths'), (60, 'Science')]), 'The marks for Maths are not sorted in descending order.'",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        if isinstance(lst, list):\n            return [item for sublist in lst for item in flatten(sublist)]\n        else:\n            return [lst]\n    \n    flattened_list = flatten(data_list)\n    sum_of_elements = sum(flattened_list)\n    return sum_of_elements",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 898,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, -4, 5, 0]) == 4",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1 or n == 0:\n        return 1\n    \n    # Base case\n    if n == 2:\n        return 2\n    \n    # Initialize variables\n    prev_prev = 1\n    prev = 1\n    curr = 0\n    \n    # Iterate through the set of Bell numbers\n    for i in range(3, n+1):\n        curr = prev_prev + prev\n        \n        # Update variables\n        prev_prev = prev\n        prev = curr\n    \n    # Return the final answer\n    return curr",
        "test": "assert bell_number(0) == 1",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array is monotonic or not.\n    '''\n\n    # Check if the array is empty or contains only one element\n    if len(A) <= 1: \n        return True\n\n    # Check if all elements in the array are the same\n    if A[0] == A[-1]: \n        return True\n\n    # Check if the array is monotonic\n    for i in range(len(A)-1): \n        if A[i] >= A[i+1]:\n            return False\n        elif A[i] <= A[i+1]:\n            return True",
        "test": "assert is_Monotonic([3, 2, 1, 4, 5]) == False",
        "num_ids": 1511,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes a list 'l' and a sublist's' as input and returns True if 'l' contains the sublist, False otherwise.\n    \"\"\"\n    # Check if the length of the sublist is greater than the length of the list\n    if len(s) > len(l):\n        return False\n\n    # Iterate through the list and check if each element is present in the sublist\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    # If the loop completes without returning True, the sublist was not found in the list\n    return False",
        "test": "assert is_sublist([1,2,3], [4,5]) == False, \"The sublist [4,5] should not be found in [1,2,3].\"",
        "num_ids": 1053,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True",
        "test": "assert find_equal_tuple([(1,2,3),(4,5,6)]) == True",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    # Set a default number of iterations to 100\n    max_iters = 100\n    \n    # While the number of iterations is less than or equal to the maximum number of iterations\n    while max_iters > 0:\n        # Initialize variables for keeping track of the number of swaps and the gap size\n        swaps = 0\n        gap = len(nums)\n        \n        # Iterate through the list of elements\n        for i in range(len(nums)-1):\n            # If the current element is greater than the next element\n            if nums[i] > nums[i+1]:\n                # Swap the elements\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                # Increment the swap count\n                swaps += 1\n        \n        # Decrement the maximum number of iterations and print the number of swaps made\n        max_iters -= 1\n        print(\"Swaps made:\", swaps)\n        \n        # If the number of swaps is 0, the list is already sorted\n        if swaps == 0:\n            break\n        \n        # Calculate the new gap size based on the number of swaps made\n        gap = int(gap / 1.3)\n        \n        # If the gap size is less than or equal to 1, set it to 1\n        if gap <= 1:\n            gap = 1\n            \n    return nums",
        "test": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1824,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def dif_Square(n): \n    '''\n    This function takes an integer n as input and returns True if it can be represented as the difference of two squares, and False otherwise.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and n // i == i:\n            return True\n    return False",
        "test": "assert dif_Square(25) == True, \"Test Failed: dif_Square should return True\"",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    sequence = []\n    for color in colors:\n        sequence.append(color)\n    for pattern in patterns:\n        if sequence == pattern:\n            return True\n    return False",
        "test": "assert is_samepatterns(['red', 'green', 'blue'], [[0, 1, 2], [6, 7, 8], [3, 4, 5], [9, 10, 11]]) == False",
        "num_ids": 1372,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        flag = True\n        for num in t:\n            if num % K!= 0:\n                flag = False\n                break\n        if flag:\n            result.append(t)\n    return result",
        "test": "assert find_tuples([(2, 4), (6, 8), (10, 12), (14, 16), (18, 20)], 4) == []",
        "num_ids": 1167,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n",
        "test": "assert is_Diff(11) == True, \"is_Diff(11) should return True.\"",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = \"\"\n    for i in s: \n        if i.isalpha(): \n            word += i \n    if len(word) % 2!= 0: \n        return True \n    else: \n        return False",
        "test": "assert word_len(\"apple\") == True, \"word_len should return True for word 'apple'\"",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (4 * n - 1)) // 3",
        "test": "assert tetrahedral_number(0) == 0, \"Incorrect result for tetrahedral_number(0)\"",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume",
        "test": "assert volume_sphere(1) == 4/3 * math.pi * (1)**3",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    return (char % 26)",
        "test": "assert get_Char('') == 0",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with the first two numbers of the sequence\n    sequence = [1, 1]\n\n    # Check if the sequence has length n\n    if len(sequence) >= n:\n        # Return the nth number in the sequence\n        return sequence[n-1]\n    else:\n        # Continue generating numbers until we reach length n\n        while len(sequence) < n:\n            # Calculate the next number in the sequence by adding the previous two numbers\n            next_number = sequence[-1] + sequence[-2]\n            # Add the next number to the sequence\n            sequence.append(next_number)\n        # Return the nth number in the sequence\n        return sequence[n-1]",
        "test": "assert sequence(1) == 1",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n\n    Parameters:\n    r (float): radius of the sphere\n\n    Returns:\n    float: surface area of the sphere\n    \"\"\"\n\n    # Formula for surface area of a sphere\n    surface_area = (4 * math.pi * r**2)\n\n    return surface_area",
        "test": "assert surfacearea_sphere(2) == 4*math.pi*2*2",
        "num_ids": 712,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hex(n):\n        '''\n        Returns the nth centered hexagonal number.\n        '''\n        return n*(2*n-1)\n    \n    return centered_hex(n)",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 1227,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n\n    Args:\n    dict1 (dict): A dictionary containing key-value pairs.\n    dict2 (dict): A dictionary containing key-value pairs.\n    dict3 (dict): A dictionary containing key-value pairs.\n\n    Returns:\n    dict: A single dictionary containing all the key-value pairs from the three input dictionaries.\n    \"\"\"\n\n    # Combine the three dictionaries into a single dictionary.\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict",
        "test": "assert merge_dictionaries_three({},{},{}) == {}",
        "num_ids": 1209,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of elements\n    freq = {}\n    # Iterate through each element in the list\n    for element in list1:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if element in freq:\n            freq[element] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[element] = 1\n    # Return the final dictionary\n    return freq",
        "test": "assert freq_count([]) == {}",
        "num_ids": 1215,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = 10**9\n    largest = -1 * 10**9\n    \n    for i in range(2, N):\n        if abs(N - i) < abs(N - smallest):\n            smallest = i\n        elif abs(N - i) < abs(N - largest):\n            largest = i\n    \n    return smallest if abs(N - smallest) < abs(N - largest) else largest",
        "test": "assert closest_num(5) == 4",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)",
        "test": "assert len_log(['a', 'b', 'c', 'd', 'e']) == 1",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring([\"abc\", \"def\", \"ghi\"], \"xyz\") == False, \"Expected False, got True.\"",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: # if even\n        if n == 2 or n == 4 or n == 6 or n == 8: # if 2, 4, 6, or 8\n            return True\n        elif n > 8: # if > 8\n            return False\n    else: # if odd\n        if n == 1 or n == 3 or n == 5 or n == 7: # if 1, 3, 5, or 7\n            return True\n        elif n > 7: # if > 7\n            return False",
        "test": "assert is_undulating(5) == True, \"is_undulating(5) should return True\"",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,2) == 4, \"Incorrect result for 2 to the power 2. Expected 4, got {}.\".format(power(2,2))",
        "num_ids": 776,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples in ascending order based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]",
        "test": "assert index_minimum([(2, 3), (1, 2), (0, 1)]) == 0",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3, \"Test 1 failed\"",
        "num_ids": 1030,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(1) == 1",
        "num_ids": 624,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # Loop through each element in the flattened list and increment its frequency in the dictionary\n    for item in flat_list:\n        freq[item] = freq.get(item, 0) + 1\n    \n    # Return the dictionary of frequency counts\n    return freq",
        "test": "assert frequency_lists([[1,2,3],[4,5,6],[7,8,9]]) == {1:1, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1, 8:1, 9:1}",
        "num_ids": 1328,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "test": "assert multiply_num([10, 11, 12]) == 36",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def decimal_to_binary(n):\n    # Initialize an empty string to store binary equivalent\n    binary_str = \"\"\n\n    # Iterate through each digit in the decimal number\n    while n > 0:\n        # Get the last digit of the decimal number\n        last_digit = n % 2\n\n        # Add the last digit to the beginning of the binary string\n        binary_str = str(last_digit) + binary_str\n\n        # Remove the last digit from the decimal number\n        n = n // 2\n\n    # Return the binary string\n    return binary_str",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 972,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_num_str = num_str[::-1]\n    # Check if the reversed string is palindrome or not\n    if rev_num_str == num_str:\n        # If it is, return the next smallest palindrome\n        return int(rev_num_str) + 1\n    else:\n        # If it's not, keep iterating until we find the next smallest palindrome\n        for i in range(1000, 1000000, 1000):\n            if i < 100000000:\n                num_str = str(i)\n                rev_num_str = num_str[::-1]\n                if rev_num_str!= num_str:\n                    # If it's not, return the next smallest palindrome\n                    return int(rev_num_str) + i\n        # If we reach this point, we haven't found a palindrome\n        sys.exit(\"No palindrome found.\")",
        "test": "assert next_smallest_palindrome(12321) == 12322",
        "num_ids": 1643,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    This function takes in an array and a value k, and returns the kth element in the array.\n    The array is assumed to be 1-indexed.\n    \"\"\"\n    # check if k is within the range of the array\n    if k < 1 or k > len(arr):\n        return None\n    # return the kth element\n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 925,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    words = word.split('_')\n    for i, word in enumerate(words):\n        if i == 0:\n            camel_case += word.lower()\n        else:\n            camel_case += word.capitalize()\n    return camel_case",
        "test": "assert snake_to_camel('foo_bar') == 'fooBar'",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 0\n    \n    if m == 1:\n        return n\n    \n    euler_num = eulerian_num(n, m-1)\n    return euler_num + (n-euler_num)*m",
        "test": "assert eulerian_num(10, 7) == 232 and eulerian_num(4, 5) == 20 and eulerian_num(6, 7) == 378",
        "num_ids": 1414,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "test": "assert sort_sublists([[1, 2, 3], ['a', 'b', 'c']]) == [[1, 2, 3], ['a', 'b', 'c']]",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i is True:\n            count += 1\n    return count",
        "test": "assert count([True, False, True, True, False]) == 3, \"The function should return 3 for the given list\"",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup += (test_list[i],)\n    return test_tup",
        "test": "assert add_lists([3, 2, 1], (1, 2, 3)) == (1, 2, 3, 3, 2, 1)",
        "num_ids": 786,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # use heapq to sort the merged list\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n        \n    return sorted_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 1312,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # Convert the binary string to a list of integers\n    binary_list = [int(i) for i in list(s)]\n    \n    # Rotate the list n times\n    for i in range(n):\n        temp = binary_list[0]\n        for j in range(len(binary_list)-1):\n            binary_list[j] = binary_list[j+1]\n        binary_list[-1] = temp\n    \n    # Count the number of odd numbers\n    odd_count = 0\n    for num in binary_list:\n        if num % 2!= 0:\n            odd_count += 1\n    \n    return odd_count",
        "test": "assert odd_Equivalent(\"10101\", 3) == 3, \"odd_Equivalent(10101, 3) should return 3\"",
        "num_ids": 1907,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Create a dictionary to store the common elements\n    common_dict = {}\n\n    # Loop through each nested list in the input\n    for lst in nestedlist:\n        # Loop through each element in the list and add it to the dictionary if not already present\n        for elem in lst:\n            if elem in common_dict:\n                common_dict[elem] += 1\n            else:\n                common_dict[elem] = 1\n\n    # Create a list of common elements in the input lists\n    common_elements = []\n\n    # Loop through the dictionary and add common elements to the list\n    for elem, count in common_dict.items():\n        if count == len(nestedlist):\n            common_elements.append(elem)\n\n    return common_elements",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8]]) == []",
        "num_ids": 1329,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer('123') == True",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        print(\"The list is empty.\")\n        return True\n    else:\n        for i in list1:\n            if len(i)!= 0:\n                print(\"There is at least one non-empty dictionary in the list.\")\n                return False\n        print(\"All dictionaries in the list are empty.\")\n        return True",
        "test": "assert empty_dit([{'a':1, 'b':2}, {'a':1}, {'a':1, 'b':2, 'c':3}]) == False",
        "num_ids": 898,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # check if input is a tuple\n    if not isinstance(nums, tuple):\n        raise ValueError('Input must be a tuple of positive integers.')\n    # check if all elements in the tuple are positive integers\n    for num in nums:\n        if not isinstance(num, int) or num <= 0:\n            raise ValueError('All elements in the tuple must be positive integers.')\n    # convert tuple to integer\n    result = sum(nums)\n    return result",
        "test": "assert tuple_to_int((1, 2, 3)) == 6",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for item in test_list:\n        if isinstance(item, float):\n            float_list.append(item)\n        elif isinstance(item, list):\n            float_list.extend(list_to_float(item))\n        else:\n            try:\n                float_list.append(float(item))\n            except ValueError:\n                pass\n    return float_list",
        "test": "assert list_to_float([['1.2', '3.4'], ['5.6', '7.8']]) == [1.2, 3.4, 5.6, 7.8]",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 532,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None",
        "test": "assert search([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == 3",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables to store maximum absolute product and minimum absolute product\n    max_product = float('-inf')\n    min_product = float('inf')\n    \n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute difference between the two numbers in the pair\n            absolute_difference = abs(list1[i][0] - list1[j][0])\n            \n            # Calculate the absolute product of the two numbers in the pair\n            product = abs(list1[i][1] * list1[j][1])\n            \n            # Update the maximum absolute product if the new product is greater\n            if product > max_product:\n                max_product = product\n            \n            # Update the minimum absolute product if the new product is less\n            if product < min_product:\n                min_product = product\n                \n    # Return the maximum absolute product\n    return max_product",
        "test": "assert max_product_tuple([(1, 2), (-3, 4), (5, 6)]) == 24",
        "num_ids": 1448,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if i < 12: # skip numbers less than 12, as they are not amicable\n            continue\n        is_amicable = True\n        for j in range(1, i):\n            if i % j == 0:\n                is_amicable = False\n                break\n        if is_amicable:\n            amicable_sum += i\n    return amicable_sum",
        "test": "assert amicable_numbers_sum(100) == 233168, \"The sum of all amicable numbers from 1 to 100 is incorrect.\"",
        "num_ids": 1110,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle",
        "test": "assert angle_complex(1,0) == cmath.phase(1) # check if angle_complex gives the expected angle for a+0i",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_length(string):\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        diff = 0\n        j = i\n        while j < n and string[j] == '1':\n            j += 1\n            diff += 1\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "test": "assert find_length(\"0101010\") == 1",
        "num_ids": 1379,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Calculate the sum of common divisors\n    sum_common_divisors = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum_common_divisors += i\n\n    # Return the sum of common divisors\n    return sum_common_divisors",
        "test": "assert sum(12, 18) == 12, \"Error: Sum of common divisors of 12 and 18 is not equal to 12.\"",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 549,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes two parameters: n (the length of the words) and words (a list of words).\n    It returns a list of words that are longer than n characters.\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list",
        "test": "assert long_words(5, [\"hello\", \"world\", \"python\", \"programming\", \"testing\"]) == [\"python\", \"programming\", \"testing\"]",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check the dimensions of the matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Initialize a list to store the sum of the rows and columns\n    row_sums = [0] * len(my_matrix)\n    col_sums = [0] * len(my_matrix)\n    \n    # Iterate through the matrix and add up the row and column sums\n    for i in range(len(my_matrix)):\n        row_sums[i] = sum(my_matrix[i])\n        col_sums[i] = sum(my_matrix[j][i] for j in range(len(my_matrix)))\n    \n    # Check if the row and column sums add up to the same value\n    if row_sums == col_sums:\n        return True\n    \n    # Check if the sum of the diagonal elements is the same as the sum of the other elements in the matrix\n    diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if diag_sum == sum(row_sums) or diag_sum == sum(col_sums):\n        return True\n    \n    # If none of the above conditions are met, the matrix is not a magic square\n    return False",
        "test": "assert magic_square_test([[3, 8, 1], [5, 0, 7], [4, 6, 2]]) == False",
        "num_ids": 1647,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n    max_item = None\n    for num, freq_num in freq.items():\n        if freq_num == max_freq:\n            max_item = num\n\n    return max_item",
        "test": "assert max_occurrences([1, 2, 3, 2, 1, 3, 3, 4, 4, 4, 4]) == 4",
        "num_ids": 1261,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    vowel_count = 0\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            vowel_count += 1\n            if vowel_count % 2 == 0:\n                result = char + result\n            else:\n                result = result + char\n    return result",
        "test": "assert reverse_vowels(\"a\") == \"a\"",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 25,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)",
        "test": "assert tup_string(('apple', 'banana', 'cherry')) == \"('apple', 'banana', 'cherry')\"",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += num\n    return count",
        "test": "assert sum_negativenum([-1, -2, -3, -4, -5]) == -15",
        "num_ids": 744,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = sum(1 for num in zero_count if num > 0)\n    return non_zero_count/len(nums)",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0.0",
        "num_ids": 1386,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count == 1",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == False, \"is_Sum_Of_Powers_Of_Two(10) should return False\"",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference",
        "test": "assert circle_circumference(5) == 31.4159, \"circle_circumference(5) is incorrect\"",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        for item in sublist:\n            if type(item) == int:\n                flattened.append(item)\n    return set(flattened)",
        "test": "assert extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # get the length of the list\n    n = len(nums)\n\n    # loop through the list, starting from the last element\n    for i in range(n-1, 0, -1):\n        # find the largest element in the unsorted part of the list\n        max_index = i\n        for j in range(i-1, -1, -1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # swap the largest element with the i-th element\n        nums[max_index], nums[i] = nums[i], nums[max_index]\n\n    # return the sorted list\n    return nums",
        "test": "assert pancake_sort([1]) == [1]",
        "num_ids": 1475,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[4,5,6],[1,2,3]) == 0 # valid test case",
        "num_ids": 1119,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1\n    return count",
        "test": "assert find_lists(()) == 0",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 878,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n\n    # Check if the discriminant is positive or negative\n    if discriminant < 0:\n        return None\n\n    # Calculate the roots of the discriminant\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n\n    # Check if the roots are integers\n    if not root1.is_integer() or not root2.is_integer():\n        return None\n\n    # Return the solution as a tuple\n    return (int(root1), int(root2))",
        "test": "assert find_solution(4, 5, 10) is None",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # create a new list to store the elements from list1 that are not in list2\n    new_list = [elem for elem in list1 if elem not in list2]\n    return new_list",
        "test": "assert remove_elements([], [2, 4]) == []",
        "num_ids": 1114,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    sum = 0\n    while i <= n // 2:\n        sum += n - 2*i\n        i += 1\n    return sum",
        "test": "assert sum_series(0) == 0",
        "num_ids": 741,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2*pi/l*i\n        area += s*tan(angle/2)\n    return area",
        "test": "assert area_polygon(3, 0) == 0, \"area_polygon should return 0 for invalid inputs.\"",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Finding all the divisors of the input number\n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_list.append(i)\n            if i!= n//i:\n                div_list.append(n//i)\n    \n    # Checking if the sum of the divisors is the same\n    if sum(div_list) == n:\n        return True\n    else:\n        return False",
        "test": "assert div_sum(12) == False",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter from the English alphabet (a-z)\n        if char.isalpha() and ord(char) < 123:\n            # Increment the count variable by 1\n            count += 1\n\n    # Return the count\n    return count",
        "test": "assert count_char_position(\"hello\") == 5, \"The count of characters that occur at the same position in the string as in the English alphabet is incorrect.\"",
        "num_ids": 1295,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_xor = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_xor += 1\n    return even_xor",
        "test": "assert find_even_pair([2,4,6,8,10]) == 0",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize a variable to keep track of the next power of 2\n    next_power = 1\n    # Loop until the next power is greater than or equal to n\n    while next_power < n:\n        # Double the next power\n        next_power *= 2\n    # Return the next power of 2\n    return next_power",
        "test": "assert next_power_of_2(0) == 1, \"Error: next_power_of_2(0)!= 1\"",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1, 2, 3, 2, 1, 2, 3, 4, 5], 2) == 3 # should return 3 (2, 2, 2)",
        "num_ids": 691,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-m]\n    return sum",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 2) == 6",
        "num_ids": 1269,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "test": "assert perimeter_pentagon(20) == 94, \"The perimeter of a regular pentagon with sides of length 20 is not equal to 94.\"",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def count_occurance(s):\n    count = 0\n    std_index = s.find('std')\n    while std_index!= -1:\n        count += 1\n        std_index = s.find('std', std_index+1)\n    return count",
        "test": "assert count_occurance(\"banana\") == 0, \"count_occurance should return 0 for the string 'banana'\"",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the tuple is empty\n    if not test_tuple:\n        return True\n    \n    # Get the first element of the tuple\n    element = type(test_tuple[0])\n    \n    # Loop through the rest of the elements in the tuple\n    for i in range(1, len(test_tuple)):\n        # Check if the current element is of the same data type as the first element\n        if not isinstance(test_tuple[i], element):\n            return False\n    \n    # If all the elements have the same data type, return True\n    return True",
        "test": "assert check_type([(1, 2), (3.5, 4.5)]) == True",
        "num_ids": 913,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n/2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 3) == False",
        "num_ids": 1297,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 810,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # create a new string with all the even values removed\n    return ''.join([chr(ord(x)-1) if (ord(x)-1) % 2 == 0 else x for x in str])",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)",
        "test": "assert min_of_three(3,2,1) == 1",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three parameters:\n    n - An integer representing the number of bits in the range\n    l - An integer representing the starting bit position of the range\n    r - An integer representing the ending bit position of the range\n    \"\"\"\n    # Initialize a boolean variable to keep track of whether all bits are set or not\n    all_set = True\n\n    # Loop through each bit position in the range and check if it is set or not\n    for i in range(l, r + 1):\n        # Check if the i-th bit of the input number is set or not\n        if (n >> i) & 1 == 1:\n            # If the i-th bit is set, return False\n            all_set = False\n            break\n\n    # Return True if all bits are set, False otherwise\n    return all_set",
        "test": "assert all_Bits_Set_In_The_Given_Range(0, 1, 0) == True, \"all_Bits_Set_In_The_Given_Range(0, 1, 0) should return True\"",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = 0\n    while j < len(arr):\n        if arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        j += 1\n\n    return arr[:n] + arr[n:]",
        "test": "assert re_arrange_array([], 0) == []",
        "num_ids": 1792,
        "indeed": true
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "test": "assert replace_blank(\"hello world\", \" \") == \"hello world\"",
        "num_ids": 1527,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # create a min heap of size n and append the first n elements of the list\n    max_heap = []\n    heapq.heapify(max_heap)\n    heapq.heappush(max_heap, -list1[0])\n    heapq.heappush(max_heap, -list1[1])\n    heapq.heappush(max_heap, -list1[2])\n    heapq.heappush(max_heap, -list1[3])\n    # append the remaining elements of the list to the min heap\n    for i in range(4, len(list1)):\n        heapq.heappush(max_heap, -list1[i])\n    # extract the n largest elements from the min heap\n    result = []\n    while len(result) < n:\n        result.append(-heapq.heappop(max_heap))\n    return result",
        "test": "assert larg_nnum([1,2,3,4,5],1) == [5]",
        "num_ids": 1186,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi * r**2 * h\n    return area\n",
        "test": "assert lateralsuface_cylinder(1.0,1.0) == 3.141592653589793",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert volume_cube(2) == 8, \"volume of cube with side length 2 should be 8\"",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate through each bit of the number\n    for i in range(32):\n        # If the current bit is even, set it to 1\n        if n & (1 << i):\n            result |= (1 << i)\n    \n    # Return the result\n    return result",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict",
        "test": "assert check_occurences([(\"apple\", 3), (\"banana\", 2), (\"apple\", 4), (\"pear\", 1), (\"banana\", 1)]) == {\"apple\": 4, \"banana\": 3, \"pear\": 1}",
        "num_ids": 1178,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n\n    # loop through all possible substrings of the string\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            # check if the substring is not empty\n            if str[i:j]!= '':\n                count += 1\n\n    return count",
        "test": "assert number_of_substrings(\"a\") == 1",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    \n    for i in range(1, m):\n        for j in range(i+2, min(2*i, m)+1):\n            count += 1\n            \n    return count",
        "test": "assert get_total_number_of_sequences(10,8) == 630, \"The result of get_total_number_of_sequences(10,8) is incorrect.\"",
        "num_ids": 1288,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length1 = len(list1)\n    # Get the length of the second list\n    length2 = len(list2)\n    # Check if the length of the second list is greater than 0\n    if length2 > 0:\n        # Get the last index of the first list\n        last_index1 = length1 - 1\n        # Check if the last index of the first list is greater than 0\n        if last_index1 > 0:\n            # Get the last element of the first list\n            last_element1 = list1[last_index1]\n            # Get the last element of the second list\n            last_element2 = list2[-1]\n            # Check if the last element of the first list is an iterable\n            if hasattr(last_element1, '__iter__'):\n                # If it is, iterate over the elements of the second list and append them to the last element of the first list\n                for element in list2:\n                    last_element1.append(element)\n                # Replace the last element of the first list with the updated last element\n                list1[last_index1] = last_element1\n            # If the last element of the first list is not an iterable, simply replace it with the last element of the second list\n            else:\n                list1[last_index1] = last_element2\n    # If the length of the second list is 0, simply return the first list\n    else:\n        return list1",
        "test": "assert replace_list([1,2,3,4,5], []) == [1,2,3,4,5]",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"\") == 0",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the square root of the given number\n    sqrt_N = math.sqrt(N)\n    # calculate the next perfect square using integer division\n    sqrt_N = int(sqrt_N)\n    sqrt_N += 1\n    # calculate the next perfect square using binary search\n    def binary_search_next_square(start, end):\n        if start >= end:\n            return sqrt_N\n        mid = (start + end) // 2\n        if mid*mid > sqrt_N:\n            return binary_search_next_square(mid+1, end)\n        else:\n            return binary_search_next_square(start, mid-1)\n    return binary_search_next_square(1, int(sqrt_N))",
        "test": "assert next_Perfect_Square(1) == 2",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return 0\n\n    increasing = True\n    max_sum = arr[0]\n    current_sum = arr[0]\n\n    for i in range(1, len(arr)):\n        if increasing and arr[i] > arr[i - 1]:\n            current_sum += arr[i]\n        elif not increasing and arr[i] < arr[i - 1]:\n            current_sum += arr[i]\n        else:\n            increasing = not increasing\n            current_sum = arr[i]\n\n        if increasing:\n            max_sum = max(max_sum, current_sum)\n        else:\n            max_sum = max(max_sum, current_sum)\n\n    return max_sum",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1921,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.00001:\n            return new_guess\n        guess = new_guess",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a 2D table to store the lengths of LPS\n    dp = [[0]*n for _ in range(n)]\n\n    # Initialize the first row and first column\n    dp[0][0] = 1\n    # Check if the character at the current position is a palindrome\n    if s[0] == s[n-1]:\n        dp[0][n-1] = 1\n\n    # Fill the table in a bottom-up manner\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            dp[i][i] = 1\n        else:\n            dp[i][i] = 0\n        # Check for odd lengths\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[n-1][n-1]",
        "test": "assert lps(\"bb\") == 1, \"lps('bb') should return 1\"",
        "num_ids": 1557,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (1/n) + (harmonic_sum(n-1))",
        "test": "assert harmonic_sum(1) == 1.0",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "test": "assert intersection_array([1, 2, 2, 1], [2, 2]) == [2]",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for element in tup: \n        if element == x: \n            count += 1 \n    return count",
        "test": "assert count_X((1,2,3,4,5,6,7,8,9,10), 4) == 1, \"The output of count_X((1,2,3,4,5,6,7,8,9,10), 4) should be 1\"",
        "num_ids": 1096,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        else:\n            result.append(list[i])\n            result.append(element)\n    return result",
        "test": "assert insert_element([1,2,3],5) == [1,2,3,5]",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # convert complex numbers to complex numbers\n    complex_numbers = [complex(num) for num in numbers]\n\n    # calculate magnitude and angle of each complex number\n    magnitudes = [cmath.abs(num) for num in complex_numbers]\n    angles = [cmath.phase(num) for num in complex_numbers]\n\n    # combine magnitude and angle into a dictionary\n    result = {\n       'magnitude': magnitudes,\n        'angle': angles\n    }\n\n    return result",
        "test": "assert convert([-1, -2]) == (-3.141592653589793, 2.0)",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count",
        "test": "assert count_integer([]) == 0, \"count_integer([]) should return 0\"",
        "num_ids": 852,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Use combinations_with_replacement to generate all combinations with repetition of elements in the list\n    combinations = list(combinations_with_replacement(l, n))\n    \n    # Convert each combination to a tuple and return the list\n    return [(tuple(combination)) for combination in combinations]",
        "test": "assert combinations_colors(['apple', 'banana', 'cherry'], 2) == [('apple', 'banana'), ('apple', 'cherry'), ('banana', 'cherry')]",
        "num_ids": 1158,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def is_prime(n):\n    \"\"\"\n    A function to check whether a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4 # count_Primes_nums should return 4 for n=10",
        "num_ids": 1037,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = test_tup1\n    if test_tup2 > test_tup1:\n        max_tup = test_tup2\n    return max_tup",
        "test": "assert maximize_elements((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)",
        "num_ids": 1481,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    num = 2\n    \n    # Iterate until nth newman-shanks-williams prime is found\n    while count < n:\n        # Check if num is a newman-shanks-williams prime\n        if is_newman_shanks_williams_prime(num):\n            count += 1\n            \n        # Increment num\n        num += 1\n    \n    # Return the nth newman-shanks-williams prime\n    return num - 1\n\ndef is_newman_shanks_williams_prime(num):\n    \"\"\"\n    Check if a number is a newman-shanks-williams prime.\n    \"\"\"\n    # If num is less than 3, it is not a newman-shanks-williams prime\n    if num < 3:\n        return False\n    \n    # Initialize variables\n    divisor = 2\n    is_prime = True\n    \n    # Check divisors up to the square root of num\n    while divisor * divisor <= num:\n        # If divisor divides num, it is not a newman-shanks-williams prime\n        if num % divisor == 0:\n            is_prime = False\n            break\n        \n        # Increment divisor\n        divisor += 1\n    \n    # Return True if num is a newman-shanks-williams prime, False otherwise\n    return is_prime",
        "test": "assert newman_prime(1) == 3",
        "num_ids": 1431,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the lengths of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length!\")\n    # create a new tuple with the length of the first tuple\n    result = tuple([i / j for i, j in zip(test_tup1, test_tup2)])\n    return result",
        "test": "assert division_elements((1, 2, 3), (1, 2, 3)) == (1.0, 1.0, 1.0)",
        "num_ids": 1120,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return list1, []\n    else:\n        return list1[:L], list1[L:]",
        "test": "assert split_two_parts([1,2,3,4,5,6,7,8], 3) == ([1,2,3], [4,5,6,7,8])",
        "num_ids": 1232,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years",
        "test": "assert dog_age(5) == 3, \"The age of a dog that is 5 hours old is incorrect.\"",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "test": "assert square_Sum(1) == 1, \"square_Sum(1) should return 1, but it returns {}\".format(square_Sum(1))",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the counter and the result\n    count = 0\n    result = 0\n    # loop n times\n    for i in range(1, n+1):\n        # add the i-th number to the result\n        result += i\n        # increment the counter\n        count += 1\n    # return the result\n    return result",
        "test": "assert find_star_num(1) == 1, \"Expected: 1, Got: {}\".format(find_star_num(1))",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value(\"A\") == 65",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_sum += arr[i]\n    return even_sum",
        "test": "assert sum_even_and_even_index([1,3,5,7,9]) == 0, \"The sum of even numbers at even positions should be 0\"",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_powers = 0\n    for i in range(2, n+1, 2):\n        sum_even_powers += i ** 5\n    return sum_even_powers",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # create a new tuple with the elements of the first tuple\n    result_tup = test_tup1\n    # iterate over the second tuple\n    for i in range(len(test_tup2)):\n        # if the two tuples have the same index, subtract the elements\n        if i < len(result_tup):\n            result_tup[i] -= test_tup2[i]\n        # if the second tuple is shorter than the first tuple, we need to pad the result with zeros to match the length of the first tuple\n        elif i == len(result_tup):\n            result_tup += (0,) * (len(test_tup1) - len(result_tup))\n    return result_tup",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (3, 3, 3), \"The output of substract_elements((1, 2, 3), (4, 5, 6)) should be (3, 3, 3).\"",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def even_binomial_Coeff_Sum(n): \n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_index_binomial_coefficients = 0 \n    for i in range(1, n+1): \n        if i % 2 == 0: \n            sum_even_index_binomial_coefficients += math.comb(n, i) \n\n    return sum_even_index_binomial_coefficients ",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159*r**2*h\n    return volume",
        "test": "assert volume_cylinder(0,1) == 0.0",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict",
        "test": "assert dict_filter({'a':1,'b':2,'c':3,'d':4,'e':5},2)=={'b':2,'c':3,'d':4,'e':5}",
        "num_ids": 893,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    i = 0\n    while i < len(test_tup):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n        i += 1\n    return count",
        "test": "assert count_first_elements((1, 2, 3, 4, 5)) == 0, \"count_first_elements failed for empty tuple\"",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function will take an integer n and return True if it is a decagonal number or False otherwise.\n    A decagonal number is a positive integer that is equal to the sum of the cubes of its digits.\n    For example: \n    155 is a decagonal number because 1^3 + 5^3 = 155.\n    1634 is not a decagonal number because 1^3 + 6^3 + 3^3 + 4^3 = 264, which is not equal to 1634.\n    '''\n\n    # Function to convert a number to a list of digits\n    def num_to_digits(num):\n        return [int(digit) for digit in str(num)]\n\n    # Function to calculate the cube of each digit in a number\n    def digit_cubes(num):\n        return [digit**3 for digit in num]\n\n    # Calculate the sum of the cubes of each digit in the input number\n    digits = num_to_digits(n)\n    digit_sums = sum(digit_cubes(digits))\n\n    # Check if the sum of the cubes of the digits is equal to the input number\n    if digit_sums == n:\n        return True\n    else:\n        return False",
        "test": "assert is_num_decagonal(1) == 1, \"is_num_decagonal(1) should return 1\"",
        "num_ids": 1657,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and an element and returns a tuple containing a boolean indicating if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True",
        "test": "assert all_unique([1, 2, 3]) == True",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i] - nums2[i])\n    return sub_list",
        "test": "assert sub_list([1,2,3],[1,2,3]) == [0,0,0]",
        "num_ids": 858,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Get the frequency of each digit in the integer\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, freq in digit_freq.items():\n        if freq > 1 and freq > digit:\n            return False\n\n    return True",
        "test": "assert validate(12345) == True, \"Should return True\"",
        "num_ids": 1059,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Check whether all elements in a list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False",
        "test": "assert check_element([1,2,3,4,5],2) == False, \"Second test failed\"",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three(\"ababa\") == False",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    sum_arr = [0] * k\n    for i in range(n):\n        for j in range(k):\n            sum_arr[j] += a[i]\n            if j == k - 1:\n                max_sum = max(max_sum, sum_arr[j])\n                sum_arr[j] = 0\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 1) == 5",
        "num_ids": 1721,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize variables to store the maximum length and the list of maximum length\n    max_len = 0\n    max_list = []\n    \n    # Loop through each list in the input list\n    for sublist in list1:\n        # Find the length of each sublist and compare it to the maximum length found so far\n        cur_len = len(sublist)\n        if cur_len > max_len:\n            # Update the maximum length and list of maximum length if a larger sublist is found\n            max_len = cur_len\n            max_list = sublist\n    \n    # Return the list of maximum length\n    return max_list",
        "test": "assert max_length([]) == []",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def count_no_of_ways(n, k):\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, k + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    ways = dp[k]\n    return ways\n",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 1234,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # Calculate the quotient\n    quotient = n // m\n\n    # Return the quotient rounded down to the nearest integer\n    return quotient",
        "test": "assert find(6,4) == 1",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the shorter side\n    length_shorter_side = math.sqrt(w**2 + h**2)\n    # Calculate the length of the longer side\n    length_longer_side = w\n    # Calculate the length of the angle\n    angle_length = math.sqrt(w**2 + h**2 - length_shorter_side**2)\n    # Calculate the third side\n    third_side = length_shorter_side + length_longer_side + angle_length\n    return third_side",
        "test": "assert otherside_rightangle(3,4)==5, \"The function should return 5, but it returned {}\".format(otherside_rightangle(3,4))",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes a list as input and returns the maximum value in the list.\n    \"\"\"\n    if not lst:\n        return None\n    else:\n        return max(lst, key=lst.index)",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum",
        "test": "assert sum_div(36) == 36, \"Incorrect sum of divisors of 36\"",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in increasing order\n    for i in range(n):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += i - j\n\n    return inv_count",
        "test": "assert get_Inv_Count([1, 1, 1, 1, 1]) == 0",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "test": "assert flatten_list([[1, 2, 3], 4, [5, [6, 7]], 8]) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 935,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    max_count = 0\n    for i, (item, count) in enumerate(stdata):\n        max_agg[item] += count\n        max_count = max(max_count, count)\n    return max(max_agg.items(), key=lambda x: (-x[1], -x[0]))[0] * max_count",
        "test": "assert max_aggregate([(1, 10), (2, 20), (3, 30), (4, 40), (5, 50)]) == 50",
        "num_ids": 1622,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n\n    # initialize count variable\n    count = 0\n\n    # loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n\n        # check if sum of first n bits and sum of last n bits is same\n        if (sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(i)[2:].zfill(n))):\n            count += 1\n\n    return count",
        "test": "assert count_binary_seq(8) == 256, \"Test failed for n = 8\"",
        "num_ids": 1270,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = 1 + dict_depth(v)\n        else:\n            depth = 1\n        max_depth = max(max_depth, depth)\n    return max_depth",
        "test": "assert dict_depth({'a': 1, 'b': {'c': 2}}) == 2",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, a number of rotations, and an index\n    as input and returns the element at the given index after the number of rotations.\n    \"\"\"\n    result = arr[index % len(arr)]\n    for i in range(rotations):\n        for range_start, range_end in ranges:\n            start = (index + i) % len(arr)\n            end = (start + range_start) % len(arr)\n            while start < end:\n                arr[start], arr[end] = arr[end], arr[start]\n                start += 1\n                end -= 1\n    return result",
        "test": "assert find_Element([1,2,3,4,5],[(1,4),(3,5)],1,4) == 5",
        "num_ids": 2220,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define a pattern to match words starting with letter 'p'\n    pattern = r'^p'\n\n    # Define a list to store the matching words\n    matching_words = []\n\n    # Loop through the list of words\n    for word in words:\n        # Check if the word starts with the pattern\n        if re.match(pattern, word):\n            # If it does, append it to the list of matching words\n            matching_words.append(word)\n\n    # If there are no matching words, return None\n    if not matching_words:\n        return None\n\n    # If there are matching words, return the first two matching words in a tuple\n    else:\n        return tuple(matching_words[:2])",
        "test": "assert start_withp(['apple', 'banana', 'pear', 'pineapple', 'popcorn'])!= ['banana', 'pineapple']",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = a[0]\n\n    for i in range(2, n + 1):\n        if i > k:\n            dp[i] = max(dp[i - 1], dp[i - 2]) + a[i - 1]\n        else:\n            dp[i] = dp[i - 1] + a[i - 1]\n\n    return dp[index]",
        "test": "assert max_sum_increasing_subseq([1, 3, 5, 7], 4, 0, 0) == 0",
        "num_ids": 1723,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(len(tuplex)):\n        for j in range(m):\n            colon.append(tuplex[i][j])\n    return colon",
        "test": "assert colon_tuplex((1,2,3),2,3)==(1,2),(3,)",
        "num_ids": 1068,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return \"Invalid input: N must be less than or equal to the length of the longer list.\"\n    \n    # sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # find the largest N products from each list\n    largest_products = []\n    for i in range(N):\n        largest_products.append(nums1[i] * nums2[i])\n    \n    # return the largest products\n    return largest_products",
        "test": "assert large_product([1, 2, 3, 4, 5], [10, 10, 10, 10, 10], 5) == [2400, 1200, 800, 600, 500]",
        "num_ids": 1857,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(3,5) == 5",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('') == ()",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    set_bit = 1\n    while n & set_bit == 0:\n        set_bit <<= 1\n    return n | set_bit",
        "test": "assert set_left_most_unset_bit(2) == 2",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * h\n    return v",
        "test": "assert volume_cone(0,2) == 0, \"The volume of a cone with radius 0 and height 2 should be 0.\"",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    if n == 0:\n        return 1\n\n    max_power = 0\n\n    for i in range(1, n):\n        if 2**i <= n:\n            max_power = i\n\n    return 2**max_power",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(2) == 3, \"find_lucas(2) should return 3\"",
        "num_ids": 904,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result",
        "test": "assert add_string([1, 2, 3], \"{:.2f}\") == ['1.00', '2.00', '3.00']",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = []\n    for i in range(len(l1)):\n        d = {\n            'key1': l1[i],\n            'key2': l2[i],\n            'key3': l3[i]\n        }\n        result.append(d)\n    return result",
        "test": "assert convert_list_dictionary([[1, 2, 3], [4, 5, 6]], ['a', 'b', 'c'], [True, False, True]) == {'1': {'2': {'3': {'a': True, 'b': False, 'c': True}}}, '4': {'5': {'6': {'a': True, 'b': False, 'c': True}}}}}",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 3\n    \n    if n == 3:\n        return 10\n    \n    if n == 4:\n        return 45\n    \n    if n == 5:\n        return 120\n    \n    if n % 2 == 0:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n\n    \n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for num in input_list:\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n            max_list = [num]\n        elif len(str(num)) == max_length:\n            max_list.append(num)\n    return max_list",
        "test": "assert max_length_list([1]) == [1]",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for element in test_tup:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True",
        "test": "assert check_distinct((1, 2, 3)) == True, \"Test case 1 failed\"",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the character and its index\n    char_index = {}\n    for i, char in enumerate(str1):\n        if char in char_index:\n            # If the character is already in the dictionary, move the index to the next index\n            char_index[char] = i + 1\n        else:\n            # If the character is not in the dictionary, add it and its index to the dictionary\n            char_index[char] = i\n    \n    # Find the first non-repeating character and its index\n    first_non_repeating = None\n    for char, index in char_index.items():\n        if first_non_repeating is None or index < char_index[first_non_repeating]:\n            first_non_repeating = char\n    \n    return first_non_repeating",
        "test": "assert first_non_repeating_character('a') == 'a'",
        "num_ids": 962,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char('b') == True",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        # If the number of elements is even, take the average of the middle two\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        # If the number of elements is odd, take the middle element\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median",
        "test": "assert median_numbers(2, 1, 3) == 2, \"median_numbers(2, 1, 3) should return 2\"",
        "num_ids": 1185,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    digits_sum = 0\n    for num in nums:\n        # convert the number to a string and split it into digits\n        digits = [int(digit) for digit in str(num)]\n        # add up the digits and add it to the total sum\n        digits_sum += sum(digits)\n    return digits_sum",
        "test": "assert sum_of_digits([0, 0, 0, 0]) == 0",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the same length as the input tuples\n    result_tup = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    \n    # Return the result tuple\n    return result_tup",
        "test": "assert bitwise_xor((1, 2), (3, 4)) == (2, 6)",
        "num_ids": 1360,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # convert the list to a set to get only unique tuples\n    unique_tuples = set(test_list)\n    # count the number of unique tuples and return it\n    return len(unique_tuples)",
        "test": "assert extract_freq([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]) == 5",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    # Perform index wise addition of tuple elements in the given two nested tuples\n    result_tup = tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n    return result_tup",
        "test": "assert add_nested_tuples((1,2,3),(4,5,6)) == (5,7,9)",
        "num_ids": 1052,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(3,4) == 3",
        "num_ids": 469,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False",
        "test": "assert check_tuplex((1,2,3),(4,5,6)) == False",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # initialize the parity variable to True\n    parity = True\n\n    # loop through all the digits in the number\n    for digit in str(x):\n        # if the digit is odd, set the parity to False and break the loop\n        if int(digit) % 2!= 0:\n            parity = False\n            break\n\n    # return the parity\n    return parity",
        "test": "assert find_Parity(1) == False",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = str(n)\n    n_digits = len(digits)\n    digits = list(digits)\n    for i in range(n_digits-1):\n        for j in range(i+1, n_digits):\n            if int(digits[i]) < int(digits[j]):\n                digits[i], digits[j] = digits[j], digits[i]\n                break\n        if i < n_digits-2:\n            for k in range(i+2, n_digits):\n                if int(digits[k]) < int(digits[j]):\n                    digits[k], digits[j] = digits[j], digits[k]\n                    break\n    return int(''.join(str(d) for d in digits))",
        "test": "assert rearrange_bigger(111) == 111",
        "num_ids": 1620,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Create a min heap to store the pairs\n    min_heap = []\n\n    # Iterate through each element from the first array\n    for num1 in nums1:\n\n        # Create a list to store the pairs which consist of this element and another element from the second array\n        pairs = []\n\n        # Iterate through each element from the second array\n        for num2 in nums2:\n\n            # Calculate the pair's value and add it to the list of pairs\n            pairs.append((num1 + num2, (num1, num2)))\n\n        # Sort the pairs in ascending order based on the value\n        pairs.sort()\n\n        # Add the pairs to the min heap\n        heapq.heapify(pairs)\n        min_heap.extend(pairs)\n\n        # If the min heap has more than k elements, remove the last element\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Return the list of pairs with the k smallest values\n    return [pair[1] for pair in min_heap]",
        "test": "assert k_smallest_pairs([1,7,11], [2,4,6], 3) == [[1,2],[1,4],[1,6],[7,2],[7,4],[7,6]]",
        "num_ids": 2464,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    product = 1\n    count = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Update the product\n        product *= list1[i][1]\n\n        # Increment the count\n        count += 1\n\n        # Check if the product is less than the minimum\n        if product < min_product:\n            min_product = product\n\n    # Return the minimum product\n    return min_product",
        "test": "assert min_product_tuple([(1,2),(2,3),(3,4),(4,5),(5,6)]) == 48",
        "num_ids": 1400,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), word[1:].lower()])",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld','snake_to_camel failed'",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "test": "assert remove_odd([]) == []",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]",
        "test": "assert extract_nth_element([(1, 2, 3), (4, 5, 6)], 2) == (4, 5, 6)",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3], [3,4,5]) == True, \"Error: The function should return True if any value in list1 exists in list2 or vice versa\"",
        "num_ids": 970,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a tuple of integers, where the first element is the product of two elements in the array with the highest product and the second element is the product of two elements in the array with the second highest product.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return (max1 * max2, max1 * min1)",
        "test": "assert max_Product([5, 3, 1, 4, 2]) == (3, 10)",
        "num_ids": 1291,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif tup[0] == common_element:\n            common_element = None\n            break\n    return common_element",
        "test": "assert group_tuples([(1, 2), (2, 2), (3, 3), (4, 4)]) == 1",
        "num_ids": 947,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    # Initialize a variable to store the maximum length\n    max_len = 0\n    \n    # Iterate through each element of the list\n    for i in lst:\n        # Increment the maximum length by 1 for each new element\n        max_len += 1\n        \n        # Check if the current element has a greater length than the maximum length\n        if len(str(i)) > max_len:\n            # Update the maximum length with the length of the current element\n            max_len = len(str(i))\n            \n    # Return the element of the list with the maximum length\n    return lst[lst.index(max(lst))]",
        "test": "assert Find_Max([1]) == 1, \"Find_Max([1]) should return 1.\"",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def round_and_sum(lst):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in lst:\n        total += round(i)\n    print(total * len(lst))",
        "test": "assert round_and_sum([1.1, 2.2, 3.3, 4.4, 5.5]) == 435 and round_and_sum([1, 2, 3, 4, 5]) == 15 and round_and_sum([1.5, 2.5, 3.5, 4.5]) == 435",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**3\n    return sum",
        "test": "assert cube_Sum(1) == 1, \"cube_Sum(1) should be 1\"",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    return delimiter.join(str(elem) for elem in test_tup)",
        "test": "assert concatenate_tuple(()) == ''",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize sum and count to 0\n    sum = 0\n    count = 0\n\n    # iterate from 1 to n\n    for i in range(1, n+1):\n\n        # calculate cube of i\n        cube = i**3\n\n        # add cube to sum\n        sum += cube\n\n        # increment count\n        count += 1\n\n    # calculate average of cubes\n    average = sum / count\n\n    # print average of cubes\n    print(\"Average of cubes of first\", n, \"natural numbers is\", average)",
        "test": "assert find_Average_Of_Cube(30) == 300.0",
        "num_ids": 1202,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_tuple = []\n    for string in test_tuple:\n        rear_index = len(string) - 1\n        rear_index_tuple.append(string[rear_index])\n    return rear_index_tuple",
        "test": "assert extract_rear((\"grape\", \"orange\", \"pear\")) == \"pear\"",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 425,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 0) == 0",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # filter odd numbers\n    odd_nums = [num for num in nums if num % 2!= 0]\n    return odd_nums",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]",
        "num_ids": 958,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = day + '-' + month + '-' + year\n        return new_dt\n    else:\n        return 'Invalid date format'",
        "test": "assert change_date_format('2022-02-20') == '20-02-2022'",
        "num_ids": 1284,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n    return my_list",
        "test": "assert shell_sort([10, 5, 2, 8, 3]) == [2, 3, 5, 8, 10]",
        "num_ids": 1590,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)",
        "test": "assert and_tuples((1, 2, 3), (4, 5, 6)) == ((1, 4), (2, 5), (3, 6))",
        "num_ids": 1031,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"The parabola is not real\")\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is:\", x1)\n        print(\"The directrix of the parabola is:\", x2)",
        "test": "assert parabola_directrix(1, 1, 1) == 1.0",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns true if they have at least one common element.\n    '''\n    # converting both lists into sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # finding the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # if there's at least one common element, return true\n    if len(intersection) > 0:\n        return True\n    else:\n        return False",
        "test": "assert common_element([], []) == False",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the trapezium using Heron's formula\n    s = (base1 + base2 + height) / 2\n    area = (s * (s - base1) * (s - base2) * (s - height)) ** 0.5\n\n    # Calculate the area of the trapezium using the formula for the area of a rectangle\n    area_rectangle = base1 * height\n    area_trapezium = area_rectangle + area_rectangle\n\n    # Calculate the median using the formula for the area of a trapezium\n    median = area_trapezium / 2\n\n    return median",
        "test": "assert median_trapezium(1,3,2) == 2.0",
        "num_ids": 1823,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False",
        "test": "assert check_greater([3, 5, 1, 7, 9], 6) == True",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b') # the pattern to match\n    match = pattern.search(text) # search for the pattern in the text\n    if match:\n        return match.group() # return the matched string if it exists\n    else:\n        return None # return None if the pattern is not found",
        "test": "assert text_match_one(\"aabab\") == \"aabab\"",
        "num_ids": 608,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([-1,-2,-3,-4,-5]) == [-1,-2,-3,-4,-5]",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalnum()])",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_pairs += 1\n    return bidirectional_pairs",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "test": "assert multiple_to_single([10, 20, 30, 40, 50]) == 150",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    This function takes a given sentence as input, and returns a list of tuples containing the adverb and its position in the sentence.\n    \"\"\"\n    # Define a list of adverbs to look for\n    adverbs = [\"amazing\", \"amazed\", \"amazes\", \"amazingly\", \"amazedly\", \"amazes\", \"awesomeness\", \"awfulness\", \"awful\", \"awfully\", \"awful\", \"awfully\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful\", \"awful",
        "test": "assert find_adverb_position(\"The orange juice was a lot of sugar.\") == [(2, 16)]",
        "num_ids": 2322,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l # cube of size l has a surface area of 6l\u00b2\n    \n    return surface_area",
        "test": "assert surfacearea_cube(1) == 6, \"Test case 1: Cube of side length 1 should have a surface area of 6 square units.\"",
        "num_ids": 1064,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0])\n    for num in nums:\n        if num > 0:\n            count[0] += 1\n    return count[0] / len(nums)",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0",
        "num_ids": 1073,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')  # initialize largest to negative infinity\n    for i in list1: \n        if i < 0 and i > largest:  # check if number is negative and larger than current largest\n            largest = i  # update largest\n    return largest  # return largest negative number\n",
        "test": "assert largest_neg([-1, -2, 3, -4, -5]) == -1",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        temp = []\n        for j in range(K):\n            temp.append(test_list[i][j])\n        result.append(tuple(temp))\n    return result\n",
        "test": "assert trim_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)], 3) == [(1, 2, 3), (6, 7, 8)]",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n    test_tup1 (tuple): First tuple of elements to multiply.\n    test_tup2 (tuple): Second tuple of elements to multiply.\n\n    Returns:\n    (tuple): Tuple containing the multiplication of each element in the two input tuples.\n\n    Raises:\n    TypeError: If the input tuple is not of type tuple.\n    \"\"\"\n\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"Input tuple must be a tuple!\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    return result_tup",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst) \n    result = {} \n    for elem in tup: \n        if elem in c: \n            if elem in result: \n                result[elem] += 1 \n            else: \n                result[elem] = 1 \n    return result ",
        "test": "assert count_Occurrence((1, 2, 3), [1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1}",
        "num_ids": 1103,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 1068,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_of_perrin = 0\n    perrin = 1\n    while perrin <= n:\n        sum_of_perrin += perrin\n        perrin += 1\n    return sum_of_perrin",
        "test": "assert cal_sum(3) == 6",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n        else:\n            break\n    return result\n",
        "test": "assert extract_string(['abc', 'def', 'ghi', 'jkl','mno'], 5) == ['mno']",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expression to remove all whitespaces\n    text = re.sub(r'\\s+', '', text)\n    return text",
        "test": "assert remove_whitespaces(\"   Hello world  \") == \"Helloworld\"",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return (actual_cost - sale_amount)\n    else:\n        return 0",
        "test": "assert loss_amount(100, 100) == 0, \"Should be 0\"",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n        i += 1\n    return sum\n",
        "test": "assert sumofFactors(3) == 0",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a text string as input and returns True if the text contains a word containing 'z',\n    and False otherwise.\n    '''\n\n    # Define the regular expression pattern to match 'z' in words\n    pattern = r'\\b[a-zA-Z]+z\\b'\n\n    # Use re.search() to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # Return True if the pattern is found, and False otherwise\n    return bool(match)",
        "test": "assert text_match_wordz('This is not a test') == False, 'Error in text_match_wordz function'",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1, 13):\n        if monthnum2 in [4, 6, 9, 11]:\n            if monthnum2 % 2 == 0:\n                return True\n            else:\n                return False\n        elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n            if monthnum2 % 2 == 0:\n                return False\n            else:\n                return True\n        else:\n            return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(3) == True",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist",
        "test": "assert reverse_string_list([\"hello\", \"world\"]) == [\"olleh\", \"dlrow\"]",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n\n    Args:\n        lst (list): a list of sublists\n\n    Returns:\n        list: the sublist with minimum length\n    \"\"\"\n\n    min_length = float('inf')  # initialize the minimum length as positive infinity\n    min_sublist = None  # initialize the minimum sublist to None\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist",
        "test": "assert Find_Min([]) == None",
        "num_ids": 952,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area",
        "test": "assert rectangle_area(2,3) == 6, 'Rectangle area incorrect'",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'(?i)[A-Z].*?[A-Z]')\n    # Use the search() method to find all substrings that match the pattern\n    matches = pattern.findall(str1)\n    # Loop over the matches and remove them from the string\n    for match in matches:\n        str1 = re.sub(r'\\b' + match + r'\\b', '', str1)\n    return str1",
        "test": "assert remove_uppercase('hello world') == 'hello world'",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]",
        "test": "assert Extract([]) == []",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr('Hello, World!') == 2, 'upper_ctr(\"Hello, World!\") should return 2, but it returns {}'.format(upper_ctr('Hello, World!'))",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    This function takes a list as input and returns a list containing all possible combinations of the elements of the input list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result",
        "test": "assert combinations_list([]) == []",
        "num_ids": 832,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for num in arr:\n        if num < 0:\n            min_ending_here = 1\n            max_ending_here = 1\n        else:\n            max_ending_here = max(max_ending_here * num, num)\n            min_ending_here = min(min_ending_here * num, num)\n            \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far",
        "test": "assert max_subarray_product([1]) == 1",
        "num_ids": 1280,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert check_value({\"apple\": 2, \"banana\": 3, \"cherry\": 5}, 3) == False, \"check_value should return False\"",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': '', 'g': 7, 'h': 8, 'i': 9}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'g': 7, 'h': 8, 'i': 9}",
        "num_ids": 1129,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 1:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "test": "assert max_product([1, 2]) == 2",
        "num_ids": 1271,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup) - 1):\n        result += test_tup[i] + test_tup[i+1]\n    return result",
        "test": "assert add_pairwise(()) == 0",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array of integers and an integer n as input and returns the remainder of the product of the array modulo n.\n\n    Args:\n        arr (list): A list of integers.\n        n (int): An integer.\n\n    Returns:\n        int: The remainder of the product of the array modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product",
        "test": "assert find_remainder([1,2,3], 10) == 6",
        "num_ids": 864,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i+1] - l[i]!= 1: \n            return False\n    return True",
        "test": "assert check_Consecutive([1, 3, 5, 7]) == False, \"Expected False\"",
        "num_ids": 872,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                intersection.append(tup1)\n                break\n    return intersection",
        "test": "assert tuple_intersection([], []) == []",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Check if the character to be replaced exists in the string\n    if ch not in str1:\n        return \"Character to be replaced does not exist in the string.\"\n    else:\n        # Replace the character with the new character\n        str1 = str1.replace(ch, newch)\n        return str1",
        "test": "assert replace_char(\"hello\", \"o\", \"o\") == \"hello\"",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 475,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # Sort the Counter object by value in descending order\n    sorted_counter = counter.most_common()\n    # Convert the sorted Counter object to a list of tuples\n    sorted_list = sorted(sorted_counter, key=lambda x: x[1], reverse=True)\n    # Return the list of tuples\n    return sorted_list",
        "test": "assert sort_counter({'a': 5, 'b': 3, 'c': 1}) == [('a', 5), ('b', 3), ('c', 1)]",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n\n    # Find the sum of the largest and smallest values\n    largest = nums[0]\n    smallest = nums[-1]\n    total_sum = largest + smallest\n\n    return total_sum",
        "test": "assert big_sum([1000000000, -1000000000]) == 0",
        "num_ids": 935,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"Hello\") == \"hello\"",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Compile a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n    # Use the search() method to find all matches in the string and store them in a list\n    matches = re.findall(pattern, str1)\n    # Loop through the list of matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1",
        "test": "assert remove_lowercase(\"Python is awesome\") == \"Pthon is amaz\"",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the given number to a string\n    num = str(n)\n    # Get the first character of the string\n    first_char = num[0]\n    # Convert the first character to an integer\n    digit = int(first_char)\n    # Return the digit\n    return digit",
        "test": "assert first_Digit(0) == 0",
        "num_ids": 663,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for num in list:\n        if num % 2 == 1:\n            result.append(num)\n    return result",
        "test": "assert Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]",
        "num_ids": 875,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    return sum_cubes - sum_natural",
        "test": "assert difference(5) == 418",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = sum([x^y for x in A for y in A])\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1 and xor_value in A[i:j]:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([2,4,6,8,10],5)==0",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string",
        "test": "assert toggle_string(\"1234567890\") == \"1234567890\"",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    difference = n1 ^ n2\n    count = 0\n    while difference:\n        count += 1\n        difference &= (difference - 1)\n    return count",
        "test": "assert digit_distance_nums(1, 1) == 0",
        "num_ids": 1368,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    \n    if size == 1:\n        return a[0]\n    \n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
        "test": "assert max_sub_array_sum([1], 1) == 1",
        "num_ids": 1197,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Convert the given tuples to sets so that we can find the union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the union of the two sets and convert it back to a list\n    union_list = sorted(list(set1.union(set2)))\n    \n    # Return the union list\n    return union_list",
        "test": "assert union_elements((1, 2, 3), (3, 4, 5)) == [1, 2, 3, 4, 5]",
        "num_ids": 1079,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:  # base case\n        return 0\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 903,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values('This is a string without any quotes.') == []",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10",
        "num_ids": 962,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = []\n    for char in word:\n        result.append(char)\n    return result",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Input must be non-negative integer.\"\n    else:\n        # Convert integer to string and then sum the digits\n        return sum(int(digit) for digit in str(n))",
        "test": "assert sum_digits(0) == 0, \"The sum of digits of 0 is 0\"",
        "num_ids": 760,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3]) == True, \"Incorrect sortedness of [1, 2, 3]\"",
        "num_ids": 1151,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "test": "assert sort_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1080,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "test": "assert two_unique_nums([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # remove duplicates from the list\n    unique_list = list(set(list_data))\n\n    # calculate the product of the unique numbers\n    unique_product = 1\n    for num in unique_list:\n        unique_product *= num\n\n    return unique_product",
        "test": "assert unique_product([1, 2, 3, 3, 4, 4, 4]) == 24",
        "num_ids": 1120,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    surface_area = 2 * pi * r * h\n    return surface_area",
        "test": "assert surfacearea_cylinder(1,5) == 31.4159 or surfacearea_cylinder(1,5) == 31.415874775914105, \"The surface area of a cylinder with a diameter of 1 and height of 5 should be 31.4159 or 31.415874775914105, respectively.\"",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input.\n    The function returns True if A is a sublist of B and False otherwise.\n    \"\"\"\n    if not B: # if B is empty\n        return True\n    elif B[0] in A: # if the first element of B is present in A\n        return is_Sub_Array(A, B[1:]) # recursive call with A and B[1:]\n    else:\n        return False # if the first element of B is not present in A",
        "test": "assert is_Sub_Array([1,2,3,4,5,6], [7,8,9]) == False",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n //= 10\n    last_digit = factorial % 10\n    return last_digit",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 1890,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(max(len(list1), len(list2), len(list3))):\n        if i < len(list1):\n            result.append(list1[i])\n        if i < len(list2):\n            result.append(list2[i])\n        if i < len(list3):\n            result.append(list3[i])\n    return result",
        "test": "assert interleave_lists([], [], []) == []",
        "num_ids": 1458,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 4)) == [3]",
        "num_ids": 882,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple: \n        if isinstance(item, tuple): \n            result.append(even_ele(item, even_fnc)) \n        else: \n            if even_fnc(item): \n                result.append(item) \n    return result",
        "test": "assert even_ele((1, 2, (3, 4), 5, (6, 7, 8, 9)), lambda x: x % 2 == 1) == (1, 3, 5, (7, 9))",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Finding the total area of the pyramid\n    total_area = b * s + b * s + b * s\n    # Calculating the surface area using Heron's formula\n    surface_area = (b * s**2) / 2\n    # Returning the surface area\n    return surface_area",
        "test": "assert surface_Area(4, 5) == 50, \"The function should return the surface area of a square pyramid with base edge 4 and height 5.\"",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Return the nth Catalan number, which is given by:\n\n    C(n, r) = (2n)!/(n!(r!(n-r)!)^2)\n\n    where r = 0, 1,..., n.\n\n    This function uses the recursion relation to compute C(n, r), where n is an integer and r is an integer in the range 0 to n.\n\n    Examples:\n    >>> catalan_number(5)\n    120\n    >>> catalan_number(0)\n    1\n    >>> catalan_number(10)\n    35568742809600\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return int((2*n)*factorial(n)/(factorial(n-r) * factorial(r)))\n\ndef factorial(n):\n    \"\"\"\n    Compute the factorial of n using the formula:\n\n    n! = n * (n-1) * (n-2) *... * 2 * 1\n\n    This function uses the recursion relation to compute n!.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1065,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Use regular expression to find all words with a \"ly\" at the end\n    words = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n    # Initialize an empty list to store the positions of the \"ly\" words\n    ly_positions = []\n    # Loop through the words and find their positions in the original string\n    for i, word in enumerate(words):\n        if word.startswith(word[:-2]):\n            # If the word starts with the last character of the previous word,\n            # it means the \"ly\" is at the beginning of the word, so add its position to the list\n            ly_positions.append(i-1)\n    return ly_positions",
        "test": "assert find_adverbs(\"The quick brown fox jumped over the lazy dogs\") == []",
        "num_ids": 1178,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        items (list): a list of items to consider\n        n (int): the number of items to return\n\n    Returns:\n        A list of the n most expensive items in the dataset.\n    \"\"\"\n    # Create a min heap of the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n most expensive items in the dataset\n    return heapq.nsmallest(n, heap)",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 1265,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid index\"\n    else:\n        return l[:n] + l[n:]",
        "test": "assert split_Arr([1,2,3,4,5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 564,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val",
        "test": "assert big_diff([10, 20, 30, 40, 50]) == 40, \"The function should return 40 as the difference between the largest and smallest value in the list [10, 20, 30, 40, 50]\"",
        "num_ids": 968,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize an empty list to store the perfect squares\n    perfect_squares = []\n\n    # Loop through each number between a and b\n    for i in range(a, b+1):\n\n        # Check if the current number is a perfect square\n        square_root = int(i ** 0.5)\n        if square_root ** 2 == i:\n\n            # If it is, add it to the list of perfect squares\n            perfect_squares.append(i)\n\n    # Return the list of perfect squares\n    return perfect_squares",
        "test": "assert perfect_squares(1, 100) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100], \"Test for perfect_squares(1, 100) failed\"",
        "num_ids": 1578,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    This function converts polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <= 1: # check if the length of the list is less than or equal to 1\n        return newList # if it is, return the original list as is\n    else: # if the length of the list is greater than 1\n        newList[0], newList[-1] = newList[-1], newList[0] # swap the first and last elements of the list\n        return newList # return the updated list",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 798,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n: \n        return 0\n    \n    if k == 0 or k == n: \n        return 1\n    \n    coeff = 1\n    for i in range(1, k+1):\n        coeff *= (n-i+1) / i\n    \n    return coeff",
        "test": "assert binomial_Coeff(1,1) == 1, \"binomial_Coeff(1,1) should return 1\"",
        "num_ids": 1037,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeros from IP address\n    ip = re.sub(r'^\\s+|\\s+$', '', ip)\n    return ip",
        "test": "assert removezero_ip('192.168.1.1') == '192.168.1.1'",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def diff_even_odd(lst):\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return None\n    elif lst[0] % 2 == 0:\n        return lst[0]\n    elif lst[1] % 2 == 1:\n        return lst[1]\n    else:\n        return lst[0] - lst[1]",
        "test": "assert diff_even_odd([2, 4, 6, 8, 10]) == 2, \"The function should return 2.\"",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert both strings to binary format\n    binary_str1 = bin(int(str1, 2))[2:]\n    binary_str2 = bin(int(str2, 2))[2:]\n\n    # Initialize variables to keep track of minimum number of swaps and the indices of the bits that are swapped\n    min_swaps = 0\n    swap_indices = []\n\n    # Iterate through each bit of the binary strings\n    for i in range(len(binary_str1)):\n        # If the bits are different, check if there is a swap that can be made\n        if binary_str1[i]!= binary_str2[i]:\n            # If the bit is already at the lowest possible position, there is no swap required\n            if i == 0:\n                continue\n            # Check if the bit can be moved to a higher position\n            else:\n                # Iterate through each bit of the binary strings from the previous position\n                for j in range(i):\n                    # If the bit at the current position is different from the bit at the previous position, there is a swap that can be made\n                    if binary_str1[i]!= binary_str1[j]:\n                        # Calculate the swap index\n                        swap_index = j\n                        # Check if the position of the bit at the current position is greater than or equal to the position of the bit at the previous position\n                        if i >= j:\n                            swap_index += 1\n                        # Check if the swap index is already in the list of swap indices, and if not, add it to the list\n                        if swap_index not in swap_indices:\n                            swap_indices.append(swap_index)\n                            min_swaps += 1\n                            break\n\n    # Return the minimum number of swaps required to convert the two binary strings\n    return min_swaps",
        "test": "assert min_Swaps(\"1111\", \"1111\") == 0",
        "num_ids": 1999,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 678,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # initialize two pointers for the arrays\n    i = 0\n    j = 0\n\n    # loop until we find the kth element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # if the elements are equal, increment both pointers\n            i += 1\n            j += 1\n\n    # check if the kth element is in the first array\n    if k <= len(arr1):\n        return arr1[k-1]\n    else:\n        # check if the kth element is in the second array\n        return arr2[k-len(arr1)-1]",
        "test": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 1) == 1",
        "num_ids": 1585,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    num_len = len(num_str)\n    power = 0\n    \n    for i in range(num_len):\n        power += int(num_str[i]) ** num_len\n    \n    return number == power",
        "test": "assert armstrong_number(123) == False, \"Expected False\"",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_ = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum_ += i\n        count += 1\n    average = sum_ / count\n    return sum_, average",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(4) == True, \"Function is not working correctly\"",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in char_freq:\n            char_freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            char_freq[char] = 1\n\n    # Find the character with the highest frequency\n    max_freq = max(char_freq.values())\n    for char, freq in char_freq.items():\n        if freq == max_freq:\n            return char\n\n    # If no character has the highest frequency, return None\n    return None",
        "test": "assert first_repeated_char(\"aaabbb\") == \"a\", \"Should return the first repeated character 'a'\"",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_numbers = []\n    count = 1\n\n    while count <= n:\n        lucid_numbers.append(count)\n        count += 1\n\n    return lucid_numbers",
        "test": "assert get_ludic(0) == []",
        "num_ids": 2524,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse the words in the list\n    words.reverse()\n    # Join the words back into a string\n    reversed_string =''.join(words)\n    # Return the reversed string\n    return reversed_string",
        "test": "assert reverse_words(\"  words   \") == \"words\"",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and returns True if the number is prime, else False.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True, \"Expected True, got {}\".format(prime_num(2))",
        "num_ids": 723,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            start = match.start()\n            end = match.end()\n            literal = match.group()\n            return literal, start, end\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"this is a test string\", r'\\b') == ('', 0, 0)",
        "num_ids": 908,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    elif n > 1: \n        return bell_Number(n-1) + bell_Number(n-2)",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Remove the kth element from the list and return the updated list.\n    \"\"\"\n    return list1[:k-1] + list1[k:]",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]",
        "num_ids": 1100,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N - 1:\n            max_val = max(test_list[i])\n        elif i < N - 1:\n            max_val = max(max_val, test_list[i][N - 1])\n    return max_val",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 3) == 9",
        "num_ids": 1618,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def merge(lst):\n    # Initialize two empty lists\n    merged = []\n    merged_second = []\n    # Loop through each sublist in the first list\n    for sublist in lst:\n        # Append the first element of the sublist to the merged list\n        merged.append(sublist[0])\n        # Append the second element of the sublist to the merged_second list\n        merged_second.append(sublist[1])\n    # Return a list of the merged and merged_second lists\n    return [merged, merged_second]",
        "test": "assert merge([[1,2],[3,4]]) == [[1,3],[2,4]]",
        "num_ids": 1187,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum",
        "test": "assert cummulative_sum([(1,2,3), (4,5,6), (7,8,9)]) == 36",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_set in nums:\n        sum_set = sum(num_set)\n        avg = sum_set / len(num_set)\n        result.append(avg)\n    return result",
        "test": "assert average_tuple(((1, 2), (3, 4), (5, 6))) == [2, 3]",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)",
        "test": "assert tuple_modulo((1,2,3),(1,2,3)) == (0,0,0)",
        "num_ids": 871,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    count = 0\n    start = (0, 0)\n    # Loop through all points\n    for i in range(1, steps+1):\n        # Find the next point\n        new_point = (i * d, 0)\n        # Check if the point is reachable from start\n        if new_point == start:\n            # Increment count and exit the loop\n            count += 1\n            break\n        # Check if the point is within the range of the plane\n        if new_point[0] < 0 or new_point[0] >= steps or new_point[1] >= d:\n            continue\n        # Update the start point\n        start = new_point\n    return count",
        "test": "assert min_Jumps(100, 5) == 15",
        "num_ids": 1718,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([2,4,6],[2,4,6]) == [1.0, 1.0, 1.0]",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n    \n    # reverse the list to get the numbers in descending order\n    num_list.reverse()\n    \n    # join the numbers back into a string and return the result\n    return ''.join(num_list)",
        "test": "assert move_num(\"\") == \"\"",
        "num_ids": 1168,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Create a list to store the size of the largest subset\n    sizes = []\n    # Initialize the maximum size to 0\n    max_size = 0\n    # Iterate through the list of numbers\n    for num in a:\n        # Initialize a variable to keep track of the size of the current subset\n        subset_size = 0\n        # Iterate through the remaining numbers in the list\n        for remaining_num in a[a.index(num)+1:]:\n            # Check if the remaining number is divisible by the current number\n            if remaining_num % num == 0:\n                # If it is, add 1 to the subset size\n                subset_size += 1\n                # If the size of the current subset is greater than the maximum size so far, update the maximum size\n                if subset_size > max_size:\n                    max_size = subset_size\n        # Add the size of the current subset to the list of sizes\n        sizes.append(subset_size)\n    # Return the maximum size of any subset\n    return max(sizes)",
        "test": "assert largest_subset([1, 2, 3, 4, 5, 9]) == 5",
        "num_ids": 1515,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    mid1 = n // 2\n    mid2 = (n // 2) + 1\n    if n % 2 == 0:\n        return (arr1[mid1-1] + arr1[mid1])/2\n    else:\n        return arr1[mid1]",
        "test": "assert get_median([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5) == 5",
        "num_ids": 1340,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Initialize an empty list to store the results\n    result = []\n    # Loop through each number in the list\n    for num in nums:\n        # Compute the nth power of the number and append it to the result list\n        result.append(num ** n)\n    # Return the result list\n    return result",
        "test": "assert nth_nums([1,2,3,4,5], 2) == [1, 4, 9, 16, 25]",
        "num_ids": 826,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    return string.upper()",
        "test": "assert is_upper(\"WORLD\") == \"WORLD\"",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList ",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 824,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the circumference of the semicircle\n    circumference = 2 * r\n    \n    # Find the area of a right triangle with base r and height 2r\n    area1 = 0.5 * r * r\n    \n    # Find the area of a right triangle with base 2r and height r\n    area2 = 0.5 * r * r\n    \n    # Find the area of a right triangle with base r and height r\n    area3 = 0.5 * r * r\n    \n    # Choose the area of the largest triangle that can be inscribed in the semicircle\n    largest_area = max(area1, area2, area3)\n    \n    # Return the largest area\n    return largest_area\n",
        "test": "assert triangle_area(1) == 0.5, \"Expected area to be 0.5 for r=1\"",
        "num_ids": 1237,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1\n",
        "test": "assert find_First_Missing([1, 2, 3, 4, 5], start=0, end=3) == 1",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []\n\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    return even_list",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # get the tuple of coordinates\n    x, y = ele\n\n    # create an empty list for adjacent coordinates\n    adj = []\n\n    # iterate through all the rows and columns of the 8-connected neighbourhood\n    for i in range(max(0, x - 1), min(x + 2, 7)):\n        for j in range(max(0, y - 1), min(y + 2, 7)):\n            # if the current coordinates are not the same as the initial coordinates\n            if i!= x or j!= y:\n                # add the current coordinates to the adjacent coordinates list\n                adj.append((i, j))\n\n    # return the adjacent coordinates list\n    return adj",
        "test": "assert adjac((1,2)) == [(1, 3), (1, 4), (2, 1), (2, 3), (2, 4), (3, 1), (3, 2), (3, 4), (4, 1), (4, 2), (4, 3)]",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the input string to lowercase\n    text = text.lower()\n    # Iterate over each character in the string\n    for i in range(len(text)):\n        # If the character is a whitespace, replace it with an underscore\n        if text[i].isspace():\n            text = text[:i] + \"_\" + text[i+1:]\n        # If the character is an underscore, replace it with a whitespace\n        elif text[i] == \"_\":\n            text = text[:i] + \" \" + text[i+1:]\n    return text",
        "test": "assert replace_spaces('hello_world') == 'hello world'",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list",
        "test": "assert move_zero([]) == []",
        "num_ids": 962,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes two lists - `arr` and `n` - and finds the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n        xor_sum ^= i\n    return xor_sum",
        "test": "assert pair_xor_Sum([1,2,3,4,5], 5) == 5",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result",
        "test": "assert heap_sort([]) == []",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        if actual_cost > sale_amount:\n            return noprofit_noloss(sale_amount, actual_cost - sale_amount)",
        "test": "assert noprofit_noloss(100,25) == False, \"no profit and no loss\"",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 23.8\n    k = 0.6215\n    f = 9/5\n    fahrenheit = (f * t) + 32\n    \n    # Calculate the wind chill index\n    wind_chill_index = round(math.sqrt((10 * v * c) / (math.tan(math.radians(fahrenheit)) + 11.3)))\n    \n    return wind_chill_index",
        "test": "assert wind_chill(10,25) == 12",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of names that start with a lowercase letter\n    sum_of_names = 0\n    # Loop through each name in the list\n    for name in sample_names:\n        # If the name starts with a lowercase letter, skip it and move to the next name\n        if name[0].islower():\n            continue\n        # Otherwise, add the length of the name to the sum of names\n        sum_of_names += len(name)\n    # Return the sum of names\n    return sum_of_names",
        "test": "assert sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Hannah\", \"Isabella\", \"Jack\"]) == 51",
        "num_ids": 1273,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)",
        "test": "assert remove_parenthesis(\"a(b)c(d)e\") == \"ace\"",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Initialize the variables\n    i = 1\n    nonagonal_sum = 0\n\n    # Calculate the sum of nonagonal numbers\n    while i <= n:\n        nonagonal_sum += i * (n - i + 1)\n        i += 1\n\n    # Return the result\n    return nonagonal_sum\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_regex = re.compile(r'\\b[a-z]+z\\b')\n    return word_regex.search(text) is not None",
        "test": "assert text_match_wordz_middle('python') == False",
        "num_ids": 977,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from position 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Get a new dictionary with the given key and value\n    new_dict = {**test_dict}\n    # Concatenate the original tuple and the new dictionary to create a new tuple\n    new_tup = (test_tup + tuple(new_dict.items()))\n    return new_tup",
        "test": "assert add_dict_to_tuple((), {}) == ()",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n\n    max_avg = 0\n    max_path = None\n\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        max_avg = max(max_avg, cost[i][0])\n\n    for j in range(N):\n        dp[0][j] = cost[0][j]\n        max_avg = max(max_avg, cost[0][j])\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n\n    return max_avg",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18]]) == 17",
        "num_ids": 1779,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # create an empty list to store the filtered students\n    filtered_students = []\n\n    # loop through the dictionary and filter the students based on their height and weight\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            # add the student to the list of filtered students\n            filtered_students.append((name, height, weight))\n\n    # return the filtered list of students\n    return filtered_students",
        "test": "assert filter_data({'Alice':(1.75, 80.0), 'Bob':(1.65, 70.0), 'Charlie':(1.70, 75.0), 'David':(1.80, 85.0)},1.9,80.0) == []",
        "num_ids": 1274,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1,2,3], [4,5,6]) == 0 # empty lists",
        "num_ids": 1152,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        digit = base % 10\n        sum += digit\n        base //= 10\n    return sum",
        "test": "assert power_base_sum(10, 2) == 1 + 0 + 0 + 0 + 0 == 1",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"' #match anything between double quotes\n    matches = re.findall(pattern, text1) #find all matches in the text\n    return matches #return the matches",
        "test": "assert extract_quotation(\"He said, \\\"Goodbye, cruel world!\\\"\") == [\"Goodbye, cruel world!\"]",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = [0] * N\n    for i in range(N):\n        result[i] = test_tup[i] * test_tup[i+1]\n    return result",
        "test": "assert multiply_elements((1,)) == (1,)",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "test": "assert sum_list([1,2,3], [4,5,6]) == [5,7,9]",
        "num_ids": 864,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Use the groupby() function from itertools to group the elements of the list by their indices\n    grouped_nums = groupby(enumerate(nums), key=lambda x: x[0])\n\n    # Create a new list to store the unique consecutive duplicates\n    result = []\n\n    # Loop through the groups of consecutive duplicates\n    for key, group in grouped_nums:\n\n        # Check if the group contains more than 1 element\n        if len(list(group)) > 1:\n\n            # Loop through the elements in the group and check if they are consecutive duplicates\n            for i in range(len(group) - 1):\n                if group[i] == group[i+1]:\n                    # If they are consecutive duplicates, append the first element of the group to the result list\n                    result.append(group[i])\n\n    # Return the result list containing unique consecutive duplicates\n    return result",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 1489,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone\n    lateral_surface_area = math.pi * r * r * h\n    return lateral_surface_area\n",
        "test": "assert lateralsurface_cone(4,5) == math.pi*r**2*h",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r\"[^a-zA-Z0-9]+\"\n    text = re.sub(pattern, \":\", text)\n    return text",
        "test": "assert replace_specialchar(\"Hello, World!\") == \"Hello:World:\"",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            # Check if the number to the left of mid is also x\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            return mid\n        \n        elif A[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1  # The number was not found in the array",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 4, 5, 6, 7, 8], 4) == 3, \"find_first_occurrence([1, 2, 3, 4, 4, 5, 6, 7, 8], 4) == 3\"",
        "num_ids": 1477,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    prod_sum = 0\n    max_sum = float('-inf')\n    prefix_sum = [0] * (n+1)\n    \n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            prod = prefix_sum[j] - prefix_sum[i]\n            if prod > max_sum:\n                max_sum = prod\n                sublist = arr[i:j+1]\n    \n    return sum(sublist)",
        "test": "assert sum_Of_Subarray_Prod([1, 2, 3]) == 6 #Correct",
        "num_ids": 1462,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (2 ** (n.bit_length() - 1))\n\n    # Toggle the middle bits of the number except the first and last bit\n    middle_bits = ((n & ~first_bit) | last_bit)\n\n    # Combine the first and last bits with the middle bits\n    result = first_bit | middle_bits\n\n    return result",
        "test": "assert set_middle_bits(1) == 1, \"set_middle_bits(1) should return 1\"",
        "num_ids": 1601,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the index where x should be inserted\n    index = bisect.bisect_left(a, x)\n    \n    # If x is already in the list, return its index\n    if index < len(a) and a[index] == x:\n        return index\n    \n    # Find the insertion point to the left of the index\n    left_index = bisect.bisect_left(a[:index], x)\n    \n    # If the insertion point is not 0, insert x there\n    if left_index > 0:\n        return left_index\n    \n    # If the index is 0 and x is greater than the element at index-1, insert x there\n    if index > 0 and a[index-1] > x:\n        return index-1\n    \n    # If the index is 0 and x is less than or equal to the element at index-1, insert x after it\n    if index > 0 and a[index-1] <= x:\n        return index\n    \n    # If none of the above conditions apply, the insertion point must be index+1\n    return index+1",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 10) == 5",
        "num_ids": 1385,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_str('apple') == True, 'check_str(\"apple\") should return True'",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_triangular(num):\n        if num < 0:\n            return False\n        triangular = num\n        for i in range(1, n):\n            triangular += num * i\n        return is_prime(triangular)\n\n    def smallest_triangular_number(n):\n        if n == 1:\n            return 0\n        num = 1\n        while is_prime(num):\n            num += 1\n        while not is_triangular(num):\n            num += 1\n        return num\n\n    return smallest_triangular_number(n)",
        "test": "assert find_Index(1) == 0",
        "num_ids": 1360,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    result_dict = {}\n    # Loop through the given tuple\n    for i in range(0, len(test_tup), 2):\n        # Add the key-value pair to the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n    # Return the final dictionary\n    return result_dict",
        "test": "assert tuple_to_dict((5, 6)) == {5: 6}",
        "num_ids": 1079,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[2:])\n        else:\n            return False",
        "test": "assert all_Characters_Same('abb') == False, \"Function is not working as expected. String containing two different characters is considered as a single character.\"",
        "num_ids": 748,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    return math.sqrt(3) / 4 * side ** 2",
        "test": "assert area_tetrahedron(1) == math.sqrt(3)/4",
        "num_ids": 874,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 1416,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False",
        "test": "assert check_none(('hello', 5, 10.5, None, 'world')) == True",
        "num_ids": 641,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Define a lambda function to check if a number is divisible by each digit\n    is_divisible = lambda num: all(num % 10 == 0 for _ in range(10))\n    \n    # Iterate over all numbers between startnum and endnum\n    for num in range(startnum, endnum+1):\n        # If the number is divisible by each digit, print it\n        if is_divisible(num):\n            print(num)",
        "test": "assert divisible_by_digits(1, 1000) == [1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 3, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 4, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 5, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 6, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 7, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 8, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 9, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]",
        "num_ids": 2664,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r",
        "test": "assert sector_area(2, 0) == 12.566370614359172",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Step 1: Compute the length of the three sequences\n    n, m, l = len(X), len(Y), len(Z)\n\n    # Step 2: Create a table to store the length of longest common subsequence ending at each position\n    T = [[0 for j in range(l+1)] for i in range(n+1)]\n\n    # Step 3: Fill the table in bottom up manner\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                T[i][j] = T[i-1][j-1] + 1\n            else:\n                T[i][j] = max(T[i-1][j], T[i][j-1])\n\n    # Step 4: Find the longest common subsequence ending at each position in the table\n    i, j = n, m\n    LCS = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            LCS.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif T[i-1][j] > T[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Step 5: Reverse the LCS to get the final result\n    return ''.join(reversed(LCS))",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GXTXAYB\") == \"GTAB\"",
        "num_ids": 2410,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r\"\\b([A-Z][a-z]+)\\b\" # define regex pattern to match capital words\n    words = re.findall(pattern, str1) # find all matches using regex pattern\n    for word in words:\n        if word[0].isupper(): # if the first character of the word is uppercase, add a space before it\n            str1 = str1.replace(word, \" \" + word) # replace the matched word with a space followed by the word\n    return str1 # return the modified string",
        "test": "assert capital_words_spaces(\"\") == \"\"",
        "num_ids": 1088,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def sort_numeric_strings(nums_str):\n    return sorted(nums_str, key=lambda x: float(x))",
        "test": "assert sort_numeric_strings(['1', '5', '2', '3', '4']) == ['1', '2', '3', '4', '5']",
        "num_ids": 1190,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n\n    Args:\n        test_list (list): A list to which the given tuple will be added.\n        test_tup (tuple): A tuple to be added to the list.\n\n    Returns:\n        None.\n    \"\"\"\n    for elem in test_list:\n        if isinstance(elem, tuple):\n            test_list.remove(elem)\n    test_list.extend(test_tup)",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif i % 2 == 0:\n        if arr[i] >= arr[i//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)\n    else:\n        if arr[i] >= arr[i//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)",
        "test": "assert check_min_heap_helper([3, 8, 1, 9, 7], 1) == False",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + 1\n    else:\n        return 2*jacobsthal_num(n//2) + 1",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1121,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    :param test_list: list of tuples (records)\n    :param K: integer\n    :return: minimum k records from tuple list\n    \"\"\"\n    if not test_list:\n        return None\n\n    # sort the list based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # initialize a variable to store the minimum k records\n    min_records = []\n\n    # initialize a variable to store the current k records\n    current_records = []\n\n    # loop through the sorted list and add records to the current k records\n    # until we have k records in the current_records list\n    for i in range(len(test_list)):\n        current_records.append(test_list[i])\n        if len(current_records) == K:\n            break\n\n    # append the last k records to the min_records list\n    min_records.extend(current_records)\n\n    return min_records",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == [(1, 2), (3, 4)]",
        "num_ids": 2390,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create an empty list to store the common elements\n    common_elements = []\n    # Loop through each index of the lists\n    for i in range(len(l1)):\n        # Check if the current element is in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            # Add the current element to the common_elements list\n            common_elements.append(l1[i])\n    # Return the common_elements list\n    return common_elements",
        "test": "assert extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9, 10]) == []",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    if len(numbers) < 2:\n        return None\n\n    min_num = float('inf')\n    second_min_num = float('inf')\n\n    for num in numbers:\n        if num < min_num:\n            second_min_num = min_num\n            min_num = num\n        elif num < second_min_num and num!= min_num:\n            second_min_num = num\n\n    return second_min_num",
        "test": "assert second_smallest([7, 2, 3, 1, 6]) == 2",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"aaaaabbbbbbb\") == True",
        "num_ids": 622,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # check if the reversed string is present in the list\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count",
        "test": "assert unique_sublists([1,2,3,4,5]) == {1: 2, (2,): 1, (3,): 1, (4,): 1, (5,): 1, (1, 2): 1, (1, 3): 1, (1, 4): 1, (1, 5): 1, (2, 3): 1, (2, 4): 1, (2, 5): 1, (3, 4): 1, (3, 5): 1, (4, 5): 1}",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    # Check if the number contains any non-numeric characters\n    if any(char not in '0123456789.' for char in num):\n        return False\n\n    # Check if the number is an integer\n    if not any(char.isdigit() for char in num):\n        return False\n\n    # Check if the number contains more than one decimal point\n    if '.' in num and num.count('.') > 1:\n        return False\n\n    # Check if the number contains more than 2 decimal places\n    decimal_places = len(num.split('.')[1]) if '.' in num else 0\n    if decimal_places > 2:\n        return False\n\n    return True",
        "test": "assert is_decimal(\"0.00\") == True, \"Test case 2 failed\"",
        "num_ids": 913,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Using a set to remove duplicates\n    unique_set = set(arr)\n    # Check if the length of the set is 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 3, 4, 4]) == False, \"Test 3: [1, 2, 3, 4, 4] should return False\"",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if 1 <= monthnum <= 12:\n        if monthnum % 2 == 0:\n            if monthnum in [4, 6, 9, 11]:\n                return True\n        else:\n            if monthnum in [3, 5, 7, 8, 10, 12]:\n                return True\n    return False",
        "test": "assert check_monthnumber_number(1) == False",
        "num_ids": 1109,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([1, 1, 1, 1, 1], 5) == 0",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5, \"Error in number_ctr function\"",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    polite_numbers = [1]\n    index = 1\n    while index < n:\n        if index % 2 == 0:\n            polite_numbers.append(polite_numbers[index // 2] * 2)\n        else:\n            polite_numbers.append(polite_numbers[index // 2] * 3)\n        index += 1\n    \n    return polite_numbers[n - 1]\n",
        "test": "assert is_polite(1) == 1",
        "num_ids": 1227,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # initialize an empty list to store the pairs\n    pairs = []\n    # loop through the list\n    for i in range(len(l1)-1):\n        # add the pair to the list if it is not None\n        if l1[i] is not None and l1[i+1] is not None:\n            pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 930,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 5) == 2",
        "num_ids": 1074,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    return [x for x in li1 if x not in li2]",
        "test": "assert Diff([1,2,3], [1,2,3]) == []",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**4\n    return sum",
        "test": "assert odd_num_sum(1) == 0",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # create a stack to store opening parentheses\n    stack = deque()\n    \n    # loop through each character in the expression\n    for char in exp:\n        # if the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # if the character is a closing parenthesis, pop off any opening parentheses\n        # from the stack and check if the count is equal to 0. If so, the expression is balanced.\n        elif char == ')':\n            if stack:\n                if stack.pop() == '(':\n                    continue\n            else:\n                return False\n    \n    # if the loop completes without finding a mismatch between opening and closing parentheses,\n    # the expression is balanced\n    return True",
        "test": "assert check_expression(\"a+b+c+d+e+f\") == True",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)",
        "test": "assert remove_length(\"hello world\", 3) == \"hello world\"",
        "num_ids": 794,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None",
        "test": "assert occurance_substring(\"This is a test string\", \"test123\") == None",
        "num_ids": 925,
        "indeed": true
    },
    {
        "number": 775,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # loop through the list and check whether every odd index contains odd numbers\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                # if the number at even index is even, return False\n                return False\n        else:\n            # if the number at odd index is odd, check whether it is odd\n            if nums[i] % 2!= 0:\n                # if the number at odd index is even, return False\n                return False\n    # if the loop completes without finding any odd number at odd index, return True\n    return True",
        "test": "assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True, \"odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) should return True\"",
        "num_ids": 1044,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"abc\") == 0",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create a set to store unique elements\n    unique_set = set(arr)\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Iterate over the unique elements in the set and add their values to the sum variable\n    for num in unique_set:\n        sum += num\n\n    # Return the sum of non-repeated elements\n    return sum",
        "test": "assert find_sum([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 15",
        "num_ids": 1346,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]",
        "test": "assert pack_consecutive_duplicates([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        if isinstance(item, list):\n            count = sublists.get(tuple(item), 0) + 1\n            sublists[tuple(item)] = count\n    return sublists",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1369,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list as input and returns a list of all possible combinations of sums with tuples.\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            result.append(tuple(combo))\n    return result",
        "test": "assert find_combinations([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 6), (1, 2, 7), (1, 2, 8), (1, 2, 9), (1, 2, 10), (1, 2, 11), (1, 2, 12), (1, 3, 4), (1, 3, 5), (1, 3, 6), (1, 3, 7), (1, 3, 8), (1, 3, 9), (1, 3, 10), (1, 3, 11), (1, 3, 12), (1, 4, 5), (1, 4, 6",
        "num_ids": 2927,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n            if n // i == i:\n                count += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0",
        "test": "assert count_divisors(1) == False, \"The function should return True if the count of divisors is even, otherwise, it should return False.\"",
        "num_ids": 1334,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    result = 0\n    \n    # Iterate through all possible subarrays of odd length\n    for i in range(n):\n        subarray = arr[i:i+2]\n        if sum(subarray) % 2!= 0:\n            result += subarray[0] + subarray[1]\n    \n    return result",
        "test": "assert odd_length_sum([2,4,6,8]) == 0, \"odd_length_sum([2,4,6,8]) should be 0\"",
        "num_ids": 1202,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts the given RGB color to HSV color.\n\n    :param r: Red value (0-255)\n    :type r: int\n    :param g: Green value (0-255)\n    :type g: int\n    :param b: Blue value (0-255)\n    :type b: int\n    :return: Tuple of (H, S, V) representing the HSV color\n    :rtype: tuple\n    \"\"\"\n\n    # Convert RGB to HSV values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val / 255.0\n\n    if max_val!= 0:\n        delta = max_val - min_val\n        s = delta / max_val\n    if s!= 0:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        h *= 60\n        if h < 0:\n            h += 360\n\n    return (h, s, v)\n",
        "test": "assert rgb_to_hsv(255, 0, 0) == (0, 1, 1)",
        "num_ids": 2221,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if even_count > 0 and odd_count > 0:\n        return list1[0] * list1[1]\n    else:\n        return 0",
        "test": "assert mul_even_odd([2, 4, 6, 8]) == 0, \"mul_even_odd([2, 4, 6, 8]) should return 0.\"",
        "num_ids": 1251,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert tuple string to tuple\n    test_tuple = tuple(eval(test_str))\n    # Convert tuple to integer tuple\n    int_tuple = tuple(int(x) for x in test_tuple)\n    return int_tuple",
        "test": "assert tuple_str_int((1, \"2\")) == (1, 2), \"tuple_str_int is not working correctly.\"",
        "num_ids": 1187,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index",
        "test": "assert right_insertion([], 1) == 0",
        "num_ids": 1010,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three('abbbbbbbb') == True",
        "num_ids": 2472,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a new tuple\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple",
        "test": "assert new_tuple([\"apple\", \"banana\", \"cherry\"], \"grape\") == (\"apple\", \"banana\", \"cherry\", \"grape\")",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums) // 2",
        "test": "assert even_position([1, 2, 3, 4, 5]) == False",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) == tuple:\n        if len(test_tup) == 1:\n            return test_tup[0]\n        else:\n            return tuple(remove_nested(t) for t in test_tup[1:])\n    else:\n        return test_tup",
        "test": "assert remove_nested([(1, 2), (3, (4, 5)), (6, 7, 8)]) == [(1, 2), (6, 7, 8)]",
        "num_ids": 1549,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "test": "assert count_list([[], [], []]) == 3, \"count_list([[], [], []]) should return 3\"",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    \n    while i <= j:\n        mid = (i + j) // 2\n        \n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n    \n    return -1",
        "test": "assert last([3, 2, 1], 5) == -1",
        "num_ids": 818,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a).*b(?=$)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_starta_endb('ababbc') == False",
        "num_ids": 845,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_ = 0\n    for item in dict.values():\n        sum_ += item\n    return sum_",
        "test": "assert return_sum({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == 15, \"The sum of all items in the dictionary is not correct.\"",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add each odd number to the sum\n        sum += i\n        \n    # return the sum\n    return sum",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 503,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF  # Use a 32 bit mask to make the rotation faster\n    d = d % 32  # Make sure the d is within the range of 0 to 31\n    return ((n << d) | (n >> (32 - d))) & mask  # Use the bitwise left rotate operator to rotate the number",
        "test": "assert left_rotate(335544320,0) == 335544320, \"left_rotate function is not working correctly\"",
        "num_ids": 982,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()",
        "test": "assert remove_all_spaces(\"Hello   World\") == \"HelloWorld\"",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y), max(x, y) + 1):\n        if i == x:\n            count += 1\n        elif i == y:\n            count += 1\n        elif i == z:\n            count += 1\n    return count",
        "test": "assert test_three_equal(1, 1, 2) == 1",
        "num_ids": 1060,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    n = len(arr)\n    # If array is already sorted, then no rotation is required.\n    if arr == sorted(arr):\n        return 0\n    \n    # Find the first non-decreasing element.\n    i = 0\n    while i < n-1 and arr[i] >= arr[i+1]:\n        i += 1\n    if i == n-1:\n        # All elements are non-decreasing, so no rotation is required.\n        return 0\n    \n    # Find the last non-increasing element.\n    j = n-1\n    while j > 0 and arr[j-1] <= arr[j]:\n        j -= 1\n    if j == 0:\n        # All elements are non-increasing, so no rotation is required.\n        return 0\n    \n    # Find the first element that is greater than the last non-increasing element.\n    for k in range(i, j):\n        if arr[k] > arr[j-1]:\n            break\n    else:\n        # No such element is found, so no rotation is required.\n        return 0\n    \n    # If the first element is greater than the last non-increasing element, then the array is already sorted.\n    if arr[i] > arr[j-1]:\n        return 0\n    \n    # Count the number of rotations required.\n    count = j - i\n    return count",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1737,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    left = 0\n    right = n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False",
        "test": "assert is_perfect_square(16) == True, \"The function is not working correctly. Test case 1 is incorrect.\"",
        "num_ids": 823,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2, 3, 4, 5, 6]) == True",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            current_sum = lists[i][j]\n            for k in range(j+1, len(lists[i])):\n                current_sum += lists[i][k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j]]\n                for l in range(j+1, len(lists[i])):\n                    max_list.append(lists[i][l])\n\n    return max_list",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]) == [[16, 17, 18]]",
        "num_ids": 1566,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Convert all characters to lowercase\n    test_str = test_str.lower()\n    # Initialize variables for current run and maximum run\n    current_run = 1\n    max_run = 0\n    # Iterate through the string\n    for i in range(1, len(test_str)):\n        # If the current character is uppercase and the previous character was not, increase the run\n        if test_str[i] == test_str[i-1].upper():\n            current_run += 1\n        else:\n            # If the run is longer than the maximum run, update the maximum run\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the run counter\n            current_run = 1\n    # If the last character is uppercase, add it to the maximum run\n    if test_str[-1] == test_str[-2].upper():\n        max_run += 1\n    # Return the maximum run\n    return max_run",
        "test": "assert max_run_uppercase(\"hello world\") == 1",
        "num_ids": 1409,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K((1,2,3), 4) == False",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 2, 3), (4, 5, 6)) == True, \"check_smaller((1, 2, 3), (4, 5, 6)) should return True\"",
        "num_ids": 1198,
        "indeed": false
    }
]