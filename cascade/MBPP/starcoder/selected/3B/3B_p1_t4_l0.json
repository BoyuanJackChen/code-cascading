[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "test": "assert similar_elements((1, 2, 3), (2, 3, 4, 5)) == (2, 3)",
        "num_ids": 194,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(3) == False",
        "num_ids": 121,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for num in nums:\n        hq.heappush(min_heap, num)\n        # If the size of the heap exceeds n, remove the smallest element\n        if len(min_heap) > n:\n            hq.heappop(min_heap)\n    # Return the largest n elements of the heap\n    return min_heap",
        "test": "assert heap_queue_largest([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x & (x - 1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(16) == True",
        "num_ids": 127,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words",
        "test": "assert find_char_long(\"Python is the best language!\") == [\"Python\", \"language!\"]",
        "num_ids": 158,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Initialize the minimum number of rotations to be greater than 0\n    min_rotations = 1\n    # Initialize the maximum number of rotations to be greater than 0\n    max_rotations = 1\n    # Initialize the current rotation count to 0\n    current_rotations = 0\n    # Initialize the current string to be the original string\n    current_str = str\n    # Loop through all possible rotations of the string\n    for i in range(n):\n        # Check if the current character is the same as the next character\n        if str[i] == str[(i+1)%n]:\n            # If the current character is the same as the next character, increment the rotation count\n            current_rotations += 1\n            # If the current rotation count is greater than the maximum rotation count, update the maximum rotation count\n            if current_rotations > max_rotations:\n                max_rotations = current_rotations\n            # If the current rotation count is less than the minimum rotation count, update the minimum rotation count\n            if current_rotations < min_rotations:\n                min_rotations = current_rotations\n        else:\n            # If the current character is not the same as the next character, reset the rotation count to 0\n            current_rotations = 0\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations",
        "test": "assert find_Rotations(\"hello\") == 1",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence of the character\n    s = s.replace(ch, '', 1)\n    # Remove last occurrence of the character\n    s = s.replace(ch, '', -1)\n    return s",
        "test": "assert remove_Occ(\"hello\", \"l\") == \"heo\"",
        "num_ids": 141,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a list to store the sorted matrix\n    sorted_matrix = []\n\n    # Loop through each row of the matrix\n    for row in M:\n        # Initialize a variable to store the sum of the row\n        row_sum = 0\n\n        # Loop through each element in the row\n        for element in row:\n            # Add the element to the row sum\n            row_sum += element\n\n        # Append the row to the sorted matrix\n        sorted_matrix.append(row)\n\n    # Sort the sorted matrix in ascending order based on the sum of its rows\n    sorted_matrix.sort(key=lambda x: sum(x))\n\n    # Return the sorted matrix\n    return sorted_matrix",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V",
        "test": "assert find_Volume(10,11,12) == 362880, \"The volume of a triangular prism with sides of length 10, 11, and 12 should be 362880.\"",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])_'\n    return bool(re.search(pattern, text))",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(5) == 20, \"The perimeter of a square with side length 5 is not correct.\"",
        "num_ids": 165,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Remove characters from the first string which are present in the second string\n    for i in range(len(char_list)):\n        if char_list[i] in string:\n            char_list.pop(i)\n            i -= 1\n\n    # Convert the list of characters back to a string\n    result = ''.join(char_list)\n\n    return result",
        "test": "assert str_to_list(\"hello world\", \"aeiou\", \"x\", \"y\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"r\", \"l\", \"d\", \"x\", \"y\"]",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arraynums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Check if any element has a frequency greater than 1\n    for num in freq:\n        if freq[num] > 1:\n            return True\n    \n    # If no duplicate elements are found, return False\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5, 6, 7]) == False",
        "num_ids": 227,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert is_woodall(1) == True, \"1 is not a woodball\"",
        "num_ids": 128,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Check if the original number is one less than twice its reverse\n    if num == rev_num - 1:\n        return True\n    else:\n        return False",
        "test": "assert rev(1232) == False, \"The function should return False for 1232\"",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            num = int(''.join(sorted(str(arr[i:j]))))\n            if num > max_num:\n                max_num = num\n    return max_num",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5, 6, 7]) == 7",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(1,2) == True",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (n - 1) ** 2 + 1",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 123,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digits_sum = sum(int(digit) for digit in substring)\n            if digits_sum == len(substring):\n                count += 1\n    return count",
        "test": "assert count_Substrings(\"123\") == 1",
        "num_ids": 170,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 151,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 8",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks([(80, 'Maths'), (90, 'Science'), (70, 'English'), (60, 'History'), (50, 'Social Studies')]) == [('History', 50), ('Maths', 80), ('Science', 90), ('Social Studies', 50), ('English', 70)]",
        "num_ids": 137,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 171,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0",
        "num_ids": 181,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)",
        "test": "assert bell_number(0) == 1",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "test": "assert is_sublist([1, 2, 3], [1, 2]) == True",
        "num_ids": 181,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True",
        "test": "assert find_equal_tuple([(1, 2, 3), (4, 5, 6)]) == True",
        "num_ids": 167,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1",
        "test": "assert comb_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return \"Invalid input\"\n\n    # Check if the number can be represented as the difference of two squares\n    for i in range(1, int(n**0.5)+1):\n        if n - i*i == i*i:\n            return \"Yes\"\n    return \"No\"",
        "test": "assert dif_Square(49) == True, \"49 is not a difference of two squares\"",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    count = 0\n    prev_pattern = None\n    \n    # Loop through the colors array\n    for color in colors:\n        # Check if the current color matches the previous pattern\n        if color == patterns[count]:\n            count += 1\n        else:\n            # If the current color does not match the previous pattern, reset the count\n            count = 0\n        \n        # Check if the count is equal to the length of the patterns array\n        if count == len(patterns):\n            # If the count is equal to the length of the patterns array, return True\n            return True\n        \n        # Check if the current pattern is the same as the previous pattern\n        if prev_pattern == patterns[count]:\n            # If the current pattern is the same as the previous pattern, return True\n            return True\n        \n        # Update the previous pattern\n        prev_pattern = patterns[count]\n    \n    # If the loop completes without returning True, return False\n    return False",
        "test": "assert is_samepatterns(['red', 'blue', 'green'], [1, 2, 3]) == True",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 5) == []",
        "num_ids": 276,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(13) == False, \"is_Diff(13) should return False\"",
        "num_ids": 146,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False",
        "test": "assert word_len(\"apple\") == True",
        "num_ids": 104,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4 * (n - 1) + 1",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume",
        "test": "assert volume_sphere(4) == math.pi * 4**3, \"The volume of a sphere with radius 4 should be 4*pi/3.\"",
        "num_ids": 192,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)",
        "test": "assert get_Char(\"programming\") == 112, \"get_Char('programming') should return 112\"",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]",
        "test": "assert sequence(1) == 1",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2",
        "test": "assert surfacearea_sphere(4) == math.pi * 16, \"The surface area of a sphere with radius 4 should be pi times 16.\"",
        "num_ids": 184,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    e = 1\n    f = 1\n    g = 1\n    h = 1\n    i = 1\n    j = 1\n    k = 1\n    l = 1\n    m = 1\n    n = 1\n    \n    # Calculate centered hexagonal number\n    for _ in range(n):\n        a, b, c, d, e, f, g, h, i, j, k, l, m, n = (a + b + c + d + e + f + g + h + i + j + k + l + m + n) % 10\n    \n    # Return centered hexagonal number\n    return a",
        "test": "assert centered_hexagonal_number(4) == 132",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict",
        "test": "assert merge_dictionaries_three({'a':1,'b':2},{'c':3,'d':4},{'e':5,'f':6}) == {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict",
        "test": "assert freq_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == {'1': 6, '2': 6, '3': 6, '4': 6, '5': 6, '6': 6, '7': 6, '8': 6, '9': 6, '10': 6}",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    smallest = n\n    for i in range(1, n):\n        if i < smallest:\n            smallest = i\n    return smallest",
        "test": "assert closest_num(25) == 24",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "test": "assert len_log(['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']) == 6, \"The length of the longest word should be 6.\"",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring(['apple', 'banana', 'cherry', 'date', 'elderberry'], 'banana') == True",
        "num_ids": 176,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert is_undulating(1) == True, \"The function is not working correctly for the given input.\"",
        "num_ids": 144,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,3) == 8, \"The function is not working correctly for the given input.\"",
        "num_ids": 146,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))",
        "test": "assert index_minimum([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == 2",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(48) == 10, \"divisor(48) should return 10, but it returns {}\".format(divisor(48))",
        "num_ids": 204,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "test": "assert frequency_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1: 4, 2: 4, 3: 4, 4: 3, 5: 3, 6: 3, 7: 2, 8: 2, 9: 2}",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "test": "assert multiply_num([10, 11, 12]) == 33",
        "num_ids": 132,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "test": "assert decimal_to_binary(10) == \"1010\"",
        "num_ids": 144,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n    # Reverse the string\n    reversed_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n    # Check if the reversed number is greater than the input number\n    if reversed_num > num:\n        # If it is, return the reversed number\n        return reversed_num\n    # If the reversed number is less than or equal to the input number, find the next smallest palindrome\n    else:\n        # Initialize the smallest palindrome to the input number\n        smallest_palindrome = num\n        # Loop through all possible palindromes of the input number\n        for i in range(10**len(num_str), 10**len(num_str)+10):\n            # Convert the current palindrome to a string\n            palindrome_str = str(i)\n            # Reverse the string\n            reversed_palindrome_str = palindrome_str[::-1]\n            # Convert the reversed string back to an integer\n            reversed_palindrome = int(reversed_palindrome_str)\n            # Check if the reversed palindrome is greater than the current smallest palindrome\n            if reversed_palindrome > smallest_palindrome:\n                # If it is, update the smallest palindrome\n                smallest_palindrome = reversed_palindrome\n        # Return the smallest palindrome\n        return smallest_palindrome",
        "test": "assert next_smallest_palindrome(12345678901) == 99999999999",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k-1)",
        "test": "assert kth_element([1, 2, 3, 4, 5], 5) == 5",
        "num_ids": 185,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case",
        "test": "assert snake_to_camel(\"snake_case_string_with_mixed_case\") == \"snakeCaseStringWithMixedCase\"",
        "num_ids": 180,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row and column of the matrix\n    matrix = [[1, 0], [0, 1]]\n\n    # Fill the remaining rows and columns of the matrix\n    for i in range(2, n + 1):\n        for j in range(2, m + 1):\n            # Calculate the value of the current element\n            value = matrix[i - 1][j - 1] + matrix[i - 1][j] + matrix[i][j - 1] - matrix[i][j]\n\n            # Add the value to the matrix\n            matrix.append([value, 0])\n\n    # Return the last element of the matrix\n    return matrix[-1][0]",
        "test": "assert eulerian_num(4, 1) == 4",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()",
        "test": "assert sort_sublists([[1, 2, 3], ['a', 'b', 'c'], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [[1, 2, 3], ['a', 'b', 'c'], [4, 5, 6], [7, 8, 9], [10, 11, 12]]",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "test": "assert count([True, True, True, True, True]) == 5, \"count([True, True, True, True, True]) should return 5\"",
        "num_ids": 172,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == ([1, 2, 3, 4, 5, 6], (4, 5, 6))",
        "num_ids": 99,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list using heapq\n    heapq.heapify(merged_list)\n    \n    # Return the sorted list\n    return merged_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 157,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    # Convert the binary string to a list of integers\n    binary_list = [int(i) for i in s]\n    # Rotate the list n times\n    for i in range(n):\n        binary_list.append(binary_list.pop(0))\n    # Iterate through the list and count the odd numbers\n    for i in binary_list:\n        if i % 2!= 0:\n            count += 1\n    # Return the count of odd numbers\n    return count",
        "test": "assert odd_Equivalent(\"101010\", 5) == 8",
        "num_ids": 227,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]) == [4, 5, 10, 13, 16]",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 95,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True, \"empty_dit([]) should return True\"",
        "num_ids": 235,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)",
        "test": "assert tuple_to_int((1, 2, 3)) == 6",
        "num_ids": 119,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass",
        "test": "assert list_to_float([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0]",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 159,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Find the element that appears only once in the array\n    for num in freq:\n        if freq[num] == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None",
        "test": "assert search([1, 2, 3, 4, 5, 5]) == None",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]) == 3600",
        "num_ids": 333,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == sum_of_proper_divisors(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef sum_of_proper_divisors(n):\n    '''\n    Write a function to calculate the sum of proper divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return sum(divisors)",
        "test": "assert amicable_numbers_sum(100) == 1060",
        "num_ids": 217,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle",
        "test": "assert angle_complex(1,2) == cmath.phase(1+2j)",
        "num_ids": 134,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert find_length(\"101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisors of a and b\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # Calculate the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors",
        "test": "assert sum(60,90) == 60, \"The sum of common divisors of 60 and 90 is not equal to 60.\"",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 84,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "test": "assert long_words(3, ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi', 'lemon','mango', 'nectarine', 'orange', 'papaya', 'quince', 'raspberry','strawberry', 'tangerine', 'watermelon', 'yam', 'zucchini']) == ['banana', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi', 'lemon','mango', 'nectarine', 'orange', 'papaya', 'quince', 'raspberry','strawberry', 'tangerine', 'watermelon', 'yam', 'zucchini']",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int):\n                return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j] for j in range(len(my_matrix)))\n        diag_sum = sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix)))\n        if row_sum!= col_sum or row_sum!= diag_sum:\n            return False\n    \n    return True",
        "test": "assert magic_square_test([[9, 8, 7], [4, 5, 6], [3, 2, 1]]) == True",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_item = None\n    for num, count in freq.items():\n        if count == max_freq:\n            max_item = num\n    return max_item",
        "test": "assert max_occurrences([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 5",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    result = ''\n    for char in str1:\n        if char in vowels:\n            vowel_count += 1\n            result = char + result\n        else:\n            result = char + result\n    return result",
        "test": "assert reverse_vowels(\"hello\") == \"olleh\"",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string((1, 2, 3)) == \"1, 2, 3\"",
        "num_ids": 56,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 169,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2",
        "test": "assert hexagonal_num(4) == 78",
        "num_ids": 97,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = sum(zero_count)\n    ratio = non_zero_count / len(nums)\n    return ratio",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0.0",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is a power of 2\n    if n & (n-1) == 0:\n        # Check if the number is a sum of powers of 2\n        for i in range(1, 32):\n            if (n >> i) & 1 == 1:\n                if (n >> (i+1)) & 1 == 1:\n                    return True\n        return False\n    else:\n        return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(17) == False",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference",
        "test": "assert circle_circumference(4) == 93.49291534192609, \"The function should return 93.49291534192609 for r=4.\"",
        "num_ids": 284,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)",
        "test": "assert extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}",
        "num_ids": 129,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the unsorted part of the array\n        for j in range(i, n-1, -1):\n            nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums",
        "test": "assert pancake_sort([1, 5, 3, 4, 2]) == [1, 2, 3, 4, 5]",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]) == 5",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert find_lists((1, 2, 3, (4, 5))) == 4",
        "num_ids": 146,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 203,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are both non-zero\n    if a == 0 or b == 0:\n        return None\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the two solutions\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Check if the solutions are integers\n        if x1.is_integer() and x2.is_integer():\n            return (int(x1), int(x2))\n        else:\n            return None\n    else:\n        return None",
        "test": "assert find_solution(5, 6, 40) == (15, 18)",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 204,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum",
        "test": "assert sum_series(30) == 210",
        "num_ids": 144,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n    return area",
        "test": "assert area_polygon(9, 10) == 720.0, \"area_polygon(9, 10) should return 720.0\"",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum(set(map(int, str(n))))\n\n    # Check if the sum of the divisors of n and n are the same\n    if div_sum == n:\n        return True\n    else:\n        return False",
        "test": "assert div_sum(28) == False, \"div_sum(28) should return False\"",
        "num_ids": 149,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n    # Loop through each character in the string\n    for i in range(26):\n        # If the character is not already in the dictionary, add it with a count of 1\n        if chr(i+97) not in char_count:\n            char_count[chr(i+97)] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[chr(i+97)] += 1\n    # Loop through each character in the string again and count the number of occurrences at each position in the English alphabet\n    count = 0\n    for char in str1:\n        # If the character is in the dictionary, increment the count by the value in the dictionary\n        if char in char_count:\n            count += char_count[char]\n    # Return the count of characters at each position in the English alphabet\n    return count",
        "test": "assert count_char_position(\"programming\") == 2",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the power of 2 to 1\n    power_of_2 = 1\n    \n    # Loop until the power of 2 is greater than or equal to n\n    while power_of_2 < n:\n        # Increment the power of 2 by 1\n        power_of_2 *= 2\n    \n    # Return the power of 2\n    return power_of_2",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 177,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9], 7) == 1, \"frequency([1,2,3,4,5,6,7,8,9], 7) should return 1\"",
        "num_ids": 289,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 6",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a",
        "test": "assert perimeter_pentagon(20) == 30, \"The perimeter of a regular pentagon with sides of length 20 is not 30.\"",
        "num_ids": 195,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"std std std\") == 3",
        "num_ids": 131,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 145,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 2) == False",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 118,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "test": "assert odd_values_string(\"hello world\") == \"hll wrld\"",
        "num_ids": 85,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 133,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the count of unset bits\n    unset_bits = 0\n\n    # Iterate through the range of bits\n    for i in range(l, r+1):\n        # Check if the i-th bit is set or not\n        if n & (1 << i):\n            # If the i-th bit is set, increment the count of unset bits\n            unset_bits += 1\n\n    # Check if all the bits are unset in the given range or not\n    if unset_bits == 0:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(10, 0, 9) == False",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one for positive elements and one for negative elements\n    pos = 0\n    neg = n - 1\n    \n    # Traverse the array from left to right\n    for i in range(n):\n        # If the current element is positive, increment the positive pointer\n        if arr[i] > 0:\n            pos += 1\n            # If the positive pointer is greater than the negative pointer, swap the elements\n            if pos > neg:\n                arr[pos], arr[neg] = arr[neg], arr[pos]\n                pos -= 1\n                neg -= 1\n    \n    # Traverse the array from right to left\n    for i in range(n - 1, -1, -1):\n        # If the current element is negative, decrement the negative pointer\n        if arr[i] < 0:\n            neg -= 1\n            # If the negative pointer is less than the positive pointer, swap the elements\n            if neg < pos:\n                arr[pos], arr[neg] = arr[neg], arr[pos]\n                pos += 1\n                neg += 1\n    \n    return arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5, -1, 0, 6, 7, 8], 1) == [1, -1, 2, 0, 6, 3, 7, 4, 5, 8]",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "test": "assert replace_blank(\"hello world\", \"x\") == \"helloxworld\"",
        "num_ids": 119,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -list1[i])\n    \n    # Iterate through the list and add each item to the min heap\n    for i in range(n, len(list1)):\n        heapq.heappush(min_heap, -list1[i])\n    \n    # Extract the n largest items from the min heap and return them as a list\n    return [-heapq.heappop(min_heap) for i in range(n)]",
        "test": "assert larg_nnum([1, 2, 3, 4, 5], 2) == [5, 4]",
        "num_ids": 318,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r*h",
        "test": "assert lateralsuface_cylinder(4,5) == 50.26548245743668, \"The lateral surface area of a cylinder with radius 4 and height 5 is incorrect.\"",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert volume_cube(3) == 27, \"volume_cube(3) should return 27\"",
        "num_ids": 141,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate through each bit of the input number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # Set the corresponding bit in the result to 1\n            result |= (1 << i)\n    \n    # Return the result\n    return result",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    # Loop through the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n    # Return the dictionary of counts\n    return count_dict",
        "test": "assert check_occurences([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == {",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count",
        "test": "assert number_of_substrings(\"a\") == 1",
        "num_ids": 128,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, m+1):\n        if i >= 2*i and i <= m:\n            count += 1\n    return count",
        "test": "assert get_total_number_of_sequences(10, 8) == 12600",
        "num_ids": 202,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2",
        "test": "assert replace_list([1,2,3,4,5], [6,7,8]) == [1,2,3,4,6,7,8]",
        "num_ids": 90,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"hello\") == 5",
        "num_ids": 98,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n    # Find the integer part of the square root\n    int_sqrt_N = int(sqrt_N)\n    # Find the square of the integer part\n    square_int_sqrt_N = int_sqrt_N ** 2\n    # Find the difference between N and the square of the integer part\n    diff = N - square_int_sqrt_N\n    # If the difference is positive, then the next perfect square is the square of the integer part plus the difference\n    if diff > 0:\n        return square_int_sqrt_N + diff\n    # If the difference is negative, then the next perfect square is the square of the integer part plus the difference\n    else:\n        return square_int_sqrt_N - diff",
        "test": "assert next_Perfect_Square(4) == 16",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    prev_sum = float('-inf')\n    curr_sum = 0\n    \n    # Traverse the array\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            curr_sum += arr[i]\n        else:\n            curr_sum = arr[i]\n        \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        if curr_sum < prev_sum:\n            prev_sum = curr_sum\n    \n    return max_sum",
        "test": "assert max_sum([1, 2, 3, 4, 5, 6, 7, 8]) == 30",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    guess = number / 2\n    prev_guess = 0\n    i = 0\n    \n    # loop until the guess is within a certain tolerance\n    while abs(guess**2 - number) > 0.0001:\n        # update the guess\n        prev_guess = guess\n        guess = (guess + number / guess) / 2\n        i += 1\n        \n        # check if the guess is within the tolerance\n        if abs(guess**2 - number) < 0.0001:\n            break\n    \n    # return the guess\n    return guess",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of longest palindromic subsequence ending at each index\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and first column of the table\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                table[i][j] = table[j][i-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[j][i])\n\n    # Return the length of the longest palindromic subsequence ending at index n-1\n    return table[n-1][0]",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n**2) + (1/n**3) +... + (1/n**(n-1))",
        "test": "assert harmonic_sum(4) == 3.5",
        "num_ids": 125,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set from array_nums1\n    set_nums1 = set(array_nums1)\n    # Create an empty list to store the intersection\n    intersection = []\n    # Loop through array_nums2\n    for num in array_nums2:\n        # If the number is in set_nums1, add it to the intersection list\n        if num in set_nums1:\n            intersection.append(num)\n    # Return the intersection list\n    return intersection",
        "test": "assert intersection_array([1,2,3,4,5], [4,5,6,7,8]) == [4,5]",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 2, 1, 4, 3), 4) == 1",
        "num_ids": 194,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result",
        "test": "assert insert_element([1,2,3,4,5],10) == [1,2,3,4,5,10]",
        "num_ids": 207,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # Print the polar coordinates\n        print(f\"({r:.2f}, {theta:.2f})\")",
        "test": "assert convert([7, 8]) == (0.5235987755982988, 2.0)",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 154,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "test": "assert combinations_colors([1, 2, 3], 0) == []",
        "num_ids": 179,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 184,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 3,
        "answer": "def swap_numbers(a, b):\n    return b, a",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 73,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # Initialize variables to store the maximum values\n    max1 = max2 = None\n    \n    # Loop through the tuples and compare each element\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            if max1 is None or test_tup1[i] > max1:\n                max1 = test_tup1[i]\n        elif test_tup1[i] < test_tup2[i]:\n            if max2 is None or test_tup2[i] > max2:\n                max2 = test_tup2[i]\n    \n    # Return the maximum values\n    return max1, max2",
        "test": "assert maximize_elements((1, 2, 3), (1, 2, 3)) == (1, 2, 3)",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    prime = 2\n    # Loop through numbers until nth prime is found\n    while count < n:\n        # Check if prime number\n        if is_prime(prime):\n            count += 1\n        # Increment prime number\n        prime += 1\n    # Return nth prime number\n    return prime\n\ndef is_prime(num):\n    '''\n    Check if a number is prime.\n    '''\n    # Check if number is less than 2\n    if num < 2:\n        return False\n    # Check if number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert newman_prime(4) == 7",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples is not equal.\")\n        return\n    \n    # Perform element-wise division operation\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    \n    # Return the result tuple\n    return result_tup",
        "test": "assert division_elements((1, 2, 3), (4,)) == (0.2, 0.4, 0.6)",
        "num_ids": 250,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is greater than L\n    if len(list1) > L:\n        # Split the list into two parts\n        part1 = list1[:L]\n        part2 = list1[L:]\n        # Return the two parts as a tuple\n        return (part1, part2)\n    else:\n        # If the length of the list is less than or equal to L, return the list as a tuple\n        return (list1, [])",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years",
        "test": "assert dog_age(5) == 5, \"The function should return 5 for a dog with 5 years of age.\"",
        "num_ids": 169,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2",
        "test": "assert lateralsurface_cube(5) == 54, \"The lateral surface area of a cube with side length 5 is not equal to 54.\"",
        "num_ids": 187,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum",
        "test": "assert square_Sum(30) == 2250, \"The sum of the squares of the first 30 odd natural numbers is not correct.\"",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the variable to store the result\n    result = 0\n    \n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # add the value of i to the result\n        result += i\n    \n    # return the result\n    return result",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 79,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum",
        "test": "assert even_Power_Sum(40) == 100000, \"The sum of the first 40 even natural numbers that are raised to the fifth power is not correct.\"",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [6, 4, 2]",
        "num_ids": 100,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "test": "assert substract_elements((1, 2, 3), (1, 2, 3)) == (0, 0, 0)",
        "num_ids": 233,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += math.comb(n, i)\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * r**2 * h\n    return volume",
        "test": "assert volume_cylinder(4,5) == 62.83185307179586, \"The volume of a cylinder with radius 4 and height 5 is incorrect.\"",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}",
        "test": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 6) == {}",
        "num_ids": 166,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count",
        "test": "assert count_first_elements((1, 2, 3, 4, 5, 6, 7, 8)) == 5",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the first two decagonal numbers\n    decagonal_num1 = 1\n    decagonal_num2 = 10\n\n    # Loop through the remaining numbers\n    for i in range(2, n+1):\n        # Calculate the next decagonal number\n        decagonal_num = decagonal_num1 + decagonal_num2\n\n        # Update the values for the next iteration\n        decagonal_num1 = decagonal_num2\n        decagonal_num2 = decagonal_num\n\n    # Return the nth decagonal number\n    return decagonal_num",
        "test": "assert is_num_decagonal(4) == 22",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 198,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 158,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[4,5,6,7,8,9]) == [3,3,3,0,0,0]",
        "num_ids": 214,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n    return True",
        "test": "assert validate(12345) == True, \"12345 should be valid\"",
        "num_ids": 198,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False",
        "test": "assert check_element([1,2,3,4,5], 6) == False",
        "num_ids": 164,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "num_ids": 1116,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the array and repeat the array k times\n    for i in range(k):\n        current_sum += a[0]\n        max_sum = max(max_sum, current_sum)\n        \n        # Iterate through the array and remove the first element\n        for j in range(1, n):\n            current_sum -= a[j]\n            current_sum += a[j-1]\n            max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 5) == 30",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum",
        "test": "assert square_Sum(40) == 3625, \"square_Sum(40) should return 3625\"",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list",
        "test": "assert max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]) == [3, 3, 3, 3, 3, 3]",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the number of ways of painting the fence\n    ways = [[0] * (k+1) for _ in range(n+1)]\n\n    # Initialize the first row and column of the 2D array\n    ways[0][0] = 1\n    ways[0][1] = 0\n\n    # Fill the rest of the 2D array using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                ways[i][j] = ways[i-1][j]\n            elif j == k:\n                ways[i][j] = ways[i-1][j-1]\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i-1][j-1]\n\n    # Return the number of ways of painting the fence\n    return ways[n][k]",
        "test": "assert count_no_of_ways(6, 5) == 30",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient",
        "test": "assert find(10,5) == 2",
        "num_ids": 92,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n    \n    # Calculate the third side of the triangle\n    third_side = area / math.sin(math.pi / 3)\n    \n    return third_side",
        "test": "assert otherside_rightangle(9,10) == 20, \"The third side of a right angled triangle with sides of length 9 and 10 is not equal to 20.\"",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 184,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "test": "assert sum_div(12) == 28, \"sum_div(12) should return 28\"",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - 1\n    return inv_count",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 191,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "test": "assert flatten_list([[1, 2], [3, [4, 5]], [6]]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 122,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for customer, amount in stdata:\n        # Update the maximum aggregate for the customer\n        max_aggr[customer] = max(max_aggr[customer], amount)\n\n    # Return the maximum aggregate for each customer\n    return max_aggr",
        "test": "assert max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == 12",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(n)\n        if sum(int(bit) for bit in binary_str[:n]) == sum(int(bit) for bit in binary_str[-n:]):\n            count += 1\n    return count",
        "test": "assert count_binary_seq(4) == 4",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth",
        "test": "assert dict_depth({'a': 1, 'b': {'c': 2, 'd': {'e': 3, 'f': {'g': 4, 'h': 5}}}}) == 6",
        "num_ids": 112,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the element at the given index\n    element = arr[index]\n\n    # Find the number of rotations required to find the element\n    for i in range(rotations):\n        # Find the range of elements that can be rotated\n        range_start = 0\n        range_end = len(arr) - 1\n        while range_start < range_end:\n            mid = (range_start + range_end) // 2\n            if arr[mid] < element:\n                range_start = mid + 1\n            else:\n                range_end = mid\n        # Rotate the elements in the range to find the element\n        for j in range(range_start, range_end + 1):\n            temp = arr[j]\n            arr[j] = arr[index - j]\n            arr[index - j] = temp\n\n    # Find the element at the given index after rotations\n    for i in range(rotations):\n        # Find the range of elements that can be rotated\n        range_start = 0\n        range_end = len(arr) - 1\n        while range_start < range_end:\n            mid = (range_start + range_end) // 2\n            if arr[mid] < element:\n                range_start = mid + 1\n            else:\n                range_end = mid\n        # Rotate the elements in the range to find the element\n        for j in range(range_start, range_end + 1):\n            temp = arr[j]\n            arr[j] = arr[index - j]\n            arr[index - j] = temp\n\n    # Return the element at the given index after rotations\n    return arr[index]",
        "test": "assert find_Element([1, 2, 3, 4, 5], [[0, 1], [2, 3], [4, 5]], [1, 2, 3, 4, 5], 5) == 1",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None",
        "test": "assert start_withp(['apple', 'banana', 'pear', 'pineapple', 'potato']) == ('pear', 'pineapple')",
        "num_ids": 118,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    \n    if index == 0:\n        return a[0]\n    \n    if index == 1:\n        return max(a[0], a[1])\n    \n    if index == 2:\n        return max(a[0], a[1], a[2])\n    \n    if index == 3:\n        return max(a[0], a[1], a[2], a[3])\n    \n    if index == 4:\n        return max(a[0], a[1], a[2], a[3], a[4])\n    \n    if index == 5:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5])\n    \n    if index == 6:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6])\n    \n    if index == 7:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7])\n    \n    if index == 8:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8])\n    \n    if index == 9:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9])\n    \n    if index == 10:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10])\n    \n    if index == 11:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11])\n    \n    if index == 12:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12])\n    \n    if index == 13:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13])\n    \n    if index == 14:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14])\n    \n    if index == 15:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15])\n    \n    if index == 16:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], a[16])\n    \n    if index == 17:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], a[16], a[17])\n    \n    if index == 18:\n        return max",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 3, 6) == 10",
        "num_ids": 1165,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(new_tuplex)\n    # Get the number of rows and columns\n    rows = length // m\n    cols = length % m\n    # Get the number of elements in each row\n    row_length = m\n    # Get the number of elements in each column\n    col_length = n\n    # Create a new list to store the colon\n    colon = []\n    # Loop through each row\n    for i in range(rows):\n        # Create a new list to store the row\n        row = []\n        # Loop through each column\n        for j in range(cols):\n            # Get the index of the element in the original tuple\n            index = i*m + j\n            # Get the element at that index\n            element = new_tuplex[index]\n            # Add the element to the row\n            row.append(element)\n        # Add the row to the colon\n        colon.append(row)\n    # Loop through each remaining element in the original tuple\n    for i in range(rows*m, length):\n        # Get the index of the element in the original tuple\n        index = i\n        # Get the element at that index\n        element = new_tuplex[index]\n        # Add the element to the colon\n        colon.append(element)\n    # Return the colon\n    return colon",
        "test": "assert colon_tuplex((1,2,3),(2,2)) == (1,2,3)",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the maximum product and the indices of the largest products\n    max_product = float('-inf')\n    max_product_indices = []\n\n    # Iterate over the first N elements of the two lists\n    for i in range(N):\n        # Calculate the product of the current element of nums1 and the element of nums2 at the same index\n        product = nums1[i] * nums2[i]\n\n        # If the product is greater than the current maximum product, update the maximum product and the indices\n        if product > max_product:\n            max_product = product\n            max_product_indices = [i, i]\n        # If the product is equal to the current maximum product, add the index to the list of indices\n        elif product == max_product:\n            max_product_indices.append(i)\n\n    # Return the indices of the largest products\n    return max_product_indices",
        "test": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == [15511210043330985984000000]",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2,3) == 3",
        "num_ids": 89,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 148,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit to 0\n    leftmost_unset_bit = 0\n    \n    # Iterate through the bits of n from right to left\n    for i in range(31, -1, -1):\n        # If the i-th bit is 1, then the leftmost unset bit is i\n        if n & (1 << i):\n            leftmost_unset_bit = i\n            break\n    \n    # Set the leftmost unset bit in n\n    n |= (1 << leftmost_unset_bit)\n    \n    return n",
        "test": "assert set_left_most_unset_bit(1) == 1",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(1,2) == math.pi * (1**2) * 2",
        "num_ids": 138,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 to 1\n    highest_power_of_2 = 1\n    \n    # Loop through all numbers from 2 to n\n    for i in range(2, n+1):\n        # If the current number is a power of 2, update the highest power of 2\n        if i == 2**highest_power_of_2:\n            highest_power_of_2 += 1\n    \n    # Return the highest power of 2\n    return highest_power_of_2",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(0) == 2, \"find_lucas(0) should return 2\"",
        "num_ids": 177,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])",
        "test": "assert add_string(['apple', 'banana', 'cherry'], 'I have {}') == ['I have apple', 'I have banana', 'I have cherry']",
        "num_ids": 96,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    \n    # Loop through each list and add the elements to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l3[i]\n    \n    return nested_dict",
        "test": "assert convert_list_dictionary([1, 2, 3], [4, 5, 6], [7, 8, 9]) == {1: [4, 5, 6], 2: [7, 8, 9]}",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list",
        "test": "assert max_length_list([1, 2]) == [2]",
        "num_ids": 188,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True",
        "test": "assert check_distinct((1, 2, 3)) == True",
        "num_ids": 131,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
        "test": "assert first_non_repeating_character(\"leetcode\") == \"l\"",
        "num_ids": 174,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_char(\"a\") == True",
        "num_ids": 117,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 192,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total",
        "test": "assert sum_of_digits([123, 456, 789]) == 45",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the same length as the input tuples\n    result_tup = (0,) * len(test_tup1)\n    \n    # Perform the bitwise xor operation on each element of the input tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    \n    # Return the result tuple\n    return result_tup",
        "test": "assert bitwise_xor((1, 2, 3), (4, 5, 6), (7, 8, 9), (1, 2, 3)) == (0, 0, 0)",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)",
        "test": "assert extract_freq([1, 2, 3, 4, 5]) == 5",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result",
        "test": "assert add_nested_tuples((1, (2, 3)), (4, (5, 6))) == (5, (7, 9))",
        "num_ids": 116,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2,3) == 2",
        "num_ids": 88,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex((1,2,3),(1,2,4)) == False",
        "num_ids": 132,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert find_Parity(1) == True",
        "num_ids": 93,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Initialize the result string\n    result = ''\n    # Loop through each digit in the string\n    for digit in num_str:\n        # If the digit is a 9, add a 0 to the result string\n        if digit == '9':\n            result += '0'\n        # If the digit is a 0, add a 9 to the result string\n        elif digit == '0':\n            result += '9'\n        # If the digit is a 1-8, add the digit to the result string\n        else:\n            result += digit\n    # Convert the result string to an integer and add 1 to it\n    result = int(result) + 1\n    # Return the result\n    return result",
        "test": "assert rearrange_bigger(1234567890) == 1234567890",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the smallest k elements\n    min_heap = []\n    for i in range(k):\n        heapq.heappush(min_heap, (float('inf'), None))\n\n    # Iterate through the first array and for each element, find the smallest k elements from the second array\n    for num1 in nums1:\n        # Initialize the smallest k elements to infinity\n        smallest_k = [float('inf')] * k\n\n        # Iterate through the second array and for each element, find the smallest k elements from the first array\n        for num2 in nums2:\n            # Calculate the sum of the current element and the smallest k elements from the second array\n            current_sum = num1 + num2\n\n            # If the current sum is smaller than the smallest k elements from the second array, update the smallest k elements from the second array\n            if current_sum < smallest_k[0]:\n                smallest_k = [current_sum] + smallest_k[1:]\n\n            # If the current sum is equal to the smallest k elements from the second array, add the current element to the smallest k elements from the second array\n            elif current_sum == smallest_k[0]:\n                smallest_k.append(num1)\n\n            # If the current sum is greater than the smallest k elements from the second array, remove the smallest k elements from the second array and add the current element to the smallest k elements from the second array\n            else:\n                smallest_k = [current_sum] + smallest_k[1:]\n\n        # Add the smallest k elements from the second array to the min heap\n        for i in range(k):\n            heapq.heappush(min_heap, smallest_k[i])\n\n    # Extract the k smallest elements from the min heap and return them as a list\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(min_heap)[1])\n    return result",
        "test": "assert k_smallest_pairs([1,7,11], [2,4,6], 4) == [[1,2],[1,4],[1,6],[7,2],[7,4],[7,6]]",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == 120",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Convert the first letter of each word to uppercase\n    words[0] = words[0].capitalize()\n    # Join the words back into a camel case string\n    camel_case = ''.join(words)\n    return camel_case",
        "test": "assert snake_to_camel(\"snake_case_string_with_mixed_case\") == \"snakeCaseStringWithMixedCase\"",
        "num_ids": 205,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13]) == [1, 3, 5, 7, 11, 12, 13]",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == (3, 4)",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3,4,5], [2,3,4,5,6]) == True",
        "num_ids": 160,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max(max1 * max2, min1 * min2)",
        "test": "assert max_Product([-1, -2, -3, -4, -5]) == (-2, -6)",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i][0])\n    return common_elements",
        "test": "assert group_tuples([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)]) == [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)]",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem",
        "test": "assert Find_Max([1, 2]) == 2",
        "num_ids": 152,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "test": "assert round_and_sum([100, 200, 300, 400, 500]) == 50000",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum",
        "test": "assert cube_Sum(1) == 0",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]",
        "test": "assert concatenate_tuple(('python', 'programming')) == 'pythonprogramming'",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes",
        "test": "assert find_Average_Of_Cube(4) == 0",
        "num_ids": 151,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list",
        "test": "assert extract_rear(('hello', 'world', 'python', 'programming', 'is', 'fun')) == ('world', 'programming', 'is', 'fun')",
        "num_ids": 108,
        "indeed": true
    },
    {
        "number": 425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, 4, 5], 5) == 1",
        "num_ids": 183,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.sub() function to replace the matched pattern with the desired format\n    return re.sub(pattern, r'\\3-\\2-\\1', dt)",
        "test": "assert change_date_format('2021-01-01') == '01-01-2021'",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "test": "assert shell_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]",
        "num_ids": 203,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the elementwise and tuples\n    and_list = []\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Extract the corresponding element from the second tuple\n        j = test_tup2[i]\n        # Calculate the elementwise and of the corresponding elements\n        and_val = test_tup1[i] & j\n        # Append the elementwise and value to the and_list\n        and_list.append(and_val)\n    # Return the and_list as a tuple\n    return tuple(and_list)",
        "test": "assert and_tuples((1, 2, 3), (4, 5, 6)) == ((1, 4), (2, 5), (3, 6))",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is:\", x1)\n        print(\"The directrix of the parabola is:\", x2)\n    elif discriminant == 0:\n        x = -b/(2*a)\n        print(\"The directrix of the parabola is:\", x)\n    else:\n        print(\"The parabola has no real roots.\")",
        "test": "assert parabola_directrix(4, 5, 6) == 1.5",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3], [3, 4, 5]) == True",
        "num_ids": 156,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the length of the trapezium\n    length = 0.5 * (base1 + base2) * height\n    \n    # Calculate the median length of the trapezium\n    median = length * 0.5\n    \n    return median",
        "test": "assert median_trapezium(10,11,12) == 11.0",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 5) == False",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_match_one(\"abababbbbbbabababbbbbb\") == True",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 94,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([1, 2, 3, 4, 5, 6]) == [-1, -2, -3, -4, -5]",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str",
        "test": "assert remove_odd(\"12345\") == \"12345\"",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]) == 5",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result",
        "test": "assert multiple_to_single([1, 2, 3, 4, 5]) == 120",
        "num_ids": 81,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|",
        "test": "assert find_adverb_position(\"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\") == [(1, 'quick'), (2, 'brown'), (3, 'fox'), (4, 'jumps'), (5, 'over'), (6, 'lazy'), (7, 'dog')]",
        "num_ids": 1332,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2",
        "test": "assert surfacearea_cube(1) == 6, \"The surface area of a cube with side length 1 should be 6.\"",
        "num_ids": 164,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list\n    nums_list = list(nums)\n\n    # Initialize the count of positive numbers to 0\n    count = 0\n\n    # Iterate through the list and count the number of positive numbers\n    for num in nums_list:\n        if num > 0:\n            count += 1\n\n    # Calculate the ration of positive numbers\n    ration = count / len(nums_list)\n\n    # Return the ration of positive numbers\n    return ration",
        "test": "assert positive_count([1, 2, 3, 4, 5, 6, 7]) == 0.3333333333333333",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest",
        "test": "assert largest_neg([1, 2, 3, 4, 5, 6]) == -6",
        "num_ids": 157,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = test_list[i][:j]\n                break\n    return test_list",
        "test": "assert trim_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)], 5) == [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_dict.update(lst)\n    return count_dict",
        "test": "assert count_Occurrence((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6]) == Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1})",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum",
        "test": "assert cal_sum(1) == 1",
        "num_ids": 112,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of strings of the specified size.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings",
        "test": "assert extract_string(['hello', 'world', 'python', 'programming', 'language'], 7) == ['python', 'programming', 'language']",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    return text2",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"",
        "num_ids": 133,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0",
        "test": "assert loss_amount(1000, 500) == 500",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum",
        "test": "assert sumofFactors(40) == 120, \"sumofFactors(40) should return 120\"",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\") == True",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None",
        "test": "assert check_monthnumb_number(1) == True",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]",
        "num_ids": 92,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist",
        "test": "assert Find_Min([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5]",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(2,3) == 6, \"rectangle_area(2,3) should return 6\"",
        "num_ids": 157,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Use the pattern to find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # Loop through the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1",
        "test": "assert remove_uppercase(\"Hello, WORLD!\") == \"Hello World\"",
        "num_ids": 181,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([1, [2, 3], 4, [5, 6, 7]]) == [1, 2, 4, 5]",
        "num_ids": 86,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"Python is a cool language\") == 10",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Loop through each element in the list\n    for i in range(len(list1)):\n        # Initialize an empty list to store the remaining elements\n        remaining = list1[:i] + list1[i+1:]\n\n        # Loop through each remaining element\n        for j in range(len(remaining)):\n            # Append the combination to the list of combinations\n            combinations.append([list1[i], remaining[j]])\n\n    # Return the list of combinations\n    return combinations",
        "test": "assert combinations_list([1, 2, 3, 4, 5, 6]) == [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (5, 6)]",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product",
        "test": "assert max_subarray_product([2, 3, -2, 4, -1]) == 6",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    else:\n        for key, value in dict.items():\n            if value!= dict[key]:\n                return False\n        return True",
        "test": "assert check_value({'a': 1, 'b': 2, 'c': 3}, 1) == True",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_product_so_far = arr[0]\n        max_product_ending_here = arr[0]\n        for i in range(1, n):\n            max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n            max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        return max_product_so_far",
        "test": "assert max_product([2, 3, -2, 4]) == 6",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return test_tup[0] + test_tup[1] + add_pairwise(test_tup[2:])",
        "test": "assert add_pairwise((10, 11, 12)) == 33",
        "num_ids": 159,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product",
        "test": "assert find_remainder([1, 2, 3], 10) == 6",
        "num_ids": 135,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 162,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of elements from both lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)",
        "test": "assert tuple_intersection([(1, 2, 3), (4, 5, 6), (7, 8, 9)], [(3, 4, 5), (6, 7, 8), (9, 10, 11)]) == [(3, 4, 5)]",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello\", \"o\", \"x\") == \"hxxx\"",
        "num_ids": 120,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "test": "assert sort_counter({'a': 3, 'b': 1, 'c': 2}) == [('b', 1), ('c', 2), ('a', 3)]",
        "num_ids": 104,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n    # Calculate the sum of the largest and smallest values\n    sum_of_largest_smallest = largest + smallest\n    # Return the sum of the largest and smallest values\n    return sum_of_largest_smallest",
        "test": "assert big_sum([1, 2, 3, 4, 5, 6, 7]) == 28",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"Hello World\") == \"hello world\"",
        "num_ids": 94,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Use the pattern to find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # Loop through the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1",
        "test": "assert remove_lowercase(\"Python is awesome!!!\") == \"Pythn is awesom!!!\"",
        "num_ids": 199,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Find the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to an integer\n    first_int = int(first_char)\n    # Return the first integer\n    return first_int",
        "test": "assert first_Digit(12345) == 1",
        "num_ids": 160,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 196,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    return sum_cubes - sum_natural",
        "test": "assert difference(5) == 125, \"The difference between the sum of cubes of the first 5 natural numbers and the sum of the first 5 natural numbers is incorrect.\"",
        "num_ids": 134,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,2,3,4,5], 0) == 0",
        "num_ids": 184,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)",
        "test": "assert toggle_string(\"Hello World\") == \"hELLO wORLD\"",
        "num_ids": 124,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n\n    # Calculate the per-digit difference between the two lists\n    diff = [abs(digit1 - digit2) for digit1, digit2 in zip(digits1, digits2)]\n\n    # Calculate the sum of the per-digit differences\n    return sum(diff)",
        "test": "assert digit_distance_nums(1234, 1234) == 0",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum",
        "test": "assert max_sub_array_sum([1, -2, 3, 10, -4, 7, 2, -5], 6) == 30",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    # Output the union list\n    print(union_list)",
        "test": "assert union_elements((1, 2, 3), (4, 5, 6), (7, 8, 9)) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length",
        "test": "assert Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8]) == 4",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values('The quick brown \"fox\" jumps over the lazy dog.') == ['quick', 'brown', 'fox', 'jumps', 'over']",
        "num_ids": 89,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5], 5) == 10",
        "num_ids": 188,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 135,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each character in the string\n    for char in num_str:\n        # Convert the character to an integer and add it to the sum\n        sum += int(char)\n    # Return the sum\n    return sum",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 159,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 155,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 52,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "test": "assert sort_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 184,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h",
        "test": "assert surfacearea_cylinder(4,5) == 1252.6370614359172, \"The surface area of a cylinder with radius 4 and height 5 is incorrect.\"",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True",
        "test": "assert is_Sub_Array([1,2,3,4,5], [1,2,3,4]) == False",
        "num_ids": 192,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string\n    n = str(n)\n    # Find the length of the string\n    length = len(n)\n    # Find the last digit of the factorial\n    last_digit = int(n[length-1])\n    # Return the last digit\n    return last_digit",
        "test": "assert last_Digit_Factorial(12345) == 5, \"last_Digit_Factorial(12345) should return 5\"",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Loop through each list and add its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 182,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "test": "assert find_dissimilar((1, 2, 3), (2, 1, 3)) == (1,)",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple\n\ndef is_even(num):\n    return num % 2 == 0",
        "test": "assert even_ele((1, (2, 3, 4, 5), 6, (7, 8, 9, 10)), lambda x: x % 2 == 0) == (1, (2, 4, 6), 8, (10,))",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the pyramid\n    surface_area = (b*s**2) + (b*s) + (b**2)\n    return surface_area",
        "test": "assert surface_Area(5,10) == 50, \"The surface area of a square pyramid with a base edge of 5 and height of 10 is not correct.\"",
        "num_ids": 118,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True, \"my_dict({}) should return True\"",
        "num_ids": 114,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 123,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # Use the re.findall() function to find all the matches in the text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the positions of the matches\n    positions = []\n    # Loop through the matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    # Return the list of positions of the matches\n    return positions",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy dog. The dog is not lazy. The quick brown fox jumps over the lazy dog. The dog is not lazy.\") == [(10, 13), (30, 33), (50, 53), (70, 73)]",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    for item in items:\n        # If the heap is full, remove the smallest item from the heap\n        if len(min_heap) == n:\n            heapq.heappop(min_heap)\n        # Add the current item to the heap\n        heapq.heappush(min_heap, item)\n    # Return the n most expensive items in the heap\n    return min_heap",
        "test": "assert expensive_items([10, 20, 30, 40, 50], 5) == [50, 40, 30, 20, 10]",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Error: n is greater than the length of the list.\"\n    else:\n        return l[:n] + l[n:]",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 3) == [1, 2, 3, 4, 5]",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 136,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        return max(nums) - min(nums)",
        "test": "assert big_diff([10, 20, 30, 40, 50]) == 40",
        "num_ids": 186,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store perfect squares\n    perfect_squares_list = []\n    \n    # loop through the range of numbers between a and b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        if num**0.5 == int(num**0.5):\n            # if it is, add it to the list of perfect squares\n            perfect_squares_list.append(num)\n    \n    # return the list of perfect squares\n    return perfect_squares_list",
        "test": "assert perfect_squares(1, 1) == [1]",
        "num_ids": 225,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "test": "assert polar_rect(7,8) == (7,8)",
        "num_ids": 125,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list must have at least two elements.\"\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList",
        "test": "assert swap_List([1]) == [1]",
        "num_ids": 200,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)",
        "test": "assert binomial_Coeff(5,2) == 15",
        "num_ids": 106,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+', '', ip)\n    return ip",
        "test": "assert removezero_ip(\"192.168.0.100\") == \"192.168.0.100\"",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return abs(even_num - odd_num)",
        "test": "assert diff_even_odd([2, 4, 6, 8, 10, 12]) == 3",
        "num_ids": 200,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables to store the count of swaps required\n    count = 0\n    i = 0\n    j = 0\n\n    # Iterate through the binary strings from right to left\n    while i < len(str1) or j < len(str2):\n        # If the current digits are not equal, swap them\n        if str1[i]!= str2[j]:\n            count += 1\n            str1[i], str2[j] = str2[j], str1[i]\n\n        # Increment the indices of the current digits\n        i += 1\n        j += 1\n\n    # Return the count of swaps required\n    return count",
        "test": "assert min_Swaps(\"101010\", \"101010\") == 0",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None",
        "test": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5) == 10",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number_str = str(number)\n    # Initialize the sum of the digits to 0\n    sum_of_digits = 0\n    # Loop through each digit in the number\n    for digit in number_str:\n        # Convert the digit to an integer and add it to the sum of digits\n        sum_of_digits += int(digit)\n    # Check if the sum of digits is equal to the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(123) == False, \"The number 123 is an armstrong number.\"",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average",
        "test": "assert sum_average(5) == (15, 3.0)",
        "num_ids": 146,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True, \"is_Even(2) should return True\"",
        "num_ids": 91,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 129,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid_numbers.append(i)\n        elif i == 2:\n            lucid_numbers.append(i)\n        elif i % 2 == 0:\n            lucid_numbers.append(i)\n        else:\n            lucid_numbers.append(i+1)\n    return lucid_numbers",
        "test": "assert get_ludic(100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)",
        "test": "assert reverse_words(\"the quick brown fox jumps over the lazy dog\") == \"dog lazy over jumps fox brown quick the\"",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 102,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180",
        "test": "assert radian_degree(90) == math.pi/2",
        "num_ids": 108,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"hello world\", r\"hello\") == (\"hello\", 0, 5)",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)",
        "test": "assert bell_Number(3) == 14",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 0) == [2, 3, 4, 5]",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(max_val, max(test_list[i]))\n        else:\n            max_val = max(max_val, max(test_list[i]))\n    return max_val",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 9",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst",
        "test": "assert merge([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]) == [[1, 3], [2, 4], [5, 6], [7, 8], [9, 10], [11, 12]]",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum",
        "test": "assert cummulative_sum([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18)]) == 235",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        average = sum(num) / len(num)\n        averages.append(average)\n    return averages",
        "test": "assert average_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [2.0, 5.0, 8.0]",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "test": "assert tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3)",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    curr_pos = 0\n    curr_height = 0\n    # Loop through the steps\n    for i in range(steps):\n        # If the current position is greater than the desired height, then we need to jump\n        if curr_pos > d:\n            jumps += 1\n            # Update the current position and height\n            curr_pos -= d\n            curr_height += 1\n        # If the current position is less than or equal to the desired height, then we can move one step\n        else:\n            curr_pos += 1\n            curr_height += 1\n    # Return the number of jumps required\n    return jumps",
        "test": "assert min_Jumps(10, 4) == 6",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([1,2,3],[4,5,6],[7,8,9],[10,11,12]) == [0.2, 0.4, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2]",
        "num_ids": 287,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty list to store the numbers\n    num_list = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # if the character is not a number, append it to the end of the string\n        else:\n            test_str += char\n    # join the num_list into a string and return it\n    return ''.join(num_list)",
        "test": "assert move_num(\"123\") == \"123\"",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables\n    max_size = 0\n    current_size = 0\n    current_sum = 0\n\n    # Iterate through the list\n    for i in range(len(a)):\n        # Check if the current number is divisible by the previous number\n        if a[i] % a[i-1] == 0:\n            current_size += 1\n            current_sum += a[i]\n        else:\n            # If the current number is not divisible by the previous number, update the maximum size and reset the current size and sum\n            if current_size > max_size:\n                max_size = current_size\n            current_size = 1\n            current_sum = a[i]\n\n    # Check if the last number is divisible by the previous number\n    if a[-1] % a[-2] == 0:\n        current_size += 1\n        current_sum += a[-1]\n    else:\n        # If the last number is not divisible by the previous number, update the maximum size and reset the current size and sum\n        if current_size > max_size:\n            max_size = current_size\n        current_size = 1\n        current_sum = a[-1]\n\n    # Return the maximum size\n    return max_size",
        "test": "assert largest_subset([1, 2, 3, 4, 5]) == 2",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n    # Find the median index\n    median_index = n // 2\n    # Return the median value\n    return merged_list[median_index]",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 6) == 4",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1,2,3,4,5], 2) == [1, 4, 9, 16, 25]",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 88,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list must have at least two elements.\"\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList",
        "test": "assert swap_List([1]) == [1]",
        "num_ids": 201,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2 * r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (semi_perimeter * (semi_perimeter - 2 * r)) ** 0.5\n    \n    return area",
        "test": "assert triangle_area(4) == 15.707963267948966, \"The area of the largest triangle that can be inscribed in a semicircle with a radius of 4 should be 15.707963267948966.\"",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1",
        "test": "assert find_First_Missing([1,2,3,4,5,6,7,8]) == 9",
        "num_ids": 184,
        "indeed": true
    },
    {
        "number": 628,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]",
        "num_ids": 194,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 9:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 9:\n        adj.append((x, y+1))\n    return adj + sub",
        "test": "assert adjac((0,0), [(0,0), (0,0), (0,0)]) == [(0,1), (1,0), (0,-1), (-1,0), (1,1), (-1,-1), (1,-1), (-1,1)]",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 132,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        for i in range(len(num_list)-1, zero_index, -1):\n            num_list[i], num_list[i-1] = num_list[i-1], num_list[i]\n    return num_list",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum",
        "test": "assert pair_xor_Sum([1,2,3,4,5,6,7,8], 8) == 55",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    hq.heapify(iterable)\n    # Extract the elements from the heap and append them to a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list",
        "test": "assert heap_sort([1, 5, 3, 7, 2]) == [1, 2, 3, 5, 7]",
        "num_ids": 196,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(100, 50) == True, \"noprofit_noloss(100, 50) should return True\"",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Fahrenheit\n    t = (t * 9/5) + 32\n    \n    # Calculate the wind chill index\n    wci = 35.74 + 0.6215 * v - 35.75 * math.exp((17.625 * t) / (t + 243.5))\n    \n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n    \n    return wci",
        "test": "assert wind_chill(10, -10) == -5",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of the names\n    total_length = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it and move on to the next name\n            continue\n        # If the name does not start with a lowercase letter, add its length to the total length\n        total_length += len(name)\n    \n    # Return the total length of the names after removing the lowercase ones\n    return total_length",
        "test": "assert sample_nam(['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Henry']) == 12",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)",
        "test": "assert remove_parenthesis(\"hello (world) (python) (programming) (language)\") == \"hello world python programming language\"",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the first two nonagonal numbers\n    a = 1\n    b = 4\n    \n    # Loop through the remaining nonagonal numbers\n    for i in range(2, n):\n        # Calculate the next nonagonal number\n        c = a + b\n        \n        # Update the values of a and b\n        a = b\n        b = c\n        \n        # Print the current nonagonal number\n        print(c)",
        "test": "assert is_nonagonal(4) == 22",
        "num_ids": 167,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_wordz_middle(\"hello z z z world\") == True",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n    # Reverse the array from k to n-1\n    input[k:] = input[k:][::-1]\n    # Return the reversed array\n    return input",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of tuples\n    test_list = list(test_dict.items())\n    # Add the list of tuples to the tuple\n    new_tup = test_tup + test_list\n    # Return the new tuple\n    return new_tup",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 4, 'b': 5}) == (1, 2, 3, {'a': 4, 'b': 5})",
        "num_ids": 149,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]) + cost[i][j]\n            elif j == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            if i == N-1 and j == N-1:\n                avg = dp[i][j]\n                if avg > max_avg:\n                    max_avg = avg\n    return max_avg",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]) == 10.0",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "test": "assert filter_data({'Alice': (1.75, 65.0), 'Bob': (1.65, 55.0), 'Charlie': (1.8, 70.0), 'David': (1.7, 60.0), 'Eve': (1.6, 50.0)}, 1.7, 60.0) == {'Alice': (1.75, 65.0), 'Charlie': (1.8, 70.0)}",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 6]) == [0, 1, 2, 3, 4]",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the sum of the digit raised to the power\n        digit_sum = digit_int ** power\n        # Add the digit sum to the sum\n        sum += digit_sum\n    # Return the sum\n    return sum",
        "test": "assert power_base_sum(12345, 4) == 12345, \"The sum of digits of 12345 to the power of 4 is not correct.\"",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "test": "assert extract_quotation(\"This is a sample text with a quotation mark \\\"Hello, world!\\\". It also has a comma, and a period.\") == \"Hello, world!\"",
        "num_ids": 98,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "test": "assert multiply_elements((1,2,3,4,5,6,7,8)) == (1,4,9,16,25,36,49,64)",
        "num_ids": 270,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 216,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))",
        "test": "assert consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area",
        "test": "assert lateralsurface_cone(4,5) == math.pi*r**2 + math.pi*r*h + math.pi*h**2 + math.pi*r*h, \"The lateral surface area of a cone with radius 4 and height 5 is not correct.\"",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match all occurrences of spaces, commas, or dots\n    pattern = r'[\\s,\\.]'\n    # Use the re.sub() function to replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)",
        "test": "assert replace_specialchar(\"Hello, world!\") == \"Hello:world!\"",
        "num_ids": 112,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index variable to -1\n    index = -1\n    \n    # Iterate through the array\n    for i in range(len(A)):\n        # If the current element is equal to the target number, update the index variable\n        if A[i] == x:\n            index = i\n            break\n    \n    # Return the index of the first occurrence of the target number\n    return index",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 232,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the sum of products of subarrays\n    sum_prod = 0\n    # Initialize the product of subarrays\n    prod = 1\n    # Initialize the sum of subarrays\n    sum_arr = 0\n    # Initialize the sum of squares of subarrays\n    sum_sq_arr = 0\n    # Initialize the sum of squares of products of subarrays\n    sum_sq_prod = 0\n    # Initialize the sum of products of squares of subarrays\n    sum_prod_sq = 0\n    # Initialize the sum of products of squares of products of subarrays\n    sum_prod_sq_prod = 0\n    # Initialize the sum of products of squares of products of squares of subarrays\n    sum_prod_sq_prod_sq = 0\n    # Initialize the sum of products of squares of products of squares of products of subarrays\n    sum_prod_sq_prod_sq_prod = 0\n    # Initialize the sum of products of squares of products of squares of products of squares of subarrays\n    sum_prod_sq_prod_sq_prod_sq = 0\n    # Initialize the sum of products of squares of products of squares of products of squares of products of subarrays\n    sum_prod_sq_prod_sq_prod_sq_prod = 0\n    # Initialize the sum of products of squares of products of squares of products of squares of products of squares of subarrays\n    sum_prod_sq_prod_sq_prod_sq_prod_sq = 0\n    # Initialize the sum of products of squares of products of squares of products of squares of products of squares of products of subarrays\n    sum_prod_sq_prod_sq_prod_sq_prod_sq_prod = 0\n    # Initialize the sum of products of squares of products of squares of products of squares of products of squares of products of squares of subarrays\n    sum_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq = 0\n    # Initialize the sum of products of squares of products of squares of products of squares of products of squares of products of squares of products of subarrays\n    sum_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod = 0\n    # Initialize the sum of products of squares of products of squares of products of squares of products of squares of products of squares of products of squares of subarrays\n    sum_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq = 0\n    # Initialize the sum of products of squares of products of squares of products of squares of products of squares of products of squares of products of squares of products of subarrays\n    sum_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod = 0\n    # Initialize the sum of products of squares of products of squares of products of squares of products of squares of products of squares of products of squares of products of squares of subarrays\n    sum_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq = 0\n    # Initialize the sum of products of squares of products of squares of products of squares of products of squares of products of squares of products of squares of products of squares of products of subarrays\n    sum_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod = 0\n    # Initialize the sum of products of squares of products of squares of products of squares of products of squares of products of squares of products of squares of products of squares of products of squares of subarrays\n    sum_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq = 0\n    # Initialize the sum of products of squares of products of squares of products of squares of products of squares of products of squares of products of squares of products of squares of products of squares of products of subarrays\n    sum_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod_sq_prod = 0\n    # Initialize the sum of products of squares of products of squares of products of squares of products of squares of products of squares of products of squares of products of squares of products of squares of products",
        "test": "assert sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8]) == 15",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n    \n    # Toggle the middle bits\n    middle_bits = n ^ (first_bit | last_bit)\n    \n    # Combine the first and last bits with the middle bits\n    result = first_bit | middle_bits | last_bit\n    \n    return result",
        "test": "assert set_middle_bits(25) == 24",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x) - 1",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 10) == 7",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"apple\") == True",
        "num_ids": 121,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the smallest triangular number with n digits to 10^n\n    smallest_triangular = 10**n\n    \n    # Initialize the index of the smallest triangular number to 0\n    index = 0\n    \n    # Loop through all triangular numbers with n digits\n    for i in range(1, smallest_triangular):\n        # Check if the triangular number is a multiple of 10^n\n        if i % (10**n) == 0:\n            # If it is, update the smallest triangular number and its index\n            if i < smallest_triangular:\n                smallest_triangular = i\n                index = i // (10**n)\n    \n    # Return the index of the smallest triangular number\n    return index",
        "test": "assert find_Index(1) == 0",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Loop through the tuple\n    for i in range(len(test_tup)):\n        # If the current index is odd, add the current element as the key and the next element as the value\n        if i % 2 == 1:\n            result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "test": "assert tuple_to_dict((1, 2, 3, 4, 5)) == {1: 2, 3: 4, 5: 3}",
        "num_ids": 189,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])",
        "test": "assert all_Characters_Same(\"programming\") == True",
        "num_ids": 131,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2",
        "test": "assert area_tetrahedron(4) == 24, \"area_tetrahedron(4) should be 24\"",
        "num_ids": 163,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3)) == False",
        "num_ids": 119,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))",
        "test": "assert divisible_by_digits(100, 999) == [123, 234, 345, 456, 567, 678, 789, 890, 901, 1012, 1123, 1234, 1345, 1456, 1567, 1678, 1789, 1890, 1901, 2012, 2123, 2234, 2345, 2456, 2567, 2678, 2789, 2890, 2901, 3012, 3123, 3234, 3345, 3456, 3567, 3678, 3789, 3890, 3901, 4012, 4123, 4234, 4345, 4456, 4567, 4678, 4789, 4890, 4901, 5012, 5123, 5234, 5345, 5456, 5567, 5678, 5789, 5890, 5901, 6012, 6123, 6234, 6345, 6456, 6567, 6678, 6789, 6890, 6901, 7012, 7123, 7234, 7345, 7456, 7567, 7678, 7789, 7890, 7901, 8012, 8123, 8234, 8345, 8456, 8567, 8678, 8789, 8890, 8901, 9012, 9123, 9234, 9345, 9456, 9567, 9678, 9789, 9890, 9901]",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area",
        "test": "assert sector_area(1,360) == None",
        "num_ids": 196,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store lengths of LCS of subproblems\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # fill the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # print the LCS\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # reverse the LCS and return it\n    return ''.join(reversed(lcs))",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GXTXAYB\") == \"GTAB\"",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with spaces\n    result =''.join(words)\n    return result",
        "test": "assert capital_words_spaces(\"This is a test string with spaces and numbers 123\") == \"This is a test string with spaces and numbers 123\"",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str",
        "test": "assert sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 85,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n//2)",
        "test": "assert check_min_heap_helper([1, 2, 3, 4, 5], 0) == True",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize minimum k value and minimum k index\n    min_k_val = float('inf')\n    min_k_index = -1\n\n    # Iterate through the sorted list of tuples\n    for i in range(len(test_list)):\n        # If the current tuple's second element is less than the minimum k value, update the minimum k value and index\n        if test_list[i][1] < min_k_val:\n            min_k_val = test_list[i][1]\n            min_k_index = i\n\n        # If the current tuple's second element is equal to the minimum k value and the index is less than K, update the minimum k index\n        elif test_list[i][1] == min_k_val and i < K:\n            min_k_index = i\n\n        # If the current tuple's second element is equal to the minimum k value and the index is equal to K, update the minimum k value\n        elif test_list[i][1] == min_k_val and i == K:\n            min_k_val = min(min_k_val, test_list[i][1])\n\n    # Return the minimum k value and index\n    return min_k_val, min_k_index",
        "test": "assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 5) == (1, 2, 3)",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [3, 4, 5]) == [3]",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for i in range(2, len(numbers)):\n            if numbers[i] < smallest:\n                second_smallest = smallest\n                smallest = numbers[i]\n            elif numbers[i] < second_smallest and numbers[i]!= smallest:\n                second_smallest = numbers[i]\n        return second_smallest",
        "test": "assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8]) == 6",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"ababab\") == True",
        "num_ids": 118,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs(['abc', 'cba', 'bac', 'bca', 'cab', 'bac']) == 4",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each unique sublist\n    sublist_count = {}\n    \n    # Loop through each element in the list\n    for element in list1:\n        # Convert the element to a tuple and check if it is already in the dictionary\n        if tuple(element) in sublist_count:\n            # If it is, increment its count by 1\n            sublist_count[tuple(element)] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            sublist_count[tuple(element)] = 1\n    \n    # Return the dictionary of sublist counts\n    return sublist_count",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    int_part = parts[0]\n    dec_part = parts[1]\n    if len(int_part) > 10 or len(dec_part) > 2:\n        return False\n    for char in int_part:\n        if not char.isdigit():\n            return False\n    for char in dec_part:\n        if not char.isdigit() and char!= '.':\n            return False\n    return True",
        "test": "assert is_decimal(\"12.34\") == True",
        "num_ids": 212,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True",
        "test": "assert unique_Element([1, 2, 3, 4, 5]) == True",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\"",
        "test": "assert check_monthnumber_number(1) == True, \"Month 1 should have 30 days\"",
        "num_ids": 214,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the first and last elements\n    min_diff = abs(arr[n-1] - arr[0])\n\n    # Iterate through the array from the second element to the last element\n    for i in range(1, n-1):\n        # Calculate the difference between the current element and the previous element\n        diff = abs(arr[i] - arr[i-1])\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff",
        "test": "assert find_min_diff([1, 3, 5, 7, 9], 5) == 2",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 116,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * is_polite(n-1) + 1",
        "test": "assert is_polite(1) == 1",
        "num_ids": 134,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 190,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 6) == 2",
        "num_ids": 217,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list",
        "test": "assert Diff([1,2,3,4,5], [1,2,3,4,5]) == []",
        "num_ids": 172,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum",
        "test": "assert odd_num_sum(10) == 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert check_expression('(a+b)*c') == True",
        "num_ids": 133,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)",
        "test": "assert remove_length(\"hello world\", 0) == \"\"",
        "num_ids": 146,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None",
        "test": "assert occurance_substring(\"hello world\", \"goodbye\") == None",
        "num_ids": 159,
        "indeed": true
    },
    {
        "number": 775,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True",
        "test": "assert odd_position([1, 2, 3, 4, 5]) == True",
        "num_ids": 162,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"apple\") == 0",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    # Iterate through the unique set and add its elements to the sum_non_repeated variable\n    for element in unique_set:\n        sum_non_repeated += element\n    # Return the sum of non-repeated elements\n    return sum_non_repeated",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 235,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))",
        "test": "assert pack_consecutive_duplicates([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12]) == [[1, 2, 3, 4, 5, 5, 6, 7], [8, 9, 10, 11, 12]]",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert the list to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in counts:\n            # If it is, increment its count by 1\n            counts[tuple(sublist)] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n    # Return the dictionary of counts\n    return counts",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a set of tuples to store the unique tuples in the list\n    unique_tuples = set(test_list)\n    # Create a set of sums to store the unique sums in the list\n    unique_sums = set(sum(t) for t in unique_tuples)\n    # Create a list to store the combinations of sums with tuples\n    combinations_list = []\n    # Loop through the unique sums and find the combinations of sums with tuples\n    for sum_ in unique_sums:\n        # Create a list to store the tuples that have the given sum\n        tuples_with_sum = [t for t in unique_tuples if sum(t) == sum_]\n        # Loop through the tuples and find the combinations of tuples with the given sum\n        for i in range(len(tuples_with_sum)):\n            for j in range(i+1, len(tuples_with_sum)):\n                # Create a tuple of the combination of tuples with the given sum\n                combination = (tuples_with_sum[i], tuples_with_sum[j])\n                # Add the combination to the list of combinations of sums with tuples\n                combinations_list.append(combination)\n    # Return the list of combinations of sums with tuples\n    return combinations_list",
        "test": "assert find_combinations([(1, 2), (3, 4), (5, 6)]) == [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (5, 6)]",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False",
        "test": "assert count_divisors(48) == 16, \"count_divisors(48) should return 16\"",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += arr[j-1]\n    return sum",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8]) == 35",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to float values\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n\n    # Find the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate the value of the hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (g - b) / diff\n    elif max_val == g:\n        hue = 2 + (b - r) / diff\n    else:\n        hue = 4 + (r - g) / diff\n\n    # Calculate the value of the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_val\n\n    # Calculate the value of the value\n    value = max_val\n\n    # Convert hue, saturation, and value to percentages\n    hue = hue * 60\n    saturation = saturation * 100\n    value = value * 100\n\n    # Return the hsv values as a tuple\n    return (hue, saturation, value)",
        "test": "assert rgb_to_hsv(255, 255, 0) == (60, 1, 1)",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product *= num\n            \n    return product",
        "test": "assert mul_even_odd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 30",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Convert each string to an integer and append to a new list\n    int_list = [int(i) for i in str_list]\n    \n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)",
        "test": "assert tuple_str_int(('10', '11', '12')) == (10, 11, 12)",
        "num_ids": 211,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 10) == 9",
        "num_ids": 189,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_match_three(\"abbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabb",
        "num_ids": 1092,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + str(test_list))\n    return new_tuple",
        "test": "assert new_tuple(['apple', 'banana', 'cherry'], 'orange') == ('apple', 'banana', 'cherry', 'orange')",
        "num_ids": 90,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2])) % 2 == 1:\n            return False\n    return True",
        "test": "assert even_position([1, 3, 5, 7, 9]) == False",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup",
        "test": "assert remove_nested((1, (2, (3, (4, (5, 6))))))) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3",
        "num_ids": 199,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the last position to -1\n    last_position = -1\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is equal to the given element\n        if arr[i] == x:\n            # Update the last position to the current index\n            last_position = i\n\n    # Return the last position\n    return last_position",
        "test": "assert last([1,2,3,4,5], 6) == -1, \"last([1,2,3,4,5], 6) should return -1\"",
        "num_ids": 278,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_starta_endb(\"ab\") == False",
        "num_ids": 138,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6, \"The sum of all items in the given dictionary is not correct.\"",
        "num_ids": 88,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 113,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15, \"The sum of [1, 2, 3, 4, 5] should be 15.\"",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    # Pad the binary string with zeros to make it d bits long\n    padded_str = '0' * d + binary_str\n    # Convert the padded string back to an integer\n    rotated_num = int(padded_str, 2)\n    return rotated_num",
        "test": "assert left_rotate(123456789, 32) == 5678901234",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\"",
        "num_ids": 110,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count",
        "test": "assert test_three_equal(1,2,3) == 2",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the minimum element in the array\n    min_element = min(arr)\n    # Initialize the count of rotations to 0\n    count = 0\n    # Traverse the array from the minimum element to the last element\n    for i in range(min_element, n):\n        # If the element at index i is greater than the element at index i-1, increment the count of rotations\n        if arr[i] > arr[i-1]:\n            count += 1\n    # Return the count of rotations\n    return count",
        "test": "assert count_rotation([1, 2, 3, 4, 5, 6, 7, 0]) == 1",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # Check if the number is a perfect square\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 1\n    \n    return False",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2, 4, 6, 8, 10]) == True",
        "num_ids": 173,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_list = [lists[i][j]]\n            elif lists[i][j] == max_sum:\n                max_list.append(lists[i][j])\n    return max_list",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run",
        "test": "assert max_run_uppercase(\"Python is awesome!!!\") == 6",
        "num_ids": 179,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 145,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(K):\n            if test_tup[i] not in test_tup[:K]:\n                return False\n        return True",
        "test": "assert check_K((1, 2, 3), 2) == True",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 2, 3), (4, 5, 6)) == True",
        "num_ids": 198,
        "indeed": false
    }
]