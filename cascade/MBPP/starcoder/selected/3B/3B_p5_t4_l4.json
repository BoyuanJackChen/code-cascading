[
    {
        "number": 2,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements",
        "test": "assert similar_elements([1, 2, 3], [4, 5, 6]) == []",
        "num_ids": 817,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(2) == False",
        "num_ids": 941,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap of size n\n    heap = hq.nlargest(n, nums)\n    return heap",
        "test": "assert heap_queue_largest([1,5,3,7,9,2,4,6,8],0) == []",
        "num_ids": 1085,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Check if the two numbers differ at one bit position only or not\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Power_Of_Two(16) == True, \"is_Power_Of_Two(16) should be True\"",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = text.split()\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over the words and add them to the result if they are at least 4 characters long\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    # Return the list of words\n    return result",
        "test": "assert find_char_long(\"\") == []",
        "num_ids": 2742,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_Rotations(str):\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for c in str:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    \n    # Find the maximum frequency of any character in the string\n    max_freq = max(freq.values())\n    \n    # Find the minimum number of rotations required to get the same string\n    rotations = 0\n    while max_freq > 0:\n        if max_freq in freq:\n            max_freq = freq[max_freq] - 1\n        else:\n            max_freq = 0\n        rotations += 1\n    \n    return rotations",
        "test": "assert find_Rotations(\"abcd\") == 1",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', -1)\n    return s",
        "test": "assert remove_Occ(\"hello\", \"o\") == \"hell\" # remove last occurrence of \"o\" from \"hello\"",
        "num_ids": 810,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # Loop over each row of the matrix\n    for i in range(n):\n        # Initialize the row with the minimum element in it\n        min_row = i\n        # Loop over each element in the row\n        for j in range(i+1, n):\n            # If the current element is less than the minimum element in the row, update the minimum element\n            if M[j][i] < M[min_row][i]:\n                min_row = j\n        # Swap the minimum element in the row with the first element in the row\n        M[min_row], M[i] = M[i], M[min_row]\n    return M",
        "test": "assert sort_matrix([[1]]) == [[1]]",
        "num_ids": 1564,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume",
        "test": "assert find_Volume(3,4,5) == 60, \"find_Volume failed for input (3,4,5)\"",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define regular expression pattern to match sequences of lowercase letters\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Use re.search() function to check if the input string contains any sequences of lowercase letters joined with an underscore\n    result = re.search(pattern, text)\n    \n    # Return True if the input string contains any sequences of lowercase letters joined with an underscore and False otherwise\n    if result:\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"123abc\") == False",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter",
        "test": "assert square_perimeter(2) == 8, \"The perimeter of a square of side length 2 is incorrect.\"",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list of characters to be removed\n    remove_list = []\n    for char in string:\n        if char in remove_list:\n            remove_list.append(char)\n        else:\n            break\n\n    # Convert the first string into a list of characters\n    str_list = list(string)\n\n    # Remove the characters from the first string\n    for char in remove_list:\n        index = str_list.index(char)\n        del str_list[index]\n\n    # Convert the list of characters back to a string\n    result_string = ''.join(str_list)\n\n    return result_string",
        "test": "assert str_to_list(\"python is awesome\") == ['p', 'y', 't', 'h', 'o', 'n','', 'i','s','', 'a', 'w', 'e','s', 'o','m', 'e']",
        "num_ids": 1668,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5, 1]) == True",
        "num_ids": 939,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function checks if the given number is a woodball or not.\n    \"\"\"\n    if x % 3 == 0 and x % 7 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(1) == False, \"1 is a woodball\"",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if num == reverse - 1:\n        return True\n    else:\n        return False",
        "test": "assert rev(123) == False, \"Error in rev(123)\"",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def find_Max_Num(arr):\n    # Initialize variables\n    max_num = 0\n    num = 0\n    \n    # Iterate through each digit of the input list\n    for i in arr:\n        # Convert the digit to an integer and add it to the current number\n        num = num * 10 + int(i)\n        \n        # If the current number is greater than the previous maximum number, update the maximum number\n        if num > max_num:\n            max_num = num\n    \n    # Return the maximum number\n    return max_num",
        "test": "assert find_Max_Num([2, 4, 6, 8, 10]) == 10",
        "num_ids": 989,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(0,0) == False, \"Expected False, got {}\".format(opposite_Signs(0,0))",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Finding the maximum number of rows needed\n    max_rows = int(n**0.5) + 1\n\n    # Initializing the matrix to store octagonal numbers\n    oct_matrix = [[0 for i in range(max_rows)] for j in range(max_rows)]\n\n    # Assigning values to the matrix\n    for i in range(max_rows):\n        for j in range(max_rows):\n            if i == j or i+j == n-1 or i+j == n:\n                oct_matrix[i][j] = 1\n\n    # Printing the matrix\n    for row in oct_matrix:\n        print(row)\n\n    # Returning the nth octagonal number\n    return oct_matrix[max_rows-1][max_rows-1]",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    count = 0\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if s[j] == s[i]:\n                dp[i] += dp[j]\n                if dp[i] > count:\n                    count = dp[i]\n    return count",
        "test": "assert count_Substrings(\"world\") == 0, \"Wrong count\"",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs)",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "test": "assert max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 8",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Create a list of tuples containing the subject name and the marks obtained in that subject\n    sorted_subjects = sorted(subjectmarks, key=lambda x: x[1])\n    # Return the sorted list of tuples\n    return sorted_subjects",
        "test": "assert subject_marks([(85,'maths'), (90, 'english'), (75,'science'), (60, 'history'), (95, 'geography')]) == [('95', 'geography'), ('75','science'), ('85','maths'), ('90', 'english'), ('60', 'history')]",
        "num_ids": 856,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(data_list):\n        '''\n        Flatten a list by concatenating all its elements.\n        '''\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten_list(data_list)\n    sum_of_flattened_list = sum(flattened_list)\n    return sum_of_flattened_list",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15, \"The function should return the sum of all elements in the list.\"",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5, \"pos_count([1, 2, 3, 4, 5]) should return 5\"",
        "num_ids": 835,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function calculates the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n < 0:\n        return 0\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        return n * bell_number(n-1)",
        "test": "assert bell_number(1) == 1 # The only way to partition a set of Bell numbers is by partitioning each one into its own set",
        "num_ids": 1867,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True\n    elif A[1] > A[0]:\n        for i in range(len(A)-1):\n            if A[i+1] <= A[i]:\n                return False\n        return True\n    else:\n        for i in range(len(A)-1):\n            if A[i+1] >= A[i]:\n                return False\n        return True",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5, 4]) == False, \"test case 3 failed\"",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "test": "assert is_sublist([1,2,3], [1,2,3]) == True",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if there is at least one tuple in the input\n    if len(Input) == 0:\n        return False\n    \n    # Check if all the tuples in the input have the same length\n    length = len(Input[0])\n    for t in Input:\n        if len(t)!= length:\n            return False\n    \n    return True",
        "test": "assert find_equal_tuple([(1,2,3),(4,5,6),(7,8,9)]) == True",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_iter = 10\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1]:\n                nums[i], nums[i-1] = nums[i-1], nums[i]\n                swapped = True\n        \n        max_iter -= 1\n        if max_iter == 0:\n            return nums\n    \n    return nums",
        "test": "assert comb_sort([1]) == [1]",
        "num_ids": 1007,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def dif_Square(n):\n    '''\n    This function takes an integer as input and returns True if it can be represented as the difference of two squares. Otherwise, it returns False.\n    '''\n\n    if n % 4 == 0:\n        return False\n\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and n//i!= i:\n            return True\n        elif n % i == 0 and n//i == i:\n            continue\n    \n    return False",
        "test": "assert dif_Square(16) == False # 16 is not a square of any number",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Initialize variables\n    last_color = None\n    count = 0\n    \n    # Loop through colors and patterns arrays\n    for color in colors:\n        if color == last_color:\n            count += 1\n        else:\n            if patterns[count] == patterns[0]:\n                if patterns[count] == color:\n                    return False\n                else:\n                    last_color = color\n                    count = 1\n            else:\n                return False\n    \n    # Check if all patterns are used\n    if count == len(patterns):\n        return True\n    else:\n        return False",
        "test": "assert is_samepatterns([1, 2, 3], [1, 3, 2]) == False",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]) and all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 4) == []",
        "num_ids": 1376,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(23) == False, \"Function is_Diff should return False for 23\"",
        "num_ids": 575,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False",
        "test": "assert word_len(\"cat\") == True, \"The length of the word 'cat' should be odd.\"",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 4\n    else:\n        return 4 * (n - 1) + 3",
        "test": "assert tetrahedral_number(0) == 0",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    \n    # Using the formula for the volume of a sphere\n    vol = (4/3)*pi*(r**3)\n    \n    return vol",
        "test": "assert volume_sphere(1) == 4/3 * math.pi * (1**3), \"The function should return the correct volume of a sphere.\"",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0  \n    for char in strr:  \n        ascii_sum += ord(char)  \n    return chr(ascii_sum % 26 + ord('A'))",
        "test": "assert get_Char(\"Python\") == 109, \"The function should return the ASCII value of 'M' (109).\"",
        "num_ids": 731,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2, 1, 1]\n    for i in range(n-3):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]",
        "test": "assert sequence(1) == 1",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * r**2)",
        "test": "assert surfacearea_sphere(1.0) == math.pi*4.0, \"The surface area of a sphere with radius 1.0 should be pi*4.0\"",
        "num_ids": 881,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = n * (3 * n - 1) // 2\n    return hexagonal_number",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # Convert all dictionaries to sets\n    set1 = set(dict1.items())\n    set2 = set(dict2.items())\n    set3 = set(dict3.items())\n\n    # Merge the sets into a single set\n    merged_set = set1.union(set2, set3)\n\n    # Convert the merged set back to a dictionary\n    merged_dict = dict(merged_set)\n\n    return merged_dict",
        "test": "assert merge_dictionaries_three(ct.defaultdict(int), ct.defaultdict(int), ct.defaultdict(int)) == ct.defaultdict(int)",
        "num_ids": 1425,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)",
        "test": "assert freq_count(['apple', 'banana', 'cherry', 'apple', 'banana']) == {'apple': 2, 'banana': 2, 'cherry': 1}",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest_smallest = float('inf')\n    for i in range(N):\n        if i == 0:\n            closest_smallest = smallest\n        else:\n            closest_smallest = min(closest_smallest, smallest)\n        smallest = min(smallest, N-i)\n    return closest_smallest",
        "test": "assert closest_num(2) == 2, \"The function should return 2 for N=2.\"",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length",
        "test": "assert len_log([\"hello\", \"world\"]) == 5",
        "num_ids": 777,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for word in str1:\n        if word.find(sub_str)!= -1:\n            return True\n    return False",
        "test": "assert find_substring('hello world', 'foo') == False",
        "num_ids": 826,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return False\n    else: \n        for i in range(3, int(n ** 0.5) + 1, 2): \n            if n % i == 0: \n                return False\n        return True",
        "test": "assert is_undulating(0) == False, \"0 should not be undulating\"",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,3) == 8",
        "num_ids": 647,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]",
        "test": "assert index_minimum([(1, 3), (2, 1), (3, 4), (4, 2)]) == 2",
        "num_ids": 896,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count",
        "test": "assert divisor(1) == 1",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def frequency_lists(lst):\n    freq = {}\n    for item in lst:\n        for subitem in item:\n            if subitem not in freq:\n                freq[subitem] = 0\n            freq[subitem] += 1\n    return freq",
        "test": "assert frequency_lists([[1, 2], [3, 4, 5], [6, 7], [8, 9, 10]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}",
        "num_ids": 1369,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)",
        "test": "assert multiply_num([1]) == 1.0",
        "num_ids": 743,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # initialize a variable to hold the binary equivalent of n\n    binary = \"\"\n\n    # loop through each digit of n\n    while n > 0:\n\n        # find the remainder of n divided by 2\n        remainder = n % 2\n\n        # add the remainder to the binary string\n        binary = str(remainder) + binary\n\n        # remove the least significant digit\n        n = n // 2\n\n    # remove any leading zeros from the binary string\n    binary = binary.lstrip(\"0\")\n\n    # return the binary string\n    return binary",
        "test": "assert decimal_to_binary(1) == \"1\"",
        "num_ids": 787,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # convert the input integer to a string\n    str_num = str(num)\n\n    # reverse the string\n    reverse_str = str_num[::-1]\n\n    # find the length of the reversed string\n    length = len(reverse_str)\n\n    # check if the length of the reversed string is even or odd\n    if length % 2 == 0:\n        # if it's even, add 1 to the middle character and add half the length of the reversed string to the other characters\n        add_val = int(reverse_str[length//2]) + int((length//2) + (length//2) + 1)\n    else:\n        # if it's odd, add 1 to the middle character and add half the length of the reversed string to the other characters\n        add_val = int(reverse_str[length//2]) + int((length//2) + (length//2))\n\n    # find the next smallest palindrome by adding 1 to the original number and adding the add_val to it\n    next_smallest_palindrome = (num + 1) + add_val\n\n    return next_smallest_palindrome",
        "test": "assert next_smallest_palindrome(1234567) == 45678",
        "num_ids": 1357,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 3) == 3, \"Test case 1 failed\"",
        "num_ids": 1145,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_word = words[0]\n    for i in range(1, len(words)):\n        camel_word += words[i].capitalize()\n    return camel_word",
        "test": "assert snake_to_camel(\"camel_case\") == \"camelCase\", \"snake_to_camel is not working correctly.\"",
        "num_ids": 673,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the variables\n    result = 0\n    count = 0\n    temp = 1\n\n    # Generate all possible arrangements of n objects\n    for i in range(1, n+1):\n        for j in range(i):\n            # Calculate the number of arrangements\n            count += 1\n            temp *= (m - j)\n\n    # Calculate the final answer\n    result = count * temp\n\n    # Return the result\n    return result",
        "test": "assert eulerian_num(0, 0) == 0",
        "num_ids": 1806,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "test": "assert sort_sublists([['a', 'b'], ['c', 'd'], ['e', 'f']]) == [['a', 'b'], ['c', 'd'], ['e', 'f']]",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count",
        "test": "assert count([]) == 0",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the lists to tuples\n    test_tup = tuple(test_tup)\n    test_list = tuple(test_list)\n    \n    # Append the list to the tuple\n    new_tup = test_tup + test_list\n    \n    # Return the new tuple\n    return new_tup",
        "test": "assert add_lists([], ()) == ()",
        "num_ids": 750,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine three lists into a single list\n    combined_list = num1 + num2 + num3\n\n    # Convert the combined list to a min heap\n    min_heap = []\n    for num in combined_list:\n        heapq.heappush(min_heap, num)\n\n    # Convert the min heap back to a sorted list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list",
        "test": "assert merge_sorted_list([1], [], [2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1912,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def odd_Equivalent(s, n):\n    odd_count = 0\n    # initialize the rotation of the string\n    s = s[::-1]\n    # loop through each character in the string\n    for i in range(len(s)):\n        # check if the character is odd\n        if int(s[i]) % 2!= 0:\n            odd_count += 1\n        # rotate the string by n\n        s = s[n:] + s[:n]\n    # return the count of odd numbers\n    return odd_count",
        "test": "assert odd_Equivalent(\"111\", 1) == 3",
        "num_ids": 2420,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    \n    first_list = nestedlist[0]\n    if len(first_list) == 1:\n        return first_list\n    \n    common = []\n    for item in first_list:\n        if item in common_in_nested_lists(nestedlist[1:]):\n            common.append(item)\n    \n    return common\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [3, 4, 5], [6, 7, 8], [9, 10, 11]]) == []",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic!= {}:\n            return False\n    return True",
        "test": "assert empty_dit([{'a': 1}, {'b': 2}, {'c': 3}]) == False, 'Dictionary list should return False.'",
        "num_ids": 748,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total",
        "test": "assert tuple_to_int((1, 2, 3)) == 6",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    test_list[i][j] = None\n    return test_list",
        "test": "assert list_to_float([[1, 2], [3, 4.5], ['5', 6.7]]) == [[1.0, 2.0], [3.0, 4.5], [5.0, 6.7]]",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "test": "assert string_to_list(\"apple banana cherry\") == [\"apple\", \"banana\", \"cherry\"]",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Find the unique elements in the array\n    unique_arr = []\n    for i in range(len(arr)):\n        if arr[i] not in unique_arr:\n            unique_arr.append(arr[i])\n    \n    # If there is only one unique element in the array, return it\n    if len(unique_arr) == 1:\n        return unique_arr[0]\n    else:\n        return None",
        "test": "assert search([1, 1, 1, 1, 1]) == 1, \"Function should return 1 for the input [1, 1, 1, 1, 1]\"",
        "num_ids": 1204,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Returns the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(-5, -2), (0, 3), (1, -4), (-6, 7), (2, -1)]) == (-6, 7)",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function takes a limit and returns the sum of all amicable numbers from 1 to the limit.\n    \"\"\"\n    amicable_set = set()\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_set.add(i)\n    return sum(amicable_set)\n\ndef is_amicable(num):\n    \"\"\"\n    This function takes a number and returns True if it is amicable and False otherwise.\n    A number is amicable if it is both divisible by itself and by the sum of its proper divisors.\n    \"\"\"\n    divisors = [i for i in range(1, int(num**0.5)+1) if num % i == 0]\n    return num in divisors and num == sum(divisors)\n\nif __name__ == \"__main__\":\n    limit = int(input(\"Enter a number: \"))\n    print(\"The sum of amicable numbers from 1 to\", limit, \"is\", sum_amicable_numbers(limit))",
        "test": "assert amicable_numbers_sum(1000) == 233168",
        "num_ids": 1247,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)",
        "test": "assert angle_complex(1,2) == cmath.phase(1+2j)",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    diff = 0\n    max_diff = 0\n\n    for i in range(1, len(string)):\n        if string[i] == '1':\n            diff += 1\n        else:\n            diff = 0\n\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff",
        "test": "assert find_length(\"0101010\") == 1",
        "num_ids": 4119,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisor = 0\n    divisor = 1\n    while divisor <= a and divisor <= b:\n        if a % divisor == 0 and b % divisor == 0:\n            common_divisor += divisor\n        divisor += 1\n    return common_divisor",
        "test": "assert sum(12,18) == 12, \"The sum of common divisors of 12 and 18 should be 12.\"",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Given a list of words, return a list of words that are longer than n characters.\n    \"\"\"\n    return [word for word in words if len(word) > n]",
        "test": "assert long_words(5, \"hello world\") == []",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum([sum(row) for row in my_matrix])\n    \n    # Calculate the sum of the sub-diagonal elements\n    sub_diagonal_sum = 0\n    for i in range(len(my_matrix)):\n        sub_diagonal_sum += my_matrix[i][i]\n    \n    # Check if the diagonal and sub-diagonal sums are equal\n    if diagonal_sum!= sub_diagonal_sum:\n        return False\n    \n    # Check if all the rows have the same sum\n    for row in my_matrix:\n        if sum(row)!= diagonal_sum:\n            return False\n    \n    # If all the checks pass, the matrix is a magic square\n    return True",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item",
        "test": "assert max_occurrences([1, 1, 2, 2, 2, 3, 3, 3]) == 2",
        "num_ids": 1137,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    result = ''\n    for char in str1:\n        if char.lower() in vowels:\n            if vowel_count == 0:\n                result = char + result\n            vowel_count += 1\n        else:\n            result = char + result\n    return result",
        "test": "assert reverse_vowels(\"Python\") == \"nohtyP\"",
        "num_ids": 1670,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return''.join(str(i) for i in tup1)",
        "test": "assert tup_string(()) == ''",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 661,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return None\n    else:\n        hex_num = n * (2*n - 1)\n        return hex_num",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0]*len(nums))\n\n    # Count the number of zeroes in each element of the array\n    for num in nums:\n        if num == 0:\n            count[count.index(num)] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    num_zeros = sum(count)\n    num_nonzeros = len(nums)\n    ratio = num_zeros/num_nonzeros\n\n    return ratio",
        "test": "assert zero_count([1, 0, 0, 0, 0, 1]) == 0.6666666666666666",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n & (n - 1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(15) == False",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    \n    return circumference",
        "test": "assert circle_circumference(5) == 31.4159, \"The calculated value of circumference of a circle of radius 5 is incorrect.\"",
        "num_ids": 836,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result",
        "test": "assert extract_singly([[1,2,3],[4,5],[6]]) == set([1,2,3,4,5,6])",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def pancake_sort(nums):\n    def sort_pancakes(pancake):\n        return sorted(nums[:len(pancake)-1], reverse=True) + [nums[len(pancake)-1]]\n    \n    pancakes = [range(1, len(nums)+1)]\n    while True:\n        sorted_pancakes = [sort_pancakes(p) for p in pancakes]\n        if sorted_pancakes == pancakes:\n            break\n        pancakes = sorted_pancakes\n        \n    return sorted(nums)",
        "test": "assert pancake_sort([3,2,1,5,6,4]) == [1,2,3,4,5,6]",
        "num_ids": 1525,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3,4], [2,3,4,5], [5,6,7,8]) == 0",
        "num_ids": 1234,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if isinstance(item, list): \n            count += 1\n    return count",
        "test": "assert find_lists(()) == 0, \"Test case 1: ()\"",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 1, 1, 1, 1]) == 0, \"Test 4 failed.\"",
        "num_ids": 952,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find_solution(a, b, n):\n    # check that a, b, and n are integers\n    if not all(isinstance(x, int) for x in [a, b, n]):\n        return None\n    \n    # check that n is divisible by both a and b\n    if n % (a*b)!= 0:\n        return None\n    \n    # create a list of all possible solutions\n    solutions = [(x, y) for x in range(-n//b, n//b+1) for y in range(-n//a, n//a+1) if x*a + y*b == n]\n    \n    # check that there is at least one solution\n    if not solutions:\n        return None\n    \n    # sort the solutions by their x values\n    solutions.sort(key=lambda x: x[0])\n    \n    # return the first solution (x, y)\n    return solutions[0]",
        "test": "assert find_solution(6, 9, 60) == None",
        "num_ids": 1324,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from the first list present in the second list.\n    '''\n    return [x for x in list1 if x not in list2]",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return sum_series(n // 2) + (n - 2 * (n // 2))\n    else:\n        return sum_series(n // 2) + (n - 2 * (n // 2)) - n",
        "test": "assert sum_series(1) == 0",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the semi-perimeter of the polygon\n    perimeter = s * l\n\n    # Calculate the area using Heron's formula\n    area = 0.5 * perimeter * tan(pi / l)\n\n    return area",
        "test": "assert area_polygon(3, 4) == 64.0, \"area_polygon(3, 4) should be 64.0, but it's actually {}\".format(area_polygon(3, 4))",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Finding the divisors of the given number\n    divs = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n//i:\n                divs.append(n//i)\n    return all(n == sum(divs) for n in range(1, n+1))",
        "test": "assert div_sum(36) == False, \"div_sum(36) should return False\"",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char.isalpha() and str1.lower().find(char.lower()) == str1.lower().find(char):\n            count += 1\n    return count",
        "test": "assert count_char_position('hello') == 5",
        "num_ids": 975,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([3, 5, 7, 9, 11]) == 0",
        "num_ids": 1292,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize a variable to keep track of the power of 2\n    power = 1\n    \n    # loop until the power of 2 is greater than or equal to n\n    while power < n:\n        power *= 2\n        \n    # return the smallest power of 2 greater than or equal to n\n    return power",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 937,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1, 2, 3, 4, 5, 6, 3, 3, 3, 3], 3) == 5",
        "num_ids": 812,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable to 0\n    total_sum = 0\n    \n    # Loop through the list from the starting index (m) to the ending index (n)\n    for i in range(m, n+1):\n        # Check if the current number is in the list\n        if i in list1:\n            # Add it to the total sum\n            total_sum += i\n            \n    return total_sum",
        "test": "assert sum_range_list([], 0, 0) == 0",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a",
        "test": "assert perimeter_pentagon(20) == 57.14285714285714",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count",
        "test": "assert count_occurance(\"hello world\") == 0",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True",
        "test": "assert check_type(('apple', 'banana', 2.0)) == False",
        "num_ids": 845,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 2) == False",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(15) == 4, \"count_Set_Bits(15) should return 4\"",
        "num_ids": 1970,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    Args:\n        str (str): Input string.\n\n    Returns:\n        str: Modified string with odd index values removed.\n    \"\"\"\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "test": "assert odd_values_string('') == ''",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize an empty set to store unset bits\n    unset_bits = set()\n\n    # Iterate through the given range of numbers\n    for num in range(l, r+1):\n        # Iterate through the bits of the current number\n        for bit in range(0, 8):\n            # Check if the current bit is unset or set in the current number\n            if num & (1 << bit) == 0:\n                # If the current bit is unset, add it to the unset_bits set\n                unset_bits.add(bit)\n\n    # Check if all bits are unset in the given range\n    if len(unset_bits) == 8:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(0, 0, 0) == True",
        "num_ids": 1282,
        "indeed": true
    },
    {
        "number": 229,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one for the first negative element and one for the first positive element\n    neg_ptr = 0\n    pos_ptr = 0\n    \n    # Loop through the array and swap the elements as needed\n    for i in range(n):\n        if arr[i] < 0:\n            # Swap the element at the negative pointer with the element at the positive pointer\n            arr[i], arr[pos_ptr] = arr[pos_ptr], arr[i]\n            \n            # Move the positive pointer to the next position\n            pos_ptr += 1\n        else:\n            # Move the negative pointer to the next position\n            neg_ptr += 1\n    \n    # Return the final array\n    return arr",
        "test": "assert re_arrange_array([-3, -2, -1, 0, 1, 2, 3], 7) == [-3, -2, -1, 0, 1, 2, 3]",
        "num_ids": 1909,
        "indeed": true
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "test": "assert replace_blank('hello', '!') == 'hello'",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in lst:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "test": "assert larg_nnum([1, 2, 3, 4, 5], 0) == []",
        "num_ids": 1209,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    # Find the lateral surface area of the base of the cylinder\n    L = 2*r\n    \n    # Find the lateral surface area of the top of the cylinder\n    T = 2*r*h\n    \n    # Return the sum of the two lateral surface areas\n    return L + T",
        "test": "assert lateralsuface_cylinder(2,3)==16, \"Lateral surface area should be 16\"",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert volume_cube(4) == 64.0, \"The volume of a cube with side length 4 is incorrect.\"",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n    \n    # loop through each bit of the number\n    for i in range(32):\n        # check if the i-th bit is even\n        if n & (1 << i):\n            # set the i-th bit of the result to 1\n            result |= 1 << i\n    \n    # return the result\n    return result",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Initialize an empty dictionary to store the result\n    result = {}\n    # Loop through the list of tuples\n    for tuple_item in test_list:\n        # If the tuple item is already a key in the result dictionary, increment the count\n        if tuple_item in result:\n            result[tuple_item] += 1\n        # Otherwise, add the tuple item as a key with a count of 1\n        else:\n            result[tuple_item] = 1\n    # Return the result dictionary\n    return result",
        "test": "assert check_occurences([]) == {}",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_of_substrings(str):\n    n = len(str)\n    count = 0\n    \n    for i in range(n):\n        count += 1\n        while i < n and str[i] == str[i-1]:\n            count += 1\n            i += 1\n            \n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    count = 0\n    for i in range(2,m+1):\n        if i >= 2*n:\n            count += 1\n        elif i >= 2*n-1 and i <= m:\n            count += 1\n\n    return count",
        "test": "assert get_total_number_of_sequences(5,10) == 0 # no sequences with length 10",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2",
        "test": "assert replace_list([1, 2, 3, 4, 5], [6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "test": "assert count_charac('hello world') == 11, \"Counting the number of characters in the string 'hello world' is incorrect.\"",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def next_Perfect_Square(N):\n    while True:\n        N = N + 1\n        num_sqrt = int(math.sqrt(N))\n        if num_sqrt * num_sqrt == N:\n            return N\n        else:\n            continue",
        "test": "assert next_Perfect_Square(2) == 4",
        "num_ids": 1034,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Check if the array is bitonic\n    increasing = True\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            increasing = False\n            break\n        elif arr[i] < arr[i-1]:\n            break\n    \n    if increasing:\n        return max_sum_decreasing(arr)\n    else:\n        return max_sum_increasing(arr)\n\n\ndef max_sum_increasing(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += arr[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n            \n    return max_sum\n\n\ndef max_sum_decreasing(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n-1, -1, -1):\n        curr_sum += arr[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n            \n    return max_sum",
        "test": "assert max_sum([1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 1023",
        "num_ids": 1794,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    previous_guess = None\n    while guess * guess > number:\n        previous_guess = guess\n        guess = (number / guess) + guess / 2\n    print(\"The square root of\", number, \"is approximately\", guess)",
        "test": "assert babylonian_squareroot(4) == 2.0, \"The square root of 4 is incorrect.\"",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # create a 2D table to store the length of longest palindromic subsequence for all possible pairs of characters\n    table = [[0] * len(str) for _ in range(len(str))]\n\n    # fill the first row and column of the table with 1\n    for i in range(len(str)):\n        table[i][i] = 1\n\n    # fill the table in bottom-up fashion\n    for length in range(2, len(str) + 1):\n        for i in range(len(str) - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n\n    # return the maximum length of palindromic subsequence found in the table\n    return table[0][len(str) - 1]",
        "test": "assert lps(\"a\") == 1, \"Incorrect output for input 'a'\"",
        "num_ids": 1489,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum",
        "test": "assert harmonic_sum(1) == 1.0",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    array_nums1 = list(set(array_nums1))  # Remove duplicates from array_nums1\n    array_nums2 = list(set(array_nums2))  # Remove duplicates from array_nums2\n    intersection_set = set(array_nums1) & set(array_nums2)  # Find intersection of sets\n    intersection_list = list(intersection_set)  # Convert set back to list\n    return intersection_list",
        "test": "assert intersection_array([1,2,3,4,5], [4,5,6,7,8]) == [4,5]",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def count_X(tup, x): \n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 4, 5), 3) == 1",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result",
        "test": "assert insert_element([1], 0) == [0, 1]",
        "num_ids": 920,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        real, imag = num.real, num.imag\n        pol_num = cmath.rect(real, imag)\n        polar_coordinates.append(pol_num)\n    return polar_coordinates",
        "test": "assert convert([0, 2]) == [0.0, 2.0]",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 576,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations of length n from the elements of a list, with repetition.\n    Returns a list of tuples with each combination.\n    '''\n    # Create all possible combinations of length n from the list\n    combos = combinations_with_replacement(l, n)\n\n    # Convert each combo to a tuple\n    combos_tuples = [(tuple(c),) for c in combos]\n\n    return combos_tuples",
        "test": "assert combinations_colors([1, 2, 3], 2) == [((1, 1), (1, 2)), ((2, 1), (2, 2)), ((1, 3), (1, 2), (3, 1)), ((3, 1), (3, 2)), ((1, 1), (2, 1), (3, 1))]",
        "num_ids": 1229,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4 # there are 4 prime numbers less than 10",
        "num_ids": 1252,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    count = 0\n    while count < n:\n        if is_newman_prime(p):\n            count += 1\n        p += 1\n    return p - 1\n\n\ndef is_newman_prime(n):\n    '''\n    Check if a given number is a newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert newman_prime(1) == 2 # correct",
        "num_ids": 1083,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples should have same length.\")\n        return\n    \n    # Perform element-wise division and return the result as a new tuple\n    return tuple(a/b for a, b in zip(test_tup1, test_tup2))",
        "test": "assert division_elements((2, 2, 2, 2), (2, 2, 2, 2)) == (1, 1, 1, 1)",
        "num_ids": 1093,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return (list1, [])\n    else:\n        return ([x for x in list1[:L]], [x for x in list1[L:]])",
        "test": "assert split_two_parts([1,2,3,4,5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 932,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_years = 7 * h_age\n    return dog_age_in_years",
        "test": "assert dog_age(1) == 7",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1398,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2",
        "test": "assert lateralsurface_cube(2) == 24, \"lateral surface area of cube with side length 2 should be 24\"",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize variables to store sum and count\n    sum = 0\n    count = 0\n\n    # loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate square of i and add to sum\n        sum += i*i\n        # increment count\n        count += 1\n\n    # return the sum of the squares of the first n odd natural numbers\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the first star\n    star = '*'\n    # loop through the remaining numbers\n    for i in range(1, n):\n        # print the previous number of stars\n        for j in range(i):\n            print(star, end='')\n        # add a newline after each row of stars\n        print()\n        # increment the number of stars\n        star += '*'",
        "test": "assert find_star_num(4) == 31",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value",
        "test": "assert ascii_value('A') == 65",
        "num_ids": 696,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "test": "assert sum_even_and_even_index([]) == 0",
        "num_ids": 1422,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum",
        "test": "assert even_Power_Sum(0) == 0, \"even_Power_Sum(0) is incorrect\"",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list",
        "test": "assert rear_extract([(1, \"apple\"), (2, \"banana\"), (3, \"cherry\"), (4, \"date\"), (5, \"elderberry\")]) == [(\"cherry\", \"banana\", \"elderberry\")]",
        "num_ids": 549,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "test": "assert substract_elements((1, 2), (1, 2)) == (0, 0)",
        "num_ids": 939,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = math.comb(n, 2) # Find the even index binomial coefficients of n\n    sum_even_coeff = 0 # Initialize the sum of even index binomial coefficients\n    for i in range(n):\n        if i % 2 == 0: # Check if the current coefficient is even\n            sum_even_coeff += coeff # Add the even index coefficient to the sum\n    return sum_even_coeff # Return the sum of even index binomial coefficients",
        "test": "assert even_binomial_Coeff_Sum(1) == 0",
        "num_ids": 1079,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r ** 2 * h",
        "test": "assert volume_cylinder(1.5,6) == 10.4, \"Incorrect output for volume_cylinder(1.5,6)\"",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}",
        "test": "assert dict_filter({'a':1,'b':2,'c':3},4) == {}",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i+1] == test_tup[i]:\n            count += 1\n        else:\n            break\n    return count",
        "test": "assert count_first_elements((6, 7, 8, 9, 10)) == 0",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n\ndef nth_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    else:\n        return is_num_decagonal(n)",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1908,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1",
        "test": "assert sequential_search([1, 3, 5, 7, 9], 5) == (True, 2)",
        "num_ids": 848,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all its elements are unique, False otherwise.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True",
        "test": "assert all_unique([1,2,3,4,5]) == True",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3,4],[4,5,6]) == [1,1,1,0]",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10\n    for d in str(n):\n        freq[int(d)] += 1\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True",
        "test": "assert validate(1230) == False, \"The frequency of each digit in the integer is not less than or equal to the digit itself.\"",
        "num_ids": 1101,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_element(lst, element):\n    if len(lst) > 1:\n        if lst[0] == element:\n            return True\n        else:\n            return check_element(lst[1:], element)\n    else:\n        return False",
        "test": "assert check_element([1,2,3,4,5], 5) == False",
        "num_ids": 848,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<![aA])(b{2,3})(?![bB])'\n    match = re.search(pattern, text)\n    return match is not None",
        "test": "assert text_match_two_three(\"aba\") == False",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Create the modified array by repeating the given array k times\n    modified_array = a * k\n    \n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through the modified array and find the maximum sum\n    for i in range(n):\n        current_sum = max(current_sum + a[i], a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    # Return the maximum sum\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 2) == 15",
        "num_ids": 1407,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length",
        "test": "assert max_length([[1, 2], [3, 4], [5]]) == 2",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize variables to store the number of ways and number of colors used.\n    ways = 0\n    colors_used = 0\n    \n    # Iterate through the fence and check for adjacent posts with the same color.\n    for i in range(n):\n        if i == 0 or i == n-1:\n            # If the post is the first or last post, it cannot be adjacent to the first or last post with the same color.\n            if i == 0:\n                # If the post is the first post, it cannot be adjacent to the last post with the same color.\n                if i == n-1:\n                    # If the post is the last post, it cannot be adjacent to the first post with the same color.\n                    ways += 1\n                else:\n                    # If the post is neither the first nor the last post, it can be adjacent to any post with the same color.\n                    ways += 1\n                    \n            else:\n                # If the post is not the first post, it can be adjacent to any post with the same color.\n                ways += 1\n        \n        else:\n            # If the post is neither the first nor the last post, it can be adjacent to any post with the same color.\n            ways += 1\n            \n        # Increment the number of colors used.\n        colors_used += 1\n        \n        # Check if there are more than 2 colors used.\n        if colors_used > k:\n            break\n            \n    return ways",
        "test": "assert count_no_of_ways(3, 3) == 3",
        "num_ids": 1760,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient",
        "test": "assert find(12,4) == 3",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w ** 2 + h ** 2)\n    return a",
        "test": "assert otherside_rightangle(4,3) == 5, \"The correct third side of a right angled triangle with sides 4 and 3 is 5, but yours is {}.\".format(otherside_rightangle(4,3))",
        "num_ids": 741,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val",
        "test": "assert max_val([1, 2, 3]) == 3",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors_list = [x for x in range(1, number+1) if number % x == 0]\n    return sum(divisors_list)",
        "test": "assert sum_div(36) == 144, \"sum_div(36) should be 144\"",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i)\n\n    return inv_count",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0, \"get_Inv_Count([1,2,3,4,5]) == 0\"",
        "num_ids": 977,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # initialize an empty list to store flattened elements\n    flat_list = []\n    # loop through each element in the input list\n    for item in list1:\n        # if the element is itself a list, flatten it recursively\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        # otherwise, add the element to the flat list\n        else:\n            flat_list.append(item)\n    # return the flattened list\n    return flat_list",
        "test": "assert flatten_list([1,[2,[3,[4,5]]]]) == [1, 2, 3, 4, 5]",
        "num_ids": 907,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int) # create a defaultdict for storing the maximum aggregate for each transaction\n    max_agg = 0\n    for item in stdata:\n        trans_id, amount = item\n        d[trans_id] += amount\n        if d[trans_id] > max_agg: # update the max aggregate if the current transaction's aggregate is greater than the previous maximum\n            max_agg = d[trans_id]\n    return max_agg",
        "test": "assert max_aggregate([(1,2),(3,4),(5,6),(7,8)]) == 8, \"max_aggregate([[(1,2),(3,4),(5,6),(7,8)]]) should return 8.\"",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1):\n        first = bin(i)[2:].zfill(n)\n        last = bin(~i)[2:].zfill(n)\n        if first == last:\n            count += 1\n    return count",
        "test": "assert count_binary_seq(1) == 0",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = 1\n        for value in d.values():\n            if isinstance(value, dict):\n                current_depth = 1 + dict_depth(value)\n                if current_depth > max_depth:\n                    max_depth = current_depth\n        return max_depth\n    else:\n        return 0",
        "test": "assert dict_depth({}) == 1, \"The depth of an empty dictionary should be 1.\"",
        "num_ids": 927,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the number of rotations required to reach the index\n    rotation_count = 0\n    for i in range(len(arr)):\n        if i == index:\n            break\n        if arr[i] in ranges:\n            rotation_count += 1\n\n    # Perform the rotations required to reach the index\n    for i in range(rotation_count):\n        # Choose a random range from the list of ranges\n        range_index = rotations[i % len(rotations)]\n        start = ranges[range_index][0]\n        end = ranges[range_index][1]\n        # Swap the elements in the range\n        arr[start], arr[end] = arr[end], arr[start]\n\n    # Return the element at the index\n    return arr[index]",
        "test": "assert find_Element([1,2,3,4,5],[(0,3),(4,5)],3,3)==4",
        "num_ids": 2335,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return \"No two words starting with 'p' were found in the list.\"",
        "test": "assert start_withp(['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']) == ('pear', 'plum')",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # If k is less than or equal to i, then there is no subsequence to include k in.\n    if k <= index:\n        return 0\n\n    # Initialize maximum sum and its index to zero.\n    max_sum = 0\n    max_index = 0\n\n    # Iterate from index to k-1 and find the maximum sum of increasing subsequence from prefix to ith index.\n    for i in range(index, k):\n        if a[i] > a[max_index]:\n            # If the current element is greater than the previous maximum element, then update the maximum sum and index.\n            max_sum = a[i] + max_sum_increasing_subseq(a, n, i+1, k)\n            max_index = i\n\n    # If k is greater than or equal to the ith index, then include k in the increasing subsequence.\n    if k >= index:\n        max_sum += a[k]\n\n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1,2,3,4,5,6], 6, 2, 4) == 6",
        "num_ids": 1931,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > len(tuplex) or n > len(tuplex[0]):\n        return None\n    else:\n        colon = []\n        for i in range(m):\n            colon.append([tuplex[j][i] for j in range(min(m, len(tuplex))))\n        return tuple(colon)",
        "test": "assert colon_tuplex((1,2,3),(2,2),(3,3)) == ([(1,2,3),(1,2,3)],[(1,2),(1,2)],[(1,),(1,)])",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < N or len(nums2) < N:\n        return \"Error: N is greater than the length of the smaller list.\"\n    \n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the maximum products list\n    max_products = []\n    \n    # Loop through the two lists and find the largest products\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[N-i-1] * nums2[N-i-1]\n        max_products.append(max(product1, product2))\n    \n    # Return the maximum products\n    return max_products",
        "test": "assert large_product([1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 6) == [11000000, 12000000, 14000000, 18000000, 24000000, 36000000]",
        "num_ids": 2232,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(3,4) == 4, \"Expected 4, but got {} instead.\".format(maximum(3,4))",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through each bit in the number\n    for i in range(32):\n        # If the current bit is not set, set the result to the current bit position\n        if not (n & (1 << i)):\n            result = i\n            break\n    # Return the result\n    return result",
        "test": "assert set_left_most_unset_bit(1) == 1",
        "num_ids": 1286,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone using the formula:\n    V = \u03c0 r^2 h\n    \"\"\"\n    pi = math.pi\n    V = pi * r**2 * h\n    return V",
        "test": "assert volume_cone(1,2) == math.pi * 1**2 * 2, \"Incorrect volume calculation for cone with radius 1 and height 2\"",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3\n    return n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 676,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "test": "assert add_string([\"apple\", \"banana\", \"cherry\"], \"I love {}!\") == [\"I love apple!\", \"I love banana!\", \"I love cherry!\"]",
        "num_ids": 645,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert first list to dictionary\n    d1 = {k: v for k, v in zip(l1, l2)}\n    # Convert second list to dictionary\n    d2 = {k: v for k, v in zip(l1, l3)}\n    # Merge the two dictionaries\n    d = {**d1, **d2}\n    return d",
        "test": "assert convert_list_dictionary([[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10, 11]], [[12, 13], [14, 15]]) == {",
        "num_ids": 1005,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    elif n == 5:\n        return 120\n    else:\n        return get_max_sum(n-1) + get_max_sum(n-2) + get_max_sum(n-3) + get_max_sum(n-4) + get_max_sum(n-5)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for num in input_list:\n        if len(str(num)) > max_len:\n            max_len = len(str(num))\n            max_list = [num]\n        elif len(str(num)) == max_len:\n            max_list.append(num)\n    return max_list",
        "test": "assert max_length_list([1,2,3]) == [1,2,3]",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False",
        "test": "assert check_distinct(('a', 'b', 'c', 'b')) == False",
        "num_ids": 773,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of characters in the string\n    freq = {}\n    \n    # iterate over each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # iterate over each character in the string again\n    for char in str1:\n        # if the frequency of the current character is 1, return it\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None",
        "test": "assert first_non_repeating_character(\"\") == None",
        "num_ids": 1212,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_char('a') == True, \"Incorrect check_char function\"",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def median_numbers(a, b, c):\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # find the middle index of the sorted list\n    middle_index = len(sorted_numbers) // 2\n\n    # calculate the median based on the middle index\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        median = sorted_numbers[middle_index]\n\n    return median",
        "test": "assert median_numbers(2,2,2) == 2,'median_numbers(2,2,2) should return 2'",
        "num_ids": 1030,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        total += sum(digits)\n    return total",
        "test": "assert sum_of_digits([0, 0, 0, 0, 0]) == 0",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if i < len(test_tup1) and i < len(test_tup2):\n            result_tup += (test_tup1[i] ^ test_tup2[i],)\n        elif i < len(test_tup1):\n            result_tup += (test_tup1[i],)\n        else:\n            result_tup += (test_tup2[i],)\n    return result_tup",
        "test": "assert bitwise_xor((1, 0), (1, 0)) == (0, 0)",
        "num_ids": 1569,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the number of unique tuples in the list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    return len(unique_tuples)",
        "test": "assert extract_freq(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == 10",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the resultant tuple\n    result = []\n    # Check the length of both input tuples\n    if len(test_tup1) == len(test_tup2):\n        # Compare the length of both input tuples\n        for i in range(len(test_tup1)):\n            # Add the elements of both input tuples at the current index i\n            result.append(test_tup1[i] + test_tup2[i])\n        return tuple(result)\n    else:\n        # If the length of both input tuples is not equal, raise a ValueError\n        raise ValueError(\"Both input tuples should have the same length\")",
        "test": "assert add_nested_tuples((1, (2, 3), 4), 5) == (6, (7, 8))",
        "num_ids": 1134,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(1,2) == 1, \"minimum(1,2) should return 1\"",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1: \n        if item in tuplex: \n            return True\n    return False",
        "test": "assert check_tuplex(tuplex=(), tuple1=(1,2)) == False",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert find_Parity(1) == True",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # initialize an empty list to store the digits of n\n    digits = []\n\n    # convert the input number to a string and split it into a list of digits\n    while n > 0:\n        digits.append(n % 10)\n        n = n // 10\n\n    # reverse the list of digits\n    digits.reverse()\n\n    # initialize the result variable to 0\n    result = 0\n\n    # convert the reversed list of digits to a number and add it to the result variable\n    for digit in digits:\n        result = result * 10 + digit\n\n    # add 1 to the result if the original number was odd\n    if n % 2 == 1:\n        result += 1\n\n    return result",
        "test": "assert rearrange_bigger(0) == 0",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    nums1.sort()\n    nums2.sort()\n    pairs = []\n    i = j = 0\n    while k > 0 and i < len(nums1) and j < len(nums2):\n        if nums1[i] + nums2[j] < nums1[i]:\n            i += 1\n        elif nums1[i] + nums2[j] > nums2[j]:\n            j += 1\n        else:\n            pair = (nums1[i], nums2[j])\n            pairs.append(pair)\n            k -= 1\n            i += 1\n            j += 1\n    return pairs",
        "test": "assert k_smallest_pairs([],[],0) == []",
        "num_ids": 2226,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n\n    products = []\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            products.append(product)\n\n    if len(products) == 0:\n        return None\n\n    minimum = min(products)\n    return minimum",
        "test": "assert min_product_tuple([[1, 1], [1, 1], [1, 1]]) == 1",
        "num_ids": 1379,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val",
        "test": "assert min_val([3, 5, 1, 2, 4]) == 1",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Splitting the word into a list of words\n    words = word.split('_')\n    # Converting each word to camel case and appending to a new list\n    camel_words = []\n    for word in words:\n        # Capitalizing the first letter of the word and adding it to the camel_words list\n        camel_word = word.capitalize()\n        camel_words.append(camel_word)\n    # Joining the camel case words back into a single string\n    camel_case_word = ''.join(camel_words)\n    return camel_case_word",
        "test": "assert snake_to_camel(\"A_B_C\") == \"ABC\"",
        "num_ids": 832,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 0 or n > len(list1):\n        return None\n    \n    return list1[n]",
        "test": "assert extract_nth_element([(1, 'a'), (2, 'b'), (3, 'c')], 4) == None",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def overlapping(list1,list2):  \n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n    list1: a sequence (list, tuple, etc.)\n    list2: another sequence\n\n    Returns:\n    True if there exists any value in list1 that exists in list2, False otherwise\n    \"\"\"\n    return any(elem in list2 for elem in list1)",
        "test": "assert overlapping([], []) == False",
        "num_ids": 892,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple containing the indices of the two numbers in the array that have the highest product.\n    If there are multiple pairs with the same highest product, the function returns the pair with the smallest index.\n    '''\n\n    # initialize variables\n    max_product = float('-inf')\n    pair = (-1, -1)\n\n    # iterate through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # calculate the product of the two elements\n            product = arr[i] * arr[j]\n\n            # update the max product and pair if the current product is greater than the previous max\n            if product > max_product:\n                max_product = product\n                pair = (i, j)\n\n    # return the pair with the highest product\n    return pair",
        "test": "assert max_Product([1,2,3,4,5]) == (3, 4)",
        "num_ids": 1583,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in Input:\n        if len(i) > 1:\n            for j in i:\n                if j not in common_elements:\n                    common_elements.append(j)\n                    break\n    return common_elements",
        "test": "assert group_tuples([(1,),(2,),(3,), (4,), (5,)]) == ((1,), (2,), (3,), (4,), (5,))",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element",
        "test": "assert Find_Max([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == \"elderberry\"",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum(list1)\n    rounded_list = [round(num) for num in list1]\n    print(\"The sum of the rounded numbers is:\", total)\n    print(\"The total sum multiplied by the length of the list is:\", total * len(rounded_list))",
        "test": "assert round_and_sum([16, 17, 18, 19, 20]) == 450000",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i <= n:\n        sum += i**3\n        i += 2\n    return sum",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # define the delimiter\n    delimiter = \", \"\n    # initialize an empty string\n    result = \"\"\n    # loop through each element of the tuple\n    for element in test_tup:\n        # concatenate the element with the delimiter\n        result += str(element) + delimiter\n    # remove the last delimiter from the result string\n    result = result[:-2]\n    # return the concatenated string\n    return result",
        "test": "assert concatenate_tuple(('hello', 'world', '!!!')) == 'helloworld!!!'",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n\n    average = sum/n\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 0",
        "num_ids": 673,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list",
        "test": "assert extract_rear(('hello', 'world', '!')) == ('!',)",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 425,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_element_in_list(lst, x):\n    \"\"\"\n    This function takes a list and an element x and returns the number of sublists \n    in the list that contain x.\n    \n    Args:\n        lst: The list to search for the element in.\n        x: The element to search for in the list.\n    \n    Returns:\n        The number of sublists in the list that contain the element.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 1) == 0",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match the pattern in the input string\n    match = re.match(pattern, dt)\n    # if the match is successful, extract the groups and format the date as dd-mm-yyyy\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "test": "assert change_date_format(\"2021-05-20\") == \"20-05-2021\"",
        "num_ids": 1023,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Finding the length of the list\n    n = len(my_list)\n    \n    # Finding the largest gap\n    gap = n//2\n    \n    while gap > 0:\n        # Starting from the gap, we swap adjacent elements that are more than gap apart\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                # Swapping the elements\n                my_list[j-gap], my_list[j] = my_list[j], my_list[j-gap]\n                j -= gap\n        gap //= 2\n    \n    return my_list",
        "test": "assert shell_sort([5, 3, 8, 2, 9]) == [2, 3, 5, 8, 9]",
        "num_ids": 1368,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result.append((test_tup1[i], test_tup2[i]))\n    return result",
        "test": "assert and_tuples((True, False, False), (True, True, False)) == ((True, False, False), (True, True, False))",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the quadratic equation of the parabola\n    quadratic = b**2 - 4*a*c\n    \n    # Check if the quadratic equation has a real root\n    if quadratic > 0:\n        root1 = (-b + quadratic**0.5)/(2*a)\n        root2 = (-b - quadratic**0.5)/(2*a)\n        print(\"The directrix of the parabola is:\", (root1 + root2)/2)\n    elif quadratic == 0:\n        root1 = -b/(2*a)\n        print(\"The directrix of the parabola is:\", root1)\n    else:\n        print(\"The quadratic equation has no real roots.\")",
        "test": "assert parabola_directrix(1, 2, 3) == 1.5",
        "num_ids": 1322,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if the lists have the same length\n    if len(list1)!= len(list2):\n        return False\n    \n    # Check if any element of list1 is also an element of list2\n    for element in list1:\n        if element in list2:\n            return True\n    \n    # If no common element is found, return False\n    return False",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 964,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the lengths of the trapezium sides\n    s1 = (base1 + base2) / 2\n    s2 = height / 2\n\n    # Calculate the areas of the trapezium sides\n    a1 = base1 * height / 2\n    a2 = base2 * height / 2\n\n    # Calculate the total area of the trapezium\n    A = a1 + a2\n\n    # Calculate the length of the longest side\n    max_side = max(s1, s2)\n\n    # Calculate the perimeter of the trapezium\n    P = max_side * 2\n\n    # Calculate the area of the trapezium using Heron's formula\n    area = (P * s1 * s2) / 2\n\n    # Calculate the median length of the trapezium\n    median = (A * 2) / P\n\n    return median",
        "test": "assert median_trapezium(1,1,1) == 1, \"The median of 1,1,1 should be 1.\"",
        "num_ids": 1697,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False",
        "test": "assert check_greater([1, 3, 5, 7, 9], 8) == True",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one(\"ababababababab\") == True, \"The function should return True for the input 'ababababababab'\"",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(12345) == 5, \"Test 1 failed\"",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([-1,-2,-3,-4,-5]) == [-1, -2, -3, -4, -5]",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with all the odd characters removed.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isalpha():\n            if char.isdigit():\n                new_string += char\n            else:\n                new_string += char.lower()\n    return new_string",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # Initialize two counters for each element in the list\n    count_left = [0] * len(test_list)\n    count_right = [0] * len(test_list)\n\n    # Iterate through the list, counting bidirectional tuples\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                count_left[i] += 1\n                count_right[j] += 1\n\n    # Count the total number of bidirectional tuples\n    total_count = 0\n    for i in range(len(count_left)):\n        total_count += count_left[i] * count_right[i]\n\n    return total_count",
        "test": "assert count_bidirectional([(1, 2), (3, 4), (6, 5)]) == 3",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "test": "assert multiple_to_single([10]) == 10",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # split the sentence into words\n    words = text.split()\n    \n    # define the pattern to match adverbs\n    pattern = r'\\b(also|also known as|also known|more|even more|even more than|even more than)\\b'\n    \n    # use re.finditer to find all the matches in the sentence\n    matches = re.finditer(pattern, text)\n    \n    # loop through each match and print the adverb and its position in the sentence\n    for i, match in enumerate(matches):\n        adverb = match.group()\n        position = i + 1\n        print(f'The \"{adverb}\" adverb is at position {position}.')\n    \n    # print a message if no adverbs were found in the sentence\n    if not matches:\n        print('No adverbs were found in the sentence.')",
        "test": "assert find_adverb_position(\"This is a good day.\") == [('is', 0), ('a', 7), ('good', 12), ('day', 17)]",
        "num_ids": 1058,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)",
        "test": "assert positive_count([1, -2, 3, -4, 5]) == 3/5",
        "num_ids": 1087,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest_negative = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_negative:\n            largest_negative = num\n    return largest_negative",
        "test": "assert largest_neg([-1, 0, 1, 2, 3]) == -1",
        "num_ids": 1859,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K])\n    return test_list",
        "test": "assert trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(1, 2), (4, 5), (7, 8)]",
        "num_ids": 1197,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have same length\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    return tuple(result)",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 608,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for item in lst:\n        if item in count:\n            result[item] = count[item]\n    return result",
        "test": "assert count_Occurrence(('a', 'b', 'c', 'd', 'e'), ['x', 'y', 'z']) == {}",
        "num_ids": 1168,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += (i * (i+1)) // 2\n        i += 1\n    return sum",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of string values and an integer representing the size of strings to extract.\n    It returns a list of extracted strings of specified size.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:size])\n    return extracted_strings",
        "test": "assert extract_string(['hello', 'world', 'this', 'is', 'a', 'test'], 10) == ['hello', 'world', 'this', 'is', 'a', 'test']",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0",
        "test": "assert loss_amount(10000,10000) == 0, \"loss_amount(10000,10000) should be 0, but it returns {}\".format(loss_amount(10000,10000))",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import math \n\ndef sumofFactors(n) : \n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    count = 0\n    total = 0\n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n//i % 2 == 0:\n                total += n//i\n    \n    if n > 1:\n        count += 1\n        if n % 2 == 0:\n            total += n\n    \n    return total\n",
        "test": "assert sumofFactors(6) == 12 # 6 = 2*2 + 2*3",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import re\n\ndef text_match_wordz(text):\n    # Regular expression pattern to match a word containing 'z'\n    pattern = r'\\b[a-zA-Z]+z\\b'\n\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If the pattern is found, return True, else return False\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog\")!= [\"quick\", \"brown\", \"jumps\"]",
        "num_ids": 946,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if it contains 31 days or False otherwise.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(1) == False, \"Expected False for month 1\"",
        "num_ids": 1181,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list([\"hello\", \"world\"]) == [\"olleh\", \"dlrow\"]",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf') # initialize minimum length variable\n    min_sublist = [] # initialize minimum sublist variable\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist",
        "test": "assert Find_Min([]) == []",
        "num_ids": 1198,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b",
        "test": "assert rectangle_area(2,3) == 6, \"rectangle_area(2,3) should return 6\"",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z][A-Z0-9]*\\b'\n\n    # Use re.sub() method to remove uppercase substrings from the string\n    new_str = re.sub(pattern, '', str1)\n\n    return new_str",
        "test": "assert remove_uppercase('hello world') == 'hello world'",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([[1,2],[3,4]]) == [1, 3]",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"1234567890\") == 0, \"upper_ctr('1234567890') should return 0\"",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    \n    return result",
        "test": "assert combinations_list([1]) == [[1]]",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n        if current_product < 0:\n            current_product = 1\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product",
        "test": "assert max_subarray_product([1, 2, 3]) == 6",
        "num_ids": 1227,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())  # convert dictionary values to set to remove duplicates\n    if len(values) == 1:\n        return True\n    else:\n        return False",
        "test": "assert check_value({'a': 1, 'b': 2, 'c': 3}, 3) == False",
        "num_ids": 1056,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}",
        "test": "assert drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': ''}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}",
        "num_ids": 586,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_array = arr[i:j]\n            sub_array.sort()\n            product = 1\n            for num in sub_array:\n                product *= num\n            if product > max_product:\n                max_product = product\n\n    return max_product",
        "test": "assert max_product([-2,0,-3]) == 0",
        "num_ids": 1322,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # Initialize variables to store the sum of the first two elements of the tuple\n    total_sum = test_tup[0] + test_tup[1]\n    # Loop through the remaining elements of the tuple\n    for i in range(2, len(test_tup), 2):\n        # Add the current element and the previous sum to the total sum\n        total_sum += test_tup[i]\n    # Return the total sum\n    return total_sum",
        "test": "assert add_pairwise((1, 2, 3)) == 6",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array of integers and a number n as inputs and returns the product of the array \n    multiplication modulo n.\n    '''\n    \n    # initialize result variable\n    result = 1\n    \n    # loop through array and multiply each element with result\n    for num in arr: \n        result = (result * num) % n\n    \n    # return result modulo n\n    return result",
        "test": "assert find_remainder([2, 4, 6], 5) == 3",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    if len(l) < 2: \n        return True\n    \n    for i in range(1, len(l)):\n        if l[i] - l[i-1]!= 1: \n            return False\n    \n    return True",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 1053,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set()\n    for i in test_list1:\n        if i in test_list2 and i not in intersection:\n            intersection.add(i)\n    return tuple(intersection)",
        "test": "assert tuple_intersection((1,2,3,4,5),(1,2,3,4,5)) == ((1,2,3,4,5))",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character matches the given character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    # Return the modified string\n    return str1",
        "test": "assert replace_char('12345', '4', 'X') == '123X5'",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n\n    # Sort the Counter object by values in descending order\n    sorted_counter = counter.most_common()\n\n    # Return the sorted dictionary\n    return dict(sorted_counter)",
        "test": "assert sort_counter({'cat':3, 'dog':2, 'bird':1}) == {'bird': 1, 'cat': 3, 'dog': 2}",
        "num_ids": 1395,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num",
        "test": "assert big_sum([0, 0, 0]) == 0",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower('Hello') == 'hello'",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a pattern for matching lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # use re.findall() to find all substrings that match the pattern\n    lowercase_substrings = re.findall(pattern, str1)\n    # loop through the substrings and remove them from the string\n    for substring in lowercase_substrings:\n        str1 = re.sub(substring, '', str1)\n    return str1",
        "test": "assert remove_lowercase(\"This Is A Test\") == \"This Is A Test\"",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #convert the number to string\n    num = str(n)\n    #find the first digit of the string\n    first_digit = num[0]\n    #convert the first digit to integer\n    first_digit = int(first_digit)\n    #return the first digit\n    return first_digit\n",
        "test": "assert first_Digit(0) == 0",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 758,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    sum_natural = sum(range(1, n+1))\n\n    return sum_cubes - sum_natural",
        "test": "assert difference(3) == 30",
        "num_ids": 1112,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,2,3,4,5], 5) == 2",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string",
        "test": "assert toggle_string('12345') == '12345'",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Initialize a variable to store the sum of differences between digits\n    digit_diff_sum = 0\n    # Convert both integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # Loop through each character in the strings\n    for i in range(len(n1_str)):\n        # Subtract the corresponding character in n2 from the corresponding character in n1\n        digit_diff_sum += abs(ord(n1_str[i]) - ord(n2_str[i]))\n    return digit_diff_sum",
        "test": "assert digit_distance_nums(1234, 1234) == 0",
        "num_ids": 1061,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size > len(arr):\n        size = len(arr)\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum",
        "test": "assert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 6",
        "num_ids": 1162,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    return sorted(union_set)",
        "test": "assert union_elements((1, 2, 3), (3, 2, 1)) == (1, 2, 3)",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the length of the longest sublist in the list.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)+1):  \n            sublist = lst[i:j]  \n            if len(sublist) > max_length:  \n                max_length = len(sublist)  \n    return max_length  ",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values('\"hello world\"') == ['hello world']",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def count_Pairs(arr, n):\n    # Initialize a set to store unique elements\n    unique_set = set()\n    # Iterate through the array\n    for i in arr:\n        # If the element is not already in the set, add it\n        if i not in unique_set:\n            unique_set.add(i)\n            # If the set has a length greater than n, remove an element from the set\n            if len(unique_set) > n:\n                unique_set.remove(min(unique_set))\n    # Calculate the number of pairs\n    count = len(unique_set) * (len(unique_set) - 1) // 2\n    return count",
        "test": "assert count_Pairs([1, 1, 1, 1, 1], 5) == 0",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total",
        "test": "assert sum_digits(123) == 6, '123 should be 6'",
        "num_ids": 707,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n    else:\n        return False",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True, \"The list is not sorted.\"",
        "num_ids": 988,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "test": "assert sort_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1054,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "test": "assert two_unique_nums([[1, 2, 3], [1, 2, 4], [1, 3, 4]]) == [[1, 2, 3], [1, 2, 4], [1, 3, 4]]",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # convert the list to a set to remove duplicates\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3628800, \"unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) should return 3628800\"",
        "num_ids": 1102,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    \n    area = math.pi * r**2  # pi * r^2 = A\n    \n    surface_area = 2 * area + 2 * math.pi * r * h  # 2 * A + 2 * pi * r * h = SA\n    \n    return surface_area",
        "test": "assert surfacearea_cylinder(1,2) == 18.84955592153876, \"The function is not working correctly. Check the calculation.\"",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_Sub_Array(A,B): \n\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(B) > len(A): \n        return False\n\n    for i in range(len(B)): \n        if B[i] not in A: \n            return False\n\n    return True\n",
        "test": "assert is_Sub_Array([1,2,3,4,5], [3,4,6]) == False, \"Test case 3 failed\"",
        "num_ids": 1163,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return int(str(factorial)[-1])",
        "test": "assert last_Digit_Factorial(3) == 6",
        "num_ids": 783,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    \n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n    \n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n    \n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n    \n    return result",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 1506,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar.append(elem)\n    return dissimilar",
        "test": "assert find_dissimilar((), ()) == []",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, list):\n            new_tuple.append(even_fnc(i))\n        else:\n            new_tuple.append(i)\n    return tuple(new_tuple)",
        "test": "assert even_ele((1, (2, (3, (4, 5), 6), 7), 8), lambda x: x % 2 == 0) == (1, 3, 5)",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surfaceArea = (1/2)*b*s**2  # formula for surface area of a square pyramid\n    return surfaceArea\n",
        "test": "assert surface_Area(4,5) == 50, \"The surface area of a square pyramid with a base edge of 4 and height of 5 should be 50.\"",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True, \"The dictionary is not empty\"",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    # initialize the first two terms\n    catalan_numbers = [1, 1]\n\n    # iterate through the remaining terms\n    for i in range(2, n+1):\n        # compute the next term as the sum of two previous terms\n        catalan_numbers.append(catalan_numbers[i-1] + catalan_numbers[i-2])\n\n    return catalan_numbers[n]",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+(ly)$\\b'\n    matches = re.finditer(pattern, text)\n\n    for match in matches:\n        pos = match.start()\n        adverb = match.group()\n        print(f\"Adverb found at position {pos}: {adverb}\")",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == ([3, 15], [\"quickly\", \"overly\"])",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min-heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Iterate over the items and add them to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # If the heap is full, remove the smallest item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Extract the n most expensive items from the heap\n    result = [heapq.heappop(min_heap) for _ in range(n)]\n\n    return result",
        "test": "assert expensive_items([10, 20, 30, 40, 50], 0) == []",
        "num_ids": 1394,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # check if list is empty\n    if len(l) == 0:\n        return []\n    \n    # check if n is negative\n    if n < 0:\n        return []\n    \n    # check if n is out of range\n    if n >= len(l):\n        return l\n    \n    # split the list at the nth element\n    mid = n // 2\n    left = l[:mid]\n    right = l[mid:]\n    \n    # add the first part to the end of the left part\n    result = left.copy()\n    result.extend(right)\n    \n    return result",
        "test": "assert split_Arr([1, 2, 3, 4, 5, 6], 6) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    if len(nums) == 0:\n        return 0\n    \n    smallest = float('inf')\n    largest = float('-inf')\n    \n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    \n    return largest - smallest",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1022,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    for i in range(a, b+1):\n        if i == int(i**0.5)**2:\n            squares.append(i)\n    return squares",
        "test": "assert perfect_squares(1, 1) == [1]",
        "num_ids": 1025,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y\n",
        "test": "assert polar_rect(1, 1) == (1, 1)",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    first_element = newList[0]\n    last_element = newList[-1]\n    \n    newList[0] = last_element\n    newList[-1] = first_element\n    \n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 927,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initialize the sum variable to 0\n    sum_value = 0\n\n    # calculate the product of consecutive binomial coefficients\n    for i in range(k,n+1):\n        bin_coeff = (n-i+1)*i\n        sum_value += bin_coeff\n\n    return sum_value",
        "test": "assert binomial_Coeff(5,2) == 10 # correctness of binomial_Coeff",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define a regular expression pattern to match leading zeroes in an IP address\n    pattern = re.compile(r'^(0)\\d+\\.\\d+\\.\\d+\\.\\d+$')\n\n    # Use the pattern to find all the leading zeroes in the IP address\n    matches = pattern.findall(ip)\n\n    # Loop through all the matches and remove them\n    for match in matches:\n        ip = ip.replace(match, '')\n\n    return ip",
        "test": "assert removezero_ip(\"1.2.3.4\") == \"1.2.3.4\"",
        "num_ids": 1200,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    return abs(even_num - odd_num)",
        "test": "assert diff_even_odd([1,2,3,4,5]) == 1",
        "num_ids": 1033,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to lists\n    lst1 = list(map(int, str1))\n    lst2 = list(map(int, str2))\n\n    # Sort the lists in non-decreasing order\n    lst1.sort()\n    lst2.sort()\n\n    # Initialize variables for swaps required and current positions in both lists\n    swaps = 0\n    i = j = 0\n\n    # Iterate through the lists until the lists are equal\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] == lst2[j]:\n            i += 1\n            j += 1\n        elif lst1[i] < lst2[j]:\n            swaps += 1\n            i += 1\n        else:\n            swaps += 1\n            j += 1\n\n    # Return the minimum number of swaps required to convert the binary strings\n    return swaps",
        "test": "assert min_Swaps(\"1000\", \"1000\") == 0",
        "num_ids": 1750,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size\n",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and a number k as input, and returns\n    the kth smallest element from arr1 and arr2.\n    \"\"\"\n\n    # Merge the two sorted arrays into a single sorted array\n    merged_arr = arr1 + arr2\n\n    # Find the kth smallest element in the merged array\n    kth_smallest = merged_arr[k-1]\n\n    return kth_smallest",
        "test": "assert find_kth([1,3,5,7,9], [2,4,6,8,10], 1) == 1",
        "num_ids": 1887,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_length = len(str(number))\n    power = 0\n    for i in range(num_length):\n        power += (int(str(number)[i]) ** num_length)\n    if number == power:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 908,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def sum_average(n):\n    \"\"\"\n    Find the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average",
        "test": "assert sum_average(10) == (55, 5.5), \"The sum and average of the first 10 natural numbers should be 55 and 5.5 respectively.\"",
        "num_ids": 879,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True, \"is_Even(2) should return True\"",
        "num_ids": 513,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {} # dictionary to store the count of each character in the string\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] > 1:\n            return char # return the first repeated character\n    \n    return None # if no repeated character is found, return None",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while True:\n        if i <= n:\n            lucid_numbers.append(i)\n            i += 1\n        else:\n            break\n    return lucid_numbers",
        "test": "assert get_ludic(0) == []",
        "num_ids": 1490,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)",
        "test": "assert reverse_words(\"the quick brown fox jumps over the lazy dog\") == \"dog lazy over jumps the fox brown quick the\"",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True, \"The function should return True for 2 as it's a prime number.\"",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180",
        "test": "assert radian_degree(90) == math.pi/2, \"Expected pi/2, got {}\".format(radian_degree(90))",
        "num_ids": 700,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # compile the regex pattern\n    pattern = re.compile(pattern)\n    \n    # search for the pattern in the string\n    matches = pattern.findall(text)\n    \n    # if there are matches, return the matches and their indices\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"hello world\", r\"hello\") == (\"hello\", 0, 5)",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth bell number.\n    '''\n\n    if n < 0:\n        return \"Invalid input\"\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 5\n\n    if n == 4:\n        return 14\n\n    if n == 5:\n        return 42\n\n    if n % 2 == 0:\n        return \"Odd bell numbers are not possible.\"\n\n    return (1/factorial(2*n-2))*(factorial(n)*(factorial(2*n-1))**2)\n\ndef factorial(n):\n    '''\n    This function takes an integer n as input and returns the factorial of n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 4, 5]",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    for i in range(len(test_list)):\n        temp = []\n        for j in range(len(test_list[0])):\n            temp.append(test_list[i][j])\n        test_list[i] = temp\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_value = max(test_list[i])\n    return max_value",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 9",
        "num_ids": 1556,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum",
        "test": "assert cummulative_sum([]) == 0",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    # Initialize an empty list to store the averages\n    avg_list = []\n    \n    # Loop through each tuple in the input tuple\n    for tup in nums:\n        # Calculate the average of the tuple elements\n        avg = sum(tup)/len(tup)\n        # Append the average to the average list\n        avg_list.append(avg)\n        \n    return avg_list",
        "test": "assert average_tuple([]) == []",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo operation on them.\n    '''\n    # Perform element wise modulo operation on the tuples\n    result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return result_tup",
        "test": "assert tuple_modulo((1,2,3),(4,5,6)) == (1,2,3)",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    :param steps: The number of steps required to reach the point (d, 0) from the origin.\n    :param d: The distance required to reach the point (d, 0) from the origin.\n    :return: The minimum number of jumps required to reach the point (d, 0) from the origin.\n    \"\"\"\n    # Initialize variables\n    curr_pos = 0\n    next_pos = 1\n    min_jumps = 0\n    # Loop till the given steps are reached\n    while curr_pos < steps:\n        # Check if the next step is at (d, 0)\n        if next_pos == d:\n            # Update the minimum jumps required\n            min_jumps += 1\n            # Reset the next position\n            next_pos = 1\n            # Increase the current position\n            curr_pos += 1\n        else:\n            # Check if the next step is at a lower point\n            if next_pos > d:\n                # Decrease the next position\n                next_pos -= 1\n            else:\n                # Increase the current position\n                curr_pos += 1\n                # Update the next position\n                next_pos += 1\n    # Return the minimum jumps required\n    return min_jumps",
        "test": "assert min_Jumps(10, 2) == 5",
        "num_ids": 1669,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result",
        "test": "assert div_list([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1.0, 1.0, 1.0, 1.0, 1.0]",
        "num_ids": 796,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    test_str = ''.join([char for char in test_str if char not in num_str])\n    test_str += num_str\n    return test_str",
        "test": "assert move_num('abcde') == 'abcde'",
        "num_ids": 836,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_size = 0\n    i = 0\n    while i < len(a):\n        j = i + 1\n        while j < len(a) and a[j] % a[i]!= 0:\n            j += 1\n        size = j - i\n        if size > max_size:\n            max_size = size\n        i = j\n    return max_size",
        "test": "assert largest_subset([1, 3, 5, 7, 9]) == 3",
        "num_ids": 1644,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays\n    arr = arr1 + arr2\n\n    # Find the median of the merged array\n    arr.sort()\n    median = arr[n-1]\n\n    return median",
        "test": "assert get_median([1, 2, 3, 4], [5, 6, 7, 8], 4) == 4",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result",
        "test": "assert nth_nums([1, 2, 3], 1) == [1, 2, 3]",
        "num_ids": 1015,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    firstElement = newList[0]\n    lastElement = newList[-1]\n    newList[0] = lastElement\n    newList[-1] = firstElement\n    return newList",
        "test": "assert swap_List([1,2]) == [2,1]",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula to calculate the area of a triangle given its base and height\n    def triangle_area(base, height):\n        return 0.5 * base * height\n    \n    # Formula to calculate the area of a semicircle\n    def semicircle_area(r):\n        return math.pi * r ** 2\n    \n    # Find the radius of the largest triangle that can be inscribed in the semicircle with radius r\n    max_radius = r - (math.sqrt(r ** 2 - 2 * r))\n    # Find the area of the largest triangle that can be inscribed in the semicircle with radius max_radius\n    max_area = triangle_area(max_radius, max_radius)\n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return max_area",
        "test": "assert triangle_area(4) == 0.0625, \"Area of triangle is not correct.\"",
        "num_ids": 1242,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = len(array)-1\n\n    if end < start:\n        return None\n\n    mid = (start+end)//2\n    if array[mid] == mid+1:\n        return find_First_Missing(array,start,mid-1)\n    elif array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return mid+1",
        "test": "assert find_First_Missing([1, 2, 4, 5, 7]) == 3",
        "num_ids": 989,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces(\"This is a test\") == \"This%20is%20a%20test\"",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1,2,3,4,5,6,7,8,9]) == [2, 4, 6, 8]",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    if x+1 < len(sub) and sub[x+1]!= (x+1,y):\n        sub.append((x+1,y))\n    if x-1 >= 0 and sub[x-1]!= (x-1,y):\n        sub.append((x-1,y))\n    if y+1 < len(sub[0]) and sub[x][y+1]!= (x,y+1):\n        sub.append((x,y+1))\n    if y-1 >= 0 and sub[x][y-1]!= (x,y-1):\n        sub.append((x,y-1))\n    return sub",
        "test": "assert adjac((1, 2), [(1, 3), (2, 1), (3, 1)]) == [(1, 3), (2, 1), (3, 1), (1, 2), (2, 2), (3, 2)]",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")",
        "test": "assert replace_spaces('hello world') == 'hello_world'",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i, num in enumerate(num_list):\n        if num == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        for i, num in reversed(list(enumerate(num_list))):\n            if i > zero_index:\n                num_list[i] = num_list[i-1]\n        num_list[zero_index] = 0\n    return num_list",
        "test": "assert move_zero([]) == []",
        "num_ids": 1297,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR of all pairs of numbers in the list\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum",
        "test": "assert pair_xor_Sum([1,2,3,4,5,6,7,8,9],9) == 0",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost > sale_amount: \n        print(\"No profit and no loss.\") \n        return True \n    elif actual_cost == sale_amount: \n        print(\"There is no profit but there is loss.\") \n        return True \n    else: \n        print(\"There is a loss but no profit.\") \n        return False",
        "test": "assert noprofit_noloss(100,100) == True",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the temperature in Kelvin\n    k = t + 273.15\n\n    # Calculate the air density (kg/m^3)\n    rho = 1.225  # Estimated air density in kg/m^3\n\n    # Calculate the specific heat capacity (J/kg/K)\n    cp = 1004  # Estimated specific heat capacity in J/kg/K\n\n    # Calculate the absolute vorticity\n    q = 1.60217662e-19  # Elementary charge (Coulomb)\n    alpha = math.atan(v / q / k)\n\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * t - 35.75 * math.exp(17.625 * t / (k + 237.3)) + 0.4275 * alpha\n\n    # Round the wind chill index to the nearest integer\n    wc = round(wc)\n\n    return wc",
        "test": "assert wind_chill(10,50) == 15",
        "num_ids": 1890,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name.title() for name in sample_names]\n    filtered_names = [name for name in names if not name.startswith('a')]\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length",
        "test": "assert sample_nam([\"Oscar\", \"Paul\", \"George\", \"Ringo\"]) == 20",
        "num_ids": 1192,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'(\\(.*?\\))'\n    result = re.sub(pattern, '', items)\n    return result",
        "test": "assert remove_parenthesis('') == ''",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(1, n):\n        a += 2\n        b += 2\n    return a\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[^z]*z[^z]*\\b'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0",
        "test": "assert text_match_wordz_middle(\"zzzabcd\") == False",
        "num_ids": 879,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n):\n        if i < k-1:\n            input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 10) == [1, 2, 3, 4, 5]",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Loop through the keys in the dictionary\n    for key in test_dict:\n        # Check if the key already exists in the tuple, and if so, add the value to the tuple\n        if key in test_tup:\n            test_tup[key].append(test_dict[key])\n        else:\n            # If the key doesn't exist in the tuple, create a new key-value pair and append it to the tuple\n            test_tup[key] = [test_dict[key]]\n    # Return the modified tuple\n    return test_tup",
        "test": "assert add_dict_to_tuple(('apple', 'banana', 'cherry'), {'orange': 2, 'kiwi': 3}) == ('apple', 'banana', 'cherry', 'orange', 'kiwi')",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_path_sum = float('-inf')\n    current_path_sum = 0\n    num_visited_cells = 0\n\n    for i in range(N):\n        for j in range(N):\n            current_path_sum += cost[i][j]\n            num_visited_cells += 1\n            if i == N - 1 and j == N - 1:\n                max_path_sum = max(max_path_sum, current_path_sum)\n                break\n\n            if i < N - 1 and (j == N - 1 or cost[i + 1][j] > cost[i][j]):\n                current_path_sum -= cost[i][j]\n                num_visited_cells -= 1\n                i += 1\n            if j < N - 1 and (i == N - 1 or cost[i][j + 1] > cost[i][j]):\n                current_path_sum -= cost[i][j]\n                num_visited_cells -= 1\n                j += 1\n\n    return max_path_sum / num_visited_cells\n",
        "test": "assert maxAverageOfPath([[1,2],[3,4]]) == 5",
        "num_ids": 2453,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height >= h and weight >= w:\n            filtered_students[name] = data\n    return filtered_students",
        "test": "assert filter_data({'Alice':(1.8, 55.5), 'Bob':(1.7, 70.0), 'Charlie':(1.6, 60.5)}, 1.8, 65) == {}",
        "num_ids": 1916,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 5",
        "num_ids": 1107,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    return sum",
        "test": "assert power_base_sum(10, 0) == 0, \"The sum of digits of 10 raised to the power of 0 is not correct!\"",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = re.compile(r'\"(.+?)\"')\n    matches = pattern.findall(text)\n    return matches",
        "test": "assert extract_quotation('The quick brown \"jumps\" over the lazy \"dog.\"') == ['quick brown', 'jumps', 'over the lazy', 'dog.']",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)",
        "test": "assert multiply_elements(()) == ()",
        "num_ids": 1232,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]",
        "test": "assert sum_list([1,2,3], [4,5,6]) == [5, 7, 9]",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [num for num, group in groupby(sorted(nums))]",
        "test": "assert consecutive_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    LateralSurfaceArea = 2*math.pi*r*h\n    return LateralSurfaceArea",
        "test": "assert lateralsurface_cone(1,2) == math.pi*(1**2) + math.pi*2, 'The lateral surface area of a cone with radius 1 and height 2 should be equal to pi*(r^2) + pi*h.'",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9]+')\n    new_text = re.sub(pattern, ':', text)\n    return new_text",
        "test": "assert replace_specialchar(\"Hello.World\") == \"Hello:World\"",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes an array A and a number x as input and returns the index of the first occurrence of x in A.\n    If x is not present in A, the function returns -1.\n    \"\"\"\n    if len(A) == 0:\n        return -1\n    elif A[0] == x:\n        return 0\n    elif A[-1] == x:\n        return len(A) - 1\n    else:\n        left, right = 0, len(A) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if A[mid] == x:\n                if mid == 0 or A[mid - 1]!= x:\n                    return mid\n                else:\n                    right = mid - 1\n            elif A[mid] > x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 1014,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # initialize variables\n    n = len(arr)\n    res = 0\n    prod = 1\n    \n    # loop through all sublists\n    for i in range(n):\n        for j in range(i, n):\n            # update the product of sublist\n            prod *= arr[j]\n            # add the product to the result\n            res += prod\n    \n    # return the sum of products\n    return res",
        "test": "assert sum_Of_Subarray_Prod([0,0,0]) == 0",
        "num_ids": 1442,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Convert the binary number to a list of bits\n    bits = [int(digit) for digit in bin(n)[2:]]\n\n    # Toggle the middle bit(s)\n    for i in range(len(bits)//2):\n        bits[i], bits[-1-i] = bits[-1-i], bits[i]\n\n    # Convert the list of bits back to an integer\n    return int(''.join(map(str, bits)), 2)",
        "test": "assert set_middle_bits(0) == 0",
        "num_ids": 1168,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect.bisect_left() function to find the insertion point\n    i = bisect.bisect_left(a, x)\n    # If x is already present in the list, return the index of that element\n    if i!= len(a) and a[i] == x:\n        return i\n    # If x is not present in the list, return the index where it can be inserted\n    return i",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 4) == 2",
        "num_ids": 1264,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert check_str(\"ThisIsAString\") == False",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(2) == 2",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 1\n    else:\n        triangular = 10**(n-1) + 5 \n        for i in range(2, triangular):\n            triangular = i * (10**(n-1) + 5)\n        return triangular-n",
        "test": "assert find_Index(1) == 1",
        "num_ids": 1202,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    \n    # loop through the tuple using zip function to create adjacent pairs\n    for i, j in zip(test_tup, test_tup[1:]):\n        # assign the first element as key and second element as value\n        my_dict[i] = j\n        \n    return my_dict",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])",
        "test": "assert all_Characters_Same('world') == False, 'all_Characters_Same(\"world\") should return False'",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    area = math.sqrt(3) * s ** 2\n    return area",
        "test": "assert area_tetrahedron(4) == 24, \"area_tetrahedron(4) should be 24\"",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    # reverse the first half of the list\n    list[:m] = list[:m][::-1]\n    # reverse the second half of the list\n    list[m:] = list[m:][::-1]\n    # reverse the entire list\n    list = list[::-1]\n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1178,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def check_none(test_tup):\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3)) == False",
        "num_ids": 609,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # initialize an empty list to store the numbers that are divisible by every digit it contains\n    divisible_nums = []\n\n    # iterate through each number within the given range\n    for num in range(startnum, endnum+1):\n        # check if the number is divisible by every digit in its string representation\n        if lambda x: all(int(digit) % int(num) == 0 for digit in str(x)):\n            divisible_nums.append(num)\n\n    # return the list of divisible numbers\n    return divisible_nums",
        "test": "assert divisible_by_digits(1, 9) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 3228,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r",
        "test": "assert sector_area(1, 90) == 3.141592653589793, \"Expected 3.141592653589793, got {}\".format(sector_area(1, 90))",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D table to store lengths of LCS of subproblems\n    L = [[[0] * (o + 1) for j in range(m + 1)] for i in range(n + 1)]\n\n    # Build LCS table in bottom up manner\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, o + 1):\n                if X[j - 1] == Y[i - 1] and Y[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                elif L[i - 1][j][k] > L[i][j - 1][k]:\n                    L[i][j][k] = L[i - 1][j][k]\n                else:\n                    L[i][j][k] = L[i][j - 1][k]\n\n    # Find the longest common subsequence\n    lcs = \"\"\n    i = n\n    j = m\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[j - 1] == Y[i - 1] and Y[i - 1] == Z[k - 1]:\n            lcs = X[j - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] > L[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n            k -= 1\n\n    return lcs",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GXTX\") == \"\"",
        "num_ids": 2019,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Splitting the string into a list of words\n    words = re.findall('\\b\\w+\\b', str1)\n    \n    # Initializing an empty string to store the capitalized words with spaces\n    capitalized_words = ''\n    \n    # Iterating over the list of words\n    for i, word in enumerate(words):\n        # Capitalizing the first letter of the word\n        capitalized_word = word.capitalize()\n        \n        # Checking if the previous word was capitalized\n        if i > 0 and words[i-1][-1].isalpha() and words[i-1].isalpha():\n            # Adding a space between the words\n            capitalized_words +=''\n        # Adding the capitalized word to the string\n        capitalized_words += capitalized_word\n        \n    return capitalized_words",
        "test": "assert capital_words_spaces(\"Capitalized 1 sentence\") == \"Capitalized 1 sentence\"",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: [int(y) if y.isdigit() else float(y) for y in x.split('.')] )\n    return nums_str",
        "test": "assert sort_numeric_strings(['2', '4', '1', '3', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 1350,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)",
        "test": "assert add_tuple([], ()) == ()",
        "num_ids": 904,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if arr[left] < arr[i] and arr[right] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) or check_min_heap_helper(arr, right)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)\n",
        "test": "assert check_min_heap_helper([5,3,8,1,7], 0) == True, \"The given array is not a min heap\"",
        "num_ids": 1427,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sorting the list in ascending order\n    test_list.sort()\n    \n    # Initializing variables to store minimum records\n    min_list = []\n    min_count = 0\n    \n    # Traversing through the sorted list and keeping track of the minimum count and minimum records\n    for i in range(len(test_list)):\n        if i == 0:\n            min_list.append(test_list[i])\n            min_count += 1\n        elif len(min_list) < K:\n            if test_list[i] < min_list[-1]:\n                min_list.append(test_list[i])\n                min_count += 1\n            elif test_list[i] == min_list[-1]:\n                min_count += 1\n        else:\n            if test_list[i] > min_list[-1]:\n                min_list.pop(0)\n                min_count -= 1\n            elif test_list[i] == min_list[-1]:\n                min_count -= 1\n                \n    return min_list",
        "test": "assert min_k([], 0) == []",
        "num_ids": 2297,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3:\n            common_elements.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l3[i])\n    return common_elements",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 1241,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    return sorted(numbers)[1]",
        "test": "assert second_smallest([1, 1, 1]) == 1",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"ababababab\") == True, \"Error in text_match_zero_one function\"",
        "num_ids": 1655,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def count_reverse_pairs(test_list):\n    def count_reverse_pairs_helper(arr, start, end):\n        if start >= end:\n            return 0\n\n        count = 0\n        mid = (start + end) // 2\n\n        count += count_reverse_pairs_helper(arr, start, mid)\n        count += count_reverse_pairs_helper(arr, mid + 1, end)\n\n        i = j = k = 0\n\n        while i < mid and j < end:\n            if arr[i] < arr[j]:\n                i += 1\n            elif arr[i] > arr[j]:\n                j += 1\n            else:\n                count += count_reverse_pairs_helper(arr, i + 1, mid)\n                j += 1\n\n        return count\n\n    return count_reverse_pairs_helper(test_list, 0, len(test_list) - 1)\n",
        "test": "assert count_reverse_pairs(['hello', 'world']) == 0",
        "num_ids": 1217,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    sublist_count = {}\n    # loop through the original list\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # check if the tuple is already in the dictionary\n        if sublist_tuple in sublist_count:\n            # increment the count for the tuple\n            sublist_count[sublist_tuple] += 1\n        else:\n            # add the tuple and its count to the dictionary\n            sublist_count[sublist_tuple] = 1\n    # return the dictionary\n    return sublist_count",
        "test": "assert unique_sublists([1,2,3,4,5]) == {",
        "num_ids": 1432,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False",
        "test": "assert is_decimal(\"1.0000\") == False, \"Error: is_decimal(1.0000) returns True\"",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True",
        "test": "assert unique_Element([1, 2, 3, 4, 4, 1]) == False",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in days:\n        if days[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert check_monthnumber_number(1) == False",
        "num_ids": 1147,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([1,3,5,7], 4) == 2",
        "num_ids": 1286,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5, \"number_ctr should return 5 for input string '12345'\"",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        result = 2\n        count = 2\n        while count < n:\n            result += 2\n            count += 1\n        return result - 1",
        "test": "assert is_polite(1) == 1, \"is_polite(1) should return 1\"",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 915,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 7) == 2",
        "num_ids": 1210,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))",
        "test": "assert Diff([1,2,3], [1,2,3]) == []",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initializing the sum variable to 0\n    sum_of_fourth_power = 0\n    # iterating over the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # calculating the fourth power of the current odd number\n        fourth_power = i ** 4\n        # adding the fourth power to the sum of fourth power\n        sum_of_fourth_power += fourth_power\n    # returning the sum of fourth power of the first n odd natural numbers\n    return sum_of_fourth_power",
        "test": "assert odd_num_sum(1) == 0",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum():\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return not stack",
        "test": "assert check_expression(\"(a+b)*c)d\") == False",
        "num_ids": 841,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = []\n\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n\n    return \" \".join(filtered_words)",
        "test": "assert remove_length('', 5) == ''",
        "num_ids": 956,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # Use re.search() function to search for the pattern in the text.\n    match = re.search(pattern, text)\n\n    # If match is found, return a tuple of (match, start_position).\n    if match:\n        return match.group(), match.start()\n\n    # If no match is found, return None.\n    else:\n        return None",
        "test": "assert occurance_substring(\"Hello World\", \"Python\") == None",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 2, 4, 6, 8]) == False",
        "num_ids": 775,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"\") == 0",
        "num_ids": 945,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Calculate the sum of non-repeated elements\n    non_repeated_sum = 0\n    for num in freq:\n        if freq[num] == 1:\n            non_repeated_sum += num\n    \n    return non_repeated_sum",
        "test": "assert find_sum([1,2,3,4,5]) == 15, \"Incorrect output\"",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list of elements as input and returns a list of sublists\n    containing consecutive duplicates of the elements in the input list.\n    '''\n    return [list(group) for key, group in groupby(lst) if key]",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for lst in list1:\n        if lst not in count_dict:\n            count_dict[lst] = 1\n        else:\n            count_dict[lst] += 1\n    return count_dict",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i])+sum(test_list[j]) == 0:\n                comb.append((test_list[i], test_list[j]))\n    return comb",
        "test": "assert find_combinations([(1, 2), (3, 4)]) == []",
        "num_ids": 2235,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    divisors = sorted(list(set(divisors)))\n    count_divisors = len(divisors)\n    if count_divisors % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert count_divisors(30) == True",
        "num_ids": 929,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n\n        # Initialize current length and current sum variables\n        current_length = 1\n        current_sum = arr[i]\n\n        # Check for the next odd length subarray\n        for j in range(i+2, len(arr), 2):\n\n            # Update the current length and sum of the subarray\n            current_length += 1\n            current_sum += arr[j]\n\n            # Check if the current subarray has an odd length\n            if current_length % 2 == 1:\n\n                # Add the sum of the current subarray to the sum variable\n                sum += current_sum\n\n    # Return the sum of all odd length subarrays\n    return sum",
        "test": "assert odd_length_sum([1,2,3,4,5,6]) == 21",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = (g - b) / (max_value - min_value)\n    elif max_value == g:\n        h = 2 + (b - r) / (max_value - min_value)\n    else:\n        h = 4 + (r - g) / (max_value - min_value)\n    \n    h = h * 60\n    if h < 0:\n        h += 360\n    \n    v = max_value\n    \n    if v == 0:\n        s = 0\n    else:\n        s = (max_value - min_value) / max_value\n        \n    return (h, s, v)",
        "test": "assert rgb_to_hsv(255, 0, 0) == (0, 1, 1), \"Test 1 Failed\"",
        "num_ids": 2443,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the product of the first even and odd numbers in the list.\n    If there are no even or odd numbers in the list, it returns None.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    if even_count > 0 and odd_count > 0:\n        return even_count * odd_count\n    else:\n        return None",
        "test": "assert mul_even_odd([1,2,3,4,5]) == 6 # correct",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert the string to a list of integers\n    int_list = [int(x) for x in test_str]\n    # convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple",
        "test": "assert tuple_str_int(('1', '2', '3')) == (1, 2, 3)",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_left(a, x)\n    return index",
        "test": "assert right_insertion([1,3,5,7,9], 4) == 2, \"right_insertion([1,3,5,7,9], 4) should return 2\"",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three(\"aabbabc\") == False, \"text_match_three did not match expected output\"",
        "num_ids": 4489,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n    test_list (list): List of integers to be added to the new tuple.\n    test_str (str): String to be added to the new tuple.\n\n    Returns:\n    tuple: New tuple with the given string and list added to it.\n    \"\"\"\n\n    # Use the '+' operator to concatenate the two arguments\n    new_tuple = tuple(test_list) + (test_str,)\n\n    return new_tuple",
        "test": "assert new_tuple(['apple', 'banana', 'cherry'], 'hello') == ('apple', 'banana', 'cherry', 'hello')",
        "num_ids": 721,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len(set(nums[i:])) % 2 == 0:\n                return False\n    return True",
        "test": "assert even_position([1, 2, 3, 4, 5]) == True",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return tuple(new_tup)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 1846,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list of lists as input and returns the count of the number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n        else:\n            return \"Only lists are allowed in the input list.\"\n    return count",
        "test": "assert count_list([[1, 2, 3], [4, 5, 6]]) == 2",
        "num_ids": 823,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # find the index of the last occurrence of x in arr\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    # if x is not present in the array\n    return -1",
        "test": "assert last([1, 2, 3, 4, 5], 6) == -1, \"last([1, 2, 3, 4, 5], 6) should return -1\"",
        "num_ids": 1249,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_starta_endb('hello') == False, \"Incorrect output for text_starta_endb('hello')\"",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6, \"The sum of the dictionary items should be 6.\"",
        "num_ids": 470,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i\n    return total",
        "test": "assert sum_odd(10) == 30",
        "num_ids": 678,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15, \"The sum of [1, 2, 3, 4, 5] should be 15.\"",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d > 31:\n        print(\"Invalid rotation amount\")\n        return n\n    else:\n        mask = (1 << d) - 1\n        return (n << d) | (n >> (32-d)) & mask",
        "test": "assert left_rotate(5, 2) == 16, \"The output of left_rotate(5, 2) is incorrect.\"",
        "num_ids": 1022,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces(\"Hello  World 123\") == \"HelloWorld123\"",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for num in [x,y,z]:\n        if num == x:\n            count += 1\n    return count",
        "test": "assert test_three_equal(4, 3, 3) == 1, \"Function should return 1\"",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                return 1\n    return 0",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0, \"count_rotation([1, 2, 3, 4, 5]) == 0\"",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return True\n    return False",
        "test": "assert is_perfect_square(17) == False, \"is_perfect_square(17) should return False.\"",
        "num_ids": 971,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "test": "assert is_product_even([2, 4, 6, 8, 10]) == True",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables for the maximum sum and the current sum\n    max_sum = 0\n    current_sum = 0\n\n    # loop through each list in the lists of lists\n    for lst in lists:\n        # loop through each element in the list\n        for num in lst:\n            # add the current element to the current sum\n            current_sum += num\n\n            # check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                # update the maximum sum\n                max_sum = current_sum\n\n    # return the list with the highest sum\n    return lists[lists.index(max(lst))], max_sum",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 2043,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables for maximum run of uppercase characters and current run length\n    max_run = 0\n    current_run = 0\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run length\n        if char.isupper():\n            current_run += 1\n        # If the current run is longer than the maximum run, update the maximum run\n        elif current_run > max_run:\n            max_run = current_run\n        # If the current run is the same length as the maximum run, update the maximum run if the current run is longer\n        elif current_run == max_run:\n            if len(char) > len(test_str[max_run:current_run+1]):\n                max_run = current_run\n    # Return the maximum run of uppercase characters\n    return max_run",
        "test": "assert max_run_uppercase(\"Aa\") == 1",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num",
        "test": "assert first_odd([1, 3, 5, 7, 9]) == 1",
        "num_ids": 669,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    # Check if test_tup is a tuple\n    if not isinstance(test_tup, tuple):\n        return \"The input is not a tuple.\"\n\n    # Check if test_tup contains K\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K((1,2,3,4), 5) == False, \"The given tuples do not contain the k.\"",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns True if all elements in the second tuple are smaller than their corresponding elements in the first tuple. Otherwise, it returns False.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    # Loop through each element of the second tuple\n    for i in range(len(test_tup2)):\n        # Check if the element in the second tuple is smaller than the element in the first tuple\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    # If no element in the second tuple is smaller than its corresponding element in the first tuple, return True\n    return True",
        "test": "assert check_smaller((1, 2, 3), (3, 2, 1)) == False",
        "num_ids": 1053,
        "indeed": true
    }
]