[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements",
        "test": "assert similar_elements([], []) == []",
        "num_ids": 631
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False",
        "test": "assert is_not_prime(2) == False",
        "num_ids": 710
    },
    {
        "number": 4,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    hq.heapify(nums)\n    return hq.nlargest(n, nums)",
        "test": "assert heap_queue_largest([1,5,3,7,2],2) == [7,5]",
        "num_ids": 826
    },
    {
        "number": 6,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x & (x - 1) == 0: \n        return True\n    else: \n        return False\n",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 604
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result",
        "test": "assert find_char_long(\"apple\") == [\"apple\"]",
        "num_ids": 576
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 612
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Get the length of the string\n    n = len(str)\n\n    # Initialize the minimum number of rotations to be greater than zero\n    min_rot = 1\n\n    # Loop through the characters of the string\n    for i in range(n):\n        # Loop through the remaining characters\n        for j in range(i+1, n):\n            # Check if the current substring is a rotation of the previous substring\n            if str[i:j+1] == str[j:i+1][::-1]:\n                # If yes, update the minimum number of rotations\n                min_rot = min(min_rot, j-i+1)\n\n    return min_rot",
        "test": "assert find_Rotations(\"abc\") == 1",
        "num_ids": 1254
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 0:\n        return \"The character '\" + ch + \"' is not present in the string\"\n    elif s.count(ch) == 1:\n        if s.find(ch) == 0:\n            return s[1:]\n        elif s.find(ch) == len(s)-1:\n            return s[:len(s)-1]\n        else:\n            return \"The character '\" + ch + \"' occurs more than once in the string and is not at the beginning or end\"\n    else:\n        return \"The character '\" + ch + \"' occurs more than once in the string and is neither the first nor the last occurrence\"",
        "test": "assert remove_Occ(\"hello\", \"h\") == \"ello\"",
        "num_ids": 893
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sort_matrix(M):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix by row sums\n    sorted_M = sorted(M, key=lambda x: row_sums.index(sum(x)))\n    \n    return sorted_M",
        "test": "assert sort_matrix([[1,2],[3,4]]) == [[1,2],[3,4]], \"sort_matrix([[1,2],[3,4]]) should return [[1,2],[3,4]]\"",
        "num_ids": 1661
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume",
        "test": "assert find_Volume(1,2,3) == 6",
        "num_ids": 521
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = re.compile(r'[a-z_]+')\n    if regex.match(text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"A_b_c\") == False",
        "num_ids": 581
    },
    {
        "number": 17,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return a * 4",
        "test": "assert square_perimeter(1) == 4, \"The perimeter of a square with a side length of 1 is not equal to 4.\"",
        "num_ids": 424
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def str_to_list(string):\n    char_set = set(string)\n    for char in string:\n        if char in char_set:\n            char_set.remove(char)\n    return list(char_set)\n",
        "test": "assert str_to_list(\"\") == []",
        "num_ids": 871
    },
    {
        "number": 19,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store the unique elements of the array\n    unique_nums = set(arraynums)\n\n    # If the length of the set is equal to the length of the array, then there is no duplicate element\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True",
        "test": "assert test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False",
        "num_ids": 833
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_woodall(x):\n    if x % 3 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(1) == False, '1 should not be a woodball'",
        "num_ids": 491
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse - 1 or num == reverse",
        "test": "assert rev(8) == False",
        "num_ids": 655
    },
    {
        "number": 57,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Max_Num(arr):\n    # initialize max_num with the first number in the array\n    max_num = arr[0]\n    # iterate over the remaining digits in the array\n    for i in range(1, len(arr)):\n        # check if the current digit can form a larger number than the current max_num\n        if arr[i] > max_num:\n            max_num = arr[i]\n    # return the max_num\n    return max_num",
        "test": "assert find_Max_Num([1,2,3,4,5]) == 5",
        "num_ids": 920
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-5, -10) == False",
        "num_ids": 596
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_square(num):\n        return num ** 0.5 == int(num ** 0.5)\n\n    def octagon(n):\n        return int(3 * n * n ** 0.5) + 1\n\n    for i in range(n):\n        if is_square(octagon(i + 1)):\n            return i + 1\n\n    return None\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 804
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum([int(digit) for digit in s[i:j]]) == j-i:\n                substrings[s[i:j]] += 1\n    return sum(substrings.values())",
        "test": "assert count_Substrings(\"123\") == 1",
        "num_ids": 881
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize the smallest number to the first element of the list\n    smallest = xs[0]\n    # Loop through the list and update the smallest number if the current element is smaller\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest",
        "test": "assert smallest_num([5, 2, 8, 1, 3]) == 1, \"Error in smallest_num function\"",
        "num_ids": 536
    },
    {
        "number": 63,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize max_diff as 0\n    max_diff = 0\n    # Iterate through the list of tuples\n    for i in range(len(test_list)-1):\n        # Iterate through the remaining tuples after the current index\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the values of the current and next tuples\n            diff = abs(test_list[i][1] - test_list[j][1])\n            # Update max_diff if necessary\n            if diff > max_diff:\n                max_diff = diff\n    # Return max_diff\n    return max_diff",
        "test": "assert max_difference([(3, 6), (9, 12), (1, 4), (7, 10), (5, 8)]) == 8 # correct output",
        "num_ids": 1020
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "test": "assert subject_marks([(90, 'English'), (85, 'Maths'), (92, 'Science'), (88, 'Social Studies')]) == [('85', 'Maths'), ('88', 'Social Studies'), ('90', 'English'), ('92', 'Science')]",
        "num_ids": 712
    },
    {
        "number": 65,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        if isinstance(lst, list):\n            return [item for sublist in lst for item in flatten(sublist)]\n        else:\n            return [lst]\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 863
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, -2, 3, -4, 5]) == 3",
        "num_ids": 502
    },
    {
        "number": 67,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n) // (2*n-1)\n\ndef partition(n):\n    '''\n    Write a function to find the number of ways to partition a set of numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * bell_number(n-1)",
        "test": "assert bell_number(1) == 1, \"bell_number(1) should be 1\"",
        "num_ids": 1390
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    if len(A) < 2: \n        return True\n    \n    if A[0] < A[1]: \n        for i in range(1, len(A)): \n            if A[i] <= A[i-1]: \n                return False\n        return True\n    \n    if A[0] > A[1]: \n        for i in range(1, len(A)): \n            if A[i] >= A[i-1]: \n                return False\n        return True\n    \n    return True",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True",
        "num_ids": 951
    },
    {
        "number": 69,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    for item in l:\n        if item in s:\n            return True\n    return False",
        "test": "assert is_sublist([1, 2, 3, 4, 5], [3, 4]) == True",
        "num_ids": 629
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True",
        "test": "assert find_equal_tuple([(1, 2, 3), (4, 5), (6, 7), (8)]) == False",
        "num_ids": 613
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize variables\n    gap = len(nums) // 2\n    swapped = True\n    i = 0\n\n    # Loop until no more swaps are made\n    while swapped:\n        swapped = False\n\n        # Loop through the list and swap adjacent elements if they are in the wrong order\n        for j in range(gap):\n            if nums[j] > nums[j + gap]:\n                nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                swapped = True\n\n        # Decrease the gap size for the next iteration\n        gap = int(gap / 1.3)\n\n        # If the gap size becomes 1, then the list is already sorted\n        if gap == 1:\n            break\n\n    return nums",
        "test": "assert comb_sort([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1] * 10",
        "num_ids": 1158
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # checking if n can be represented as the difference of two squares\n    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if i*i + j*j == n:\n                print(f'{i}*{i} - {j}*{j} = {n}')\n                return True\n    return False",
        "test": "assert dif_Square(16) == False, \"16 is not a valid input for dif_Square()\"",
        "num_ids": 848
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two arrays: colors and patterns. The colors array is a list of colors that can be used to make a pattern, and the patterns array is a list of patterns that follow the sequence of colors.\n\n    The function checks whether it follows the sequence given in the patterns array. It returns True if it follows the sequence, and False otherwise.\n\n    Example:\n\n    colors = ['red', 'blue', 'green', 'yellow']\n    patterns = [\n      ['red', 'blue', 'green'],\n      ['yellow', 'green','red'],\n      ['red', 'green', 'blue'],\n      ['yellow', 'blue', 'green'],\n    ]\n\n    The function should return True because the patterns array follows the sequence of colors.\n    '''\n\n    # check if the lengths of both arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # check if each pattern is valid\n    for pattern in patterns:\n        if len(pattern)!= len(colors):\n            return False\n        for color in pattern:\n            if color not in colors:\n                return False\n\n    # if all checks pass, the function returns True\n    return True",
        "test": "assert is_samepatterns(['red', 'green', 'blue'], ['red', 'blue', 'green', 'yellow']) == False, \"Test case 2: [red, green, blue] followed by [red, blue, green, yellow]\"",
        "num_ids": 1259
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == [(1, 2, 3), (4, 5, 6)]",
        "num_ids": 1067
    },
    {
        "number": 77,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False",
        "test": "assert is_Diff(110) == True",
        "num_ids": 420
    },
    {
        "number": 79,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False",
        "test": "assert word_len(\"hello\") == True",
        "num_ids": 455
    },
    {
        "number": 80,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return (n-1) * n * (2*n-1) // 6",
        "test": "assert tetrahedral_number(1) == 0",
        "num_ids": 574
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V",
        "test": "assert volume_sphere(1.0) == 4.1887902047863904, \"The function is not working correctly for the given value of r = 1.0.\"",
        "num_ids": 474
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr((sum_ascii % 26) + ord('a'))",
        "test": "assert get_Char(\"world\") == 21, \"get_Char('world') should return 21\"",
        "num_ids": 1684
    },
    {
        "number": 84,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n-1]",
        "test": "assert sequence(1) == 1, \"sequence(1) should return 1\"",
        "num_ids": 601
    },
    {
        "number": 85,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4*math.pi*(1**2), \"Incorrect calculation of surface area for a sphere with radius 1.\"",
        "num_ids": 575
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case: n = 1\n    if n == 1:\n        return 1\n\n    # Base case: n = 2\n    if n == 2:\n        return 2\n\n    # Base case: n = 3\n    if n == 3:\n        return 4\n\n    # Base case: n = 4\n    if n == 4:\n        return 9\n\n    # Calculate the center of the nth centered hexagonal number\n    center = (n * (3 * n - 1)) / 2\n\n    # Calculate the upper right quadrant and lower left quadrant\n    upper_right = (center * (center + 1) // 2) + center\n    lower_left = 3 * center * center + center - 2\n\n    # Check if n is in the upper right quadrant\n    if n <= upper_right:\n        return lower_left + (n - 1)\n\n    # Check if n is in the lower left quadrant\n    else:\n        return lower_left + (n - 1 - upper_right)",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 771
    },
    {
        "number": 87,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Define a new empty dictionary to store the merged data\n    merged_dict = {}\n\n    # Loop through each dictionary and add the items to the merged_dict\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict",
        "test": "assert merge_dictionaries_three({'a':1, 'b':2}, {'c':3, 'd':4}, {'e':5, 'f':6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}",
        "num_ids": 1222
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict",
        "test": "assert freq_count([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 818
    },
    {
        "number": 89,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n_min = 1\n    n_max = N\n    n_closest = (n_max + n_min) // 2\n    \n    while n_closest < N and n_max - n_min > 1:\n        if n_closest * 2 > N:\n            n_min = n_closest\n        else:\n            n_max = n_closest\n        \n        n_closest = (n_max + n_min) // 2\n    \n    return n_closest",
        "test": "assert closest_num(2)==1, 'closest_num(2) should return 1'",
        "num_ids": 593
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len",
        "test": "assert len_log(['']) == 0",
        "num_ids": 582
    },
    {
        "number": 91,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if isinstance(str1, list):\n        for string in str1:\n            if sub_str in string:\n                return True\n    return False",
        "test": "assert find_substring(['apple', 'banana', 'cherry', 'date', 'elderberry'], 'banana') == True",
        "num_ids": 635
    },
    {
        "number": 92,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is even\n    if n % 2 == 0:\n        # Check if the number is divisible by 4 or 6\n        if n % 4 == 0 or n % 6 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert is_undulating(10) == False, \"is_undulating(10) should return False\"",
        "num_ids": 831
    },
    {
        "number": 93,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a, b//2) * power(a, b//2)\n    else:\n        return a * power(a, b-1)",
        "test": "assert power(2, 3) == 8",
        "num_ids": 406
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]",
        "test": "assert index_minimum([(\"apple\", 3), (\"banana\", 2), (\"cherry\", 10)]) == \"banana\"",
        "num_ids": 703
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Find_Min_Length(lst):\n    min_length = 999999\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 731
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count",
        "test": "assert divisor(10) == 4 # Correct",
        "num_ids": 493
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n",
        "test": "assert frequency_lists([[1,2,3],[4,5],[6,7,8,9],[10,11,12]]) == {1: 2, 2: 2, 3: 1, 4: 1, 5: 1, 6: 2, 7: 2, 8: 2, 9: 1, 10: 1, 11: 1, 12: 1}",
        "num_ids": 1166
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:  \n        result *= num\n    result /= len(numbers)\n    return result",
        "test": "assert multiply_num([4, 5, 6]) == [24, 30, 36]",
        "num_ids": 558
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 693
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Find the smallest palindrome that is greater than the input number\n    smallest_palindrome = 0\n    while True:\n        if is_palindrome(smallest_palindrome):\n            break\n        smallest_palindrome += 1\n\n    # Calculate the difference between the smallest palindrome and the input number\n    diff = abs(num - smallest_palindrome)\n\n    # Find the next smallest palindrome that is greater than the input number by incrementing the smallest palindrome\n    next_smallest_palindrome = smallest_palindrome + diff\n    while True:\n        if is_palindrome(next_smallest_palindrome):\n            break\n        next_smallest_palindrome += diff\n\n    return next_smallest_palindrome\n\n\ndef is_palindrome(n):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]",
        "test": "assert next_smallest_palindrome(12321) == 123321",
        "num_ids": 1382
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if k is a positive integer\n    if not isinstance(k, int) or k <= 0:\n        raise ValueError('k must be a positive integer')\n    \n    # check if the array has at least k elements\n    if len(arr) < k:\n        raise IndexError('Array has less than k elements')\n    \n    # find the kth element using the binary search algorithm\n    left, right = 1, len(arr)\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid-1] == k:\n            return mid\n        elif arr[mid-1] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # if kth element is not found, return None\n    return None",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 707
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for letter in word:\n        if letter.isupper():\n            camel_case += letter\n        else:\n            camel_case += letter.upper()\n    return camel_case",
        "test": "assert snake_to_camel(\"foo_bar_baz\") == \"fooBarBaz\"",
        "num_ids": 559
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Create a list of pairs of integers representing the edges of a graph\n    edges = [(i, j) for i in range(1, n+1) for j in range(i+1, n+1) if i!= j and j!= m]\n    \n    # Create a list of nodes in the graph\n    nodes = list(range(1, n+1))\n    \n    # Initialize the distance from the start node to the first node\n    dist = [0] * (n+1)\n    dist[1] = 1\n    \n    # Breadth-first search to find the shortest path to the target node\n    queue = [1]  # Start with the start node\n    while queue:\n        node = queue.pop(0)\n        if node == n:\n            # Found the target node, return its distance\n            return dist[node]\n        \n        # For each adjacent node, update its distance if it is shorter than the current one\n        for neighbor, weight in edges:\n            if neighbor in dist and dist[node] + weight < dist[neighbor]:\n                dist[neighbor] = dist[node] + weight\n                queue.append(neighbor)\n    \n    # No path found, return 0 as the Eulerian number\n    return 0",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 1130
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['grape', 'orange', 'kiwi'], ['mango', 'pineapple','strawberry']]) == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange'], ['mango', 'pineapple','strawberry']]",
        "num_ids": 552
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count",
        "test": "assert count([True, True, False, True, False]) == 3, \"Error in count function. The count should return 3.\"",
        "num_ids": 418
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup",
        "test": "assert add_lists([], ()) == ()",
        "num_ids": 651
    },
    {
        "number": 108,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into one list\n    all_numbers = num1 + num2 + num3\n\n    # Create a min heap to keep track of the numbers that need to be popped\n    min_heap = []\n\n    # Iterate through the list of numbers and push each number onto the heap\n    for num in all_numbers:\n        heapq.heappush(min_heap, num)\n\n    # Pop the numbers off the heap and add them to a new list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list",
        "test": "assert merge_sorted_list([], [], []) == []",
        "num_ids": 2106
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s) % 2 == 0:\n        s = s[:len(s)//2] + s[len(s)//2:]\n    \n    count = 0\n    for i in range(n):\n        temp = s[::-1]\n        if sum([1 for j in temp if int(j) % 2!= 0]) % 2 == 0:\n            count += 1\n    \n    return count",
        "test": "assert odd_Equivalent('10010', 2) == 2",
        "num_ids": 990
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # initialize an empty set to store common elements\n    common_set = set()\n\n    # iterate through the nested list and add all unique elements to the set\n    for item in nestedlist:\n        for nested_item in item:\n            common_set.add(nested_item)\n\n    # return the set of common elements\n    return common_set",
        "test": "assert common_in_nested_lists([[1, 2, 3], [3, 4, 5], [6, 7, 8]]) == [3, 5]",
        "num_ids": 1047
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"123\") == True, \"Expected True\"",
        "num_ids": 340
    },
    {
        "number": 115,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 413
    },
    {
        "number": 116,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert tuple to list\n    nums_list = list(nums)\n    # initialize a variable to store the integer value\n    int_value = 0\n    # iterate through the list and add each integer to the int_value\n    for num in nums_list:\n        int_value += num\n    # return the integer value\n    return int_value",
        "test": "assert tuple_to_int((4, 5, 6)) == 15",
        "num_ids": 494
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    # Define a function to check if an element is convertible to a float\n    def is_float(elem):\n        try:\n            float(elem)\n            return True\n        except ValueError:\n            return False\n\n    # Loop through each element in the list\n    for i in range(len(test_list)):\n        # Check if the element is convertible to a float\n        if is_float(test_list[i]):\n            # If it is, convert it to a float and store it in the list\n            test_list[i] = float(test_list[i])\n\n    return test_list",
        "test": "assert list_to_float([[\"1\", \"2\"], [\"3.0\", \"4.0\"], [\"5\", \"6\"], [1, 2, 3]]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]",
        "num_ids": 1011
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character\n    words = string.split()\n    # Return the list of words\n    return words",
        "test": "assert string_to_list(\"apple orange banana\") == [\"apple\", \"orange\", \"banana\"]",
        "num_ids": 322
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    # Iterate through the array and update the frequency of each element in the dictionary\n    for element in arr:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    # Iterate through the dictionary and find the element that appears only once\n    for element in freq:\n        if freq[element] == 1:\n            return element\n    # If no element appears only once, return None\n    return None",
        "test": "assert search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == None",
        "num_ids": 1009
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize variables\n    max_product = -100000000000\n    max_pair = (-100000000000, -100000000000)\n\n    # Loop through the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Get the absolute product of the two numbers in the tuple\n            product = abs(list1[i] * list1[j])\n\n            # If the product is greater than the current maximum, update the max_product and max_pair variables\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i], list1[j])\n\n    # Return the maximum absolute product and the tuple containing the maximum absolute product\n    return max_product, max_pair",
        "test": "assert max_product_tuple([[1, -2, 3], [4, 5, 6], [-7, 8, 9]]) == 15",
        "num_ids": 1067
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    def is_amicable(num):\n        \"\"\"\n        Helper function to check if a number is amicable or not.\n        \"\"\"\n        if num in amicable_numbers:\n            return True\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        amicable_numbers[num] = True\n        return True\n\n    amicable_numbers = {}\n    total = 0\n    for i in range(2, limit+1):\n        if is_amicable(i):\n            total += i\n\n    return total",
        "test": "assert amicable_numbers_sum(28123) == 17829, \"amicable_numbers_sum(28123) should be 17829\"",
        "num_ids": 1481
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle",
        "test": "assert angle_complex(1,2) == cmath.phase(1+2j)",
        "num_ids": 704
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize two variables to store the number of 0s and 1s in the string\n    count0 = 0\n    count1 = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        \n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count0 += 1\n            \n        # If the character is a 1, increment the count of 1s\n        else:\n            count1 += 1\n            \n        # Update the difference between the number of 0s and 1s\n        max_diff = max(count0, count1)\n        \n        # Update the count of 0s and 1s for the next character\n        if char == '0':\n            count0 -= 1\n        else:\n            count1 -= 1\n            \n        # Return the maximum difference between the number of 0s and 1s\n        return max_diff",
        "test": "assert find_length(\"011010\") == 1",
        "num_ids": 1200
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sum_of_common_divisors(num1, num2):\n    def common_divisor(num1, num2):\n        if num2 == 0:\n            return num1\n        if num1 % num2 == 0:\n            return num2\n        return common_divisor(num2, num1 % num2)\n\n    def sum_of_divisors(num):\n        sum = 0\n        while num!= 0:\n            sum += num % 10\n            num //= 10\n        return sum\n\n    a_divisor = common_divisor(num1, num2)\n    b_divisor = common_divisor(num2, num1)\n\n    a_sum_of_divisors = sum_of_divisors(num1 // a_divisor)\n    b_sum_of_divisors = sum_of_divisors(num2 // b_divisor)\n\n    return a_sum_of_divisors + b_sum_of_divisors\n",
        "test": "assert sum(48, 60) == 48 # the correct answer for the sum of common divisors of 48 and 60 is 48",
        "num_ids": 875
    },
    {
        "number": 127,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 350
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words in a list of words that are longer than n characters.\n\n    Args:\n        n (int): The maximum number of characters allowed for a word.\n        words (list): A list of words.\n\n    Returns:\n        A list of words that are longer than n characters.\n    \"\"\"\n    return [word for word in words if len(word) > n]",
        "test": "assert long_words(5, ['hello', 'world', 'this', 'is', 'a', 'test', 'for', 'longer', 'than', 'three', 'words']) == ['longer', 'than', 'three', 'words']",
        "num_ids": 992
    },
    {
        "number": 129,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(len(my_matrix))])\n        if row_sum!= col_sum:\n            return False\n        col_sum = sum([my_matrix[i][j] for j in range(len(my_matrix))])\n        if col_sum!= row_sum:\n            return False\n    return True",
        "test": "assert magic_square_test([[4, 9, 2], [6, 5, 7], [8, 1, 6]]) == False, \"The magic square is found.\"",
        "num_ids": 1360
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Loop through the list and update the frequency of each item in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq_dict.values())\n\n    # Find the item with the maximum frequency and return it\n    max_item = None\n    for item in freq_dict.keys():\n        if freq_dict[item] == max_freq:\n            max_item = item\n\n    return max_item",
        "test": "assert max_occurrences([1, 2, 3, 1, 1, 2, 3]) == 1",
        "num_ids": 792
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str += char\n    return reversed_str",
        "test": "assert reverse_vowels(\"abc\") == \"cba\"",
        "num_ids": 625
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def tup_string(tup):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup)",
        "test": "assert tup_string((\"a\", \"b\", \"c\")) == \"('a', 'b', 'c')\"",
        "num_ids": 385
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "test": "assert sum_negativenum([]) == 0",
        "num_ids": 570
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (3 * n - 1)) / 2",
        "test": "assert hexagonal_num(1) == 1, \"hexagonal_num(1) should be 1\"",
        "num_ids": 494
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the list of integers to an array of integers\n    arr = array('i', nums)\n\n    # Initialize count variables\n    count_zero = 0\n    count_nonzero = 0\n\n    # Iterate over each element in the array\n    for i in range(len(arr)):\n        # Check if the element is zero\n        if arr[i] == 0:\n            count_zero += 1\n        else:\n            count_nonzero += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = count_zero / count_nonzero\n\n    # Return the ratio as a float\n    return float(ratio)",
        "test": "assert zero_count([1]) == 0",
        "num_ids": 960
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Iterate over all possible powers of 2 from 0 to log2(n)\n    for i in range(31, -1, -1):\n        # Check if the given number can be represented as sum of i power of 2\n        if n & ((1 << i) - 1) == 0:\n            # Calculate the sum of all non-zero powers of 2 up to i\n            sum_of_powers = 1\n            for j in range(i):\n                sum_of_powers += (1 << j)\n            # Check if the sum is equal to the original number\n            if n == sum_of_powers:\n                return True\n\n    # If the given number cannot be represented as sum of powers of 2, return False\n    return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(25) == False, \"25 should be False\"",
        "num_ids": 1159
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference",
        "test": "assert circle_circumference(5) == 31.41592653589793, \"The calculated circumference is incorrect.\"",
        "num_ids": 612
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def extract_singly(test_list):\n    # Initialize an empty set to store the flattened numbers\n    flattened = set()\n    # Loop over the sublists in the list of lists\n    for sublist in test_list:\n        # Loop over the elements in the sublist and add them to the flattened set\n        for element in sublist:\n            flattened.add(element)\n    # Return the flattened set\n    return flattened",
        "test": "assert extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}",
        "num_ids": 784
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Starting from the largest element, bubble down until the smallest element is on the top\n    for i in range(n-1, 0, -1):\n        # Find the index of the largest element in the unsorted part of the list\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the largest element with the element at the current index\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    # The list is now sorted in decreasing order\n    return nums",
        "test": "assert pancake_sort([3, 1, 4, 1, 5])!= [1, 1, 4, 3, 5]",
        "num_ids": 1404
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3,4,5], [6,7,8,9,10], [6,7,8,9,10]) == 0",
        "num_ids": 785
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count",
        "test": "assert find_lists((),) == 0",
        "num_ids": 523
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 872
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1 = 0\n    y1 = 0\n    x2 = 0\n    y2 = 0\n\n    while x2**2 + y2**2 <= n:\n        x3 = 2 * x1 - x2\n        y3 = 2 * y1 - y2\n        if x3**2 + y3**2 == n:\n            return (x1, y1)\n        elif x3**2 + y3**2 > n:\n            x1, y1, x2, y2 = x2, y2, x3, y3\n        else:\n            x1, y1 = x3, y3\n            x2 += 1\n\n    return None",
        "test": "assert find_solution(2, 3, 9) == None",
        "num_ids": 989
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list1.remove(elem)\n    return list1",
        "test": "assert remove_elements([1,2,3,4,5,6], [2,4,6]) == [1,3,5]",
        "num_ids": 523
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum",
        "test": "assert sum_series(7) == 31",
        "num_ids": 615
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    angle = 360 / l\n    for i in range(l):\n        x = s * tan(i*angle*pi/180)\n        area += x\n    return area",
        "test": "assert area_polygon(6, 4) == 138.20450593028648, \"area_polygon(6, 4) should be 138.20450593028648, but it is not.\"",
        "num_ids": 785
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert div_sum(28) == False, \"28 should not be divisible by 1 and 2\"",
        "num_ids": 861
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for i, c in enumerate(str1):\n        if c.lower() in char_count:\n            char_count[c.lower()] += 1\n        else:\n            char_count[c.lower()] = 1\n    \n    return char_count",
        "test": "assert count_char_position(\"abcde\") == {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"e\": 1}",
        "num_ids": 1740
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 3, 5, 7, 9]) == 0",
        "num_ids": 726
    },
    {
        "number": 167,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 564
    },
    {
        "number": 168,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1, 2, 3, 4, 4, 5], 4) == 2, \"Expected frequency of 4 is 2, got {}\".format(frequency([1, 2, 3, 4, 4, 5], 4))",
        "num_ids": 616
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i < len(list1):\n            sum += list1[i]\n    return sum",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 3) == 10",
        "num_ids": 759
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter of the pentagon\n    s = (3*a**2)/2\n    \n    # Calculate the area of the pentagon using Heron's formula\n    area = (5*s**2)/4\n    \n    # Use math.pi to get the value of pi\n    pi = math.pi\n    \n    # Calculate the circumference of the pentagon using the formula for the diameter of the circle\n    circumference = 2*pi*a\n    \n    # Return the perimeter and area of the pentagon\n    return circumference, area",
        "test": "assert perimeter_pentagon(10) == 30, 'perimeter_pentagon(10) should return 30'",
        "num_ids": 729
    },
    {
        "number": 172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurrences of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count",
        "test": "assert count_occurance('std is a great language') == 2",
        "num_ids": 564
    },
    {
        "number": 222,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = None\n    for i in test_tuple:\n        if data_type is None:\n            data_type = type(i)\n        elif type(i)!= data_type:\n            return False\n    return True",
        "test": "assert check_type(('apple', 'banana', 'cherry')) == True",
        "num_ids": 758
    },
    {
        "number": 223,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize a counter and a boolean flag to keep track of the majority element\n    counter = 0\n    is_majority = False\n\n    # Iterate through the array and check if the current element is equal to the given element\n    for i in range(n):\n        if arr[i] == x:\n            counter += 1\n\n    # If the counter is greater than or equal to n/2, then the element is the majority element\n    if counter >= n//2:\n        is_majority = True\n\n    return is_majority",
        "test": "assert is_majority([1, 2, 3, 3, 3, 4, 4, 5, 5, 5], 10, 4) == False",
        "num_ids": 1035
    },
    {
        "number": 224,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count",
        "test": "assert count_Set_Bits(5) == 2",
        "num_ids": 524
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_indices = [i for i in range(len(str)) if i % 2!= 0] # finding odd indices\n    new_str = ''\n    for i in range(len(str)):\n        if i not in odd_indices:\n            new_str += str[i]\n    return new_str",
        "test": "assert odd_values_string(\"abc\") == \"ac\"",
        "num_ids": 527
    },
    {
        "number": 227,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 519
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize a boolean variable to store the result of the function\n    result = True\n\n    # iterate over all bits in the binary representation of n\n    for i in range(l, r+1):\n        # if the i-th bit is set to 1, the result of the function is False\n        if (n & (1 << i)) == 1 << i:\n            result = False\n            break\n\n    # return the result of the function\n    return result",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,1,8) == False",
        "num_ids": 1247
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a new array to store the result\n    result = []\n    # iterate through the first n elements of the original array\n    for i in range(n):\n        # if the current element is negative, append it to the negative list\n        if arr[i] < 0:\n            result.append(arr[i])\n        # if the current element is positive, append it to the positive list\n        else:\n            result.append(arr[i])\n    # iterate through the remaining elements of the original array\n    for i in range(n, len(arr)):\n        # if the current element is negative, append it to the negative list\n        if arr[i] < 0:\n            # find the index of the next element greater than the current negative element\n            next_index = i\n            while next_index < len(arr) and arr[next_index] == arr[i]:\n                next_index += 1\n            result.insert(next_index, arr[i])\n        # if the current element is positive, append it to the positive list\n        else:\n            result.append(arr[i])\n    # return the result array\n    return result",
        "test": "assert re_arrange_array([1, 2, 3, 4, -5, -1], 4) == [-5, -1, 1, 2, 3, 4]",
        "num_ids": 1800
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank(\"Good-bye\", \".\") == \"Good-bye\"",
        "num_ids": 516
    },
    {
        "number": 232,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    # Initialize an empty list to store the n largest items\n    n_largest = []\n    # Iterate over the sorted list and add the first n items to the n_largest list\n    for i in range(n):\n        n_largest.append(sorted_lst[i])\n    # Return the n_largest list\n    return n_largest",
        "test": "assert larg_nnum([1, 3, 5, 7, 9], 1) == [9]",
        "num_ids": 822
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Use the formula for the lateral surface area of a cylinder\n    # as a function of radius and height\n    area = 2 * r * (h + r)\n    \n    return area",
        "test": "assert lateralsuface_cylinder(5,7) == 283.66, \"The lateral surface area of a cylinder with radius 5 and height 7 is not correct.\"",
        "num_ids": 647
    },
    {
        "number": 234,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "test": "assert volume_cube(3) == 27, 'volume_cube(3)!= 27'",
        "num_ids": 471
    },
    {
        "number": 235,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    # Initialize an empty list to store the even bits \n    even_bits = []\n    \n    # Iterate through each bit of the given number\n    for i in range(32): \n        if n & (1 << i): \n            # Check if the bit is even \n            if n & (1 << i) == (1 << i): \n                # Add the even bit to the list of even bits \n                even_bits.append(i)\n    \n    # Set the even bits of the given number to 1 \n    for i in even_bits: \n        n |= (1 << i)\n    \n    # Return the modified number \n    return n",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 670
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # loop through the list of tuples\n    for tup in test_list:\n        # if the tuple is not already in the dictionary, add it with a count of 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # otherwise, increment the count of the tuple by 1\n        else:\n            count_dict[tup] += 1\n    \n    # return the dictionary of counts\n    return count_dict",
        "test": "assert check_occurences([(1, 2), (2, 3), (3, 4), (4, 5)]) == { (1, 2): 1, (2, 3): 1, (3, 4): 1, (4, 5): 1 }",
        "num_ids": 978
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 619
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    seq = [2] * n\n    for i in range(n - 1):\n        if seq[i] + 2 <= m:\n            seq[i + 1] = seq[i] + 2\n        else:\n            seq[i + 1] = seq[i] + 1\n        if seq[i] <= m and seq[i + 1] <= m:\n            count += 1\n    return count",
        "test": "assert get_total_number_of_sequences(10,10) == 3628800, \"The function should return 3628800 for m=10 and n=10\"",
        "num_ids": 1053
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2",
        "test": "assert replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, 4, 5, 6]",
        "num_ids": 629
    },
    {
        "number": 242,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"hello\") == 5, \"Count of characters in 'hello' should be 5\"",
        "num_ids": 479
    },
    {
        "number": 244,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Check if a number is a perfect square.\n    \"\"\"\n    return math.sqrt(n) == int(math.sqrt(n))\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n    \"\"\"\n    if is_perfect_square(N):\n        return N\n\n    # Initialize variables\n    left = N\n    right = N * N\n\n    # Check if the next perfect square is within the current range\n    while left <= right:\n        mid = (left + right) // 2\n\n        # Check if the next perfect square is closer to N\n        if mid * mid - N < 0:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    # Return the next perfect square\n    return mid + 1",
        "test": "assert next_Perfect_Square(1) == 1",
        "num_ids": 914
    },
    {
        "number": 245,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr) \n    if n < 3: \n        return 0 \n    elif n == 3: \n        if arr[0] < arr[1] and arr[1] > arr[2]: \n            return arr[0] + arr[1] \n        else: \n            return arr[2] \n    else: \n        dp = [0] * n \n        dp[0] = arr[0] \n        dp[1] = max(arr[0], arr[1]) \n        for i in range(2, n): \n            dp[i] = max(dp[i-1], dp[i-2] + arr[i]) \n        return dp[n-1] ",
        "test": "assert max_sum([-1, -2, -3, -4, -5]) == -1",
        "num_ids": 1477
    },
    {
        "number": 246,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while True:\n        prev_guess = guess\n        guess = (guess + number/guess) / 2\n        if abs(guess - prev_guess) < 1e-6:\n            break\n    return guess",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 633
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [0] * n\n    max_len = 0\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            dp[i] = dp[i-1] + 2\n            max_len = max(max_len, dp[i])\n        else:\n            dp[i] = 1\n            max_len = max(max_len, dp[i])\n    return max_len\n",
        "test": "assert lps(\"cbbd\") == 2",
        "num_ids": 1439
    },
    {
        "number": 248,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "test": "assert harmonic_sum(0) == 0",
        "num_ids": 509
    },
    {
        "number": 249,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    # Create dictionaries to store the frequency of each element in each array\n    freq_dict1 = {}\n    freq_dict2 = {}\n    \n    # Count the frequency of each element in the first array\n    for num in array_nums1:\n        freq_dict1[num] = freq_dict1.get(num, 0) + 1\n    \n    # Count the frequency of each element in the second array\n    for num in array_nums2:\n        freq_dict2[num] = freq_dict2.get(num, 0) + 1\n    \n    # Find the intersection of the two arrays\n    intersection = []\n    for num in freq_dict1:\n        if num in freq_dict2 and freq_dict1[num] <= freq_dict2[num]:\n            intersection.append(num)\n    \n    return intersection",
        "test": "assert intersection_array([1,2,3,4,5], [2,4,6,8,10]) == [2,4]",
        "num_ids": 970
    },
    {
        "number": 250,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 4, 5), 2) == 1 and count_X((1, 2, 3, 4, 5), 3) == 1 and count_X((1, 2, 3, 4, 5), 4) == 1 and count_X((1, 2, 3, 4, 5), 5) == 1",
        "num_ids": 641
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + list",
        "test": "assert insert_element([1, 2, 3, 4, 5], 0) == [0, 1, 2, 3, 4, 5]",
        "num_ids": 702
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input, converts them to polar coordinates,\n    and returns a list of tuples, where each tuple contains the angle (in radians) and magnitude of the corresponding complex number.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        angle = cmath.phase(number)\n        magnitude = abs(number)\n        polar_coordinates.append((angle, magnitude))\n    return polar_coordinates",
        "test": "assert convert([1+2j, 3+4j, 5+6j]) == [(3.1622776601683795, 4.242640687119285), (5.0, 6.0)]",
        "num_ids": 831
    },
    {
        "number": 253,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 545
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(1, len(l)+1):\n        for combo in combinations_with_replacement(l, i):\n            color_combinations.append(tuple(combo))\n    return color_combinations",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 2), (1, 3), (2, 3)]",
        "num_ids": 782
    },
    {
        "number": 256,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4, \"count_Primes_nums should return 4\"",
        "num_ids": 888
    },
    {
        "number": 257,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a",
        "test": "assert swap_numbers(10,20) == (20,10)",
        "num_ids": 347
    },
    {
        "number": 259,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # compare the first element of each tuple\n    max1 = max(test_tup1[0], test_tup2[0])\n    max2 = max(test_tup1[1], test_tup2[1])\n\n    # compare the second element of each tuple\n    if max1 == test_tup1[0]:\n        max3 = max(test_tup1[2], test_tup2[2])\n    elif max1 == test_tup2[0]:\n        max3 = max(test_tup1[2], test_tup2[2])\n    else:\n        max3 = max(test_tup1[2], test_tup2[2])\n\n    # return the tuple with the maximum elements\n    return (max1, max2, max3)",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 1066
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function finds the nth Newman-Shanks-Williams prime number.\n\n    Args:\n        n (int): the nth prime number to find.\n\n    Returns:\n        int: the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    # Base cases: first and second Newman-Shanks-Williams primes\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 5\n\n    # Helper function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if the input is valid\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Initialize the count and the current prime number\n    count = 0\n    current_prime = 1\n\n    # Generate Newman-Shanks-Williams primes until we find the nth one\n    while count < n:\n        # Check if the current prime is prime\n        if is_prime(current_prime):\n            count += 1\n        # Move on to the next prime number\n        current_prime += 2\n\n    return current_prime - 2",
        "test": "assert newman_prime(1) == 5",
        "num_ids": 940
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of first tuple and second tuple must be the same.\")\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "test": "assert division_elements((1, 2, 3), (2, 4, 6)) == (0.5, 0.5, 0.5)",
        "num_ids": 879
    },
    {
        "number": 262,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Split a list into two parts with the specified length.\n    '''\n    part1 = lst[:L]\n    part2 = lst[L:]\n    return (part1, part2)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 933
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years",
        "test": "assert dog_age(1) == 7",
        "num_ids": 471
    },
    {
        "number": 265,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 915
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 + l**2 + l**2 + l**2 + l**2 + l**2\n",
        "test": "assert lateralsurface_cube(1) == 6, \"lateral surface area of cube with side length 1 should be 6\"",
        "num_ids": 571
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(2) == 1",
        "num_ids": 494
    },
    {
        "number": 268,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        count = count * i\n    return count",
        "test": "assert find_star_num(2) == 2",
        "num_ids": 590
    },
    {
        "number": 269,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character (k) as input and returns its ASCII value.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('A') == 65",
        "num_ids": 413
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even",
        "test": "assert sum_even_and_even_index([1, 2, 3, 4, 6]) == 6",
        "num_ids": 831
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0 \n    for i in range(n): \n        sum += i**5\n\n    return sum",
        "test": "assert even_Power_Sum(0) == 0, \"Should return 0 when n is 0\"",
        "num_ids": 597
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "test": "assert rear_extract([(7, 8), (9, 10), (11, 12), (13, 14)]) == [14, 13, 12, 11, 10, 9, 8]",
        "num_ids": 562
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result",
        "test": "assert substract_elements((1, 2, 3, 4), (2, 3, 4, 5)) == (1, 1, 1, 1), \"substract_elements((1, 2, 3, 4), (2, 3, 4, 5)) should return (1, 1, 1, 1)\"",
        "num_ids": 851
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize variables\n    sum_even = 0\n    even_count = 0\n\n    # Loop through all even indices of the binomial coefficients\n    for i in range(n+1):\n        # Calculate the binomial coefficient for even indices\n        coeff = math.comb(n, i)\n        # Check if the coefficient is even\n        if i % 2 == 0:\n            # Add the even coefficient to the sum\n            sum_even += coeff\n            # Increment the count of even coefficients\n            even_count += 1\n\n    # Return the sum of even coefficients\n    return sum_even",
        "test": "assert even_binomial_Coeff_Sum(1) == 1  # should be 1",
        "num_ids": 879
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14 * r**2\n    volume = area * h\n    return volume",
        "test": "assert volume_cylinder(1,2) == 3.141592653589793",
        "num_ids": 519
    },
    {
        "number": 277,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}",
        "test": "assert dict_filter({'a':1,'b':2,'c':3},2) == {'b':2,'c':3}",
        "num_ids": 677
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count",
        "test": "assert count_first_elements((1, 2, 2, 3, 4, 5)) == 1",
        "num_ids": 753
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    decagonal_numbers = [num for num in range(1, n+1) if num == sum([int(digit) ** 2 for digit in str(num)])]\n    return decagonal_numbers[0] if decagonal_numbers else None",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 744
    },
    {
        "number": 280,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            break\n    return (True, index) if index!= -1 else (False, index)",
        "test": "assert sequential_search([1,2,3,4,5], 3) == (True, 2)",
        "num_ids": 845
    },
    {
        "number": 281,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n\n    # Check if the length of the unique set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 4, 5, 5]) == False, \"all_unique([1, 2, 3, 4, 5, 5]) should return False\"",
        "num_ids": 725
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3,4],[4,5,6,7]) == [3,3,3,3] #Test case 2",
        "num_ids": 756
    },
    {
        "number": 283,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 # frequency list\n    \n    for digit in str(n): # iterate through each digit of the input integer\n        freq[int(digit)] += 1 # increment the frequency count for the digit\n        \n    for digit in freq: # iterate through each digit of the frequency list\n        if digit > digit: # if the frequency count for a digit is greater than its value\n            return False # return False because the input integer does not satisfy the condition\n        \n    return True # return True because the input integer satisfies the condition",
        "test": "assert validate(12345) == True, \"validate should return True for 12345\"",
        "num_ids": 942
    },
    {
        "number": 284,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    # Check if all elements in the list are equal to the given element\n    if all(x == element for x in list):\n        return True\n    else:\n        return False",
        "test": "assert check_element([1,2,3,4,5],6)==False,\"check_element([1,2,3,4,5],6) should return False\"",
        "num_ids": 739
    },
    {
        "number": 285,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[^b]*b[^b]*'\n    return re.search(pattern, text) is not None",
        "test": "assert text_match_two_three('abbabbabbab') == True, 'The function should return True for the input \"abbabbabbab\".'",
        "num_ids": 553
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_array = []\n    for i in range(k):\n        mod_array.append(a)\n\n    mod_array.extend(a)\n\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(n):\n        if i < k:\n            curr_sum += mod_array[i]\n        else:\n            curr_sum -= mod_array[i - k]\n            curr_sum += mod_array[i]\n\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([5, 1, 5, 2, 5, 3, 5], 7, 3) == 30",
        "num_ids": 1272
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        sum_of_squares += count ** 2\n        count += 1\n    return sum_of_squares",
        "test": "assert square_Sum(1) == 0",
        "num_ids": 507
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for i in list1:\n        lengths.append(len(i))\n    return max(lengths)",
        "test": "assert max_length([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 652
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize an empty dictionary to store the count of ways\n    count = {}\n\n    # Initialize the count of ways for the first color\n    count[0] = 1\n\n    # Calculate the count of ways for each color using the formula for the number of ways of painting a fence\n    for color in range(1, k+1):\n        count[color] = (n - k + color) * count[color-1]\n\n    # Return the count of ways for the last color\n    return count[k]",
        "test": "assert count_no_of_ways(3, 2) == 6",
        "num_ids": 1375
    },
    {
        "number": 292,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient",
        "test": "assert find(8,4)==2 # correct",
        "num_ids": 361
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Use Heron's formula to find the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h) * (s - w + h))\n\n    # Use the law of cosines to find the angle of the triangle\n    theta = math.acos((w * h) / (2 * area))\n\n    # Calculate the third side of the triangle\n    third_side = area / (2 * math.sin(theta / 2))\n\n    # Return the third side\n    return third_side",
        "test": "assert otherside_rightangle(3,4) == 5, \"Error in function implementation\"",
        "num_ids": 633
    },
    {
        "number": 294,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5, \"The maximum value in the given list should be 5.\"",
        "num_ids": 595
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n",
        "test": "assert sum_div(12) == 28",
        "num_ids": 546
    },
    {
        "number": 296,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    # sort the array in ascending order \n    arr.sort() \n    # count the number of inversions \n    count = 0 \n    i = 1 \n    while i < n: \n        j = i + 1 \n        while j < n: \n            if arr[i] > arr[j]: \n                count += n - j \n            j += 1 \n        i += 1 \n    return count ",
        "test": "assert get_Inv_Count([]) == 0",
        "num_ids": 1008
    },
    {
        "number": 297,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result += flatten_list(item)\n        else:\n            result.append(item)\n    return result",
        "test": "assert flatten_list([1, [2, [3, 4]], 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 691
    },
    {
        "number": 299,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = defaultdict(int)\n    max_agg = 0\n    for name, amount in stdata:\n        max_val[name] += amount\n        if max_val[name] > max_agg:\n            max_agg = max_val[name]\n    return max_agg",
        "test": "assert max_aggregate([(1, 2), (2, 4), (3, 6)]) == 6, \"max_aggregate() should return 6\"",
        "num_ids": 889
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 1 << 2*n):\n        first_half = i >> n\n        last_half = i & ((1 << n) - 1)\n        if first_half == last_half:\n            count += 1\n    return count\n",
        "test": "assert count_binary_seq(4) == 15, \"Test case 2: Expected count of 15, got {}\".format(count_binary_seq(4))",
        "num_ids": 839
    },
    {
        "number": 301,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for k, v in d.items())\n        return depth\n    else:\n        return 0",
        "test": "assert dict_depth({1: 'a'}) == 1",
        "num_ids": 790
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in the following parameters:\n    - arr: The array of integers\n    - ranges: The number of rotations in each direction\n    - rotations: The number of times to rotate the array\n    - index: The index of the element we want to find after rotations\n\n    This function finds the element at the given index after rotations. The element at the\n    given index is the element at index after rotations modulo n, where n is the number of\n    rotations in each direction. For example, if rotations is 2 and ranges is 4, the element\n    at index 3 after rotating 2 times would be at index 3 after rotating 4 times.\n\n    The function returns the element at the given index after rotations. If the index is out of\n    range, then the function returns None.\n    '''\n    # Check if the index is within the range of the array\n    if index < 0 or index >= len(arr):\n        return None\n\n    # Helper function to find the element at a given index after rotations\n    def find_element_after_rotations(arr, index, rotations, ranges):\n        # If the index is at the end of the array, return the element at the index\n        if index == len(arr) - 1:\n            return arr[index]\n\n        # Find the element at the index after rotations modulo the number of rotations in each direction\n        element_after_rotations = (index + rotations) % len(arr)\n\n        # If the element at the index after rotations is within the range of the array, return it\n        if element_after_rotations < len(arr):\n            return arr[element_after_rotations]\n\n        # If the element at the index after rotations is not within the range of the array, recurse to find it\n        return find_element_after_rotations(arr, element_after_rotations, rotations, ranges)\n\n    # Find the element at the index after rotations and return it\n    return find_element_after_rotations(arr, index, rotations, ranges)",
        "test": "assert find_Element([1,2,3,4,5],[[0,3]],[[0],[1],[2],[3],[4]],1) == 2, \"find_Element([1,2,3,4,5],[[0,3]],[[0],[1],[2],[3],[4]],1) == 2\"",
        "num_ids": 1615
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if re.match('^p', word)]\n    return p_words[0:2]",
        "test": "assert start_withp(['python', 'programming', 'programming', 'python', 'programming', 'python']) == ('programming', 'python')",
        "num_ids": 701
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = 0\n    for i in range(index, n):\n        if a[i] > a[k-1] and (i == index or a[i] > a[i-1]):\n            sum_subseq = max(max_sum_increasing_subseq(a, n, i+1, k), a[i] + max_sum_increasing_subseq(a, n, i+1, k-1))\n        else:\n            sum_subseq = max_sum_increasing_subseq(a, n, i+1, k)\n        max_sum = max(max_sum, sum_subseq)\n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5, 6], 6, 2, 4) == 11, \"max_sum_increasing_subseq([1, 2, 3, 4, 5, 6], 6, 2, 4) should return 11\"",
        "num_ids": 1812
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Get a colon of a tuple.\n\n    Args:\n        tuplex (tuple): Tuple to get colon of.\n        m (int): Number of elements in the colon.\n        n (int): Number of elements in the original tuple.\n\n    Returns:\n        tuple: A tuple containing `m` elements from the original tuple.\n\n    Examples:\n        >>> colon_tuplex((1, 2, 3, 4, 5), 2, 5)\n        (1, 2, 3, 4)\n    \"\"\"\n\n    # Make a copy of the tuple to avoid modifying it\n    original = deepcopy(tuplex)\n\n    # Calculate the number of elements to copy\n    num_elements = min(m, n)\n\n    # Copy the first `m` elements from the tuple\n    colon = original[:num_elements]\n\n    return colon",
        "test": "assert colon_tuplex((1,2),(3,4),(5,6)) == (1,2,3,4,5,6)",
        "num_ids": 1073
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value of each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n    \n    # Initialize a list to store the maximum values for each factor\n    max_values = [0] * N\n    \n    # Loop through the factors and find the maximum values for each factor\n    for i in range(N):\n        max_values[i] = max(max1 * i, max2 * i)\n    \n    # Find the indices of the largest values for each factor\n    indices = []\n    for i in range(N):\n        largest_index = nums1.index(nums1[nums1.index(max_values[i]) * i])\n        indices.append(largest_index)\n        largest_index = nums2.index(nums2[nums2.index(max_values[i]) * i])\n        indices.append(largest_index)\n    \n    # Sort the indices in descending order\n    indices.sort(reverse=True)\n    \n    # Return the selected numbers from the original lists\n    return nums1[indices[:N]], nums2[indices[:N]]",
        "test": "assert large_product([7, 2, 3, 5], [4, 1, 9, 5], 4) == [2, 4, 16, 80]",
        "num_ids": 1866
    },
    {
        "number": 309,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2, 3) == 3, \"maximum(2, 3) should return 3, but it returns {}\".format(maximum(2, 3))",
        "num_ids": 395
    },
    {
        "number": 310,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o'), 'Testing string_to_tuple with a string'",
        "num_ids": 401
    },
    {
        "number": 311,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit of an integer.\n    \"\"\"\n    mask = 1\n    bit = 1\n    while (mask & n) == 0:\n        mask <<= 1\n        bit <<= 1\n    \n    return bit",
        "test": "assert set_left_most_unset_bit(2) == 2",
        "num_ids": 794
    },
    {
        "number": 312,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume",
        "test": "assert volume_cone(1,1) == math.pi*math.pow(1,3)*1",
        "num_ids": 610
    },
    {
        "number": 388,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 1\n    while i * i <= n:\n        i *= 2\n    return i - 1",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 674
    },
    {
        "number": 389,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(1) == 1, \"find_lucas(1) should return 1\"",
        "num_ids": 606
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 25,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "test": "assert add_string([1, 2, 3, 4, 5], 'hello {} world') == ['hello 1 world', 'hello 2 world', 'hello 3 world', 'hello 4 world', 'hello 5 world']",
        "num_ids": 514
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    nested_dict = {}\n\n    # Loop through each list\n    for i in range(len(l1)):\n        # Loop through each sublist in the list\n        for j in range(len(l2[i])):\n            # Append the sublist to the nested dictionary\n            nested_dict[l1[i][j]] = l2[i][j]\n\n    # Add the third list to the nested dictionary\n    nested_dict['Third List'] = l3\n\n    # Return the nested dictionary\n    return nested_dict",
        "test": "assert convert_list_dictionary([1, 2, 3], [4, 5, 6], [7, 8, 9]) == {'list1': [1, 2, 3], 'list2': [4, 5, 6], 'list3': [7, 8, 9]}",
        "num_ids": 1027
    },
    {
        "number": 392,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 810
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list",
        "test": "assert max_length_list(['a', 'b', 'c', 'd', 'e']) == ['e']",
        "num_ids": 760
    },
    {
        "number": 394,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(set(test_tup)) == len(test_tup)",
        "test": "assert check_distinct((1, 2, 3, 4)) == True, \"Test Case 2: Check if tuple contains no duplicates\"",
        "num_ids": 505
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = {}\n    first_non_repeating_char = None\n\n    for char in str1:\n        if char in char_set:\n            if first_non_repeating_char is None or char < first_non_repeating_char:\n                first_non_repeating_char = char\n        else:\n            char_set[char] = True\n\n    return first_non_repeating_char",
        "test": "assert first_non_repeating_character(\"hello world\") == \"l\"",
        "num_ids": 804
    },
    {
        "number": 396,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_char(\"a\") == True",
        "num_ids": 553
    },
    {
        "number": 397,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # first sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # find the length of the sorted list\n    n = len(sorted_numbers)\n\n    # calculate the middle number\n    mid = n // 2\n\n    # if the length of the sorted list is odd, return the middle number\n    if n % 2 == 1:\n        return sorted_numbers[mid]\n\n    # if the length of the sorted list is even, return the average of the two middle numbers\n    else:\n        return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2",
        "test": "assert median_numbers(2,3,4) == 3",
        "num_ids": 856
    },
    {
        "number": 398,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and convert each character to an integer\n        digits = [int(digit) for digit in str(num)]\n        # Compute the sum of the digits and add it to the result\n        result += sum(digits)\n    # Return the final result\n    return result",
        "test": "assert sum_of_digits([123]) == 6",
        "num_ids": 769
    },
    {
        "number": 399,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "test": "assert bitwise_xor((0, 1, 0), (1, 0, 1)) == (1, 1, 1)",
        "num_ids": 875
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        if item not in unique_tuples:\n            unique_tuples.add(item)\n    return len(unique_tuples)",
        "test": "assert extract_freq([1,2,3,4,5]) == 5, \"Failed to correctly count unique tuples in a list with no repeated tuples\"",
        "num_ids": 703
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the resultant tuple\n    result = []\n    # iterate through the length of both tuples and add the corresponding elements\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)",
        "test": "assert add_nested_tuples((1, 2), (3, 4)) == (4, 6)",
        "num_ids": 834
    },
    {
        "number": 404,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2,3) == 2, \"Expected minimum(2,3) to be 2, but got {}\".format(minimum(2,3))",
        "num_ids": 340
    },
    {
        "number": 405,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function takes two tuples as input and returns True if the first element of the first tuple exists in the second tuple, otherwise it returns False.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex((1,2,3),(1,2,4)) == False",
        "num_ids": 465
    },
    {
        "number": 406,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer as input and returns True if the parity of the input number is odd, False otherwise.\n    '''\n\n    # Return True if the parity of the input number is odd, False otherwise\n    if x % 2 == 1:\n        return True\n    else:\n        return False",
        "test": "assert find_Parity(0) == False, \"find_Parity(0) should return False.\"",
        "num_ids": 443
    },
    {
        "number": 407,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    n = int(''.join(sorted(digits, reverse=True)))\n    return n",
        "test": "assert rearrange_bigger(123) == 321, \"rearrange_bigger(123) should return 321\"",
        "num_ids": 1171
    },
    {
        "number": 408,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        heapq.heappush(heap, (-num1, (0, num1)))\n    for num2 in nums2:\n        if not heap:\n            return []\n        val, _ = heapq.heappop(heap)\n        if val < -num2:\n            heapq.heappush(heap, (val, (1, num2)))\n        else:\n            return [(val, (-num2, num2))]\n    return []",
        "test": "assert k_smallest_pairs([], [], 0) == []",
        "num_ids": 1775
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    min_product = float('inf')\n    min_tuple = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i], list1[j])\n            product = pair[0] * pair[1]\n            if product < min_product:\n                min_product = product\n                min_tuple = pair\n    return min_tuple",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == (5, 6)",
        "num_ids": 896
    },
    {
        "number": 410,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Find the minimum value in the list\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val",
        "test": "assert min_val([2, 3, 5, 4, 7]) == 2",
        "num_ids": 653
    },
    {
        "number": 411,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case string to camel case string by replacing\n    # underscores with spaces and capitalizing the first letter\n    camel_word = re.sub(r'_(.)', lambda x: x.group(1).upper(), word)\n    return camel_word",
        "test": "assert snake_to_camel(\"snake_case_string\") == \"snakeCaseString\"",
        "num_ids": 702
    },
    {
        "number": 412,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Initialize an empty list to store the new list with odd numbers removed\n    new_list = []\n    # Loop through each number in the input list\n    for num in l:\n        # If the number is odd, append it to the new list\n        if num % 2 == 1:\n            new_list.append(num)\n    # Return the new list with odd numbers removed\n    return new_list",
        "test": "assert remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]",
        "num_ids": 728
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the given list is a list of tuples\n    if not isinstance(list1, list) or not all(isinstance(t, tuple) for t in list1):\n        raise ValueError('Input must be a list of tuples')\n\n    # Check if the nth element is valid\n    if n < 1 or n > len(list1):\n        raise ValueError('The nth element must be between 1 and the length of the list')\n\n    # Extract the nth element from the list\n    return list1[n-1]",
        "test": "assert extract_nth_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == (4, 5, 6)",
        "num_ids": 924
    },
    {
        "number": 414,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # loop through the first list\n    for item in list1:\n        # check if the item exists in the second list\n        if item in list2:\n            return True\n    # if we make it this far, no overlapping values were found\n    return False",
        "test": "assert overlapping([1,2,3,4,5], [2,3,4,5,6]) == True, \"Overlapping sequence not detected.\"",
        "num_ids": 629
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = 0\n    max_pair = (-1, -1)\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair",
        "test": "assert max_Product([1, 5, 4, 3, 2]) == (1, 60)",
        "num_ids": 1056
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element == None:\n            common_element = tup[0]\n        elif tup[0] == common_element:\n            continue\n        else:\n            return None\n    return common_element",
        "test": "assert group_tuples([(1,2,3), (4,5,6), (7,8,9), (10,11,12), (10,11,12)]) == (10,)",
        "num_ids": 768
    },
    {
        "number": 418,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = max([len(str(x)) for x in lst])\n    return max([x for x in lst if len(str(x)) == max_length])\n",
        "test": "assert Find_Max([1,2,3,4,5,6,7,8,9]) == 9",
        "num_ids": 727
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))",
        "test": "assert round_and_sum([1, 2, 3, 4, 5]) == 150",
        "num_ids": 616
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes",
        "test": "assert cube_Sum(1) == 0",
        "num_ids": 510
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-len(delimiter)]",
        "test": "assert concatenate_tuple(('apple', 'banana', 'cherry')) == 'applebananacherry'",
        "num_ids": 427
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(n+1):\n        sum_of_cubes += i*i*i\n        count += 1\n    return sum_of_cubes/count",
        "test": "assert find_Average_Of_Cube(0) == 0",
        "num_ids": 692
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i, element in enumerate(test_tuple):\n        if isinstance(element, str):\n            rear_elements.append(element[-1])\n    return rear_elements",
        "test": "assert extract_rear(('hello', 'world', 'python')) == 'python'",
        "num_ids": 464
    },
    {
        "number": 425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, 4, 5], 4) == 2, \"Expected 2, found {} instead.\".format(count_element_in_list([1, 2, 3, 4, 5], 4))",
        "num_ids": 666
    },
    {
        "number": 426,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = [num for num in nums if num % 2!= 0]\n    return odd_nums",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 574
    },
    {
        "number": 427,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.search() method to search for the pattern in the date string\n    match = re.search(pattern, dt)\n    # Check if the match is not None\n    if match:\n        # Extract the values of groups from the match object\n        year, month, day = match.groups()\n        # Convert the year, month, and day values to the desired format\n        formatted_date = '{:02d}-{:02d}-{:04d}'.format(int(day), int(month), int(year))\n        # Return the formatted date\n        return formatted_date\n    else:\n        # Return None if the match is None\n        return None",
        "test": "assert change_date_format('2021-01-01') == '01-01-2021'",
        "num_ids": 1139
    },
    {
        "number": 428,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Calculate gap sequence\n    gap = n // 2\n    while gap > 0:\n        # Move the gap to one position to the right for each iteration\n        gap //= 2\n        # Sort the array using the gap sequence\n        for i in range(gap, n):\n            # Insert the current element at its correct position\n            # by iterating over the gap sequence and comparing\n            # the current element with each of them\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n            # Stop iterating when the element is already in its correct position\n    return my_list",
        "test": "assert shell_sort([5,3,8,1,2]) == [1, 2, 3, 5, 8]",
        "num_ids": 1120
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function extracts the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] and test_tup2[i])\n    return and_tup",
        "test": "assert and_tuples((1,2,3), (4,5,6)) == ((1,4), (2,5), (3,6))",
        "num_ids": 958
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta > 0: \n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        print(\"The directrix of the parabola is\", x1, \"and\", x2)\n    elif delta == 0: \n        x = (-b)/(2*a)\n        print(\"The directrix of the parabola is\", x)\n    else: \n        print(\"There is no real roots\")",
        "test": "assert parabola_directrix(2, 3, 4) == 2, \"parabola_directrix(2, 3, 4) should return 2\"",
        "num_ids": 1036
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Use a set to remove duplicates from both lists\n    list1 = list(set(list1))\n    list2 = list(set(list2))\n\n    # Loop through each element in the first list\n    for element in list1:\n        # If the element is present in the second list, return True\n        if element in list2:\n            return True\n\n    # If no common elements are found, return False\n    return False",
        "test": "assert common_element([1, 2, 3], [3, 4, 5]) == True, \"Failed 2nd test case\"",
        "num_ids": 699
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function finds the median length of a trapezium.\n    The function takes in the base1, base2, and height of the trapezium as arguments.\n    It returns the median length of the trapezium.\n    '''\n    # Calculate the length of the trapezium\n    trapezium_length = (base1 + base2) * height / 2.0\n    \n    # Calculate the area of the trapezium\n    trapezium_area = 0.5 * (base1 * height + base2 * height)\n    \n    # Calculate the median length of the trapezium\n    median_length = 0.5 * (trapezium_length + trapezium_area)\n    \n    return median_length",
        "test": "assert median_trapezium(5, 10, 10) == 7.5",
        "num_ids": 2114
    },
    {
        "number": 433,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == True",
        "num_ids": 500
    },
    {
        "number": 434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_match_one(\"aaaaabbbbbcccccdddde\") == \"bbbb\"",
        "num_ids": 500
    },
    {
        "number": 435,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(12345) == 5, \"last_Digit(12345) should return 5\"",
        "num_ids": 431
    },
    {
        "number": 436,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]",
        "test": "assert neg_nos([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]",
        "num_ids": 513
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(filter(lambda x: x.isalpha(), string))",
        "test": "assert remove_odd(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"",
        "num_ids": 405
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j] and test_list[j] < test_list[i]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 1007
    },
    {
        "number": 439,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result",
        "test": "assert multiple_to_single([1, 2, 3]) == 6",
        "num_ids": 447
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Compile regular expression pattern to match adverbs\n    pattern = r'\\b(also|also-so|also-then|although|altho|although-so|although-then|anyhow|anyway|anyway-so|anyway-then|also-while|anyway-while|also-if|also-unless|also-but|also-but-not|anyway-but|anyway-but-not)\\b'\n\n    # Find all the occurrences of adverbs in the text using the pattern\n    matches = re.findall(pattern, text)\n\n    # Create a dictionary to store the adverb position and its text\n    adverbs_dict = {}\n\n    # Iterate through all the matches and add them to the dictionary\n    for match in matches:\n        adverbs_dict[match] = text.index(match)\n\n    # Return the dictionary\n    return adverbs_dict",
        "test": "assert find_adverb_position(\"The quick brown fox jumps over the lazy dog.\") == (1, 19, 27, 37, 56)",
        "num_ids": 1797
    },
    {
        "number": 441,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l**2 # Formula for surface area of a cube\n    return surface_area\n",
        "test": "assert surfacearea_cube(1) == 6, \"The surface area of a cube of size 1 should be 6.\"",
        "num_ids": 499
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the input array to an array of integers\n    arr = array('i', nums)\n    # Initialize a variable to store the count of positive numbers\n    count = 0\n    # Loop through each element in the array\n    for num in arr:\n        # If the number is positive, increment the count\n        if num > 0:\n            count += 1\n    # Calculate the ration of positive numbers and return it as a float\n    return float(count) / len(arr)",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1, \"Incorrect answer\"",
        "num_ids": 1175
    },
    {
        "number": 443,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest",
        "test": "assert largest_neg([-2, -5, -10, 0, 3, 8, -1]) == -1, \"largest_neg function should return -1\"",
        "num_ids": 597
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for i in range(len(test_list)):\n        temp_list = []\n        for j in range(len(test_list[i])):\n            temp_list.append(test_list[i][j])\n        temp_list = temp_list[:K]\n        result_list.append(tuple(temp_list))\n    return result_list",
        "test": "assert trim_tuple([(1,2,3,4,5),(6,7,8,9,10),(11,12,13,14,15)], 4) == [(1,2,3,4),(6,7,8,9),(11,12,13,14)]",
        "num_ids": 994
    },
    {
        "number": 445,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples must have the same length.\")\n        return\n\n    result_tup = tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])\n    return result_tup",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 732
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return dict(count)",
        "test": "assert count_Occurrence(('apple', 'banana', 'cherry'), ['apple', 'banana', 'cherry']) == {'apple': 1, 'banana': 1, 'cherry': 1}",
        "num_ids": 946
    },
    {
        "number": 447,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result",
        "test": "assert cube_nums([1,2,3,4,5]) == [1,8,27,64,125], 'cube_nums([1,2,3,4,5]) should return [1,8,27,64,125]'",
        "num_ids": 670
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    \n    A Perrin number is a positive integer whose sum of its digits is equal to the integer itself.\n    \n    For example, 123 is a Perrin number because 1 + 2 + 3 = 123.\n    \n    The function takes an integer n as input and returns the sum of the first n Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        digits = str(i)\n        sum += int(digits)\n    return sum",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 732
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a specified size and returns a new list with the extracted strings.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result",
        "test": "assert extract_string([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], 3) == [\"apple\", \"banana\", \"cherry\"]",
        "num_ids": 597
    },
    {
        "number": 451,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expressions to remove all whitespaces from the string\n    text2 = re.sub('\\s+','', text1)\n    return text2",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"",
        "num_ids": 487
    },
    {
        "number": 452,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0",
        "test": "assert loss_amount(1000, 1000) == 0",
        "num_ids": 679
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            sum += i\n            n = n // i\n    return sum",
        "test": "assert sumofFactors(24) == 42, \"The sum of even factors of 24 is not 42.\"",
        "num_ids": 693
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_match_wordz('This is a test.') == []",
        "num_ids": 533
    },
    {
        "number": 455,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 == 2:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(3) == False",
        "num_ids": 783
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [word[::-1] for word in stringlist]",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]",
        "num_ids": 651
    },
    {
        "number": 457,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_length:\n                min_length = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    return min_sublist",
        "test": "assert Find_Min([]) == []",
        "num_ids": 771
    },
    {
        "number": 458,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b",
        "test": "assert rectangle_area(1,2) == 2",
        "num_ids": 358
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'[A-Z]+')\n    uppercase_substrings = uppercase_pattern.findall(str1)\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1",
        "test": "assert remove_uppercase(\"hello world\") == \"hello world\"",
        "num_ids": 518
    },
    {
        "number": 460,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            if len(sublist) > 0:\n                result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result\n",
        "test": "assert Extract([]) == [], \"Extract([]) should return an empty list.\"",
        "num_ids": 637
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # initialize count variable to zero\n    count = 0\n    # loop through each character in the string\n    for char in str:\n        # check if the character is uppercase\n        if char.isupper():\n            # if it is, increment the count\n            count += 1\n    # return the count of upper case characters\n    return count",
        "test": "assert upper_ctr(\"Hello, World!\") == 2, \"The upper_ctr function should return 2 for the string 'Hello, World!'\"",
        "num_ids": 455
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result",
        "test": "assert combinations_list([]) == []",
        "num_ids": 1688
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product",
        "test": "assert max_subarray_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 975
    },
    {
        "number": 464,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a variable to store the value of the dictionary\n    value = None\n    \n    # Iterate over the values in the dictionary\n    for val in dict.values():\n        # If the first value is not None, compare it with the next value in the dictionary\n        if value is None:\n            value = val\n            continue\n        \n        # If the next value is not equal to the current value, return False\n        if val!= value:\n            return False\n    \n    # If all values are the same, return True\n    return True",
        "test": "assert check_value({'a':1, 'b':2, 'c':3}, 2) == False",
        "num_ids": 699
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 586
    },
    {
        "number": 468,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    # Initialize the maximum product and the current product to zero\n    max_product = 0\n    current_product = 1\n\n    # Loop through the array and find the maximum product\n    for num in arr:\n        # Update the maximum product if the current number is greater\n        if num > 0:\n            max_product = max(max_product, num * current_product)\n        # Update the current product\n        current_product *= num\n\n    return max_product",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 1100
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        return [test_tup[0] + test_tup[1], test_tup[1] + add_pairwise(test_tup[2:])]",
        "test": "assert add_pairwise((1,2,3,4)) == (1, 4, 7, 10)",
        "num_ids": 665
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array and an integer n as input and returns the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product",
        "test": "assert find_remainder([7, 11, 13], 10) == 1, \"find_remainder([7, 11, 13], 10) should return 1\"",
        "num_ids": 581
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True, \"List should contain consecutive numbers.\"",
        "num_ids": 890
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of all elements in both lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Return the intersection as a list of tuples\n    return list(intersection)",
        "test": "assert tuple_intersection([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == [3, 4, 5]",
        "num_ids": 1007
    },
    {
        "number": 474,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello\", \"e\", \"a\") == \"hallo\"",
        "num_ids": 552
    },
    {
        "number": 475,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # sort the dictionary by value in ascending order\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict",
        "test": "assert sort_counter({'b': 2, 'a': 1, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3}",
        "num_ids": 706
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val\n",
        "test": "assert big_sum([-5, -3, -1, 0, 2]) == 3",
        "num_ids": 658
    },
    {
        "number": 477,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"Hello\") == \"hello\"",
        "num_ids": 265
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]\\w+\\b', re.IGNORECASE)\n    \n    # list to store the non-lowercase substrings\n    result = []\n    \n    # loop through each substring of the string\n    for word in pattern.findall(str1):\n        # add the non-lowercase substring to the result list\n        result.append(word)\n    \n    # join the non-lowercase substrings into a single string and return it\n    return ''.join(result)",
        "test": "assert remove_lowercase(\"UPPERCASE\") == \"UPPERCASE\"",
        "num_ids": 736
    },
    {
        "number": 479,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n // 10)",
        "test": "assert first_Digit(12345) == 1",
        "num_ids": 483
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]",
        "num_ids": 519
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n):\n        '''\n        Write a python function to calculate the sum of cubes of the first n natural numbers.\n        '''\n        sum_of_cubes = 0\n        for i in range(n):\n            sum_of_cubes += i ** 3\n        return sum_of_cubes\n    \n    def sum_of_numbers(n):\n        '''\n        Write a python function to calculate the sum of the first n natural numbers.\n        '''\n        sum_of_numbers = 0\n        for i in range(n):\n            sum_of_numbers += i\n        return sum_of_numbers\n    \n    sum_of_cubes_n = sum_of_cubes(n)\n    sum_of_numbers_n = sum_of_numbers(n)\n    \n    difference = sum_of_cubes_n - sum_of_numbers_n\n    \n    return difference",
        "test": "assert difference(1) == 0, \"difference(1) should be 0\"",
        "num_ids": 914
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    # Initialize a dictionary to store the counts of even and odd numbers\n    even_count = {0:0, 1:0}\n    odd_count = {0:0, 1:0}\n\n    # Loop through the array and update the counts of even and odd numbers\n    for num in A:\n        if num in even_count:\n            even_count[num] += 1\n        else:\n            even_count[num] = 1\n\n        if num in odd_count:\n            odd_count[num] += 1\n        else:\n            odd_count[num] = 1\n\n    # Loop through the dictionary of even counts and count the number of pairs with odd xor\n    count = 0\n    for key in even_count:\n        if key in odd_count and even_count[key] < odd_count[key]:\n            count += even_count[key] * odd_count[key]\n\n    return count",
        "test": "assert find_Odd_Pair([1, 2, 3, 4, 5], 6) == 0 # no odd pairs exist",
        "num_ids": 945
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "test": "assert toggle_string('Hello World') == 'hELLO wORLD'",
        "num_ids": 416
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Initialize the sum to zero\n    total_sum = 0\n\n    # Convert the two numbers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Loop through each digit in the first number and compare it to the corresponding digit in the second number\n    for i in range(len(digits1)):\n        # Calculate the absolute difference between the digits\n        diff = abs(digits1[i] - digits2[i])\n\n        # Add the absolute difference to the sum\n        total_sum += diff\n\n    # Return the total sum of differences\n    return total_sum",
        "test": "assert digit_distance_nums(12345, 12345) == 0",
        "num_ids": 892
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum",
        "test": "assert max_sub_array_sum([5,4,3,2,1], 1) == 5",
        "num_ids": 953
    },
    {
        "number": 560,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set = union_set.union(test_tup2)\n    union_set = sorted(union_set)\n    return union_set",
        "test": "assert union_elements((1, 2, 3), (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 975
    },
    {
        "number": 562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the length of the longest sublist in the list.\n    '''\n\n    # Initialize the maximum length as 1 \n    max_length = 1\n\n    # Iterate over each element of the list \n    for i in range(len(lst)):  \n\n        # Initialize a counter for the current sublist \n        current_length = 1\n\n        # Iterate over each subsequent element of the list \n        for j in range(i+1, len(lst)):  \n\n            # If the current element is the same as the next element, increment the counter \n            if lst[j] == lst[j+1]:  \n                current_length += 1  \n\n            # If the current sublist is longer than the maximum length so far, update the maximum length \n            else:  \n                if current_length > max_length:  \n                    max_length = current_length  \n\n        # If the current element is the last element of the sublist, update the maximum length \n        if i == len(lst)-1:  \n            max_length = max(max_length, current_length)  \n\n    return max_length",
        "test": "assert Find_Max_Length([1, 2, 3, [4, 5], 6, 7]) == 3",
        "num_ids": 1071
    },
    {
        "number": 563,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values(\"This is a sample text without any values.\") == []",
        "num_ids": 717
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10",
        "num_ids": 842
    },
    {
        "number": 565,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def split(word):\n    \"\"\"\n    This function splits a string into a list of characters.\n    \"\"\"\n    return list(word)",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 349
    },
    {
        "number": 566,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string to make it easier to work with digits\n    num_str = str(n)\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # Loop through each digit in the string and add it to the sum\n    for digit in num_str:\n        sum_of_digits += int(digit)\n    return sum_of_digits",
        "test": "assert sum_digits(1234) == 10, \"sum_digits(1234) should return 10\"",
        "num_ids": 608
    },
    {
        "number": 567,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted\n    and False otherwise. The function uses the built-in sort() function from the\n    Python standard library to sort the list.\n    \"\"\"\n    try:\n        lst.sort()\n        return True\n    except:\n        return False",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 526
    },
    {
        "number": 568,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 286
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1",
        "test": "assert sort_sublists([[1, 2, 3], [\"a\", \"b\", \"c\"], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6], [\"a\", \"b\", \"c\"]]",
        "num_ids": 580
    },
    {
        "number": 572,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input, removes duplicates, and returns the final list.\n    \"\"\"\n    # initialize an empty set to store unique numbers\n    unique_nums = set()\n    \n    # iterate through the input list and add unique numbers to the set\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    \n    # convert the set back to a list and return it\n    return list(unique_nums)",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1179
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique_product(list_data):\n    # Create a set of unique numbers from the input list\n    unique_numbers = set(list_data)\n\n    # Initialize a variable to store the product of the unique numbers\n    product = 1\n\n    # Iterate over the unique numbers and multiply them together\n    for number in unique_numbers:\n        product *= number\n\n    # Return the product of the unique numbers\n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 757
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h",
        "test": "assert surfacearea_cylinder(5,10) == 314.1592653589793, \"The surface area of a cylinder should be 314.1592653589793\"",
        "num_ids": 728
    },
    {
        "number": 576,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    elif len(A) == len(B):\n        if A == B:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False",
        "test": "assert is_Sub_Array([1,2,3,4], [1,2,4]) == False, \"is_Sub_Array([1,2,3,4], [1,2,4]) should return False\"",
        "num_ids": 937
    },
    {
        "number": 577,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n //= 10\n    return factorial % 10\n",
        "test": "assert last_Digit_Factorial(5) == 5, \"last_Digit_Factorial(5) == 5\"",
        "num_ids": 645
    },
    {
        "number": 578,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    This function takes three lists of the same length and returns a single flat list.\n    The function first creates an empty list called interleaved_list and then iterates over each list using a for loop.\n    For each iteration, it appends the current element of the first list to the end of the interleaved_list.\n    It then appends the current element of the second list to the end of the interleaved_list.\n    Finally, it appends the current element of the third list to the end of the interleaved_list.\n    After the loop completes, it returns the interleaved_list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list",
        "test": "assert interleave_lists([], [], []) == []",
        "num_ids": 1163
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Initialize a set to store the unique elements in test_tup1\n    unique_tup1 = set(test_tup1)\n    \n    # Initialize a set to store the elements in test_tup2 that are not present in test_tup1\n    dissimilar_tup2 = set(test_tup2) - unique_tup1\n    \n    return dissimilar_tup2",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 4)) == []",
        "num_ids": 801
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Loop through each element in the tuple\n    for i in range(len(test_tuple)):\n        # If the element is a tuple\n        if isinstance(test_tuple[i], tuple):\n            # Recursively call the function with the sub-tuple as the argument\n            even_ele(test_tuple[i], even_fnc)\n        else:\n            # Check if the element is even by calling the function\n            if even_fnc(test_tuple[i]):\n                # If the element is even, add it to a new list\n                even_list.append(test_tuple[i])\n    # Return the new list of even elements\n    return even_list",
        "test": "assert even_ele((1, (2, (3, (4, 5))), 6, (7, (8, 9))), lambda x: x % 2 == 0) == (1, (2, (3, 4)), 6, (7, 8))",
        "num_ids": 938
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s\n    return area",
        "test": "assert surface_Area(2, 3) == 6, \"The surface area of a square pyramid with base edge 2 and height 3 should be 6.\"",
        "num_ids": 493
    },
    {
        "number": 582,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True, \"Expected True, got {}\".format(my_dict({} == True))",
        "num_ids": 453
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def binomial(n, k):\n        \"\"\"\n        Compute binomial coefficients using Pascal's triangle.\n        \"\"\"\n        if n < 0:\n            raise ValueError(\"n must be non-negative\")\n        if k < 0:\n            raise ValueError(\"k must be non-negative\")\n        if k > n:\n            return 0\n        if n == 0 or k == 0 or k == n:\n            return 1\n        else:\n            return binomial(n-1, k-1) + binomial(n-1, k)\n\n    def factorial(n):\n        \"\"\"\n        Compute factorial using the standard algorithm.\n        \"\"\"\n        if n < 0:\n            raise ValueError(\"n must be non-negative\")\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    catalan = 1\n    for i in range(1, num+1):\n        catalan *= binomial(num, i) / factorial(i)\n\n    return catalan",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 899
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            start_index = text.index(match)\n            end_index = start_index + len(match)\n            print(f\"Adverb found: {match}, start index: {start_index}, end index: {end_index}\")\n    else:\n        print(\"No adverbs found.\")",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy dog. The slow and the furious.\") == [(15, 24)]",
        "num_ids": 1304
    },
    {
        "number": 585,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function finds the n most expensive items in a given dataset.\n    '''\n    # Create a max heap to store the n most expensive items\n    max_heap = []\n\n    # Iterate through the dataset\n    for item in items:\n        # Check if the current item is the maximum element in the max heap\n        if len(max_heap) < n or item > max_heap[0]:\n            # Add the current item to the max heap\n            heapq.heappush(max_heap, item)\n        else:\n            # Remove the smallest element from the max heap\n            heapq.heappop(max_heap)\n\n    # Return the n most expensive items in the dataset\n    return max_heap[:n]",
        "test": "assert expensive_items([], 1) == []",
        "num_ids": 1027
    },
    {
        "number": 586,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if len(l) >= n:\n        return l[:n] + l[n:]\n    else:\n        return \"Error: List is not long enough to split.\"",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 4) == [1, 2, 3, 4, 5]",
        "num_ids": 823
    },
    {
        "number": 587,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 348
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return abs(max_num - min_num)",
        "test": "assert big_diff([10, 15, 20, 25]) == 15",
        "num_ids": 623
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers, a and b, and returns a list of all perfect squares between a and b (inclusive).\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i)\n    return squares",
        "test": "assert perfect_squares(0, 2) == [0, 1]",
        "num_ids": 697
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): radius\n    theta (float): angle in radians\n\n    Returns:\n    x (float): rectangular x-coordinate\n    y (float): rectangular y-coordinate\n    \"\"\"\n\n    # convert radians to degrees\n    theta = theta * 180.0 / cmath.pi\n\n    # calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y",
        "test": "assert polar_rect(1,0) == (1,0)",
        "num_ids": 714
    },
    {
        "number": 591,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 25,
        "answer": "def swap_List(newList):\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        print(\"Error: List has less than 2 elements.\")\n        return None\n    \n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1], \"The swap_List function is not working correctly for the given input.\"",
        "num_ids": 599
    },
    {
        "number": 592,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_coeff = 1\n    for i in range(1, k+1):\n        binomial_coeff *= (n-i+1)/(i)\n    return binomial_coeff",
        "test": "assert binomial_Coeff(0,1) == 0 # There are no ways to form 1st term of the binomial series",
        "num_ids": 638
    },
    {
        "number": 593,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})', r'\\1.\\2.\\3.\\4', ip)",
        "test": "assert removezero_ip(\"10.1.2.3\") == \"10.1.2.3\"",
        "num_ids": 901
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    first_even = None\n    first_odd = None\n    \n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                first_even = list1[i]\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                first_odd = list1[i]\n    \n    if even_count == 0 or odd_count == 0:\n        print(\"List does not contain any even or odd numbers.\")\n    else:\n        diff = first_even - first_odd\n        print(diff)\n",
        "test": "assert diff_even_odd([5, 4, 3, 2, 1]) == 2, \"The difference of the first even and first odd numbers should be 2.\"",
        "num_ids": 850
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def min_Swaps(str1,str2): \n    # Convert the given binary strings to integers \n    int1 = int(str1, 2) \n    int2 = int(str2, 2) \n\n    # Initialize variables for keeping track of the count of swaps required \n    count = 0 \n    temp = 0 \n\n    # Iterate through each digit of both binary strings \n    while int1 > 0 or int2 > 0: \n\n        # Get the remainder of dividing the two binary strings by 2 \n        carry = int1 & int2 \n        int1 = int1 >> 1 \n        int2 = int2 >> 1 \n\n        # If the carry is 1, then there is a swap required \n        if carry: \n            count += 1 \n\n        # If there is a carry in the final result, then there is another swap required \n        if int1 > 0 or int2 > 0: \n            count += 1 \n\n    # Return the count of swaps required \n    return count ",
        "test": "assert min_Swaps(\"00000\", \"00000\") == 0",
        "num_ids": 2362
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 555
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_kth(arr1, arr2, k):\n    # Find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the total length of the array\n    total_length = n1 + n2\n\n    # If k is greater than the total length, return None\n    if k > total_length:\n        return None\n\n    # If k is less than or equal to the length of arr1, return arr1[k-1]\n    if k <= n1:\n        return arr1[k-1]\n\n    # k is greater than n1, so k is greater than n1 + n2 - k\n    # So k is less than n1 + n2, so k is n1 + n2 - k - 1\n    k = n1 + n2 - k\n\n    # Now k is the index of the kth element in the second array\n    # So we can find it in arr2 using binary search\n    left = 0\n    right = n2 - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        # If k is equal to the index of the mid element in arr2,\n        # then we have found the kth element\n        if arr2[mid] == k:\n            return k\n\n        # If k is less than the index of the mid element in arr2,\n        # then we need to search in the left half of arr2\n        elif arr2[mid] < k:\n            left = mid + 1\n\n        # If k is greater than the index of the mid element in arr2,\n        # then we need to search in the right half of arr2\n        else:\n            right = mid - 1\n\n    # If we reach here, it means the kth element was not found in arr2\n    return None",
        "test": "assert find_kth([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 3) == 3 # returns 3",
        "num_ids": 1874
    },
    {
        "number": 598,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # check if the number is a positive integer\n    if number < 0:\n        return False\n\n    # sum of cubes of each digit\n    sum_of_cubes = 0\n    num_str = str(number)\n    for digit in num_str:\n        cube = int(digit) ** 3\n        sum_of_cubes += cube\n\n    # check if the sum of cubes is equal to the original number\n    return sum_of_cubes == number",
        "test": "assert armstrong_number(457) == False",
        "num_ids": 848
    },
    {
        "number": 599,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_value = 0\n    count = 0\n\n    for i in range(1, number+1):\n        sum_value += i\n        count += 1\n\n    average = sum_value / count\n    return sum_value, average\n",
        "test": "assert sum_average(5) == (15, 3.0) # for n=5",
        "num_ids": 564
    },
    {
        "number": 600,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(4) == True, \"is_Even(4) should return True\"",
        "num_ids": 393
    },
    {
        "number": 602,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_list = []\n    for char in str1:\n        if char not in char_list:\n            char_list.append(char)\n        else:\n            return char\n    return \"There is no repeated character in the string.\"",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 772
    },
    {
        "number": 603,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        lucid_num = 0\n        lucid_num_str = str(lucid_num)\n        for j in range(len(lucid_num_str)):\n            if lucid_num_str[j] == '0':\n                lucid_num += 1\n            else:\n                break\n        if lucid_num <= n:\n            lucid_numbers.append(lucid_num)\n    return lucid_numbers",
        "test": "assert get_ludic(1) == []",
        "num_ids": 1793
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string by spaces\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string with spaces\n    reversed_s =''.join(reversed_words)\n    return reversed_s",
        "test": "assert reverse_words(\"the quick brown fox\") == \"fox brown quick the\"",
        "num_ids": 672
    },
    {
        "number": 605,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True, \"2 is not a prime number\"",
        "num_ids": 662
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian",
        "test": "assert radian_degree(45) == math.pi/4",
        "num_ids": 457
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(0), result.start(), result.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"Hello, world!\", r\"\\bhello\\b\") == (None, None, None)",
        "num_ids": 695
    },
    {
        "number": 608,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # Initialize the first bell number to 1\n    first_bell = 1\n\n    # Initialize the second bell number to 1\n    second_bell = 1\n\n    # Initialize the result bell number to the first bell number\n    result_bell = first_bell\n\n    # Loop through the range of numbers from 1 to n-1\n    for i in range(1, n):\n        # Compute the new value of the result bell number\n        result_bell = result_bell * (i * 2) // (i + 1) + first_bell\n\n        # Update the values of the first and second bell numbers\n        first_bell = second_bell\n        second_bell = result_bell\n\n    # Return the final value of the result bell number\n    return result_bell",
        "test": "assert bell_Number(1) == 1, \"bell_Number(1) should return 1\"",
        "num_ids": 683
    },
    {
        "number": 610,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]",
        "num_ids": 815
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_of_nth(matrix, n):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the maximum value in then'th column.\n    '''\n    return max([row[n-1] for row in matrix])",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 8",
        "num_ids": 924
    },
    {
        "number": 612,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result",
        "test": "assert merge([[1, 3], [2, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 867
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum\n",
        "test": "assert cummulative_sum([1,2,3,4,5]) == 15",
        "num_ids": 604
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        count = 0\n        for value in num:\n            sum += value\n            count += 1\n        average = sum/count\n        result.append(average)\n    return result",
        "test": "assert average_tuple([(1,2,3),(4,5,6),(7,8,9)]) == [2.0, 5.0, 8.0]",
        "num_ids": 791
    },
    {
        "number": 616,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "test": "assert tuple_modulo((1, 2, 3), (1, 2, 3)) == (0, 0, 0)",
        "num_ids": 822
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_height = 0\n    step = 1\n    \n    while current_height!= d:\n        current_height += step\n        \n        if current_height > d:\n            current_height = d\n        \n        jumps += 1\n        \n        if current_height == d and step == 1:\n            step = -1\n        \n        if current_height == d and step == -1:\n            step = 1\n        \n        if current_height == d and step == 0:\n            break\n    \n    return jumps",
        "test": "assert min_Jumps(2, 1) == 1",
        "num_ids": 1269
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([2,4,6], [1,2,3]) == [2.0, 2.0, 2.0]",
        "num_ids": 615
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    alpha_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            alpha_list.append(char)\n    return ''.join(alpha_list) + ''.join(num_list)",
        "test": "assert move_num(\"123abc\") == \"abc123\"",
        "num_ids": 740
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    res = 0\n    i = 0\n    while i < n:\n        j = i+1\n        while j < n and a[j] % a[i]!= 0:\n            j += 1\n        res = max(res, j-i)\n        i = j\n    return res\n",
        "test": "assert largest_subset([1,2,3,4,5]) == 2",
        "num_ids": 1340
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)\n    arr1.sort()\n    mid = len(arr1) // 2\n    if len(arr1) % 2 == 0:\n        return (arr1[mid - 1] + arr1[mid]) / 2\n    else:\n        return arr1[mid]",
        "test": "assert get_median([1, 2, 3], [4, 5, 6], 5) == 3.5",
        "num_ids": 1268
    },
    {
        "number": 623,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums",
        "test": "assert nth_nums([1, 2, 3], 1) == [1, 2, 3]",
        "num_ids": 512
    },
    {
        "number": 624,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper('hello') == 'HELLO'",
        "num_ids": 349
    },
    {
        "number": 625,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the list has at least 2 elements\n    if length < 2:\n        return newList\n    # Interchange the first and last elements\n    first = newList[0]\n    last = newList[length-1]\n    newList[0] = last\n    newList[length-1] = first\n    return newList",
        "test": "assert swap_List([1, 2]) == [2, 1]",
        "num_ids": 732
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r\n    return area",
        "test": "assert triangle_area(2) == 2, \"The area of the largest triangle that can be inscribed in a semicircle with a radius of 2 is 2.\"",
        "num_ids": 920
    },
    {
        "number": 627,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers (array) as input and returns the smallest missing number.\n    \"\"\"\n    # Find the smallest missing number using the binary search approach\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if mid == 0:\n            return mid + 1\n\n        if mid == len(array) - 1:\n            return mid\n\n        if array[mid] < array[mid - 1]:\n            return mid\n\n        if array[mid] > array[mid + 1]:\n            return mid - 1\n\n        if array[mid] < array[start]:\n            start = mid + 1\n\n        elif array[mid] > array[end]:\n            end = mid - 1\n\n        else:\n            if array[mid] == array[mid - 1]:\n                start = mid + 1\n            else:\n                end = mid - 1\n\n    return end + 1",
        "test": "assert find_First_Missing([3,6,8,10,13]) == 1 # should return 1",
        "num_ids": 825
    },
    {
        "number": 628,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 331
    },
    {
        "number": 629,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Split(list):\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers",
        "test": "assert Split([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10]",
        "num_ids": 637
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    if col == 0 or col == 7:\n        return [((row, col+1) if col!= 7 else (row, 0)) for i in sub]\n    elif row == 0 or row == 7:\n        return [((row+1, col) if row!= 7 else (0, col)) for i in sub]\n    elif row == col:\n        return [((row+1, col-1) if row!= 7 else (0, 7-col-1)) for i in sub]\n    else:\n        return [((row-1, col-1) if row!= 0 else (7-row-1, 7-col-1)) for i in sub]",
        "test": "assert adjac((0,0), [(1,0), (-1,0)]) == [(1,0), (-1,0), (0,1), (0,-1)]",
        "num_ids": 1261
    },
    {
        "number": 631,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 485
    },
    {
        "number": 632,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list",
        "test": "assert move_zero([1, 2, 0, 3, 4, 0]) == [1, 2, 3, 4, 0, 0]",
        "num_ids": 900
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes in a list of integers and an integer n.\n    It returns the sum of the xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
        "test": "assert pair_xor_Sum([2,3,4,5,6], 6) == 12, \"pair_xor_Sum([2,3,4,5,6], 6) should return 12\"",
        "num_ids": 884
    },
    {
        "number": 635,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the iterable to a list\n    lst = list(iterable)\n    \n    # create a min-heap of the list\n    hq.heapify(lst)\n    \n    # iterate through the heap, removing and adding elements to the list\n    for i in range(len(lst)):\n        lst[i], lst[0] = lst[0], lst[i]\n        hq.heapify(lst[:i])\n    \n    # return the sorted list\n    return lst",
        "test": "assert heap_sort([]) == []",
        "num_ids": 845
    },
    {
        "number": 637,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost (int): the actual cost of the sale\n    sale_amount (int): the amount paid for the sale\n    \n    Returns:\n    bool: True if the sale has no profit and no loss, False otherwise\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit < 0 and sale_amount > actual_cost:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(5000, 1000) == False",
        "num_ids": 713
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    chill_index = -42.379 + 2.04901523 * v - 10.14333127 * t + 0.22475541 * v * t - 0.00683783 * math.pow(v, 2) + 0.05481717 * math.pow(t, 2) - 0.00122874 * math.pow(v, 2) * math.pow(t, 2)\n    chill_index = round(chill_index)\n    return chill_index",
        "test": "assert wind_chill(3, 30) == 10",
        "num_ids": 1267
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Function to check if a string starts with a lowercase letter\n    def starts_with_lowercase(string):\n        if string[0].islower():\n            return True\n        else:\n            return False\n\n    # Initialize the sum variable to 0\n    total_length = 0\n\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if not starts_with_lowercase(name):\n            # If the name doesn't start with a lowercase letter, add its length to the sum\n            total_length += len(name)\n\n    # Return the total length of the names\n    return total_length",
        "test": "assert sample_nam([\"Alice\", \"Bob\", \"charlie\", \"David\", \"Eve\"]) == 16, \"The length of the names after removing the names that start with a lowercase letter is not correct.\"",
        "num_ids": 1022
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)') # pattern to match the parenthesis\n    items = re.sub(pattern, '', items) # removing the parenthesis\n    return items",
        "test": "assert remove_parenthesis(\"hello world\") == \"hello world\"",
        "num_ids": 591
    },
    {
        "number": 641,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        return (n**2) + (n-1)",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 804
    },
    {
        "number": 643,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    pattern = r'(?<!^)(?!$)z'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle(\"Hello, world!\") == False, \"The function should return False\"",
        "num_ids": 708
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    # Return the reversed array\n    return input",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 2) == [5, 4, 3, 2, 1]",
        "num_ids": 900
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert the tuple to a dictionary\n    test_dict = dict(test_dict)\n    # add the dictionary to the tuple\n    test_tup = test_tup + (test_dict,)\n    # return the tuple\n    return test_tup",
        "test": "assert add_dict_to_tuple((1, 2), {'a': 10, 'b': 20}) == (1, 2, {'a': 10, 'b': 20})",
        "num_ids": 823
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)] # dp[i][j] stores the maximum average of a path from top-left cell to cell (i,j)\n    \n    for i in range(N): # initialize dp[0][0]\n        dp[0][i] = cost[0][i]\n        \n    for j in range(N): # initialize dp[i][0]\n        dp[j][0] = cost[j][0]\n        \n    for i in range(1,N): # fill dp[i][j] with maximum average of a path from top-left cell to cell (i,j)\n        for j in range(1,N):\n            if cost[i][j] > cost[i-1][j]: # move right\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + cost[i][j]) # include the current cell in the path, update the maximum average\n            else: # move down\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + cost[i][j]) # include the current cell in the path, update the maximum average\n            \n    max_avg = dp[N-1][N-1] # maximum average of a path from top-left cell to bottom right cell\n    for i in range(N): # calculate average for all paths that end at cell (i,N-1)\n        for j in range(N):\n            if i == N-1 and j == N-1: # if current cell is the bottom right cell\n                dp[i][j] = max_avg # include the current cell in the path, update the maximum average\n            else:\n                dp[i][j] /= (i+j+1) # divide the average by the number of cells visited in the path\n            \n    max_avg = max(max_avg, dp[N-1][0]) # maximum average of a path from top-left cell to cell (N-1,0)\n    for i in range(N): # calculate average for all paths that end at cell (i,0)\n        for j in range(N):\n            if i == N-1 and j == 0: # if current cell is the cell (N-1,0)\n                dp[i][j] = max_avg # include the current cell in the path, update the maximum average\n            else:\n                dp[i][j] /= (i+j+1) # divide the average by the number of cells visited in the path\n            \n    max_avg = max(max_avg, dp[0][N-1]) # maximum average of a path from top-left cell to cell (0,N-1)\n    for i in range(N): # calculate average for all paths that end at cell (N-1,i)\n        for j in range(N):\n            if i == N-1 and j == N-1: # if current cell is the bottom right cell\n                dp[i][j] = max_avg # include the current cell in the path, update the maximum average\n            else:\n                dp[i][j] /= (i+j+1) # divide the average by the number of cells visited in the path\n            \n    return dp[N-1][N-1] # return the maximum average of all paths\n",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6]]) == 4.0, \"Test case 2\"",
        "num_ids": 2436
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students",
        "test": "assert filter_data({'Alice':(1.75, 70.0), 'Bob':(1.85, 65.0), 'Charlie':(1.65, 75.0)}, 1.7, 60) == {'Alice':(1.75, 70.0), 'Bob':(1.85, 65.0)}",
        "num_ids": 1257
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    result = []\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            result.append(i)\n    return result",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 3]) == [0, 1, 2]",
        "num_ids": 728
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_digits += digit\n        power -= 1\n        base //= 10\n    return sum_digits",
        "test": "assert power_base_sum(10, 3) == 34",
        "num_ids": 732
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.+?)\"'\n    match = re.findall(pattern, text1)\n    return match",
        "test": "assert extract_quotation(\"This is a quote: ''\") == []",
        "num_ids": 707
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # Get the length of the input tuple\n    N = len(test_tup)\n    # Create a new tuple with the same length as the input tuple\n    new_tup = tuple([0] * N)\n    # Loop through the input tuple and multiply each pair of elements together\n    for i in range(N):\n        new_tup[i] = test_tup[i] * test_tup[i+1]\n    # Return the new tuple\n    return new_tup",
        "test": "assert multiply_elements((1,-2,3,-4,5)) == (1,-2,3,-4,5)",
        "num_ids": 867
    },
    {
        "number": 728,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the sum of the corresponding elements of the input lists.\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9], \"The function is not returning the expected output.\"",
        "num_ids": 726
    },
    {
        "number": 730,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "test": "assert consecutive_duplicates([1,2,2,3,3,3,4,4,4]) == [1,2,3,4]",
        "num_ids": 781
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # Find the base area\n    base_area = math.pi * r * r\n    \n    # Find the height\n    height = h\n    \n    # Find the lateral surface area of the cone\n    lateral_area = math.pi * r * height\n    \n    # Return the lateral surface area\n    return lateral_area",
        "test": "assert lateralsurface_cone(2,2) == 12.566370614359172",
        "num_ids": 806
    },
    {
        "number": 732,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,.]')\n    return pattern.sub(':', text)",
        "test": "assert replace_specialchar(\"This,is.a.test\") == \"This:is:a:test\"",
        "num_ids": 505
    },
    {
        "number": 733,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 6) == -1",
        "num_ids": 1058
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # calculate the product of all elements in the list\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    # calculate the sum of all products\n    sublist_product_sum = product\n    # calculate the sum of products of all possible sublists\n    for i in range(1, n):\n        for j in range(i, n):\n            sublist_product_sum += arr[i] * arr[j] * product // (j-i+1)\n    return sublist_product_sum",
        "test": "assert sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 15",
        "num_ids": 1052
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize the variable to store the modified number\n    modified_num = n\n    \n    # loop through each bit in the number\n    for bit in range(1, len(bin(n)[2:].zfill(len(bin(n)[2:])))):\n        # if the current bit is 1, toggle it to 0\n        if bin(n)[2:].zfill(len(bin(n)[2:]))[bit] == '1':\n            modified_num ^= (1 << bit)\n            \n    # return the modified number\n    return modified_num",
        "test": "assert set_middle_bits(22) == 26",
        "num_ids": 867
    },
    {
        "number": 736,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    return bisect.bisect_left(a, x - 1)",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 3) == 2, 'left_insertion failed'",
        "num_ids": 802
    },
    {
        "number": 737,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('Python') == False, \"check_str('Python') should return False\"",
        "num_ids": 513
    },
    {
        "number": 738,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 514
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the smallest triangular number \n    # with n digits as 10^n - 1 \n    smallest = 9 * (10 ** n) - 1 \n\n    # Initialize the smallest index as 1 \n    index = 1 \n\n    # Loop through all triangular numbers up to the smallest \n    for i in range(2, smallest): \n\n        # Check if the triangular number is greater than the smallest \n        # triangular number with n digits so far. If yes, update the smallest \n        # triangular number with n digits and its index. \n        if i > smallest - math.trunc(math.log10(smallest)): \n\n            # Update the smallest triangular number with n digits \n            smallest = i \n\n            # Update the index of the smallest triangular number with n digits \n            index = i - smallest + 1 \n\n    return index ",
        "test": "assert find_Index(1) == 1",
        "num_ids": 1625
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d",
        "test": "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1:2, 3:4, 5:6}",
        "num_ids": 814
    },
    {
        "number": 741,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_Characters_Same(s):\n    # Convert the string to a list of characters\n    s = list(s)\n    # Check if the length of the list is 1\n    if len(s) == 1:\n        # If it is, then all the characters are same\n        return True\n    else:\n        # If it's not, check if all the characters are the same\n        for i in range(len(s)-1):\n            if s[i]!= s[i+1]:\n                return False\n    # If the loop completes without returning False, then all the characters are same\n    return True",
        "test": "assert all_Characters_Same('def') == False, \"Incorrect output for all_Characters_Same('def')\"",
        "num_ids": 699
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = (side * (1 + math.sqrt(2))) / 3\n\n    # Calculate the area using Heron's formula\n    area = (side * semi_perimeter) / 2\n\n    return area",
        "test": "assert area_tetrahedron(4) == 12, \"The area of a tetrahedron with side length 4 is incorrect.\"",
        "num_ids": 658
    },
    {
        "number": 743,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 819
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_val = None\n    for val in test_tup:\n        if val is not None:\n            none_val = val\n            break\n    return none_val is not None",
        "test": "assert check_none((1, None, 3)) == True",
        "num_ids": 478
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_all_digits(num):\n        return all(int(d) % num == 0 for d in str(num))\n    return list(filter(is_divisible_by_all_digits, range(startnum, endnum + 1)))",
        "test": "assert divisible_by_digits(100, 1000) == []",
        "num_ids": 1964
    },
    {
        "number": 746,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r**2)\n        return area",
        "test": "assert sector_area(1,90) == math.pi * 1**2",
        "num_ids": 821
    },
    {
        "number": 747,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Step 1: Initialize a 2D array to store the length of the LCS for substrings of X, Y, and Z\n    LCS_matrix = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Step 2: Fill the LCS_matrix using dynamic programming approach\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                LCS_matrix[i][j] = LCS_matrix[i-1][j-1] + 1\n            else:\n                LCS_matrix[i][j] = max(LCS_matrix[i-1][j], LCS_matrix[i][j-1])\n\n    # Step 3: Find the optimal LCS using backtracking\n    i, j = len(X), len(Y)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif LCS_matrix[i-1][j] > LCS_matrix[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Step 4: Return the LCS\n    return \"\".join(reversed(lcs))",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GXTXAYB\") == \"GTAB\"",
        "num_ids": 2073
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n    # Initialize a list to store the capitalized words\n    capitalized_words = []\n    # Iterate over the words\n    for word in words:\n        # Check if the word starts with a capital letter\n        if word[0].isupper():\n            # Add a space before the word\n            capitalized_words.append(''+ word)\n        else:\n            # Add the word as it is\n            capitalized_words.append(word)\n    # Join the words with spaces\n    return''.join(capitalized_words)",
        "test": "assert capital_words_spaces(\"   This is a sample text    \") == \"This Is A Sample Text\"",
        "num_ids": 809
    },
    {
        "number": 749,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str",
        "test": "assert sort_numeric_strings(['3', '1', '4', '2', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 925
    },
    {
        "number": 750,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 537
    },
    {
        "number": 751,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] >= arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)//2)",
        "test": "assert check_min_heap_helper([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == True",
        "num_ids": 1112
    },
    {
        "number": 752,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    jacobsthal = [0]\n    jacobsthal.append(1)\n    for i in range(2, n + 1):\n        jacobsthal.append(jacobsthal[i - 1] + jacobsthal[i - 2])\n    return jacobsthal[n]\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 866
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_count = K\n    min_list = []\n    count = 0\n\n    for record in test_list:\n        if count == min_count:\n            min_list.append(record)\n            min_count += K - count\n            count = 0\n\n        if count < min_count:\n            min_list.append(record)\n            count += 1\n\n    return min_list",
        "test": "assert min_k([], 5) == []",
        "num_ids": 1637
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common = []\n\n    # Loop through each element in list l1\n    for i in l1:\n        # Check if the element exists in list l2 and l3\n        if i in l2 and i in l3:\n            # If it does, add it to the common list\n            common.append(i)\n\n    # Return the common list\n    return common",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 976
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second smallest number\n    return numbers[1]\n",
        "test": "assert second_smallest([5, 3, 1, 7, 9, 2]) == 2",
        "num_ids": 747
    },
    {
        "number": 756,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one('abaabbabb') == True, 'text_match_zero_one failed'",
        "num_ids": 531
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs([\"abc\", \"abcd\", \"cdab\"]) == 0",
        "num_ids": 1173
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublists:\n            sublists[sublist_tuple] += 1\n        else:\n            sublists[sublist_tuple] = 1\n    return sublists",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1158
    },
    {
        "number": 759,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Convert the string to a float and check if it has a precision of 2\n    num = float(num)\n    if not round(num, 2) == num:\n        return False\n\n    return True",
        "test": "assert is_decimal(\"12.345\") == False, \"12.345 is a valid decimal number with a precision of 2\"",
        "num_ids": 724
    },
    {
        "number": 760,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    count = {}\n    for num in arr:\n        if num in count:\n            del count[num]\n        else:\n            count[num] = True\n    if len(count) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 2, 3, 4, 5, 5]) == False",
        "num_ids": 536
    },
    {
        "number": 762,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    return days_in_months[monthnum3] == 30",
        "test": "assert check_monthnumber_number(1) == False",
        "num_ids": 860
    },
    {
        "number": 763,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as inputs, and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Initialize a variable to store the minimum difference\n    min_diff = float('inf')\n\n    # Iterate through the array\n    for i in range(n):\n        # Iterate through the remaining elements in the array\n        for j in range(i+1, n):\n            # Calculate the difference between the current pair of elements\n            diff = abs(arr[i] - arr[j])\n\n            # If the difference is less than the current minimum difference, update the minimum difference\n            if diff < min_diff:\n                min_diff = diff\n\n    # Return the minimum difference\n    return min_diff",
        "test": "assert find_min_diff([1,3,5,7,9], 5) == 2",
        "num_ids": 1018
    },
    {
        "number": 764,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 426
    },
    {
        "number": 765,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number. \n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def nth_prime(n):\n        \"\"\"\n        Function to find nth prime number.\n        \"\"\"\n        count = 0\n        i = 1\n        while True:\n            if is_prime(i):\n                count += 1\n                if count == n:\n                    return i\n            i += 1\n    \n    # Find the nth prime number\n    prime_number = nth_prime(n)\n    return prime_number",
        "test": "assert is_polite(1) == 2",
        "num_ids": 1276
    },
    {
        "number": 766,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result",
        "test": "assert pair_wise([]) == []",
        "num_ids": 702
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1,2,3,4,5], 10) == 0",
        "num_ids": 790
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input, and returns a new list that contains all the elements in li1 that are not in li2.\n    \"\"\"\n    return [x for x in li1 if x not in li2]",
        "test": "assert Diff([],[]) == []",
        "num_ids": 640
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(n):\n        sum_of_fourth_powers += (i + 1) ** 4\n    return sum_of_fourth_powers\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of fourth power of first {} odd natural numbers is {}\".format(n, odd_num_sum(n)))",
        "test": "assert odd_num_sum(5) == 1741",
        "num_ids": 565
    },
    {
        "number": 771,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if (char == ')' and stack[-1]!= '(') or \\\n               (char == '}' and stack[-1]!= '{') or \\\n               (char == ']' and stack[-1]!= '['):\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert check_expression(\"(((a+b)*c)+d)\") == True, \"check_expression failed for case 1\"",
        "num_ids": 838
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)",
        "test": "assert remove_length(\"hello world apple pie banana\", 5) == \"hello world apple pie banana\"",
        "num_ids": 732
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
        "test": "assert occurance_substring(\"Hello World\", \"Python\") is None",
        "num_ids": 683
    },
    {
        "number": 775,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Initialize an empty list to store the odd position indices\n    odd_indices = []\n    # Loop through the list of numbers\n    for i in range(len(nums)):\n        # Check if the index is odd\n        if i % 2!= 0:\n            # Check if the number at the index is odd\n            if nums[i] % 2!= 0:\n                # If both conditions are true, append the index to the odd_indices list\n                odd_indices.append(i)\n    # Check if there are any odd position indices in the list\n    if odd_indices:\n        # Return True if there are odd position indices in the list\n        return True\n    # If there are no odd position indices in the list, return False\n    return False",
        "test": "assert odd_position([1, 2, 3, 4, 6]) == False",
        "num_ids": 845
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"\") == 0",
        "num_ids": 698
    },
    {
        "number": 777,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # creating a set to store the non-repeated elements\n    non_repeated = set(arr)\n\n    # converting the set to a list to find the sum\n    sum_list = list(non_repeated)\n\n    # summing the elements in the list\n    sum_val = sum(sum_list)\n\n    return sum_val",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15, \"find_sum([1, 2, 3, 4, 5]) should return 15\"",
        "num_ids": 860
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list of elements and returns a list of sublists, where each sublist contains only consecutive duplicates of the given elements.\n\n    Args:\n        lst (list): The list of elements to be packaged.\n\n    Returns:\n        list: A list of sublists, where each sublist contains only consecutive duplicates of the given elements.\n    \"\"\"\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # create a list of tuples containing the element and its count in the list\n    count_list = []\n    for key, value in count_dict.items():\n        count_list.append((key, value))\n\n    # sort the list of tuples by the count in descending order\n    count_list.sort(key=lambda x: x[1], reverse=True)\n\n    # create a list to store the packed sublists\n    packed_list = []\n\n    # iterate over the sorted list of tuples\n    for i in range(len(count_list)):\n        # if the count is equal to one, add the element to the current sublist\n        if count_list[i][1] == 1:\n            try:\n                packed_list[-1].append(count_list[i][0])\n            except IndexError:\n                packed_list.append([count_list[i][0]])\n        # if the count is greater than one, create a new sublist with the element\n        else:\n            packed_list.append([count_list[i][0]])\n\n    return packed_list",
        "test": "assert pack_consecutive_duplicates([1, 1, 1, 1, 1]) == [[1]]",
        "num_ids": 1178
    },
    {
        "number": 779,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Define an empty dictionary\n    sublists = {}\n\n    # Iterate over each element in the list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Turn the list into a tuple\n            element = tuple(element)\n            # Check if the tuple is already in the dictionary\n            if element in sublists:\n                # Increment the value of the tuple in the dictionary\n                sublists[element] += 1\n            else:\n                # Add the tuple to the dictionary with a value of 1\n                sublists[element] = 1\n\n    # Return the dictionary of sublists\n    return sublists",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 953
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combination = []\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            combination.append((test_list[i], test_list[j]))\n    return combination",
        "test": "assert find_combinations([]) == []",
        "num_ids": 2429
    },
    {
        "number": 781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    def divisor_sum(n):\n        div_sum = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                div_sum += i + n//i\n        return div_sum\n\n    div_sum = divisor_sum(n)\n    return div_sum % 2 == 0\n\nprint(count_divisors(20)) # Output: True",
        "test": "assert count_divisors(24) == 6",
        "num_ids": 896
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_subarrays = 0\n    n = len(arr)\n    for i in range(n):\n        left = i\n        right = i\n        while right < n:\n            if right - left + 1 % 2 == 1:\n                sum_of_subarrays += sum(arr[left:right+1])\n            right += 1\n    return sum_of_subarrays",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45",
        "num_ids": 1089
    },
    {
        "number": 783,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color.\n    '''\n\n    # Find the maximum and minimum values in the RGB color space\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Find the difference between the maximum and minimum values\n    delta = max_value - min_value\n\n    # Calculate the hue value\n    if delta == 0:\n        h = 0\n    elif max_value == r:\n        h = (g - b) / delta\n    elif max_value == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    # Convert the hue value from degrees to radians\n    h = h * 60 if h < 60 else h * 60 - 360\n\n    # Calculate the saturation value\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_value\n\n    # Calculate the value value\n    v = max_value / 255.0\n\n    return h, s, v",
        "test": "assert rgb_to_hsv(255, 0, 0) == (0, 1, 1)",
        "num_ids": 1648
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    \n    return even_sum * odd_sum",
        "test": "assert mul_even_odd([2, 4, 6, 8, 10]) == 30",
        "num_ids": 794
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes a string of the form (a, b, c) and returns a tuple\n    of integers [(a, b, c)]\n    '''\n    # Split the string at the comma and convert each part to an integer\n    int_list = [int(x) for x in test_str.strip('()').split(',')]\n    return tuple_list",
        "test": "assert tuple_str_int(('1', 2, '3')) == (1, 2, 3)",
        "num_ids": 785
    },
    {
        "number": 786,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # use bisect to find the insertion point\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        # if x is greater than all elements, append to end of list\n        return len(a)\n    elif i == 0:\n        # if x is less than all elements, prepend to beginning of list\n        return 0\n    else:\n        # if x is between two elements, return the index of the right element\n        return i",
        "test": "assert right_insertion([1, 2, 3, 4, 5], 2) == 2",
        "num_ids": 765
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_match_three('abaabb') == True",
        "num_ids": 383
    },
    {
        "number": 788,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Create a new list with the given string and list\n    new_list = test_list + [test_str]\n    # Convert the new list to a tuple and return it\n    return tuple(new_list)",
        "test": "assert new_tuple([\"apple\", \"banana\", \"cherry\"], \"This is a string\") == (\"apple\", \"banana\", \"cherry\", \"This is a string\")",
        "num_ids": 520
    },
    {
        "number": 790,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Initialize a boolean variable to keep track of whether all even indices are even\n    all_even = True\n\n    # Loop through the list of numbers and check whether every even index contains even numbers\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            all_even = False\n            break\n\n    # Return the result\n    return all_even",
        "test": "assert even_position([2, 4, 6, 8, 11]) == False",
        "num_ids": 732
    },
    {
        "number": 791,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n\n    # Iterate over the list and remove any tuples\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            test_list.pop(i)\n            i -= 1\n\n    # Convert the list back to a tuple\n    result_tup = tuple(test_list)\n\n    # Return the result\n    return result_tup",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 757
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([[1,2,3], [4,5,6]]) == 2",
        "num_ids": 456
    },
    {
        "number": 793,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n        arr (list): A sorted array.\n        x (int): The element to search for.\n\n    Returns:\n        int: The last position of the element in the array, or -1 if it is not found.\n    \"\"\"\n    n = len(arr)\n    i = 0\n    while i < n and arr[i] < x:\n        i += 1\n    if i == n:\n        return -1\n    j = i - 1\n    while j >= 0 and arr[j] == x:\n        j -= 1\n    return j + 1",
        "test": "assert last([1,3,5,7,9],1) == 0",
        "num_ids": 774
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?P<start>a)(?P<anything>.*)b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    \n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_starta_endb('ababb') == 'ababb'",
        "num_ids": 515
    },
    {
        "number": 796,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total",
        "test": "assert return_sum({}) == 0",
        "num_ids": 565
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    sum_of_odds = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum_of_odds += l\n        l += 1\n    return sum_of_odds",
        "test": "assert sum_odd(1) == 1  # l = 1, r = 2, sum of odd numbers within the range is 2",
        "num_ids": 648
    },
    {
        "number": 798,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:  \n        sum += i  \n    return sum",
        "test": "assert _sum([]) == 0",
        "num_ids": 557
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))",
        "test": "assert left_rotate(10,2) == 4",
        "num_ids": 976
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    text = re.sub(r'\\s+','', text)\n    return text",
        "test": "assert remove_all_spaces(\"    Hello    World   \") == \"HelloWorld\"",
        "num_ids": 407
    },
    {
        "number": 801,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x):\n        if x == y and x == z:\n            count += 1\n        elif x == y or x == z:\n            count += 1\n        elif x == z or y == z:\n            count += 1\n    return count",
        "test": "assert test_three_equal(1,2,3) == 0 # 2nd test case: no two numbers are equal",
        "num_ids": 632
    },
    {
        "number": 802,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_rotation(arr):   \n    n = len(arr)\n    # If the array is already sorted, then no rotation is required.\n    if arr == sorted(arr):\n        return 0\n    # If the array is already a permutation, then no rotation is required.\n    if arr == sorted(arr)[::-1]:\n        return 0\n    # If the array is a subarray of a sorted array, then no rotation is required.\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            for j in range(i, n-1):\n                if arr[j] < arr[j+1]:\n                    break\n            else:\n                return 0\n    # If the array is already in ascending order, then no rotation is required.\n    if arr[0] <= arr[n-1]:\n        return 0\n    # The number of rotations required is the maximum of the number of rotations required to sort the array in descending order and the number of rotations required to reverse the array.\n    # Sorting the array in descending order takes O(n log n) time, but reversing the array takes O(n) time.\n    # Therefore, the total time complexity of the function is O(n log n).\n    sorted_arr = sorted(arr, reverse=True)\n    return max(count_rotation(sorted_arr), count_rotation(arr[::-1]))",
        "test": "assert count_rotation([0, 1, 2, 4, 5, 6, 7]) == 0",
        "num_ids": 999
    },
    {
        "number": 803,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # To check whether a number is a perfect square or not, we need to find the square root of the number and then check whether it is an integer.\n    # If it is an integer, then the number is a perfect square.\n    # Here we take the square root of the number and then check if it is an integer or not.\n    sqrt_num = int(n ** 0.5)\n    if sqrt_num ** 2 == n:\n        return True\n    else:\n        return False",
        "test": "assert is_perfect_square(17) == False, \"Failed for input 17\"",
        "num_ids": 937
    },
    {
        "number": 804,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_product_even([1, 2, 3, 4, 5]) == True, \"is_product_even([1, 2, 3, 4, 5]) == True\"",
        "num_ids": 662
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_lists = []\n    for lst in lists:\n        for i in range(len(lst)):\n            if lst[i] > max_sum:\n                max_sum = lst[i]\n                max_lists = [lst]\n            elif lst[i] == max_sum:\n                max_lists.append(lst)\n    return max_lists",
        "test": "assert max_sum_list([[1,2],[3,4],[5,6],[7,8],[9,10]]) == [[9,10]]",
        "num_ids": 1088
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    prev_char = None\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the current character is uppercase and the previous character was not, update the max_run\n        if char.isupper() and prev_char is None:\n            max_run = current_run\n            current_run = 1\n        # If the current character is uppercase and the previous character was uppercase, increment the current_run\n        elif char.isupper() and prev_char.isupper():\n            current_run += 1\n        # Reset the current_run if the current character is not uppercase\n        else:\n            current_run = 0\n\n        # Update the prev_char variable\n        prev_char = char\n\n    # Check if the current run is greater than the max_run\n    if current_run > max_run:\n        max_run = current_run\n\n    # Return the maximum run of uppercase characters\n    return max_run",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 1109
    },
    {
        "number": 807,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1,2,3,4,5]) == 1",
        "num_ids": 469
    },
    {
        "number": 808,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K((1, 2), 2) == True, \"The function should return True for (1, 2) and K=2\"",
        "num_ids": 559
    },
    {
        "number": 809,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the length of the first tuple is equal to the length of the second tuple\n    if len(test_tup1) == len(test_tup2):\n        # iterate through the first tuple and check if each element is smaller than its corresponding element in the second tuple\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True\n    else:\n        return False",
        "test": "assert check_smaller((1, 2, 3), (4, 3, 2)) == False",
        "num_ids": 924
    }
]