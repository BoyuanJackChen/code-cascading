[
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements",
        "test": "assert similar_elements([1,2,3], [2,3,4]) == [2,3]",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # check if the number is less than 2\n    if n < 2:\n        return True\n\n    # check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    # if none of the above conditions are met, the number is prime\n    return False",
        "test": "assert is_not_prime(7) == False, \"Failed to detect non-prime number\"",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a heap\n    nums = hq.nlargest(n, nums)\n    # Convert the heap back to a list\n    largest_nums = list(nums)\n    return largest_nums",
        "test": "assert heap_queue_largest([],10) == []",
        "num_ids": 808,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # check if x is a power of 2 by checking if x & (x-1) == 0\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(16) == True",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all the words in the string which are at least 4 characters long.\n    '''\n    # using regular expressions to find all words in the string that are at least 4 characters long\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # filtering the list to get only those words which are at least 4 characters long\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    \n    return long_words",
        "test": "assert find_char_long('python') == ['python']",
        "num_ids": 641,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Rotations(str):\n    # check if the string is empty\n    if len(str) == 0:\n        return 0\n    \n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for c in str:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    \n    # sort the dictionary based on the frequency of characters\n    sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n    \n    # initialize the minimum number of rotations to 0\n    min_rotations = 0\n    \n    # iterate over each character in the string\n    for i in range(len(str)):\n        # if the frequency of the current character is 1, then the string has already been rotated\n        if freq[sorted_freq[i][0]] == 1:\n            break\n        \n        # if the frequency of the current character is greater than 1, then we need to rotate the string\n        if freq[sorted_freq[i][0]] > 1:\n            min_rotations += 1\n        \n        # update the frequency of the current character in the string\n        freq[sorted_freq[i][0]] -= 1\n        \n        # if the frequency of the current character is 0, then we need to rotate the string again\n        if freq[sorted_freq[i][0]] == 0:\n            min_rotations += 1\n    \n    return min_rotations",
        "test": "assert find_Rotations(\"\") == 0, \"find_Rotations('') should return 0\"",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 1: \n        if s == ch: \n            return \"\" \n    s = s.replace(ch, \"\") \n    if len(s) == 1: \n        return \"\" \n    if s[0] == ch: \n        return remove_Occ(s[1:], ch) \n    if s[-1] == ch: \n        return remove_Occ(s[:-1], ch) \n    return s",
        "test": "assert remove_Occ(\"abc\", \"c\") == \"ab\"",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the matrix by the row sums in ascending order\n    sorted_M = sorted(M, key=lambda row_sum: row_sum)\n\n    # Return the sorted matrix\n    return sorted_M",
        "test": "assert sort_matrix([[1,2],[3,4]]) == [[1, 2], [3, 4]]",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function calculates the volume of a triangular prism.\n    \"\"\"\n    V = (1/3) * l * b * h\n    return V\n",
        "test": "assert find_Volume(1,2,3) == 6 and find_Volume(4,5,6) == 24 and find_Volume(7,8,9) == 54 and find_Volume(10,11,12) == 720 and find_Volume(13,14,15) == 11880",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define a regular expression to match sequences of lowercase letters joined with an underscore\n    pattern = r\"([a-z]+)_+\"\n\n    # Use the re.search() method to search for matches in the input text\n    match = re.search(pattern, text)\n\n    # If a match is found, return True\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"HELLO_WORLD\") == False, \"Function should return False for input 'HELLO_WORLD'\"",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(3) == 12, \"square_perimeter(3) should return 12\"",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    char_set = set(string)\n\n    # Convert the given string to a list of characters\n    char_list = list(string)\n\n    # Iterate over the character set and remove characters from the character list\n    for char in char_set:\n        char_list.remove(char)\n\n    # Convert the character list back to a string\n    result = ''.join(char_list)\n\n    return result",
        "test": "assert str_to_list(\"abcdefg\") == [\"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]",
        "num_ids": 2098,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store the count of each element in the array\n    element_count = {}\n    # loop through the array and update the count for each element\n    for num in arraynums:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    # loop through the dictionary and check if any element has a count greater than 1\n    for count in element_count.values():\n        if count > 1:\n            return True\n    # if no duplicates are found, return False\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(12) == False, \"12 should be woodball\"",
        "num_ids": 674,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp //= 10\n    return num == (rev_num - 2)",
        "test": "assert rev(5) == False, \"5 is not one less than twice its reverse\"",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize variables\n    max_num = 0\n    curr_num = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current digit is less than the current number, add it to the current number\n        if arr[i] < curr_num:\n            curr_num += arr[i]\n        # If the current digit is greater than the current number, update the maximum number\n        else:\n            max_num = max(max_num, curr_num)\n            curr_num = arr[i]\n\n    # Add the remaining digits to the maximum number\n    max_num = max(max_num, curr_num)\n\n    return max_num",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-1,2) == False",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_octagonal(n):\n    def is_square(x):\n        return x * x == n\n    \n    for i in range(1, int(n ** 0.5) + 1):\n        if is_square(i) or is_square(n - i):\n            return True\n    \n    return False\n\ndef nth_octagonal(n):\n    if not (1 <= n <= 100):\n        return \"Invalid input\"\n    \n    if is_octagonal(n):\n        return n\n    else:\n        return \"There is no nth octagonal number\"",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a defaultdict to store the frequency of each digit in the string\n    freq = defaultdict(int)\n    \n    # Iterate through the string and count the frequency of each digit\n    for char in s:\n        freq[int(char)] += 1\n    \n    # Initialize the count of substrings to 0\n    count = 0\n    \n    # Iterate through the frequency dictionary and for each digit,\n    # find the substrings with the sum of digits equal to their length\n    for num in freq:\n        if num == len(str(num)):\n            count += freq[num]\n    \n    return count",
        "test": "assert count_Substrings(\"12345\") == 1",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([(1, 2), (3, 4), (5, 6)]) == 4, \"The maximum difference should be 4.\"",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks([(100, 'English'), (80, 'Maths'), (90, 'Science'), (85, 'History'), (70, 'Geography')]) == [('80', 'Maths'), ('90', 'Science'), ('85', 'History'), ('100', 'English'), ('70', 'Geography')]",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([]) == 0",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def helper(n, k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return 1\n        elif k > 1:\n            return sum([helper(n, i) for i in range(1, min(k, n) + 1)])\n\n    return helper(n, n)",
        "test": "assert bell_number(1) == 1",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    if A[1] > A[0]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    elif A[1] < A[0]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n    return True",
        "test": "assert is_Monotonic([1, 2, 4, 3, 5]) == False, \"Test failed for input [1, 2, 4, 3, 5]\"",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i not in l:\n            return False\n    return True",
        "test": "assert is_sublist([1, 2, 3], [3, 4]) == False",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True",
        "test": "assert find_equal_tuple([(1,2,3),(4,5)]) == False",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    start = 0\n    end = n-1\n    \n    while swapped:\n        swapped = False\n        for i in range(start, end):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        \n        swapped = False\n        for i in range(end-1, start-1, -1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        \n        start += 1\n        end -= 1\n\n    return nums",
        "test": "assert comb_sort([]) == []",
        "num_ids": 1054,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n % (i**2) == 0:\n                return True\n    return False",
        "test": "assert dif_Square(4) == True, \"dif_Square(4) should be True\"",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_samepatterns(colors, patterns):\n    def pattern_match(color):\n        if color in patterns:\n            return True\n        return False\n\n    def is_valid_sequence(pattern_sequence):\n        valid_pattern_sequence = []\n        for i in range(len(pattern_sequence)):\n            for j in range(i + 1, len(pattern_sequence) + 1):\n                if pattern_sequence[i:j] in patterns:\n                    valid_pattern_sequence.append(pattern_sequence[i:j])\n        return valid_pattern_sequence\n\n    for color in colors:\n        if pattern_match(color):\n            return False\n\n    for pattern in patterns:\n        if not is_valid_sequence(pattern):\n            return False\n\n    return True",
        "test": "assert not is_samepatterns(['red', 'green', 'blue'], ['red', 'green', 'blue','red', 'green', 'yellow'])",
        "num_ids": 1004,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K and returns a list of tuples whose elements are all divisible by K.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1,2,3),(4,5,6),(7,8,9)], 3) == []",
        "num_ids": 1028,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(0) == True, \"0 is not divisible by 11\"",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.lower() # convert all characters to lowercase\n    words = s.split() # split the string into words\n    odd_word_count = 0\n    for word in words:\n        if len(word) % 2 == 1: # check if the length of the word is odd\n            odd_word_count += 1\n    if odd_word_count > 0:\n        return True\n    else:\n        return False",
        "test": "assert word_len(\"Hello\") == True",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Base case: return 0 for n=0\n    if n == 0:\n        return 0\n    # Base case: return 1 for n=1\n    elif n == 1:\n        return 1\n    # Base case: return n for n>1\n    else:\n        return n + tetrahedral_number(n-1)",
        "test": "assert tetrahedral_number(0) == 0",
        "num_ids": 828,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    \n    return volume",
        "test": "assert volume_sphere(1) == (4/3)*math.pi*(1)**3, \"volume_sphere(1) is incorrect\"",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for char in strr:\n        char = ord(char)\n        char = (char % 26) + ord('a')\n        char = chr(char)\n    return char",
        "test": "assert get_Char(\"\") == 0",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with the first two numbers\n    sequence = [0, 1]\n\n    # Calculate the next number in the sequence\n    for i in range(2, n + 1):\n        # Check if the current number is in the sequence\n        if sequence[-1] % 2 == 0:\n            # If it is, add 2 to it\n            sequence.append(sequence[-1] + 2)\n        else:\n            # If it's odd, add 1 to it\n            sequence.append(sequence[-1] + 1)\n\n    # Return the nth number in the sequence\n    return sequence[n]",
        "test": "assert sequence(1) == 1, \"The sequence for n=1 is incorrect.\"",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == math.pi*4,'surfacearea_sphere(1) should equal pi*4, but it is not.'",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 0\n    for i in range(1, n + 1):\n        a += (2 * i - 1) ** 2\n    return a",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create a new dictionary to store the merged values\n    merged_dict = {}\n    # loop through the keys in each dictionary\n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        # if the key is in both dictionaries, add the values together\n        if key in dict1 and key in dict2:\n            merged_dict[key] = dict1[key] + dict2[key]\n        # if the key is only in one dictionary, add the value from that dictionary\n        elif key in dict1:\n            merged_dict[key] = dict1[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        # if the key is only in the third dictionary, add the value from that dictionary\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n    return merged_dict",
        "test": "assert merge_dictionaries_three({},{},{}) == {}, \"merge_dictionaries_three({},{},{}) should return an empty dictionary when called with empty dictionaries.\"",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict",
        "test": "assert freq_count([]) == {}",
        "num_ids": 636,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def closest_num(N):\n    '''\n    This function takes an integer N and returns the closest smaller number than N.\n    '''\n    n = 0\n    while n < N:\n        n += 1\n    return n - 1",
        "test": "assert closest_num(3) == 2",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "test": "assert len_log(['123', '456', '789']) == 3",
        "num_ids": 618,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for value in str1:\n        if sub_str in value:\n            return True\n    return False",
        "test": "assert find_substring(['hello', 'world', 'python', 'programming'], 'python') == True, \"find_substring(hello world python programming, python) should return True\"",
        "num_ids": 665,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    # Define the number of steps it takes to reach the top of a mountain\n    steps = 2 * n - 1\n\n    # Check if the number of steps is odd or even\n    if steps % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert is_undulating(10) == True",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a,abs(b))\n    else:\n        return a*power(a,b-1)",
        "test": "assert power(2,3) == 8, \"The function should calculate 2 to the power of 3 and return the value of 8.\"",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[0][0]",
        "test": "assert index_minimum([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]) == 'a'",
        "num_ids": 824,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for sub_list in lst:  \n        if len(sub_list) < min_length:  \n            min_length = len(sub_list)  \n    return min_length",
        "test": "assert Find_Min_Length([[1,2],[3,4],[5,6],[7,8],[9,10]]) == 2",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(20) == 4",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                else:\n                    freq_dict[sub_item] = 1\n        elif item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "test": "assert frequency_lists([[1,2,3],[4,5,6],[7,8,9]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}",
        "num_ids": 1463,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)",
        "test": "assert multiply_num([1, 2, 3, 4, 5]) == 125, \"Expected 125, got {}\".format(multiply_num([1, 2, 3, 4, 5]))",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\" \n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary ",
        "test": "assert decimal_to_binary(10) == \"1010\"",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import sys\n\ndef is_palindrome(n):\n    '''\n    Returns True if the given number is a palindrome, False otherwise.\n    '''\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    largest_palindrome = 0\n    for i in range(num+1):\n        temp = i * 10 + 1\n        while temp <= num:\n            temp_str = str(temp)\n            if is_palindrome(int(temp_str)):\n                if temp > largest_palindrome:\n                    largest_palindrome = temp\n            temp += 1\n    return largest_palindrome\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    print(f\"The next smallest palindrome of {num} is: {next_smallest_palindrome(num)}\")\n\nif __name__ == \"__main__\":\n    main()",
        "test": "assert next_smallest_palindrome(9999) == 999999999, \"next_smallest_palindrome(9999) should be 999999999\"",
        "num_ids": 1369,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    \n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 902,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def snake_to_camel(word):\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case =''.join(word.capitalize() for word in words)\n    # Convert the camel case string to a title case string\n    title_case = camel_case.title()\n    return title_case",
        "test": "assert snake_to_camel(\"word_with_underscore\") == \"wordWithUnderscore\"",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1 + m\n    else:\n        a = 1\n        b = 1 + m\n        for i in range(2, n + 1):\n            c = (a * b) % m\n            a = b\n            b = c\n        return b",
        "test": "assert eulerian_num(1, 1) == 2, \"Incorrect result for eulerian_num(1, 1)\"",
        "num_ids": 1315,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist in place using the sorted() function\n        sorted_sublist = sorted(sublist)\n        # Replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist\n    # Return the modified input list\n    return input_list",
        "test": "assert sort_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "test": "assert count([]) == 0, 'count([]) should return 0'",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # create a new list and a new tuple\n    new_list = list(test_list)\n    new_tup = tuple(test_tup)\n    # add the list to the tuple\n    new_tup = new_tup + new_list\n    # return the new tuple\n    return new_tup",
        "test": "assert add_lists([1, 2, 3], (4, 5)) == (1, 2, 3, 4, 5)",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a list of all the numbers to be merged\n    merge_list = num1 + num2 + num3\n    \n    # Sort the list using heap sort\n    heapq.heapify(merge_list)\n    \n    # Extract the sorted list and return it\n    return heapq.nsmallest(len(merge_list), merge_list)",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 1184,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if s[0] == '1':\n            count += 1\n        s = s[1:] + s[0]\n    return count",
        "test": "assert odd_Equivalent(\"1010\", 1) == 1, \"The number of odd values after rotating by 1 time should be 1.\"",
        "num_ids": 935,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store unique elements of all nested lists\n    unique_elements = set()\n    \n    # Iterate through all nested lists and add their elements to the set\n    for sublist in nestedlist:\n        unique_elements.update(sublist)\n    \n    # Convert the set back to a list and return it as the common elements\n    return list(unique_elements)",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [3, 6, 9]]) == [3, 6, 9]",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            for key in item:\n                if item[key]:\n                    return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result",
        "test": "assert tuple_to_int((1, 2, 3)) == 6",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (str, int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list",
        "test": "assert list_to_float([['1.0', 2], [3, '4.0']]) == [[1.0, 2.0], [3.0, 4.0]]",
        "num_ids": 961,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == ['hello', 'world']",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        count = 1\n\n        # check if mid element is present more than once\n        for i in range(len(arr)):\n            if arr[i] == arr[mid]:\n                count += 1\n                if count == 2:\n                    return arr[mid]\n\n        # if element is present more than once, update the left pointer\n        if count == 1:\n            left = mid + 1\n        else:\n            right = mid\n\n    # if the element is not present in the array\n    return None",
        "test": "assert search([1, 2, 3, 4, 5]) == 3, \"search([1, 2, 3, 4, 5]) should return 3\"",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, abs(list1[i][0]*list1[j][1] - list1[j][0]*list1[i][1]))\n    return max_product",
        "test": "assert max_product_tuple([(-1,-2), (-3,-4), (5,6), (1,2)]) == 4",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables\n    total = 0\n    # Check if the limit is odd\n    if limit % 2 == 1:\n        # Initialize the list of numbers that are amicable\n        amicable = []\n        # Check all numbers from 1 to the limit\n        for i in range(1, limit + 1):\n            # Check if the number is amicable\n            if i == amicable_number(i):\n                # Add the amicable number to the list\n                amicable.append(i)\n        # Sum up the amicable numbers\n        total = sum(amicable)\n    else:\n        # If the limit is even, sum up all odd numbers up to the limit\n        for i in range(1, limit + 1, 2):\n            total += i\n    return total\n\ndef amicable_number(num):\n    '''\n    Write a function to calculate the amicable number of a specified number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return None\n    # Initialize variables\n    result = 0\n    # Check all numbers from 1 to the square root of the number\n    for i in range(1, int(num ** 0.5) + 1):\n        # Check if the number is divisible by the current number\n        if num % i == 0:\n            # Check if the number is also divisible by the square root of the number\n            if i!= int(num ** 0.5) and num % int(num ** 0.5) == 0:\n                # Calculate the amicable number\n                result = num - i + i\n            # If the number is not divisible by both the current number and the square root of the number, check if the number is a perfect square\n            elif i * i == num:\n                # Calculate the amicable number\n                result = num + i\n    return result",
        "test": "assert amicable_numbers_sum(100) == 142857, \"The sum of amicable numbers from 1 to 100 should be 142857.\"",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle",
        "test": "assert angle_complex(1,2) == cmath.phase(1+2j)",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_length(string):\n    n = len(string)\n    # Initialize two counters for each sub-string\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    # Iterate through the string and update the counters for each sub-string\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        # Calculate the difference between the counters and update the maximum difference if necessary\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "test": "assert find_length(\"00110011\") == 2, \"Incorrect output for find_length('00110011')\"",
        "num_ids": 2223,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum(a, b):\n    '''\n    This function takes two integers as input and finds the sum of their common divisors.\n    '''\n    # This function uses the Euclidean algorithm to find the common divisors of two numbers.\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Using the gcd() function to find the common divisors of two numbers.\n    common_divisors = gcd(a, b)\n    if common_divisors == 1:\n        print(\"There are no common divisors.\")\n    else:\n        # Calculating the sum of the common divisors.\n        sum_of_common_divisors = sum(range(1, common_divisors + 1))\n        print(\"The sum of common divisors of\", a, \"and\", b, \"is\", sum_of_common_divisors)",
        "test": "assert sum(12, 24) == 12 # correct sum of common divisors of 12 and 24",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6, \"multiply_int function should multiply two integers correctly.\"",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "test": "assert long_words(3, ['apple', 'banana', 'cherry', 'date', 'elderberry']) == ['apple', 'banana', 'cherry']",
        "num_ids": 878,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the elements in each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    # Check if the row and column sums are equal\n    if row_sums == col_sums:\n        # Calculate the sum of the elements in the diagonal\n        diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n        # Check if the diagonal sum is equal to the sum of the matrix\n        if diagonal_sum == sum(sum(row) for row in my_matrix):\n            return True\n    return False",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n\n    max_num = None\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            max_num = num\n            break\n\n    return max_num",
        "test": "assert max_occurrences([1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5]) == 4",
        "num_ids": 887,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    return str1[::-1]",
        "test": "assert reverse_vowels(\"racecar\") == \"racecar\"",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string((4, 5, 6)) == \"4, 5, 6\"",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Calculate the sum of the negative numbers of a list of numbers.\n\n    :param nums: a list of numbers\n    :return: the sum of the negative numbers in the list\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "test": "assert sum_negativenum([-3, 2, -4, 1, 0, -5]) == 4, \"Incorrect result\"",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input\"\n    else:\n        return (2 * n - 1) * (2 * n - 1)",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [1] * len(nums))\n    count_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count[count_zeroes] += 1\n            count_zeroes += 1\n            \n    count_non_zeroes = sum(count) - count_zeroes\n    \n    return count_zeroes / count_non_zeroes",
        "test": "assert zero_count([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0.0",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # initialize the sum variable to zero\n    sum_of_powers = 0\n\n    # loop through each bit of the given number\n    for i in range(32):\n        # if the current bit is a 1, add 2^i to the sum\n        if n & (1 << i):\n            sum_of_powers += 2**i\n\n        # if the sum is equal to the given number, then the number can be represented as sum of non-zero powers of 2\n        if sum_of_powers == n:\n            return True\n\n    # if the loop completes without finding a valid combination of bits, then the number cannot be represented as sum of non-zero powers of 2\n    return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(2) == True",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference",
        "test": "assert circle_circumference(5) == 31.4159, \"Circle circumference should be 31.4159\"",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    # Initialize an empty set to store the flattened numbers\n    flat_set = set()\n\n    # Loop through each list in the test_list\n    for item in test_list:\n\n        # Check if the item is a list\n        if isinstance(item, list):\n\n            # Recursively flatten the nested list\n            flat_set.update(extract_singly(item))\n\n        # Check if the item is a number\n        elif isinstance(item, (int, float)):\n\n            # Add the number to the flat_set\n            flat_set.add(item)\n\n    # Return the flattened set\n    return flat_set",
        "test": "assert extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def swap(nums, i, j):\n        '''\n        Helper function to swap two elements in a list.\n        '''\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def reverse(nums, start, end):\n        '''\n        Helper function to reverse a sublist in a list.\n        '''\n        while start < end:\n            swap(nums, start, end)\n            start += 1\n            end -= 1\n\n    def pancake_sort_inner(nums):\n        '''\n        Recursive function to sort a sublist of a list.\n        '''\n        n = len(nums)\n        if n <= 1:\n            return nums\n\n        # Choose a random pivot index\n        pivot_index = random.randint(0, n - 1)\n        pivot = nums[pivot_index]\n        nums[pivot_index], nums[-1] = nums[-1], nums[pivot_index]\n\n        # Partition the list into smaller and larger sublists\n        left = [x for x in nums if x < pivot]\n        middle = [x for x in nums if x == pivot]\n        right = [x for x in nums if x > pivot]\n\n        # Sort the smaller sublist and merge it with the larger sublist\n        pancake_sort_inner(left)\n        pancake_sort_inner(right)\n        nums = left + middle + right\n\n        return nums\n\n    # Call the pancake sort function on the list\n    pancake_sort_inner(nums)\n\n    return nums",
        "test": "assert pancake_sort([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 1299,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3,4],[1,2,3,4],[5,6,7,8]) == 0",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "test": "assert find_lists([1, 2, [3, 4], [5, [6, 7], 8]]) == 2, \"find_lists did not return the correct number of lists\"",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "test": "assert max_Abs_Diff([10, -5, 3, 7, -1]) == 15",
        "num_ids": 756,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Solve the equation for x\n    x = -b/a\n    if x % 1!= 0:\n        return None\n    \n    # Solve the equation for y\n    y = -(a*x + b)\n    if y % 1!= 0:\n        return None\n    \n    # Check if the equation is valid\n    if x*y - n % 1 == 0:\n        return (int(x), int(y))\n    else:\n        return None",
        "test": "assert find_solution(4, 5, 10) == (2, 3), \"Test 2: a = 4, b = 5, n = 10\"",
        "num_ids": 1107,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    i = 0\n    while n - i >= 0:\n        total += (n - 2 * i)\n        i += 1\n    return total\n\nn = 10\nprint(sum_series(n))  # Output: 250",
        "test": "assert sum_series(0) == 0",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n\ndef perimeter_polygon(n, s):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the number of sides and side length.\n    '''\n    perimeter = n * s\n    return perimeter\n\ndef main():\n    # Test case for area_polygon() function\n    print(area_polygon(3, 4)) # Output: 6\n\n    # Test case for perimeter_polygon() function\n    print(perimeter_polygon(5, 3)) # Output: 15",
        "test": "assert area_polygon(3, 4) == 6, \"Incorrect area calculation\"",
        "num_ids": 937,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # calculate the sum of the divisors of n\n    divs = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divs.append(i)\n            if n // i!= i:\n                divs.append(n // i)\n\n    # check if the sum of the divisors is the same\n    return sum(divs) == n * (len(divs) + 1)",
        "test": "assert div_sum(28) == False, \"Test case failed\"",
        "num_ids": 992,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in range(26):\n        char = chr(i+97)\n        if char in str1:\n            count += str1.count(char)\n    return count",
        "test": "assert count_char_position('') == 0",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Use bitwise operations to find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n    return power",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 553,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,1,2,3],2) == 2",
        "num_ids": 553,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 2, 4) == 9, \"The function sum_range_list([1, 2, 3, 4, 5], 2, 4) should return 9.\"",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter of the pentagon\n    semi_perimeter = 5 * a / 4\n    \n    # Calculate the area of the pentagon using the formula\n    area = (5 * semi_perimeter ** 2) / (22 * math.tan(math.pi / 5))\n    \n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * a\n    \n    # Return the result\n    return perimeter",
        "test": "assert perimeter_pentagon(2) == math.pi*10 # correct",
        "num_ids": 916,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"hello world std\") == 1, \"count_occurance did not work as expected\"",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0]) # get the data type of the first element of the tuple\n    for element in test_tuple:\n        if type(element)!= data_type: # if the element has a different data type than the first element\n            return False # return False since data types do not match\n    return True # return True since all elements have the same data type",
        "test": "assert check_type(('a', 'b', 'c')) == True, 'check_type function is working correctly'",
        "num_ids": 631,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5], 12, 2) == False",
        "num_ids": 952,
        "indeed": true
    },
    {
        "number": 224,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2!= 0:\n            result += char\n    return result",
        "test": "assert odd_values_string(\"abcdefg\") == \"abcefg\"",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are unset in the given range or not.\n\n    :param n: an integer, represents the number of bits in the range.\n    :param l: an integer, represents the starting position of the range.\n    :param r: an integer, represents the ending position of the range.\n\n    :return: True if all the bits are unset in the given range, False otherwise.\n    \"\"\"\n\n    # Checking if the range is valid or not\n    if l > r:\n        return False\n\n    # Convert the starting position to binary and check if all bits are set to 1\n    binary_l = bin(l)[2:].zfill(n)\n    if binary_l!= binary_l.replace('1', '0', n):\n        return False\n\n    # Convert the ending position to binary and check if all bits are set to 1\n    binary_r = bin(r)[2:].zfill(n)\n    if binary_r!= binary_r.replace('1', '0', n):\n        return False\n\n    # Check if all the bits are unset in the range\n    for i in range(n):\n        binary_l[i] = '0'\n        binary_r[i] = '0'\n        binary_diff = binary_l + binary_r\n        if binary_diff[i] == '1':\n            return False\n\n    return True",
        "test": "assert all_Bits_Set_In_The_Given_Range(10, 2, 5) == False, \"The function should return False for n=10, l=2 and r=5.\"",
        "num_ids": 1419,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables\n    positive = []\n    negative = []\n    \n    # Iterate through the array\n    for i in range(n):\n        # If the element is positive\n        if arr[i] > 0:\n            positive.append(arr[i])\n        # If the element is negative\n        else:\n            negative.append(arr[i])\n    \n    # Concatenate the positive and negative arrays\n    result = negative + positive\n    \n    # Return the re-arranged array\n    return result",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1716,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)",
        "test": "assert replace_blank(\"hello world\", \"0\") == \"hello0world\"",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)",
        "test": "assert larg_nnum([1, 2, 3, 4, 5], 1) == [5]",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * pi * r * h",
        "test": "assert lateralsuface_cylinder(3,4) == 2*pi*r*h",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert volume_cube(1) == 1, \"Volume of cube with side length 1 should be 1\"",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the frequency of each tuple in the list\n    count = Counter(test_list)\n    # Use a dictionary to store the unique tuples and their frequency counts\n    freq_dict = {}\n    # Iterate through the Counter object and store the unique tuples and their frequency counts in the freq_dict dictionary\n    for tup, freq in count.items():\n        if tup not in freq_dict:\n            freq_dict[tup] = 0\n        freq_dict[tup] += freq\n    # Return the freq_dict dictionary\n    return freq_dict",
        "test": "assert check_occurences([]) == {}",
        "num_ids": 1021,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            substring = str[i:j+1]\n            if substring!= \"\":\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(m + 1):\n        for j in range(2, n + 1):\n            if i + j <= m:\n                total_sequences += 1\n    return total_sequences",
        "test": "assert get_total_number_of_sequences(20,3) == 3420",
        "num_ids": 958,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2) == 0:\n        return list1\n    else:\n        list1[-1] = list2.pop(0)\n        return replace_list(list1, list2)",
        "test": "assert replace_list([1,2,3,4,5], []) == [1,2,3,4,5]",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"Hello, World!\") == 13, \"Expected count to be 13, got {}\".format(count_charac(\"Hello, World!\"))",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_square(n):\n        return n == int(n ** 0.5) ** 2\n\n    def next_square(n):\n        if is_prime(n):\n            return n\n        else:\n            while True:\n                n += 1\n                if is_square(n):\n                    return n\n\n    current_square = int(N ** 0.5) ** 2\n    if current_square == N:\n        return current_square\n\n    while True:\n        current_square += 1\n        if current_square > N:\n            return current_square\n        elif is_square(current_square):\n            return current_square\n",
        "test": "assert next_Perfect_Square(0) == 0",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_sum(arr): \n    '''\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array. \n    A sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Check if the array is empty or has only one element\n    if n == 0 or n == 1:\n        return arr[0]\n    # Find the first increasing subsequence\n    increasing_subseq = find_increasing_subseq(arr)\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = float('-inf')\n    for i in range(len(increasing_subseq)-1):\n        subseq_sum = sum(increasing_subseq[i:i+2])\n        if subseq_sum > max_sum:\n            max_sum = subseq_sum\n    return max_sum\n\ndef find_increasing_subseq(arr):\n    \"\"\"\n    This function finds the increasing subsequence of the given array.\n    \"\"\"\n    n = len(arr)\n    increasing_subseq = []\n    # Initialize the increasing subsequence with the first element\n    increasing_subseq.append(arr[0])\n    # Initialize the index of the first element in the increasing subsequence\n    first_index = 0\n    # Loop through the remaining elements in the array\n    for i in range(1, n):\n        # If the current element is greater than the last element in the increasing subsequence\n        if arr[i] > increasing_subseq[first_index]:\n            # Add the current element to the increasing subsequence\n            increasing_subseq.append(arr[i])\n            # Move the index of the first element in the increasing subsequence to the current index\n            first_index = i\n    return increasing_subseq",
        "test": "assert max_sum([2, 4, 6, 8, 10]) == 18",
        "num_ids": 1890,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    lower_bound = 0\n    upper_bound = number\n    while True:\n        mid = (lower_bound + upper_bound) / 2\n        if mid**2 == number:\n            return mid\n        elif mid**2 < number:\n            lower_bound = mid\n        else:\n            upper_bound = mid",
        "test": "assert babylonian_squareroot(1) == 1",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def lps(s):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    max_length = 1\n    start = 0\n    max_length_start = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j] and (j - i + 1 > max_length):\n                max_length = j - i + 1\n                start = i\n                max_length_start = j\n    return max_length",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum",
        "test": "assert harmonic_sum(2) == 1.0",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "test": "assert intersection_array([1,2,3], [2,3,4]) == [2,3]",
        "num_ids": 902,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 4, 5), 3) == 1, \"count_X() should return 1 for (1, 2, 3, 4, 5) and 3\"",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.insert(0,element)\n        new_list.extend(list[i:])\n    return new_list",
        "test": "assert insert_element([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        angle = cmath.phase(num) * 180 / cmath.pi\n        polar.append(str(angle) + '\u00b0'+ str(cmath.sqrt(real**2 + imag**2)) +'m')\n    return polar",
        "test": "assert convert([1+1j, 2-3j, 4+5j]) == [(1+1j, 2), (3.605551275463989, 1.7320508075688772), (5.255324099163292, 1.0606601717798083)]",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5, \"count_integer([1, 2, 3, 4, 5]) should return 5\"",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 908,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a tuple\n    where all the elements are maximized from the given tuples.\n    \"\"\"\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        max_tup += (max(test_tup1[i], test_tup2[i]),)\n    return max_tup",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    while True:\n        if all(p % i!= 0 for i in range(2, int(p**0.5)+1)):\n            if n == 1:\n                return p\n            elif n > 1:\n                n -= 1\n        p += 1",
        "test": "assert newman_prime(1) == 2, \"Incorrect output for n=1\"",
        "num_ids": 994,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Input tuples must be of equal length\"\n    \n    # Perform element-wise division and return the result\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))",
        "test": "assert division_elements((1,2,3), (4,5,6)) == (0.25, 0.4, 0.5)",
        "num_ids": 937,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts where the length of the first part is L.\n    \"\"\"\n    if len(lst) <= L:\n        return (lst, [])\n    else:\n        first_part = lst[:L]\n        second_part = lst[L:]\n        return (first_part, second_part)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 1055,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Calculate the dog's age in years based on their height\n    dog_years = h_age / 12\n\n    # Return the dog's age in years\n    return dog_years",
        "test": "assert dog_age(0) == 0.0, \"dog_age function failed for h_age=0.\"",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1008,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6*l**2",
        "test": "assert lateralsurface_cube(1) == 6, \"The lateral surface area of a cube with side length 1 should be 6.\"",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_natural_numbers = 0\n    sum_of_squares = 0\n\n    for i in range(1, n+1, 2):\n        odd_natural_numbers += i\n        sum_of_squares += i*i\n\n    return sum_of_squares",
        "test": "assert square_Sum(1) == 1, 'The sum of squares of the first odd natural number should be 1'",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Initialize a variable to store the sum of the first n numbers\n    first_n_sum = 0\n\n    # Loop through the first n numbers and add them to the sum\n    for i in range(1, n+1):\n        first_n_sum += i\n\n    # Return the sum of the first n numbers\n    return first_n_sum",
        "test": "assert find_star_num(1) == 1, \"The function find_star_num(1) returns the incorrect output\"",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97, \"Failed in testing the function for 'a'\"",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]",
        "test": "assert rear_extract([('a', 1), ('b', 2), ('c', 3), ('d', 4)]) == [4]",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_tup)",
        "test": "assert substract_elements((), ()) == ()",
        "num_ids": 868,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            even_sum += coeff\n    return even_sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r**2 * h\n    return volume",
        "test": "assert volume_cylinder(5,3) == 78.53981633974483, \"The volume of a cylinder with radius 5 and height 3 should be approximately 78.53981633974483\"",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({'a':2,'b':3,'c':4,'d':5,'e':6},3) == {'b':3,'c':4,'d':5,'e':6}",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count",
        "test": "assert count_first_elements((1, 2, 3, 4, 5, 6)) == 1",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return \"Invalid input.\"\n    elif n == 0:\n        return 1\n    else:\n        sum = 0\n        for i in range(n):\n            sum += (2*i+1)**2\n        return sum",
        "test": "assert is_num_decagonal(1) == 1, \"The second decagonal number is 1\"",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        else:\n            seen.add(element)\n    return True",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [3,3], \"sub_list([1,2,3],[4,5,6]) should return [3,3], but it returned {}\".format(sub_list([1,2,3],[4,5,6])))",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10\n    \n    for d in digits:\n        freq[d] += 1\n        \n    for d in freq:\n        if d > n:\n            return False\n        \n    return True",
        "test": "assert validate(1234) == True, \"Failed on 1234\"",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_element(list, element):\n    if len(list) == 0:\n        return False\n    if list[0] == element:\n        for item in list[1:]:\n            if item!= element:\n                return False\n        return True\n    else:\n        return False",
        "test": "assert check_element([1,2,3,4,5],2) == False, \"check_element([1,2,3,4,5],2) should return False\"",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    This function checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three('aabbbbccc') == True, 'text_match_two_three should return True for \"aabbbbccc\"'",
        "num_ids": 648,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Get the maximum sum of a non-repeated sub-array\n    max_non_repeated_sum = max(sum(a[:i]) for i in range(1, n+1))\n\n    # Initialize the maximum sum of a repeated sub-array\n    max_repeated_sum = max_non_repeated_sum\n\n    # Iterate through all possible indices i in the array\n    for i in range(n):\n        # Get the sum of the repeated sub-array from i to n-1\n        repeated_sum = sum(a[i:n])\n\n        # Update the maximum sum of the repeated sub-array\n        max_repeated_sum = max(max_repeated_sum, repeated_sum)\n\n    # Return the maximum sum of the repeated sub-array\n    return max_repeated_sum",
        "test": "assert max_sub_array_sum_repeated([1,2,3,4], 4, 2) == 10",
        "num_ids": 1299,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum = 0\n\n    for i in range(2, n+1, 2):\n        sum += i**2\n\n    return sum\n",
        "test": "assert square_Sum(1) == 0",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns a list of the maximum length in the input list.\n    '''\n\n    # initialize empty list to store the maximum length\n    max_lengths = []\n\n    # loop through each sublist in the input list\n    for sublist in list1:\n\n        # loop through each element in the sublist\n        for element in sublist:\n\n            # check if the element is longer than any element seen so far\n            if len(element) > len(max_lengths) or (len(element) == len(max_lengths) and element > max_lengths[0]):\n\n                # update the maximum length list\n                max_lengths = [element]\n            else:\n\n                # if the element is not longer than any element seen so far, append it to the list\n                max_lengths.append(element)\n\n    return max_lengths",
        "test": "assert max_length([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize a dictionary to store the count of ways\n    ways = {}\n\n    # If n is less than or equal to 0, return 0\n    if n <= 0: \n        return 0\n\n    # If n is equal to 1, then there is only one way of painting the fence\n    if n == 1: \n        ways[(0, 0)] = 1\n        return 1\n\n    # If n is greater than 1, then we need to calculate the number of ways to paint the fence\n    else:\n        # Initialize the first way to paint the fence\n        ways[(0, 0)] = 1\n\n        # Loop for each number from 1 to k\n        for i in range(1, k + 1):\n            # Calculate the count of ways to paint the fence with i colors using the previous ways\n            for j in range(1, n + 1):\n                ways[(j, i)] = ways.get((j - 1, i), 0) + ways.get((j, i - 1), 0)\n\n        # Return the count of ways to paint the fence with k colors\n        return ways[(n, k)]",
        "test": "assert count_no_of_ways(4, 3) == 4",
        "num_ids": 1278,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m # integer division to find the quotient\n    return quotient",
        "test": "assert find(10,4) == 2, \"The function should return 2 for numbers 10 and 4\"",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_val(lst):\n    max_num = float('-inf') # initialize max_num with negative infinity\n    for i in lst:\n        if i > max_num:\n            max_num = i\n    return max_num",
        "test": "assert max_val([1, 3.5, \"a\", 2, False]) == 3.5",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum",
        "test": "assert sum_div(24) == 36 # correct",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    This function takes an array as input and returns the number of inversions\n    present in the array. The algorithm used to calculate the inversion count\n    is Merge Sort.\n    \"\"\"\n    # Base case\n    if len(arr) <= 1:\n        return 0\n    \n    # Divide the array into two halves\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    # Calculate the inversion count in each half recursively\n    inv_count_left = get_Inv_Count(left)\n    inv_count_right = get_Inv_Count(right)\n    \n    # Merge the two halves and count the inversions in the merged array\n    inv_count_merge = 0\n    i = j = k = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            j += 1\n            inv_count_merge += len(left) - i\n        k += 1\n    \n    while i < len(left):\n        arr[k] = left[i]\n        i += 1\n        k += 1\n        \n    while j < len(right):\n        arr[k] = right[j]\n        j += 1\n        k += 1\n        \n    return inv_count_left + inv_count_right + inv_count_merge",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0, \"The result of get_Inv_Count([1, 2, 3, 4, 5]) is incorrect.\"",
        "num_ids": 2264,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # Define a helper function to flatten a list of lists\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    # Call the flatten helper function and return the result\n    return flatten(list1)",
        "test": "assert flatten_list([[1, 2], [3, [4, [5, 6]]]]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 768,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each group\n    max_agg = defaultdict(float)\n    for group, agg in stdata:\n        max_agg[group] = max(max_agg[group], agg)\n    # Find the maximum aggregate across all groups\n    max_agg_all = max(max_agg.values())\n    # Return the maximum aggregate across all groups\n    return max_agg_all",
        "test": "assert max_aggregate([(1, 2), (3, 4), (5, 6)]) == 6",
        "num_ids": 1960,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize the count and sum variables\n    count = 0\n    sum_bits = 0\n\n    # Calculate the sum of the first n bits\n    for i in range(n):\n        sum_bits += 2 ** i\n\n    # Calculate the sum of the last n bits\n    for i in range(n-1, -1, -1):\n        sum_bits += 2 ** i\n\n    # Check if the sum of first n bits is same as sum of last n bits\n    if sum_bits == 2 ** n:\n        count += 1\n\n    return count",
        "test": "assert count_binary_seq(0) == 0",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    if isinstance(d, dict):\n        for key, value in d.items():\n            count += 1\n            if isinstance(value, (dict, list)):\n                count += dict_depth(value)\n    return count",
        "test": "assert dict_depth({'a': 1}) == 1, \"dict_depth({'a': 1}) should return 1\"",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the number of rotations required to find the element at the given index\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index < ranges[i][1]:\n            rotations = i - 1\n            break\n\n    # Calculate the element at the new index\n    element = arr[index - rotations]\n\n    return element",
        "test": "assert find_Element([1,2,3,4,5],[(0,4),(1,3),(2,2),(3,1),(4,0)],[[0,1],[0,2],[0,3],[0,4],[0,0]],4) == 3",
        "num_ids": 1458,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_pattern = r'^\\w+p'\n    p_matches = re.findall(p_pattern, words)\n    return p_matches",
        "test": "assert start_withp(['grape', 'apple', 'banana', 'pear', 'peach', 'pineapple']) == ('apple', 'banana')",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        return 0\n    \n    if index == 0:\n        return max(0, a[0] - k)\n    \n    if index == 1:\n        return max(max(0, a[0] - k), max(max_sum_increasing_subseq(a, n, index - 1, k - 1), a[0] - k))\n    \n    return max(max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 2, k - 1)) + a[index]",
        "test": "assert max_sum_increasing_subseq([], 0, 0, 0) == 0",
        "num_ids": 1514,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a copy of the input tuple to avoid modifying the original\n    new_tuplex = deepcopy(tuplex)\n    # Get the number of elements in the input tuple\n    num_elements = len(new_tuplex)\n    # Get the last element in the tuple\n    last_element = new_tuplex[-1]\n    # Create an empty list to store the colon\n    colon = []\n    # Loop through the last element\n    for i in range(m):\n        # Append the i-th element of the tuple to the colon\n        colon.append(last_element[i])\n    # Reverse the colon to get the correct order\n    colon.reverse()\n    # Add the colon to the tuple\n    new_tuplex[-1] = colon\n    # Return the new tuple\n    return new_tuplex",
        "test": "assert colon_tuplex((1,2,3),(2,1),2) == (1,3)",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize two variables to store the largest products and their indices\n    largest_product = float('-inf')\n    largest_product_idx1 = -1\n    largest_product_idx2 = -1\n\n    # Iterate over the specified number of products\n    for i in range(N):\n        # Calculate the product of the two largest numbers from each list\n        product1 = nums1[0] * nums1[1]\n        product2 = nums2[0] * nums2[1]\n\n        # Update the largest_product and its indices\n        if product1 > largest_product:\n            largest_product = product1\n            largest_product_idx1 = 0\n            largest_product_idx2 = 0\n        elif product1 == largest_product and nums1[0] > nums1[largest_product_idx1]:\n            largest_product = product1\n            largest_product_idx1 = 0\n        elif product1 == largest_product and nums1[0] < nums1[largest_product_idx1]:\n            largest_product = product1\n            largest_product_idx1 = 1\n\n        if product2 > largest_product:\n            largest_product = product2\n            largest_product_idx2 = 0\n            largest_product_idx1 = 0\n        elif product2 == largest_product and nums2[0] > nums2[largest_product_idx2]:\n            largest_product = product2\n            largest_product_idx2 = 0\n        elif product2 == largest_product and nums2[0] < nums2[largest_product_idx2]:\n            largest_product = product2\n            largest_product_idx2 = 1\n\n    # Return the indices of the largest products and their products\n    return largest_product_idx1, largest_product_idx2, largest_product",
        "test": "assert large_product([1, 2, 3, 4], [5, 6, 7, 8], 3) == [5, 60]",
        "num_ids": 1424,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2,4) == 4, \"The maximum of 2 and 4 should be 4.\"",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize count of unset bits to n\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    \n    # Set the left most unset bit to 1\n    return 1 << (count - 1)",
        "test": "assert set_left_most_unset_bit(1) == 1",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V",
        "test": "assert volume_cone(1,1) == 3.141592653589793, \"volume_cone failed: r=1, h=1\"",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # initialize the highest power of 2 found so far\n    highest_power = 0\n    \n    # loop through all powers of 2 from 1 to the square root of n\n    for power in range(1, int(n ** 0.5) + 1):\n        # check if this power of 2 is greater than or equal to n\n        if power * power <= n:\n            # if it is, update the highest power of 2 found so far\n            highest_power = power\n    \n    # return the highest power of 2 found so far\n    return highest_power",
        "test": "assert highest_Power_of_2(16) == 4",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 709,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "test": "assert add_string(['a', 'b', 'c'], '%s %s %s') == ['a b c', 'b c d', 'c d e']",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Convert a list of lists to a nested dictionary.\n    '''\n    if not lists:\n        raise ValueError('At least one list must be provided.')\n    \n    result = {}\n    for list in lists:\n        for item in list:\n            if item not in result:\n                result[item] = {}\n    \n    return result",
        "test": "assert convert_list_dictionary([], [], []) == {}, 'convert_list_dictionary failed for empty list'",
        "num_ids": 1166,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Create an empty dictionary to store the length of each element in the list\n    lengths = {}\n    \n    # Loop through the input list and update the lengths dictionary\n    for item in input_list:\n        if item in lengths:\n            lengths[item] += 1\n        else:\n            lengths[item] = 1\n    \n    # Find the list with the maximum length in the dictionary\n    max_length = max(lengths, key=lengths.get)\n    \n    # Create a new list with only the elements that have the maximum length\n    output_list = [item for item in input_list if lengths[item] == lengths[max_length]]\n    \n    return output_list",
        "test": "assert max_length_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    return len(unique_set) == len(test_tup)",
        "test": "assert check_distinct((1,2,3)) == True",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if it is, increment the count by 1\n            char_count[char] += 1\n        else:\n            # if it's not, add the character to the dictionary with a count of 1\n            char_count[char] = 1\n    \n    # loop through the dictionary and find the first character with a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            # return the character if it has a count of 1\n            return char\n    \n    # if no character has a count of 1, return None\n    return None",
        "test": "assert first_non_repeating_character(\"aaabbbccc\") == \"a\"",
        "num_ids": 880,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(regex, string))",
        "test": "assert check_char(\"a\") == True",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers\n    sorted_list = sorted([a, b, c])\n    \n    # Calculate the midpoint of the sorted list\n    midpoint = len(sorted_list) // 2\n    \n    # If the length of the list is even, the median is the average of the middle two numbers\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[midpoint - 1] + sorted_list[midpoint]) / 2\n    else:\n        median = sorted_list[midpoint]\n    \n    return median",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 822,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total",
        "test": "assert sum_of_digits([123]) == 6, \"Failed for input [123]\"",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)",
        "test": "assert bitwise_xor((1, 2), (3, 4)) == (2, 6)",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    unique_list = set()\n    for i in test_list:\n        if (i not in unique_list):\n            unique_list.add(i)\n            count += 1\n    return count",
        "test": "assert extract_freq([1, 2, 3, 2, 1]) == 3",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two nested tuples must have equal lengths.\")\n        return None\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            result_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result_tup.append(test_tup1[i] + test_tup2[i])\n    \n    return tuple(result_tup)",
        "test": "assert add_nested_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9), \"add_nested_tuples((1, 2, 3), (4, 5, 6)) should return (5, 7, 9)\"",
        "num_ids": 1288,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2, 5) == 2, \"The function is not returning the correct minimum value\"",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False",
        "test": "assert check_tuplex(('apple', 'banana', 'cherry'), ('orange',)) == False",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    parity = 0\n    if x < 0:\n        parity += 1\n    for i in range(1, int(x**0.5)+1):\n        if x % i == 0:\n            parity += 1\n    if parity % 2 == 1:\n        return True\n    else:\n        return False",
        "test": "assert find_Parity(1) == True",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the input number to a string\n    num = str(n)\n    \n    # Create a list of digits in the number\n    digits = []\n    for digit in num:\n        digits.append(int(digit))\n    \n    # Rearrange the digits in non-descending order\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if digits[i] > digits[j]:\n                digits[i], digits[j] = digits[j], digits[i]\n    \n    # Convert the rearranged digits back to a string and add it to the beginning of the number\n    new_num = ''.join(str(digit) for digit in digits)\n    return int(new_num + num)",
        "test": "assert rearrange_bigger(987654321) == 987654321",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap of size k to store the smallest pairs found so far\n    min_heap = []\n    \n    # Iterate through both arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # Check if the current pair is smaller than the smallest pair in the heap\n            if len(min_heap) < k or num1+num2 < min_heap[0][0]+min_heap[0][1]:\n                heapq.heappush(min_heap, (num1+num2, (num1, num2)))\n                \n            # If the heap has k elements, remove the smallest element from the heap\n            if len(min_heap) == k:\n                heapq.heappop(min_heap)\n    \n    # Extract the k smallest pairs from the heap and return them as a list\n    pairs = []\n    while min_heap:\n        pairs.append(min_heap[0][1])\n        heapq.heappop(min_heap)\n        \n    return pairs",
        "test": "assert k_smallest_pairs([], [], 1) == []",
        "num_ids": 1812,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6)]) == 24",
        "num_ids": 1141,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num",
        "test": "assert min_val([1,2,3,4,5]) == 1",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    camel_case = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', camel_case)\n    return camel_case.lower()",
        "test": "assert snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        raise ValueError(\"Index out of range\")\n    return list1[n-1]",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == (3, 4)",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
        "test": "assert overlapping([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == True",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_Product(arr): \n    '''\n    This function takes in an array of integers as input and returns a tuple with two integers, where\n    the first integer is the maximum product of any pair in the array and the second integer is the\n    second largest element in the array. If there are multiple pairs with the same highest product,\n    the function returns the pair with the smallest value in the array.\n    '''\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Find the maximum product of any pair in the array\n    max_product = arr[0]*arr[1]\n\n    # Find the second largest element in the array\n    second_largest = arr[1]\n\n    # Return the tuple with maximum product and second largest element\n    return (max_product, second_largest)",
        "test": "assert max_Product([-3, -2, -1, 0, 1, 2]) == (-1, 0)",
        "num_ids": 874,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = set()\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            common = set(Input[i]) & set(Input[j])\n            if len(common) > 0:\n                common_elements.add(common.pop())\n    return list(common_elements)",
        "test": "assert group_tuples([(1, 2), (3, 4), (2, 3)]) == ((1, 2, 3),)",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def Find_Max(lst): \n    max_length = 0 \n    max_element = None \n\n    for element in lst: \n        if len(str(element)) > max_length: \n            max_length = len(str(element)) \n            max_element = element \n\n    return max_element ",
        "test": "assert Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum * len(list1))",
        "test": "assert round_and_sum([1.2, 2.5, 3.7, 4.9, 6.1]) == 234.5",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes",
        "test": "assert cube_Sum(1) == 0",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter ='' # change this to the delimiter you want to use\n    result = []\n    for item in test_tup:\n        result.append(str(item))\n    concatenated_result = delimiter.join(result)\n    return concatenated_result",
        "test": "assert concatenate_tuple(('hello', 'world')) == 'helloworld'",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list",
        "test": "assert extract_rear(('hello', 'world', 'python', 'programming')) == ('world', 'python', 'programming')",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 5) == 0",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # create a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match the pattern in the input string\n    match = re.match(pattern, dt)\n    if match:\n        # replace the matched groups with the desired date format\n        return match.group(3) + '-' + match.group(2) + '-' + match.group(1)\n    else:\n        # if the input string does not match the pattern, return None\n        return None",
        "test": "assert change_date_format('2022-02-21') == '21-02-2022'",
        "num_ids": 1047,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n        \n    return my_list",
        "test": "assert shell_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]",
        "num_ids": 1418,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return result",
        "test": "assert and_tuples((1, 2, 3), (4, 5, 6)) == ((1, 4), (2, 5), (3, 6))",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        print(\"Error: the equation is not defined for y = c\")\n        return None\n\n    directrix = -b/2*a\n    return directrix",
        "test": "assert parabola_directrix(-1, 0, 1) == 0",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3], [2, 3, 4]) == True",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * base2 + 0.5 * base1 * height + 0.5 * base2 * height\n    # calculate the base of the trapezium\n    base = math.sqrt(area)\n    # calculate the length of the trapezium\n    length = (base1 + base2) / 2\n\n    return length",
        "test": "assert median_trapezium(5,7,10) == 6",
        "num_ids": 971,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "test": "assert check_greater([1,2,3,4,5], 2) == True, \"Failed to check the correctness of check_greater.\"",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None",
        "test": "assert text_match_one(\"abbbbbbbb\") == \"abbbbbbbb\"",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Using integer division to extract the last digit\n    return n % 10",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers from the original list.\n    '''\n    return [num for num in lst if num < 0]",
        "test": "assert neg_nos([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function removes odd characters from a given string.\n    \"\"\"\n    odd_chars = ['1', '3', '5', '7', '9']\n    new_string = \"\"\n    for char in string:\n        if char not in odd_chars:\n            new_string += char\n    return new_string",
        "test": "assert remove_odd('abcde') == 'abcde'",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(\"a\", \"b\"), (\"b\", \"a\"), (\"c\", \"d\")]) == 0",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result",
        "test": "assert multiple_to_single([1, 2, 3, 4, 5]) == 120",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to find adverbs\n    pattern = re.compile(r'\\b(\\w+)ing\\b')\n\n    # Find all occurrences of the pattern in the given text\n    matches = pattern.finditer(text)\n\n    # Initialize an empty list to store adverbs and their positions\n    adverbs = []\n\n    # Loop through all matches and extract the adverb and its position\n    for match in matches:\n        adverb = match.group(1)\n        position = match.start()\n        adverbs.append((adverb, position))\n\n    # Sort the adverbs by their positions and return the first adverb and its position\n    if adverbs:\n        return sorted(adverbs)[0]\n    else:\n        return None",
        "test": "assert find_adverb_position(\"The man is a lazy person.\") == [(4, 9)]",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2",
        "test": "assert surfacearea_cube(1) == 6, \"Expected 6, got {}\".format(surfacearea_cube(1))",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    pos_sum = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n            pos_sum += num\n    \n    if pos_count == 0:\n        return 0.0\n    \n    return pos_sum / pos_count",
        "test": "assert positive_count([]) == 0",
        "num_ids": 865,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg",
        "test": "assert largest_neg([5, -2, 8, 3]) == 5",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list",
        "test": "assert trim_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)], 2) == [(1, 2), (6, 7), (11, 12)]",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == (4, 10, 18)",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count_dict = Counter(tup)  # Counter object to count the occurrence of all elements of tuple\n    count = 0\n    for i in lst:\n        if i in count_dict:\n            count += count_dict[i]\n\n    return count",
        "test": "assert count_Occurrence((1, 2, 3, 4, 5), [1, 2, 3, 4, 5]) == 5",
        "num_ids": 931,
        "indeed": true
    },
    {
        "number": 447,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum",
        "test": "assert cal_sum(1) == 1",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer as input and returns a new list containing the specified size of strings from the original list.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result",
        "test": "assert extract_string(['apple', 'banana', 'cherry', 'date', 'elderberry'], 3) == ['apple', 'banana', 'cherry']",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount > 0:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0",
        "test": "assert loss_amount(100, 100) == 0, \"loss_amount(100, 100) should return 0\"",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math \n\ndef sumofFactors(n): \n    \"\"\"\n    This function takes a number as input and returns the sum of its even factors. \n    \"\"\"\n    \n    # Initialize variables for sum and count of even factors \n    sum_even = 0 \n    count_even = 0\n    \n    # Loop through the number from 2 to n (inclusive) \n    for i in range(2, n+1): \n\n        # Check if i is even \n        if i % 2 == 0: \n\n            # Add i to sum if it is even \n            sum_even += i \n\n            # Increment count of even factors \n            count_even += 1\n    \n    # Calculate and return the sum of even factors \n    return sum_even",
        "test": "assert sumofFactors(4) == 6, \"The sum of even factors of 4 is not correct.\"",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return re.search(pattern, text).group() if re.search(pattern, text) else None",
        "test": "assert text_match_wordz(\"the quick brown fox jumped over the lazy dog\") == \"lazy\"",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 10 == 0:\n        if monthnum2 == 2:\n            return True\n        else:\n            return False\n    elif monthnum2 % 10 == 1:\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n        else:\n            return False\n    elif monthnum2 % 10 == 2:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    else:\n        if monthnum2 == 2:\n            return True\n        else:\n            return False",
        "test": "assert check_monthnumb_number(13) == False",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i <= min_len:\n                continue\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist",
        "test": "assert Find_Min([]) == [], \"Empty list should return an empty list\"",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b",
        "test": "assert rectangle_area(2,3) == 6",
        "num_ids": 392,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    result = pattern.sub('', str1)\n    return result",
        "test": "assert remove_uppercase('Hello WORLD') == 'Hello WORLD'",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([['a','b','c'],[1,2,3],['d','e']]) == ['a',1,'d']",
        "num_ids": 533,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Count the number of uppercase characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr('Hello World') == 2",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations",
        "test": "assert combinations_list([]) == []",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        if num < 0:\n            current_product = 1\n            \n        current_product *= num\n        \n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values)!= 1 or values[0]!= n:\n        return False\n    else:\n        return True",
        "test": "assert check_value({'a': 1, 'b': 2, 'c': 3}, 2) == False, \"check_value({'a': 1, 'b': 2, 'c': 3}, 2) == False\"",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far",
        "test": "assert max_product([0, 0, 0, 0, 0]) == 0",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_pairwise(test_tup):\n    '''\n    This function takes a tuple as input and returns the sum of the pairwise addition of the neighboring elements.\n    '''\n    if len(test_tup) < 2:\n        print(\"The tuple should have at least two elements.\")\n        return\n    \n    # Define a variable to store the sum of pairwise additions\n    sum_pairwise = 0\n    \n    # Loop through the tuple and calculate the sum of pairwise additions\n    for i in range(len(test_tup)-1):\n        sum_pairwise += test_tup[i] + test_tup[i+1]\n    \n    # Return the sum of pairwise additions\n    return sum_pairwise",
        "test": "assert add_pairwise((1, 2, 3, 4)) == (5, 6, 7, 8)",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result",
        "test": "assert find_remainder([1, 2, 3], 10) == 6",
        "num_ids": 678,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n\n    return True",
        "test": "assert check_Consecutive([1, 2, 3, 5]) == False, \"check_Consecutive([1, 2, 3, 5]) should return False\"",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = set(test_list1) & set(test_list2)\n    return tuple(intersection)\n",
        "test": "assert tuple_intersection([(1, 2, 3), (4, 5, 6)], [(2, 4, 6), (8, 10, 12)]) == ()",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1",
        "test": "assert replace_char(\"hello\", 'o', 'x') == \"hellx\"",
        "num_ids": 549,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Counter is used to count the frequency of each element in the dictionary\n    # Sorting by value is done using the sorted() function\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "test": "assert sort_counter({'apple': 3, 'banana': 2, 'orange': 1}) == {'banana': 2, 'apple': 3, 'orange': 1}",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest value in the array\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    \n    # find the smallest value in the array\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    \n    # return the sum of the largest and smallest values\n    return largest + smallest",
        "test": "assert big_sum([-1, -2, -3, -4, -5]) == 5",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"Hello, world!\") == \"hello, world!\"",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Convert the given string to lowercase\n    str1 = str1.lower()\n\n    # Split the string into substrings\n    substrings = re.findall(r'[a-z]+', str1)\n\n    # Loop through each substring and remove it from the string\n    for substring in substrings:\n        str1 = re.sub(r'\\b'+substring+r'\\b', '', str1)\n\n    return str1",
        "test": "assert remove_lowercase(\"Python is cool\") == \"Pythn is cll\"",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    # convert the number to string\n    num_str = str(n)\n    # get the first character of the string\n    first_char = num_str[0]\n    # convert the first character to integer\n    first_digit = int(first_char)\n    # return the first digit\n    return first_digit",
        "test": "assert first_Digit(0) == 0",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2!= 0]",
        "test": "assert Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of cubes of the first n natural numbers\n    cube_sum = sum([i**3 for i in range(1, n+1)])\n    # Find the sum of the first n natural numbers\n    sum_sum = sum(range(1, n+1))\n    # Calculate the difference between the two sums\n    difference = cube_sum - sum_sum\n    return difference",
        "test": "assert difference(1) == 0, \"Difference of 1 is not zero\"",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_Odd_Pair(A,N) : \n\n    # Initialize a dictionary to store the count of odd xor values\n    odd_xor_count = {}\n\n    # Iterate over all the elements in the array A\n    for i in range(N) : \n\n        # Calculate the xor value of the current element and all the other elements in the array A\n        xor_value = 0\n        for j in range(N) : \n            if i!= j : \n                xor_value = xor_value ^ A[j]\n\n        # Increment the count of the xor value in the dictionary\n        if xor_value % 2!= 0 : \n            if xor_value in odd_xor_count : \n                odd_xor_count[xor_value] += 1\n            else : \n                odd_xor_count[xor_value] = 1\n\n    # Return the count of odd xor values\n    return len(odd_xor_count)",
        "test": "assert find_Odd_Pair([1,2,3,4,5],5)==2",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "test": "assert toggle_string(\"Hello\") == \"hELLO\"",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    # Loop through each digit of n1 and n2 and calculate the difference\n    for i in range(10):\n        diff = abs(n1 % 10 - n2 % 10)\n        sum_diff += diff\n        # Divide n1 and n2 by 10 to remove the used digit\n        n1 //= 10\n        n2 //= 10\n    return sum_diff",
        "test": "assert digit_distance_nums(9876, 5432) == 136 # example 2",
        "num_ids": 1194,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) < size:\n        return None\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n    end_index = 0\n    while end_index < len(a):\n        if current_sum <= 0:\n            current_sum = a[end_index]\n            start_index = end_index\n        else:\n            current_sum += a[end_index]\n        end_index += 1\n        if end_index - start_index == size:\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum",
        "test": "assert max_sub_array_sum([1, -2, 3, 4, -1, 2, 1], 3) == 6",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Merge the two tuples into one sorted list\n    merged_list = sorted(test_tup1 + test_tup2)\n\n    # Extract the unique elements from the merged list and return them in sorted order\n    return sorted(set(merged_list))",
        "test": "assert union_elements((1, 5, 3), (2, 4, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i-1]!= lst[i]:\n            sub_lst = lst[i:i+10]\n            if len(sub_lst) > len(longest):\n                longest = sub_lst\n    return len(longest)",
        "test": "assert Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 10, \"Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) should return 10.\"",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use regular expression to find all occurrences of quotation marks\n    matches = re.findall(r'\"([^\"]*)\"', text)\n    # Iterate over matches and extract the values between quotation marks\n    extracted_values = []\n    for match in matches:\n        extracted_values.append(match.strip('\"'))\n    return extracted_values",
        "test": "assert extract_values('The value is \"123\"') == ['123']",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10, \"count_Pairs([1,2,3,4,5],5) should return 10\"",
        "num_ids": 812,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum",
        "test": "assert sum_digits(442) == 10,'sum_digits(442) == 10'",
        "num_ids": 691,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "test": "assert empty_list(1) == [{}]",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "test": "assert sort_sublists([[1, 2, 3], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert the given list to set to remove duplicates\n    nums = set(nums)\n    # Convert the set back to a list and return it\n    return list(nums)",
        "test": "assert two_unique_nums([1,2,3,4,5,5,6,7,8,8,8,9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 875,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data) # convert the list to a set to remove duplicates\n    product = 1 # initialize the product to 1\n    \n    for number in unique_numbers:\n        product *= number\n        \n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n\n    # calculate the surface area using formula: s = 2 * pi * r^2 + 2 * pi * h * r\n    s = (2 * math.pi * r**2) + (2 * math.pi * h * r)\n\n    return s",
        "test": "assert surfacearea_cylinder(3,4) == 56.85010934496886, \"Incorrect surface area calculation for cylinder with radius 3 and height 4.\"",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False",
        "test": "assert is_Sub_Array([1,2,3], [1,2,3]) == True",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes a positive integer 'n' as input and returns the last digit in its factorial. \n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print(\"All lists must have the same length.\")\n        return\n    \n    # Initialize an empty list to store the interleaved lists\n    interleaved_list = []\n    \n    # Iterate through each list and add its elements to the interleaved list in their order\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    return interleaved_list",
        "test": "assert interleave_lists([1,2,3], [4,5,6], [7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 1028,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list",
        "test": "assert find_dissimilar(('apple', 'banana', 'orange'), ('apple', 'banana', 'kiwi')) == ['orange']",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return new_tuple\n\ndef is_even(num):\n    return num % 2 == 0\n\ntest_tuple = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nresult = even_ele(test_tuple, is_even)\nprint(result)",
        "test": "assert even_ele(([1, 2, 3, [4, 5, 6], 7, 8], [2, 4, 6]), lambda x: x % 2 == 0) == ([1, 3, 7, 8], [2, 4, 6])",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # Calculate the surface area of the base of the pyramid\n    base_area = (b**2)\n    \n    # Calculate the surface area of the top of the pyramid\n    top_area = (s * (s-b)) / 2\n    \n    # Add the two areas and return the result\n    return base_area + top_area ",
        "test": "assert surface_Area(5,10) == 50, \"The surface area of a square pyramid with a base edge of 5 and height of 10 should be 50.\"",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        n1 = n - 1\n        n2 = 2 * n - 1\n        return catalan_number(n1) / catalan_number(n2)",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression to match adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # Use re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If the match object is not None, return the position of the match\n    if match:\n        return match.start()\n\n    # If the match object is None, return None\n    else:\n        return None",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy dogs.\") == [(4, 13)]",
        "num_ids": 1776,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "test": "assert expensive_items([], 1) == []",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return None\n    \n    new_list = l[:n] + l[n+1:]\n    return new_list",
        "test": "assert split_Arr([1,2,3,4,5], 4) == [1, 2, 3, 4]",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list as an argument and returns the difference between the largest and smallest values in the list.\n    '''\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n    \n    # Return the difference between the largest and smallest values\n    return nums[0] - nums[1]",
        "test": "assert big_diff([1, 3, 5, 7, 9]) == 2 # correct output",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares\n    perfect_squares_list = []\n\n    # loop through all numbers between a and b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i * i == i:\n            # add i to the list if it is\n            perfect_squares_list.append(i)\n\n    # return the list of perfect squares\n    return perfect_squares_list",
        "test": "assert perfect_squares(1, 36) == [1, 4, 9, 16, 25, 36]",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect",
        "test": "assert polar_rect(1, 0) == (1, 0)",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 665,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    sum_coeff = 0\n\n    for i in range(1, k + 1):\n        coeff *= n - i + 1\n        coeff //= i\n        sum_coeff += coeff\n\n    return sum_coeff",
        "test": "assert binomial_Coeff(3,1) == 3",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+(?=\\d)', '', ip) # remove leading zeroes from the ip address\n    return ip",
        "test": "assert removezero_ip(\"192.168.1.1\") == \"192.168.1.1\"",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = None\n    odd_first = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_first is None:\n                even_first = num\n            else:\n                break\n        elif num % 2!= 0:\n            if odd_first is None:\n                odd_first = num\n            else:\n                break\n    \n    if even_first is None or odd_first is None:\n        return None\n    \n    return even_first - odd_first",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1, \"The result of diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) is not correct.\"",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    diff = abs(n1 - n2)\n\n    if diff == 0:\n        return 0\n    elif diff > 0:\n        str1, str2 = str2, str1\n        diff = abs(n1 - n2)\n\n    min_swaps = 0\n    i = 0\n    j = 0\n\n    while i < n1 and j < n2:\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        else:\n            if str1[i] < str2[j]:\n                min_swaps += n1 - i\n                i += 1\n            else:\n                min_swaps += n2 - j\n                j += 1\n\n    while i < n1:\n        min_swaps += n1 - i\n        i += 1\n\n    while j < n2:\n        min_swaps += n2 - j\n        j += 1\n\n    return min_swaps",
        "test": "assert min_Swaps(\"00010\", \"00101\") == 0",
        "num_ids": 1379,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of each element in the tuple\n    sizes = [sys.getsizeof(x) for x in tuple_list]\n    # Multiply the sizes and return the result\n    return sum(sizes)",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 528,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def merge(arr, l, m, r):\n    # Create temp arrays\n    n1 = m - l + 1\n    n2 = r - m\n    \n    temp1 = [0] * n1\n    temp2 = [0] * n2\n    \n    # Copy data to temp arrays\n    for i in range(0, n1):\n        temp1[i] = arr[l + i]\n    for j in range(0, n2):\n        temp2[j] = arr[m + 1 + j]\n    \n    # Merge the temp arrays back into arr[l..r]\n    i = 0  # Initial index of first subarray\n    j = 0  # Initial index of second subarray\n    k = l  # Initial index of merged subarray\n    \n    while i < n1 and j < n2:\n        if temp1[i] <= temp2[j]:\n            arr[k] = temp1[i]\n            i += 1\n        else:\n            arr[k] = temp2[j]\n            j += 1\n        k += 1\n    \n    while i < n1:\n        arr[k] = temp1[i]\n        i += 1\n        k += 1\n    \n    while j < n2:\n        arr[k] = temp2[j]\n        j += 1\n        k += 1\n\n\ndef merge_sort(arr, l, r):\n    if l < r:\n        m = l + (r - l) // 2\n        \n        # Sort first and second halves\n        merge_sort(arr, l, m)\n        merge_sort(arr, m + 1, r)\n        \n        # Merge the sorted halves\n        merge(arr, l, m, r)\n\n\ndef find_kth(arr1, arr2, k):\n    # Merge the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    merged_arr = [0] * (n1 + n2)\n    i = j = k = 0\n    while i < n1 and j < n2:\n        if arr1[i] <= arr2[j]:\n            merged_arr[k] = arr1[i]\n            i += 1\n        else:\n            merged_arr[k] = arr2[j]\n            j += 1\n        k += 1\n    \n    # Copy the remaining elements of the first array\n    while i < n1:\n        merged_arr[k] = arr1[i]\n        i += 1\n        k += 1\n    \n    # Copy the remaining elements of the second array\n    while j < n2:\n        merged_arr[k] = arr2[j]\n        j += 1\n        k += 1\n    \n    # Sort the merged array\n    merge_sort(merged_arr, 0, len(merged_arr) - 1)\n    \n    # Return the kth element\n    return merged_arr[k - 1]",
        "test": "assert find_kth([1,2,3,4,5], [4,5,6,7,8], 6) == 8",
        "num_ids": 1997,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    number_str = str(number)\n\n    # Initialize the sum of the digits of the number\n    sum_digits = 0\n\n    # Loop through each digit of the number\n    for digit in number_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n\n        # Add the digit to the sum of digits\n        sum_digits += digit_int ** len(number_str)\n\n    # Check if the sum of digits is equal to the original number\n    if sum_digits == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through first n numbers\n    for i in range(1, number + 1):\n        # add i to sum\n        sum += i\n\n    # calculate the average by dividing sum by number\n    average = sum / number\n\n    return sum, average",
        "test": "assert sum_average(5) == (15, 3.0)",
        "num_ids": 720,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(4) == True, \"4 should be True\"",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the character frequencies\n    freq = {}\n    # Traverse through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # Find the first character that appears more than once\n    for char, count in freq.items():\n        if count > 1:\n            return char\n    # If all characters appear only once, return None\n    return None",
        "test": "assert first_repeated_char('Hello') == 'l', \"First repeated character is not 'l' for 'Hello'\"",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    num = 1\n    while num <= n:\n        if all(int(digit)!= digit for digit in str(num)):\n            lucid_numbers.append(num)\n        num += 1\n    return lucid_numbers",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 865,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Splitting the string into words\n    words = s.split()\n    # Reversing the order of the words\n    words = words[::-1]\n    # Joining the words back into a string\n    s = \" \".join(words)\n    return s",
        "test": "assert reverse_words(\"hello world\") == \"world hello\"",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given integer is prime, else False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_num(num):\n    \"\"\"\n    Returns True if the given integer is a prime number, else False.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False",
        "test": "assert prime_num(2) == True",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n\nprint(radian_degree(45))",
        "test": "assert radian_degree(180) == math.pi",
        "num_ids": 394,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"The quick brown fox jumps over the lazy dog\", r\"The\\s\\w+\\s\\w+\\s\\w+\")[1] == 0",
        "num_ids": 862,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (n + 1) * bell_Number(n-1)",
        "test": "assert bell_Number(0) == 0",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1 # subtract 1 to get the index of the kth element\n    list1.pop(k) # remove the kth element\n    return list1",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5]",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize a variable to store the maximum value of then'th column\n    max_value = float('-inf')\n    \n    # Iterate through the list of lists\n    for row in test_list:\n        # If the value of then'th column is greater than the current maximum value, update the maximum value\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    \n    # Return the maximum value of then'th column\n    return max_value",
        "test": "assert max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 3) == 9",
        "num_ids": 960,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def merge(lst):\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum",
        "test": "assert cummulative_sum((1,2,3,4,5)) == 15",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create a list to store the averages for each tuple in the input tuple\n    averages = []\n    # Loop through each tuple in the input tuple\n    for tup in nums:\n        # Calculate the sum of all the elements in the tuple\n        total = sum(tup)\n        # Divide the total by the number of elements in the tuple to get the average\n        average = total / len(tup)\n        # Add the average to the list of averages\n        averages.append(average)\n    # Return the list of averages\n    return averages",
        "test": "assert average_tuple([(1,2,3),(4,5,6),(7,8,9)]) == [2.0, 5.0, 8.0]",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # Perform element-wise modulo\n    modulo_result = []\n    for i in range(len(test_tup1)):\n        modulo_result.append(test_tup1[i] % test_tup2[i])\n    \n    return tuple(modulo_result)",
        "test": "assert tuple_modulo((1, 2, 3, 4, 5), (2, 3, 4, 5, 6)) == (1, 2, 3, 4, 5), 'Testing tuple_modulo function for incorrect output.'",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def min_Jumps(steps, d):\n    if steps <= 0:\n        return -1\n    \n    dp = [0] * steps\n    dp[0] = 0\n    i = 1\n    while i < steps:\n        if dp[i] == 0:\n            dp[i] = steps - i\n            j = 1\n            while dp[i] == steps - i and j < i:\n                dp[i] += j\n                j += 1\n            if dp[i] == steps - i:\n                return i\n        i += 1\n    \n    return -1",
        "test": "assert min_Jumps(3, 4) == 2",
        "num_ids": 1458,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through each element in both lists\n    for i in range(len(nums1)):\n        # Perform element-wise division\n        result.append(nums1[i] / nums2[i])\n        \n    return result",
        "test": "assert div_list([2,4,6,8], [1,2,3,4]) == [2,2,2,2]",
        "num_ids": 707,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            num_list.append(test_str[i])\n        else:\n            if num_list:\n                for j in range(len(num_list)):\n                    test_str = test_str[:test_str.index(num_list[j])] + num_list[j] + test_str[test_str.index(num_list[j])+len(num_list[j]):]\n                num_list = []\n    return test_str",
        "test": "assert move_num(\"abcde\") == \"abcde\"",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
        "test": "assert largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4",
        "num_ids": 1193,
        "indeed": true
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def merge(arr1, arr2):\n    merged_arr = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    merged_arr.extend(arr1[i:])\n    merged_arr.extend(arr2[j:])\n    return merged_arr\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef get_median(arr1, arr2, n):\n    merged_arr = merge_sort(arr1) + merge_sort(arr2)\n    mid = len(merged_arr) // 2\n    if n % 2 == 0:\n        return (merged_arr[mid - 1] + merged_arr[mid]) / 2\n    else:\n        return merged_arr[mid]",
        "test": "assert get_median([1, 2, 3], [4, 5, 6], 3) == 4.0",
        "num_ids": 1241,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([2,3,4,5], 2) == [4,9,16,25]",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 278,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    if n < 2:\n        return newList\n    \n    first = newList[0]\n    last = newList[n-1]\n    newList[0] = last\n    newList[n-1] = first\n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # calculate the area of a triangle given its base and height\n    def area_triangle(base, height):\n        return 0.5 * base * height\n\n    # calculate the area of a semicircle given its radius\n    def area_semicircle(r):\n        return math.pi * r * r\n\n    # calculate the area of the largest triangle that can be inscribed in a semicircle with the given radius\n    def largest_triangle_area(r):\n        area = 0\n        sides = [0, r, r**2]\n        sides.sort(reverse=True)\n\n        for i in range(len(sides)-2):\n            area = max(area, area_triangle(sides[i], sides[i+1]))\n\n        return area\n\n    return largest_triangle_area(r)",
        "test": "assert triangle_area(5) == 50",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n    return end + 1",
        "test": "assert find_First_Missing([6, 7, 8, 9, 10]) == 1",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []\n\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    return even_list",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]",
        "num_ids": 606,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x+dx, y+dy) for dx,dy in sub]\n    return adjacent",
        "test": "assert adjac((1, 2), [(-1, 0), (0, -1), (1, 0), (0, 1)]) == [(0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2), (0, -1), (-1, 0), (0, 0), (1, 1), (1, -1), (2, 2), (2, -2), (1, 3), (1, -3), (2, 1), (2, -1), (1, 4), (1, -4), (2, 3), (2, -3)]",
        "num_ids": 1439,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        num_list.pop(zero_index)\n        num_list.append(0)\n        return num_list",
        "test": "assert move_zero([1, 2, 3, 4, 5, 0]) == [1, 2, 3, 4, 5, 0]",
        "num_ids": 1083,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum",
        "test": "assert pair_xor_Sum([2,3,5,7],4) == 18",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    # Convert list to heap\n    hq.heapify(iterable)\n    # Sort heap\n    for i in range(n-1, 0, -1):\n        hq.heappop(iterable)\n    return list(iterable)",
        "test": "assert heap_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif sale_amount > actual_cost:\n        return noprofit_noloss(actual_cost, sale_amount-actual_cost)\n    else:\n        return False",
        "test": "assert noprofit_noloss(100, 50) == False, \"no profit and loss not possible\"",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to Kelvin\n    t_k = t + 273.15\n    \n    # calculate the heat capacity at constant pressure and temperature\n    cp = 1005.0  # J/(kg K)\n    c_p = cp * (t_k/298.15)  # J/kg\n    \n    # calculate the heat capacity at constant volume and temperature\n    cv = 184.5  # J/(kg K)\n    c_v = cv * (t_k/273.15)  # J/kg\n    \n    # calculate the specific heat capacity of dry air\n    h_v = 1004.6  # J/(kg K)\n    h_s = 0.622  # J/(kg K)\n    \n    # calculate the wind speed\n    v_a = 16.67  # m/s\n    wind_speed = v_a * math.sqrt(t_k/298.15)  # m/s\n    \n    # calculate the air density\n    rho_air = 1.225  # kg/m^3\n    \n    # calculate the specific heat capacity of air\n    h_a = rho_air * h_v\n    \n    # calculate the heat transfer coefficient\n    k = 1.3  # W/(m K)\n    \n    # calculate the virtual temperature\n    T_v = c_p / c_v\n    \n    # calculate the latent heat of condensation\n    q_l = 22.4  # J/kg\n    \n    # calculate the sensible heat\n    q_s = k * (T_v - T_s)\n    \n    # calculate the specific humidity\n    q_s_v = q_s / (1 - math.exp(-q_l/(cp*T_v)))\n    \n    # calculate the heat index\n    T_hi = T_v - (0.0065 * q_s_v) + (0.0001 * T_v**2)\n    \n    # calculate the wind chill index\n    w_chill = round((T_hi - 32) / 1.8)\n    \n    return w_chill",
        "test": "assert wind_chill(5,25) == 5",
        "num_ids": 2233,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])",
        "test": "assert sample_nam(['john', 'jane','mary', 'john', 'tom']) == 15, \"The output of sample_nam(['john', 'jane','mary', 'john', 'tom']) should be 15.\"",
        "num_ids": 1014,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items",
        "test": "assert remove_parenthesis('') == ''",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    def nonagonal_helper(n, m):\n        \"\"\"\n        Helper function for is_nonagonal.\n        \"\"\"\n        if n == 1:\n            return m\n        else:\n            return nonagonal_helper(n - 1, m + 2 * m - 1)\n\n    return nonagonal_helper(n, 1)\n",
        "test": "assert is_nonagonal(1) == 1, \"is_nonagonal(1) should return 1\"",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Iterate over the words and check if there is a 'z' at the start and end of each word\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return True\n    # If no 'z' is found, return False\n    return False",
        "test": "assert text_match_wordz_middle('hello') == False",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[k-1-i] = input[k-1-i], input[i]\n    return input",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9], 7) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += tuple(test_dict.items())\n    return test_tup",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 4, 'b': 5}) == (1, 2, 3, 'a': 4, 'b': 5)",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables to keep track of the best path and the maximum average\n    best_path = None\n    max_avg = float('-inf')\n\n    # Create a 2D array to store the cost of each cell\n    cost_matrix = [[0] * len(cost[0]) for i in range(len(cost))]\n\n    # Calculate the cost of each cell\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i == 0 or j == 0:\n                cost_matrix[i][j] = cost[i][j]\n            else:\n                cost_matrix[i][j] = cost[i][j] + min(cost_matrix[i-1][j], cost_matrix[i][j-1])\n\n    # Find the maximum average of all paths\n    for i in range(len(cost_matrix)):\n        for j in range(len(cost_matrix[0])):\n            if cost_matrix[i][j] > max_avg and (i,j)!= (len(cost)-1,len(cost[0])-1):\n                max_avg = cost_matrix[i][j]\n                best_path = [(i,j)]\n                helper_function(cost_matrix, i, j, 0)\n\n    # Helper function to find the best path\n    def helper_function(cost_matrix, i, j, path_len):\n        if i == 0 or j == 0:\n            return\n        if (i,j) == (len(cost)-1,len(cost[0])-1):\n            global max_avg\n            if cost_matrix[i][j] > max_avg:\n                max_avg = cost_matrix[i][j]\n                best_path = path_len + [(i,j)]\n            return\n        helper_function(cost_matrix, i-1, j, path_len + [(i,j)])\n        helper_function(cost_matrix, i, j-1, path_len + [(i,j)])",
        "test": "assert maxAverageOfPath([[1],[2],[3]]) == 2",
        "num_ids": 2335,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students",
        "test": "assert filter_data({'Alice': (1.8, 85.5), 'Bob': (1.6, 75.2), 'Charlie': (1.9, 90.1), 'David': (1.7, 78.9), 'Eve': (1.6, 73.2)}, 1.7, 80.0) == {'Alice': (1.8, 85.5), 'Charlie': (1.9, 90.1)}",
        "num_ids": 1277,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 1, 1, 1, 1], [1, 1, 1, 1, 1]) == [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]",
        "num_ids": 966,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        power -= 1\n        base //= 10\n    return sum",
        "test": "assert power_base_sum(3, 2) == 9",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    result = []\n    for match in matches:\n        result.append(match.strip('\"'))\n    return result",
        "test": "assert extract_quotation('This is a \"test\" string.') == ['test']",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1] * test_tup[0])\n    return tuple(result)",
        "test": "assert multiply_elements((4, 5, 6, 7)) == (20, 30, 40, 54)",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]",
        "test": "assert sum_list([1,2,3], [4,5,6]) == [5,7,9]",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))",
        "test": "assert consecutive_duplicates([1, 1, 1, 1]) == [1]",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h",
        "test": "assert lateralsurface_cone(1, 2) == 6.283185307179586",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern to match the characters to be replaced\n    pattern = r'\\s+|,\\s|,|\\.|\\.'\n    # Use the re.sub() function to replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)",
        "test": "assert replace_specialchar('this is a test') == 'this:is:a:test'",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the index of the first element in the array greater than or equal to x\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            # Found a match, now check if it's the first occurrence\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                # Not the first occurrence, so move to the right\n                right = mid - 1\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 1106,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            temp = 1\n            for k in range(i, j):\n                temp *= arr[k]\n            res += temp\n    return res",
        "test": "assert sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 55",
        "num_ids": 1209,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # XORing the number with -1 will toggle all the bits except the first and last\n    return n ^ -1",
        "test": "assert set_middle_bits(7) == 5",
        "num_ids": 881,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the insertion point\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # If value is not found in list, return left insertion point\n    return left",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 7) == 3",
        "num_ids": 770,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('apple') == True",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(3) == 3 * 2 * 1, \"Failed for n=3\"",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    max_triangular = int(10**n - 1)\n    triangular_list = []\n    for i in range(max_triangular+1):\n        triangular_list.append(i)\n    min_triangular = triangular_list[0]\n    min_index = 0\n    for i in range(1, len(triangular_list)):\n        if triangular_list[i] < min_triangular:\n            min_triangular = triangular_list[i]\n            min_index = i\n    return min_index\n\nn = 5\nprint(\"Index of smallest triangular number with\", n, \"digits:\", find_Index(n))",
        "test": "assert find_Index(1) == 0",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj",
        "test": "assert tuple_to_dict(('apple', 1, 'banana', 2)) == {'apple': 1, 'banana': 2}",
        "num_ids": 822,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert all_Characters_Same('a') == True",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2 * math.sin(math.pi / 3)",
        "test": "assert area_tetrahedron(2) == 1.0, \"Incorrect area calculation\"",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3, 4, 5)) == False",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % i == 0 for digit in str(x)), range(startnum, endnum+1)))",
        "test": "assert divisible_by_digits(100, 1000) == [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2\n        return area",
        "test": "assert sector_area(3, 180) == math.pi * 3**2, \"The function should return pi * r^2 for angle = 180 degrees\"",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, p = len(X), len(Y), len(Z)\n    # create a 3D array to store lengths of LCS of all three sequences\n    L = [[[0] * (p+1) for j in range(n+1)] for i in range(m+1)]\n\n    # fill the 3D array using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    L[i][j][k] = L[i-1][j][k]\n                elif X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i][j-1][k]\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k])\n\n    # backtrack to find the actual LCS\n    i, j, k = m, n, p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif X[i-1] == Z[k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # return the LCS as a string\n    return ''.join(reversed(lcs))",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GXTXAYB\") == \"GTAB\"",
        "num_ids": 2235,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    pattern = re.compile(r'(?<![A-Z])[A-Z](?![A-Z])')\n    return''.join(pattern.split(string))",
        "test": "assert capital_words_spaces(\"The quick brown fox jumps over the Lazy Dog\") == \"The quick brown fox jumps over the Lazy Dog\"",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(int(num_str))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums",
        "test": "assert sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 926,
        "indeed": true
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for num in test_tup:\n        test_list.append(num)",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    \n    if arr[i] < arr[i//2]:\n        return False\n    \n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)//2)",
        "test": "assert check_min_heap_helper([5, 3, 1, 8, 10, 6, 7, 2, 4], 0) == True",
        "num_ids": 1515,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def min_k(test_list, K):\n    # Find the smallest k records from the list\n    min_k_records = sorted(test_list, key=lambda x: x[1])[:K]\n    # Return the minimum k records as a list\n    return min_k_records",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6)], 3) == (3, 4)",
        "num_ids": 1247,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Initialize an empty list to store the common elements\n    common = []\n    \n    # Loop through each index of the first list\n    for i in range(len(l1)):\n        # Check if the element at that index is present in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            # If it is, add it to the common list\n            common.append(l1[i])\n    \n    return common",
        "test": "assert extract_index_list([1,2,3],[1,2,3],[4,5,6]) == [] # case 2",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]",
        "test": "assert second_smallest([4, 3, 5, 2, 1]) == 2",
        "num_ids": 673,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"abbab\") == True, \"Error: text_match_zero_one should return True when the input string has an 'a' followed by one or more 'b's.\"",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n\n    return count",
        "test": "assert count_reverse_pairs(['hello', 'world']) == 0",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple in count_dict:\n                count_dict[sublist_tuple] += 1\n            else:\n                count_dict[sublist_tuple] = 1\n    return count_dict",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {('1', '2', '3', '4', '5'): 1, ('2', '3', '4', '5'): 1, ('3', '4', '5'): 1, ('4', '5'): 1, ('1', '2'): 1, ('2', '3'): 1, ('3', '4'): 1, ('4', '5'): 1, ('1', '2', '3'): 1, ('2', '3', '4'): 1, ('3', '4', '5'): 1, ('1', '2', '4'): 1, ('2', '3', '5'): 1, ('1', '3', '4'): 1, ('1', '4', '5'): 1, ('1', '2', '3', '4'): 1, ('1', '2', '3', '5'): 1, ('1', '2', '3', '4', '5'): 1}",
        "num_ids": 1195,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False",
        "test": "assert is_decimal('10') == True, '10 should be a decimal number with a precision of 2'",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    It returns True if the list contains only one distinct element, otherwise it returns False.\n    '''\n\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 3, 4, 5]) == True, \"The function should return True for the given list [1, 2, 3, 4, 5]\"",
        "num_ids": 832,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if monthnum3 in range(1, 13):\n        month_name = months[monthnum3 - 1]\n        if month_name in ['March', 'May', 'July', 'August', 'October', 'November']:\n            return True\n        elif month_name in ['April', 'June', 'September', 'November']:\n            return False\n        elif month_name in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n            return True\n        else:\n            return False\n    else:\n        print(\"Invalid month number.\")\n        return None",
        "test": "assert check_monthnumber_number(3) == True, \"3 is a leap year\"",
        "num_ids": 994,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    It uses the sorting algorithm to sort the array in ascending order and then finds\n    the difference between adjacent elements. If there are no adjacent elements, the\n    minimum difference is the difference between the last and the first elements.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the last and the first elements\n    min_diff = arr[-1] - arr[0]\n\n    # Iterate through the array and find the minimum difference\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n\n    # If there are no adjacent elements, the minimum difference is the difference between the last and the first elements\n    if min_diff == arr[-1] - arr[0]:\n        min_diff = arr[-1] - arr[0]\n\n    return min_diff",
        "test": "assert find_min_diff([1, 3, 5], 3) == 2",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr('12345') == 5",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number. \n    \"\"\"\n    polite_list = [1, 2]\n    for i in range(3, n+1):\n        if i%2 == 0:\n            polite_list.append(2*polite_list[-1]+1)\n        else:\n            polite_list.append(polite_list[-1]*2)\n    return polite_list[n-1]",
        "test": "assert is_polite(1) == 1, \"is_polite(1) should be 1\"",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 6) == 2",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))",
        "test": "assert Diff([1,2,3,4,5],[2,4,6,8,10]) == [1,3,5]",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize sum to 0\n    sum_of_power_4 = 0\n\n    # Loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate fourth power of the number and add to sum\n        sum_of_power_4 += i**4\n\n    # Return the sum of fourth power of odd natural numbers\n    return sum_of_power_4",
        "test": "assert odd_num_sum(10) == 550, \"The sum of fourth power of first 10 odd natural numbers is not correct!\"",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "test": "assert check_expression('a + b * c') == True, 'Incorrect check_expression function'",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)",
        "test": "assert remove_length(\"hello world python\", 7) == \"hello world python\"",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None",
        "test": "assert occurance_substring(\"hello world\", \"foo\") == None",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 775,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 3, 5, 7, 8]) == False",
        "num_ids": 674,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    prev_char = None\n    for char in test_str:\n        if char in vowels and char!= prev_char:\n            count += 1\n        prev_char = char\n    return count",
        "test": "assert count_vowels(\"\") == 0, \"Empty string should have no vowels\"",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the array\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    # Iterate through the unique elements and add their values to the sum\n    for element in unique_elements:\n        sum_non_repeated += element\n    # Return the sum of non-repeated elements\n    return sum_non_repeated",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))",
        "test": "assert pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 4, 4]) == [[1, 1], [2, 2], [3, 3, 3], [4, 4]]",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the count of unique lists\n    count = {}\n    # Iterate through the list\n    for sublist in list1:\n        # Convert the list to a tuple\n        subtuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if subtuple in count:\n            # If it is, increment the count by 1\n            count[subtuple] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count[subtuple] = 1\n    # Return the dictionary\n    return count",
        "test": "assert unique_sublists([1, 2, 3, 4, 5, 6, 7, 8, 9]) == {",
        "num_ids": 912,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = []\n    n = len(test_list)\n\n    # Sort the list\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][0] > test_list[j][0]:\n                test_list[i], test_list[j] = test_list[j], test_list[i]\n\n    # Generate all combinations\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                combs.append((test_list[i], test_list[j], test_list[k]))\n\n    return combs",
        "test": "assert find_combinations([[1,2],[3,4],[5,6]]) == [(1,2),(1,3),(1,4),(1,5),(1,6),(2,3),(2,4),(2,5),(2,6),(3,4),(3,5),(3,6),(4,5),(4,6),(5,6)]",
        "num_ids": 2207,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function returns the count of divisors of a given number n.\n    '''\n    divisors = []\n    i = 1\n    while i <= int(math.sqrt(n)):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n        i += 1\n    return len(divisors)",
        "test": "assert count_divisors(20) == 6, \"count_divisors(20) should be 6.\"",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1%2==1:\n                sum_odd += sum(arr[i:j+1])\n    return sum_odd",
        "test": "assert odd_length_sum([1, 3, 5, 7, 9]) == 10",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def rgb_to_hsv(r, g, b):\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    h = 0\n    s = 0\n\n    if cmax == cmin:\n        h = 0\n    else:\n        if r == cmax:\n            h = (g - b) / (cmax - cmin)\n        elif g == cmax:\n            h = 2 + (b - r) / (cmax - cmin)\n        else:\n            h = 4 + (r - g) / (cmax - cmin)\n\n        h = h * 60\n\n        if h < 0:\n            h += 360\n\n    s = (cmax - cmin) / cmax\n\n    v = cmax\n\n    return h, s, v",
        "test": "assert rgb_to_hsv(255, 0, 0) == (0.0, 1.0, 1.0)",
        "num_ids": 2134,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The product of the first even and odd numbers of the list.\n    \"\"\"\n    num_even = 0\n    num_odd = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            num_even += num\n        else:\n            num_odd += num\n\n    return num_even * num_odd\n",
        "test": "assert mul_even_odd([2, 4, 6, 8, 10]) == 0, \"The product of even and odd numbers should be 0.\"",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into individual elements\n    str_elements = test_str.split(\",\")\n    \n    # Convert each element to integer\n    int_elements = [int(elem) for elem in str_elements]\n    \n    # Convert integer list to tuple\n    result = tuple(int_elements)\n    \n    return result",
        "test": "assert tuple_str_int(('1', '2', '3')) == ((1, 2, 3),)",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 2) == 1",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\w*b{3}'\n    return re.search(pattern, text)\n",
        "test": "assert text_match_three(\"abaabaabaa\") == True, \"Incorrect match\"",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # Combine the tuple and the string\n    new_tuple = test_tuple + (test_str,)\n    # Return the new tuple\n    return new_tuple",
        "test": "assert new_tuple(['apple', 'banana', 'cherry'], 'test') == ('apple', 'banana', 'cherry', 'test')",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Initialize a variable to store the number of even numbers in each index\n    even_count = [0] * len(nums)\n\n    # Loop through the list and check if each even index contains even numbers\n    for i, num in enumerate(nums):\n        if i % 2 == 0:\n            # If the number is even, increment the even_count variable by 1\n            even_count[i // 2] += 1\n\n    # Loop through the even_count list to check if every even index contains even numbers\n    for count in even_count:\n        if count % 2!= 0:\n            return False\n\n    # If all even indices contain even numbers, return True\n    return True",
        "test": "assert even_position([1, 2, 3, 4, 5]) == False",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns a new tuple with all the nested tuples removed.\n    \"\"\"\n    def remove_nested_helper(nested_tup, result):\n        for sub_tup in nested_tup:\n            if isinstance(sub_tup, tuple):\n                remove_nested_helper(sub_tup, result)\n            else:\n                result.append(sub_tup)\n        return result\n    \n    result = []\n    remove_nested_helper(test_tup, result)\n    return tuple(result)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 556,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "test": "assert count_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    if arr[left - 1] == x:\n        return left - 1\n    else:\n        return -1",
        "test": "assert last([1,2,3,4,5],5) == 4",
        "num_ids": 976,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_starta_endb('a text ending in b') == 'a text ending in b'",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total",
        "test": "assert return_sum({'a':1, 'b':2, 'c':3}) == 6",
        "num_ids": 540,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total",
        "test": "assert _sum([1,2,3,4,5]) == 15, \"Incorrect sum of the array [1, 2, 3, 4, 5]\"",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Calculate the number of bits to shift\n    shift_bits = (32 - d) % 32\n\n    # Calculate the mask to get the desired bits\n    mask = ((1 << d) - 1) << shift_bits\n\n    # Calculate the rotated bits\n    rotated_bits = ((n & mask) << shift_bits) | ((n >> shift_bits) & ((1 << d) - 1))\n\n    return rotated_bits",
        "test": "assert left_rotate(0, 2) == 0, \"Left rotation of 0 by 2 bits is incorrect\"",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces(\"Hello World\") == \"HelloWorld\"",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count",
        "test": "assert test_three_equal(1,2,3) == 0, \"test_three_equal failed: 0!= 1\"",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # If the array is already sorted, there is no rotation required\n    if arr == sorted(arr):\n        return 0\n    # If the array is already reversed, there is no rotation required\n    if arr == arr[::-1]:\n        return 0\n    # If the array has two or more adjacent elements, there is no rotation required\n    if n > 2 and arr[1] == arr[n-2]:\n        return 0\n    # If the array has one element, there is no rotation required\n    if n == 1:\n        return 0\n    # If the array has only one rotation, return 1\n    if n == 2:\n        if arr[0] > arr[1]:\n            return 1\n        else:\n            return 0\n    # If the array has three or more elements, we need to check all possible rotations\n    count = 0\n    for i in range(n):\n        # We need to find the largest element smaller than the current element\n        j = i\n        while j < n-1 and arr[j] >= arr[j+1]:\n            j += 1\n        # If there are no such elements, it means the current element is already sorted\n        if j == n-1:\n            return count+1\n        # We need to find the smallest element greater than the current element\n        k = j\n        while k < n and arr[k] <= arr[k-1]:\n            k += 1\n        # If there are no such elements, it means the current element is already sorted\n        if k == n:\n            return count+1\n        # We have found two elements that can be swapped to sort the array\n        count += 1\n    # If we have not found any such rotations, it means the array is already sorted\n    return 0",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = math.sqrt(n)\n    square_sqrt_n = int(sqrt_n**2)\n    if square_sqrt_n == n:\n        return True\n    else:\n        return False",
        "test": "assert is_perfect_square(4) == True, \"4 is a perfect square\"",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([1, 2, 3, 4, 5]) == True",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_list = []\n    \n    # Loop through each list in the input list\n    for lst in lists:\n        # Initialize variables\n        current_sum = 0\n        \n        # Loop through each element in the list\n        for num in lst:\n            # Add the current element to the current_sum\n            current_sum += num\n            \n            # If the current_sum is greater than max_sum, update max_sum and max_list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lst\n                \n    # Return the list with the highest sum\n    return max_list",
        "test": "assert max_sum_list([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [[70, 80, 90]]",
        "num_ids": 1184,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    is_upper = False\n    \n    # Iterate over each character in the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If it is, increment the current run count and check if it's greater than the maximum run count\n            if current_run + 1 > max_run:\n                max_run = current_run + 1\n                current_run = 1\n            else:\n                current_run += 1\n        else:\n            # If it's not uppercase, reset the current run count\n            current_run = 0\n    \n    # Return the maximum run count\n    return max_run",
        "test": "assert max_run_uppercase(\"This is a test\") == 1",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 609,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K((4, 5, 6), 3) == False",
        "num_ids": 492,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 2, 3), (4, 5, 6)) == True, \"Incorrect result for (1, 2, 3) and (4, 5, 6)\"",
        "num_ids": 899,
        "indeed": false
    }
]