[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements",
        "test": "assert similar_elements( ('a', 'b'), ('a', 'b') ) == ('a', 'b')",
        "num_ids": 856,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(5) == False",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # convert the list to a heap of size n\n    hq.heapify(nums)\n    # extract the n largest elements from the heap and return them as a list in descending order\n    return [hq.heappop(nums) for _ in range(n)]",
        "test": "assert heap_queue_largest([1, 2, 3, 4, 5], 0) == []",
        "num_ids": 1317,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer x as input and returns a boolean value indicating whether\n    the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return False\n    elif x & (x-1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(5) == False, \"is_Power_Of_Two(5) is not False\"",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words",
        "test": "assert find_char_long('Hello') == ['Hello']",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 591,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_Rotations(str): \n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Create a list of tuples, where each tuple contains a character and its frequency\n    freq_list = [(char, freq[char]) for char in freq]\n    \n    # Sort the list by the frequency of each character in descending order\n    freq_list.sort(key=lambda x: x[1], reverse=True)\n    \n    # Initialize a counter for the number of rotations\n    count = 0\n    \n    # Iterate through the sorted list of tuples\n    for i in range(len(freq_list)):\n        # If the character at the current index has a frequency of 1, the string has already been rotated\n        if freq_list[i][1] == 1:\n            break\n        \n        # For each character with a frequency greater than 1, rotate the string and check if it's equal to the original string\n        for j in range(freq_list[i][1]):\n            temp = freq_list[i][0]\n            temp += 'a'\n            if temp == str:\n                break\n        else:\n            # If the rotated string is not equal to the original string, increment the counter for the number of rotations\n            count += 1\n    \n    # Return the minimum number of rotations required\n    return count",
        "test": "assert find_Rotations(\"abcde\") == 0",
        "num_ids": 1107,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def remove_Occ(s, ch): \n    # Remove the first occurrence of the character from the string\n    first_occ = s.find(ch)\n    if first_occ!= -1:\n        s = s[:first_occ] + s[first_occ+1:]\n    # Remove the last occurrence of the character from the string\n    last_occ = s.rfind(ch)\n    if last_occ!= -1:\n        s = s[:last_occ] + s[last_occ+1:]\n    return s",
        "test": "assert remove_Occ('hello', 'x') == 'hello'",
        "num_ids": 979,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(i+1, len(M[i])):\n            if M[i][j] < M[i][i]:\n                M[i][j], M[i][i] = M[i][i], M[i][j]\n                for k in range(len(M)):\n                    M[k][j], M[k][i] = M[k][i], M[k][j]\n    return M",
        "test": "assert sort_matrix([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 1468,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h\n    return V\n",
        "test": "assert find_Volume(1,2,3) == 6, \"The Volume of a triangular prism with sides of length 1, 2, and 3 is incorrect. It should be 6.\"",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"abc_def\") == True",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    for char in string:\n        if char in char_list:\n            char_list.remove(char)\n    result = \"\".join(char_list)\n    return result",
        "test": "assert str_to_list(\"a\") == \"\"",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each number in the array\n    freq = {}\n\n    # Iterate through each number in the array\n    for num in arraynums:\n        # If the number is already in the dictionary, increment its frequency\n        if num in freq:\n            freq[num] += 1\n        # If the number is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary to find whether any number has a frequency greater than 1\n    for num, freq in freq.items():\n        if freq > 1:\n            # If a number has a frequency greater than 1, return True\n            return True\n\n    # If no duplicate numbers are found, return False\n    return False",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 979,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0 and (x % 3 == 0 or x % 5 == 0):\n        return True\n    else:\n        return False\n",
        "test": "assert is_woodall(98) == False",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse < num:\n        return True\n    else:\n        return False",
        "test": "assert rev(1234) == False, \"Test failed for rev(1234)\"",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Create a set to store unique digits in the given list\n    digits_set = set(arr)\n    # Sort the set in descending order\n    digits_set = sorted(digits_set, reverse=True)\n    # Initialize the largest number as 0\n    largest_num = 0\n    # Initialize a variable to keep track of the current number formed\n    current_num = 0\n    # Loop through each digit in the sorted set\n    for digit in digits_set:\n        # Multiply the current number by 10 and add the digit to get the next number\n        next_num = current_num * 10 + digit\n        # Check if the next number is greater than the current largest number\n        if next_num > largest_num:\n            # Update the largest number if necessary\n            largest_num = next_num\n        # Update the current number with the next number\n        current_num = next_num\n    # Return the largest number\n    return largest_num",
        "test": "assert find_Max_Num([0, 0, 0, 0]) == 0",
        "num_ids": 1139,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n\n    # Check if both numbers are of the same type (integer or float)\n    if isinstance(x, int) and isinstance(y, int):\n        # Check if the sign of x and y are opposite\n        if (x * y) < 0:\n            return True\n        else:\n            return False\n    else:\n        raise TypeError('Both inputs must be integers')",
        "test": "assert opposite_Signs(1,2) == False, \"opposite_Signs function should return False for two positive integers.\"",
        "num_ids": 838,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"The value of n should be greater than or equal to 1.\"\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n - 1)) // 2 + 1",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    digit_sum = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        if i == n-1:\n            digit_sum[0] += 1\n        else:\n            digit_sum[s[i]] += 1\n            digit_sum[s[i+1]] -= 1\n        for j in range(i, n-i):\n            if digit_sum[s[j]] == j+1:\n                count += 1\n    return count",
        "test": "assert count_Substrings('12345') == 1",
        "num_ids": 1251,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    # initialize smallest variable to the first element of the list\n    smallest = xs[0]\n    # loop through the rest of the list\n    for x in xs[1:]:\n        # if the current element is smaller than the smallest so far, update the smallest\n        if x < smallest:\n            smallest = x\n    # return the smallest element\n    return smallest",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 845,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Initialize the maximum difference variable\n    max_diff = 0\n    \n    # Loop through each pair of tuples in the sorted list\n    for i in range(len(sorted_list) - 1):\n        # Calculate the difference between the second elements of the current pair and the next pair\n        diff = sorted_list[i+1][1] - sorted_list[i][1]\n        \n        # Update the maximum difference if the current difference is greater than the current maximum difference\n        max_diff = max(max_diff, diff)\n    \n    return max_diff",
        "test": "assert max_difference([(1, 2), (2, 4), (3, 6)]) == 2",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n",
        "test": "assert subject_marks([(75, 'Mathematics'), (80, 'English'), (90, 'Science'), (60, 'History'), (95, 'Physics')]) == [('Physics', 95), ('Mathematics', 75), ('Science', 80), ('English', 90), ('History', 60)]",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    def sum_list(flat_list):\n        if not flat_list:\n            return 0\n        return flat_list.pop() + sum_list(flat_list)\n\n    flat_list = flatten_list(data_list)\n    return sum_list(flat_list)",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 841,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([-1, -2, -3, -4, -5]) == 0",
        "num_ids": 655,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2*(bell_number(n-1) + bell_number(n-2))",
        "test": "assert bell_number(0) == 1",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    \n    # Check if all the elements in the array are the same\n    if A[0] == A[-1]: \n        return True\n    \n    # Check if the array is monotonic in terms of increasing or decreasing\n    if A[0] <= A[1] and A[-1] >= A[-2]: \n        return True\n    \n    return False",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "test": "assert not is_sublist([1, 2, 3], [1, 2, 4])",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True",
        "test": "assert find_equal_tuple([(1, 2), (3, 4), (5, 6)]) == True",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums",
        "test": "assert comb_sort([]) == []",
        "num_ids": 1190,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check for even number of digits in n\n    if len(str(n)) % 2 == 0:\n        return False\n    # check for all digits in n are in range [0, 9]\n    for digit in str(n):\n        if int(digit) < 0 or int(digit) > 9:\n            return False\n    # check if n can be represented as the difference of two squares\n    a, b = 0, n\n    while b!= 0:\n        a, b = b, a % b\n    return a == 0",
        "test": "assert dif_Square(27) == False",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    count = 0\n    for i in range(n-2):\n        if patterns[i] == patterns[i+2]:\n            count += 1\n            if count == 2:\n                return True\n        else:\n            count = 0\n    return False",
        "test": "assert is_samepatterns([\"red\", \"green\", \"blue\"], [[\"red\", \"green\", \"blue\"], [\"green\", \"red\", \"blue\"], [\"blue\", \"green\", \"red\"]]) == False",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple_ in test_list:\n        if all(num % K == 0 for num in tuple_):\n            result.append(tuple_)\n    return result",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == []",
        "num_ids": 1331,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(11) == True, \"Function is not working correctly.\"",
        "num_ids": 612,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # Split the string into a list of words\n    for word in words:\n        if len(word) % 2 == 1: # Check if the length of the word is odd\n            return True\n    return False",
        "test": "assert word_len('hello') == True, \"word_len('hello') should return True\"",
        "num_ids": 651,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (3 * n - 1) / 2",
        "test": "assert tetrahedral_number(0) == 0",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    V = (4/3)*pi*r**3\n    return V",
        "test": "assert volume_sphere(1) == 4/3*math.pi*1**3, \"volume_sphere(1) should be 4/3*pi*r^3\"",
        "num_ids": 861,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def get_Char(strr):\n    # initialize an empty list to store ASCII values of characters\n    ASCII_val = []\n\n    # loop through each character in the string\n    for char in strr:\n        # convert the character to its ASCII value\n        ASCII_val.append(ord(char))\n\n    # calculate the sum of the ASCII values\n    sum_val = sum(ASCII_val)\n\n    # calculate the remainder of the sum divided by 26\n    remainder = sum_val % 26\n\n    # convert the remainder to the corresponding character\n    char = chr(65 + remainder)\n\n    # return the character\n    return char",
        "test": "assert get_Char(\"\") == \"A\"",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n\n    # initialize variables\n    i = 1\n    num = 1\n\n    # loop until the nth number is found\n    while i < n:\n        # check if the current number is odd or even\n        if num % 2 == 0:\n            num += 2  # add 2 to even numbers\n        else:\n            num += 1  # add 1 to odd numbers\n\n        # update the counter\n        i += 1\n\n    # return the nth number in the sequence\n    return num",
        "test": "assert sequence(1) == 1",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)",
        "test": "assert surfacearea_sphere(2) == 4 * math.pi * (2**2), \"Surface area of sphere with radius 2 is not correct.\"",
        "num_ids": 744,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function calculates the nth centered hexagonal number.\n    \"\"\"\n    # define the values of n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 14\n    elif n == 5:\n        return 42\n    elif n == 6:\n        return 132\n    elif n == 7:\n        return 429\n    elif n == 8:\n        return 1377\n    elif n == 9:\n        return 4862\n    elif n == 10:\n        return 16796\n    elif n == 11:\n        return 62049\n    elif n == 12:\n        return 220030\n    elif n == 13:\n        return 777771\n    elif n == 14:\n        return 2952385\n    elif n == 15:\n        return 10905143\n    elif n == 16:\n        return 40329177\n    elif n == 17:\n        return 135912499\n    elif n == 18:\n        return 475912324\n    elif n == 19:\n        return 1638400000\n    elif n == 20:\n        return 6146799997\n    else:\n        # calculate the centered hexagonal number using a loop\n        num = 1\n        for i in range(2, n+1):\n            num += (i-1) * i\n        return num // 2",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 1271,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n\n    Parameters:\n        dict1: A dictionary.\n        dict2: A dictionary.\n        dict3: A dictionary.\n\n    Returns:\n        A single dictionary containing all the key-value pairs from the three input dictionaries.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict",
        "test": "assert merge_dictionaries_three(ct.OrderedDict({'a':1,'b':2,'c':3}), ct.OrderedDict({'d':4,'e':5,'f':6}), ct.OrderedDict({'g':7,'h':8,'i':9})) == {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9}",
        "num_ids": 1115,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of each element in the list.\n    '''\n    freq_dict = collections.defaultdict(int) # using defaultdict to create a dictionary with initial value as 0\n    \n    for elem in lst:\n        freq_dict[elem] += 1\n    \n    return freq_dict",
        "test": "assert freq_count(['a', 'b', 'c', 'd', 'e']) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}",
        "num_ids": 922,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    closest_num = float('inf')\n    for i in range(1, N):\n        if abs(N-i) < closest_num:\n            min_num = i\n            closest_num = abs(N-i)\n    return min_num",
        "test": "assert closest_num(10) == 9, \"closest_num(10) should return 9\"",
        "num_ids": 831,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list.\n    \"\"\"\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "test": "assert len_log(['apple', 'banana', 'orange', 'grape', 'kiwi']) == 6",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def find_substring(lst, sub_str):\n    \"\"\"\n    This function takes a list of string values and a substring as input. It checks if the substring is present as a substring in any of the strings in the list.\n    \"\"\"\n    for string in lst:\n        if sub_str in string:\n            return True\n    return False",
        "test": "assert find_substring(['apple', 'banana', 'cherry', 'date', 'fig'], 'cherry') == True",
        "num_ids": 869,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_undulating(n): \n    '''\n    This function checks whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    else:\n        return True",
        "test": "assert is_undulating(0) == False",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b",
        "test": "assert power(2, 3) == 8, \"2^3 should be 8\"",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return min_index",
        "test": "assert index_minimum([(1, 3), (2, 1), (5, 2)]) == 1",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_len:  \n            min_len = len(sublist)  \n    return min_len",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6]]) == 3",
        "num_ids": 917,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(10) == 4",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict",
        "test": "assert frequency_lists([['a', 'b', 'c'], ['d', 'e', 'f']]) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}",
        "num_ids": 1545,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "test": "assert multiply_num([1]) == 1",
        "num_ids": 646,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    elif n < 0:\n        return 'Not supported for negative numbers'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num > 10**5:\n        raise ValueError(\"Input number is too large.\")\n\n    next_num = num + 1\n    while True:\n        if is_palindrome(next_num):\n            return next_num\n        next_num += 1",
        "test": "assert next_smallest_palindrome(1) == 2",
        "num_ids": 1287,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return None\n    \n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 5) == 5, \"The kth element should be 5.\"",
        "num_ids": 1193,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def snake_to_camel(word):\n    # convert snake case to camel case\n    words = word.split('_')\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word",
        "test": "assert snake_to_camel(\"apple_pie\") == \"applePie\"",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the value of a(n, m)\n    a = (n + 1) * (m + 1) // 2\n\n    # Return the value of a(n, m)\n    return a",
        "test": "assert eulerian_num(0, 1) == 1, \"Incorrect result for eulerian_num(0, 1)\"",
        "num_ids": 1102,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "test": "assert sort_sublists([[1, 2, 3], [4, 5, 6], [\"a\", \"b\", \"c\"]]) == [[1, 2, 3], [4, 5, 6], [\"a\", \"b\", \"c\"]]",
        "num_ids": 1416,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num is True:\n            count += 1\n    return count",
        "test": "assert count([True, False, True, True, False]) == 3",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup += (test_list[i],)\n    return test_tup",
        "test": "assert add_lists([], ()) == ()",
        "num_ids": 826,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Step 1: Merge the three sorted lists into a single sorted list\n    merged_list = sorted(num1 + num2 + num3)\n\n    # Step 2: Remove duplicates from the merged list\n    unique_list = []\n    for num in merged_list:\n        if num not in unique_list:\n            unique_list.append(num)\n\n    # Step 3: Return the unique list\n    return unique_list",
        "test": "assert merge_sorted_list([], [], []) == []",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a Python function to find the number of odd numbers in a binary string after rotating it the given number of times.\n\n    :param s: binary string\n    :type s: str\n    :param n: number of rotations\n    :type n: int\n    :return: number of odd numbers in the rotated binary string\n    :rtype: int\n    \"\"\"\n    \n    # convert binary string to list of integers\n    s = list(map(int, list(s)))\n    \n    # rotate the list by n elements\n    for i in range(n):\n        s = s[-1:] + s[:-1]\n        \n    # count the number of odd numbers\n    count = 0\n    for i in s:\n        if i % 2 == 1:\n            count += 1\n    \n    return count",
        "test": "assert odd_Equivalent('1001', 1) == 2",
        "num_ids": 2310,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set(nestedlist[0])\n    set2 = set(nestedlist[1])\n    intersection = set1.intersection(set2)\n    return list(intersection)",
        "test": "assert common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9]]) == []",
        "num_ids": 1530,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"-123\") == True, \"check_integer('-123') should return True\"",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if i:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)",
        "test": "assert tuple_to_int((1, 2, 3, 4, 5)) == 15, \"tuple_to_int failed\"",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                item = float(item)",
        "test": "assert list_to_float([[1, 2], [3.0, 4.0], [5], [\"a\"], [6.5]]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.5]",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    # Iterate through the dictionary to find the element that appears only once\n    for key in freq:\n        if freq[key] == 1:\n            return key\n    \n    # If no element appears only once, return None\n    return None",
        "test": "assert search([5, 5, 5, 5, 5]) == None",
        "num_ids": 1384,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf') # initialize max_product to negative infinity\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1]) # calculate product of tuples\n            if product > max_product: # update max_product if current product is greater than previous max\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(19, 20), (21, 22), (23, 24)]) == 224",
        "num_ids": 1429,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_amicable_numbers(limit):\n    sum = 0\n    for i in range(1, limit + 1):\n        if is_prime(i) and is_prime(sum_of_primes(i)):\n            sum += i\n    return sum\n\ndef sum_of_primes(n):\n    sum = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            sum += i\n    return sum",
        "test": "assert amicable_numbers_sum(1000) == 41798, \"The sum of amicable numbers from 1 to 1000 is incorrect.\"",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle",
        "test": "assert angle_complex(1, 0) == cmath.phase(1 + 0j)",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    prev_count = 0\n    curr_count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_count += 1\n        else:\n            curr_count = 1\n        diff = curr_count - prev_count\n        if diff > max_diff:\n            max_diff = diff\n        prev_count = curr_count\n    return max_diff",
        "test": "assert find_length(\"010101\") == 1, \"find_length('010101') should return 1.\"",
        "num_ids": 2030,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # calculate the GCD of the two numbers\n    gcd = gcd(a, b)\n\n    # calculate the sum of all common divisors of the two numbers\n    divisors_sum = sum(range(gcd+1))\n\n    # calculate the sum of the common divisors of the two numbers\n    return (a * b) // gcd + divisors_sum - a - b\n\ndef gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor of two numbers using the Euclidean algorithm.\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n\n    return a",
        "test": "assert sum(12,18) == 12, 'The sum of common divisors of 12 and 18 is not correct'",
        "num_ids": 960,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(3, 4) == 12",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "test": "assert long_words(10, \"the quick brown fox jumps over the lazy dog\") == []",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    diagonal_sum = 0\n    antidiagonal_sum = 0\n    \n    # Check rows\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                diagonal_sum += my_matrix[i][j]\n            elif i == rows - j - 1:\n                antidiagonal_sum += my_matrix[i][j]\n    \n    # Check columns\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                diagonal_sum -= my_matrix[i][j]\n            elif i == rows - j - 1:\n                antidiagonal_sum -= my_matrix[i][j]\n    \n    # Check main diagonal\n    for i in range(rows):\n        diagonal_sum -= my_matrix[i][i]\n        \n    # Check anti-diagonal\n    for i in range(rows):\n        antidiagonal_sum -= my_matrix[i][rows - i - 1]\n    \n    # Check if sums are equal\n    if diagonal_sum == antidiagonal_sum:\n        return True\n    else:\n        return False",
        "test": "assert magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 60]]) == False",
        "num_ids": 1966,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with the maximum frequency.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item",
        "test": "assert max_occurrences([1, 2, 3, 2, 1, 2, 3, 4, 5]) == 2",
        "num_ids": 2243,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = list(vowels)\n    str_list = list(str1)\n\n    for i in range(len(str_list)):\n        if str_list[i] in vowels_list:\n            str_list.insert(i, str_list.pop(i))\n\n    return \"\".join(str_list)\n",
        "test": "assert reverse_vowels('racecar') == 'racecar'",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string(\"hello\") == \"hello\"",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum",
        "test": "assert sum_negativenum([0, 0, 0, 0, 0]) == 0, \"sum_negativenum([0, 0, 0, 0, 0]) should return 0\"",
        "num_ids": 831,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 28\n    elif n == 5:\n        return 45\n    elif n == 6:\n        return 66\n    elif n == 7:\n        return 91\n    elif n == 8:\n        return 120\n    elif n == 9:\n        return 153\n    elif n == 10:\n        return 190\n    else:\n        return -1",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 705,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the input array to an array of bytes\n    nums_bytes = array('B', nums)\n\n    # Count the number of zeroes and non-zeroes in the array\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums_bytes:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n\n    # Return the ratio\n    return ratio",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0.0, \"The zero_count function should return 0.0.\"",
        "num_ids": 1639,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0: \n        if n & 1 == 1: \n            count += 1\n            if count > 32: \n                return False\n            n >>= 1\n        else: \n            n >>= 1\n    return True",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 1459,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r  # pi is a mathematical constant, so we can use it as a float\n    print(\"The circumference of the circle is:\", circumference)",
        "test": "assert circle_circumference(4) == 12.56637061435917, \"The function circle_circumference does not return the correct value for r = 4.\"",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    # Initialize an empty set to hold the flattened numbers\n    flattened_set = set()\n\n    # Iterate through each item in the list\n    for item in test_list:\n        # If the item is a list, recursively call the function on that list\n        if isinstance(item, list):\n            flattened_set |= extract_singly(item)\n        # If the item is a number, add it to the set\n        elif isinstance(item, (int, float)):\n            flattened_set.add(item)\n\n    # Return the flattened set\n    return flattened_set",
        "test": "assert extract_singly([[1,2],[3,4]]) == {1, 2, 3, 4}",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Pancake Sort algorithm.\n\n    Args:\n        nums (list): The list of elements to be sorted.\n\n    Returns:\n        list: The sorted list of elements.\n    \"\"\"\n    n = len(nums)\n    # start from the largest element\n    for i in range(n - 1, 0, -1):\n        # find the index of the largest element in the range [0, i]\n        max_idx = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # swap the largest element with the element at index i\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 2083,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 5]) == 0",
        "num_ids": 1167,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "test": "assert find_lists(()) == 0",
        "num_ids": 777,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = float('-inf')\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n            \n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 959,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Define a function to check if a linear equation has a solution\n    def has_solution(a, b, c):\n        discriminant = b**2 - 4*a*c\n        if discriminant > 0:\n            x1 = (-b + discriminant**0.5)/(2*a)\n            x2 = (-b - discriminant**0.5)/(2*a)\n            return True, x1, x2\n        elif discriminant == 0:\n            x1 = -b/(2*a)\n            return True, x1\n        else:\n            return False, None\n\n    # Check if the given equation has a solution\n    is_solvable, x1, x2 = has_solution(a, b, n)\n    if not is_solvable:\n        return None\n\n    # Return the solution\n    return (x1, x2)",
        "test": "assert find_solution(2, 1, 7) == (3, 2)",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create an empty list to store the remaining elements in list1\n    remaining_list = []\n\n    # loop through each element in list1\n    for element in list1:\n        # if the element is not present in list2, add it to the remaining list\n        if element not in list2:\n            remaining_list.append(element)\n\n    # return the remaining list\n    return remaining_list",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n // 2 + 1):\n        s += (n - 2 * i)\n    return s",
        "test": "assert sum_series(0) == 0",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon\n    area = (s * l) / (2 * tan(pi / l))\n    return area",
        "test": "assert area_polygon(3, 4) == 20.488178921307503",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div1 = 0\n    div2 = 0\n    \n    # Calculate the sum of the divisors of n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div1 += i\n        if i!= n/i:\n            div2 += i\n            \n    # Check if the sum of the divisors is the same\n    if div1 + div2 == n:\n        return True\n    else:\n        return False",
        "test": "assert div_sum(200) == False, \"div_sum(200) should return False\"",
        "num_ids": 1025,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char.lower() in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count",
        "test": "assert count_char_position(\"abcdefghijklmnopqrstuvwxyz\") == 26, \"count_char_position should return 26 for input string 'abcdefghijklmnopqrstuvwxyz'\"",
        "num_ids": 1334,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([2, 4, 6, 8, 10]) == 0",
        "num_ids": 1256,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2**((n-1).bit_length())",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5], 3) == 1, 'The function should return 1'",
        "num_ids": 895,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 5) == 15",
        "num_ids": 1028,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n",
        "test": "assert perimeter_pentagon(10) == 50, \"Expected: 50, Got: {}\".format(perimeter_pentagon(10))",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def count_occurance(s):\n    count = 0\n    while'std' in s:\n        count += s.count('std')\n        s = s.replace('std', '')\n    return count",
        "test": "assert count_occurance('hello world') == 0",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for element in test_tuple:\n        data_types.append(type(element))\n    \n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert check_type(('a', 'b', 'c', 'd', 'e')) == True",
        "num_ids": 967,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_majority(arr, n, x):\n    # Initialize variables to keep track of the count and count of x\n    count = 0\n    count_x = 0\n    \n    # Iterate through the array, starting from the second element\n    for i in range(1, n):\n        # If the current element is equal to x, increment the count of x\n        if arr[i] == x:\n            count_x += 1\n        \n        # If the count of x reaches n/2, return True because x is the majority element\n        if count_x == n//2:\n            return True\n        \n        # If the count of x reaches the total count of x, reset the count of x to 0\n        if i == n-1:\n            count_x = 0\n    \n    # If the loop completes without finding x as the majority element, return False\n    return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 6) == False",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def odd_values_string(string):\n    odd_string = \"\"\n    for i, char in enumerate(string):\n        if i % 2!= 0:\n            odd_string += char\n    return odd_string",
        "test": "assert odd_values_string(\"apple\") == \"pl\"",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(2,3,4) == 2, \"Incorrect output for min_of_three(2,3,4)\"",
        "num_ids": 949,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three parameters n, l, and r which are integers and represent the number, start and end range of the bits.\n    The function returns True if all the bits are set in the given range else False.\n    \"\"\"\n\n    # Initialize a variable to store the bitwise AND result of n with all the bits in the range from l to r\n    bitwise_and_result = n & (2 ** (r + 1) - 1)\n\n    # If the bitwise AND result is equal to n, it means all the bits are set in the given range, so return True\n    if bitwise_and_result == n:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(0,0,0) == True",
        "num_ids": 1380,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    positive = []\n    negative = []\n    for i in range(n):\n        if arr[i] >= 0:\n            positive.append(arr[i])\n        else:\n            negative.append(arr[i])\n    for i in range(n):\n        if positive and negative:\n            arr[i] = negative.pop(0)\n        elif positive:\n            arr[i] = positive.pop(0)\n        elif negative:\n            arr[i] = negative.pop(0)\n    return arr",
        "test": "assert re_arrange_array([-1, -2, -3, -4, -5], 5) == [-1, -2, -3, -4, -5]",
        "num_ids": 1694,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def replace_blank(str1,char):\n    return str1.replace(\" \",char)",
        "test": "assert replace_blank(\"hello world\",\"-\") == \"hello-world\"",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, lst)",
        "test": "assert larg_nnum([3,2,1,5,6,4], 1) == [6]",
        "num_ids": 1046,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*r*h + 2*h*r\n    print(\"The lateral surface area of a cylinder is:\", area)",
        "test": "assert lateralsuface_cylinder(4,8) == 2*3.141592653589793",
        "num_ids": 1993,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert volume_cube(3) == 27, \"The volume of a cube with side length 3 should be 27.\"",
        "num_ids": 696,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(16):\n        if n & (1 << i):\n            n |= (1 << i)\n    return n",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Convert the Counter object to a dictionary\n    result = dict(counter)\n    return result",
        "test": "assert check_occurences([(1,2), (2,3), (3,4), (4,5)]) == { (1, 2): 1, (2, 3): 1, (3, 4): 1, (4, 5): 1 }",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(1, m+1):\n        if i >= 2*n:\n            total_sequences += 1\n    return total_sequences",
        "test": "assert get_total_number_of_sequences(5,3) == 15",
        "num_ids": 1048,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2",
        "test": "assert replace_list([1,2,3,4], []) == [1,2,3,4]",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"hello\") == 5",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    \n    sqrt_N = int(math.sqrt(N))\n    if sqrt_N*sqrt_N == N:\n        return sqrt_N*sqrt_N + 1\n    \n    while sqrt_N*sqrt_N <= N:\n        sqrt_N += 1\n    \n    return sqrt_N*sqrt_N",
        "test": "assert next_Perfect_Square(1) == 1",
        "num_ids": 1135,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables to store the maximum sum and the maximum increasing subsequence sum\n    max_sum = arr[0]\n    max_increasing_sum = arr[0]\n\n    # Loop through the array, checking for increasing and decreasing subsequences\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]: # Check if the current element is greater than the previous element\n            if arr[i] > max_increasing_sum: # Check if the current element is greater than the maximum increasing subsequence sum\n                max_increasing_sum = arr[i] # Update the maximum increasing subsequence sum\n        elif arr[i] < arr[i-1]: # Check if the current element is less than the previous element\n            if arr[i] + max_increasing_sum > max_sum: # Check if adding the current element and the maximum increasing subsequence sum is greater than the maximum sum\n                max_sum = arr[i] + max_increasing_sum # Update the maximum sum\n\n    return max_sum",
        "test": "assert max_sum([1, 1, 1, 1, 1]) == 1",
        "num_ids": 1783,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(guess - new_guess) < 0.00001:\n            return new_guess\n        guess = new_guess",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 1004,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D array to store the length of the longest palindromic subsequence ending at each position in the string\n    lps_table = [[0] * n for _ in range(n)]\n\n    # base case: all characters are palindromes\n    for i in range(n):\n        lps_table[i][i] = 1\n\n    # fill in the LPS table\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i + 1][j - 1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i + 1][j], lps_table[i][j - 1])\n\n    return lps_table[0][n - 1]",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 1844,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return 'Invalid input. Please enter a positive integer.'\n    elif n == 1:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n):\n            sum += 1/i\n        return sum",
        "test": "assert harmonic_sum(1) == 0",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n\n    Args:\n    array_nums1: list of integers.\n    array_nums2: list of integers.\n\n    Returns:\n    list of integers: A list of integers that are common to both arrays.\n    \"\"\"\n\n    # Convert arrays to sets to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find intersection\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert intersection to list and return\n    return list(intersection)",
        "test": "assert intersection_array([1,2,3], [2,3,4]) == [2,3]",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 2, 1), 4) == 0",
        "num_ids": 777,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + list",
        "test": "assert insert_element([1,2,3,4,5],0) == [0,1,2,3,4,5]",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        polar = cmath.polar(number)\n        \n        # Extract the polar angle and magnitude\n        angle = polar[0]\n        magnitude = polar[1]\n        \n        # Create a dictionary with the angle and magnitude\n        polar_dict = {'angle': angle,'magnitude': magnitude}\n        \n        # Append the dictionary to the result list\n        result.append(polar_dict)\n    return result",
        "test": "assert convert([(1+1j), (3+4j)]) == [(1+1j, 2+2j), (3+4j, 4+4j)]",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([]) == 0",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        combination = tuple(l[i:i+n])\n        result.append(combination)\n    return result",
        "test": "assert combinations_colors([1, 2, 3], 4) == [], \"Expected: []\"",
        "num_ids": 1106,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # initialize a variable to keep track of the number of prime numbers\n    count = 0\n\n    # loop through all numbers from 2 to n\n    for i in range(2, n):\n\n        # check if i is a prime number\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        # if i is prime, increment the count\n        if is_prime:\n            count += 1\n\n    return count",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def swap_numbers(a, b):\n    return b, a",
        "test": "assert swap_numbers(3,7) == (7,3)",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2",
        "test": "assert maximize_elements((1, 2, 3), (3, 2, 1)) == (3, 2, 1)",
        "num_ids": 973,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    prime_num = 2\n    count = 0\n\n    # Loop until n prime numbers are found\n    while count < n:\n        # Check if current prime number is prime\n        is_prime = True\n        for i in range(2, int(prime_num**0.5)+1):\n            if prime_num % i == 0:\n                is_prime = False\n                break\n        # If prime, increment count and move on to next number\n        if is_prime:\n            count += 1\n            prime_num += 1\n        # If not prime, increment current prime number and move on to next number\n        else:\n            prime_num += 1\n\n    # Return the nth prime number\n    return prime_num - 1",
        "test": "assert newman_prime(3) == 5",
        "num_ids": 1840,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return None\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            print(\"Error: The divisor cannot be zero.\")\n            return None\n        try:\n            result = test_tup1[i] / test_tup2[i]\n            result_tup += (result,)\n        except:\n            print(\"Error: An error occurred while performing the division.\")\n            return None\n    return result_tup",
        "test": "assert division_elements((2,4), (3,5)) == ((1, 0.6), (1.5, 0.9))",
        "num_ids": 1303,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # first part of the list\n    first_part = list1[:L]\n    \n    # second part of the list\n    second_part = list1[L:]\n    \n    # return the two parts as a tuple\n    return (first_part, second_part)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 1275,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert human age to dog years\n    dog_years = 7 * h_age\n    # Return the calculated dog years\n    return dog_years",
        "test": "assert dog_age(10) == 15, \"The age of a 10-year-old dog should be 15 years.\"",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Use a for loop to split the list into n-sized chunks\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]",
        "num_ids": 1534,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l",
        "test": "assert lateralsurface_cube(1) == 6, \"lateral surface area of a cube with side length 1 is not 6\"",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n\n    sum_squares = 0\n    current_num = 1\n    count = 0\n\n    while count < n:\n        if current_num % 2 == 1:\n            sum_squares += current_num ** 2\n            count += 1\n        current_num += 1\n\n    return sum_squares",
        "test": "assert square_Sum(1) == 1, \"Expected 1, got {}\".format(square_Sum(1))",
        "num_ids": 839,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize variables\n    prev_star = 0\n    star_num = 1\n\n    # calculate the nth star number\n    for i in range(n):\n        # update the star number\n        star_num = prev_star + star_num\n        # update the previous star number\n        prev_star = star_num - 1\n\n    # return the nth star number\n    return star_num",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    return ascii_val\n",
        "test": "assert ascii_value('A') == 65",
        "num_ids": 533,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0, \"sum_even_and_even_index([1, 3, 5, 7, 9]) should return 0\"",
        "num_ids": 1153,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum",
        "test": "assert even_Power_Sum(2) == 2",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple_item[1] for tuple_item in test_list[::-1]]",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [6, 4, 2]",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n    \n    # Create a new tuple with the subtraction of the elements\n    new_tup = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n    \n    return new_tup",
        "test": "assert substract_elements((1, 2, 3), (1, 2, 3)) == (0, 0, 0)",
        "num_ids": 1260,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize variables\n    sum_even = 0\n    numerator = 1\n    denominator = 1\n\n    # Loop through all even indices\n    for i in range(2, n+1, 2):\n        # Calculate the numerator and denominator for the i-th even index binomial coefficient\n        numerator *= i\n        denominator *= n - i\n\n        # Add the even index binomial coefficient to the sum\n        sum_even += numerator / denominator\n\n    return sum_even",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1899,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r * r * h / 3",
        "test": "assert volume_cylinder(0,5) == 0, \"volume_cylinder(0,5) is incorrect\"",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}",
        "test": "assert dict_filter({'a':5, 'b':10, 'c':15}, 10) == {'b':10, 'c':15}",
        "num_ids": 770,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count",
        "test": "assert count_first_elements((1, 2, 3, 4, 5)) == 1",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    num = 1\n    for i in range(2, n+1):\n        num += (i * (i+1))\n    return num",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 917,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 4) == (True, 3)",
        "num_ids": 983,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if all the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1], [1]) == [0]",
        "num_ids": 1065,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def validate(n):\n    # split the integer into digits\n    digits = [int(d) for d in str(n)]\n    \n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digits:\n        freq = digits.count(digit)\n        if freq > digit:\n            return False\n    \n    return True",
        "test": "assert validate(12345) == True, \"Incorrect output\"",
        "num_ids": 864,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True",
        "test": "assert check_element([1, 2, 3], 2) == False",
        "num_ids": 729,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[^b]*b{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three('abc') == False, \"text_match_two_three failed for the input 'abc'\"",
        "num_ids": 1760,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    max_sum_repeated = float('-inf')\n\n    # Iterate through the array\n    for i in range(n):\n        # Update the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # Check if the current sum is greater than the maximum sum repeated so far\n        if current_sum > max_sum_repeated:\n            max_sum_repeated = current_sum\n\n        # If the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    # Calculate and return the result\n    return max_sum_repeated",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 2) == 15, \"The result is incorrect.\"",
        "num_ids": 1342,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list",
        "test": "assert max_length([[1,2,3],[4,5,6],[7,8,9]]) == [1,2,3]",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # initialize the count of ways to 0\n    count = 0\n\n    # loop through all possible arrangements of k colors\n    for i in range(2**k):\n\n        # convert the binary number to a list of colors\n        colors = [0]*k\n        for j in range(k):\n            if i & (1<<j):\n                colors[j] = 1\n\n        # check if the number of adjacent colors is at most 2\n        if colors.count(colors[1:]) <= 2:\n            count += 1\n\n    # return the count of ways\n    return count",
        "test": "assert count_no_of_ways(5, 3) == 8",
        "num_ids": 1490,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient",
        "test": "assert find(10,5) == 2",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = (w**2 + h**2)**0.5\n    return round(c, 2)",
        "test": "assert otherside_rightangle(3,4) == 5.0, \"Incorrect result for base 3 and height 4\"",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # get the maximum value in the list\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n\n    Args:\n    number: an integer\n\n    Returns:\n    sum_div: an integer representing the sum of all divisors of the input number\n    \"\"\"\n    # Initialize the sum of divisors to zero\n    sum_div = 0\n\n    # Loop through all numbers from 1 to the square root of the input number\n    for i in range(1, int(number ** 0.5) + 1):\n        # Check if the input number is divisible by the current number\n        if number % i == 0:\n            # If it is, add it to the sum of divisors\n            sum_div += i\n\n    # Return the sum of divisors\n    return sum_div",
        "test": "assert sum_div(12) == 36 # The sum of all divisors of 12 is 36.",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n\n    # sorting the array in ascending order\n    arr = sorted(arr)\n\n    # initializing variables for counting inversions\n    i = 1\n    inv_count = 0\n\n    # traversing the sorted array and counting inversions\n    for j in range(1, len(arr)):\n        if arr[j] < arr[i - 1]:\n            inv_count += i - 1\n            i = j\n\n    return inv_count",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0, \"get_Inv_Count([1, 2, 3, 4, 5]) == 0\"",
        "num_ids": 1762,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert flatten_list([[1, 2], 3, [4, [5, 6]]]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(float)\n    for item in stdata:\n        max_dict[item[0]] += item[1]\n    max_agg = max(max_dict.values())\n    return max_agg",
        "test": "assert max_aggregate([(1,2), (3,4), (5,6)]) == 6",
        "num_ids": 1197,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        if i % 2 == 0:\n            binary_seq = bin(i)[2:].zfill(n)\n            if int(binary_seq[:n]) == int(binary_seq[-n:]):\n                count += 1\n    return count",
        "test": "assert count_binary_seq(2) == 2, \"count_binary_seq(2) should return 2\"",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0",
        "test": "assert dict_depth({'a': 1}) == 1",
        "num_ids": 736,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Calculate the number of rotations required to get to the given index\n    rotations_required = index\n    for i in range(len(ranges)):\n        if rotations_required >= ranges[i][1]:\n            rotations_required -= ranges[i][1]\n        else:\n            rotations_required = rotations_required - ranges[i][0]\n\n    # Perform the rotations required to get to the given index\n    for i in range(rotations_required):\n        arr = arr[1:] + [arr[0]]\n\n    # Return the element at the given index\n    return arr[index]",
        "test": "assert find_Element([1,2,3,4,5],[[1,5]],[0],0) == 1",
        "num_ids": 1859,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define the regular expression pattern for matching words starting with letter 'p'\n    pattern = re.compile('^p\\w+')\n    \n    # Iterate through the list of words and find the ones starting with 'p'\n    for word in words:\n        # Check if the word starts with 'p' using the regular expression pattern\n        if pattern.match(word):\n            # If the word starts with 'p', return it along with the next word in the list\n            return (word, words[words.index(word)+1])",
        "test": "assert start_withp(['apple', 'pear', 'peach', 'pinapple', 'applepie', 'papaya']) == ('pear', 'peach')",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # Base case: if the index is beyond the array range or if the kth element is not at or after the index, return 0\n    if index >= n or a[k] < index:\n        return 0\n\n    # Initialize variables to keep track of the maximum sum of increasing subsequence seen so far\n    max_sum = 0\n    curr_sum = 0\n\n    # Loop through the array from index 0 to index i-1\n    for i in range(index + 1):\n        # Add the current element to the current sum\n        curr_sum += a[i]\n\n        # If the current sum is greater than the maximum sum so far, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # If the current sum is greater than the maximum sum of the current increasing subsequence and also includes the kth element, update the maximum sum accordingly\n        if curr_sum > max_sum and i == index:\n            max_sum += a[k]\n\n        # If the current sum is greater than the maximum sum of the current increasing subsequence and does not include the kth element, update the maximum sum accordingly\n        if curr_sum > max_sum and a[k] > i:\n            max_sum = max_sum + a[k] - i\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum",
        "test": "assert max_sum_increasing_subseq([3, 2, 6, 8, 5, 4, 7], 7, 3, 5) == 12",
        "num_ids": 2500,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # check if the length of the tuple is m\n    if len(tuplex)!= m:\n        print(\"Tuple should have length\",m)\n        return\n\n    # create a copy of the tuple\n    colon = deepcopy(tuplex)\n\n    # loop through each element in the colon\n    for i in range(m):\n        # move the i-th element to the end of the colon\n        colon.insert(n,colon.pop(i))\n\n    # return the colon\n    return colon",
        "test": "assert colon_tuplex((1,2,3),4,4) == (None,None,None,1,2)",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables for the largest products\n    largest_product1 = 0\n    largest_product2 = 0\n    largest_product3 = 0\n    largest_product4 = 0\n    \n    # loop through each possible combination of factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            for k in range(len(nums1) - i):\n                for l in range(len(nums2) - j):\n                    # check if this combination is within the specified limit\n                    if (k + i) * (l + j) > N:\n                        continue\n                    \n                    # calculate the product of the selected factors and add to the total product\n                    product1 = nums1[k] * nums1[k + i]\n                    product2 = nums2[l] * nums2[l + j]\n                    product3 = product1 * product2\n                    product4 = nums1[k] * nums2[l] * nums2[l + j]\n                    \n                    # update the largest products found so far\n                    largest_product1 = max(largest_product1, product1)\n                    largest_product2 = max(largest_product2, product2)\n                    largest_product3 = max(largest_product3, product3)\n                    largest_product4 = max(largest_product4, product4)\n    \n    # return the total largest product found\n    return largest_product1 + largest_product2 + largest_product3 + largest_product4",
        "test": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == [2432902008176640000, 84546000000000, 15511210043330985984, 23037778976074278657, 28823037615171176440]",
        "num_ids": 2476,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n\n    Parameters:\n    a (int): the first number to compare\n    b (int): the second number to compare\n\n    Returns:\n    int: the maximum of a and b\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2,5) == 5, \"maximum function is not working correctly\"",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('abc') == ('a', 'b', 'c')",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    mask = 1\n    while (n & mask) == 0:\n        mask <<= 1\n    return n | mask",
        "test": "assert set_left_most_unset_bit(1) == 1",
        "num_ids": 1989,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Formula for cone volume: V = \u03c0r^2h\n    return math.pi * r**2 * h\n",
        "test": "assert volume_cone(1,1) == math.pi*1**2*1, \"The volume of the cone with radius 1 and height 1 should be pi.\"",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n):\n    # Convert n to a binary representation of an integer\n    binary_representation = bin(n)[2:]\n    \n    # If binary_representation has a 0 at the beginning, remove it\n    if binary_representation[0] == '0':\n        binary_representation = binary_representation[1:]\n    \n    # Calculate the highest power of 2 that is less than or equal to n\n    highest_power = 1\n    for i in range(len(binary_representation)):\n        if binary_representation[i] == '0':\n            highest_power *= 2\n    \n    return highest_power",
        "test": "assert highest_Power_of_2(2**10) == 2**10",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(2) == 3, \"Function find_lucas(2) should return 3.\"",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Convert the string to a list of strings\n    formatted_list = [string.format(x) for x in list_]\n    # Return the formatted list\n    return formatted_list",
        "test": "assert add_string(['apple', 'banana', 'cherry'], '{0} is a fruit.') == ['apple is a fruit.', 'banana is a fruit.', 'cherry is a fruit.']",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): A list of integers.\n        l2 (list): A list of strings.\n        l3 (list): A list of dictionaries, where each dictionary contains two keys and two values.\n\n    Returns:\n        dict: A nested dictionary containing three lists and three dictionaries.\n    \"\"\"\n\n    # Create an empty dictionary to store the nested dictionary.\n    nested_dict = {}\n\n    # Loop through the three input lists.\n    for i in range(len(l1)):\n        # Add a list with integers to the nested dictionary.\n        nested_dict[l1[i]] = l2[i]\n        # Add a list with strings to the nested dictionary.\n        nested_dict[l1[i]] = l3[i]\n\n    # Return the nested dictionary.\n    return nested_dict",
        "test": "assert convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], [True, False, True]) == {'list1': [1, 2, 3], 'list2': ['a', 'b', 'c'], 'list3': [True, False, True]}",
        "num_ids": 1557,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 1:\n        return n\n\n    # Calculate the maximum sum possible if n is even\n    even_max = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n\n    # Calculate the maximum sum possible if n is odd\n    odd_max = max(get_max_sum(n//2) + n, get_max_sum(n//3) + n, get_max_sum(n//4) + n, get_max_sum(n//5) + n)\n\n    return max(even_max, odd_max)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1086,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list",
        "test": "assert max_length_list(['apple', 'banana', 'cherry']) == ['banana', 'cherry']",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False",
        "test": "assert check_distinct((1, 2, 3)) == True, \"Test case 1: (1, 2, 3) should return True\"",
        "num_ids": 728,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
        "test": "assert first_non_repeating_character(\"abcddeeffgghhiijjkkklllmmmnnoooop\") == \"a\"",
        "num_ids": 1142,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return re.match(regex, string) is not None",
        "test": "assert check_char(\"a\") == True",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import random\n\ndef quickselect(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n    pivot = random.choice(arr)\n    lows = [el for el in arr if el < pivot]\n    highs = [el for el in arr if el > pivot]\n    pivots = [el for el in arr if el == pivot]\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))\n\ndef median_numbers(a, b, c):\n    arr = [a, b, c]\n    k = len(arr) // 2\n    return quickselect(arr, k)",
        "test": "assert median_numbers(1, 2, 3) == 2.0",
        "num_ids": 983,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            temp += num % 10\n            num //= 10\n        total += temp\n    return total",
        "test": "assert sum_of_digits([123]) == 6",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Perform bitwise xor operation across all elements of the tuples\n    result = tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n    return result",
        "test": "assert bitwise_xor((1, 0, 0), (0, 1, 1)) == (1, 1, 1)",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup1 = test_tup1[i]\n        tup2 = test_tup2[i]\n        if isinstance(tup1, tuple) and isinstance(tup2, tuple):\n            result.append(add_nested_tuples(tup1, tup2))\n        else:\n            result.append(tup1 + tup2)\n    return tuple(result)",
        "test": "assert add_nested_tuples((1, 2), (3, 4)) == (4, 6)",
        "num_ids": 1085,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(5, 7) == 5",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n\n    for element in tuplex:\n        if element in tuple1:\n            return True\n\n    return False",
        "test": "assert check_tuplex((1, 2, 3), (4, 5, 6)) == False",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        print(x, \"is even.\")\n        return False\n    else:\n        print(x, \"is odd.\")\n        return True",
        "test": "assert find_Parity(4) == False",
        "num_ids": 645,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rearrange_bigger(n):\n    def next_bigger(num):\n        digits = [int(digit) for digit in str(num)]\n        digits.reverse()\n        digits.sort(reverse=True)\n        new_digits = []\n        carry = 0\n        for digit in digits:\n            if carry:\n                carry = digit\n            else:\n                new_digits.append(digit)\n        new_num = int(''.join(map(str, new_digits)))\n        return new_num\n\n    return next_bigger(n)",
        "test": "assert rearrange_bigger(0) == 0",
        "num_ids": 1378,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    result = []\n    while min_heap:\n        _, pair = heapq.heappop(min_heap)\n        result.append(pair)\n    return result",
        "test": "assert k_smallest_pairs([1,7,11], [2,4,6], 3) == [[1,2],[1,4],[1,6],[7,2],[7,4],[7,6],[11,2],[11,4],[11,6]]",
        "num_ids": 2007,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1,2),(3,4),(5,6),(7,8)]) == 24, 'Incorrect output for [(1,2),(3,4),(5,6),(7,8)]'",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 881,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n    \"\"\"\n    return re.sub(r'_(.)', lambda match: match.group(1).upper(), word)",
        "test": "assert snake_to_camel(\"snake_case_string\") == \"snakeCaseString\"",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]",
        "num_ids": 835,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function takes in a list of tuples and an integer n.\n    It returns the nth element from the list, or None if there is not enough elements in the list.\n    \"\"\"\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]",
        "test": "assert extract_nth_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == (4, 5, 6)",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3,4,5],[3,4,5,6,7]) == True, \"Overlapping exists in list1 and list2\"",
        "num_ids": 929,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max_1 = max_2 = float('-inf')\n    min_1 = min_2 = float('inf')\n\n    for i in range(len(arr)):\n        if arr[i] > max_1:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2:\n            max_2 = arr[i]\n\n        if arr[i] < min_1:\n            min_2 = min_1\n            min_1 = arr[i]\n        elif arr[i] < min_2:\n            min_2 = arr[i]\n\n    return max_1 * max_2, min_1 * min_2",
        "test": "assert max_Product([1,5,2,3,4]) == (1, 15)",
        "num_ids": 2023,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def group_tuples(Input):\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif tup[0] == common_element:\n            common_element = None\n    return common_element",
        "test": "assert group_tuples([(1,2,3,4), (5,6,7,8), (9,10,11,12)]) == (1, (5, 9))",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list with maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    # Iterating through the list to find the maximum length of the elements\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n            \n    return max_element",
        "test": "assert Find_Max([1]) == 1",
        "num_ids": 845,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "test": "assert round_and_sum([3.14, 1.618, 2.64, 1.414, 1.2]) == 7.956825301749454, \"The function should return the correct result.\"",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n\n        # Calculate the cube of the current even natural number and add it to the sum variable\n        sum += i*i*i\n\n    # Return the sum of the cubes of the even natural numbers\n    return sum",
        "test": "assert cube_Sum(1) == 0",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \"|\"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]  # remove last delimiter",
        "test": "assert concatenate_tuple(('a', 'b', 'c')) == 'abc'",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    avg = total / n\n    return avg",
        "test": "assert find_Average_Of_Cube(9) == 938.0, \"The average of cubes of first 9 natural numbers should be 938.0.\"",
        "num_ids": 776,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        rear_index = len(string) - 1\n        result.append(string[rear_index])\n    return result",
        "test": "assert extract_rear(()) == []",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 425,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 2) == 0",
        "num_ids": 690,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match the pattern in the input string\n    match = re.match(pattern, dt)\n    # extract the date components\n    year, month, day = match.groups()\n    # convert the date components to the required format\n    new_dt = f'{day}-{month}-{year}'\n    # return the new date format\n    return new_dt",
        "test": "assert change_date_format('2021-01-01') == '01-01-2021'",
        "num_ids": 1026,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest gap\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        # Iterate over array and sort elements with the gap\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap by 1\n        gap //= 2\n\n    return my_list",
        "test": "assert shell_sort([1,4,2,8,5]) == [1,2,4,5,8], \"Test case for [1,4,2,8,5] failed.\"",
        "num_ids": 1269,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return result_tup",
        "test": "assert and_tuples((1, 2, 3), (4, 5, 6)) == ((1, 4), (2, 5), (3, 6))",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # check if the discriminant is negative\n    if disc < 0:\n        return \"There is no real solution for the directrix\"\n    \n    # calculate the root using the formula\n    root = (-b + math.sqrt(disc)) / (2*a)\n    \n    return root",
        "test": "assert parabola_directrix(1, 0, 0) == 0",
        "num_ids": 1200,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert common_element([], []) == False",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    # Calculate the length of the trapezium\n    trapezium_length = (base1 + base2) / 2 * height\n\n    # Calculate the length of the first half of the trapezium\n    half_length_1 = base1 / 2 * height\n\n    # Calculate the length of the second half of the trapezium\n    half_length_2 = base2 / 2 * height\n\n    # Determine the median length of the trapezium\n    if trapezium_length > half_length_1 + half_length_2:\n        median = half_length_1 + half_length_2\n    else:\n        median = (half_length_1 + half_length_2) / 2\n\n    return median",
        "test": "assert median_trapezium(1,3,2) == 2.0",
        "num_ids": 1054,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return any(num > number for num in arr)",
        "test": "assert check_greater([5,4,3,2,1], 6) == False",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one(\"bbbbbb\") == False, \"text_match_one failed: 3rd example\"",
        "num_ids": 1674,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert number to string\n    str_n = str(n)\n    \n    # Find last digit of string\n    last_digit = str_n[-1]\n    \n    # Convert last digit to int and return it\n    return int(last_digit)",
        "test": "assert last_Digit(1234) == 4",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]",
        "num_ids": 1051,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            str2 += char\n    return str2",
        "test": "assert remove_odd('') == ''",
        "num_ids": 539,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(1,2), (2,3), (3,4), (4,5), (6,7)]) == 3",
        "num_ids": 1192,
        "indeed": true
    },
    {
        "number": 439,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    \n    # Check if all the numbers are same\n    if all(isinstance(num, int) for num in L):\n        single_num = L[0]\n        for num in L:\n            single_num *= num\n        return single_num\n    \n    # Check if all the numbers are positive\n    if all(num > 0 for num in L):\n        return sum(L)\n    \n    # Check if all the numbers are positive integers\n    if all(isinstance(num, int) and num > 0 for num in L):\n        return sum(L)\n    \n    # If none of the above conditions are met, return None\n    return None",
        "test": "assert multiple_to_single([0, 1, 2, 3, 4]) == 0",
        "num_ids": 795,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    adverbs = re.findall(r'\\b(adverb)\\b', text, flags=re.IGNORECASE)\n    \n    for i, adv in enumerate(adverbs):\n        print(f'{adv} found at position {i+1}')\n    \n    return None\n",
        "test": "assert find_adverb_position('She has a great dog.') == [('great', 7), ('dog', 11)]",
        "num_ids": 1410,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l",
        "test": "assert surfacearea_cube(1) == 6, \"Incorrect result for surfacearea_cube(1)\"",
        "num_ids": 829,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize an array to store the count of positive numbers\n    count = array('i', [0])\n    # Loop through the array and count the number of positive numbers\n    for num in nums:\n        if num > 0:\n            count[0] += 1\n    # Calculate the ration of positive numbers and return it\n    pos_ratio = count[0] / len(nums)\n    return pos_ratio",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0, \"Expected 1.0, got %s\" % positive_count([1, 2, 3, 4, 5])",
        "num_ids": 1229,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0:\n            largest = list1[i]\n    return largest",
        "test": "assert largest_neg([2, 3, 4, -1]) == -1",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for item in test_list:\n        trimmed_item = tuple(item[:-K])\n        trimmed_list.append(trimmed_item)\n    return trimmed_list",
        "test": "assert trim_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)], 5) == [(1, 2, 3, 4, 5), (7, 8, 9, 10, None)]",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize a new empty list to store the multiplication result\n    result = []\n    \n    # iterate through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # perform index wise multiplication\n        result.append(test_tup1[i] * test_tup2[i])\n        \n    return tuple(result)",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == (4, 10, 18)",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two parameters, tup and lst, which are tuples and lists respectively. \n    It uses the Counter() function from the collections module to count the frequency of each element in lst in tup.\n    The function returns a dictionary where the keys are elements from lst and the values are their respective counts in tup.\n    '''\n    freq = Counter(tup)\n    count_dict = {}\n    for i in freq.keys():\n        count_dict[i] = freq[i]\n    return count_dict",
        "test": "assert count_Occurrence((1,2,3,4,5), [1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 822,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the perrin numbers from 1 to n.\n    \"\"\"\n    sum_perrin = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            sum_perrin += i\n    return sum_perrin",
        "test": "assert cal_sum(1) == 0",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and the size of the strings that the user wants to extract.\n    It returns a list of the extracted strings.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) <= size:\n            extracted_strings.append(str_list[i])\n        else:\n            extracted_strings.append(str_list[i][:size])\n    return extracted_strings",
        "test": "assert extract_string([\"hello\", \"world\", \"python\", \"programming\", \"language\"], 50) == None",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"",
        "num_ids": 565,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0",
        "test": "assert loss_amount(1000,1000) == 0",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Initialize sum variable to zero\n    total_sum = 0\n\n    # Loop through odd numbers up to sqrt(n)\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # Check if i is evenly divisible by n\n        if n % i == 0:\n            # If it is, add it to the total sum\n            total_sum += i\n\n    # Return the total sum\n    return total_sum",
        "test": "assert sumofFactors(1) == 0, \"Expected sumofFactors(1) to be 0, got {}\".format(sumofFactors(1))",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+[zZ][a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_match_wordz('The quick brown fox jumps over the lazy dog and the cat.') == False, \"Function should return False for the input 'The quick brown fox jumps over the lazy dog and the cat.'\"",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(1) == True, \"1 should have 31 days\"",
        "num_ids": 1183,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 679,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    min_len = float('inf')\n    min_sublist = None\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j]) < min_len:\n                min_len = len(lst[i:j])\n                min_sublist = lst[i:j]\n\n    return min_sublist",
        "test": "assert Find_Min([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(2,3) == 6, \"The area of a rectangle with length 2 and breadth 3 should be 6.\"",
        "num_ids": 660,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'(?<!\\w)[A-Z][a-z]*(?!\\w)'\n    return re.sub(pattern, '', str1)",
        "test": "assert remove_uppercase(\"hello world\") == \"hello world\"",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]",
        "test": "assert Extract([['apple', 'banana'], ['orange', 'kiwi']]) == ['apple', 'orange']",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count",
        "test": "assert upper_ctr(\"Hello World\") == 2",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    combinations = []\n    n = len(list1)\n    for i in range(1, 1 << n):\n        combination = []\n        for j in range(n):\n            if i & (1 << j):\n                combination.append(list1[j])\n        combinations.append(combination)\n    return combinations",
        "test": "assert combinations_list([]) == []",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_product_start = 0\n    max_product_end = 0\n    current_product = 1\n    min_product = 1\n    \n    for i in range(len(arr)):\n        if i == 0:\n            current_product = arr[i]\n            min_product = arr[i]\n        elif i == len(arr) - 1:\n            current_product = arr[i]\n            if current_product > min_product:\n                min_product = current_product\n            else:\n                max_product = max(max_product, current_product)\n                current_product = 1\n                min_product = 1\n        else:\n            current_product = max(min_product * arr[i], arr[i])\n            if current_product > max_product:\n                max_product = current_product\n                max_product_start = i\n                max_product_end = i\n            else:\n                if current_product > min_product:\n                    min_product = current_product\n                \n    if max_product_start == 0:\n        return max_product * min_product\n    elif max_product_end == len(arr) - 1:\n        return max_product * min_product\n    else:\n        return max_product",
        "test": "assert max_subarray_product([2,3,-2,4]) == 6",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[key] for key in dict.keys()]\n    return n in values",
        "test": "assert check_value({'a':1,'b':1,'c':1,'d':1,'e':1}, 1) == True",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}",
        "num_ids": 1127,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def max_product(arr):\n    # Initialize max_product and max_ending_here as negative infinity\n    max_product = -float('inf')\n    max_ending_here = 1\n\n    # Iterate through the array\n    for num in arr:\n        # Update max_ending_here\n        max_ending_here *= num\n\n        # Update max_product if max_ending_here is negative\n        if max_ending_here < 0:\n            max_product = max(max_product, max_ending_here)\n            max_ending_here = 1\n\n    # Update max_product if max_ending_here is non-zero\n    if max_ending_here!= 1:\n        max_product = max(max_product, max_ending_here)\n\n    return max_product",
        "test": "assert max_product([1, 2, 3, 4]) == 24",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the variable to store the sum\n    pairwise_sum = 0\n    # loop through the tuple and add the pairwise elements to the sum\n    for i in range(len(test_tup) - 1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    # return the final sum\n    return pairwise_sum",
        "test": "assert add_pairwise((4, 8, 12, 16, 20)) == (28, 36, 44, 52, 60)",
        "num_ids": 1059,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number n as inputs and returns the product of their array multiplication modulo n.\n    '''\n\n    # calculate the product of the array modulo n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product",
        "test": "assert find_remainder([3,7,2], 10) == 9",
        "num_ids": 818,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 1102,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection.append(i)\n    return tuple(intersection)",
        "test": "assert tuple_intersection((1, 2, 3), (2, 4, 6)) == (2,)",
        "num_ids": 1073,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a given character with a new character.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char('hello','l','x') == 'hexxo'",
        "num_ids": 826,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict\n",
        "test": "assert sort_counter({'apple': 2, 'banana': 1, 'cherry': 3}) == {'banana': 1, 'apple': 2, 'cherry': 3}",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num",
        "test": "assert big_sum([0, 0, 0]) == 0",
        "num_ids": 944,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower('Hello, World!') == 'hello, world!'",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    regex = r'\\b[a-z]+\\b'\n    return re.sub(regex, '', str1)",
        "test": "assert remove_lowercase('12345') == '12345'",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert number to string\n    num_str = str(n)\n    # extract first digit from string\n    first_digit = num_str[0]\n    # return first digit\n    return int(first_digit)",
        "test": "assert first_Digit(0) == 0",
        "num_ids": 624,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1022,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_nums = sum(range(1, n+1))\n    return sum_cubes - sum_nums",
        "test": "assert difference(5) == 225, \"The difference between the sum of cubes of the first 5 natural numbers and the sum of the first 5 natural numbers is incorrect.\"",
        "num_ids": 1821,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def find_Odd_Pair(A, N):\n    # XOR of the first N elements of the array\n    xor_sum = sum(A[:N])\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Traverse through all pairs of elements\n    for i in range(N):\n        for j in range(i+1, N):\n            # XOR of the current pair\n            xor_pair = A[i] ^ A[j]\n\n            # If the xor_pair is odd and the xor_sum is even, increment the count\n            if (xor_pair % 2!= 0) and (xor_sum % 2!= 0):\n                count += 1\n\n    # Return the count\n    return count",
        "test": "assert find_Odd_Pair([2,4,6,8,10], 5) == 0",
        "num_ids": 1289,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string",
        "test": "assert toggle_string(\"Hello, World!\") == \"hELLO, wORLD!\"",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize sum to 0\n    digit_sum = 0\n    \n    # Loop through each digit of n1 and n2\n    for i in range(10):\n        # Calculate the difference between the i-th digit of n1 and n2\n        diff = abs(n1 % 10 - n2 % 10)\n        \n        # Add the difference to the sum\n        digit_sum += diff\n        \n        # Shift the digits to the left by one place\n        n1 //= 10\n        n2 //= 10\n    \n    # Return the sum of the per-digit differences\n    return digit_sum",
        "test": "assert digit_distance_nums(0, 0) == 0, \"Incorrect output for digit_distance_nums(0, 0)\"",
        "num_ids": 1450,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum, start",
        "test": "assert max_sub_array_sum([-2, -3, -1, 1, 2, 3], 6) == 14",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    # Return the sorted list as the output\n    return union_list",
        "test": "assert union_elements((1, 3, 5, 7), (2, 4, 6, 8)) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = lst[i:j]\n            max_length = max(max_length, len(sub_lst))\n    return max_length",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 1329,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and extracts values between quotation marks using regular expressions.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values(\"\\\"hello world\\\"\") == [\"hello world\"]",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,1,2,2,3], 5) == 2",
        "num_ids": 807,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Sum up the digits\n    return sum(digits)",
        "test": "assert sum_digits(12345) == 15",
        "num_ids": 748,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False",
        "test": "assert issort_list([1, 2, 1, 2, 3]) == False",
        "num_ids": 891,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "test": "assert empty_list(5) == [{} for i in range(5)]",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1",
        "test": "assert sort_sublists([[1, 2, 3], ['a', 'b', 'c']]) == [[1, 2, 3], ['a', 'b', 'c']]",
        "num_ids": 1065,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set to store unique numbers\n    unique_nums = set()\n    # Iterate through each number in the list\n    for num in nums:\n        # If the number is not already in the set, add it\n        if num not in unique_nums:\n            unique_nums.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_nums)",
        "test": "assert two_unique_nums([1, 2, 3, 2, 1]) == [1, 2, 3]",
        "num_ids": 1025,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set of unique numbers from the input list\n    unique_numbers = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    \n    return product",
        "test": "assert unique_product([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = 2*math.pi*r*h\n    return S",
        "test": "assert surfacearea_cylinder(5,10) == 314.15926535897933, \"The surface area of a cylinder with radius 5 and height 10 should be 314.15926535897933.\"",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if A is a sublist of B\n    if B in A: \n        return True\n    else: \n        return False",
        "test": "assert is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6]) == False",
        "num_ids": 1042,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial",
        "test": "assert last_Digit_Factorial(1) == 1, \"The last digit in factorial of 1 should be 1.\"",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i, j, k = 0, 0, 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n    return result",
        "test": "assert interleave_lists([1],[2],[3]) == [1,2,3]",
        "num_ids": 1829,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n\n    # initialize an empty list to hold the dissimilar elements\n    dissimilar_list = []\n\n    # iterate through each element of the first tuple\n    for elem1 in test_tup1:\n        # check if the element is present in the second tuple\n        if elem1 not in test_tup2:\n            # if not, add it to the dissimilar list\n            dissimilar_list.append(elem1)\n\n    # iterate through each element of the second tuple\n    for elem2 in test_tup2:\n        # check if the element is present in the first tuple\n        if elem2 not in test_tup1:\n            # if not, add it to the dissimilar list\n            dissimilar_list.append(elem2)\n\n    # return the list of dissimilar elements\n    return dissimilar_list",
        "test": "assert find_dissimilar((1, 2, 3), (4, 5, 6)) == (3, 6)",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    return [even_fnc(x) for x in test_tuple if isinstance(x, (list, tuple))]",
        "test": "assert even_ele((1, (2, 3), 4, (5, 6), (7, (8, 9))), lambda x: x % 2 == 0) == ((1, 3), 4, (6, 8), 9)",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*s/2\n    return area",
        "test": "assert surface_Area(5,4) == 50, \"The surface area of a square pyramid with a base edge of 5 and height of 4 should be 50\"",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + 2*catalan_number(n-2)",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(ly)\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert find_adverbs(\"She is not lazy.\") == []",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap of n items\n    max_heap = []\n    for item in items:\n        if not max_heap or item[1] > max_heap[0][1]:\n            heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Extract the n most expensive items from the heap\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap))\n    return result",
        "test": "assert expensive_items([], 1) == []",
        "num_ids": 1442,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return second_part + first_part",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1088,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5), \"list_tuple([1, 2, 3, 4, 5]) should return (1, 2, 3, 4, 5)\"",
        "num_ids": 614,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    # find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    # return the difference between the largest and smallest values\n    return largest - smallest",
        "test": "assert big_diff([2, 2, 2]) == 0, \"Failed\"",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store perfect squares\n    perfect_squares_list = []\n\n    # Loop through the range of a to b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        square = int(num**0.5)\n        if num == square**2:\n            # Append the perfect square to the list\n            perfect_squares_list.append(num)\n\n    # Return the list of perfect squares\n    return perfect_squares_list",
        "test": "assert perfect_squares(1, 1) == [1]",
        "num_ids": 1667,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    return r*cmath.cos(theta), r*cmath.sin(theta)",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # if the length of the list is less than 2, return the same list\n    if len(newList) < 2:\n        return newList\n    # swap the first and last elements in the list\n    first = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = first\n    return newList",
        "test": "assert swap_List([1]) == [1]",
        "num_ids": 696,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n\n    # initialize variables\n    result = 0\n    factorial = 1\n\n    # calculate the factorial of n\n    for i in range(1, n + 1):\n        factorial *= i\n\n    # calculate the binomial coefficient\n    for i in range(n, k - 1, -1):\n        result += factorial // i\n        factorial //= i\n\n    return result",
        "test": "assert binomial_Coeff(0,5) == 0",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = r'^(\\d{1,3}\\.){3}\\d{1,3}$'\n    match = re.match(ip_pattern, ip)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert removezero_ip('192.168.0.1') == '192.168.0.1'",
        "num_ids": 969,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n    \n    return abs(even - odd)",
        "test": "assert diff_even_odd([0, 2, 4, 6, 8]) == 8",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # Calculate the difference between the numbers\n    diff = num1 ^ num2\n    # Count the number of swaps required to convert the difference to 0\n    count = 0\n    while diff!= 0:\n        diff = diff & (diff - 1)\n        count += 1\n    return count",
        "test": "assert min_Swaps(\"1010\", \"1100\") == 2",
        "num_ids": 1726,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size",
        "test": "assert tuple_size(()) == 0, \"Empty tuple should have size 0 bytes\"",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]",
        "test": "assert find_kth([1], [1], 0) == 1",
        "num_ids": 1992,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes an integer number as input and returns True if it is an Armstrong number, else False.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.\n    '''\n\n    # Convert the number to a string\n    str_num = str(number)\n\n    # Convert the string to a list of digits\n    digits = [int(digit) for digit in str_num]\n\n    # Calculate the sum of the digits raised to the power of the number of digits\n    sum_of_powers = sum([digit**len(digits) for digit in digits])\n\n    # Check if the sum of the digits raised to the power of the number of digits is equal to the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 1006,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 1:\n        raise ValueError('Input must be a positive integer.')\n    sum_ = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_ += i\n        count += 1\n    average = sum_/count\n    return sum_, average",
        "test": "assert sum_average(10) == (55, 5.5)",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None",
        "test": "assert first_repeated_char('hello') == 'l', \"Failed in testing of first_repeated_char function\"",
        "num_ids": 960,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers\n",
        "test": "assert get_ludic(5) == [1, 2, 3, 4, 5]",
        "num_ids": 2361,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split() # split the string into a list of words\n    reversed_words = [] # create an empty list to store the reversed words\n    for word in words: # loop through each word in the list\n        reversed_words.insert(0, word) # insert the word at the beginning of the list\n    return''.join(reversed_words) # join the reversed words back into a string with spaces between them",
        "test": "assert reverse_words(\"a\") == \"a\"",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True, \"Expected True, got {}\".format(prime_num(2))",
        "num_ids": 610,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "test": "assert radian_degree(180) == 3.141592653589793",
        "num_ids": 697,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"hello world\", r\"hello\") == (\"hello\", 0, 5)",
        "num_ids": 1115,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    for i in range(1, n):\n        a, b, c = b, a + b, c + b\n    return c",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1.copy()\n    list2.pop(L-1)\n    return list2",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]",
        "num_ids": 965,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = 0\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_num:\n            max_num = test_list[i][N]\n    return max_num",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6]], 2) == 6",
        "num_ids": 1286,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum variable to 0\n    cumulative_sum = 0\n    # loop through each element in the list\n    for element in test_list:\n        # add the element to the cumulative sum\n        cumulative_sum += element\n    # return the cumulative sum\n    return cumulative_sum",
        "test": "assert cummulative_sum([]) == 0",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        averages.append(sum(num_tuple)/len(num_tuple))\n    return averages",
        "test": "assert average_tuple([(1,2,3),(4,5,6),(7,8,9)]) == [2.0, 5.0, 8.0]",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have the same length!\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup",
        "test": "assert tuple_modulo((1,2,3,4,5), (2,3,4,5,6)) == (1,2,3,4,5)",
        "num_ids": 1066,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    start_x = 0\n    start_y = 0\n    end_x = d\n    end_y = 0\n    jump_count = 0\n    current_x = start_x\n    current_y = start_y\n    \n    # Check if the destination is within the boundaries of the 2d plane\n    if end_x > steps or end_y > steps:\n        return -1\n    \n    # Perform the jump operations until the end point is reached\n    while current_x!= end_x or current_y!= end_y:\n        # Check if the destination is within the boundaries of the 2d plane\n        if end_x > steps or end_y > steps:\n            return -1\n        \n        # Check if the next jump is possible\n        if current_y == end_y:\n            current_x += 1\n        else:\n            current_y += 1\n        \n        # Increment the jump count\n        jump_count += 1\n    \n    # Return the final jump count\n    return jump_count",
        "test": "assert min_Jumps(1, 0) == 0",
        "num_ids": 1482,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([1, 2, 3, 4], [2, 2, 2, 2]) == [0.5, 1, 1.5, 2]",
        "num_ids": 946,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list)\n",
        "test": "assert move_num(\"12345\") == \"12345\"",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in ascending order\n    a.sort()\n\n    # Initialize variables for the maximum subset size and the current subset size\n    max_size = 0\n    curr_size = 1\n\n    # Iterate through the list\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            # If the current element is divisible by the previous element, add to the current subset size\n            curr_size += 1\n        else:\n            # If the current element is not divisible by the previous element, update the maximum subset size and start a new subset\n            if curr_size > max_size:\n                max_size = curr_size\n            curr_size = 1\n\n    # Check for the last subset size\n    if curr_size > max_size:\n        max_size = curr_size\n\n    return max_size",
        "test": "assert largest_subset([1, 2, 4, 5, 6, 8]) == 3",
        "num_ids": 1766,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    \n    # Find the middle index\n    mid = n // 2\n    \n    # Check if the length of the list is odd or even\n    if n % 2 == 0:\n        # Find the median of the two middle elements\n        median = (merged_list[mid-1] + merged_list[mid]) / 2\n    else:\n        # Find the median of the middle element\n        median = merged_list[mid]\n    \n    return median",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 4) == 4, \"get_median([1, 3, 5], [2, 4, 6], 4) should return 4\"",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1,2,3,4,5], 2) == [1, 4, 9, 16, 25]",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 424,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Find the length of the list\n    n = len(newList)\n    # Check if the list has at least 2 elements\n    if n < 2:\n        # If the list has only 1 element, return the list\n        return newList\n    # Swap the first and last elements of the list\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    # Return the modified list\n    return newList",
        "test": "assert swap_List([1]) == [1]",
        "num_ids": 915,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # define the semi-circle as a rectangle with dimensions r x r\n    semi_circle = [(x, y) for x in range(-r, r+1) for y in range(-r, r+1)]\n    # calculate the area of each triangle formed by the semi-circle\n    areas = [0] * len(semi_circle)\n    for i, (x, y) in enumerate(semi_circle):\n        for j in range(i+1, len(semi_circle)):\n            if (x-semi_circle[j][0])**2 + (y-semi_circle[j][1])**2 <= r**2:\n                areas[i] += abs(semi_circle[i][0] * semi_circle[j][1] - semi_circle[i][1] * semi_circle[j][0])\n                areas[j] += abs(semi_circle[i][0] * semi_circle[j][1] - semi_circle[i][1] * semi_circle[j][0])\n    # find the maximum area among all triangles\n    max_area = max(areas)\n    # return the area of the largest triangle that can be inscribed in the semicircle\n    return max_area",
        "test": "assert triangle_area(10) == 22.420972337851057, \"The area of the largest triangle that can be inscribed in a semicircle with radius 10 should be 22.420972337851057, but it's not.\"",
        "num_ids": 1585,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the first missing number in a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int): The starting index of the array to consider. Default is 0.\n        end (int): The ending index of the array to consider. Default is None, which means to consider all elements.\n\n    Returns:\n        int: The first missing number in the array.\n\n    \"\"\"\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1",
        "test": "assert find_First_Missing([1,2,3,4,6]) == 5",
        "num_ids": 1123,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 860,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    if len(sub) == 2:\n        return sub\n    else:\n        return adjac((ele[0]+1, ele[1]), sub) + adjac((ele[0]-1, ele[1]), sub) + adjac((ele[0], ele[1]+1), sub) + adjac((ele[0], ele[1]-1), sub)",
        "test": "assert adjac((4,4)) == [(3,4), (4,3), (4,5), (5,4)]",
        "num_ids": 1684,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Loop through the list and find the index of the first non-zero value\n    non_zero_index = None\n    for i, num in enumerate(num_list):\n        if num!= 0:\n            non_zero_index = i\n            break\n    \n    # If there are no non-zero values, there is no need to move them\n    if non_zero_index is None:\n        return num_list\n    \n    # Create a new list with the non-zero values\n    new_list = []\n    for i in range(non_zero_index, len(num_list)):\n        new_list.append(num_list[i])\n    \n    # Move all zeroes to the end of the new list\n    for i in range(non_zero_index, len(new_list)):\n        if new_list[i] == 0:\n            new_list[i], new_list[-1] = new_list[-1], new_list[i]\n    \n    # Return the new list with zeroes moved to the end\n    return new_list",
        "test": "assert move_zero([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 1298,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor ^= arr[i] ^ arr[j]\n    return sum_xor",
        "test": "assert pair_xor_Sum([1, 1, 1, 1, 1], 5) == 0",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    hq.heapify(iterable)\n\n    # extract the minimum element from the heap and insert it at the end\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        hq.heappop(iterable)\n\n    return sorted_list",
        "test": "assert heap_sort([]) == [], \"The input is an empty list, so no sorting is required.\"",
        "num_ids": 1110,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= 0:\n        return True\n    elif actual_cost == sale_amount:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(100,100) == True",
        "num_ids": 893,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t <= -5:  # If the temperature is below freezing point, set the chill index to 0\n        return 0\n    elif t >= 100:  # If the temperature is above freezing point, set the chill index to 32767\n        return 32767\n    else:\n        chill_index = 237.3 + 0.6215 * t - 11.37 * math.pow(t, 2) + 0.3965 * math.pow(v, 0.16)\n        if chill_index > 32767:  # If the chill index is greater than 32767, set it to 32767\n            chill_index = 32767\n        elif chill_index < 0:  # If the chill index is less than 0, set it to 0\n            chill_index = 0\n        return int(chill_index)",
        "test": "assert wind_chill(0, 20) == 0",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create a new list to store the names without the lowercase letters\n    filtered_names = []\n    \n    # loop through each name in the original list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip it\n            continue\n        # otherwise, add it to the new list of filtered names\n        else:\n            filtered_names.append(name)\n            \n    # sum the length of each name in the new filtered list\n    total_length = sum([len(name) for name in filtered_names])\n    \n    return total_length",
        "test": "assert sample_nam(['john','mary', 'tom', 'jane','sarah']) == 0",
        "num_ids": 831,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\((.*?)\\)\"\n    items = re.sub(pattern, r'\\1', items)\n    return items",
        "test": "assert remove_parenthesis(\"Hello (world) how are you\") == \"Hello world how are you\"",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    total = 1\n    for i in range(1, n):\n        total += 2*i\n    return total",
        "test": "assert is_nonagonal(1) == 1, \"The function is_nonagonal(1) returns a wrong result.\"",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"(?<=\\b|^)(?=z)(?=\\b|$)\"\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_wordz_middle('hello world') == False",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the length of the input array\n    n = len(input)\n    # Find the position of the kth element from the end\n    kth_index = n - k\n\n    # Reverse the array from the first element to kth_index-1\n    for i in range(kth_index):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n\n    return input",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 5) == [1,2,3,4,5]",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Using a list comprehension to create a new tuple with the added dictionary\n    new_tuple = (test_tup[0], test_tup[1], test_dict)\n    return new_tuple",
        "test": "assert add_dict_to_tuple(('a', 'b'), {'c': 1}) == ('a', 'b', {'c': 1})",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "import math\n\ndef maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    n = len(cost)\n    max_avg = 0\n    path_count = 0\n    current_avg = 0\n    path = []\n\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                current_avg += cost[i][j]\n                path.append((i, j))\n                path_count += 1\n            elif i == 0:\n                current_avg += cost[i][j]\n                path.append((i, j))\n                path_count += 1\n            elif j == 0:\n                current_avg += cost[i][j]\n                path.append((i, j))\n                path_count += 1\n            elif i == n-1 and j == n-1:\n                current_avg += cost[i][j]\n                path.append((i, j))\n                path_count += 1\n            elif i == n-1:\n                current_avg += cost[i][j]\n                path.append((i, j))\n                path_count += 1\n            elif j == n-1:\n                current_avg += cost[i][j]\n                path.append((i, j))\n                path_count += 1\n            else:\n                current_avg += cost[i][j]\n                path.append((i, j))\n                path_count += 1\n\n            if current_avg > max_avg:\n                max_avg = current_avg\n\n    print(\"Maximum Average:\", max_avg)\n    print(\"Number of paths:\", path_count)\n    print(\"Path:\", path)\n",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18]]) == 20.0, \"Test 4 failed\"",
        "num_ids": 2558,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        if info[0] > h and info[1] > w:\n            filtered_students[name] = info\n    return filtered_students",
        "test": "assert filter_data({'Alice':(170,80), 'Bob':(160,90), 'Charlie':(180,75), 'David':(175,85), 'Eve':(165,95)},165,90) == {}",
        "num_ids": 1822,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 5",
        "num_ids": 1087,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Calculate the sum of digits of the base\n    sum_of_digits = 0\n    while base > 0:\n        digit = base % 10\n        sum_of_digits += digit\n        base //= 10\n    \n    # Calculate the sum of digits to the power of the power\n    sum_of_powers = 0\n    for _ in range(power):\n        sum_of_powers += sum_of_digits\n    \n    return sum_of_powers",
        "test": "assert power_base_sum(7, 1) == 7, \"Incorrect result for power_base_sum(7, 1)\"",
        "num_ids": 1280,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result",
        "test": "assert extract_quotation(\"This is a sentence without any quotation marks.\") == \"This is a sentence without any quotation marks.\"",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    result_list = []\n    for i in range(len(test_tup)-1):\n        result_list.append(t_1*t_2)\n        t_1 = t_2\n        t_2 = result_list[i]\n    result_list.append(t_1*t_2)\n    return tuple(result_list)",
        "test": "assert multiply_elements((1, 2)) == (2, 4)",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]",
        "test": "assert sum_list([1,2,3], [4,5,6]) == [5,7,9]",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))",
        "test": "assert consecutive_duplicates([1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1244,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone\n    # Area = pi * r^2 * h\n    # where pi = 3.14159...\n    area = math.pi * r**2 * h\n    \n    # Return the lateral surface area\n    return area",
        "test": "assert lateralsurface_cone(8,9) == math.pi*r**2*h",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regex pattern to replace spaces, commas, or dots with a colon\n    pattern = r'[\\s.,]+'\n    # use re.sub() method to replace all occurrences of pattern in text with a colon\n    return re.sub(pattern, ':', text)",
        "test": "assert replace_specialchar('hello world') == 'hello:world'",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i",
        "test": "assert find_first_occurrence([1, 3, 4, 5, 5, 7, 9], 8) == -1, \"Expected find_first_occurrence([1, 3, 4, 5, 5, 7, 9], 8) == -1, got {}\".format(find_first_occurrence([1, 3, 4, 5, 5, 7, 9], 8))",
        "num_ids": 1558,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i+1] = prefix_sum[i] + arr[i]\n    \n    # Initialize two pointers, left and right, both pointing to the first element of the array\n    left, right = 0, 0\n    prod_sum = 0\n    subarray_sum = 0\n    \n    # Calculate the product of the subarray and its sum\n    while right < n:\n        prod = prefix_sum[right+1] - prefix_sum[left]\n        subarray_sum += arr[right]\n        prod_sum += prod\n        right += 1\n        \n        # Move the left pointer to the right until the product of the subarray is 0\n        while prod_sum!= 0 and left < right:\n            prod_sum -= arr[left]\n            left += 1\n            \n    return prod_sum",
        "test": "assert sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 1416,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Store the first bit and the last bit of the number\n    first_bit = (n & 1)\n    last_bit = (n >> 31) & 1\n    \n    # Calculate the middle bits as the XOR of the first and last bits\n    middle_bits = first_bit ^ last_bit\n    \n    # Toggle the middle bits\n    n ^= middle_bits\n    \n    return n",
        "test": "assert set_middle_bits(0b000000) == 0b000000",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Using binary search to find the insertion point\n    index = bisect.bisect_left(a, x)\n    # Return the leftmost index\n    return index",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 1062,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('apple') == True",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1, \"Test case 1 failed\"",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    triangular_numbers = {}\n    for i in range(1, n+1):\n        triangular_numbers[i] = math.ceil(math.sqrt(i*i + 1)) - math.floor(math.sqrt(i*i + 1))\n    smallest_triangular = None\n    for tri in triangular_numbers.values():\n        if smallest_triangular is None or tri < smallest_triangular:\n            smallest_triangular = tri\n    return triangular_numbers[min(triangular_numbers, key=triangular_numbers.get)]",
        "test": "assert find_Index(2) == 1, \"The function should return 1 for n=2\"",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        my_dict[key] = value\n    return my_dict",
        "test": "assert tuple_to_dict((1, 2, 3)) == {1: 2, 2: 3}",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 2:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])",
        "test": "assert all_Characters_Same(\"hello\") == False",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2\n",
        "test": "assert area_tetrahedron(3) == 6/4",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n  # To handle the case where m is greater than n\n    \n    # Storing the last m items in a new list\n    right_rotated = list[-m:]\n    \n    # Removing the last m items from the list\n    for i in range(m-1, -1, -1):\n        list.pop()\n    \n    # Concatenating the last m items with the first m items in the list\n    for i in range(m):\n        list.append(right_rotated[i])\n    \n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 1428,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3, None, 4)) == True",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n\n    # Helper function to check if a number is divisible by every digit in a list\n    def is_divisible(num, digits):\n        for digit in digits:\n            if num % digit!= 0:\n                return False\n        return True\n\n    # Loop through each number in the range and check if it is divisible by every digit it contains\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if is_divisible(num, digits):\n            print(num)\n",
        "test": "assert divisible_by_digits(100, 200) == [123456]",
        "num_ids": 1974,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    \"\"\"\n    if a > 360:\n        return None\n    \n    # Calculating the radius of the sector\n    s = r * math.sin(math.radians(a))\n    \n    # Calculating the area of the sector\n    area = math.pi * (r ** 2)\n    \n    # Calculating the area of the circle which is inside the sector\n    circ_area = math.pi * (s ** 2)\n    \n    # Returning the total area of the sector\n    return area - circ_area",
        "test": "assert sector_area(1,180)==3.141592653589793, \"sector_area(1,180) should return 3.141592653589793\"",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # initialize the matrix to store the length of the longest common subsequence for each pair of substrings\n    L = [[0 for j in range(len(Y) + 1)] for i in range(len(X) + 1)]\n    \n    # fill the matrix using dynamic programming\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n                \n    # build the longest common subsequence using the matrix\n    lcs = []\n    i, j = len(X), len(Y)\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n            \n    # reverse the subsequence and return it\n    return ''.join(reversed(lcs))",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GXTXAYB\") == \"GTAB\"",
        "num_ids": 2532,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # define a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    \n    # replace all occurrences of the pattern with a space\n    str2 = re.sub(pattern, r' \\1', str1)\n    \n    return str2",
        "test": "assert capital_words_spaces(\"a_string_with_underscores\") == \"A_String_With_Underscores\"",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Use a lambda function to convert each string to a float and sort it numerically\n    nums_sorted = sorted(nums_str, key=lambda x: float(x))\n    return nums_sorted",
        "test": "assert sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "test": "assert add_tuple([1, 2, 3], ()) == [1, 2, 3]",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0 or i == len(arr)-1:\n        return True\n    if arr[i] > arr[2*i] or arr[i] > arr[2*i+1]:\n        return False\n    return check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i+1)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)",
        "test": "assert check_min_heap_helper([5, 4, 3, 2, 1], 1) == False",
        "num_ids": 1656,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the tuple list based on the second element\n    test_list.sort(key=lambda x: x[1])\n\n    # Find the first K elements in the sorted list\n    min_list = test_list[:K]\n\n    # Create an empty list to store the final result\n    min_list_final = []\n\n    # Iterate through the first K elements in the sorted list and add them to the final result\n    for i in range(K):\n        min_list_final.append(min_list[i][0])\n\n    return min_list_final",
        "test": "assert min_k([('apple', 5), ('banana', 2), ('cherry', 3), ('date', 1), ('elderberry', 4)], 0) == []",
        "num_ids": 1987,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty set to hold common elements\n    common = set()\n    # loop through each index in the lists\n    for i in range(min(len(l1), len(l2), len(l3))):\n        # check if the elements at the current index are the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # if they are, add the element to the set of common elements\n            common.add(l1[i])\n    # return the list of common elements\n    return list(common)",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [4, 5, 6]) == []",
        "num_ids": 1320,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest",
        "test": "assert second_smallest([5, 4, 3, 2, 1]) == 2",
        "num_ids": 995,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)",
        "test": "assert text_match_zero_one('abababab') == False",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count",
        "test": "assert count_reverse_pairs(['abc', 'def', 'ghi', 'jkl','mno']) == 0",
        "num_ids": 1948,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1_tuples = tuple(tuple(x) for x in list1)\n    count_dict = {}\n    for t in list1_tuples:\n        if t in count_dict:\n            count_dict[t] += 1\n        else:\n            count_dict[t] = 1\n    return count_dict",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1168,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    if \".\" in num:\n        decimal_point_index = num.index(\".\")\n        if len(num) - decimal_point_index - 1 > 2:\n            return False\n        for digit in num[decimal_point_index + 1:]:\n            if not digit.isdigit() or int(digit) >= 10:\n                return False\n    else:\n        if len(num) > 10:\n            return False\n        for digit in num:\n            if not digit.isdigit() or int(digit) >= 10:\n                return False\n    return True",
        "test": "assert is_decimal(\"12,34\") == False, \"is_decimal('12,34') should return False\"",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # Check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        # If yes, return True\n        return True\n    else:\n        # If no, return False\n        return False",
        "test": "assert unique_Element([1,2,2,3,4,5]) == False",
        "num_ids": 1090,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 % 2 == 0:\n        if monthnum3 == 2:\n            return True\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return True\n        else:\n            return False\n    else:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            return True\n        else:\n            return False",
        "test": "assert check_monthnumber_number(13) == False",
        "num_ids": 1420,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference as the maximum value of the array\n    min_diff = arr[-1] - arr[0]\n\n    # Initialize two pointers\n    i, j = 0, n-1\n\n    # Traverse the array from both ends\n    while i < j:\n        # Calculate the difference between the current and next element\n        diff = arr[j] - arr[i]\n\n        # Update the minimum difference if the difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n        # Move the pointer to the next element\n        if arr[i] < arr[j]:\n            i += 1\n        else:\n            j -= 1\n\n    # Return the minimum difference\n    return min_diff",
        "test": "assert find_min_diff([1, 1, 1, 1, 1], 5) == 0",
        "num_ids": 1577,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr('12345') == 5",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function finds the nth polite number. The nth polite number is defined as the smallest positive integer m such that the sum of the digits of m is equal to n.\n    \"\"\"\n    def sum_of_digits(n):\n        \"\"\"\n        This function takes an integer n and returns the sum of its digits.\n        \"\"\"\n        return sum(int(digit) for digit in str(n))\n\n    def is_polite_helper(i, m):\n        \"\"\"\n        This function takes two parameters, i and m, and returns True if m is a nth polite number and False otherwise.\n        \"\"\"\n        if sum_of_digits(m) == n:\n            return True\n        elif m < 10:\n            return False\n        else:\n            return is_polite_helper(i, m - 10)\n\n    return is_polite_helper(n, 10**n)\n",
        "test": "assert is_polite(0) == 0 ",
        "num_ids": 1056,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([5, 3, 1, 4, 2], 10) == 0, \"get_pairs_count([5, 3, 1, 4, 2], 10) should return 0\"",
        "num_ids": 1062,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns their difference using sets.\n    '''\n    # Convert both lists to sets to remove duplicates\n    set1 = set(li1)\n    set2 = set(li2)\n\n    # Calculate the difference of the two sets\n    diff_set = set1 - set2\n\n    # Convert the difference set back to a list and return it\n    return list(diff_set)",
        "test": "assert Diff([1,2,3,4,5],[4,5,6,7,8]) == [1,2,3]",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    '''\n    count = 0\n    sum_ = 0\n    for i in range(1, n+1):\n        if i%2!= 0:\n            count += 1\n            sum_ += i**4\n    return sum_\n\nprint(odd_num_sum(10))",
        "test": "assert odd_num_sum(2) == 1",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if len(stack) == 0 or (char == ')' and stack[-1]!= '(') or (char == ']' and stack[-1]!= '[') or (char == '}' and stack[-1]!= '{'):\n                return False\n            else:\n                stack.pop()\n    if len(stack)!= 0:\n        return False\n    else:\n        return True",
        "test": "assert check_expression('(a + b)') == True",
        "num_ids": 924,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words to be removed\n    removed_words = []\n    # Loop through each word in the string\n    for word in words:\n        # If the length of the word is not equal to K, append it to the removed_words list\n        if len(word)!= K:\n            removed_words.append(word)\n    # Join the removed_words list into a string and return it\n    return''.join(removed_words)",
        "test": "assert remove_length(\"hello world hello world\", 1) == \"ello wor\"",
        "num_ids": 828,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
        "test": "assert occurance_substring(\"This is a test string\", \"not_found\") == None",
        "num_ids": 869,
        "indeed": true
    },
    {
        "number": 775,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 3, 5, 7, 9]) == False",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"\") == 0",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Convert the set to a list and sum the elements\n    sum_list = list(unique_set)\n    sum_sum = sum(sum_list)\n\n    return sum_sum",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15, \"find_sum([1, 2, 3, 4, 5]) should return 15.\"",
        "num_ids": 1965,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst)]",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 948,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary\n    sublist_count = {}\n\n    # Loop through each list in the main list\n    for sublist in list1:\n        # Convert the list to a tuple and check if it is already in the dictionary\n        if tuple(sorted(sublist)) in sublist_count:\n            sublist_count[tuple(sorted(sublist))] += 1\n        else:\n            # If the tuple is not in the dictionary, add it with a count of 1\n            sublist_count[tuple(sorted(sublist))] = 1\n\n    # Return the dictionary\n    return sublist_count",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {",
        "num_ids": 1326,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = sorted(test_list)\n    n = len(test_list)\n    result = []\n\n    for i in range(1, n+1):\n        for comb in combinations(range(n), i):\n            current_sum = sum(test_list[j] for j in comb)\n            if current_sum == 0:\n                result.append(tuple(comb))\n\n    return result",
        "test": "assert find_combinations([(1,2,3),(4,5,6),(7,8,9),(10,11,12),(13,14,15)]) == [(1, 4, 7), (1, 4, 10), (1, 4, 13), (1, 5, 8), (1, 5, 11), (1, 5, 14), (1, 6, 9), (1, 6, 12), (1, 6, 15), (1, 7, 10), (1, 7, 13), (1, 7, 16), (1, 8, 11), (1, 8, 14), (1, 8, 17), (1, 9, 12), (1, 9, 15), (1, 9, 18), (1, 10, 13), (1, 10, 16), (1, 10, 19), (1, 11, 14), (1, 11, 17), (1, 11, 20), (1, 12, 15), (1, 12, 18), (1, 12, 21), (1, 13, 16), (1, 13, 19), (1, 13, 22), (1, 14, 17), (1, 14, 20), (1, 14, 23), (1, 15, 18), (1, 15, 21), (1, 15, 24), (1, 16, 19), (1, 16, 22), (1, 16, 25), (1, 17, 20), (1, 17, 23), (1, 17, 26), (1, 18, 21), (1, 18, 24), (1, 18, 27), (1, 19, 22), (1, 19, 25), (1, 19, 28), (1, 20, 23), (1, 20, 26), (1, 20, 29), (1, 21, 24), (1, 21, 27), (1, 21, 30), (1, 22, 25), (1, 22, 28), (1, 22, 31), (1, 23, 26), (1, 23, 29), (1, 23, 32), (1, 24, 27), (1, 24, 30), (1, 24, 33), (1, 25, 28), (1, 25, 31), (1, 25, 34), (1, 26, 29), (1, 26, 32), (1, 26, 35), (1, 27, 30), (1, 27, 33), (1, 27, 36), (1, 28, 31), (1, 28, 34), (1, 28, 37), (1, 29, 32), (1, 29, 35), (1, 29, 38), (1, 30, 33), (1, 30, 36), (1, 30, 39), (1, 31, 34), (1, 31, 37), (1, 31, 40), (1, 32, 35), (1, 32, 38), (1, 32, 41), (1, 33, 36), (1, 33, 39), (1, 33, 42), (1, 34, 37), (1, 34",
        "num_ids": 2809,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0",
        "test": "assert count_divisors(1) == 0, \"count_divisors(1) should return 0, but returned {}\".format(count_divisors(1))",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2 == 1:\n                total_sum += arr[j]\n    return total_sum",
        "test": "assert odd_length_sum([]) == 0, \"Incorrect sum of odd length subarrays\"",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert the RGB values to HSV values\n    r, g, b = r/255, g/255, b/255\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val\n    delta = max_val - min_val\n    if delta == 0:\n        s = 0\n    else:\n        if max_val == r:\n            h = 60 * (((g - b) / delta) % 6)\n        elif max_val == g:\n            h = 60 * (((b - r) / delta) + 2)\n        else:\n            h = 60 * (((r - g) / delta) + 4)\n        if h < 0:\n            h += 360\n        if s == 0:\n            s = delta / max_val\n        else:\n            s = delta / max_val\n    return h, s, v",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0) # black",
        "num_ids": 2193,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of all even and odd numbers.\n    \"\"\"\n    # Initialize variables to store the even and odd numbers\n    even_num = 0\n    odd_num = 0\n    product = 1\n    \n    # Iterate through the list of numbers\n    for num in lst:\n        # Check if the number is even\n        if num % 2 == 0:\n            even_num += num\n        # Check if the number is odd\n        else:\n            odd_num += num\n            \n    # Calculate the product of the even and odd numbers\n    product = even_num * odd_num\n    \n    return product",
        "test": "assert mul_even_odd([0, 2, 4, 6, 8]) == 0",
        "num_ids": 1148,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for i in test_str:\n        if i.isdigit():\n            int_tuple += (int(i),)\n    return int_tuple",
        "test": "assert tuple_str_int(\"1, 2, 3\") == (1, 2, 3)",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 2) == 1",
        "num_ids": 926,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{2})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three(\"abbabbabab\") == True",
        "num_ids": 1731,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = list(test_list)\n    new_list.append(test_str)\n    return tuple(new_list)",
        "test": "assert new_tuple([], 'orange') == ('orange',)",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # iterate over the list of numbers\n    for i in range(0, len(nums), 2):\n        # check if the current index contains an even number\n        if nums[i] % 2 == 0:\n            # if so, check if the number is even\n            if nums[i] % 2 == 0:\n                # if it is, return True\n                return True\n    \n    # if the loop completes without returning True, return False\n    return False",
        "test": "assert even_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False",
        "num_ids": 903,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Use list comprehension to create a new tuple without the nested tuples\n    new_tup = tuple(x for tup in test_tup for x in tup if type(x) not in [tuple])\n    return new_tup",
        "test": "assert remove_nested([('a', ('b', ('c', ('d', 'e'))))] * 2)!= [('a', ('b', ('c', ('d', 'e'))))] * 3, \"remove_nested removed unexpected nested tuples\"",
        "num_ids": 874,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "test": "assert count_list([]) == 0",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize variables\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    \n    # Find the last index of the element\n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # Return the result\n    return result",
        "test": "assert last([1,2,3,4,5],5) == 4",
        "num_ids": 1313,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "test": "assert text_starta_endb('a1b2c3d4') == True",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum",
        "test": "assert return_sum({}) == 0, \"return_sum({}) should return 0\"",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    s = 0\n    for i in range(l, r+1, 2):\n        s += i\n    return s",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15, \"The sum of [1, 2, 3, 4, 5] should be 15.\"",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF",
        "test": "assert left_rotate(0,1) == 0",
        "num_ids": 1006,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()",
        "test": "assert remove_all_spaces(\"   Hello  World    \") == \"HelloWorld\"",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count",
        "test": "assert test_three_equal(2, 2, 2) == 3",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        # Swap the first and last element of the array\n        arr[i], arr[n-i-1] = arr[n-i-1], arr[i]\n        # Check if the array is sorted\n        if arr[:n//2] <= arr[n//2:]:\n            return 0\n    # If the array is not sorted, return 1 for each swap\n    return n//2\n",
        "test": "assert count_rotation([1, 1, 1, 1, 1]) == 0",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    It does this by iterating from 1 to the square root of the given number, and checking if the square of each number is equal to the given number.\n    If it is, then the given number is a perfect square.\n    \"\"\"\n    sqrt_n = int(n ** 0.5)  # Find the square root of n\n    for i in range(1, sqrt_n+1):\n        if i ** 2 == n:\n            return True\n    return False",
        "test": "assert is_perfect_square(1025) == False",
        "num_ids": 805,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([1, 2, 3, 4, 5]) == True, \"First test case failed.\"",
        "num_ids": 868,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_list = []\n\n    # Loop through the lists in the input list\n    for sublist in lists:\n        # Calculate the sum of the elements in the sublist\n        sublist_sum = sum(sublist)\n\n        # If the sum is greater than the maximum sum found so far, update the maximum sum and the corresponding list\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list",
        "test": "assert max_sum_list([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [1, 2, 3, 4]]) == [[11, 12, 13, 14]]",
        "num_ids": 1496,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str) - 1 or not test_str[i+1].isupper():\n                max_run = max(max_run, i - start + 1)\n            start = i\n    return max_run",
        "test": "assert max_run_uppercase(\"hello world\") == 0",
        "num_ids": 1241,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K([(1, 2, 3), (4, 5, 6)], 7) == False",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples should have the same length.\"\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 2, 3), (1, 1, 3)) == False",
        "num_ids": 1142,
        "indeed": false
    }
]