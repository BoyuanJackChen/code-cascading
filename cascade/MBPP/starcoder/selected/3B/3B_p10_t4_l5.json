[
    {
        "number": 2,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements",
        "test": "assert similar_elements([1,2,3], [1,2,3]) == [1,2,3]",
        "num_ids": 1793,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(7) == False, \"Failed to detect non-prime number\"",
        "num_ids": 1763,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 31,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a heap\n    nums = hq.nlargest(n, nums)\n    # Convert the heap back to a list\n    largest_nums = list(nums)\n    return largest_nums",
        "test": "assert heap_queue_largest([],10) == []",
        "num_ids": 2251,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 31,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # check if x is a power of 2 by checking if x & (x-1) == 0\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(16) == True",
        "num_ids": 1567,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all the words in the string which are at least 4 characters long.\n    '''\n    # using regular expressions to find all words in the string that are at least 4 characters long\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # filtering the list to get only those words which are at least 4 characters long\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    \n    return long_words",
        "test": "assert find_char_long('python') == ['python']",
        "num_ids": 1456,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 1381,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_Rotations(str):\n    # check if the string is empty\n    if len(str) == 0:\n        return 0\n    \n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for c in str:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    \n    # sort the dictionary based on the frequency of characters\n    sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n    \n    # initialize the minimum number of rotations to 0\n    min_rotations = 0\n    \n    # iterate over each character in the string\n    for i in range(len(str)):\n        # if the frequency of the current character is 1, then the string has already been rotated\n        if freq[sorted_freq[i][0]] == 1:\n            break\n        \n        # if the frequency of the current character is greater than 1, then we need to rotate the string\n        if freq[sorted_freq[i][0]] > 1:\n            min_rotations += 1\n        \n        # update the frequency of the current character in the string\n        freq[sorted_freq[i][0]] -= 1\n        \n        # if the frequency of the current character is 0, then we need to rotate the string again\n        if freq[sorted_freq[i][0]] == 0:\n            min_rotations += 1\n    \n    return min_rotations",
        "test": "assert find_Rotations(\"\") == 0, \"find_Rotations('') should return 0\"",
        "num_ids": 2759,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 28,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)",
        "test": "assert remove_Occ(\"hello\", \"o\") == \"hell\"",
        "num_ids": 1854,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the matrix by the row sums in ascending order\n    sorted_M = sorted(M, key=lambda row_sum: row_sum)\n\n    # Return the sorted matrix\n    return sorted_M",
        "test": "assert sort_matrix([[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]) == [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]",
        "num_ids": 3008,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the lengths of the sides of a triangular prism and returns the volume of the prism.\n    '''\n    volume = l*b*h/3\n    return volume",
        "test": "assert find_Volume(7,8,9) == 72.0",
        "num_ids": 1579,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match a sequence of lowercase letters\n    pattern = r'[a-z]+(_[a-z]+)*'\n\n    # Use the re.search() function to search for matches in the input text\n    match = re.search(pattern, text)\n\n    # If a match is found, return True, otherwise return False\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"HELLO_WORLD\") == False, \"Function should return False for input 'HELLO_WORLD'\"",
        "num_ids": 1688,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(3) == 12, \"square_perimeter(3) should return 12\"",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def str_to_list(string, no_of_chars=256):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_string = string[:no_of_chars]\n    second_string = string[no_of_chars:]\n    return list(set(first_string) - set(second_string))",
        "test": "assert str_to_list(\"\") == [], \"empty string should return empty list\"",
        "num_ids": 3636,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store the count of each element in the array\n    element_count = {}\n    # loop through the array and update the count for each element\n    for num in arraynums:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    # loop through the dictionary and check if any element has a count greater than 1\n    for count in element_count.values():\n        if count > 1:\n            return True\n    # if no duplicates are found, return False\n    return False",
        "test": "assert test_duplicate([1,1,1,1,1]) == True",
        "num_ids": 2071,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define a list of possible numbers to check for\n    possible_woodalls = [1, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n    # Check if the given number is in the list of possible woodalls\n    if x in possible_woodalls:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(100) == False",
        "num_ids": 2127,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp //= 10\n    return num == (rev_num - 2)",
        "test": "assert rev(5) == False, \"5 is not one less than twice its reverse\"",
        "num_ids": 1728,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize variables\n    max_num = 0\n    curr_num = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current digit is less than the current number, add it to the current number\n        if arr[i] < curr_num:\n            curr_num += arr[i]\n        # If the current digit is greater than the current number, update the maximum number\n        else:\n            max_num = max(max_num, curr_num)\n            curr_num = arr[i]\n\n    # Add the remaining digits to the maximum number\n    max_num = max(max_num, curr_num)\n\n    return max_num",
        "test": "assert find_Max_Num([9, 9, 9, 9, 9]) == 9, \"Function should return 9\"",
        "num_ids": 2177,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-1,2) == False",
        "num_ids": 1710,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def is_octagonal(n):\n    def is_square(x):\n        return x * x == n\n    \n    for i in range(1, int(n ** 0.5) + 1):\n        if is_square(i) or is_square(n - i):\n            return True\n    \n    return False\n\ndef nth_octagonal(n):\n    if not (1 <= n <= 100):\n        return \"Invalid input\"\n    \n    if is_octagonal(n):\n        return n\n    else:\n        return \"There is no nth octagonal number\"",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1883,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a defaultdict to store the frequency of each digit in the string\n    freq = defaultdict(int)\n    \n    # Iterate through the string and count the frequency of each digit\n    for char in s:\n        freq[int(char)] += 1\n    \n    # Initialize the count of substrings to 0\n    count = 0\n    \n    # Iterate through the frequency dictionary and for each digit,\n    # find the substrings with the sum of digits equal to their length\n    for num in freq:\n        if num == len(str(num)):\n            count += freq[num]\n    \n    return count",
        "test": "assert count_Substrings(\"\") == 0",
        "num_ids": 2057,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1258,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([(1, 2), (5, 6), (3, 4)]) == 4, \"The maximum difference should be 4.\"",
        "num_ids": 2235,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks([(90, 'Maths'), (80, 'English'), (70, 'Science'), (60, 'History'), (50, 'Geography')]) == [('70', 'Science'), ('60', 'History'), ('50', 'Geography'), ('80', 'English'), ('90', 'Maths')]",
        "num_ids": 1882,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1410,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([]) == 0",
        "num_ids": 1687,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def bell_number(n):\n    # Initialize variables\n    total_ways = 1\n    i = 2\n    \n    # Find the number of ways to partition the set of Bell numbers\n    while i * i <= n:\n        if n % i:\n            # If i is not a factor of n, increment the total_ways and divide n by i\n            total_ways += 1\n            n //= i\n        else:\n            # If i is a factor of n, divide n by i and increment i\n            n //= i\n            i += 1\n    \n    # Add the last Bell number to the total_ways\n    if n > 1:\n        total_ways += 1\n    \n    return total_ways",
        "test": "assert bell_number(1) == 1",
        "num_ids": 2066,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    if A[1] > A[0]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    elif A[1] < A[0]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n    return True",
        "test": "assert is_Monotonic([1, 2, 4, 3, 5]) == False, \"Test failed for input [1, 2, 4, 3, 5]\"",
        "num_ids": 2613,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i not in l:\n            return False\n    return True",
        "test": "assert is_sublist([1,2,3,4], [1,2,3,5]) == False",
        "num_ids": 1713,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True",
        "test": "assert find_equal_tuple([(1, 2), (1, 2)]) == True",
        "num_ids": 1648,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    start = 0\n    end = n-1\n    \n    while swapped:\n        swapped = False\n        for i in range(start, end):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        \n        swapped = False\n        for i in range(end-1, start-1, -1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        \n        start += 1\n        end -= 1\n\n    return nums",
        "test": "assert comb_sort([]) == []",
        "num_ids": 2391,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n % (i**2) == 0:\n                return True\n    return False",
        "test": "assert dif_Square(4) == True, \"dif_Square(4) should be True\"",
        "num_ids": 1882,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    return True",
        "test": "assert not is_samepatterns(['red', 'green', 'blue'], ['red', 'green', 'blue','red', 'green', 'yellow'])",
        "num_ids": 2620,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K and returns a list of tuples whose elements are all divisible by K.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 10) == []",
        "num_ids": 2906,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(0) == True, \"0 is not divisible by 11\"",
        "num_ids": 1272,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.lower() # convert all characters to lowercase\n    words = s.split() # split the string into words\n    odd_word_count = 0\n    for word in words:\n        if len(word) % 2 == 1: # check if the length of the word is odd\n            odd_word_count += 1\n    if odd_word_count > 0:\n        return True\n    else:\n        return False",
        "test": "assert word_len(\"Hello\") == True",
        "num_ids": 1426,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * n * (n - 1) * (n - 2)",
        "test": "assert tetrahedral_number(0) == 0",
        "num_ids": 1733,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    \n    return volume",
        "test": "assert volume_sphere(1) == (4/3)*math.pi*(1)**3, \"volume_sphere(1) is incorrect\"",
        "num_ids": 1322,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for char in strr:\n        char = ord(char)\n        char = (char % 26) + ord('a')\n        char = chr(char)\n    return char",
        "test": "assert get_Char('') == 0, 'Incorrect result for get_Char(\"\")'",
        "num_ids": 1875,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n + 1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n]",
        "test": "assert sequence(1) == 1, \"The sequence for n=1 is incorrect.\"",
        "num_ids": 3266,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_sphere(3) == math.pi*4*3*3, \"surfacearea_sphere(3) is incorrect\"",
        "num_ids": 1001,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 0\n    for i in range(1, n + 1):\n        a += (2 * i - 1) ** 2\n    return a",
        "test": "assert centered_hexagonal_number(0) == 0",
        "num_ids": 1861,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create a new dictionary to store the merged values\n    merged_dict = {}\n    # loop through the keys in each dictionary\n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        # if the key is in both dictionaries, add the values together\n        if key in dict1 and key in dict2:\n            merged_dict[key] = dict1[key] + dict2[key]\n        # if the key is only in one dictionary, add the value from that dictionary\n        elif key in dict1:\n            merged_dict[key] = dict1[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        # if the key is only in the third dictionary, add the value from that dictionary\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n    return merged_dict",
        "test": "assert merge_dictionaries_three({},{},{}) == {}, \"merge_dictionaries_three({},{},{}) should return an empty dictionary when called with empty dictionaries.\"",
        "num_ids": 2744,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict",
        "test": "assert freq_count([]) == {}",
        "num_ids": 2258,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 22,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def closest_num(N):\n    '''\n    This function takes an integer N and returns the closest smaller number than N.\n    '''\n    n = 0\n    while n < N:\n        n += 1\n    return n - 1",
        "test": "assert closest_num(3) == 2",
        "num_ids": 1373,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "test": "assert len_log(['123', '456', '789']) == 3",
        "num_ids": 1265,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for value in str1:\n        if sub_str in value:\n            return True\n    return False",
        "test": "assert find_substring(['hello', 'world', 'python', 'programming'], 'java') == False, \"find_substring(hello world python programming, java) should return False\"",
        "num_ids": 1943,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: # if the number is even\n        return True # return True because even numbers are always undulating\n    else:\n        for i in range(1, n//2+1): # iterate from 1 to half the number\n            if n % i == 0: # check if the number is divisible by any number between 1 and half the number\n                return False # return False because odd numbers can be undulating if they are divisible by only 1 or by 2\n        return True # if no factors of 1 or 2 were found in the range from 1 to half the number, the number is undulating",
        "test": "assert is_undulating(1) == True",
        "num_ids": 1374,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a,abs(b))\n    else:\n        return a*power(a,b-1)",
        "test": "assert power(2,3) == 8, \"The function should calculate 2 to the power of 3 and return the value of 8.\"",
        "num_ids": 1323,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=lambda x: (x[1], x[0]))[0]",
        "test": "assert index_minimum([(\"apple\", 5), (\"banana\", 3), (\"cherry\", 1)]) == \"cherry\"",
        "num_ids": 2301,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for sub_list in lst:  \n        if len(sub_list) < min_length:  \n            min_length = len(sub_list)  \n    return min_length",
        "test": "assert Find_Min_Length([[1],[2],[3],[4],[5]]) == 1",
        "num_ids": 2038,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count",
        "test": "assert divisor(1) == 1",
        "num_ids": 1271,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary\n    freq = {}\n    # loop through each element in the list\n    for elem in list1:\n        # if the element is a list, recursively call the function on it\n        if isinstance(elem, list):\n            # recursively call the function on the list and add the result to the dictionary\n            freq.update(frequency_lists(elem))\n        # if the element is not a list, update its frequency in the dictionary\n        else:\n            freq[elem] = freq.get(elem, 0) + 1\n    # return the dictionary with frequency counts\n    return freq",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 3100,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)",
        "test": "assert multiply_num([1]) == 1.0",
        "num_ids": 1256,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "test": "assert decimal_to_binary(10) == \"1010\"",
        "num_ids": 1479,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize two variables, one for the original number and one for the reversed number\n    original = num\n    reversed_num = 0\n\n    # Convert the number to its reverse in reverse order\n    for i in range(len(str(original))):\n        reversed_num += int(str(original)[i]) * (10 ** (len(str(original)) - i - 1))\n\n    # Check if the original number is already a palindrome\n    if str(original) == str(original)[::-1]:\n        return original\n\n    # Increment the reversed number until it becomes a palindrome\n    while True:\n        reversed_num += 1\n        if str(reversed_num) == str(reversed_num)[::-1]:\n            break\n\n    # Calculate the next smallest palindrome by comparing the original number and the reversed number\n    next_palindrome = 0\n    if original > reversed_num:\n        next_palindrome = original\n    else:\n        next_palindrome = reversed_num\n\n    return next_palindrome",
        "test": "assert next_smallest_palindrome(1000000) == 1000001",
        "num_ids": 3236,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    \n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 2) == 2",
        "num_ids": 2489,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word by underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case_word = words[0]\n    for word in words[1:]:\n        camel_case_word += word.capitalize()\n    return camel_case_word",
        "test": "assert snake_to_camel('') == ''",
        "num_ids": 1812,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n    else:\n        return eulerian_num(n-1, m)",
        "test": "assert eulerian_num(1, 1) == 1 ",
        "num_ids": 3646,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist in place using the sorted() function\n        sorted_sublist = sorted(sublist)\n        # Replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist\n    # Return the modified input list\n    return input_list",
        "test": "assert sort_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]",
        "num_ids": 1997,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "test": "assert count([]) == 0, 'count([]) should return 0'",
        "num_ids": 949,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup",
        "test": "assert add_lists([1, 2, 3], (4, 5)) == ([1, 2, 3, 4, 5], (4, 5))",
        "num_ids": 1481,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a list of all the numbers to be merged\n    merge_list = num1 + num2 + num3\n    \n    # Sort the list using heap sort\n    heapq.heapify(merge_list)\n    \n    # Extract the sorted list and return it\n    return heapq.nsmallest(len(merge_list), merge_list)",
        "test": "assert merge_sorted_list([1], [], []) == [1]",
        "num_ids": 2803,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n        count += sum(int(i) for i in s)\n    return count",
        "test": "assert odd_Equivalent(\"1010101010\", 0) == 0",
        "num_ids": 2761,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store the unique elements of the first list\n    unique_elements = set(nestedlist[0])\n    \n    # Iterate over the rest of the lists\n    for lst in nestedlist[1:]:\n        # Create a set to store the unique elements of the current list\n        current_elements = set(lst)\n        \n        # Find the intersection of the two sets\n        common_elements = current_elements.intersection(unique_elements)\n        \n        # Update the set of unique elements to be the intersection of the current and previous sets\n        unique_elements = common_elements\n    \n    # Convert the set back to a list\n    common_elements = list(unique_elements)\n    \n    return common_elements",
        "test": "assert common_in_nested_lists([[], [], [], [], []]) == []",
        "num_ids": 2465,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 2071,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dit in list1:\n        if dit:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 1462,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result",
        "test": "assert tuple_to_int((10,)) == 10",
        "num_ids": 1271,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (str, int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list",
        "test": "assert list_to_float([[1, 2, 3], [4, 5]]) == [[1.0, 2.0, 3.0], [4.0, 5.0]]",
        "num_ids": 2481,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == ['hello', 'world']",
        "num_ids": 1153,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to store the element that appears only once\n    unique_element = None\n    \n    # Loop through the array\n    for num in arr:\n        # Check if the current element is already equal to the unique_element\n        if num == unique_element:\n            # If it is, return that element\n            return num\n        # If the current element is not equal to the unique_element, update unique_element to the current element\n        else:\n            unique_element = num\n    \n    # If the loop completes without finding the element that appears only once, return None\n    return None",
        "test": "assert search([5, 5, 5, 5, 5]) == 5, \"Search for 5 in [5, 5, 5, 5, 5] should return 5\"",
        "num_ids": 2595,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0]*list1[j][1]), abs(list1[i][1]*list1[j][0]))\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(1, 2), (3, 4), (5, 6), (-2, -1), (-4, -3)]) == 24",
        "num_ids": 2624,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    for i in range(1, limit):\n        if i == 1:\n            continue\n        \n        if i == 2:\n            continue\n        \n        if i > 2:\n            if i % 2 == 0:\n                if i % 3 == 0:\n                    continue\n            elif i % 3 == 0:\n                continue\n            \n            if i > 2:\n                j = i\n                while j <= limit:\n                    if j == i:\n                        break\n                    elif j == 2 * i:\n                        amicable_sum += j\n                        break\n                    j += 1\n    \n    return amicable_sum",
        "test": "assert amicable_numbers_sum(100) == 1638",
        "num_ids": 2433,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle",
        "test": "assert angle_complex(2,0) == 0",
        "num_ids": 1421,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n\n    for i in range(n):\n        ones = 0\n        zeros = 0\n\n        for j in range(i, n):\n            if string[j] == '1':\n                ones += 1\n            else:\n                zeros += 1\n\n            diff = ones - zeros\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff",
        "test": "assert find_length(\"1101010\") == 2",
        "num_ids": 5210,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Calculate the GCD of a and b\n    gcd = find_gcd(a, b)\n\n    # Initialize a variable to store the sum of common divisors of a and b\n    sum_of_common_divisors = 0\n\n    # Loop through all the numbers from 1 to the GCD and check if any of them divide both a and b evenly\n    for i in range(1, gcd+1):\n        if i % a == 0 and i % b == 0:\n            # If a divisor of both a and b is found, add it to the sum of common divisors\n            sum_of_common_divisors += i\n\n    return sum_of_common_divisors\n\n\ndef find_gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of two given numbers using the Euclidean algorithm.\n    \"\"\"\n    # If b is zero, return a as the GCD\n    if b == 0:\n        return a\n\n    # Recursively find the GCD of b and the remainder of a divided by b\n    gcd = find_gcd(b, a % b)\n\n    return gcd",
        "test": "assert sum(10, 20) == 0",
        "num_ids": 2391,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6, \"multiply_int function should multiply two integers correctly.\"",
        "num_ids": 928,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list",
        "test": "assert long_words(10, ['apple', 'banana', 'cherry', 'date', 'elderberry']) == []",
        "num_ids": 2965,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the elements in each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    # Check if the row and column sums are equal\n    if row_sums == col_sums:\n        # Calculate the sum of the elements in the diagonal\n        diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n        # Check if the diagonal sum is equal to the sum of the matrix\n        if diagonal_sum == sum(sum(row) for row in my_matrix):\n            return True\n    return False",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 3145,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n    return max_num",
        "test": "assert max_occurrences([1, 2, 2, 3, 2, 4, 2]) == 2",
        "num_ids": 2146,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 24,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    reversed_str = ''\n    for char in str1:\n        if char.lower() in vowels:\n            reversed_str = char.lower() + reversed_str\n        else:\n            reversed_str = char + reversed_str\n    return reversed_str",
        "test": "assert reverse_vowels(\"racecar\") == \"racecar\"",
        "num_ids": 1711,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for item in tup1:\n        string += str(item)\n    return string",
        "test": "assert tup_string(()) == \"\"",
        "num_ids": 939,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum(num for num in nums if num < 0)",
        "test": "assert sum_negativenum([0, -1, -2, -3, -4]) == -10, \"Incorrect result for input [0, -1, -2, -3, -4]\"",
        "num_ids": 1808,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 1135,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [1] * len(nums))\n    count_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count[count_zeroes] += 1\n            count_zeroes += 1\n            \n    count_non_zeroes = sum(count) - count_zeroes\n    \n    return count_zeroes / count_non_zeroes",
        "test": "assert zero_count([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0.0",
        "num_ids": 3440,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    \n    for i in range(1, n+1): \n        if n == 2**i: \n            return True\n    \n    return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(25) == False, \"The number 25 can be represented as sum of non-zero powers of 2\"",
        "num_ids": 2741,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference",
        "test": "assert circle_circumference(5) == 31.4159, \"Circle circumference should be 31.4159\"",
        "num_ids": 1668,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    # Initialize an empty set to store the flattened numbers\n    flat_set = set()\n\n    # Loop through each list in the test_list\n    for item in test_list:\n\n        # Check if the item is a list\n        if isinstance(item, list):\n\n            # Recursively flatten the nested list\n            flat_set.update(extract_singly(item))\n\n        # Check if the item is a number\n        elif isinstance(item, (int, float)):\n\n            # Add the number to the flat_set\n            flat_set.add(item)\n\n    # Return the flattened set\n    return flat_set",
        "test": "assert extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}",
        "num_ids": 1605,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        # Find the maximum element in the list\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the first element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 3071,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3,4],[1,2,3,4],[5,6,7,8]) == 0",
        "num_ids": 1810,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "test": "assert find_lists([1, 2, [3, 4], [5, [6, 7], 8]]) == 2, \"find_lists did not return the correct number of lists\"",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "test": "assert max_Abs_Diff([10, -5, 3, 7, -1]) == 15",
        "num_ids": 1809,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # check if the equation is valid\n    if a*n + b*n!= n:\n        return None\n    \n    # calculate the x and y values using the quadratic formula\n    discriminant = b*b - 4*a*n\n    \n    if discriminant < 0:\n        return None\n    \n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    \n    if root1 > root2:\n        root1, root2 = root2, root1\n    \n    # check if the roots are valid\n    if root1 < 0 or root2 < 0:\n        return None\n    \n    return (int(root1), int(root2))",
        "test": "assert find_solution(4, 3, 10) is None",
        "num_ids": 2548,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 1667,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum",
        "test": "assert sum_series(0) == 0",
        "num_ids": 1630,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n\ndef perimeter_polygon(n, s):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the number of sides and side length.\n    '''\n    perimeter = n * s\n    return perimeter\n\ndef main():\n    # Test case for area_polygon() function\n    print(area_polygon(3, 4)) # Output: 6\n\n    # Test case for perimeter_polygon() function\n    print(perimeter_polygon(5, 3)) # Output: 15",
        "test": "assert area_polygon(3, 4) == 6, \"Incorrect area calculation\"",
        "num_ids": 2271,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # calculate the sum of the divisors of n\n    divs = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divs.append(i)\n            if n // i!= i:\n                divs.append(n // i)\n\n    # check if the sum of the divisors is the same\n    return sum(divs) == n * (len(divs) + 1)",
        "test": "assert div_sum(20) == False, \"div_sum(20) should be False\"",
        "num_ids": 2301,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in range(26):\n        char = chr(i+97)\n        if char in str1:\n            count += str1.count(char)\n    return count",
        "test": "assert count_char_position('') == 0",
        "num_ids": 2393,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1,2,4,6,8]) == 0",
        "num_ids": 1945,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Use bitwise operations to find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n    return power",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 1598,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,1,2,3],2) == 2",
        "num_ids": 1455,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 2036,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n",
        "test": "assert perimeter_pentagon(5) == 25",
        "num_ids": 2336,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "test": "assert count_occurance('') == 0",
        "num_ids": 1294,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = set() # set to store unique data types\n    \n    for element in test_tuple:\n        types.add(type(element))\n    \n    return len(types) == 1 # return True if all elements have the same data type, False otherwise",
        "test": "assert check_type(('a', 'b', 'c')) == True, 'check_type function is working correctly'",
        "num_ids": 1668,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    majority_count = 0\n\n    for i in arr:\n        if i == x:\n            count += 1\n        elif i < x:\n            count -= 1\n        elif i > x:\n            count += 1\n\n        if count == 0:\n            majority_count = 0\n        elif count > 0:\n            majority_count += 1\n\n    return majority_count >= n/2",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 4) == False",
        "num_ids": 2544,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 2258,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Convert the string to a list\n    lst = list(str)\n    # Loop through the list and remove the odd index values\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst.pop(i)\n    # Convert the list to a string and return it\n    return ''.join(lst)",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 1447,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a counter variable to count the number of unset bits in the range\n    unset_bits_count = 0\n    # Iterate over all the bits in the range [l, r] and count the number of unset bits\n    for i in range(l, r+1):\n        # If the current bit is set, increment the unset_bits_count by 1\n        if n & (1 << i):\n            unset_bits_count += 1\n    # If the unset_bits_count is equal to 0, then all the bits are set in the given range\n    if unset_bits_count == 0:\n        return True\n    # Otherwise, return False\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(10, 2, 5) == False, \"The function should return False for n=10, l=2 and r=5.\"",
        "num_ids": 3102,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two pointers, one for positive and one for negative elements\n    pos_ptr = 0\n    neg_ptr = 0\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # Check if the current element is negative\n        if arr[i] < 0:\n            # If it is negative, move the negative pointer forward\n            neg_ptr += 1\n            # Check if the negative pointer is at the end of the array\n            if neg_ptr == n:\n                # If it is, move the negative pointer back to the beginning\n                neg_ptr = 0\n                # Move the positive pointer forward\n                pos_ptr += 1\n        # If the element is positive, move the positive pointer forward\n        else:\n            pos_ptr += 1\n            # Check if the positive pointer is at the end of the array\n            if pos_ptr == n:\n                # If it is, move the positive pointer back to the beginning\n                pos_ptr = 0\n                # Move the negative pointer forward\n                neg_ptr += 1\n\n    # Return the updated array\n    return arr",
        "test": "assert re_arrange_array([], 0) == []",
        "num_ids": 3871,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)",
        "test": "assert replace_blank(\"hello\", \"*\") == \"hello\"",
        "num_ids": 816,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([1,3,5,7,9], 0) == []",
        "num_ids": 2269,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area",
        "test": "assert lateralsuface_cylinder(3,4) == 24.0, \"lateral surface area is incorrect\"",
        "num_ids": 1390,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert volume_cube(1) == 1, \"Volume of cube with side length 1 should be 1\"",
        "num_ids": 1253,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 1636,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 110,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the frequency of each tuple in the list\n    count = Counter(test_list)\n    # Use a dictionary to store the unique tuples and their frequency counts\n    freq_dict = {}\n    # Iterate through the Counter object and store the unique tuples and their frequency counts in the freq_dict dictionary\n    for tup, freq in count.items():\n        if tup not in freq_dict:\n            freq_dict[tup] = 0\n        freq_dict[tup] += freq\n    # Return the freq_dict dictionary\n    return freq_dict",
        "test": "assert check_occurences([]) == {}",
        "num_ids": 2376,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i >= 2 and str[i:j]!= \"\":\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 1452,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(m + 1):\n        for j in range(2, n + 1):\n            if i + j <= m:\n                total_sequences += 1\n    return total_sequences",
        "test": "assert get_total_number_of_sequences(5,5) == 10, \"Test failed for get_total_number_of_sequences with m=5 and n=5.\"",
        "num_ids": 2663,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)\n    return list1",
        "test": "assert replace_list([1,2,3], []) == [1,2]",
        "num_ids": 1436,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"Hello, World!\") == 13, \"Expected count to be 13, got {}\".format(count_charac(\"Hello, World!\"))",
        "num_ids": 1008,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Check if the given number is already a perfect square\n    if N >= 0 and math.sqrt(N) == int(math.sqrt(N)):\n        # Find the next perfect square greater than N\n        next_sq = N\n        while next_sq < 0:\n            next_sq += 1\n        while math.sqrt(next_sq)!= int(math.sqrt(next_sq)):\n            next_sq += 1\n        return next_sq\n    else:\n        # Return the original number if it is not a perfect square\n        return N",
        "test": "assert next_Perfect_Square(0) == 0",
        "num_ids": 1948,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def max_sum(arr):\n    if len(arr) < 3:\n        raise ValueError(\"The array must have at least 3 elements\")\n\n    # Initialize variables to keep track of the maximum sum and the current subsequence\n    max_sum_so_far = arr[0]\n    current_sum = arr[0]\n\n    # Iterate through the array, starting from the second element\n    for i in range(1, len(arr)):\n        # If the current element is greater than the previous element, add it to the current_sum, otherwise subtract it from the current_sum\n        if arr[i] > arr[i - 1]:\n            current_sum += arr[i]\n        else:\n            current_sum -= arr[i - 1]\n\n        # Update the maximum sum if the current_sum becomes greater\n        if current_sum > max_sum_so_far:\n            max_sum_so_far = current_sum\n\n    return max_sum_so_far\n",
        "test": "assert max_sum([1, 2, 3, 2, 1]) == 6",
        "num_ids": 3776,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 31,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    lower_bound = 0\n    upper_bound = number\n    while True:\n        mid = (lower_bound + upper_bound) / 2\n        if mid**2 == number:\n            return mid\n        elif mid**2 < number:\n            lower_bound = mid\n        else:\n            upper_bound = mid",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 1858,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def lps(s):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    max_length = 1\n    start = 0\n    max_length_start = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j] and (j - i + 1 > max_length):\n                max_length = j - i + 1\n                start = i\n                max_length_start = j\n    return max_length",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 3125,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum",
        "test": "assert harmonic_sum(0) == 0.0 # correct value for n=0",
        "num_ids": 1372,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "test": "assert intersection_array([1,2,3], [2,3,4]) == [2,3]",
        "num_ids": 2312,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 4, 5), 3) == 1, \"count_X() should return 1 for (1, 2, 3, 4, 5) and 3\"",
        "num_ids": 1995,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + lst",
        "test": "assert insert_element([7],8) == [8,7]",
        "num_ids": 1895,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        if isinstance(num, complex):\n            # Convert the complex number to polar coordinates\n            r, theta = cmath.polar(num)\n            # Add the polar coordinates to the result list\n            result.append((r, theta))\n        else:\n            # Non-complex number found, add it to the result list unchanged\n            result.append(num)\n    return result",
        "test": "assert convert([-3,-4]) == [(3-4j), 5.493061443340548j]",
        "num_ids": 1864,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5, \"count_integer([1, 2, 3, 4, 5]) should return 5\"",
        "num_ids": 1600,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if len(l[i:j]) == n:\n                result.append(tuple(l[i:j]))\n    return result",
        "test": "assert combinations_colors([1, 2, 3], 1) == [(1,), (2,), (3,)], \"combinations_colors([1, 2, 3], 1) == [(1,), (2,), (3,)]\"",
        "num_ids": 2730,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 2036,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 840,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(test_tup1)\n    if max_val == test_tup1[0]:\n        return test_tup1\n    else:\n        return test_tup2",
        "test": "assert maximize_elements((6, 5, 4), (3, 2, 1)) == (6, 5, 4)",
        "num_ids": 2716,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    while True:\n        if all(p % i!= 0 for i in range(2, int(p**0.5)+1)):\n            if n == 1:\n                return p\n            elif n > 1:\n                n -= 1\n        p += 1",
        "test": "assert newman_prime(1) == 2, \"Incorrect output for n=1\"",
        "num_ids": 2735,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Input tuples must be of equal length\"\n    \n    # Perform element-wise division and return the result\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))",
        "test": "assert division_elements((1,2,3), (4,5,6)) == (0.25, 0.4, 0.5)",
        "num_ids": 2634,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts where the length of the first part is L.\n    \"\"\"\n    if len(lst) <= L:\n        return (lst, [])\n    else:\n        first_part = lst[:L]\n        second_part = lst[L:]\n        return (first_part, second_part)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])",
        "num_ids": 2550,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Calculate the dog's age in years based on their height\n    dog_years = h_age / 12\n\n    # Return the dog's age in years\n    return dog_years",
        "test": "assert dog_age(0) == 0.0, \"dog_age function failed for h_age=0.\"",
        "num_ids": 1457,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 2799,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6*l**2",
        "test": "assert lateralsurface_cube(1) == 6, \"The lateral surface area of a cube with side length 1 should be 6.\"",
        "num_ids": 1400,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_natural_numbers = 0\n    sum_of_squares = 0\n\n    for i in range(1, n+1, 2):\n        odd_natural_numbers += i\n        sum_of_squares += i*i\n\n    return sum_of_squares",
        "test": "assert square_Sum(1) == 1, 'The sum of squares of the first odd natural number should be 1'",
        "num_ids": 1618,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return find_star_num(n-1) + 1",
        "test": "assert find_star_num(1) == 1, \"The function find_star_num(1) returns the incorrect output\"",
        "num_ids": 1701,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97, \"Failed in testing the function for 'a'\"",
        "num_ids": 1172,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0",
        "num_ids": 2178,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 1732,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list",
        "test": "assert rear_extract([]) == []",
        "num_ids": 1217,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i],)\n    return result_tup",
        "test": "assert substract_elements((), ()) == ()",
        "num_ids": 1855,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum variable\n    sum = 0\n    \n    # Calculate the number of even indices and check if it is greater than 0\n    if (n & 1) == 0:\n        # If it is greater than 0, calculate the sum of even index binomial coefficients\n        for i in range(1, n+1, 2):\n            sum += math.comb(n, i)\n            \n    # Return the sum of even index binomial coefficients\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(1) == 0",
        "num_ids": 1970,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * (r**2) * h\n    return vol",
        "test": "assert volume_cylinder(10,1) == 314.159 # test case 4",
        "num_ids": 1813,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({'a':2,'b':3,'c':4,'d':5,'e':6},3) == {'b':3,'c':4,'d':5,'e':6}",
        "num_ids": 1518,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count",
        "test": "assert count_first_elements(()) == 0",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2",
        "test": "assert is_num_decagonal(0) == 0, \"The first decagonal number is 0\"",
        "num_ids": 2664,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 1838,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        else:\n            seen.add(element)\n    return True",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 1856,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns the subtraction of their elements element-wise.\n    '''\n    # initialize an empty list to store the result\n    result = []\n\n    # loop through the elements of the first list\n    for i in range(len(nums1)):\n        # check if the element exists in the second list\n        if nums1[i] in nums2:\n            # if it does, subtract the element from the result list and append it\n            result.append(nums1[i] - nums2[nums2.index(nums1[i])])\n        # if the element doesn't exist in the second list, append the element to the result list\n        else:\n            result.append(nums1[i])\n\n    # return the result list\n    return result",
        "test": "assert sub_list([],[]) == []",
        "num_ids": 1997,
        "indeed": false
    },
    {
        "number": 283,
        "max_answer_num": 32,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    for i in range(10):\n        count = 0\n        while n > 0:\n            if n % 10 == i:\n                count += 1\n            n //= 10\n        digits.append(count)\n\n    for digit in digits:\n        if digit > digit:\n            return False\n\n    return True",
        "test": "assert validate(1234) == True, \"Failed on 1234\"",
        "num_ids": 2210,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def check_element(list, element):\n    if len(list) == 0:\n        return False\n    if list[0] == element:\n        for item in list[1:]:\n            if item!= element:\n                return False\n        return True\n    else:\n        return False",
        "test": "assert check_element([1,2,3,4,5],2) == False, \"check_element([1,2,3,4,5],2) should return False\"",
        "num_ids": 1559,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    This function checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three('aabbbbccc') == True, 'text_match_two_three should return True for \"aabbbbccc\"'",
        "num_ids": 1605,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Get the maximum sum of a non-repeated sub-array\n    max_non_repeated_sum = max(sum(a[:i]) for i in range(1, n+1))\n\n    # Initialize the maximum sum of a repeated sub-array\n    max_repeated_sum = max_non_repeated_sum\n\n    # Iterate through all possible indices i in the array\n    for i in range(n):\n        # Get the sum of the repeated sub-array from i to n-1\n        repeated_sum = sum(a[i:n])\n\n        # Update the maximum sum of the repeated sub-array\n        max_repeated_sum = max(max_repeated_sum, repeated_sum)\n\n    # Return the maximum sum of the repeated sub-array\n    return max_repeated_sum",
        "test": "assert max_sub_array_sum_repeated([1,2,3,4], 4, 2) == 10",
        "num_ids": 3518,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    \n    while count < n:\n        sum_of_squares += count**2\n        count += 2\n        \n    return sum_of_squares",
        "test": "assert square_Sum(1) == 0",
        "num_ids": 1442,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 360,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list",
        "test": "assert max_length([[1,2,3],[4,5,6]]) == [6]",
        "num_ids": 2176,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the count of ways for each color \n    count = [[0 for x in range(k)] for y in range(n+1)]\n    \n    # Initialize the count of ways for each color \n    for i in range(k): \n        count[0][i] = 1\n        \n    # Fill the rest of the array using recursion \n    for i in range(1, n+1): \n        for j in range(k): \n            if i == 1: \n                count[i][j] = 1\n            else: \n                count[i][j] = count[i-1][(j+1)%k] + count[i-1][(j+2)%k]\n        \n    # Return the count of ways \n    return count[-1][0]",
        "test": "assert count_no_of_ways(5, 4) == 16",
        "num_ids": 3059,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m # integer division to find the quotient\n    return quotient",
        "test": "assert find(0,10) == 0, \"The function should return 0 for numbers 0 and 10\"",
        "num_ids": 1072,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 1246,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None:\n            max_val = item\n        elif item > max_val:\n            max_val = item\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4]) == 4, \"The max value should be 4\"",
        "num_ids": 1974,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "test": "assert sum_div(12) == 28",
        "num_ids": 1532,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n    inv_count = 0 # Initialize the variable to store the number of inversions\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Traverse the array and count the number of inversions\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += len(arr) - j - i - 1 # Add the number of elements in the array except for the current elements\n    \n    return inv_count # Return the number of inversions",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0, \"The result of get_Inv_Count([1, 2, 3, 4, 5]) is incorrect.\"",
        "num_ids": 3917,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # Define a helper function to flatten a list of lists\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    # Call the flatten helper function and return the result\n    return flatten(list1)",
        "test": "assert flatten_list([[1, 2], [3, [4, [5, 6]]]]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1818,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each group\n    max_agg = defaultdict(float)\n    for group, agg in stdata:\n        max_agg[group] = max(max_agg[group], agg)\n    # Find the maximum aggregate across all groups\n    max_agg_all = max(max_agg.values())\n    # Return the maximum aggregate across all groups\n    return max_agg_all",
        "test": "assert max_aggregate([('a', 5), ('b', 2), ('c', 3)]) == 5, 'Incorrect output for the given input'",
        "num_ids": 3315,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:]\n        if int(seq[:n]) + int(seq[-n:]) == 0:\n            count += 1\n    return count",
        "test": "assert count_binary_seq(1) == 1",
        "num_ids": 2242,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        max_depth = 0\n        for value in d.values():\n            depth = dict_depth(value)\n            max_depth = max(max_depth, depth + 1)\n        return max_depth\n    else:\n        return 0",
        "test": "assert dict_depth({'a': {'b': 1}, 'c': {'d': 2}}) == 2",
        "num_ids": 1675,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, an array of ranges, and a number of rotations.\n    It then returns the element at the given index after the given number of rotations.\n    '''\n    n = len(arr)\n\n    # Iterate through all the rotations\n    for i in range(rotations):\n        # Create a new array to store the rotated array\n        rotated_arr = []\n\n        # Iterate through all the elements in the array\n        for j in range(n):\n            # Calculate the new index\n            new_index = (j + i) % n\n            # Add the element at the new index to the new array\n            rotated_arr.append(arr[new_index])\n\n        # Update the array to the new rotated array\n        arr = rotated_arr\n\n    # Find the element at the given index in the original array\n    for j in range(n):\n        # Calculate the new index\n        new_index = (j + index) % n\n        # If the new index is within the range, return the element\n        if new_index >= 0 and new_index < n:\n            return arr[new_index]\n\n    # If the element is not found, return None\n    return None",
        "test": "assert find_Element([1, 2, 3], [(0, 0)], 0, 0) == 1",
        "num_ids": 3859,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    return p_words",
        "test": "assert start_withp(['car', 'bike', 'train']) == []",
        "num_ids": 1567,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = 0\n    max_ending_here = 0\n    i = 0\n\n    # Iterate through the array\n    while i < n:\n        # If the current element is greater than k, update max_ending_here and move to next element\n        if a[i] > k:\n            max_ending_here = max(a[i] + max_ending_here, max_ending_here)\n            i += 1\n        else:\n            # If the current element is not greater than k, update max_sum, max_ending_here and move to next element\n            if max_ending_here > max_sum:\n                max_sum = max_ending_here\n            max_ending_here = a[i]\n            i += 1\n\n    # If the last element is greater than k, update max_sum\n    if max_ending_here > max_sum:\n        max_sum = max_ending_here\n\n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1], 1, 0, 0) == 1",
        "num_ids": 3982,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(m):\n        temp = []\n        for j in range(n):\n            temp.append(deepcopy(tuplex[i*n+j]))\n        result.append(tuple(temp))\n    return tuple(result)",
        "test": "assert colon_tuplex(deepcopy((1,2,3,4)),2,2) == ((1,2),(3,4))",
        "num_ids": 2433,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n    for i in range(N):\n        product = 1\n        for num in nums1:\n            product *= num\n        for num in nums2:\n            product *= num\n        max_product = max(max_product, product)\n    return max_product",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 2) == [8, 12]",
        "num_ids": 2887,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2,4) == 4, \"The maximum of 2 and 4 should be 4.\"",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize variable to keep track of unset bits\n    unset_bits = 0\n\n    # Iterate through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is 0, unset_bits++\n        if bit == '0':\n            unset_bits += 1\n            # If unset_bits reaches the rightmost bit, set the leftmost unset bit to 1\n            if unset_bits == len(bin(n)[2:]):\n                return n | (1 << (unset_bits-1))\n    \n    # If no unset bits are found, return n unchanged\n    return n",
        "test": "assert set_left_most_unset_bit(2) == 2",
        "num_ids": 2650,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V",
        "test": "assert volume_cone(1,1) == 3.141592653589793, \"volume_cone failed: r=1, h=1\"",
        "num_ids": 2018,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # initialize the highest power of 2 found so far\n    highest_power = 0\n    \n    # loop through all powers of 2 from 1 to the square root of n\n    for power in range(1, int(n ** 0.5) + 1):\n        # check if this power of 2 is greater than or equal to n\n        if power * power <= n:\n            # if it is, update the highest power of 2 found so far\n            highest_power = power\n    \n    # return the highest power of 2 found so far\n    return highest_power",
        "test": "assert highest_Power_of_2(2) == 1",
        "num_ids": 1512,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def find_lucas(n): \n    \"\"\"\n    This function finds then'th lucas number.\n    \"\"\"\n    # initialize the first two lucas numbers\n    a, b = 2, 1\n    \n    # iterate through the remaining numbers\n    for i in range(2, n+1): \n        # calculate the next lucas number\n        c = a + b\n        # update the values of a and b\n        a = b\n        b = c\n    \n    # return the final value of a\n    return a",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 1670,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list",
        "test": "assert add_string(['apple', 'banana', 'cherry'], '{0} is a fruit.') == ['apple is a fruit.', 'banana is a fruit.', 'cherry is a fruit.']",
        "num_ids": 1455,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "test": "assert convert_list_dictionary([], [], []) == {}, 'convert_list_dictionary failed for empty list'",
        "num_ids": 2304,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1924,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n\n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 2011,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    return len(unique_set) == len(test_tup)",
        "test": "assert check_distinct((1,2,3)) == True",
        "num_ids": 1341,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first non-repeating character by iterating through the dictionary and checking if the frequency is 1\n    for char, freq in freq.items():\n        if freq == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 1985,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(regex, string))",
        "test": "assert check_char(\"a\") == True",
        "num_ids": 1454,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers\n    sorted_list = sorted([a, b, c])\n    \n    # Calculate the midpoint of the sorted list\n    midpoint = len(sorted_list) // 2\n    \n    # If the length of the list is even, the median is the average of the middle two numbers\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[midpoint - 1] + sorted_list[midpoint]) / 2\n    else:\n        median = sorted_list[midpoint]\n    \n    return median",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 2020,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 25,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total",
        "test": "assert sum_of_digits([123]) == 6, \"Failed for input [123]\"",
        "num_ids": 1735,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 23,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)",
        "test": "assert bitwise_xor((1, 2), (3, 4)) == (2, 6)",
        "num_ids": 2334,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    unique_list = set()\n    for i in test_list:\n        if (i not in unique_list):\n            unique_list.add(i)\n            count += 1\n    return count",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 1651,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two nested tuples must have equal lengths.\")\n        return None\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            result_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result_tup.append(test_tup1[i] + test_tup2[i])\n    \n    return tuple(result_tup)",
        "test": "assert add_nested_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9), \"add_nested_tuples((1, 2, 3), (4, 5, 6)) should return (5, 7, 9)\"",
        "num_ids": 2549,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2, 5) == 2, \"The function is not returning the correct minimum value\"",
        "num_ids": 1123,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False",
        "test": "assert check_tuplex(('apple', 'banana', 'cherry'), ('orange',)) == False",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    parity = 0\n    if x < 0:\n        parity += 1\n    for i in range(1, int(x**0.5)+1):\n        if x % i == 0:\n            parity += 1\n    if parity % 2 == 1:\n        return True\n    else:\n        return False",
        "test": "assert find_Parity(1) == True",
        "num_ids": 1275,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string and split it into a list of digits\n    num_str = str(n)\n    num_list = list(num_str)\n\n    # reverse the list to get the digits in descending order\n    num_list.reverse()\n\n    # reverse the list again to get the digits in ascending order\n    num_list.reverse()\n\n    # join the digits back into a string and convert it back to an integer\n    next_bigger = int(''.join(num_list))\n\n    return next_bigger",
        "test": "assert rearrange_bigger(0) == 0",
        "num_ids": 2767,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if heapq.heappushpop(heap, (nums1[i] + nums2[j], (i,j))):\n                k -= 1\n                if k == 0:\n                    return heapq.nsmallest(k, heap)[::-1]\n    return []",
        "test": "assert k_smallest_pairs([], [], 1) == []",
        "num_ids": 3619,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6)]) == 24",
        "num_ids": 2796,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for item in listval:\n        if min_val is None:\n            min_val = item\n        elif item < min_val:\n            min_val = item\n    return min_val",
        "test": "assert min_val([1,2,3,4,5]) == 1",
        "num_ids": 1782,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 34,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all the words to lowercase\n    word = word.lower()\n    # Split the word into words\n    words = word.split('_')\n    # Convert the first word to uppercase\n    camel_word = words[0]\n    # Convert the rest of the words to camel case\n    for i in range(1, len(words)):\n        camel_word += words[i][0].upper() + words[i][1:]\n    # Return the camel case string\n    return camel_word",
        "test": "assert snake_to_camel('empty') == 'empty'",
        "num_ids": 1775,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]",
        "test": "assert remove_odd([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]",
        "num_ids": 1670,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n >= len(list1):\n        return None\n    else:\n        return list1[n-1]",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == (3, 4)",
        "num_ids": 1726,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
        "test": "assert overlapping([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == True",
        "num_ids": 1650,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n\n    for i in range(2, len(arr)):\n        temp = max(max_product, min_product)\n        max_product = min(max_product, min_product * arr[i])\n        min_product = temp\n\n    return (arr[0], arr[1]) if max_product > min_product else (arr[1], arr[0])",
        "test": "assert max_Product([-1, -3, -5, -7]) == (-3, -1)",
        "num_ids": 2466,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty dictionary to store the common elements and their counts\n    common_dict = {}\n\n    # Iterate through the list of tuples\n    for tuple in Input:\n        # Extract the first element from the tuple\n        first_element = tuple[0]\n        # If the first element is not already in the dictionary, add it with a count of 1\n        if first_element not in common_dict:\n            common_dict[first_element] = 1\n        # If the first element is already in the dictionary, increment its count by 1\n        else:\n            common_dict[first_element] += 1\n\n    # Initialize an empty list to store the common elements with their count\n    common_list = []\n\n    # Iterate through the dictionary and find the common elements with their count\n    for key, value in common_dict.items():\n        if value > 1:\n            common_list.append((key, value))\n\n    # Sort the list of common elements by the count in descending order\n    common_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the list of common elements with their count\n    return common_list",
        "test": "assert group_tuples([(1,2), (3,4), (1,2)]) == [(1, 2)]",
        "num_ids": 2371,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def Find_Max(lst): \n    max_length = 0 \n    max_element = None \n\n    for element in lst: \n        if len(str(element)) > max_length: \n            max_length = len(str(element)) \n            max_element = element \n\n    return max_element ",
        "test": "assert Find_Max(['apple', 'banana', 'cherry', 'date', 'elderberry']) == 'elderberry'",
        "num_ids": 1783,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "test": "assert round_and_sum([1, 2.5, 3, 4.2, 5]) == 53.4",
        "num_ids": 2062,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    \n    while count < n:\n        sum_of_cubes += count**3\n        count += 1\n    \n    return sum_of_cubes",
        "test": "assert cube_Sum(1) == 0",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter ='' # change this to the delimiter you want to use\n    result = []\n    for item in test_tup:\n        result.append(str(item))\n    concatenated_result = delimiter.join(result)\n    return concatenated_result",
        "test": "assert concatenate_tuple(('hello', 'world')) == 'helloworld'",
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 2081,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for element in test_tuple:\n        rear_tuple += (element[::-1],)\n    return rear_tuple",
        "test": "assert extract_rear(('abc', (1, 2, 3), 'ghi', 'jkl','mno')) == ((1, 2, 3), 'jkl','mno')",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 5) == 0",
        "num_ids": 1644,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]",
        "num_ids": 1079,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # create a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match the pattern in the input string\n    match = re.match(pattern, dt)\n    if match:\n        # replace the matched groups with the desired date format\n        return match.group(3) + '-' + match.group(2) + '-' + match.group(1)\n    else:\n        # if the input string does not match the pattern, return None\n        return None",
        "test": "assert change_date_format('2022-02-21') == '21-02-2022'",
        "num_ids": 2467,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n        \n    return my_list",
        "test": "assert shell_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 3095,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        return 'The two tuples must have equal length.'\n\n    # initialize an empty list to store the elementwise and tuples\n    result = []\n\n    # loop through each element in the input tuples\n    for i in range(len(test_tup1)):\n        # extract the element at index i from both tuples and perform the elementwise and operation\n        elem_and_tup = (test_tup1[i] & test_tup2[i])\n\n        # append the result to the result list\n        result.append(elem_and_tup)\n\n    # return the result list\n    return result",
        "test": "assert and_tuples((1,2,3),(4,5,6)) == ((0,0,1), (0,0,0))",
        "num_ids": 1952,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        print(\"Error: the equation is not defined for y = c\")\n        return None\n\n    directrix = -b/2*a\n    return directrix",
        "test": "assert parabola_directrix(-1, 0, 1) == 0",
        "num_ids": 2390,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3], [2, 3, 4]) == True",
        "num_ids": 1882,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * base2 + 0.5 * base1 * height + 0.5 * base2 * height\n    # calculate the base of the trapezium\n    base = math.sqrt(area)\n    # calculate the length of the trapezium\n    length = (base1 + base2) / 2\n\n    return length",
        "test": "assert median_trapezium(1,3,4) == 2",
        "num_ids": 2893,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "test": "assert check_greater([1,2,3,4,5], 2) == True, \"Failed to check the correctness of check_greater.\"",
        "num_ids": 1937,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None",
        "test": "assert text_match_one(\"a\") == None",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Using integer division to extract the last digit\n    return n % 10",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 976,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers from the original list.\n    '''\n    return [num for num in lst if num < 0]",
        "test": "assert neg_nos([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]",
        "num_ids": 1511,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isalnum():\n            result += char\n    return result",
        "test": "assert remove_odd('') == ''",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(1, 2), (3, 4), (5, 6), (7, 8)]) == 0",
        "num_ids": 2026,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result",
        "test": "assert multiple_to_single([0]) == 0",
        "num_ids": 1254,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b([a-z]+\\b\\s*[-\u2013])\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        word = match.group()\n        print(\"Adverb:\", word)\n        print(\"Position:\", match.start())\n        print()",
        "test": "assert find_adverb_position(\"The dog barks at the wall. The cat runs away. The dog runs faster.\") == [(1, \"at\"), (4, \"at\"), (7, \"runs\"), (10, \"faster\")] # adverb with no position",
        "num_ids": 2685,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2",
        "test": "assert surfacearea_cube(1) == 6, \"Expected 6, got {}\".format(surfacearea_cube(1))",
        "num_ids": 1720,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create a new array to store positive numbers\n    positive = array('i', [])\n\n    # Iterate through the input array and add positive numbers to the new array\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n\n    # Calculate the ration of positive numbers\n    if len(positive) == 0:\n        ratio = 0\n    else:\n        ratio = len(positive) / len(nums)\n\n    return ratio",
        "test": "assert positive_count([1,1,1,1,1]) == 1, \"The output is incorrect. Please check the implementation of the function.\"",
        "num_ids": 2422,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest",
        "test": "assert largest_neg([-1, 2, -3, 4, -5]) == -1",
        "num_ids": 1779,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Parameters:\n    -----------\n    test_list : list of tuples\n        A list of tuples, each of which is a list itself.\n\n    K : int\n        The number of elements to remove from each tuple.\n\n    Returns:\n    --------\n    list of tuples\n        A list of tuples, each of which has had k elements removed from it.\n\n    \"\"\"\n    result = []\n    for tuple_ in test_list:\n        if len(tuple_) <= K:\n            result.append(tuple_)\n        else:\n            result.append(tuple_[K:])\n    return result",
        "test": "assert trim_tuple([('apple', 2), ('banana', 4), ('orange', 6), ('grape', 8)], 6) == [('apple', 2), ('banana', 4), ('orange', 6), ('grape', 8)]",
        "num_ids": 2479,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == (4, 10, 18)",
        "num_ids": 1816,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count_dict = Counter(tup)  # Counter object to count the occurrence of all elements of tuple\n    count = 0\n    for i in lst:\n        if i in count_dict:\n            count += count_dict[i]\n\n    return count",
        "test": "assert count_Occurrence((1, 2, 3, 4, 5), [1, 2, 3, 4, 5]) == 5",
        "num_ids": 2421,
        "indeed": true
    },
    {
        "number": 447,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 1280,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum",
        "test": "assert cal_sum(0) == 0, \"cal_sum(0) should return 0\"",
        "num_ids": 1416,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def extract_string(str_list, length):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n\n    :param str_list: A list of string values.\n    :param length: The size of the strings to be extracted.\n    :return: A list of extracted strings.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= length:\n            extracted_strings.append(string[:length])\n        else:\n            extracted_strings.append(string)\n    return extracted_strings",
        "test": "assert extract_string(['hello', 'world', 'how', 'are', 'you'], 6) == ['hello', 'world', 'how', 'are', 'you']",
        "num_ids": 1929,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"",
        "num_ids": 1214,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount > 0:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0",
        "test": "assert loss_amount(100, 100) == 0, \"loss_amount(100, 100) should return 0\"",
        "num_ids": 1400,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of its even factors.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum",
        "test": "assert sumofFactors(36) == 12",
        "num_ids": 1927,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the dog\") == False",
        "num_ids": 1532,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_list = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in month_list:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(3) == False",
        "num_ids": 2150,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 1211,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst)\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    return min_sublist",
        "test": "assert Find_Min([]) == [], \"Empty list should return an empty list\"",
        "num_ids": 2079,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b",
        "test": "assert rectangle_area(2,3) == 6",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'\\b[A-Z]\\w+\\b')\n    return uppercase_pattern.sub('', string)",
        "test": "assert remove_uppercase('hello, world') == 'hello, world'",
        "num_ids": 1319,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            new_list.append(sublist[0])\n        else:\n            new_list.append(sublist)\n    return new_list",
        "test": "assert Extract([['a','b','c'],[1,2,3],['d','e']]) == ['a',1,'d']",
        "num_ids": 1303,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Count the number of uppercase characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr('Hello World') == 2",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations",
        "test": "assert combinations_list([]) == []",
        "num_ids": 2158,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        if num < 0:\n            current_product = 1\n            \n        current_product *= num\n        \n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product",
        "test": "assert max_subarray_product([1,2,3,4,5]) == 120",
        "num_ids": 2065,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values)!= 1 or values[0]!= n:\n        return False\n    else:\n        return True",
        "test": "assert check_value({'a': 1, 'b': 2, 'c': 3}, 4) == False, \"check_value({'a': 1, 'b': 2, 'c': 3}, 4) == False\"",
        "num_ids": 2044,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 1671,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far",
        "test": "assert max_product([1,1,1,1,1]) == 1",
        "num_ids": 2684,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    return sum([test_tup[i] + test_tup[(i+1)%n] for i in range(n)])",
        "test": "assert add_pairwise(()) == 0",
        "num_ids": 1764,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result",
        "test": "assert find_remainder([1, 2, 3, 4, 5], 10) == 0",
        "num_ids": 1799,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True",
        "test": "assert check_Consecutive([1, 2, 3, 5]) == False, \"check_Consecutive([1, 2, 3, 5]) should return False\"",
        "num_ids": 1977,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Remove duplicates from list1\n    list1 = list(set(test_list1))\n\n    # Create an empty list to store the intersection of list1 and list2\n    intersection_list = []\n\n    # Iterate through list2 and check if each element is present in list1\n    for element in test_list2:\n        if element in list1:\n            intersection_list.append(element)\n\n    # Return the intersection list\n    return intersection_list\n",
        "test": "assert tuple_intersection([], []) == []",
        "num_ids": 2150,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1",
        "test": "assert replace_char(\"hello world\", \"x\", \"o\") == \"hello world\"",
        "num_ids": 1285,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Counter is used to count the frequency of each element in the dictionary\n    # Sorting by value is done using the sorted() function\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "test": "assert sort_counter({'apple': 3, 'banana': 2, 'orange': 1}) == {'banana': 2, 'apple': 3, 'orange': 1}",
        "num_ids": 1668,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Define a variable to store the sum of the largest and smallest values\n    total = 0\n    \n    # Iterate through the array and find the largest and smallest values\n    for num in nums:\n        if num > total:\n            total = num\n        elif num < total:\n            total -= num\n    \n    return total",
        "test": "assert big_sum([0, 0, 0, 0, 0]) == 0",
        "num_ids": 2284,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"Hello, world!\") == \"hello, world!\"",
        "num_ids": 944,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1)",
        "test": "assert remove_lowercase('1234567890') == '1234567890'",
        "num_ids": 1257,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    # convert the number to string\n    num_str = str(n)\n    # get the first character of the string\n    first_char = num_str[0]\n    # convert the first character to integer\n    first_digit = int(first_char)\n    # return the first digit\n    return first_digit",
        "test": "assert first_Digit(0) == 0",
        "num_ids": 1327,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2!= 0]",
        "test": "assert Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]",
        "num_ids": 1607,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def difference(n):\n    '''\n    This function calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(n):\n        sum_cubes += i**3\n        sum_natural += i\n    \n    difference = abs(sum_cubes - sum_natural)\n    \n    return difference",
        "test": "assert difference(1) == 0, \"Difference of 1 is not zero\"",
        "num_ids": 1598,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1, 3, 5, 7, 9], 5) == 0, \"find_Odd_Pair([1, 3, 5, 7, 9], 5) should return 0\"",
        "num_ids": 2209,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "test": "assert toggle_string('1234567890') == '1234567890'",
        "num_ids": 1166,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to strings\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n\n    # initialize the result variable\n    result = 0\n\n    # loop through each digit in the two numbers\n    for i in range(len(str_n1)):\n        # find the difference between the corresponding digits\n        diff = int(str_n1[i]) - int(str_n2[i])\n\n        # add the difference to the result variable\n        result += diff\n\n    # return the result\n    return result",
        "test": "assert digit_distance_nums(1234567890, 1234567890) == 0",
        "num_ids": 2689,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum",
        "test": "assert max_sub_array_sum([1, -2, 3, 10, -4, 7, 2, -5], 5) == 13",
        "num_ids": 2617,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Merge the two tuples into one sorted list\n    merged_list = sorted(test_tup1 + test_tup2)\n\n    # Extract the unique elements from the merged list and return them in sorted order\n    return sorted(set(merged_list))",
        "test": "assert union_elements((1, 5, 3), (2, 4, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 2472,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if max_length < len(sublist):\n                max_length = len(sublist)\n    return max_length",
        "test": "assert Find_Max_Length([]) == 0, \"Find_Max_Length([]) should return 0.\"",
        "num_ids": 2423,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use regular expression to find all occurrences of quotation marks\n    matches = re.findall(r'\"([^\"]*)\"', text)\n    # Iterate over matches and extract the values between quotation marks\n    extracted_values = []\n    for match in matches:\n        extracted_values.append(match.strip('\"'))\n    return extracted_values",
        "test": "assert extract_values(\"The value is neither '1000' nor '2000'\") == []",
        "num_ids": 1501,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10, \"count_Pairs([1,2,3,4,5],5) should return 10\"",
        "num_ids": 2006,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 1057,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum",
        "test": "assert sum_digits(442) == 10,'sum_digits(442) == 10'",
        "num_ids": 1654,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([5, 4, 3, 2, 1, 0]) == False",
        "num_ids": 1527,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "test": "assert empty_list(1) == [{}]",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "test": "assert sort_sublists([[1, 2, 3], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]",
        "num_ids": 1486,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert the given list to set to remove duplicates\n    nums = set(nums)\n    # Convert the set back to a list and return it\n    return list(nums)",
        "test": "assert two_unique_nums([1,2,3,4,5,5,6,7,8,8,8,9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 2434,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data) # convert the list to a set to remove duplicates\n    product = 1 # initialize the product to 1\n    \n    for number in unique_numbers:\n        product *= number\n        \n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 1990,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2 + h**2)",
        "test": "assert surfacearea_cylinder(1,2) == 31.41592653589793, \"Incorrect surface area calculation for cylinder with radius 1 and height 2.\"",
        "num_ids": 1965,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False",
        "test": "assert is_Sub_Array([1,2,3,4,5], [6,7,8]) == False, \"is_Sub_Array failed\"",
        "num_ids": 2327,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # initialize the last digit variable\n    last_digit = 0\n    \n    # loop until the number becomes 0\n    while n > 0: \n        # get the last digit of the number\n        last_digit = n % 10\n        \n        # calculate the factorial of the remaining number\n        n = (n // 10) * n\n        \n        # return the last digit of the factorial\n        return last_digit\n        \n",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 1590,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print(\"All lists must have the same length.\")\n        return\n    \n    # Initialize an empty list to store the interleaved lists\n    interleaved_list = []\n    \n    # Iterate through each list and add its elements to the interleaved list in their order\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    return interleaved_list",
        "test": "assert hasattr(interleave_lists, '__call__')",
        "num_ids": 2416,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list",
        "test": "assert find_dissimilar(('apple', 'banana', 'orange'), ('apple', 'banana', 'kiwi')) == ['orange']",
        "num_ids": 1919,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def is_even(num):\n        return num % 2 == 0\n\n    def is_odd(num):\n        return num % 2 == 1\n\n    mixed_tuple = tuple(test_tuple)\n    even_list = list(filter(lambda x: even_fnc(x), mixed_tuple))\n    return tuple(even_list)\n",
        "test": "assert even_ele([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], lambda x: x % 2 == 0) == [[[2, 4, 6]], [[8, 10, 12]]]",
        "num_ids": 1945,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def surface_Area(b,s):\n    '''\n    This function takes in two parameters, b for the base edge of the square pyramid and s for the height of the pyramid.\n    The function then calculates the area of the square pyramid by multiplying the base edge and the height, and returns the result.\n    '''\n    return b*s",
        "test": "assert surface_Area(5,10) == 50, \"The surface area of a square pyramid with a base edge of 5 and height of 10 should be 50.\"",
        "num_ids": 1966,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 885,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize variables\n    catalan_num = 1\n    for i in range(1, num+1):\n        catalan_num *= (i * (num-i+1)) // i\n    return catalan_num",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1498,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern for finding the adverb ending with ly\n    pattern = re.compile(r'(\\w+)(ed|ing|ly)$')\n    \n    # Use the pattern to find all the matches in the text\n    matches = pattern.findall(text)\n    \n    # Return the list of positions and the first adverb ending with ly\n    return [(pos, match[0]) for pos, match in enumerate(matches) if match[1] == 'ly']",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy dogs.\") == []",
        "num_ids": 3934,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 2427,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"List is too short to split at the nth element\")\n    else:\n        first_part = l[:n]\n        rest = l[n:]\n        l = first_part + rest\n    return l",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 2372,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 777,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list as an argument and returns the difference between the largest and smallest values in the list.\n    '''\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n    \n    # Return the difference between the largest and smallest values\n    return nums[0] - nums[1]",
        "test": "assert big_diff([0, 0, 0, 0, 0]) == 0",
        "num_ids": 1885,
        "indeed": false
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store perfect squares\n    squares = []\n    # Loop through a to b\n    for i in range(a, b+1):\n        # Calculate the square root of i using the math.sqrt() function\n        square = int(round(math.sqrt(i)))\n        # Check if the square is already in the list\n        if square not in squares:\n            # If it's not, add it to the list\n            squares.append(square)\n    # Return the list of perfect squares between a and b\n    return squares",
        "test": "assert perfect_squares(1, 1) == [1]",
        "num_ids": 2150,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 1901,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list has less than 2 elements\n    if length < 2:\n        return newList\n    \n    # Interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 1425,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    if k == 0 or k == n:\n        return 1\n    for i in range(1,k+1):\n        if i == 1:\n            sum += n\n        else:\n            sum += n*i\n    return sum",
        "test": "assert binomial_Coeff(1, 1) == 1",
        "num_ids": 1781,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+(?=\\d)', '', ip) # remove leading zeroes from the ip address\n    return ip",
        "test": "assert removezero_ip(\"192.168.1.1\") == \"192.168.1.1\"",
        "num_ids": 2120,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n\n    if even % 2 == 0:\n        return abs(even - odd)\n    else:\n        return abs(odd - even)",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1, \"The result of diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) is not correct.\"",
        "num_ids": 2908,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    diff = abs(n1 - n2)\n\n    if diff == 0:\n        return 0\n    elif diff > 0:\n        str1, str2 = str2, str1\n        diff = abs(n1 - n2)\n\n    min_swaps = 0\n    i = 0\n    j = 0\n\n    while i < n1 and j < n2:\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        else:\n            if str1[i] < str2[j]:\n                min_swaps += n1 - i\n                i += 1\n            else:\n                min_swaps += n2 - j\n                j += 1\n\n    while i < n1:\n        min_swaps += n1 - i\n        i += 1\n\n    while j < n2:\n        min_swaps += n2 - j\n        j += 1\n\n    return min_swaps",
        "test": "assert min_Swaps(\"1111\", \"1111\") == 0, \"Wrong Output\"",
        "num_ids": 5207,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of each element in the tuple\n    sizes = [sys.getsizeof(x) for x in tuple_list]\n    # Multiply the sizes and return the result\n    return sum(sizes)",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # initialize pointers for both arrays\n    i, j = 0, 0\n    \n    # initialize kth element to -1\n    kth_element = -1\n    \n    # loop until k elements are found\n    while i < len(arr1) and j < len(arr2):\n        # compare the elements at the current indices\n        if arr1[i] < arr2[j]:\n            if k == 0:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 0:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            # if the elements are equal, compare the next elements\n            if i == len(arr1) - 1 and j == len(arr2) - 1:\n                # if both arrays are exhausted, return the kth element\n                return arr1[i]\n            elif i < len(arr1) - 1 and j == len(arr2) - 1:\n                # if array 1 is exhausted, return the element at index i\n                return arr1[i]\n            elif i == len(arr1) - 1 and j < len(arr2) - 1:\n                # if array 2 is exhausted, return the element at index j\n                return arr2[j]\n            else:\n                # if both arrays have elements, return the element at index i\n                return arr1[i]\n\n    # if the while loop is exited without finding k elements, return None\n    return None",
        "test": "assert find_kth([], [], 0) == None",
        "num_ids": 3886,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    number_str = str(number)\n\n    # Initialize the sum of the digits of the number\n    sum_digits = 0\n\n    # Loop through each digit of the number\n    for digit in number_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n\n        # Add the digit to the sum of digits\n        sum_digits += digit_int ** len(number_str)\n\n    # Check if the sum of digits is equal to the original number\n    if sum_digits == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(125) == False",
        "num_ids": 1887,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through first n numbers\n    for i in range(1, number + 1):\n        # add i to sum\n        sum += i\n\n    # calculate the average by dividing sum by number\n    average = sum / number\n\n    return sum, average",
        "test": "assert sum_average(5) == (15, 3.0)",
        "num_ids": 1664,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(4) == True, \"4 should be True\"",
        "num_ids": 876,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None",
        "test": "assert first_repeated_char('') == None",
        "num_ids": 1796,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    num = 1\n    while num <= n:\n        if all(int(digit)!= digit for digit in str(num)):\n            lucid_numbers.append(num)\n        num += 1\n    return lucid_numbers",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 1920,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Splitting the string into words\n    words = s.split()\n    # Reversing the order of the words\n    words = words[::-1]\n    # Joining the words back into a string\n    s = \" \".join(words)\n    return s",
        "test": "assert reverse_words(\"hello world\") == \"world hello\"",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given integer is prime, else False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_num(num):\n    \"\"\"\n    Returns True if the given integer is a prime number, else False.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False",
        "test": "assert prime_num(2) == True",
        "num_ids": 1350,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n\nprint(radian_degree(45))",
        "test": "assert radian_degree(180) == math.pi",
        "num_ids": 1320,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"The quick brown fox jumps over the lazy dog\", r\"The\\s\\w+\\s\\w+\\s\\w+\")[1] == 0",
        "num_ids": 2435,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n",
        "test": "assert bell_Number(1) == 1, \"bell_Number(1) should be 1\"",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]",
        "num_ids": 1919,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize a variable to store the maximum value of then'th column\n    max_value = float('-inf')\n    \n    # Iterate through the list of lists\n    for row in test_list:\n        # If the value of then'th column is greater than the current maximum value, update the maximum value\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    \n    # Return the maximum value of then'th column\n    return max_value",
        "test": "assert max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 3) == 9",
        "num_ids": 2542,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def merge(lst):\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 1601,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for tup in test_list:\n        for num in tup:\n            total += num\n    return total",
        "test": "assert cummulative_sum(()) == 0",
        "num_ids": 1805,
        "indeed": true
    },
    {
        "number": 615,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create a list to store the averages for each tuple in the input tuple\n    averages = []\n    # Loop through each tuple in the input tuple\n    for tup in nums:\n        # Calculate the sum of all the elements in the tuple\n        total = sum(tup)\n        # Divide the total by the number of elements in the tuple to get the average\n        average = total / len(tup)\n        # Add the average to the list of averages\n        averages.append(average)\n    # Return the list of averages\n    return averages",
        "test": "assert average_tuple([(1,2,3),(4,5,6),(7,8,9)]) == [2.0, 5.0, 8.0]",
        "num_ids": 1788,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # Perform element-wise modulo\n    modulo_result = []\n    for i in range(len(test_tup1)):\n        modulo_result.append(test_tup1[i] % test_tup2[i])\n    \n    return tuple(modulo_result)",
        "test": "assert tuple_modulo((1, 2, 3, 4, 5), (2, 3, 4, 5, 6)) == (1, 2, 3, 4, 5), 'Testing tuple_modulo function for incorrect output.'",
        "num_ids": 2396,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function will return the minimum number of jumps required to reach (d, 0) from the origin in a 2D plane.\n    '''\n    # Initialize variables for the current position and remaining steps\n    curr_pos = (0, 0)\n    remaining_steps = steps\n    \n    # Initialize variables for the minimum jumps and the current jumps\n    min_jumps = remaining_steps\n    curr_jumps = 0\n    \n    # Iterate over each step and update the current position and remaining steps\n    while remaining_steps > 0:\n        # Update the current position based on the current jumps\n        if curr_jumps % 2 == 0:\n            curr_pos = (curr_pos[0], curr_pos[1] + 1)\n        else:\n            curr_pos = (curr_pos[0] + 1, curr_pos[1])\n            \n        # Decrement the remaining steps\n        remaining_steps -= 1\n        \n        # Update the minimum jumps if necessary\n        curr_jumps += 1\n        if curr_pos[1] == d:\n            min_jumps = min(min_jumps, curr_jumps)\n            \n    return min_jumps",
        "test": "assert min_Jumps(2, 1) == 1",
        "num_ids": 2937,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through each element in both lists\n    for i in range(len(nums1)):\n        # Perform element-wise division\n        result.append(nums1[i] / nums2[i])\n        \n    return result",
        "test": "assert div_list([2,4,6,8], [1,2,3,4]) == [2,2,2,2]",
        "num_ids": 1539,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    test_str = test_str.replace(num_str, '')\n    test_str += num_str\n    return test_str",
        "test": "assert move_num('') == ''",
        "num_ids": 1976,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def largest_subset(a):\n    # sort the list in decreasing order\n    a.sort(reverse=True)\n    \n    # initialize variables\n    max_size = 0\n    current_size = 0\n    \n    # iterate over the sorted list\n    for num in a:\n        # if the current number is divisible by 2, we can add it to the current subset and increase the size\n        if num % 2 == 0:\n            current_size += 1\n            max_size = max(max_size, current_size)\n        # otherwise, we need to start a new subset\n        else:\n            current_size = 1\n    \n    # return the maximum size of any subset\n    return max_size",
        "test": "assert largest_subset([1, 5, 10]) == 1",
        "num_ids": 2982,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # check if both arrays have the same length\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both arrays should have the same length.\")\n\n    # sort the arrays\n    arr1.sort()\n    arr2.sort()\n\n    # get the middle indices of the arrays\n    mid1 = n // 2\n    mid2 = (n - 1) // 2\n\n    # calculate the median\n    if n % 2 == 0:\n        # return the average of the middle elements\n        return (arr1[mid1] + arr2[mid2]) / 2\n    else:\n        # return the middle element\n        return arr1[mid1]",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 3) == 3.0",
        "num_ids": 3247,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([2,3,4,5], 2) == [4,9,16,25]",
        "num_ids": 1688,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    if n < 2:\n        return newList\n    \n    first = newList[0]\n    last = newList[n-1]\n    newList[0] = last\n    newList[n-1] = first\n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 1802,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # calculate the area of a triangle given its base and height\n    def area_triangle(base, height):\n        return 0.5 * base * height\n\n    # calculate the area of a semicircle given its radius\n    def area_semicircle(r):\n        return math.pi * r * r\n\n    # calculate the area of the largest triangle that can be inscribed in a semicircle with the given radius\n    def largest_triangle_area(r):\n        area = 0\n        sides = [0, r, r**2]\n        sides.sort(reverse=True)\n\n        for i in range(len(sides)-2):\n            area = max(area, area_triangle(sides[i], sides[i+1]))\n\n        return area\n\n    return largest_triangle_area(r)",
        "test": "assert triangle_area(1) == 0.5, \"The area of the largest triangle inscribed in a semicircle with radius 1 is not equal to 0.5\"",
        "num_ids": 3274,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n    return end + 1",
        "test": "assert find_First_Missing([9,8,7,6,5]) == 1",
        "num_ids": 1897,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []\n\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    return even_list",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]",
        "num_ids": 1452,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    return sub",
        "test": "assert adjac((1,2)) == [(0,1), (0,2), (1,3), (2,1), (2,2)]",
        "num_ids": 5252,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\")",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 1598,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list to store the non-zero numbers\n    non_zero_list = []\n    \n    # loop through the given list\n    for num in num_list:\n        # if the number is not zero, add it to the non_zero_list\n        if num!= 0:\n            non_zero_list.append(num)\n    \n    # add all zeroes to the end of the non_zero_list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            non_zero_list.append(0)\n    \n    # replace the original list with the non_zero_list\n    num_list = non_zero_list\n    \n    return num_list",
        "test": "assert move_zero([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 2720,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum",
        "test": "assert pair_xor_Sum([0, 0, 0, 0, 0], 5) == 0",
        "num_ids": 1700,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    # Convert list to heap\n    hq.heapify(iterable)\n    # Sort heap\n    for i in range(n-1, 0, -1):\n        hq.heappop(iterable)\n    return list(iterable)",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1989,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 28,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if the profit and loss are zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(100, 50) == False, \"no profit and loss not possible\"",
        "num_ids": 1885,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t > 0:\n        # Calculate the heat index\n        heat_index = 35.74 + 0.6215 * t - 35.757 * math.pow(t, 2) + 0.4275 * math.pow(t, 3)\n        # Calculate the wind chill index\n        wind_chill_index = round((heat_index - 32) * 5/9) + 32\n        # Return the wind chill index rounded to the nearest integer\n        return wind_chill_index\n    else:\n        # If the temperature is less than or equal to 0, return the original wind velocity\n        return v",
        "test": "assert wind_chill(0,0) == 0",
        "num_ids": 3793,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum of the lengths of the names that meet the criteria\n    total_length = 0\n    \n    # Iterate through each name in the list\n    for name in sample_names:\n        # Remove the lowercase letter at the beginning of the name\n        name = name[1:]\n        \n        # If the name does not start with a lowercase letter, add its length to the total\n        if not name[0].islower():\n            total_length += len(name)\n    \n    # Return the total sum of the names that meet the criteria\n    return total_length",
        "test": "assert sample_nam(['jane','mary', 'tom']) == 0, \"The output of sample_nam(['jane','mary', 'tom']) should be 0.\"",
        "num_ids": 2129,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    items = re.sub(pattern, r'\\1', items)\n    return items",
        "test": "assert remove_parenthesis('') == ''",
        "num_ids": 1107,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    def nonagonal_helper(n, m):\n        \"\"\"\n        Helper function for is_nonagonal.\n        \"\"\"\n        if n == 1:\n            return m\n        else:\n            return nonagonal_helper(n - 1, m + 2 * m - 1)\n\n    return nonagonal_helper(n, 1)\n",
        "test": "assert is_nonagonal(1) == 1, \"is_nonagonal(1) should return 1\"",
        "num_ids": 1424,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Iterate over the words and check if there is a 'z' at the start and end of each word\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return True\n    # If no 'z' is found, return False\n    return False",
        "test": "assert text_match_wordz_middle('hello') == False",
        "num_ids": 1871,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Get the length of the input array\n    n = len(input)\n\n    # Check if k is valid\n    if k < 1 or k > n:\n        return \"Invalid k value. Please enter a positive integer less than or equal to the length of the array.\"\n\n    # Reverse the first k elements\n    for i in range(k - 1, -1, -1):\n        input[i], input[n - i - 1] = input[n - i - 1], input[i]\n\n    # Return the reversed array\n    return input",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 2709,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple(('apple', 'banana'), {'color':'red'}) == ('apple', 'banana', {'color':'red'})",
        "num_ids": 1317,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n\n    # Initializing base case\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n\n    # Dynamic Programming\n    for i in range(N):\n        for j in range(i+1, N):\n            if j == N-1:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i][j], dp[i][j+1]) + cost[i][j]\n\n    # Finding the maximum average path\n    max_avg = 0\n    for i in range(N-1):\n        max_avg = max(max_avg, dp[i][i+1]/(i+2))\n\n    return max_avg",
        "test": "assert maxAverageOfPath([[1]]) == 0.0",
        "num_ids": 5007,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students",
        "test": "assert filter_data({'Alice': (1.8, 85.5), 'Bob': (1.6, 75.2), 'Charlie': (1.9, 90.1), 'David': (1.7, 78.9), 'Eve': (1.6, 73.2)}, 1.7, 80.0) == {'Alice': (1.8, 85.5), 'Charlie': (1.9, 90.1)}",
        "num_ids": 2766,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], x) for x in nums2):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == 0",
        "num_ids": 2494,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        power -= 1\n        base //= 10\n    return sum",
        "test": "assert power_base_sum(5, 1) == 5",
        "num_ids": 2136,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    result = []\n    for match in matches:\n        result.append(match.strip('\"'))\n    return result",
        "test": "assert extract_quotation('This is a \"test\" string.') == ['test']",
        "num_ids": 2247,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1] * test_tup[0])\n    return tuple(result)",
        "test": "assert multiply_elements((1,)) == (1,)",
        "num_ids": 2191,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]",
        "test": "assert sum_list([1,2,3], [4,5,6]) == [5,7,9]",
        "num_ids": 1633,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 1784,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h",
        "test": "assert lateralsurface_cone(1, 2) == 6.283185307179586",
        "num_ids": 1898,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the pattern for replacing special characters\n    pattern = re.compile(r'[\\s,\\.]+')\n    # replace all occurrences of pattern with colon\n    return pattern.sub(':', text)",
        "test": "assert replace_specialchar('this is a test') == 'this:is:a:test'",
        "num_ids": 1218,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array A and a number x as input, and returns the index of the first occurrence of x in A.\n    If x is not found in A, the function returns -1.\n    \"\"\"\n    # binary search to find the index of the first occurrence of x\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 2654,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Create a dictionary to store the products of all sublists\n    sublist_products = {0: 1}\n    # Initialize the sum variable\n    sum_prod = 0\n    # Loop through all sublists of length 1 to n\n    for i in range(1, n+1):\n        # Check if the sublist is in the dictionary\n        if i in sublist_products:\n            # If it is, add the product to the sum variable\n            sum_prod += sublist_products[i]\n        # Calculate the product of the current sublist\n        prod = 1\n        for j in range(i):\n            prod *= arr[j]\n        # Add the product to the dictionary\n        sublist_products[i] = prod\n    return sum_prod",
        "test": "assert sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 3063,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    first_bit = n & 1\n    last_bit = n & (1 << 31)\n\n    n = n ^ (first_bit ^ last_bit)\n\n    return n",
        "test": "assert set_middle_bits(0) == 0",
        "num_ids": 2233,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the insertion point\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # If value is not found in list, return left insertion point\n    return left",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 7) == 3",
        "num_ids": 2182,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('apple') == True",
        "num_ids": 1218,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(3) == 3 * 2 * 1, \"Failed for n=3\"",
        "num_ids": 1369,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    max_triangular = int(10**n - 1)\n    triangular_list = []\n    for i in range(max_triangular+1):\n        triangular_list.append(i)\n    min_triangular = triangular_list[0]\n    min_index = 0\n    for i in range(1, len(triangular_list)):\n        if triangular_list[i] < min_triangular:\n            min_triangular = triangular_list[i]\n            min_index = i\n    return min_index\n\nn = 5\nprint(\"Index of smallest triangular number with\", n, \"digits:\", find_Index(n))",
        "test": "assert find_Index(1) == 0",
        "num_ids": 2659,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    my_dict = {}\n    # iterate over the tuple elements\n    for i in range(len(test_tup) - 1):\n        # add the tuple elements as keys and their adjacent elements as values to the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return my_dict",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 2234,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize a variable to store the count of each character in the string\n    char_count = {}\n\n    # Iterate over each character in the string\n    for char in s:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Iterate over the dictionary to check if all the counts are 1\n    all_ones = True\n    for count in char_count.values():\n        if count!= 1:\n            all_ones = False\n            break\n\n    # Return True if all the counts are 1, otherwise return False\n    return all_ones",
        "test": "assert all_Characters_Same('a') == True",
        "num_ids": 1356,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2",
        "test": "assert area_tetrahedron(1) == math.sqrt(12)",
        "num_ids": 1389,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 2597,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3, 4, 5)) == False",
        "num_ids": 1256,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum+1)))",
        "test": "assert divisible_by_digits(123, 123) == []",
        "num_ids": 3374,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2\n        return area",
        "test": "assert sector_area(1, 360) == 3.141592653589793",
        "num_ids": 2131,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    p = [[0 for j in range(n+1)] for i in range(m+1)] \n  \n    # Step 1 \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1\n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1]) \n  \n    # Step 2 \n    i = m \n    j = n \n    LCS = [] \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            LCS.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n        elif p[i-1][j] > p[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n  \n    return ''.join(reversed(LCS))",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GXTXAYB\") == \"GTAB\"",
        "num_ids": 4466,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all the words in the string\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # Loop through each word and put a space after the first letter of the word\n    for word in words:\n        str1 = str1.replace(word,'' + word)\n    return str1",
        "test": "assert capital_words_spaces(\"\") == \"\"",
        "num_ids": 2080,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to integers\n    nums = [int(num) for num in nums_str]\n    # Sort the integers using the built-in sort function\n    nums.sort()\n    # Convert the sorted integers back to strings and return the result\n    return [''.join(str(num)) for num in nums]",
        "test": "assert sort_numeric_strings(['3', '2', '5', '4', '1']) == ['1', '2', '3', '4', '5']",
        "num_ids": 2242,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 21,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for num in test_tup:\n        test_list.append(num)\n    return test_list",
        "test": "assert add_tuple([], ()) == []",
        "num_ids": 1583,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    \n    if arr[i] < arr[i//2]:\n        return False\n    \n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)//2)",
        "test": "assert check_min_heap_helper([5, 3, 1, 8, 10, 6, 7, 2, 4], 0) == True",
        "num_ids": 3322,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 1955,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def min_k(test_list, K):\n    # create a dictionary to store frequency of each element\n    freq = {}\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    \n    # iterate through the dictionary and find minimum frequency and element with minimum frequency\n    min_freq = float('inf')\n    min_elem = None\n    for elem, count in freq.items():\n        if count < min_freq:\n            min_freq = count\n            min_elem = elem\n    \n    # return the element with the minimum frequency\n    return min_elem",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 1) == (1, 2)",
        "num_ids": 3764,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Initialize an empty list to store the common elements\n    common = []\n    \n    # Loop through each index of the first list\n    for i in range(len(l1)):\n        # Check if the element at that index is present in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            # If it is, add it to the common list\n            common.append(l1[i])\n    \n    return common",
        "test": "assert extract_index_list([], [4, 5, 6], [1, 2, 3]) == []",
        "num_ids": 2468,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"List must have at least two elements.\"\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for i in range(2, len(numbers)):\n            if numbers[i] < smallest:\n                second_smallest = smallest\n                smallest = numbers[i]\n            elif numbers[i] < second_smallest and numbers[i]!= smallest:\n                second_smallest = numbers[i]\n        return second_smallest",
        "test": "assert second_smallest([4, 3, 5, 2, 1]) == 2",
        "num_ids": 1941,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"abbab\") == True, \"Error: text_match_zero_one should return True when the input string has an 'a' followed by one or more 'b's.\"",
        "num_ids": 1525,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n\n    return count",
        "test": "assert count_reverse_pairs([\"abcdefg\", \"zyxwvut\"]) == 0",
        "num_ids": 2350,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for item in list1:\n        if isinstance(item, list):\n            tup = tuple(item)\n            if tup in sublists:\n                sublists[tup] += 1\n            else:\n                sublists[tup] = 1\n    return sublists",
        "test": "assert unique_sublists([1, 2, 3]) == {}",
        "num_ids": 2492,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 29,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False",
        "test": "assert is_decimal(\"12.34.5\") == False",
        "num_ids": 1644,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    It returns True if the list contains only one distinct element, otherwise it returns False.\n    '''\n\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1]) == True, \"Expected True\"",
        "num_ids": 1887,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if monthnum3 in range(1, 13):\n        month_name = months[monthnum3 - 1]\n        if month_name in ['March', 'May', 'July', 'August', 'October', 'November']:\n            return True\n        elif month_name in ['April', 'June', 'September', 'November']:\n            return False\n        elif month_name in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n            return True\n        else:\n            return False\n    else:\n        print(\"Invalid month number.\")\n        return None",
        "test": "assert check_monthnumber_number(4) == False, \"4 is not a leap year\"",
        "num_ids": 2262,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    It uses the sorting algorithm to sort the array in ascending order and then finds\n    the difference between adjacent elements. If there are no adjacent elements, the\n    minimum difference is the difference between the last and the first elements.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the last and the first elements\n    min_diff = arr[-1] - arr[0]\n\n    # Iterate through the array and find the minimum difference\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n\n    # If there are no adjacent elements, the minimum difference is the difference between the last and the first elements\n    if min_diff == arr[-1] - arr[0]:\n        min_diff = arr[-1] - arr[0]\n\n    return min_diff",
        "test": "assert find_min_diff([1, 3, 5], 3) == 2",
        "num_ids": 2605,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr('12345') == 5",
        "num_ids": 1303,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number. \n    \"\"\"\n    polite_list = [1, 2]\n    for i in range(3, n+1):\n        if i%2 == 0:\n            polite_list.append(2*polite_list[-1]+1)\n        else:\n            polite_list.append(polite_list[-1]*2)\n    return polite_list[n-1]",
        "test": "assert is_polite(1) == 1, \"is_polite(1) should be 1\"",
        "num_ids": 2831,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1,2]) == [(1,2)]",
        "num_ids": 1783,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 6) == 2",
        "num_ids": 2100,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))",
        "test": "assert Diff([1,2,3,4,5],[1,2,3,4,5]) == []",
        "num_ids": 1491,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nresult = odd_num_sum(n)\nprint(\"The sum of fourth power of first {} odd natural numbers is: {}\".format(n, result))",
        "test": "assert odd_num_sum
        "num_ids": 3397,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "test": "assert check_expression(\"(((a+b)*c)+d))\") == False, \"Incorrect output\"",
        "num_ids": 1646,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    # Loop through each word and remove the ones with k length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1 # Decrement the index to avoid skipping elements\n    # Join the words back into a string and return it\n    return \" \".join(words)",
        "test": "assert remove_length(\"hello world python\", 0) == \"hello world python\"",
        "num_ids": 1661,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    matches = re.finditer(pattern, text)\n\n    if matches:\n        for match in matches:\n            start = match.start()\n            end = match.end()\n            print(\"Match found at position\", start, \"with length\", end - start, \":\", text[start:end])\n        return\n    else:\n        print(\"No matches found.\")\n        return None\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog is not lazy, but he is too lazy.\"\npattern = \"lazy\"\n\noccurance_substring(text, pattern)",
        "test": "assert occurance_substring(\"hello world\", \"foo\") == None",
        "num_ids": 2028,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 3, 5, 7, 8]) == False",
        "num_ids": 1685,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    prev_char = None\n    for char in test_str:\n        if char in vowels and char!= prev_char:\n            count += 1\n        prev_char = char\n    return count",
        "test": "assert count_vowels(\"\") == 0, \"Empty string should have no vowels\"",
        "num_ids": 1786,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the array\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    # Iterate through the unique elements and add their values to the sum\n    for element in unique_elements:\n        sum_non_repeated += element\n    # Return the sum of non-repeated elements\n    return sum_non_repeated",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 2950,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if key == list1[0]]",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 1859,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts",
        "test": "assert unique_sublists([1,2,3,4,5]) == {('1', '2', '3', '4', '5'): 1, ('4', '5'): 1}",
        "num_ids": 3264,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i])+sum(test_list[j]) == 0:\n                result.append((test_list[i], test_list[j]))\n    return result\n",
        "test": "assert find_combinations([(1, 2), (3, 4), (5, 6), (7, 8)]) == []",
        "num_ids": 4002,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function returns the count of divisors of a given number n.\n    '''\n    divisors = []\n    i = 1\n    while i <= int(math.sqrt(n)):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n        i += 1\n    return len(divisors)",
        "test": "assert count_divisors(20) == 6, \"count_divisors(20) should be 6.\"",
        "num_ids": 2293,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def odd_length_sum(arr):\n    # Initialize the sum variable\n    sum = 0\n    # Initialize the length variable\n    length = 0\n    # Initialize the max_length variable\n    max_length = 0\n    # Initialize the current_length variable\n    current_length = 0\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the length of the current subarray is odd, add the current element to the sum\n        if current_length % 2!= 0:\n            sum += arr[i]\n        # If the length of the current subarray is even, add the current element to the sum and increment the length\n        else:\n            sum += arr[i]\n            current_length += 1\n        # Update the length variable\n        length = current_length\n        # If the length of the current subarray is greater than the max_length, update the max_length\n        if length > max_length:\n            max_length = length\n    # Return the sum\n    return sum",
        "test": "assert odd_length_sum([1, 2, 3, 4]) == 10",
        "num_ids": 2624,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 28,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def rgb_to_hsv(r, g, b):\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    h = 0\n    s = 0\n\n    if cmax == cmin:\n        h = 0\n    else:\n        if r == cmax:\n            h = (g - b) / (cmax - cmin)\n        elif g == cmax:\n            h = 2 + (b - r) / (cmax - cmin)\n        else:\n            h = 4 + (r - g) / (cmax - cmin)\n\n        h = h * 60\n\n        if h < 0:\n            h += 360\n\n    s = (cmax - cmin) / cmax\n\n    v = cmax\n\n    return h, s, v",
        "test": "assert rgb_to_hsv(255, 0, 0) == (0.0, 1.0, 1.0)",
        "num_ids": 4649,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The product of the first even and odd numbers of the list.\n    \"\"\"\n    num_even = 0\n    num_odd = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            num_even += num\n        else:\n            num_odd += num\n\n    return num_even * num_odd\n",
        "test": "assert mul_even_odd([0, 2, 4, 6, 8]) == 0, \"The product of even and odd numbers in the list should be 0.\"",
        "num_ids": 2501,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 23,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    result = []\n    for i in test_str:\n        try:\n            result.append(int(i))\n        except ValueError:\n            pass\n    return tuple(result)",
        "test": "assert tuple_str_int(('1', '2', '3')) == (1, 2, 3), \"tuple_str_int('(1,2,3)')!= (1, 2, 3)\"",
        "num_ids": 1869,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 0) == 0",
        "num_ids": 1850,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three('aaabbbbabab') == True, 'Expected True, got {}'.format(text_match_three('aaabbbbabab'))",
        "num_ids": 1200,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n    test_list (list): A list of numbers.\n    test_str (str): A string of words separated by spaces.\n\n    Returns:\n    A new tuple containing the elements of `test_str` and `test_list`.\n    '''\n    return tuple(test_str.split() + test_list)",
        "test": "assert new_tuple(['a', 'b', 'c'], 'd') == ('d', 'a', 'b', 'c')",
        "num_ids": 1284,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Iterate through the list and check if the even index contains even numbers\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return True\n\n    # If we reach this point, it means all even indices contain even numbers\n    return False",
        "test": "assert even_position([1, 2, 3, 4, 5]) == False",
        "num_ids": 2152,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns a new tuple with all the nested tuples removed.\n    \"\"\"\n    def remove_nested_helper(nested_tup, result):\n        for sub_tup in nested_tup:\n            if isinstance(sub_tup, tuple):\n                remove_nested_helper(sub_tup, result)\n            else:\n                result.append(sub_tup)\n        return result\n    \n    result = []\n    remove_nested_helper(test_tup, result)\n    return tuple(result)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 1697,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "test": "assert count_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3",
        "num_ids": 1379,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if not arr:  # empty array\n        return None\n\n    # start at the end of the array and move backwards until we find the last occurrence of x\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == x:\n            return i\n\n    # if we reach this point, x was not found in the array\n    return None",
        "test": "assert last([1, 3, 5, 7, 9], 1) == 0",
        "num_ids": 2390,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_starta_endb(\"ababab\") == \"ababab\"",
        "num_ids": 1237,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total",
        "test": "assert return_sum({'a':1, 'b':2, 'c':3}) == 6",
        "num_ids": 1394,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range 1 to n.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum",
        "test": "assert sum_odd(1) == 0, \"Sum of odd numbers between 1 and 1 is not 0.\"",
        "num_ids": 1573,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 29,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total",
        "test": "assert _sum([1,2,3,4,5]) == 15, \"Incorrect sum of the array [1, 2, 3, 4, 5]\"",
        "num_ids": 1594,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # if d is greater than 31, return the original number\n    if d > 31:\n        return n\n\n    # calculate the number of bits to rotate\n    num_bits = 32 - d\n\n    # get the leftmost d bits of n and shift them to the right\n    left_bits = (n >> d) & ((1 << d) - 1)\n\n    # shift the remaining bits to the left\n    right_bits = n << num_bits\n\n    # concatenate the left and right bits\n    rotated_bits = (left_bits | right_bits) & ((1 << 32) - 1)\n\n    # return the rotated number\n    return rotated_bits",
        "test": "assert left_rotate(0, 2) == 0, \"Left rotation of 0 by 2 bits is incorrect\"",
        "num_ids": 2420,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces(\"Hello World\") == \"HelloWorld\"",
        "num_ids": 935,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count",
        "test": "assert test_three_equal(1,2,3) == 0, \"test_three_equal failed: 0!= 1\"",
        "num_ids": 1982,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0",
        "test": "assert count_rotation([1,1,1]) == 0, \"Count of rotations required is not correct\"",
        "num_ids": 2686,
        "indeed": true
    },
    {
        "number": 803,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # define a function to check whether a given number is a perfect square\n    def is_square(num):\n        '''\n        Check if a given number is a perfect square or not.\n        '''\n        # check if the number is less than 2\n        if num < 2:\n            return False\n        # check if the number is divisible by 2\n        while num % 2 == 0:\n            num //= 2\n        # if num is greater than 1, then it is not a perfect square\n        if num > 1:\n            return False\n        # if num is equal to 1, then it is a perfect square\n        return True\n    \n    # check if the given number is a perfect square\n    if is_square(n):\n        return True\n    else:\n        return False",
        "test": "assert is_perfect_square(4) == True, \"4 is a perfect square\"",
        "num_ids": 1774,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([1, 3, 5, 7, 9]) == False",
        "num_ids": 1493,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Calculate the sum of all elements in each list in the input list of lists\n    sums = []\n    for i in range(len(lists)):\n        sum = 0\n        for j in range(len(lists[i])):\n            sum += lists[i][j]\n        sums.append(sum)\n\n    # Find the maximum sum in the list of sums\n    max_sum = max(sums)\n\n    # Create a new list of lists that contains the elements of the input list of lists whose sum is the maximum\n    result = []\n    for i in range(len(lists)):\n        sum = 0\n        for j in range(len(lists[i])):\n            sum += lists[i][j]\n        if sum == max_sum:\n            result.append(lists[i])\n\n    return result\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) == [[13, 14, 15]]",
        "num_ids": 4062,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    is_upper = False\n    \n    # Iterate over each character in the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If it is, increment the current run count and check if it's greater than the maximum run count\n            if current_run + 1 > max_run:\n                max_run = current_run + 1\n                current_run = 1\n            else:\n                current_run += 1\n        else:\n            # If it's not uppercase, reset the current run count\n            current_run = 0\n    \n    # Return the maximum run count\n    return max_run",
        "test": "assert max_run_uppercase(\"race a car\") == 0",
        "num_ids": 2559,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1759,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K(('a', 'b', 'c'), 4) == False",
        "num_ids": 1456,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True",
        "test": "assert check_smaller((1, 2, 3), (2, 1, 3)) == False",
        "num_ids": 2154,
        "indeed": false
    }
]