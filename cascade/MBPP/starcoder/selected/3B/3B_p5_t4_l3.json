[
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem1 in test_tup1:\n        if elem1 in test_tup2:\n            shared_elements.append(elem1)\n    return shared_elements",
        "test": "assert similar_elements([1, 2, 3], [1, 2, 3, 4, 5]) == [1, 2, 3]",
        "num_ids": 1055,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return True\n\n    # Check if the number is divisible by any number between 3 and the square root of the number\n    for i in range(3, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    # If none of the above conditions are met, the number is prime\n    return False",
        "test": "assert is_not_prime(3) == False, \"is_not_prime(3) should return False\"",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a heap\n    heap = [-x for x in nums]\n    hq.heapify(heap)\n    # extract the largest n elements\n    result = [hq.heappop(heap) for i in range(n)]\n    return result",
        "test": "assert heap_queue_largest([3, 7, 2, 8, 5], 0) == []",
        "num_ids": 1230,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether the given number x is a power of two or not.\n    A power of two is a positive integer that is equal to a multiple of 2.\n    It has the property that 2^n == x for any integer n.\n    '''\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if x & (x-1) == 0: # check if the binary representation of x has only one bit set to 1\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(4) == True, \"Failed\"",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words",
        "test": "assert find_char_long(\"\") == []",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Check if the string is empty or has only one character\n    if len(str) <= 1:\n        return 0\n    \n    # Initialize variables to store the minimum number of rotations and the maximum length of the string\n    min_rotations = 0\n    max_length = len(str)\n    \n    # Loop through all possible rotations of the string\n    for i in range(1, max_length+1):\n        \n        # Check if the length of the current string after rotation is equal to the original string\n        if len(str[i:]) == len(str):\n            \n            # If the length of the current string after rotation is equal to the original string, increment the minimum number of rotations\n            min_rotations += 1\n            \n    # Return the minimum number of rotations\n    return min_rotations",
        "test": "assert find_Rotations(\"banana\") == 0",
        "num_ids": 1291,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if last_occurrence == -1:\n        return s\n    return s[:first_occurrence] + s[last_occurrence+len(ch):]",
        "test": "assert remove_Occ(\"hello\", \"l\") == \"heo\"",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # convert the matrix to a list of lists\n    rows = [list(row) for row in M]\n    # sort the rows in ascending order based on their sum\n    rows.sort(key=lambda x: sum(x))\n    # convert the sorted rows back to a matrix\n    sorted_M = [[row[i] for row in rows] for i in range(len(rows[0]))]\n    return sorted_M",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]",
        "num_ids": 1668,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h  # Formula for volume of a triangular prism\n    return V\n",
        "test": "assert find_Volume(20,20,10) == 500, \"The volume of a triangular prism with sides 20 and 20 and height 10 should be 500.\"",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define the regular expression pattern\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n\n    # Use the re.search() method to search for matches in the input string\n    matches = re.findall(pattern, text)\n\n    # Return true if any matches are found, false otherwise\n    return True if matches else False",
        "test": "assert text_lowercase_underscore('HELLO_WORLD_123') == False",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(5) == 20, \"The perimeter of a square with side length 5 is not equal to 20.\"",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list of unique characters in the string\n    unique_chars = list(set(string))\n    # Create a list to store the result\n    result = []\n    # Loop through each character in the first string\n    for char in string:\n        # If the character is not present in the second string, add it to the result list\n        if char not in string:\n            result.append(char)\n    # Return the result list\n    return result",
        "test": "assert str_to_list(\"hello world\")!= [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \"X\"]",
        "num_ids": 1303,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5, 5]) == True",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # check if the number is divisible by 5\n    if x % 5 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(6) == False",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n    return reverse < 2 * reverse",
        "test": "assert rev(15) == True",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_Max_Num(arr) : \n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    \n    max_num = 0\n    \n    for num in arr:\n        max_num = max(max_num, num)\n    \n    return max_num",
        "test": "assert find_Max_Num([1,2,3,4,5]) == 5",
        "num_ids": 1288,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(0,0) == False",
        "num_ids": 787,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_octagonal(n):\n    '''\n    This function checks if a given number is an octagonal number or not.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        if n < 16:\n            a = n*(n-1)*(n-2)\n            b = n*(n-1)*n\n            return a == b\n        else:\n            c = (n-1)*(n-1)\n            d = n*(n-1)*n\n            e = n*(n-1)*(n-2)\n            return c == d or c == e",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Creating a dictionary to store the count of substrings with the given condition\n    substring_count = defaultdict(int)\n    # Iterating over all substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Checking if the substring with sum of digits equal to its length exists in s\n            if s[i:j] == str(sum([int(digit) for digit in s[i:j]])):\n                substring_count[s[i:j]] += 1\n    # Returning the count of substrings with the given condition\n    return sum(substring_count.values())",
        "test": "assert count_Substrings(\"\") == 0",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 656,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    difference = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[j][0] > test_list[i][0]:\n                difference = max(difference, test_list[j][0] - test_list[i][0])\n    return difference",
        "test": "assert max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 8",
        "num_ids": 1755,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    \n    # Return the sorted list of tuples\n    return subjectmarks",
        "test": "assert subject_marks([(10, \"Math\"), (85, \"Science\"), (90, \"English\")]) == [(90, \"English\"), (85, \"Science\"), (10, \"Math\")]",
        "num_ids": 720,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten(lst):\n        flat_lst = []\n        for item in lst:\n            if type(item) == list:\n                flat_lst.extend(flatten(item))\n            else:\n                flat_lst.append(item)\n        return flat_lst\n    \n    def sum_flat_lst(flat_lst):\n        return sum(flat_lst)\n    \n    flat_lst = flatten(data_list)\n    return sum_flat_lst(flat_lst)",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([-1, 0, 1, 2]) == 2",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)",
        "test": "assert bell_number(1) == 1",
        "num_ids": 1249,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1: \n        return True\n    elif A[0] < A[1]: \n        return all(A[i] >= A[i-1] for i in range(1, len(A)))\n    else: \n        return all(A[i] <= A[i-1] for i in range(1, len(A)))",
        "test": "assert is_Monotonic([1,2,3,4,5]) == True, \"Test case 1 failed\"",
        "num_ids": 1436,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if len(l) < len(s):\n        return False\n    return s[0] in l and is_sublist(l[1:], s[1:])",
        "test": "assert is_sublist([1,2,3], [2,3,4]) == False",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in Input:\n        count += len(i)\n    if count == len(Input[0]):\n        return True\n    else:\n        return False",
        "test": "assert find_equal_tuple([(1,2),(3,4),(5,6),(7,8,9)]) == False",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Define the swap function\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Define the compare function\n    def compare(nums, i, j):\n        if nums[i] > nums[j]:\n            return -1\n        elif nums[i] < nums[j]:\n            return 1\n        else:\n            return 0\n\n    # Define the swap_partial function\n    def swap_partial(nums, low, mid, high):\n        for i in range(low, high):\n            if compare(nums, i, mid) > 0:\n                swap(nums, i, mid)\n\n    # Define the bubble_sort function\n    def bubble_sort(nums, low, high):\n        if low < high:\n            for i in range(low, high):\n                for j in range(low, high):\n                    if compare(nums, i, j) > 0:\n                        swap(nums, i, j)\n            bubble_sort(nums, low, high - 1)\n\n    # Define the comb_sort function\n    def comb_sort(nums):\n        n = len(nums)\n        gap = n\n        while gap > 1:\n            gap = n // 10\n            for i in range(gap, n):\n                if compare(nums, i, i - gap) > 0:\n                    swap(nums, i, i - gap)\n            n -= gap\n            bubble_sort(nums, 0, n)\n\n    comb_sort(nums)\n    return nums",
        "test": "assert comb_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]",
        "num_ids": 1546,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def is_Square(n):\n    '''\n    This function returns True if the given number is a square number, and False otherwise.\n    '''\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n\n\n\ndef dif_Square(n):\n    '''\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 2:\n        return False\n    if is_Square(n) or is_Square(2 * n):\n        return True\n    return False\n",
        "test": "assert dif_Square(125) == False, \"The number 125 cannot be represented as the difference of two squares\"",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True",
        "test": "assert is_samepatterns([['red', 'blue', 'green'], ['yellow'], ['orange','red', 'green']], [[1, 2, 3], [5, 6, 7], [4]]) == False, \"Test Case 2 Failed\"",
        "num_ids": 1139,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_list = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            filtered_list.append(tup)\n    return filtered_list",
        "test": "assert find_tuples([(1,2,3), (4,5,6), (7,8,9)], 4) == []",
        "num_ids": 1420,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(21) == False",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Convert the input string into a list of characters\n    words = list(s)\n\n    # Initialize a variable to store the length of the word\n    word_len = 0\n\n    # Iterate over the list of characters to check the length of the word\n    for char in words:\n        # Increment the length of the word by 1\n        word_len += 1\n\n    # Return True if the length of the word is odd, else False\n    return word_len % 2!= 0",
        "test": "assert word_len(\"apple\") == True",
        "num_ids": 777,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + tetrahedral_number(n-4)",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "test": "assert volume_sphere(1) == 4/3 * math.pi * 1**3, \"volume_sphere(1) should return 4/3 * pi * r^3, where r is 1.\"",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def get_Char(strr):\n    # Initialize an empty string to store the ASCII values of all the characters\n    ascii_str = ''\n\n    # Loop through each character of the input string\n    for char in strr:\n        # Convert each character to its ASCII value and add it to the ASCII string\n        ascii_val = ord(char)\n        ascii_str += str(ascii_val)\n\n    # Calculate the sum of all the ASCII values of the characters and take the remainder\n    sum_ascii = sum(int(ascii_str[i:i+len(ascii_str)//2]) for i in range(0, len(ascii_str), 2)) % 26\n\n    # Convert the remainder to the corresponding character and return it\n    return chr(97 + sum_ascii)",
        "test": "assert get_Char('programming') == 112, \"get_Char('programming') should return 112\"",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman conway sequence.\n    \"\"\"\n    if n < 1:\n        return None\n    \n    # Initialize sequence with 1\n    sequence = [1]\n    \n    # Iterate n times to generate sequence\n    for _ in range(n-1):\n        # Generate next sequence using previous sequence\n        next_sequence = [sequence[-1]]\n        for i in range(len(sequence)-1):\n            if sequence[i] == 1:\n                next_sequence.append(sequence[i+1])\n        sequence = next_sequence\n    \n    # Return the nth number in the sequence\n    return sequence[-1]",
        "test": "assert sequence(1) == 1",
        "num_ids": 2473,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == math.pi * 2 ** 2, 'The surface area of a sphere with radius 1 is incorrect.'",
        "num_ids": 750,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine all the keys from the three dictionaries\n    keys = dict1.keys() | dict2.keys() | dict3.keys()\n    # Create an empty dictionary to store the merged values\n    merged_dict = {}\n    # Iterate over all the keys\n    for key in keys:\n        # Add the values from the three dictionaries to the merged dictionary\n        merged_dict[key] = dict1.get(key, None) if key in dict1 else None\n        merged_dict[key] = dict2.get(key, merged_dict[key]) if key in dict2 else merged_dict[key]\n        merged_dict[key] = dict3.get(key, merged_dict[key]) if key in dict3 else merged_dict[key]\n    # Return the merged dictionary\n    return merged_dict",
        "test": "assert merge_dictionaries_three({},{},{}) == {}, \"Test 1: Empty dictionaries should merge to an empty dictionary\"",
        "num_ids": 1508,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list and returns a dictionary where the keys are the elements of the list and\n    the values are their respective frequencies.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict",
        "test": "assert freq_count([]) == {}",
        "num_ids": 708,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N == 1:\n        return 0\n    min_num = min(N, N-1)\n    return min_num",
        "test": "assert closest_num(2) == 1",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for i in list1:\n        if len(i) > longest:\n            longest = len(i)\n    return longest",
        "test": "assert len_log(['hello', 'world']) == 5, \"Incorrect length of longest word\"",
        "num_ids": 886,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring(\"hello world\", \"python\") == False",
        "num_ids": 845,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def is_undulating(n): \n    # convert the number to string and split it into a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # sum the digits and check if it is divisible by 9\n    return sum(digits) % 9 == 0",
        "test": "assert is_undulating(0) == True, \"0 is undulating\"",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b<0:\n        return 1/power(a,abs(b))\n    else:\n        return a*power(a,b-1)",
        "test": "assert power(2, 2) == 4, \"Incorrect result for 2^2\"",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[0][0]",
        "test": "assert index_minimum([(1, 2), (3, 4), (5, 6), (7, 8)]) == 1, \"The first value of the tuple with the smallest second value should be 1.\"",
        "num_ids": 962,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6],[7]]) == 1, \"Incorrect output\"",
        "num_ids": 813,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            if n / i!= i:\n                count += 1\n    return count",
        "test": "assert divisor(10) == 4",
        "num_ids": 591,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        if type(item) == list:\n            freq_dict.update(frequency_lists(item))\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict",
        "test": "assert frequency_lists(['a','a','b','c']) == {'a': 2, 'b': 1, 'c': 1}",
        "num_ids": 1656,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)",
        "test": "assert multiply_num([1]) == 1",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Check whether a number is palindrome or not.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    for i in range(num, 10**9, -1):\n        if is_palindrome(i):\n            return i\n    raise ValueError(\"No palindromic number found.\")",
        "test": "assert next_smallest_palindrome(11111) == 12222",
        "num_ids": 1453,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 0\n        right = len(arr) - 1\n        while left < right:\n            pivot = left + (right - left) // 2\n            if arr[pivot] < arr[right]:\n                right = pivot\n            else:\n                left = pivot + 1\n        if k == left + 1:\n            return arr[left]\n        elif k == left + 2:\n            return arr[right]\n        else:\n            return None",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 1096,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        elif word[i].isupper():\n            camel_word += '_' + word[i].lower()\n        else:\n            camel_word += word[i]\n    return camel_word\n",
        "test": "assert snake_to_camel('message') =='message'",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n    \"\"\"\n    # Calculate the number of possible combinations of n parts and m parts\n    n_comb = 1\n    for i in range(1, n+1):\n        n_comb *= i\n    m_comb = 1\n    for i in range(1, m+1):\n        m_comb *= i\n    # Calculate the total number of combinations that can be formed\n    total_comb = n_comb // m_comb\n    # Calculate the Eulerian number a(n, m)\n    eulerian = total_comb // (n_comb // (n - 1))\n    return eulerian",
        "test": "assert eulerian_num(10, 20) == 0, \"The function eulerian_num(10, 20) should return 0.\"",
        "num_ids": 1323,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "test": "assert sort_sublists([[1, 2, 3], ['a', 'b', 'c']]) == [[1, 2, 3], ['a', 'b', 'c']]",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "test": "assert count([True, True, True, False, False]) == 3, \"The count function is not returning the correct output for the given list.\"",
        "num_ids": 519,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Using append method to append list to tuple\n    test_tup = test_tup + tuple(test_list)\n    return test_tup",
        "test": "assert add_lists([4, 5], (1, 2, 3)) == (1, 2, 3, 4, 5)",
        "num_ids": 829,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Use heapq to merge three lists into a single sorted list.\n    # First, convert the three lists into min-heap data structure.\n    heap1 = [-num for num in num1]\n    heap2 = [-num for num in num2]\n    heap3 = [-num for num in num3]\n    \n    # Then, extract the minimum element from each heap and append to a new list.\n    merged_list = []\n    while heap1 and heap2 and heap3:\n        if heap1[0] <= heap2[0] and heap1[0] <= heap3[0]:\n            merged_list.append(heap1.pop(0))\n        elif heap2[0] <= heap1[0] and heap2[0] <= heap3[0]:\n            merged_list.append(heap2.pop(0))\n        else:\n            merged_list.append(heap3.pop(0))\n    \n    # Check if there are still elements in the heaps. If so, append them to the new list.\n    while heap1:\n        merged_list.append(heap1.pop(0))\n    while heap2:\n        merged_list.append(heap2.pop(0))\n    while heap3:\n        merged_list.append(heap3.pop(0))\n        \n    # Return the merged list.\n    return merged_list",
        "test": "assert merge_sorted_list([], [], []) == []",
        "num_ids": 1873,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def odd_Equivalent(s, n): \n    # Initialize count variable to 0\n    count = 0\n    # Split the binary string into an array of characters\n    bin_str = [int(i) for i in bin(int(s, 2))[2:]]\n    # Loop through each character in the array\n    for i in range(len(bin_str)):\n        # If the character is odd, increment the count variable\n        if bin_str[i] % 2!= 0:\n            count += 1\n        # If the count variable is equal to n, break out of the loop\n        if count == n:\n            break\n    # Return the count variable\n    return count",
        "test": "assert odd_Equivalent('10101', 3) == 3",
        "num_ids": 1248,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j in common:\n                common.remove(j)\n            else:\n                common.append(j)\n    return common",
        "test": "assert common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]) == []",
        "num_ids": 1048,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n\n    This function takes a string as input and returns True if the string represents an integer, and False otherwise.\n\n    Examples:\n    >>> check_integer('42')\n    True\n    >>> check_integer('123.45')\n    False\n    >>> check_integer('-987654321')\n    True\n    >>> check_integer('0')\n    True\n    '''\n\n    if text == '':\n        return False\n\n    if text[0] == '-':\n        text = text[1:]\n\n    if text[0] == '0' and len(text) > 1:\n        return False\n\n    for char in text:\n        if char < '0' or char > '9':\n            return False\n\n    return True",
        "test": "assert check_integer('123') == True",
        "num_ids": 741,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)",
        "test": "assert tuple_to_int((7,)) == 7",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for item in test_list:\n        if isinstance(item, float):\n            float_list.append(item)\n        elif isinstance(item, list):\n            float_list.append(list_to_float(item))\n        else:\n            try:\n                float_list.append(float(item))\n            except ValueError:\n                float_list.append(None)\n    return float_list",
        "test": "assert list_to_float([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def string_to_list(string):\n    return string.split()",
        "test": "assert string_to_list(\"apple orange banana\") == [\"apple\", \"orange\", \"banana\"]",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i - 1]:\n            for j in range(i + 1, n):\n                if arr[j] == arr[i]:\n                    return arr[i]\n    return None",
        "test": "assert search([1, 2, 3, 4, 5]) == None, \"The search function is not working correctly\"",
        "num_ids": 2095,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product",
        "test": "assert max_product_tuple([(1,2), (3,4), (-1,5), (6,7), (8,9)]) == 30",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def is_amicable_number(num):\n    \"\"\"\n    Check if a number is amicable. A number is amicable if it is both a prime and has no other factors besides 1 and itself.\n    \"\"\"\n    if num < 2:\n        return False\n    prime = True\n    for i in range(2, num):\n        if num % i == 0:\n            prime = False\n            break\n    return prime and num == sum(set(range(1, num)) - {1, num})\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Find the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_amicable = 0\n    for num in range(1, limit+1):\n        if is_amicable_number(num):\n            sum_amicable += num\n    return sum_amicable",
        "test": "assert amicable_numbers_sum(4000000) == 142857, \"Incorrect result: expected 142857, got {}.\".format(amicable_numbers_sum(4000000))",
        "num_ids": 1257,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the angle using cmath module\n    angle = cmath.phase(complex(a,b))\n    return angle",
        "test": "assert angle_complex(1,0) == cmath.phase(1+0j)",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count_0 = string.count('0', i, j)\n            count_1 = string.count('1', i, j)\n            if count_1 > count_0:\n                max_diff = max(max_diff, count_1 - count_0)\n    return max_diff",
        "test": "assert find_length(\"101010\") == 1",
        "num_ids": 1997,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisors of the two given numbers\n    common = set(set(a).intersection(set(b)))\n\n    # Find the sum of the common divisors\n    return sum(common)",
        "test": "assert sum(24,24) == 48, \"The sum of common divisors of 24 and 24 is incorrect.\"",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 392,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def long_words(n, words):\n    '''\n    This function takes in a list of words and a maximum length n as input and returns a list of words that are longer than n characters.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list",
        "test": "assert long_words(10, ['apple', 'banana', 'cherry', 'date', 'elderberry']) == []",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    total_sum = 0\n    \n    # Check rows and columns\n    for i in range(n):\n        total_sum += my_matrix[i][i]\n        total_sum += my_matrix[i][n-i-1]\n    \n    # Check diagonal\n    total_sum += my_matrix[0][0]\n    total_sum += my_matrix[n-1][n-1]\n    \n    # Check remaining cells\n    for i in range(n):\n        for j in range(n):\n            if i == j == n-1:\n                continue\n            total_sum += my_matrix[i][j]\n    \n    return total_sum == n**2 * (n**2 + 1) // 2",
        "test": "assert magic_square_test([[1, 2, 3], [2, 1, 3], [3, 2, 1]]) == False",
        "num_ids": 1880,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)  # create a defaultdict to store frequency counts\n    for num in nums:\n        freq[num] += 1  # increment the frequency count for each number\n    max_freq = max(freq.values())  # find the maximum frequency count\n    for num, count in freq.items():  # iterate over items and find the one with maximum frequency\n        if count == max_freq:\n            return num\n    return None  # if no item has max frequency, return None",
        "test": "assert max_occurrences([1, 2, 1, 2, 3, 4, 2, 5]) == 2",
        "num_ids": 1109,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_vowels = ''\n    for char in str1:\n        if char in vowels:\n            if char.lower() not in vowels:\n                reversed_vowels += char\n    return reversed_vowels[::-1]",
        "test": "assert reverse_vowels('A') == ''",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert tuple to string using join() method\n    return ','.join(str(x) for x in tup1)",
        "test": "assert tup_string(()) == ''",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives_sum = 0\n    for num in nums:\n        if num < 0:\n            negatives_sum += num\n    return negatives_sum",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 780,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * (n//2) + 1\n    else:\n        return 2 * (n//2) + 2",
        "test": "assert hexagonal_num(2) == 3",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    ratio = 0\n    if non_zero_count!= 0:\n        ratio = zero_count / non_zero_count\n    return ratio",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0.0, \"The function did not return the correct value for [1, 2, 3, 4, 5]\"",
        "num_ids": 2229,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check for n being a multiple of 4\n    if n % 4!= 0: \n        return False\n\n    # Convert n to binary\n    binary_n = bin(n)[2:]\n\n    # Check if the binary representation of n has more than one 1\n    if binary_n.count('1') > 1: \n        return False\n\n    # Check if the binary representation of n has more than 1 0s at the end\n    if binary_n.count('0') > len(binary_n) - binary_n.count('1'): \n        return False\n\n    # Check if the binary representation of n has only one 0 at the beginning\n    if binary_n.count('0') == 1 and binary_n[0] == '0': \n        return False\n\n    # Check if the binary representation of n has at most 2 0s in a row\n    if binary_n.count('0') > 2: \n        return False\n\n    # If all the conditions have been met, return True\n    return True",
        "test": "assert is_Sum_Of_Powers_Of_Two(16) == False",
        "num_ids": 1439,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference",
        "test": "assert circle_circumference(5) == 31.41592653589793, \"The function is not working correctly. Please check the implementation.\"",
        "num_ids": 1008,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([num for sublist in test_list for num in sublist])",
        "test": "assert extract_singly([[1,2,3],[4,5,6],[7,8,9],[10]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_helper(nums, start, end):\n        if start >= end:\n            return\n        for i in range(start, end + 1):\n            min_idx = i\n            for j in range(start, end):\n                if nums[j] < nums[min_idx]:\n                    min_idx = j\n            nums[i], nums[min_idx] = nums[min_idx], nums[i]\n        sort_helper(nums, start + 1, end)\n\n    sort_helper(nums, 0, len(nums) - 1)",
        "test": "assert pancake_sort([1,5,4,3,2]) == [1,2,3,4,5]",
        "num_ids": 1298,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3,4],[4,5,6,7],[5,6,7,8]) == 0, \"count_samepair([1,2,3,4],[4,5,6,7],[5,6,7,8]) should return 0\"",
        "num_ids": 1299,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count",
        "test": "assert find_lists((1, 2, 3, 4)) == 0",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and finds the maximum difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 4",
        "num_ids": 1318,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def find_solution(a, b, n):\n    x = 0\n    y = 0\n    while x**2 + y**2 <= n:\n        x += 1\n    if x**2 + y**2 == n:\n        return (x, y)\n    else:\n        return None",
        "test": "assert find_solution(5, 3, 7) == None",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input, list1 and list2. It removes all elements from list1 present in list2.\n\n    Args:\n        list1 (list): A list of elements to be removed from.\n        list2 (list): A list of elements that are to be removed.\n\n    Returns:\n        list: A new list without the elements present in list2.\n\n    Examples:\n        >>> remove_elements([1, 2, 3, 4, 5], [2, 4, 6])\n        [1, 3, 5]\n\n        >>> remove_elements([1, 2, 3, 4, 5], [1, 3, 5])\n        [2, 4]\n\n        >>> remove_elements([1, 2, 3, 4, 5], [5])\n        []\n    \"\"\"\n    return [x for x in list1 if x not in list2]",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 884,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    i = 0\n    while i <= n // 2:\n        series_sum += n - 2 * i\n        i += 1\n    return series_sum",
        "test": "assert sum_series(10) == 30",
        "num_ids": 891,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i*2*pi/l\n        area += s*tan(angle)\n    return area",
        "test": "assert area_polygon(10, 15) == 240.6757585484178, \"Incorrect result for area_polygon(10, 15).\"",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    def sum_divisors(num):\n        \"\"\"\n        Returns the sum of the divisors of a given number.\n        \"\"\"\n        divisors = [1]\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divisors.append(i)\n                if num // i!= i:\n                    divisors.append(num // i)\n        return sum(divisors)\n\n    if sum_divisors(n) == sum_divisors(n + 1):\n        return True\n    else:\n        return False",
        "test": "assert div_sum(52) == False",
        "num_ids": 1249,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    # Iterate through the string\n    for char in str1:\n        # If the character is a letter, increment its count in the dictionary\n        if char.isalpha():\n            char_count[char] = char_count.get(char, 0) + 1\n    # Return the count of each character\n    return char_count",
        "test": "assert count_char_position('Abcdefghijklmnopqrstuvwxyz') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}",
        "num_ids": 1594,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 3, 5, 7, 9]) == 0",
        "num_ids": 1205,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Initialize power of 2\n    power = 1\n    \n    # Loop until power is greater than or equal to n\n    while power < n:\n        power <<= 1\n        \n    return power",
        "test": "assert next_power_of_2(3) == 4",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([4,5,6,4,5,6], 4) == 2",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 2, 4) == 9",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "test": "assert perimeter_pentagon(1) == 5",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    start = 0\n    while True:\n        index = s.find('std', start)\n        if index == -1:\n            break\n        else:\n            count += 1\n            start = index + 1\n    return count",
        "test": "assert count_occurance(\"Hello, world! std is a good practice.\") == 1, \"The count_occurance function is not correct.\"",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in a tuple have the same data type or not.\n    \"\"\"\n    # Check if there are at least two elements in the tuple\n    if len(test_tuple) < 2:\n        return False\n    \n    # Get the data type of the first element\n    data_type = type(test_tuple[0])\n    \n    # Loop over the remaining elements\n    for element in test_tuple[1:]:\n        # Check if the current element has the same data type as the first element\n        if type(element)!= data_type:\n            return False\n    \n    # If we reach this point, all elements in the tuple have the same data type\n    return True",
        "test": "assert check_type([1,2,3,4,5]) == True",
        "num_ids": 1066,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1,2,3,4,5], 5, 2) == False",
        "num_ids": 1407,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Create an empty list to store the odd values\n    odd_values = []\n\n    # Loop through each character in the string\n    for char in str:\n        # Check if the index value of the character is odd\n        if (str.index(char) + 1) % 2 == 1:\n            # If the index value is odd, add the character to the odd_values list\n            odd_values.append(char)\n\n    # Convert the odd_values list to a string and return it\n    return ''.join(odd_values)",
        "test": "assert odd_values_string('hello') == 'hllo'",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c",
        "test": "assert min_of_three(3,5,1) == 1",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l,r+1):\n        count += n & (1 << i) # check the ith bit of n \n    return (count == 0) # return True if all the bits are set and False otherwise",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,1,9) == False, 'Testing for n=10, l=1, r=9 failed'",
        "num_ids": 1134,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize variables for keeping track of the negative and positive elements\n    neg = []\n    pos = []\n    \n    # Loop through the array and add elements to the appropriate lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    \n    # Combine the two lists into a single array\n    combined = neg + pos\n    \n    # Shuffle the array using the Fisher-Yates shuffle algorithm\n    for i in range(len(combined)):\n        j = i + random.randint(0, len(combined) - i - 1)\n        combined[i], combined[j] = combined[j], combined[i]\n    \n    return combined",
        "test": "assert re_arrange_array([2, -1, 0, 1, -2], 3) == [-2, 0, 2, -1, 1]",
        "num_ids": 1838,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)",
        "test": "assert replace_blank(\"hello world\", \"\") == \"helloworld\"",
        "num_ids": 465,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # sort the list in descending order\n    list1.sort(reverse=True)\n    # get the first n items from the sorted list\n    return list1[:n]",
        "test": "assert larg_nnum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == []",
        "num_ids": 1086,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A = 2*r*h\n    return A",
        "test": "assert lateralsuface_cylinder(1,2)==4.0, \"The function is not correct.\"",
        "num_ids": 1556,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3 # calculate the volume\n    return v",
        "test": "assert volume_cube(3) == 27, \"The volume of the cube with side length 3 is not correct.\"",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n |= n >> 1   # Set all even bits to 1\n    n |= n >> 2   # Set all even bits to 1\n    n |= n >> 4   # Set all even bits to 1\n    n |= n >> 8   # Set all even bits to 1\n    n |= n >> 16  # Set all even bits to 1\n    return n",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a dictionary to store the occurrence of each tuple\n    occurrences = {}\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n\n        # Check if the tuple is already in the dictionary\n        if tup in occurrences:\n            # If it is, increment the count\n            occurrences[tup] += 1\n        else:\n            # If not, add the tuple to the dictionary with a count of 1\n            occurrences[tup] = 1\n\n    # Return the dictionary of occurrence counts\n    return occurrences",
        "test": "assert check_occurences([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == { (1, 2): 1, (3, 4): 1, (5, 6): 1, (7, 8): 1, (9, 10): 1 }",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_of_substrings(str): \n    # initialize an empty set to store the count of substrings \n    count = set() \n\n    # loop through all possible substrings of the given string \n    for i in range(len(str) + 1): \n        for j in range(i, len(str) + 1): \n            # if the substring is not empty, add it to the set of substrings \n            if j > i and str[i:j] not in count: \n                count.add(str[i:j]) \n    # return the size of the set as the count of substrings \n    return len(count) ",
        "test": "assert number_of_substrings('') == 0",
        "num_ids": 967,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(n + 1):\n        total += m // i\n    return total",
        "test": "assert get_total_number_of_sequences(15,5) == 6250",
        "num_ids": 1049,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list2\n    else:\n        list1[-1] = list2[0]\n        return replace_list(list1[:-1], list2[1:])",
        "test": "assert replace_list([], []) == []",
        "num_ids": 851,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"hello world\") == 11, \"The function should count the total number of characters in the string 'hello world' correctly.\"",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N and returns the next perfect square greater than N.\n    \"\"\"\n    sqrtN = int(math.sqrt(N))\n    sqrtN = sqrtN * sqrtN\n    return sqrtN + 1",
        "test": "assert next_Perfect_Square(1) == 2",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables for the current bitonic subsequence\n    current_sum = arr[0]\n    prev_sum = arr[0]\n    # Initialize variables for the maximum sum of all bitonic subsequences\n    max_sum_prev = arr[0]\n    max_sum_current = arr[0]\n    \n    # Iterate through the array and update the current and maximum sum of bitonic subsequences\n    for i in range(1, n):\n        if arr[i] > arr[i-1]: # Check if the current element is increasing\n            current_sum = current_sum + arr[i]\n            max_sum_current = max(max_sum_current, current_sum)\n        else: # Check if the current element is decreasing\n            current_sum = current_sum - arr[i]\n            max_sum_current = max(max_sum_current, current_sum)\n        max_sum_prev = max(max_sum_prev, current_sum - prev_sum)\n        prev_sum = current_sum\n    return max_sum_current",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1839,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while guess**2 > number:\n        guess = (guess + number / guess) / 2\n    return guess",
        "test": "assert babylonian_squareroot(4) == 2.0, \"babylonian_squareroot(4) should be 2.0\"",
        "num_ids": 1123,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    lps_length = 1\n    max_length = 1\n    \n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            lps_length += 1\n            max_length = max(max_length, lps_length)\n        else:\n            lps_length = 1\n            \n    return max_length",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total",
        "test": "assert harmonic_sum(0) == 0, \"The harmonic sum of 0 should be 0.\"",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays and returns a new array containing only the elements that are present in both arrays.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # create a new array to store the intersection\n    intersection = []\n    \n    # iterate through array_nums2 and check if each element is present in freq_dict\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n    \n    return intersection",
        "test": "assert intersection_array([1,2,3,4,5], [2,3,4,5,6]) == [2,3,4,5]",
        "num_ids": 969,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 4, 5), 6) == 0, \"count_X did not return the expected result.\"",
        "num_ids": 1061,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result",
        "test": "assert insert_element([1,2,3,4,5],6) == [6,1,2,3,4,5]",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for number in numbers:\n        try:\n            complex_num = complex(number)\n            magnitude = abs(complex_num)\n            phase = cmath.phase(complex_num)\n            polar_coords.append((magnitude, phase))\n        except ValueError:\n            polar_coords.append(None)\n    return polar_coords",
        "test": "assert convert([0, 0]) == [0, 0]",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1,2,3,4,5]) == 5, \"count_integer([1,2,3,4,5]) should return 5.\"",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l) - n + 1):\n        combo = tuple(l[i:i+n])\n        combos.append(combo)\n    return combos",
        "test": "assert combinations_colors([7,8,9], 3) == [(7, 8, 9)]",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 1073,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(3,4) == (4,3), \"The function is not working correctly. Please check your implementation.\"",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2",
        "test": "assert maximize_elements((1, 2), (3, 4)) == (3, 4)",
        "num_ids": 1436,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1:\n        return None\n\n    primes = []\n    p = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(p**0.5) + 1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(p)\n        p += 1\n\n    if len(primes) == 0:\n        return None\n    else:\n        return primes[n - 1]",
        "test": "assert newman_prime(2) == 3, \"newman_prime(2) should return 3\"",
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup",
        "test": "assert division_elements((2, 3, 4), (2, 3, 4)) == (1.0, 1.0, 1.0)",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 1262,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # convert the human age to dog years\n    dog_years = h_age * 7\n\n    # round down to the nearest integer\n    dog_years = int(dog_years)\n\n    # return the dog's age in dog years\n    return dog_years",
        "test": "assert dog_age(1) == 7, \"The age of a dog with 1 hour of experience is 7 years old.\"",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    return [S[i:i+n] for i in range(0, len(S), n)]",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]",
        "num_ids": 1540,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area",
        "test": "assert lateralsurface_cube(2.5) == 5.0, \"Expected 5.0, got %s\" % lateralsurface_cube(2.5)",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    count = 1\n    total = 0\n    while count <= n:\n        total += count*count\n        count += 2\n    return total",
        "test": "assert square_Sum(1) == 1 # correct",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize variables\n    result = 1\n    num_stars = 1\n\n    # loop through n-1 stars\n    for i in range(1, n):\n        # update result and num_stars\n        result *= num_stars\n        num_stars *= 2\n\n    return result",
        "test": "assert find_star_num(1) == 1, \"The first star number is 1.\"",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {chr(i): i for i in range(256)}\n    return ascii_dict[k]",
        "test": "assert ascii_value('A') == 65, \"Incorrect ascii_value for 'A'\"",
        "num_ids": 412,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even",
        "test": "assert sum_even_and_even_index([1,3,5,7,9]) == 0",
        "num_ids": 1114,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # initialize sum variable\n    sum = 0\n    # loop through even numbers up to n\n    for i in range(2, n+1, 2):\n        # calculate sum of i raised to the fifth power\n        sum += i**5\n    # return sum of first n even natural numbers raised to the fifth power\n    return sum",
        "test": "assert even_Power_Sum(30) == 1300025000000000000000, \"The output of even_Power_Sum(30) is incorrect.\"",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list",
        "test": "assert rear_extract([]) == []",
        "num_ids": 786,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_tup)\n",
        "test": "assert substract_elements((1, 2, 3), (1, 2, 3)) == (0, 0, 0)",
        "num_ids": 893,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result += math.comb(n, i)\n    return result",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1206,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * (r ** 2) * h\n    return vol",
        "test": "assert volume_cylinder(3,4) == 52.35987755982988, \"volume_cylinder(3,4) should be equal to 52.35987755982988\"",
        "num_ids": 1040,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}",
        "test": "assert dict_filter({'a':1,'b':2,'c':3,'d':4,'e':5},2) == {'b':2,'c':3,'d':4,'e':5}",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        else:\n            if test_tup[i-1]!= test_tup[i]:\n                break\n            else:\n                count += 1\n    return count",
        "test": "assert count_first_elements((1,2,3,4)) == 0",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = 0\n    for i in range(n):\n        dec_num += (2 * (i+1))**2\n    return dec_num\n",
        "test": "assert is_num_decagonal(2) == 20  # correct",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 2) == (True, 1)",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set from the list to check for duplicates\n    set_obj = set(test_list)\n    # check if the length of the set is equal to the length of the original list\n    if len(set_obj) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([]) == True, \"Error: all_unique([]) should return True\"",
        "num_ids": 1097,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1, 2, 3], [1, 2, 3]) == [0, 0, 0]",
        "num_ids": 1151,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # split the integer into a list of digits\n    digits = [int(d) for d in str(n)]\n    # count the frequency of each digit in the list\n    freq = [digits.count(d) for d in range(10)]\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > digit:\n            return False\n    return True",
        "test": "assert validate(12345) == True, \"Error: Frequency of digits is less than or equal to themselves.\"",
        "num_ids": 1115,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    if list[0] == element:\n        for i in range(1,len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False",
        "test": "assert check_element([1,2,3,4,5], 6) == False, \"check_element([1,2,3,4,5], 6) should return False\"",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b(?:(2|3))?.*'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three(\"abaabbbabb\") == True, \"Failed the first test case\"",
        "num_ids": 1692,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize max_sum and temp_sum as 0\n    max_sum = 0\n    temp_sum = 0\n    \n    # Iterate through the array and find the sum of elements in the modified array\n    for i in range(n):\n        temp_sum += a[i]\n        # Check if the current sum exceeds the maximum sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n        # If the current sum is greater than the maximum sum and the index of the current element is less than k, update the maximum sum to the current sum\n        elif temp_sum == max_sum and i < k:\n            max_sum = temp_sum\n    \n    # Repeat the modified array k times and find the maximum sum in the modified array\n    modified_array = [0] * k\n    for i in range(k):\n        modified_array[i] = a[i] * (k-i)\n        if modified_array[i] > max_sum:\n            max_sum = modified_array[i]\n    \n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 5) == 15",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the current number to the sum\n        sum += i*i\n\n    # return the sum of squares of first n even natural numbers\n    return sum",
        "test": "assert square_Sum(30) == 1719250",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def count_no_of_ways(n, k):\n    # initialize an array to store the count of ways to paint the fence\n    count = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # base case for n = 1 or k = 1\n    for i in range(2, k + 1):\n        count[1][i] = 1\n\n    # calculate the count for n = 1 and k >= 2\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            count[i][j] = count[i - 1][j] + count[i][j - 1]\n\n    # return the last element in the count array, which stores the count of ways to paint the fence\n    return count[n][k]",
        "test": "assert count_no_of_ways(3, 4) == 6",
        "num_ids": 1259,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = int(n / m)\n    return quotient",
        "test": "assert find(12, 3) == 4 # correct output",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the third side\n    c = math.sqrt(w**2+h**2)\n    return c",
        "test": "assert otherside_rightangle(3,4) == 5, \"wrong result\"",
        "num_ids": 776,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val",
        "test": "assert max_val([True,False,1,2.5,3.14]) == 3.14",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize a variable to store the sum of divisors\n    sum_divisors = 0\n\n    # loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(number ** 0.5) + 1):\n        # check if the number is divisible by i\n        if number % i == 0:\n            # if it is, add i to the sum\n            sum_divisors += i\n\n    # return the sum of divisors\n    return sum_divisors",
        "test": "assert sum_div(40) == 68",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array in ascending order\n    arr = sorted(arr)\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through the array and find the inversions\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += len(arr) - j - i\n\n    return count",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1304,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "test": "assert flatten_list([]) == []",
        "num_ids": 966,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for _, tup in enumerate(stdata):\n        max_aggr[tup[0]] += tup[1]\n    return max(max_aggr.values())",
        "test": "assert max_aggregate([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == 5, \"Incorrect result for max_aggregate\"",
        "num_ids": 1105,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1, 2**n, -1):\n        total = 0\n        for j in range(n):\n            total += i % 2\n            i //= 2\n        if total == sum(range(1, n+1)):\n            count += 1\n    return count",
        "test": "assert count_binary_seq(0) == 0",
        "num_ids": 1139,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        else:\n            depth += 1\n    return depth",
        "test": "assert dict_depth({}) == 0, \"Empty dictionary has depth 0\"",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    for i in range(rotations):\n        start = ranges[i][0]\n        end = ranges[i][1]\n        rotated_arr = arr[start:end]\n        count += len(rotated_arr)\n    subarr = arr[ranges[-1][0]:]\n    return subarr[index]",
        "test": "assert find_Element([1, 2, 3, 4, 5], [[1, 2], [3, 4]], 2, 1) == 2",
        "num_ids": 1997,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    for word in words:\n        if pattern.match(word):\n            return word, words[words.index(word)+1]\n    return None, None",
        "test": "assert start_withp(['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'iris', 'jujube', 'kiwi', 'lemon','mango', 'nectarine', 'orange', 'papaya', 'pineapple', 'quince', 'rambutan','redcurrant', 'raspberry','strawberry', 'tangerine', 'watermelon', 'watermelon', 'yoghurt']) == ('pineapple', 'rambutan')",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # create a list of zeros of size n\n    dp = [0] * n\n\n    # initialize maximum sum to the first element\n    dp[0] = a[0]\n\n    # fill the rest of the list with the maximum of the first element and the sum of the previous element\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + a[i], a[i])\n\n    # initialize maximum sum to the first element\n    max_sum = dp[0]\n\n    # initialize a list to store the indices of the elements in the increasing subsequence\n    inc_subseq = []\n\n    # loop from 0 to index\n    for i in range(index):\n        # if the maximum sum of the subsequence so far is greater than the sum of the current element and the maximum sum of the subsequence excluding the current element\n        if dp[i] > dp[i-1] + a[i]:\n            dp[i] = dp[i-1] + a[i]\n\n        # if the maximum sum of the subsequence so far is greater than the maximum sum of the increasing subsequence excluding the current element and the current element\n        if dp[i] > max_sum and i < k:\n            max_sum = dp[i]\n            inc_subseq = [i]\n        # if the maximum sum of the subsequence so far is equal to the maximum sum of the increasing subsequence excluding the current element and the current element\n        elif dp[i] == max_sum and i < k:\n            inc_subseq.append(i)\n\n    # return the indices of the elements in the increasing subsequence and the maximum sum\n    return inc_subseq, max_sum",
        "test": "assert max_sum_increasing_subseq([1, 3, 5, 4, 7], 5, 4, 5) == 22",
        "num_ids": 3426,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex) # make a copy of the original tuple\n    new_tuplex = new_tuplex[::m] # get every mth element\n    new_tuplex = new_tuplex[:n] # get the first n elements\n    return tuple(new_tuplex) # convert the list back to a tuple\n",
        "test": "assert colon_tuplex((1,2,3),1,3) == (1,2,3)",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the largest product of two numbers\n    def largest_product_of_two(a, b):\n        return max(a * b, b * a)\n\n    # Initialize a list to store the largest products\n    largest_products = []\n\n    # Iterate over all possible pairs of factors\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)):\n            # Find the largest product of the current pair\n            largest_product = largest_product_of_two(nums1[i], nums1[j])\n            largest_product = max(largest_product, largest_product_of_two(nums2[i], nums2[j]))\n            largest_product = max(largest_product, largest_product_of_two(nums1[j], nums2[i]))\n            largest_product = max(largest_product, largest_product_of_two(nums2[j], nums1[i]))\n            # If the current pair satisfies the given condition, add it to the list of largest products\n            if largest_product > largest_product_of_two(nums1[i], nums2[j]) * 2:\n                largest_products.append(largest_product)\n                # Keep track of the number of pairs that satisfy the condition\n                num_pairs = 1\n                # Iterate over all possible pairs of factors after the current one\n                for k in range(j+1, len(nums1)):\n                    # Check if the current pair of factors satisfies the given condition\n                    if largest_product_of_two(nums1[i], nums1[k]) * 2 == largest_product:\n                        num_pairs += 1\n                    if largest_product_of_two(nums1[i], nums2[k]) * 2 == largest_product:\n                        num_pairs += 1\n                    if largest_product_of_two(nums2[i], nums1[k]) * 2 == largest_product:\n                        num_pairs += 1\n                    if largest_product_of_two(nums2[i], nums2[k]) * 2 == largest_product:\n                        num_pairs += 1\n                    if largest_product_of_two(nums1[k], nums1[j]) * 2 == largest_product:\n                        num_pairs += 1\n                    if largest_product_of_two(nums1[k], nums2[j]) * 2 == largest_product:\n                        num_pairs += 1\n                    if largest_product_of_two(nums2[k], nums1[j]) * 2 == largest_product:\n                        num_pairs += 1\n                    if largest_product_of_two(nums2[k], nums2[j]) * 2 == largest_product:\n                        num_pairs += 1\n                # If the current pair satisfies the given condition multiple times, add it to the list of largest products\n                if num_pairs == N:\n                    largest_products.append(largest_product)\n\n    # Return the list of largest products\n    return largest_products",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 5) == (6, 12, 15, 21, 12)",
        "num_ids": 2228,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(5, 7) == 7",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('') == ()",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def set_left_most_unset_bit(n):\n    # set the rightmost bit to 1\n    n |= n & (-n)\n    # loop until the leftmost bit is set to 1\n    while not n & 1:\n        # clear the leftmost bit\n        n &= n - 1\n    # return the result\n    return n",
        "test": "assert set_left_most_unset_bit(1) == 1",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(5,7) == math.pi*(5**2)*7, \"The correctness of volume_cone is not tested.\"",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize highest power of 2 to 0\n    highest_power = 0\n    \n    # loop through all numbers from 0 to n\n    for i in range(0, n+1):\n        # if the number is a power of 2, check if it is greater than the current highest power\n        if i == 0 or (i & (i-1)) == 0:\n            if i > highest_power:\n                highest_power = i\n    \n    # return the highest power of 2 that is less than or equal to n\n    return highest_power",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 891,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th Lucas number.\n    \"\"\"\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(1) == 1, \"Expected 1, got {}\".format(find_lucas(1))",
        "num_ids": 886,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "test": "assert add_string([\"Hello\", \"world\"], \"This is a test string.\") == [\"This is a test string.\", \"This is a test string.\"]",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize empty dictionary to store the final output\n    result = {}\n    \n    # iterate through the lists and add their elements to the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l3[i]\n    \n    return result",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 1330,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list",
        "test": "assert max_length_list([1]) == [1]",
        "num_ids": 1227,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True",
        "test": "assert check_distinct((1, 2, 3)) == True",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through the string and update the count of each character in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the dictionary and find the first non-repeating character\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None",
        "test": "assert first_non_repeating_character(\"abbbccd\") == \"a\"",
        "num_ids": 1035,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_char(\"a\") == True",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    mid = len(sorted_numbers) // 2\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2\n    else:\n        median = sorted_numbers[mid]\n\n    # Return the median\n    return median",
        "test": "assert median_numbers(2,3,4) == 3, \"median_numbers(2,3,4) should be 3.\"",
        "num_ids": 1165,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        for digit in str(num):\n            sum_digits += int(digit)\n    return sum_digits",
        "test": "assert sum_of_digits([123]) == 6",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)",
        "test": "assert bitwise_xor((1, 0), (0, 1)) == (1, 1)",
        "num_ids": 1158,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)",
        "test": "assert extract_freq([]) == 0, \"Error: Empty list should return 0 unique tuples.\"",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length\")\n        return None\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup",
        "test": "assert add_nested_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def minimum(a, b):\n    '''\n    This function takes in two numbers and returns the minimum value.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(1,2) == 1, 'Function minimum should return 1 for a and b'",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    for i in tuplex:\n        if i in tuple1:\n            return True\n\n    return False",
        "test": "assert check_tuplex((1,2,3), (4,5)) == False # should return False",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number x as input and returns True if the parity of x is odd, and False otherwise.\n    '''\n    if x%2!=0: # If x is odd\n        return True\n    else:\n        return False",
        "test": "assert find_Parity(1) == True",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    digits.sort(reverse=True)\n    next_bigger = 0\n    for i in range(len(digits)):\n        next_bigger += digits[i] * (10**(len(digits)-1-i))\n    return next_bigger",
        "test": "assert rearrange_bigger(987654321) == 987654321",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    heap = []\n    min_heap = []\n\n    for num in nums1 + nums2:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            min_heap.append(num)\n\n        if len(min_heap) == k:\n            heapq.heappush(heap, -heapq.heappop(min_heap))\n\n    return heap",
        "test": "assert k_smallest_pairs([1,7,11], [2,4,6], 3) == [(1,2),(7,4),(11,6)]",
        "num_ids": 1970,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def min_product_tuple(lst):\n    '''\n    Find the minimum product of pairs of tuples within a list.\n\n    Args:\n    lst (list): The list of tuples.\n\n    Returns:\n    int: The minimum product of pairs of tuples.\n    '''\n\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n\n    # Loop through the list of tuples\n    for tup1 in lst:\n        # Loop through the other elements of the tuple\n        for tup2 in lst:\n            # Check if the current tuple is different from the previous one\n            if tup1!= tup2:\n                # Calculate the product of the two tuples and check if it is smaller than the minimum\n                product = tup1[0] * tup2[0] * tup1[1] * tup2[1]\n                if product < min_product:\n                    min_product = product\n\n    # Return the minimum product\n    return min_product",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 24",
        "num_ids": 1423,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def min_val(listval):\n    '''\n    This function takes in a list of values and returns the minimum value in the list.\n    '''\n    if not isinstance(listval, list):\n        return None\n\n    min_value = None\n    for value in listval:\n        if min_value is None or value < min_value:\n            min_value = value\n\n    return min_value",
        "test": "assert min_val(['apple', 'banana', 'orange', 'kiwi', 'grape']) == 'apple' # The minimum value is 'apple'.",
        "num_ids": 1029,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n\n    Args:\n    word: A string in snake case format.\n\n    Returns:\n    A string in camel case format.\n    \"\"\"\n    # Split the word into words separated by underscores\n    words = word.split('_')\n\n    # Capitalize the first letter of each word except for the first word\n    camel_words = [words[0]]\n    for i in range(1, len(words)):\n        camel_words.append(words[i].capitalize())\n\n    # Join the words with a capital letter before the first letter\n    return ''.join(camel_words)",
        "test": "assert snake_to_camel(\"snake_case_string\") == \"snakeCaseString\"",
        "num_ids": 1054,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list",
        "test": "assert remove_odd([]) == []",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        if isinstance(list1, list) and isinstance(n, int) and n >= 1:\n            if n <= len(list1):\n                return list1[n-1]\n            else:\n                return None\n        else:\n            return None\n    except TypeError:\n        return None",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == (1, 2)",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3,4], [3,2,1]) == True",
        "num_ids": 832,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max1, max2)",
        "test": "assert max_Product([1, 2, -3, 4, -5]) == (4, 2)",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tuple in Input:\n        if not common_element:\n            common_element = tuple[0]\n        else:\n            if common_element == tuple[0]:\n                common_element = None\n                break\n    return common_element",
        "test": "assert group_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 1",
        "num_ids": 911,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element",
        "test": "assert Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10",
        "num_ids": 965,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n",
        "test": "assert round_and_sum([1.2, 3.4, 5.6, -7.8, 9.0, -1.0]) == -63.6, \"Incorrect output for [1.2, 3.4, 5.6, -7.8, 9.0, -1.0]\"",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_sum = 0\n    i = 0\n    while i < n:\n        if i%2 == 0:\n            even_sum += i**3\n        i += 1\n    return even_sum",
        "test": "assert cube_Sum(0) == 0, \"cube_Sum(0) should return 0\"",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    concatenated_string = delimiter.join(map(str, test_tup))\n    return concatenated_string",
        "test": "assert concatenate_tuple((1,)) == \"1\"",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i ** 3\n    average = cube_sum / n\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i, item in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            result.append(item)\n    return result",
        "test": "assert extract_rear(('apple', 'banana', 'cherry')) == ['cherry']",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([[1, 2, 3], [4, 5, 6]], 4) == 1",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        list: A list of odd numbers from the input list.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 824,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regex pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Search for the date format in the input string\n    match = re.search(pattern, dt)\n\n    # If the date format is found, replace it with the new format\n    if match:\n        # Get the matched groups\n        year, month, day = match.groups()\n\n        # Convert the date to the new format\n        new_dt = day + '-' + month + '-' + year\n\n        return new_dt\n    else:\n        return 'Invalid date format'",
        "test": "assert change_date_format('2021-07-01') == '01-07-2021'",
        "num_ids": 1221,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
        "test": "assert shell_sort([5, 3, 8, 1, 2]) == [1, 2, 3, 5, 8], \"The output of shell_sort([5, 3, 8, 1, 2]) is incorrect\"",
        "num_ids": 1473,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples are not of the same length.\")\n        return None\n    else:\n        and_tup = ()\n        for i in range(len(test_tup1)):\n            and_tup = and_tup + (test_tup1[i] & test_tup2[i],)\n        return and_tup",
        "test": "assert and_tuples((1, 2), (3, 4)) == (1, 0)",
        "num_ids": 979,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"The parabola is not a parabola.\"\n    else:\n        D = -b / (2 * a)\n        return D",
        "test": "assert parabola_directrix(1, 2, 1) == -1, \"Incorrect directrix of the parabola 1x^2 + 2x + 1\"",
        "num_ids": 975,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3], [3, 4, 5]) == True",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium using Heron's formula\n    s = 0.5 * (base1 + base2 + height) * height\n    # Calculate the area of the smaller trapezium using Heron's formula\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    # Calculate the area of the larger trapezium\n    area3 = s - area1 - area2\n    # Calculate the areas of the trapeziums\n    areas = [area1, area2, area3]\n    # Sort the areas in ascending order\n    areas.sort()\n    # Calculate the median area\n    median_area = areas[1]\n    # Calculate the length of the trapezium using the formula\n    length = 0.5 * s / median_area\n    # Return the length of the trapezium\n    return length",
        "test": "assert median_trapezium(1,2,5) == 2.0",
        "num_ids": 1768,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            print(f\"{number} is greater than {element}\")\n            return True\n    print(f\"{number} is not greater than any element of the array\")\n    return False",
        "test": "assert check_greater([1,2,3,4,5], 2) == True, 'The function should return True for the given input'",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether the string contains a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one(\"aaaabbbb\") == True",
        "num_ids": 573,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(1234) == 4, \"last_Digit(1234) should return 4.\"",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list",
        "test": "assert neg_nos([]) == [], \"neg_nos should return an empty list when an empty list is passed\"",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        elif char.isalpha():\n            new_str += char\n    return new_str",
        "test": "assert remove_odd(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] < test_list[j][0]) and (test_list[i][1] > test_list[j][1]):\n                count += 1\n            if (test_list[i][0] > test_list[j][0]) and (test_list[i][1] < test_list[j][1]):\n                count += 1\n    return count",
        "test": "assert count_bidirectional([]) == 0, \"count_bidirectional([]) should return 0.\"",
        "num_ids": 1388,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result",
        "test": "assert multiple_to_single([1, 2, 3]) == 6",
        "num_ids": 736,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input and returns a list of tuples containing the first adverb and its position in the sentence.\n    '''\n    # Remove any non-alphanumeric characters from the sentence\n    text = re.sub(r'[^\\w\\s]', '', text)\n    \n    # Split the sentence into words\n    words = text.split()\n    \n    # Initialize an empty list to store the adverb and its position in the sentence\n    adverbs = []\n    \n    # Loop through each word in the sentence\n    for i, word in enumerate(words):\n        # If the word is an adverb and is the first word in the sentence, add it to the list of adverbs and its position in the sentence\n        if word in ['very','seriously', 'amazingly', 'finally', 'amazing', 'terribly', 'awfully'] and i == 0:\n            adverbs.append((word, i))\n    \n    return adverbs",
        "test": "assert find_adverb_position(\"The pig is a slowly adverbial adjective.\") == {'adverb': 'quickly', 'position': 14}",
        "num_ids": 3081,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n\n    # calculate the surface area of a cube\n    surface_area = 6 * (l**2)\n\n    # return the surface area\n    return surface_area",
        "test": "assert surfacearea_cube(1) == 6, \"Incorrect output for 1\"",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Convert the input array to a mutable array type\n    nums = array('i', nums)\n\n    # Initialize variables to keep track of positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n\n    # Iterate through the array and count the number of positive and negative numbers\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n\n    # Calculate the ration of positive numbers\n    if pos_count > 0:\n        pos_ratio = pos_count / len(nums)\n    else:\n        pos_ratio = 0\n\n    # Calculate the ration of negative numbers\n    if neg_count > 0:\n        neg_ratio = neg_count / len(nums)\n    else:\n        neg_ratio = 0\n\n    # Return the ration of positive numbers\n    return pos_ratio",
        "test": "assert positive_count([0, 0, 0, 0, 0]) == 0",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def largest_neg(lst): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    # Initialize largest negative number to be the first element of the list\n    largest = lst[0]\n\n    # Iterate through the list starting from the second element\n    for i in range(1, len(lst)):\n        # If an element is negative, update largest\n        if lst[i] < 0:\n            largest = lst[i]\n\n    return largest",
        "test": "assert largest_neg([1, -2, 3, -4, -5, 6, -7]) == -7",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        # convert each tuple to a list and trim each element by k\n        new_tup = [i for i in tup[:K]]\n        # convert the list back to a tuple and append it to the trimmed list\n        trimmed_list.append(tuple(new_tup))\n    return trimmed_list",
        "test": "assert trim_tuple([(1, 2, 3), (4, 5, 6)], 2) == [(1, 2), (4, 5)]",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements\")\n    # Initialize the result tuple\n    result = ()\n    # Loop through the indices of the tuples\n    for i in range(len(test_tup1)):\n        # Perform the multiplication and append the result to the result tuple\n        result += (test_tup1[i] * test_tup2[i],)\n    # Return the result tuple\n    return result",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = Counter(tup)\n    for item in lst:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    return counts",
        "test": "assert count_Occurrence((1,2,3), [1,2,3,4,5]) == Counter({1: 2, 2: 1, 3: 1})",
        "num_ids": 778,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]",
        "test": "assert cube_nums([1,2,3,4,5]) == [1,8,27,64,125]",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize variables\n    perrin_num = 1\n    sum = 0\n\n    # loop through perrin numbers\n    while perrin_num <= n:\n        sum += perrin_num\n        perrin_num += 1\n\n    # return the sum\n    return sum",
        "test": "assert cal_sum(1) == 1",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            new_list.append(str_list[i])\n    return new_list",
        "test": "assert extract_string(['apple', 'banana', 'cherry', 'date', 'elderberry'], 0) == []",
        "num_ids": 864,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2",
        "test": "assert remove_whitespaces(\"this  is  a   test\") == \"thisisatest\"",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0",
        "test": "assert loss_amount(100000,100000) == 0, \"Actual cost and sale amount should give 0 loss amount\"",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import math \n\ndef sumOfFactors(n):\n    '''\n    This function takes a number as input and returns the sum of its even factors.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors += i\n    return even_factors\n",
        "test": "assert sumofFactors(30) == 60, \"sumofFactors(30) should return 60.\"",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+\\b\\s+z\\b\\s*|\\b[a-zA-Z]+\\s+z\\b\\s*'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_match_wordz('Hello, world!') == True, \"text_match_wordz function failed\"",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_num = int(monthnum)\n    if 1 <= month_num <= 12:\n        if month_num == 2:\n            if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(4) == True, \"Should return True for month number 4.\"",
        "num_ids": 1094,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize variables for minimum sublist length and minimum sublist\n    min_len = float('inf')\n    min_sublist = []\n\n    # Loop through each element of the list\n    for i in range(len(lst)):\n        # Create a new sublist containing all elements from lst[:i+1]\n        sublist = lst[:i+1]\n        # Check if the length of the sublist is less than the current minimum length\n        if len(sublist) < min_len:\n            # If it is, update the minimum length and the minimum sublist\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    # Return the minimum sublist\n    return min_sublist",
        "test": "assert Find_Min([1,2,[3,[4,5]],6]) == [1,2,[3,[4,5]]]",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b",
        "test": "assert rectangle_area(2,3) == 6, \"The area of a rectangle with length 2 and breadth 3 should be 6.\"",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'([A-Z][a-z]+)')\n    return pattern.sub('', str1)",
        "test": "assert remove_uppercase(\"12345\") == \"12345\"",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in a list.\n\n    Args:\n    lst: a list of sublists\n\n    Returns:\n    a list of the first elements of each sublist in the original list\n    \"\"\"\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n        else:\n            result.append(None)\n    return result",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count",
        "test": "assert upper_ctr(\"Hello, World!\") == 2, \"Expected 2, got {}\".format(upper_ctr(\"Hello, World!\"))",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    \n    # Generate all possible combinations of the elements of the list\n    combinations_list = list(combinations(list1, len(list1)))\n    \n    return combinations_list",
        "test": "assert combinations_list(['a', 'b', 'c']) == [('a', 'b', 'c')]",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for val in dict.values():\n        if val!= dict[next(iter(dict))]:\n            return False\n    return True",
        "test": "assert check_value({'a':1, 'b':2, 'c':3}, 2) == False, \"The function should return False if any value is different from the given value.\"",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, n):\n        max_product = max(max_product * arr[i], max_product, arr[i])\n        min_product = min(min_product * arr[i], min_product, arr[i])\n    return max_product",
        "test": "assert max_product([-2, 0, -1]) == 0",
        "num_ids": 1349,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))",
        "test": "assert add_pairwise((1,2)) == 3, \"add_pairwise((1,2)) should be 3\"",
        "num_ids": 977,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and an integer as input and returns the product of their array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr: \n        result = (result * i) % n \n    return result ",
        "test": "assert find_remainder([1, 2, 3], 5) == 1",
        "num_ids": 800,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i]+1!= l[i+1]: \n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5, 6]) == True, \"The function should return True when the given list contains consecutive numbers.\"",
        "num_ids": 1078,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set(test_list1) & set(test_list2)\n    return tuple(intersection)",
        "test": "assert tuple_intersection([], []) == ()",
        "num_ids": 992,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello\", \"o\", \"a\") == \"hella\"",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict",
        "test": "assert sort_counter({'a': 3, 'b': 2, 'c': 1}) == {'c': 1, 'a': 3, 'b': 2}",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Find the largest and smallest values in the array\n    max_num = nums[0]\n    min_num = nums[0]\n    # Loop through the array again to find the sum of the largest and smallest values\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    # Return the sum of the largest and smallest values\n    return max_num + min_num",
        "test": "assert big_sum([2, 4, 6, 8, 10]) == 30",
        "num_ids": 1021,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"Hello\") == \"hello\"",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Remove all lowercase substrings\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', string)",
        "test": "assert remove_lowercase('This-is-a-test') == 'Ths-is-a-tst'",
        "num_ids": 720,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(n)\n    # Get the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to an integer and return it\n    return int(first_char)",
        "test": "assert first_Digit(0) == 0",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]",
        "test": "assert Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural",
        "test": "assert difference(5) == 3785",
        "num_ids": 841,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    xor = 0\n    for i in range(N):\n        xor ^= A[i]\n    if xor % 2 == 1:\n        count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1,3,5,7,9], 5) == 1",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)",
        "test": "assert toggle_string(\"Hello World!\") == \"hELLO wORLD!\"",
        "num_ids": 521,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the two numbers to strings\n    num1_str = str(n1)\n    num2_str = str(n2)\n\n    # initialize the sum of differences to zero\n    diff_sum = 0\n\n    # loop through each digit in the two numbers\n    for i in range(len(num1_str)):\n        # subtract the corresponding digits and add the result to the sum of differences\n        diff_sum += abs(int(num1_str[i]) - int(num2_str[i]))\n\n    # return the sum of differences\n    return diff_sum",
        "test": "assert digit_distance_nums(12, 34) == 4, \"Incorrect sum for n1=12 and n2=34\"",
        "num_ids": 1607,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum",
        "test": "assert max_sub_array_sum([1], 1) == 1",
        "num_ids": 1475,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # using set to remove duplicates and sort the tuple\n    union_set = sorted(set(test_tup1 + test_tup2))\n    # converting the set back to tuple\n    union_tup = tuple(union_set)\n    return union_tup\n",
        "test": "assert union_elements((1, 3, 5), (2, 4, 6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 1317,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    max_length = 0\n    current_length = 1\n    \n    # Iterate through the list\n    for i in range(1, len(lst)):\n        # If the current element is not equal to the next element, add 1 to the current length\n        if lst[i]!= lst[i-1]:\n            current_length += 1\n        # If the current element is equal to the next element, reset the current length to 1\n        else:\n            current_length = 1\n        \n        # If the current length is greater than the max length, update max_length\n        if current_length > max_length:\n            max_length = current_length\n    \n    # Return the maximum length\n    return max_length",
        "test": "assert Find_Max_Length([1,2,3,4,5,6,7,8]) == 8",
        "num_ids": 1363,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values('\"value1\" \"value2\"') == ['value1', 'value2']",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5,6,7,8],8) == 28",
        "num_ids": 965,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total",
        "test": "assert sum_digits(123) == 6, \"Function does not work correctly for 123.\"",
        "num_ids": 829,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n    else:\n        return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True, \"Error: The list is not sorted.\"",
        "num_ids": 956,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 377,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = str(list1[i][j].lower())  # convert to lowercase\n    \n    for i in range(len(list1)):\n        list1[i].sort()  # sort each sublist\n    \n    return list1",
        "test": "assert sort_sublists([[\"apple\", \"banana\"], [\"cherry\", \"date\"], [\"fig\", \"grape\"], [\"kiwi\", \"mango\"], [\"orange\", \"pear\"]]) == [[\"apple\", \"banana\"], [\"cherry\", \"date\"], [\"fig\", \"grape\"], [\"kiwi\", \"mango\"], [\"orange\", \"pear\"]]",
        "num_ids": 1068,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "test": "assert two_unique_nums([]) == []",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)  # create a set to remove duplicates\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 993,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    surface_area = 2 * math.pi * r * h\n    return surface_area",
        "test": "assert surfacearea_cylinder(5,10) == 314.1592653589793, 'Failed for r=5,h=10'",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(B) > len(A): \n        return False \n\n    for i in range(len(B)): \n        if B[i] not in A: \n            return False \n\n    return True",
        "test": "assert is_Sub_Array([1,2,3,4], [2,3,4]) == True, \"Test Case 2: [1,2,3,4] should be sublist of [2,3,4]\"",
        "num_ids": 1063,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n!= 0:\n        factorial *= n\n        n //= 10\n    return factorial % 10",
        "test": "assert last_Digit_Factorial(1) == 1  # 1! = 1",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    if i < len(list1):\n        result.extend(list1[i:])\n    if j < len(list2):\n        result.extend(list2[j:])\n    if k < len(list3):\n        result.extend(list3[k:])\n    return result",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 1227,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and returns a list of the elements that are present in the first tuple but not in the second tuple.\n    '''\n    dissimilar_set = set(test_tup1) - set(test_tup2)\n    return list(dissimilar_set)",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 3)) == []",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    even_list = []\n\n    for item in test_tuple:\n        if isinstance(item, list):\n            even_list.append(even_ele(item, even_fnc))\n        else:\n            even_list.append(even_fnc(item))\n\n    return even_list",
        "test": "assert even_ele((('a', 1, 'c'), ('b', 2, 'd'), ('a', 3, 'e'), ('c', 4, 'f'), ('b', 5, 'g')), lambda x: x % 2 == 0) == (('a', 2, 'c'), ('b', 4, 'd'), ('c', 4, 'f'), ('b', 5, 'g'))",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area of the pyramid\n    surface_area = 2 * b * s + 2 * b * b + 2 * b * b + 6 * b * b + 2 * b * b + b * b * b + 6 * b * b + 2 * b * b\n    return surface_area",
        "test": "assert surface_Area(10,5) == 60",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True",
        "test": "assert my_dict({}) == True, \"The function my_dict should return True if the dictionary is empty.\"",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(\\w+ly)\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"It's a beautiful day for the party, we were planning to go to the park.\"\nadverbs = find_adverbs(text)\nprint(adverbs)",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the dog.\") == [('over', 32), ('the', 8), ('dog', 15)]",
        "num_ids": 1200,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid input. n is greater than the length of the list.\"\n    else:\n        split_list = l[:n]\n        rest_list = l[n:]\n        return split_list + rest_list",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1106,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n\n    Args:\n        listx (list): the list to be converted.\n\n    Returns:\n        tuple: the converted tuple.\n    \"\"\"\n    return tuple(listx)",
        "test": "assert list_tuple([]) == ()",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    \n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Return the difference between the two values\n    return max_val - min_val",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 956,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Initialize a list to store the perfect squares\n    perfect_squares_list = []\n    # Loop through the numbers from a to b\n    for i in range(a, b+1):\n        # Check if the square of the current number is equal to i\n        if i == (i ** 0.5):\n            perfect_squares_list.append(i)\n    # Return the list of perfect squares\n    return perfect_squares_list",
        "test": "assert perfect_squares(1, 1) == [1]",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements in the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([5, 4]) == [4, 5]",
        "num_ids": 775,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1 \n    elif k > n: \n        return 0\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n",
        "test": "assert binomial_Coeff(0,1) == 0",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip",
        "test": "assert removezero_ip(\"192.168.1.1\") == \"192.168.1.1\"",
        "num_ids": 1181,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = [num for num in list1 if num % 2 == 0][0]\n    odd_num = [num for num in list1 if num % 2 == 1][0]\n    diff = even_num - odd_num\n    return diff",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1521,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to binary arrays\n    arr1 = [int(i) for i in str1]\n    arr2 = [int(i) for i in str2]\n    \n    # Find the length of the longer binary string\n    length = max(len(arr1), len(arr2))\n    \n    # Initialize a dictionary to store the count of swaps required for each digit in the binary string\n    swap_count = {i: 0 for i in range(2)}\n    \n    # Initialize a variable to store the minimum number of swaps required\n    min_swaps = 0\n    \n    # Iterate through the digits of the longer binary string\n    for i in range(length):\n        \n        # If the digits are different, increment the count of swaps required for the digit in the longer string\n        if arr1[i]!= arr2[i]:\n            swap_count[arr1[i]] += 1\n            swap_count[arr2[i]] -= 1\n        \n        # Keep track of the minimum number of swaps required\n        min_swaps = min(min_swaps, sum(swap_count.values()))\n    \n    return min_swaps",
        "test": "assert min_Swaps(\"1010\", \"1010\") == 0",
        "num_ids": 2682,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size",
        "test": "assert tuple_size((1,)) == sys.getsizeof(1), \"single-element tuple\"",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Merge the two arrays\n    merged_arr = arr1 + arr2\n\n    # Find the kth element in the merged array\n    kth_element = merged_arr[k-1]\n\n    return kth_element",
        "test": "assert find_kth([10], [1], 1) == 10, \"Test case 3: k = 1 should return 10.\"",
        "num_ids": 1391,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    if total == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True, \"Armstrong number is not working\"",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n\n    # initialize sum and count\n    sum = 0\n    count = 0\n\n    # iterate through first n numbers\n    for i in range(1, number + 1):\n        # add current number to sum\n        sum += i\n        # increment count\n        count += 1\n\n    # calculate average\n    average = sum / count\n\n    # return result as a tuple\n    return (sum, average)",
        "test": "assert sum_average(5) == (15, 3)",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(4) == True, \"is_Even(4) should return True\"",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count > 1:\n            return char",
        "test": "assert first_repeated_char(\"\") == None",
        "num_ids": 988,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid.append(i)\n        elif i == 2:\n            lucid.append(i)\n        else:\n            is_lucid = True\n            j = 2\n            while j < i:\n                if i % j == 0:\n                    is_lucid = False\n                    break\n                j += 1\n            if is_lucid:\n                lucid.append(i)\n    return lucid",
        "test": "assert get_ludic(0) == []",
        "num_ids": 1952,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)",
        "test": "assert reverse_words(\"hello\") == \"hello\"",
        "num_ids": 808,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(3) == True",
        "num_ids": 711,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    if m:\n        return m.group(), m.start(), m.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"hello world\", r\"non-existent\") == (None, None, None)",
        "num_ids": 1297,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return \"Invalid input! Please enter a non-negative integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * bell_Number(n-1) - bell_Number(n-2)",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]",
        "test": "assert remove_kth_element([1,2,3,4,5], 2) == [1,3,4,5]",
        "num_ids": 1265,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N:\n            break\n        col_max = max(test_list[i])\n        if col_max > max_val:\n            max_val = col_max\n    return max_val",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 9",
        "num_ids": 1192,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list",
        "test": "assert merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum variable to 0\n    cum_sum = 0\n    # loop through each tuple in the test list\n    for tup in test_list:\n        # loop through each value in the tuple\n        for val in tup:\n            # add the value to the cumulative sum\n            cum_sum += val\n    # return the cumulative sum\n    return cum_sum",
        "test": "assert cummulative_sum([(1,2,3),(4,5,6)]) == (1 + 2 + 3 + 4 + 5 + 6)",
        "num_ids": 1420,
        "indeed": true
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        count = len(num_tuple)\n        avg = total / count\n        result.append(avg)\n    return result",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [2.0, 5.0, 8.0]",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "test": "assert tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3)",
        "num_ids": 871,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def min_Jumps(steps, d): \n    # Initialize variables\n    jumps = 0\n    current_level = 0\n    remaining_steps = steps\n\n    # Traverse the levels in steps\n    while remaining_steps > 0:\n        # Move to the next level by one step\n        current_level += 1\n\n        # Check if we reached the goal level (d, 0)\n        if current_level == d:\n            return jumps + 1\n\n        # Calculate the maximum number of steps left in the current level\n        max_steps = remaining_steps - current_level + 1\n\n        # Update the remaining steps and the jumps count\n        remaining_steps = max_steps\n        jumps += 1\n\n    return jumps + 1",
        "test": "assert min_Jumps(3, 2) == 2,'min_Jumps(3, 2) should return 2'",
        "num_ids": 2022,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists should have same length')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result",
        "test": "assert div_list([1,2,3,4], [4,5,6]) == [0.2, 0.4, 0.6, 1.0]",
        "num_ids": 886,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty list to store the numbers\n    nums = []\n    # initialize a variable to store the index of the next character to be processed\n    i = 0\n    # iterate over the characters in the input string\n    while i < len(test_str):\n        # if the current character is a number, add it to the list\n        if test_str[i].isdigit():\n            nums.append(test_str[i])\n        # move to the next character\n        i += 1\n    # reverse the list to move the numbers to the end\n    nums = nums[::-1]\n    # join the numbers back into a string and return it\n    return ''.join(nums)",
        "test": "assert move_num(\"123456789\") == \"987654321\"",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables\n    count = 0\n    largest_size = 0\n    current_size = 0\n    # Traverse the list\n    for num in a:\n        # Check if the number is divisible by all numbers before it\n        divisible = True\n        for i in range(count):\n            if num % a[i]!= 0:\n                divisible = False\n                break\n        # Update the count, largest size and current size\n        if divisible:\n            count += 1\n            if current_size > largest_size:\n                largest_size = current_size\n        else:\n            count -= 1\n        current_size += 1\n    # Return the largest size\n    return largest_size",
        "test": "assert largest_subset([1, 2, 3, 4, 5]) == 3, \"largest_subset([1, 2, 3, 4, 5]) should be 3.\"",
        "num_ids": 1634,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr = arr1 + arr2\n    arr.sort()\n    return arr[n]",
        "test": "assert get_median([1, 3, 5, 7], [2, 4, 6, 8], 4) == 5",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1, 2, 3, 4, 5], 2) == [1, 4, 9, 16, 25]",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # check if the input list is not empty\n    if len(newList) > 0:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList",
        "test": "assert swap_List([1]) == [1]",
        "num_ids": 813,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-circle arc length\n    arc_length = 2*r\n    # calculate the area of a triangle that is 1 unit long\n    area = 0.5*r**2\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    max_area = area*arc_length\n    return max_area",
        "test": "assert triangle_area(1) == 3.141592653589793",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1",
        "test": "assert find_First_Missing([3, 6, 9, 12]) == 1, \"Incorrect result\"",
        "num_ids": 1367,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def Split(lst):\n    '''\n    This function takes a list as input and returns a new list containing even numbers from the original list.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    n = max(abs(x), abs(y))\n    for i in range(n):\n        if x < 0:\n            x += 1\n        else:\n            x -= 1\n        if y < 0:\n            y += 1\n        else:\n            y -= 1\n        sub.append((x, y))\n    return sub",
        "test": "assert adjac((0, 0)) == []",
        "num_ids": 1679,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text\n",
        "test": "assert replace_spaces(\"test\") == \"test\"",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # create a copy of the input list\n    num_list_copy = num_list.copy()\n    # iterate over the input list\n    for i in range(len(num_list_copy)):\n        # if the current element is zero, move it to the end of the list\n        if num_list_copy[i] == 0:\n            num_list_copy.pop(i)\n            num_list_copy.append(0)\n            # decrement the index to avoid looping over the same element again\n            i -= 1\n    # return the modified list\n    return num_list_copy",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR operator to find the sum of xor of all pairs of numbers\n    xor_sum = sum(a^b for a in arr for b in arr if a<b)\n    return xor_sum",
        "test": "assert pair_xor_Sum([1,2,3,4,5], 5) == 22",
        "num_ids": 874,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min heap from the list\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    # create a new list to hold the sorted items\n    sorted_list = []\n\n    # extract the minimum element from the min heap and append it to the new list\n    while heap:\n        sorted_list.append(heap[0])\n        heapq.heappop(heap)\n\n    return sorted_list",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit\n    profit = sale_amount - actual_cost\n\n    # Check if the profit is greater than zero\n    if profit > 0:\n        return False\n\n    # Calculate the loss\n    loss = actual_cost - sale_amount\n\n    # Check if the loss is greater than zero\n    if loss > 0:\n        return False\n\n    # If the profit and loss are zero, it means that the given amount has no profit and no loss\n    return True",
        "test": "assert noprofit_noloss(150,100) == False, \"noprofit_noloss should return False when the actual cost is greater than the sale amount\"",
        "num_ids": 982,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # convert wind velocity to m/s\n    v = v * 1000\n    \n    # convert temperature to kelvin\n    t = t + 273.15\n    \n    # calculate wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v) - 0.1468 * math.log(v) ** 2 + 0.0188 * t ** 2 - 0.0001 * v ** 2\n    \n    # round wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index",
        "test": "assert wind_chill(20,30) == 64 # correct wind chill index",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize sum variable to zero\n    total_length = 0\n    \n    # loop through each name in the list\n    for name in sample_names:\n        # if the first character of the name is uppercase, add the length of the name to the total_length variable\n        if name[0].isupper():\n            total_length += len(name)\n    \n    # return the total_length value\n    return total_length",
        "test": "assert sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Heidi\", \"Ivan\"]) == 174",
        "num_ids": 1415,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    # Define a regular expression pattern for matching parenthesis\n    pattern = r'\\([^)]*\\)'\n    # Use the re.sub() method to remove the matched parenthesis from the string\n    return re.sub(pattern, '', items)",
        "test": "assert remove_parenthesis(\"This is another test string\") == \"This is another test string\"",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n as input and returns the nth nonagonal number.\n    '''\n    # initialize variables to hold the values\n    row = 1\n    col = 1\n    # initialize the sum to 0\n    sum = 0\n    # loop through the first row\n    for i in range(1, n+1):\n        # calculate the nonagonal number\n        nonagonal = (row * (row + 1)) // 2\n        # check if the current nonagonal number is greater than or equal to n\n        if nonagonal >= n:\n            return nonagonal\n        # add the nonagonal number to the sum\n        sum += nonagonal\n        # move to the next row and column\n        row += 1\n        col += 1\n    # if we get here, the nth nonagonal number is the sum of the first n nonagonal numbers\n    return sum",
        "test": "assert is_nonagonal(1) == 1, \"is_nonagonal(1) should return 1\"",
        "num_ids": 820,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    regex = r'\\b[a-z]\\w*[z]\\w*[a-z]\\b'\n    match = re.search(regex, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle(\"Hello world\") == False",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 644,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function will reverse the array from 0 to k-1 inclusive.\n    '''\n    # reverse the array from 0 to k-1 inclusive\n    for i in range(k):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n    return input",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1377,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 10, 'b': 20}) == (1, 2, 3, {'a': 10, 'b': 20})",
        "num_ids": 645,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize a dictionary to store the maximum averages of all existing paths\n    max_avg = {}\n\n    # Initialize a helper function to compute the average of a path\n    def compute_avg(path):\n        if len(path) == 1:\n            return cost[path[0][0]][path[0][1]]\n        else:\n            return (cost[path[0][0]][path[0][1]] + compute_avg(path[1:])) / 2\n\n    # Initialize a helper function to check if a path is valid\n    def is_valid_path(path):\n        if len(path) == 1:\n            return True\n        if path[0][0] == len(cost) - 1 and path[0][1] == len(cost[0]) - 1:\n            return True\n        return path[0][0] < len(cost) and path[0][1] < len(cost[0]) and (path[0][0]!= path[1][0] or path[0][1]!= path[1][1])\n\n    # Loop through all possible paths and compute their maximum average\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i == len(cost) - 1 and j == len(cost[0]) - 1:\n                max_avg[(i, j)] = cost[i][j]\n            else:\n                if (i, j) not in max_avg or compute_avg([(i, j)]) > max_avg[(i, j)]:\n                    max_avg[(i, j)] = compute_avg([(i, j)])\n\n    # Find the path with the maximum average\n    max_avg_path = [(k, v) for k, v in max_avg.items() if v == max(max_avg.values())]\n\n    return max_avg_path",
        "test": "assert maxAverageOfPath([[1,2],[3,4],[5,6]]) == 21.0",
        "num_ids": 2476,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "test": "assert filter_data({'John': (1.8, 60), 'Mike': (1.6, 55), 'Jane': (1.6, 70)}, 1.6, 50) == {'John': (1.8, 60)}",
        "num_ids": 1734,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    # Initialize an empty dictionary to store the counts of numbers\n    counts = {}\n\n    # Iterate over each number in the first list and count its occurrences\n    for num1 in nums1:\n        counts[num1] = counts.get(num1, 0) + 1\n\n    # Initialize an empty list to store the indices of pairs with the same values\n    pairs = []\n\n    # Iterate over each number in the second list and count its occurrences\n    for num2 in nums2:\n        # Check if the number is in the dictionary and if its count is equal to 1\n        if num2 in counts and counts[num2] == 1:\n            # Add the indices of the numbers to the pairs list\n            pairs.append((nums1.index(num2), nums2.index(num2)))\n\n    # Return the count of pairs\n    return len(pairs)",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [2, 3]",
        "num_ids": 1240,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    base_str = str(base)\n    for i in range(power):\n        total += int(base_str[-1])\n        base_str = base_str[:-1]\n    return total",
        "test": "assert power_base_sum(0, 0) == 0, \"The sum of all digits of 0 to the power of 0 should be 0.\"",
        "num_ids": 903,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n\n    if len(matches) > 0:\n        return matches[0]\n    else:\n        return \"No quotation found\"\n",
        "test": "assert extract_quotation(\"\\\"hello world\\\"\") == \"hello world\"",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]*test_tup[i+1])\n    return tuple(result)",
        "test": "assert multiply_elements(()) == ()",
        "num_ids": 964,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]",
        "test": "assert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))",
        "test": "assert consecutive_duplicates([1, 2, 3, 2, 1, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h",
        "test": "assert lateralsurface_cone(5, 10) == (10*math.pi*5**2)",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n\n    # define regular expression pattern to find occurrences of spaces, commas, or dots\n    pattern = re.compile(r'[\\s,\\.]')\n\n    # replace all occurrences of spaces, commas, or dots with a colon\n    result = pattern.sub(':', text)\n\n    # return the modified string\n    return result",
        "test": "assert replace_specialchar(\"hello world, this is a test. 123\") == \"hello:world:this:is:a:test:123\"",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 1405,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize variables\n    n = len(arr)\n    prod = 1\n    dp = [1] * n\n\n    # Calculate the product of all elements\n    for i in range(n):\n        prod *= arr[i]\n\n    # Calculate the sum of products of subarrays of length 1 to n\n    for i in range(1, n + 1):\n        dp[i - 1] = prod // i\n\n    # Calculate the sum of products of subarrays of length i to n\n    for i in range(n - 1, -1, -1):\n        dp[i] = (dp[i] + dp[i + 1]) * arr[i]\n\n    # Calculate the sum of products of subarrays of length i to n\n    sum_prod = 0\n    for i in range(n):\n        sum_prod += dp[i]\n\n    return sum_prod",
        "test": "assert sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 6935",
        "num_ids": 2077,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    count = 0\n    for i in range(len(bin(n)[2:])):\n        count += 1\n        if count == 4:\n            n = n ^ (1 << i)\n    return n",
        "test": "assert set_middle_bits(0) == 0",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n\n    # Find the insertion point using bisect\n    index = bisect.bisect_left(a, x)\n\n    # Check if the value is already present\n    if index!= len(a) and a[index] == x:\n        return index\n\n    # If the value is not present, insert it at the leftmost index\n    return index - 1",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"aeiouAEIOU123\") == True",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import math\n\ndef find_Index(n):\n    # Initialize the smallest triangular number with n digits to 1\n    smallest_triangular = 1\n    \n    # Loop through the numbers from 1 to n\n    for i in range(2, n+1):\n        # Calculate the next triangular number using the formula for the nth triangular number\n        next_triangular = i * (i+1) // 2\n        \n        # If the next triangular number is smaller than the current smallest triangular number, update the smallest triangular number\n        if next_triangular < smallest_triangular:\n            smallest_triangular = next_triangular\n    \n    # Return the index of the smallest triangular number with n digits\n    return math.floor(math.log10(smallest_triangular) + 1)",
        "test": "assert find_Index(2) == 1",
        "num_ids": 1513,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    result = {}\n    \n    # Loop through the tuple and add each adjacent pair of elements to the dictionary\n    for i in range(0, len(test_tup)-1, 2):\n        result[test_tup[i]] = test_tup[i+1]\n        \n    return result",
        "test": "assert tuple_to_dict((1, 2, 'a', 'b')) == {1: 2, 'a': 'b'}",
        "num_ids": 1008,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return s[0] == s[0]\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]",
        "test": "assert all_Characters_Same('hello world') == False",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2",
        "test": "assert area_tetrahedron(10) == math.sqrt(30), \"The area of a tetrahedron with side length 10 should be 30\"",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    for i in range(n-m):\n        temp = list[0]\n        for j in range(1, len(list)):\n            list[j-1] = list[j]\n        list[-1] = temp\n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1306,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False",
        "test": "assert check_none((1, 2, 3)) == False",
        "num_ids": 566,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    digits_list = list(map(int, str(startnum))) + list(map(int, str(endnum)))\n    return list(filter(lambda x: all(digit % x == 0 for digit in digits_list), range(startnum, endnum + 1)))",
        "test": "assert divisible_by_digits(100, 200) == [12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 300, 312, 324, 336, 348, 360, 372, 384, 396, 408, 420, 432, 444, 456, 468, 480, 492, 504, 516, 528, 540, 552, 564, 576, 588, 600, 612, 624, 636, 648, 660, 672, 684, 696, 708, 720, 732, 744, 756, 768, 780, 792, 804, 816, 828, 840, 852, 864, 876, 888, 900, 912, 924, 936, 948, 960, 972, 984, 996]",
        "num_ids": 3539,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        print(\"Angle must be less than or equal to 360 degrees.\")\n        return None\n    else:\n        area = math.pi * r * r\n        return area",
        "test": "assert sector_area(1, 90) == math.pi * 1**2",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Initialize the matrix of size (len(X), len(Y))\n    dp = [[0 for i in range(len(Y)+1)] for j in range(len(X)+1)] \n\n    # Fill the matrix in bottom up manner\n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            if X[i-1] == Y[j-1]: \n                dp[i][j] = dp[i-1][j-1] + 1\n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n\n    # Reconstruct the longest common subsequence using the matrix\n    lcs = []\n    i = len(X) \n    j = len(Y) \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n        elif dp[i-1][j] > dp[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    # Reverse the list to get the correct order of characters\n    lcs.reverse() \n    return \"\".join(lcs) ",
        "test": "assert lcs_of_three('AGGTAB', 'GXTXAYB', 'CDTA') == 'GTAB'",
        "num_ids": 2471,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', string)\n    return''.join(words)",
        "test": "assert capital_words_spaces(\"  This is a test string.\") == \"This is a test string.\"",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    nums_str = list(map(str, nums_str))\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str",
        "test": "assert sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        if item not in test_tup:\n            test_list.append(item)\n    return test_list",
        "test": "assert add_tuple([], []) == []",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i >= 1:\n        if arr[i] < arr[i//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)\n    else:\n        return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    return check_min_heap_helper(arr, len(arr)-1)",
        "test": "assert check_min_heap_helper([10, 10, 10, 10, 10], 0) == True",
        "num_ids": 1671,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1)*jacobsthal_num(n-1)",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 2215,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K as input.\n    The function returns a list containing the K smallest tuples from the given list.\n    \"\"\"\n    if not test_list:\n        return []\n\n    # Find the minimum number of records from each group\n    min_records = {}\n    for i in range(len(test_list)):\n        key = test_list[i][0]\n        if key in min_records:\n            min_records[key].append(test_list[i][1])\n        else:\n            min_records[key] = [test_list[i][1]]\n\n    # Extract the smallest K records from each group\n    min_k_records = []\n    for key in min_records:\n        if len(min_records[key]) >= K:\n            min_k_records.extend(min_records[key])\n\n    return min_k_records",
        "test": "assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 5) == (10, 11, 12)",
        "num_ids": 1916,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 1499,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Initialize the smallest and second smallest variables\n    smallest = float('inf')\n    second_smallest = float('inf')\n    # Loop through the list and compare each number to the current smallest and second smallest numbers\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    # Return the second smallest number\n    return second_smallest",
        "test": "assert second_smallest([5, 3, 8, 1, 9]) == 3",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\w*b'\n    return re.findall(pattern, text)",
        "test": "assert text_match_zero_one(\"abbbaba\") == False",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                reverse_pairs += 1\n    return reverse_pairs",
        "test": "assert count_reverse_pairs([\"abcdefghijklmnopqrstuvwxyz\"]) == 0",
        "num_ids": 1069,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the counts of unique sublists\n    counts = {}\n    \n    # Iterate over all possible sublists of the original list\n    for i in range(1, len(list1)+1):\n        for sublist in itertools.combinations(list1, i):\n            # Convert the sublist to a tuple and store its count in the dictionary\n            counts[tuple(sublist)] = counts.get(tuple(sublist), 0) + 1\n    \n    return counts",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {",
        "num_ids": 2219,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # check if the input string is a float number with a precision of 2\n        float(num)\n        return True\n    except ValueError:\n        return False",
        "test": "assert is_decimal(\"1.23\") == True",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique",
        "test": "assert unique_Element([1, 2, 3, 4, 4, 5]) == False",
        "num_ids": 1025,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum % 3 == 0:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(6) == True",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n\n    arr.sort()\n    min_diff = abs(arr[n-1] - arr[0])\n\n    for i in range(1, n-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff",
        "test": "assert find_min_diff([1, 5, 3, 7, 9], 5) == 2",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number.\n    '''\n    # Calculate the nth polite number using the Euclid algorithm \n    a, b = 1, 2 \n    nth_polite = 1 \n    while b <= n: \n        a, b = b, a + b \n        if a == 1: \n            nth_polite = a \n            break \n        elif a % 2 == 1: \n            nth_polite = a \n            break \n    # Return the nth polite number \n    return nth_polite",
        "test": "assert is_polite(1) == 1",
        "num_ids": 1345,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Given a list, return a list of all pairs of consecutive items in the list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([]) == []",
        "num_ids": 780,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 6) == 2, 'get_pairs_count(arr=[1, 2, 3, 4, 5], sum=6) should return 2'",
        "num_ids": 1163,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]",
        "test": "assert Diff([1,2,3], [1,2,3]) == []",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # Initialize the sum of fourth power of odd natural numbers\n    sum_of_fourth_power = 0\n\n    # Iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the fourth power of the current odd natural number\n        fourth_power = i ** 4\n        # Add the fourth power to the sum of fourth power of odd natural numbers\n        sum_of_fourth_power += fourth_power\n\n    # Return the sum of fourth power of odd natural numbers\n    return sum_of_fourth_power",
        "test": "assert odd_num_sum(5) == 26",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balance = 0\n    for char in exp:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n        else:\n            balance += 1\n\n    return not stack",
        "test": "assert check_expression(\"((a+b)*c)+d+e*f+(\") == False",
        "num_ids": 1052,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    \n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n            \n    return \" \".join(new_words)",
        "test": "assert remove_length(\"Hello World, this is a test string\", 7) == \"Hello World, this is a test string\"",
        "num_ids": 868,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return (matches[0], pattern.find(matches[0]))\n    else:\n        return None",
        "test": "assert occurance_substring('hello world',r'x') is None",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 2, 3, 4, 5, 7, 9]) == False",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels('hello') == 0, \"Expected: 0, Got: {}\".format(count_vowels('hello'))",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n\n    # Create a set to store unique elements\n    unique_set = set(arr)\n\n    # Find the sum of unique elements\n    unique_sum = sum(unique_set)\n\n    return unique_sum",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15, \"The function did not return the expected sum for the given list.\"",
        "num_ids": 1151,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 952,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    sublist_count = {}\n    \n    # Loop through each item in the list\n    for item in list1:\n        # Convert the item to a tuple if it's not already\n        if isinstance(item, list):\n            item = tuple(item)\n        # If the item is a tuple, add it to the dictionary\n        if item in sublist_count:\n            sublist_count[item] += 1\n        else:\n            sublist_count[item] = 1\n    \n    return sublist_count",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 1407,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    total_sum = sum(test_list)\n    for i in range(2, total_sum + 1):\n        for combo in combinations(test_list, i):\n            print(combo)",
        "test": "assert find_combinations([(1,2,3,4),(5,6,7,8),(9,10,11,12)]) == [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]",
        "num_ids": 2669,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0:\n                return False\n    return True\n",
        "test": "assert count_divisors(2) == 1, \"count_divisors(2) should be 1\"",
        "num_ids": 1199,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n-1):\n        if i == 0 or arr[i] % 2!= arr[i-1] % 2:\n            temp = 0\n            for j in range(i, n):\n                temp += arr[j]\n                if j - i == 1:\n                    sum += temp\n    return sum",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5, 6]) == 35, \"Incorrect sum of odd length subarrays.\"",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color model.\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    s = 0\n    v = cmax\n    if delta!= 0:\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h * 60\n        if h < 0:\n            h += 360\n        s = delta / cmax\n    return h, s, v",
        "test": "assert rgb_to_hsv(255, 255, 255) == (0, 0, 1)",
        "num_ids": 1999,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # initialize even_num and odd_num to 0\n    even_num = 0\n    odd_num = 0\n\n    # loop through the list and find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    # return the product of even_num and odd_num\n    return even_num * odd_num",
        "test": "assert mul_even_odd([]) == 0",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Create an empty list to hold the integer values\n    int_list = []\n    \n    # Loop through the list of strings and convert each one to an integer\n    for str_item in str_list:\n        int_item = int(str_item.strip())\n        int_list.append(int_item)\n    \n    # Convert the list of integers back into a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple",
        "test": "assert tuple_str_int(('1', '2', '3')) == ((1, 2, 3),)",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 8) == 4",
        "num_ids": 854,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three('abc') == False, \"text_match_three('abc') should return False\"",
        "num_ids": 2598,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple",
        "test": "assert new_tuple(['apple', 'banana', 'cherry'],'mango') == ('apple', 'banana', 'cherry','mango')",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n    if count == len(nums)//2:\n        return True\n    else:\n        return False",
        "test": "assert even_position([3, 6, 9, 12, 15]) == False",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return result",
        "test": "assert remove_nested([(1, 2, (3, 4, (5, 6)), 7), (8, 9, 10)]) == ((1, 2, 3, 4, 5, 6), (7, 8, 9, 10))",
        "num_ids": 977,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list: \n        if isinstance(i, list): \n            count += 1\n    return count",
        "test": "assert count_list([[1, 2], [3, 4]]) == 2",
        "num_ids": 670,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x as input and returns the last\n    position of the element in the array. If the element is not present in the array, it\n    returns -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "test": "assert last([1,2,3,4,5], 3) == 2",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_starta_endb(\"a1b\") == \"a1b\"",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6, \"return_sum failed with incorrect result\"",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total",
        "test": "assert sum_odd(0) == 0",
        "num_ids": 736,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15, \"The sum of [1, 2, 3, 4, 5] should be 15.\"",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF",
        "test": "assert left_rotate(0b10101010101010101010101010101010, 2) == 0b10101010101010101010101010101010",
        "num_ids": 1420,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all spaces from a given string.\n\n    Parameters:\n    text (str): The string to be processed.\n\n    Returns:\n    str: The processed string with all whitespaces removed.\n    \"\"\"\n    # Use the regular expression pattern to remove all spaces\n    text = re.sub(r'\\s+','', text)\n    # Remove any leading or trailing spaces\n    text = text.strip()\n    return text",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\"",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if z == x:\n        count += 1\n    return count",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if i > 0 and arr[i] < arr[i-1]:\n            return i\n    return 0",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1328,
        "indeed": true
    },
    {
        "number": 803,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    # Check if n is a positive integer\n    if n <= 0:\n        return False\n    \n    # Loop through all integers from 1 to n-1\n    for i in range(1, n):\n        \n        # Check if i*i is equal to n\n        if i*i == n:\n            return True\n    \n    # If no perfect square is found, return False\n    return False",
        "test": "assert is_perfect_square(17) == False",
        "num_ids": 949,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False",
        "test": "assert is_product_even([2, 4, 6, 8]) == True, \"Function should return True for [2, 4, 6, 8]\"",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[0])):\n            current_sum = lists[i][j]\n\n            for k in range(i):\n                current_sum += lists[k][j]\n\n            for l in range(j):\n                current_sum += lists[i][l]\n\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j]]\n            elif current_sum == max_sum:\n                max_list.append(lists[i][j])\n\n    return max_list",
        "test": "assert max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]) == [[13,14,15]]",
        "num_ids": 1723,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    max_run = 0\n    current_run = 0\n    start_index = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                start_index = i - max_run + 1\n            current_run = 0\n\n    return test_str[start_index:start_index+max_run]",
        "test": "assert max_run_uppercase('abCdef') == 'd'",
        "num_ids": 1044,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1,2,3,4,5]) == 1, \"first odd number should be 1\"",
        "num_ids": 711,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for num in test_tup:\n        if num == K:\n            return True\n    return False",
        "test": "assert check_K((1,2,3), 4) == False, 'The tuple (1,2,3) should not contain 4'",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length.\")\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                return False\n        return True",
        "test": "assert check_smaller((1,2,3),(4,5,6)) == True",
        "num_ids": 1110,
        "indeed": false
    }
]