[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "test": "assert similar_elements([1,2,3,4,5], [2,3,4,5,6]) == [2,3,4,5]",
        "num_ids": 435
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(10) == True",
        "num_ids": 341
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap]",
        "test": "assert heap_queue_largest([1, 5, 3, 7, 2, 4, 6, 8, 0], 3) == [8, 7, 6]",
        "num_ids": 471
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x!= 0:\n        x &= (x - 1)\n        count += 1\n    return count == 1",
        "test": "assert is_Power_Of_Two(3) == False",
        "num_ids": 303
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words",
        "test": "assert find_char_long(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vel nunc vel nulla vestibulum luctus. Nullam eu ex ex. Donec id quam nec sapien malesuada malesuada. Donec id enim non massa varius pulvinar. Sed id orci vel mauris commodo varius. Quisque nec odio ac sapien sagittis ullamcorper ut nec elit. In non nulla vel neque pharetra congue. Sed vel ex vitae sapien mollis lacinia ut in enim. Proin tempus convallis sapien, vitae facilisis mauris rhoncus ut. Nullam vel tellus eu nisi dapibus semper. Morbi ornare, felis in malesuada malesuada, quam nisl consequat arcu, ut semper velit arcu vel purus. Integer et nulla at justo pulvinar iaculis non vel elit. Sed id augue quis odio interdum commodo. Integer et sem euismod, malesuada velit quis, cursus nulla. Quisque convallis, arcu vel suscipit congue, sapien mauris faucibus enim, vel maximus nulla purus non quam. Donec tincidunt enim sed dui auctor, ut bibendum turpis malesuada. Donec non nunc ipsum. Sed id sagittis tellus. Aliquam tempor neque vel nisl elementum, at consequat dui euismod. Aliquam nec ligula vel quam aliquam dictum. Nullam euismod, odio eu volutpat tempus, nibh lacus consectetur lectus, ac tempus turpis purus eget lorem. Nullam euismod diam ac justo aliquet, ac mattis erat dignissim. Morbi vel ex massa. Nam nec mi id lacus gravida lacinia. Donec interdum odio vitae dolor eleifend, ac vestibulum metus bibendum. Aenean commodo libero vitae enim dignissim, sit amet mattis nunc aliquet. Donec nec massa odio. Sed euismod velit et semper venenatis. Duis sollicitudin, nisl ut congue cursus, quam purus ullamcorper magna, vel lacinia libero sapien ut sapien. Sed a sapien metus. Quisque eget blandit sapien. Cras feugiat, nisl ut auctor varius, velit sapien ullamcorper elit, eu maximus velit odio eu odio. Cras sit amet ipsum sit amet erat suscipit iaculis.\") == [\"aliquam\", \"nec\", \"euismod\", \"ullamcorper\", \"eu\", \"elementum\", \"et\", \"proin\", \"mi\", \"et\", \"interdum\", \"at\", \"mauris\", \"sit\", \"sit\", \"ipsum\", \"dolor\", \"congue\", \"aliquam\", \"ipsum\", \"lacus\", \"eu\", \"sed\", \"odio\", \"id\", \"nulla\", \"neque\", \"et\", \"nulla\", \"quis\", \"ullamcorper\", \"aliquam\", \"interdum\", \"dolor\", \"et\", \"lacus\", \"ut\", \"velit\", \"felis\", \"ullamcorper\", \"nam\", \"amet\", \"interdum\", \"amet\", \"aliquam\", \"neque\", \"sed\", \"ipsum\", \"aliquam\", \"neque\", \"et\", \"facilisis\", \"aliquam\", \"eget\", \"euismod\", \"aliquam\", \"euismod\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"aliquam\", \"",
        "num_ids": 1376
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 406
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    min_rot = n\n    for i in range(n): \n        if str[i] == str[(i+n) % n]: \n            min_rot = min(min_rot, i+1)\n    return min_rot",
        "test": "assert find_Rotations(\"abba\") == 1",
        "num_ids": 485
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of the given character from the string.\n    '''\n    if not s:\n        return ''\n    else:\n        return s.replace(ch, '', 1).replace(ch, '', -1)",
        "test": "assert remove_Occ(\"abcde\", \"c\") == \"abde\", \"remove_Occ failed for first and last occurrence\"",
        "num_ids": 347
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M",
        "test": "assert sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 729
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    return V",
        "test": "assert find_Volume([1,2,3],[2,3,4],[3,4,5]) == 12",
        "num_ids": 328
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+', text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"abc\") == False, \"Should return false\"",
        "num_ids": 451
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a  # multiply side length by 4 to get perimeter\n    return perimeter",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 233
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    result = []\n    for char in string1:\n        if char not in string2:\n            result.append(char)\n    return ''.join(result)",
        "test": "assert str_to_list(\"abcadefghijklmnopqrstuvwxyz\") == \"bcdefghijklmnopqrstuvwxyz\"",
        "num_ids": 407
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums) <= 1:\n        return False\n\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False, \"test_duplicate failed for valid input\"",
        "num_ids": 444
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 13 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(10) == False",
        "num_ids": 268
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Initialize variables\n    half_num = int(len(num_str) / 2)\n    reverse = num_str[::-1]\n    # Calculate the reverse of the first half of the number\n    first_half = int(reverse[:half_num])\n    # Check if the first half of the number is one less than twice the reverse of the first half\n    if num_str[:half_num] + str(first_half - 1) == reverse[:half_num] * 2:\n        return True\n    else:\n        return False",
        "test": "assert rev(5678) == False, \"Rev(5678) = True\"",
        "num_ids": 516
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the maximum number that can be formed using the digits in the list.\n    '''\n\n    # Finding the maximum number using recursion\n    def find_Max(arr, start):\n        if start == len(arr):\n            return 0\n        elif len(arr) == 1:\n            return arr[start]\n        else:\n            max1 = find_Max(arr, start+1)\n            max2 = find_Max(arr, start+2)\n            max3 = find_Max(arr, start+3)\n            max4 = find_Max(arr, start+4)\n            max5 = find_Max(arr, start+5)\n            max6 = find_Max(arr, start+6)\n            max7 = find_Max(arr, start+7)\n            max8 = find_Max(arr, start+8)\n            max9 = find_Max(arr, start+9)\n            return max(max1, max2, max3, max4, max5, max6, max7, max8, max9)\n\n    # Returning the result\n    return find_Max(arr, 0)",
        "test": "assert find_Max_Num([9, 8, 7]) == 73",
        "num_ids": 610
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x >= 0 and y < 0:\n        return True\n    elif x < 0 and y >= 0:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-5, 2) == True",
        "num_ids": 397
    },
    {
        "number": 59,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Initialize a variable to keep track of the count of octagonal numbers\n    oct_count = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a octagonal number\n        if i**2 + i == n**2:\n            # If it is, increment the count of octagonal numbers\n            oct_count += 1\n            \n    # If there are no octagonal numbers, return None\n    if oct_count == 0:\n        return None\n    \n    # Return the nth octagonal number\n    else:\n        return n**2 - (oct_count - 1)**2",
        "test": "assert is_octagonal(2) == 8",
        "num_ids": 366
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of substrings with the sum of digits as their length\n    count = defaultdict(int)\n    # Iterate over all possible substrings of length n\n    for n in range(1, len(s)+1):\n        # Initialize variables to keep track of the current substring and the sum of digits in the substring\n        substring = ''\n        sum_of_digits = 0\n        # Iterate over all possible substrings of length n\n        for i in range(len(s)-n+1):\n            # Append the current character to the substring\n            substring += s[i]\n            # Compute the sum of digits in the substring\n            for digit in substring:\n                sum_of_digits += int(digit)\n            # Update the count of substrings with the current substring and sum of digits as their length\n            count[n] += count[n-1]\n    # Return the count of substrings with the sum of digits as their length\n    return count[len(s)]",
        "test": "assert count_Substrings(\"12345\") == 0",
        "num_ids": 567
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        raise ValueError(\"List is empty\")\n    else:\n        return min(xs)",
        "test": "assert smallest_num([1, 5, 3, 4, 2]) == 1",
        "num_ids": 336
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize variables to store the minimum and maximum difference\n    min_diff = float('inf')\n    max_diff = float('-inf')\n\n    # Loop through the list of tuples\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current pair and the next pair\n        diff = abs(test_list[i + 1][0] - test_list[i][0])\n\n        # Update the minimum and maximum difference if the current difference is smaller or greater\n        if diff < min_diff:\n            min_diff = diff\n        elif diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff",
        "test": "assert max_difference([(1, 2), (3, 4), (5, 6), (7, 8)]) == 2",
        "num_ids": 680
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "test": "assert subject_marks([(80, 'Maths'), (85, 'English'), (90, 'Science'), (75, 'History'), (70, 'Geography')]) == [('Maths', 80), ('English', 85), ('Science', 90), ('History', 75), ('Geography', 70)]",
        "num_ids": 476
    },
    {
        "number": 65,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element of the list to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "test": "assert recursive_list_sum([]) == 0, \"The sum of an empty list should be 0.\"",
        "num_ids": 510
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]) == 8",
        "num_ids": 318
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return partition(n-1) + partition(n-2) + partition(n-3) + partition(n-4)\n    \n    return partition(n)",
        "test": "assert bell_number(1) == 1",
        "num_ids": 401
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    else:\n        if A[0] >= A[1]:\n            for i in range(1, len(A)-1):\n                if A[i] <= A[i+1]:\n                    return False\n            return True\n        else:\n            for i in range(1, len(A)-1):\n                if A[i] >= A[i+1]:\n                    return False\n            return True",
        "test": "assert is_Monotonic([1, 5, 3, 7, 4]) == False, \"The given array is not monotonic.\"",
        "num_ids": 650
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return True\n    if not s:\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    return is_sublist(l, s[1:])",
        "test": "assert is_sublist([1, 2, 3], [1, 2, 3]) == True",
        "num_ids": 286
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples and returns True if all the tuples in the list have the same length, False otherwise.\n    \"\"\"\n    if len(set(len(t) for t in Input)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert find_equal_tuple([(1, 2, 3), (4, 5, 6)]) == True",
        "num_ids": 449
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n\n    # Find the length of the list\n    n = len(nums)\n\n    # Initialize the minimum gap\n    gap = n // 2\n\n    # Initialize the swapped flag\n    swapped = True\n\n    # While swapped is True, continue the sorting process\n    while swapped:\n        swapped = False\n\n        # For each gap length, iterate through the list\n        for i in range(gap):\n            # If the current element is greater than the next element, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        # Decrease the gap size by half\n        gap = int(gap / 1.3)\n\n        # If the gap size becomes too small, break out of the loop\n        if gap == 1:\n            break\n\n    return nums",
        "test": "assert comb_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]",
        "num_ids": 751
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    for i in range(1, n+1):\n        if n - i*i == i*i:\n            return True\n    return False",
        "test": "assert dif_Square(0) == False, \"Test Failed\"",
        "num_ids": 649
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True",
        "test": "assert is_samepatterns([\"red\", \"green\", \"blue\"], [[0, 1, 2], [1, 2, 0], [2, 0, 1]]) == False",
        "num_ids": 622
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if sum(x % K for x in test_list[i]) == 0:\n            count += 1\n    return count",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6)], 2) == [(1, 2, 3)]",
        "num_ids": 800
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(45) == False",
        "num_ids": 250
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def word_len(s): \n    words = s.split() \n    for word in words: \n        if len(word) % 2!= 0: \n            return True\n    return False",
        "test": "assert word_len(\"\") == False",
        "num_ids": 263
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = (4*n*(3*n-1)) // 2\n    return t",
        "test": "assert tetrahedral_number(0) == 0",
        "num_ids": 275
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume",
        "test": "assert volume_sphere(3) == math.pi*(3**3), \"The volume of a sphere with radius 3 should be pi*(3**3) = 18.\"",
        "num_ids": 297
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + ord('A'))",
        "test": "assert get_Char('def') == 23",
        "num_ids": 1349
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(3 * sequence[-1] - sequence[-2])\n    return sequence[-1]",
        "test": "assert sequence(1) == 1, \"Incorrect sequence for n=1\"",
        "num_ids": 369
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Find the surface area of a sphere using the formula\n    # A = 4 * pi * r^2\n    A = 4 * math.pi * r**2\n    return A",
        "test": "assert surfacearea_sphere(2) == math.pi * 4 * 2**2",
        "num_ids": 340
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Define the formula for centered hexagonal numbers\n    chex = 2 * n * n - 1\n\n    # Return the centered hexagonal number\n    return chex",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 337
    },
    {
        "number": 87,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # combine dictionaries using the `update()` method\n    combined_dict = {**dict1, **dict2, **dict3}\n    return combined_dict",
        "test": "assert merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 649
    },
    {
        "number": 88,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function returns a dictionary where the keys are the elements in the list\n    and the values are their frequency in the list.\n    \"\"\"\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return freq_dict",
        "test": "assert freq_count([]) == {}",
        "num_ids": 472
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n\n    min_diff = float('inf')\n    closest_num = -1\n\n    for i in range(1, N):\n        diff = abs(N - i)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = i\n\n    return closest_num",
        "test": "assert closest_num(10) == 9",
        "num_ids": 445
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n",
        "test": "assert len_log(['apple', 'banana', 'cherry', 'date', 'elderberry']) == 7",
        "num_ids": 450
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring(['apple', 'banana', 'cherry', 'date'], 'orange') == False",
        "num_ids": 296
    },
    {
        "number": 92,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return False \n    else: \n        for i in range(3, int(n**0.5)+1, 2): \n            if n % i == 0: \n                return False \n        return True",
        "test": "assert is_undulating(3) == True",
        "num_ids": 328
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2, 3) == 8, \"power(2, 3) should be 8\"",
        "num_ids": 318
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]",
        "test": "assert index_minimum([(3, 4), (1, 2), (5, 6), (7, 8), (9, 10)]) == 1",
        "num_ids": 521
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "test": "assert Find_Min_Length([[1,2],[3,4],[5,6]]) == 2",
        "num_ids": 452
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(1) == 1",
        "num_ids": 263
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for sub_item in item:\n            if sub_item not in freq_dict:\n                freq_dict[sub_item] = 0\n            freq_dict[sub_item] += 1\n    return freq_dict",
        "test": "assert frequency_lists([[1,2,3],[4,5,6],[7,8,9]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}",
        "num_ids": 635
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "test": "assert multiply_num([6,7,8,9,10]) == [12,14,16,18,20]",
        "num_ids": 283
    },
    {
        "number": 99,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    result = []\n    while n > 0:\n        remainder = n % 2\n        n //= 2\n        if remainder == 1:\n            result.append(\"1\")\n        else:\n            result.append(\"0\")\n    return \"\".join(result[::-1])",
        "test": "assert decimal_to_binary(5) == \"101\"",
        "num_ids": 314
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Reverse the number and check if it is palindrome\n    reversed_num = int(num_str[::-1])\n    if num < reversed_num:\n        return next_smallest_palindrome(reversed_num)\n    \n    # Find the smallest palindrome greater than the original number\n    for i in range(10**(len(num_str)-1), 10**len(num_str), -1):\n        if i < reversed_num:\n            continue\n        if str(i) == str(i)[::-1]:\n            if int(str(i)[::-1]) > num:\n                return int(str(i)[::-1])\n            else:\n                return next_smallest_palindrome(num)\n            \n    # If no palindromes found, return None\n    return None",
        "test": "assert next_smallest_palindrome(12321) == 12321",
        "num_ids": 717
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the length of the array is greater than 0\n    if len(arr) <= 0:\n        return None\n    \n    # Calculate the index of the kth element\n    k_index = k - 1\n    \n    # Initialize the left and right indices of the array\n    left = 0\n    right = len(arr) - 1\n    \n    # Check if the kth element is at the end of the array\n    if k_index == right:\n        return arr[k_index]\n    \n    # Check if the kth element is in the first half of the array\n    if k_index > left and k_index <= right:\n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            # If the kth element is in the first half, check if it is at the midpoint\n            if arr[mid] == k:\n                return arr[mid]\n            \n            # If the kth element is at the midpoint, check if it is in the left or right half\n            elif arr[mid] < k:\n                left = mid + 1\n            \n            # If the kth element is at the midpoint, check if it is in the left or right half\n            else:\n                right = mid - 1\n    \n    # Check if the kth element is in the second half of the array\n    if k_index < left:\n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            # If the kth element is in the second half, check if it is at the midpoint\n            if arr[mid] == k:\n                return arr[mid]\n            \n            # If the kth element is at the midpoint, check if it is in the left or right half\n            elif arr[mid] < k:\n                left = mid + 1\n            \n            # If the kth element is at the midpoint, check if it is in the left or right half\n            else:\n                right = mid - 1\n    \n    # If the kth element is not found, return None\n    return None",
        "test": "assert kth_element([1, 2, 3, 4, 5], 2) == 2",
        "num_ids": 960
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_words = []\n    for word in words:\n        camel_case_words.append(word.capitalize())\n    camel_case_string = ''.join(camel_case_words)\n    return camel_case_string",
        "test": "assert snake_to_camel(\"snake_case_string\") == \"snakeCaseString\", \"snake_to_camel test failed\"",
        "num_ids": 438
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize the triangle as a dictionary\n    triangle = {}\n    for i in range(n):\n        triangle[i] = [0] * m\n    \n    # Fill the triangle with 1's\n    for i in range(1, n):\n        for j in range(1, m):\n            triangle[i][j] = 1\n    \n    # Check for symmetricity\n    for i in range(n):\n        if triangle[i][i]!= 1:\n            print(\"The triangle is not symmetric.\")\n            return\n    \n    # Create the pattern\n    pattern = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            if triangle[i][j] == 1:\n                row.append('X')\n            else:\n                row.append(' ')\n        pattern.append(''.join(row))\n    \n    # Print the pattern\n    print(' '.join(pattern))\n    \n    # Calculate the Eulerian number\n    eulerian_num = 0\n    for i in range(n):\n        for j in range(m):\n            if triangle[i][j] == 1:\n                eulerian_num += 1\n    \n    # Print the Eulerian number\n    print(\"Eulerian number:\", eulerian_num)",
        "test": "assert eulerian_num(5, 3) == 60",
        "num_ids": 625
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "test": "assert sort_sublists([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 487
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item:\n                count += 1\n    return count",
        "test": "assert count([True, True, True, True]) == 4, \"count([True, True, True, True]) should be 4.\"",
        "num_ids": 331
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    return test_list + test_tup",
        "test": "assert add_lists([], (1, 2, 3)) == ([1, 2, 3], (1, 2, 3))",
        "num_ids": 410
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Sort the input lists\n    num1.sort()\n    num2.sort()\n    num3.sort()\n\n    # Merge the sorted lists into a single sorted list\n    merged_list = num1 + num2 + num3\n\n    # Return the merged list\n    return merged_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 551
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    temp = 0\n    i = 0\n    \n    # Loop through the binary string s and rotate it n times\n    while i < len(s):\n        temp = s[i]\n        s = s[1:] + temp\n        i += 1\n    \n    # Loop through the rotated binary string s and count odd numbers\n    for i in range(len(s)):\n        if int(s[i]) % 2!= 0:\n            count += 1\n    \n    # Return the count of odd numbers\n    return count",
        "test": "assert odd_Equivalent('11110', 2) == 4, \"odd_Equivalent(11110, 2) should return 4\"",
        "num_ids": 679
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # use set() to remove duplicates from nested list\n    flattened = set([item for sublist in nestedlist for item in sublist])\n    # initialize an empty set for common elements\n    common_elements = set()\n    # loop through flattened list and check if element is in common_elements\n    for item in flattened:\n        if item in common_elements:\n            common_elements.remove(item)\n        else:\n            common_elements.add(item)\n    # return list of common elements\n    return list(common_elements)",
        "test": "assert common_in_nested_lists([[1, 2, 3], [3, 4, 5], [5, 6, 7]]) == [3, 5]",
        "num_ids": 609
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer('123') == True, 'check_integer(\"123\") should return True'",
        "num_ids": 249
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True, \"Expected empty_dit([]) == True, but got {}\".format(empty_dit([]))",
        "num_ids": 282
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total",
        "test": "assert tuple_to_int((1, 2, 3)) == 6",
        "num_ids": 336
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])",
        "test": "assert list_to_float([[1, \"two\", 3], [4.5, 6.7, \"eight.9\"]]) == [1.0, 4.5, 6.7, 8.9]",
        "num_ids": 591
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the list of resulting strings\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 280
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i - 1]:\n            for j in range(i + 1, n):\n                if arr[i] == arr[j]:\n                    return arr[i]\n    return \"Element not found\"",
        "test": "assert search([1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9]) == 4",
        "num_ids": 626
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables to store maximum product and current product\n    max_product = float('-inf')\n    current_product = 1\n    \n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        # Calculate the absolute difference between the current and next tuple in the list\n        diff = abs(list1[i][0] - list1[i+1][0])\n        \n        # Update the maximum product if the current product is greater than the absolute difference\n        if current_product > diff:\n            max_product = current_product\n        \n        # Update the current product by multiplying the current tuple and the next tuple in the list\n        current_product = list1[i][1] * list1[i+1][1]\n    \n    # Return the maximum absolute product\n    return max_product",
        "test": "assert max_product_tuple([(7, 8), (2, 3), (4, 5)]) == 12, \"Incorrect output for the input [(7, 8), (2, 3), (4, 5)].\"",
        "num_ids": 682
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def is_prime(num):\n    '''\n    A function to check if a number is prime or not.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    A function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit+1):\n        if is_prime(i) and is_prime(limit-i):\n            total += i + limit-i\n    return total\n",
        "test": "assert amicable_numbers_sum(100) == 31626, \"The sum of all amicable numbers from 1 to 100 is incorrect.\"",
        "num_ids": 518
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the angle of the complex number using the cmath module\n    angle = cmath.phase(a + b * 1j)\n    \n    # convert the angle to degrees and return it\n    return angle.real * 180 / cmath.pi",
        "test": "assert angle_complex(0, 0) == 0.0",
        "num_ids": 430
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_length(string): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    zeros = 0\n    ones = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        elif string[i] == '1':\n            ones += 1\n        else:\n            if zeros > ones:\n                zeros -= 1\n            else:\n                ones -= 1\n            diff = abs(zeros - ones)\n            max_diff = max(max_diff, diff)\n    return max_diff",
        "test": "assert find_length(\"\") == 0",
        "num_ids": 500
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def common_divisors(num1, num2):\n    \"\"\"\n    This function finds the common divisors of two given numbers.\n    \"\"\"\n    # Finding the set of factors of the first number\n    factors1 = set([i for i in range(1, num1+1) if num1 % i == 0])\n    # Finding the set of factors of the second number\n    factors2 = set([i for i in range(1, num2+1) if num2 % i == 0])\n    # Finding the intersection of the sets of factors\n    common_factors = factors1.intersection(factors2)\n    # Finding the sum of the common factors\n    return sum(common_factors)",
        "test": "assert sum(12, 16) == 24, \"Function'sum' is not working correctly.\"",
        "num_ids": 462
    },
    {
        "number": 127,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6, \"Error in multiply_int: multiplication of 2 and 3 is incorrect.\"",
        "num_ids": 178
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "test": "assert long_words(4, [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"]) == [\"orange\"]",
        "num_ids": 688
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = 15\n    \n    for i in range(n):\n        # Check rows\n        for j in range(n):\n            if my_matrix[i][j]!= magic_sum:\n                return False\n            \n            # Calculate the sum of the magic square\n            magic_sum -= 1\n        \n        # Check columns\n        for j in range(n):\n            if my_matrix[j][i]!= magic_sum:\n                return False\n            \n            # Calculate the sum of the magic square\n            magic_sum -= 1\n        \n        # Check the diagonal\n        for i0, j0 in [(0, 0), (0, n-1), (n-1, 0), (n-1, n-1)]:\n            if my_matrix[i0][j0]!= magic_sum:\n                return False\n            \n            # Calculate the sum of the magic square\n            magic_sum -= 1\n        \n        # Check the reverse diagonal\n        for i0, j0 in [(0, n-1), (0, 0), (n-1, n-1), (n-1, 0)]:\n            if my_matrix[i0][j0]!= magic_sum:\n                return False\n            \n            # Calculate the sum of the magic square\n            magic_sum -= 1\n    \n    # If we make it through the loop without returning False, then the matrix is a magic square\n    return True",
        "test": "assert magic_square_test([[5,3,4],[1,7,6],[8,2,3]]) == False",
        "num_ids": 945
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = max(freq.values())\n    max_item = None\n    \n    for num in nums:\n        if freq[num] == max_freq:\n            max_item = num\n    \n    return max_item",
        "test": "assert max_occurrences([1, 2, 3, 2, 1, 4, 2]) == 2",
        "num_ids": 826
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_list = []\n    for char in str1:\n        if char in vowels:\n            vowel_list.append(char)\n    vowel_list.reverse()\n    return ''.join(vowel_list)",
        "test": "assert reverse_vowels('aeiou') == 'uoiea'",
        "num_ids": 325
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a list\n    lst = list(tup1)\n    # convert the list to a string\n    return ', '.join(str(x) for x in lst)",
        "test": "assert tup_string((1, 2, 3)) == \"1,2,3\"",
        "num_ids": 262
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 403
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * (n+1) // 2",
        "test": "assert hexagonal_num(1) == 1 # 1st hexagonal number",
        "num_ids": 373
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums)) # initialize an array of zeros of length equal to the length of nums\n\n    for num in nums:\n        if num == 0:\n            zeros.append(1) # if a number is zero, increment the corresponding element of the array of zeros\n        else:\n            zeros.append(0) # otherwise, decrement the corresponding element of the array of zeros\n\n    non_zeros_count = len(nums) - sum(zeros) # count the number of non-zero elements in the array\n    zero_ratio = non_zeros_count / len(nums) # calculate the ratio of zeroes to non-zeroes\n\n    return zero_ratio",
        "test": "assert zero_count([0, 1, 0, 1, 0, 1, 1, 0]) == 0.5",
        "num_ids": 581
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    max_sum = 0\n    for i in range(2, int(n**0.5)+1):\n        while n % i == 0:\n            n //= i\n            max_sum += i\n    if n > 1:\n        max_sum += n\n    return max_sum == n",
        "test": "assert is_Sum_Of_Powers_Of_Two(3) == True",
        "num_ids": 608
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # pi * r\n    return circumference",
        "test": "assert circle_circumference(2) == 6.283185307179586, \"The correct value of circumference of a circle with radius 2 is not returned.\"",
        "num_ids": 326
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)",
        "test": "assert extract_singly([[1,2,3],[4,5],[6]]) == {1, 2, 3, 4, 5, 6}, \"Test case 1 failed\"",
        "num_ids": 482
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # create a list of numbers from 1 to n\n    count = [0] * n\n    # iterate over the list and count the number of swaps required to sort the list\n    for i in range(n):\n        # calculate the maximum index k such that nums[i] < nums[k]\n        k = i\n        while k > 0 and nums[k - 1] > nums[k]:\n            count[k - 1] += 1\n            k -= 1\n        # swap nums[i] with nums[k]\n        nums[i], nums[k] = nums[k], nums[i]\n        # repeat the process for the newly sorted portion of the list\n        for j in range(i, k, -1):\n            k = j\n            while k < n and nums[k] < nums[k - 1]:\n                count[k - 1] += 1\n                k += 1\n            nums[i], nums[k] = nums[k], nums[i]\n    # print the count of swaps required to sort the list\n    print(\"Number of swaps required:\", sum(count))",
        "test": "assert pancake_sort([5, 2, 4, 1, 3]) == [1, 2, 3, 4, 5]",
        "num_ids": 917
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3,4,5], [6,7,8,9,10], [6,7,8,9,10]) == 0",
        "num_ids": 460
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert find_lists(()) == 0, \"The function should return 0 if the input tuple is empty.\"",
        "num_ids": 277
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 470
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if n is divisible by a and b\n    if n % a!= 0 and n % b!= 0:\n        return None\n\n    # Find the two integers x and y that satisfy the equation\n    x = int(n / a)\n    y = int(n / b)\n\n    # Check if the solution is valid\n    if a * x + b * y!= n:\n        return None\n\n    # Return the solution\n    return (x, y)",
        "test": "assert find_solution(2, 3, 12) == None, \"find_solution(2, 3, 12) should return None\"",
        "num_ids": 1533
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 357
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while n - 2*i >= 0:\n        total += n - 2*i\n        i += 1\n    return total",
        "test": "assert sum_series(10) == 30",
        "num_ids": 445
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area using the formula for a regular polygon\n    area = (l * (s * s) / 4) * pi\n    # Return the area\n    return area",
        "test": "assert area_polygon(3, 4) == 60, \"Incorrect output\"",
        "num_ids": 290
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    # Find the sum of the divisors of n+1\n    div_sum_plus_one = 0\n    for i in range(1, n+2):\n        if n+1 % i == 0:\n            div_sum_plus_one += i\n    # Check if the sums are the same\n    if div_sum == div_sum_plus_one:\n        return True\n    else:\n        return False",
        "test": "assert div_sum(28) == False, \"div_sum(28) should be False.\"",
        "num_ids": 568
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    str1 = str1.lower() # convert string to lowercase for case-insensitivity\n    \n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[j-1]:\n                count += 1\n    \n    return count",
        "test": "assert count_char_position('') == 0",
        "num_ids": 603
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0 and (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 3, 5, 7, 9]) == 0, \"find_even_pair([1, 3, 5, 7, 9]) should return 0\"",
        "num_ids": 535
    },
    {
        "number": 167,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i <<= 1\n    return i",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 398
    },
    {
        "number": 168,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5,4,3,2,1], 4) == 2, \"frequency([1,2,3,4,5,4,3,2,1], 4) == 2\"",
        "num_ids": 401
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if the range is valid\n    if m < 0 or m > len(list1) - 1 or n < 0 or n > len(list1) - 1 or m > n:\n        print(\"Invalid range!\")\n        return\n    \n    # Initialize the sum to zero\n    sum_range = 0\n    \n    # Loop through the list starting from index m and ending at index n\n    for i in range(m, n+1):\n        sum_range += list1[i]\n    \n    # Return the sum of the numbers in the range\n    return sum_range",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9",
        "num_ids": 475
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the area of a regular pentagon\n    area = 5 * a * a / 2\n    # Calculate the length of the base\n    base_length = 2 * a * math.sqrt(3) / 3\n    # Calculate the number of sides of the pentagon\n    num_sides = 5\n    # Calculate the perimeter of the pentagon\n    perimeter = (num_sides * base_length) + (num_sides - 2) * a\n    # Return the perimeter\n    return perimeter",
        "test": "assert perimeter_pentagon(10) == 30, \"The perimeter of a regular pentagon with sides of length 10 is not correct.\"",
        "num_ids": 506
    },
    {
        "number": 172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n-3):\n        if s[i:i+4] =='std':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"std is a cool tool\") == 2",
        "num_ids": 382
    },
    {
        "number": 222,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "test": "assert check_type((1, 2, \"Hello\")) == False, \"Check if all elements in tuple have same data type\"",
        "num_ids": 386
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Count the number of occurrences of the element\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    # Check if the count is greater than n/2\n    if count > n//2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 2) == False",
        "num_ids": 592
    },
    {
        "number": 224,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0b0000000000000000000000000000000) == 0, \"Test case 1 failed.\"",
        "num_ids": 376
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    # Convert the string to a list\n    lst = list(str)\n\n    # Iterate over the list and remove the characters with odd index values\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            lst.pop(i)\n\n    # Convert the list back to a string and return it\n    return ''.join(lst)",
        "test": "assert odd_values_string('python') == 'tp'",
        "num_ids": 333
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as inputs and returns the minimum of those numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 317
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # converting the input values to binary form\n    n = bin(n)[2:]\n    l = bin(l)[2:]\n    r = bin(r)[2:]\n\n    # padding the binary numbers with 0's to make them of equal length\n    n = '0'*(len(l)-len(n)) + n\n    l = '0'*(len(l)-len(l)) + l\n    r = '0'*(len(l)-len(r)) + r\n\n    # comparing the binary numbers\n    for i in range(len(l)):\n        if n[i] == '0' and (int(l[i]) < int(r[i])):\n            return False\n\n    # if all the bits are set in the given range then return True\n    return True",
        "test": "assert all_Bits_Set_In_The_Given_Range(25, 16, 23) == False",
        "num_ids": 709
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Create two empty lists to store negative and positive elements\n    neg = []\n    pos = []\n    # Iterate over the array\n    for num in arr:\n        # If the element is negative, append it to the negative list\n        if num < 0:\n            neg.append(num)\n        # If the element is positive, append it to the positive list\n        else:\n            pos.append(num)\n    # Iterate over the first n elements of the negative list and reverse them\n    for i in range(n):\n        neg.insert(0, neg.pop())\n    # Iterate over the first n elements of the positive list and reverse them\n    for i in range(n):\n        pos.insert(0, pos.pop())\n    # Combine the negative and positive lists and return the result\n    return neg + pos",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5, -1, -2, -3, -4], 3) == [4, 2, 5, 1, -3, -1, -4, -2]",
        "num_ids": 985
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "test": "assert replace_blank(\"hello world\", \"*\") == \"hello*world\"",
        "num_ids": 249
    },
    {
        "number": 232,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([],5) == []",
        "num_ids": 392
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n    area = pi * (r**2 + h**2)\n    return area",
        "test": "assert lateralsuface_cylinder(10, 5) == 50 # correct result for r=10, h=5",
        "num_ids": 306
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert volume_cube(2) == 8, \"volume_cube failed for side length 2\"",
        "num_ids": 249
    },
    {
        "number": 235,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1 << (n.bit_length() - 1))",
        "test": "assert even_bit_set_number(1) == 1",
        "num_ids": 391
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n    count_dict = Counter(unique_tuples)\n    return count_dict",
        "test": "assert check_occurences([(1, 'a'), (2, 'b'), (3, 'b'), (4, 'c'), (5, 'c')]) == {'(1, 'a')': 1, '(2, 'b')': 2, '(3, 'b')': 1, '(4, 'c')': 1, '(5, 'c')': 1}",
        "num_ids": 554
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count",
        "test": "assert number_of_substrings('') == 0, \"number_of_substrings('') should return 0.\"",
        "num_ids": 348
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m,n): \n    # Function to find the number of sequences of length n that satisfy the given conditions\n    def count_sequences(m,n,sequence):\n        # Base case: If we have generated all the elements of the sequence, return 1\n        if len(sequence) == n:\n            return 1\n        # Recursive case: Find the number of sequences that start from the current element\n        count = 0\n        for i in range(1,len(sequence)):\n            if sequence[i] >= 2*sequence[i-1] <= m:\n                count += count_sequences(m,n,sequence[:i]+[sequence[i]]+sequence[i+1:])\n        return count\n    # Calculate the number of sequences\n    count = count_sequences(m,n,[])\n    # Return the total number of sequences\n    return count",
        "test": "assert get_total_number_of_sequences(7,1) == 23",
        "num_ids": 729
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must have the same length.\")\n    list1[-1] = list2",
        "test": "assert replace_list([1,2,3,4], [5,6]) == [1,2,3,5,6]",
        "num_ids": 396
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"\") == 0, \"count_charac('') should return 0\"",
        "num_ids": 250
    },
    {
        "number": 244,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        N = -N # convert negative to positive\n    is_perfect_square = True\n    sqrt_N = math.sqrt(N)\n    if sqrt_N.is_integer():\n        is_perfect_square = False\n    else:\n        sqrt_N = int(sqrt_N) + 1\n    \n    next_sq = int(sqrt_N ** 2)\n    if next_sq > N:\n        return next_sq\n    else:\n        return next_Perfect_Square(N + 1)",
        "test": "assert next_Perfect_Square(12) == 16",
        "num_ids": 742
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    if arr[0] >= arr[1]:\n        if arr[1] >= arr[2]:\n            return arr[0] + arr[1] + arr[2]\n        else:\n            return arr[0] + arr[1]\n    else:\n        if arr[0] >= arr[2]:\n            return arr[0] + arr[1] + arr[2]\n        else:\n            return arr[1] + arr[2] + arr[0]",
        "test": "assert max_sum([1, 2, 3, 2, 1]) == 6",
        "num_ids": 663
    },
    {
        "number": 246,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Check if the input number is an integer or float\n    if not isinstance(number, int) and not isinstance(number, float):\n        raise TypeError(\"Input must be an integer or float.\")\n\n    # Check if the input number is negative\n    if number < 0:\n        raise ValueError(\"Input must be a non-negative number.\")\n\n    # Initialize variables\n    x = number\n    prev_x = 0\n    n = 0\n\n    # Keep iterating until the difference between x and the previous x is small enough\n    while abs(x - prev_x) > 10**-10:\n        prev_x = x\n        x = (x + number/x) / 2\n        n += 1\n\n    # Return the square root using the babylonian method\n    return x",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 543
    },
    {
        "number": 247,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n\n    # Create a table to store the length of longest palindromic subsequence ending at each index\n    table = [[0] * n for _ in range(n)]\n\n    # Base case: if the length of the string is 1 or 0, then it is a palindrome\n    table[0][0] = 1\n\n    # Fill the table in bottom up manner\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                table[i][j] = table[i-1][j-1] + 2\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence ending at the last index\n    return table[n-1][0]",
        "test": "assert lps(\"babad\") == 2, \"Incorrect output for 'babad' input\"",
        "num_ids": 862
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n as input and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(n):\n        harmonic_sum += 1.0 / (i + 1)\n    return harmonic_sum",
        "test": "assert harmonic_sum(3) == 0.8660254037844387",
        "num_ids": 459
    },
    {
        "number": 249,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))",
        "test": "assert intersection_array([1,2,3,4,5], [3,4,5,6,7]) == [3,4,5]",
        "num_ids": 562
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X(('apple', 'banana', 'cherry', 'apple', 'orange'), 'apple') == 2",
        "num_ids": 371
    },
    {
        "number": 251,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # use list comprehension to insert the element before each element in the list\n    result = [element] + list\n    return result",
        "test": "assert insert_element([1,2,3,4,5],0) == [0,1,2,3,4,5]",
        "num_ids": 426
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        polar_coords.append((r, theta))\n    return polar_coords",
        "test": "assert convert([1+1j, 2+3j]) == [(1.0, 1.0), (2.0, 3.0)], \"Incorrect output for convert([1+1j, 2+3j])\"",
        "num_ids": 363
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5, \"count_integer([1, 2, 3, 4, 5]) == 5\"",
        "num_ids": 351
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 552
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 394
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a, b):\n    return (b, a)",
        "test": "assert swap_numbers(1, 2) == (2, 1)",
        "num_ids": 217
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    \n    if test_tup1[1] > max_tup[1]:\n        max_tup = test_tup1\n    elif test_tup2[1] > max_tup[1]:\n        max_tup = test_tup2\n    \n    if test_tup1[2] > max_tup[2]:\n        max_tup = test_tup1\n    elif test_tup2[2] > max_tup[2]:\n        max_tup = test_tup2\n    \n    return max_tup",
        "test": "assert maximize_elements((1,2,3),(4,5,6)) == (4,5,6)",
        "num_ids": 842
    },
    {
        "number": 260,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # initialize variables\n    prime = 2\n    count = 0\n\n    # loop until nth newman prime is found\n    while count < n:\n        # check if prime number\n        is_prime = True\n        for i in range(2, int(prime**0.5)+1):\n            if prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        # increment prime number\n        prime += 1\n\n    # return nth newman prime\n    return prime",
        "test": "assert newman_prime(0) == 2",
        "num_ids": 599
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1",
        "test": "assert division_elements((2, 4, 6), (1, 2, 3)) == (2, 2, 2)",
        "num_ids": 523
    },
    {
        "number": 262,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create an empty list to store the first part of the list\n    part1 = []\n\n    # Loop through the list and add elements to the first part of the list\n    for i in range(L):\n        if i < len(list1):\n            part1.append(list1[i])\n\n    # Create an empty list to store the second part of the list\n    part2 = []\n\n    # Loop through the list from the length of the first part to the end\n    for i in range(L, len(list1)):\n        if i < len(list1):\n            part2.append(list1[i])\n\n    # Return the two parts of the list in a tuple\n    return (part1, part2)",
        "test": "assert split_two_parts([1,2,3,4,5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 592
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert the height in inches to centimeters\n    height_cm = h_age * 2.54\n    \n    # Calculate the dog's age in dog years\n    dog_years = height_cm / 12.0\n    \n    # Return the dog's age in dog years\n    return dog_years",
        "test": "assert dog_age(2) == 9",
        "num_ids": 355
    },
    {
        "number": 265,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        sublist = S[i:i+step]\n        result.append(sublist)\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 514
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    return 6 * l ** 2",
        "test": "assert lateralsurface_cube(1) == 6, \"lateral surface area of a cube with side length 1 is not correct\"",
        "num_ids": 347
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 1\n    while i <= n:\n        sum_of_squares += i**2\n        i += 2\n    return sum_of_squares",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 351
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    if n < 1:\n        return None\n    if n == 1:\n        return \"*\"\n    if n == 2:\n        return \"**\"\n    if n == 3:\n        return \"***\"\n    result = \"\"\n    for i in range(n-1):\n        result += \" \"\n    result += \"*\"\n    result += \"\\n\"\n    for i in range(n-1):\n        result += \" \"\n    result += \" \"\n    result += \"\\n\"\n    for i in range(n-2):\n        result += \"*\"\n        result += \"\\n\"\n    result += \" \"\n    return result",
        "test": "assert find_star_num(1) == '*'",
        "num_ids": 438
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('A') == 65, 'ascii_value failed for A'",
        "num_ids": 234
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    count_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count_even += 1\n    if count_even == 0:\n        return 0\n    else:\n        return sum_even",
        "test": "assert sum_even_and_even_index([1,2,3,4,6]) == 20, \"Incorrect output for [1,2,3,4,6]\"",
        "num_ids": 603
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum",
        "test": "assert even_Power_Sum(10) == 42660",
        "num_ids": 289
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list",
        "test": "assert rear_extract([(1,2),(3,4),(5,6)]) == [2,4,6]",
        "num_ids": 316
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two input tuples must have equal lengths.\")\n        return\n    \n    # create a new tuple that contains the results of the subtraction\n    result_tup = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n    \n    # print the result tuple\n    print(\"The result tuple is:\", result_tup)",
        "test": "assert substract_elements((1,2,3),(2,2,2)) == (1,0,1)",
        "num_ids": 476
    },
    {
        "number": 274,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 472
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159 * r**2 * h) / 3\n    return volume",
        "test": "assert volume_cylinder(2,4) == 30.859375, \"The volume of a cylinder with radius 2 and height 4 should be 30.859375\"",
        "num_ids": 334
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}",
        "test": "assert dict_filter({'a':10,'b':20,'c':30,'d':40,'e':50},20) == {'b':20,'c':30,'d':40,'e':50}",
        "num_ids": 369
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count",
        "test": "assert count_first_elements((1, 2, 3, 4, 5)) == 0, \"The count of elements before 3 is not correct\"",
        "num_ids": 413
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 1\n    for i in range(1, n + 1):\n        decagonal = (decagonal * (3 * i - 1)) // 2\n    return decagonal\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 363
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 581
    },
    {
        "number": 281,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set to remove any duplicates\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 3]) == False",
        "num_ids": 343
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[1,2,3]) == [0,0,0]",
        "num_ids": 420
    },
    {
        "number": 283,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for digit in str(n):\n        count = 0\n        for i in str(n):\n            if int(digit) == int(i):\n                count += 1\n        if count > int(digit):\n            return False\n    return True",
        "test": "assert validate(12345) == True, \"The function should return True for 12345\"",
        "num_ids": 476
    },
    {
        "number": 284,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False",
        "test": "assert check_element([1,2,3,4,5],0) == False",
        "num_ids": 347
    },
    {
        "number": 285,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    matches = re.findall(pattern, text)\n    return bool(matches)",
        "test": "assert text_match_two_three(\"abbbbbbbbabbbbabbbbbbabbbbabbbbabbbbbbabbbbbbabbbbbbabbbbbbabbbbba\") == True, \"Expected True, got False\"",
        "num_ids": 351
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Get the maximum sub-array sum of a contiguous array\n    def max_subarray_sum(a, n):\n        max_sum = float('-inf')\n        current_sum = 0\n        for i in range(n):\n            current_sum += a[i]\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n\n    # Get the sum of the modified array\n    modified_sum = 0\n    for i in range(k):\n        modified_sum += a[0] + a[-1] * k\n\n    # Find the largest sum of a contiguous array in the modified array\n    max_sum = max_subarray_sum(a, n)\n\n    # Check if the maximum sub-array sum of the modified array is greater than the maximum sub-array sum of the original array\n    if max_sum > modified_sum:\n        return max_sum\n    else:\n        return modified_sum",
        "test": "assert max_sub_array_sum_repeated([2, 3, 1, 2, 4, 3, 5, 2], 8, 2) == 6",
        "num_ids": 795
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum",
        "test": "assert square_Sum(1) == 0, \"Error: square_Sum(1) should return 0.\"",
        "num_ids": 364
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_length(lst):\n    \"\"\"\n    Returns the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = [len(sublist) for sublist in lst]\n    return max(lengths)",
        "test": "assert max_length([[1, 2, 3], [4, 5, 6], [7]]) == [7]",
        "num_ids": 382
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][1] = 1\n    for j in range(1, k+1):\n        dp[1][j] = 1\n\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    return dp[n][k]",
        "test": "assert count_no_of_ways(6, 4) == 240",
        "num_ids": 1103
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # calculate quotient by dividing the larger number by the smaller number\n    quotient = n // m\n    \n    # return the quotient rounded down to the nearest integer\n    return quotient",
        "test": "assert find(6, 3) == 2",
        "num_ids": 231
    },
    {
        "number": 293,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    c = math.sqrt(w ** 2 + h ** 2)\n    return c",
        "test": "assert otherside_rightangle(3,4)==5",
        "num_ids": 345
    },
    {
        "number": 294,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    max_val = listval[0]\n    \n    for i in range(1, len(listval)):\n        if type(listval[i])!= type(max_val):\n            return None\n            \n        if listval[i] > max_val:\n            max_val = listval[i]\n            \n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 408
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum",
        "test": "assert sum_div(12) == 36",
        "num_ids": 278
    },
    {
        "number": 296,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # Count the number of inversions in the array \n    inv_count = 0 \n    # Sort the array in increasing order \n    arr.sort() \n    # Iterate through the array and find the inversions \n    for i in range(n): \n        # Calculate the index of the maximum element in the remaining unsorted part of the array \n        max_index = i \n        for j in range(i+1, n): \n            if arr[j] > arr[max_index]: \n                max_index = j \n        # If the maximum element is greater than the i-th element, then there is an inversion \n        if arr[i] > arr[max_index]: \n            inv_count += n - i - 1 \n        # Swap the i-th and the maximum element in the array \n        arr[i], arr[max_index] = arr[max_index], arr[i] \n    # Return the number of inversions found in the array \n    return inv_count ",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0, \"get_Inv_Count([1, 2, 3, 4, 5]) == 0\"",
        "num_ids": 657
    },
    {
        "number": 297,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    A recursive function to flatten a nested list structure.\n\n    Args:\n        lst: The list to be flattened.\n\n    Returns:\n        A flattened list.\n    \"\"\"\n    if not lst:\n        return []\n    elif isinstance(lst, list):\n        return [elem for sublist in lst for elem in flatten_list(sublist)]\n    else:\n        return [lst]",
        "test": "assert flatten_list([1, [2, [3, [4]], 5], 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 491
    },
    {
        "number": 299,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the count of each item in the list\n    item_count = defaultdict(int)\n    # loop through the list of tuples\n    for item, count in stdata:\n        # add the count of the current item to the item_count dictionary\n        item_count[item] += count\n    # loop through the item_count dictionary to find the maximum aggregate\n    max_agg = 0\n    for count in item_count.values():\n        max_agg = max(max_agg, count)\n    return max_agg",
        "test": "assert max_aggregate([(1,2)]) == 2",
        "num_ids": 706
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n): \n        seq = bin(i)[2:].zfill(n) \n        if sum(int(j) for j in seq[:n]) == sum(int(j) for j in seq[n:]): \n            count += 1\n    return count",
        "test": "assert count_binary_seq(1) == 1",
        "num_ids": 493
    },
    {
        "number": 301,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for v in d.values())\n    else:\n        depth = 0\n    return depth",
        "test": "assert dict_depth({'a': 1, 'b': {'c': 2}}) == 2",
        "num_ids": 372
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Parameters:\n    arr - a list of integers\n    ranges - a list of lists representing ranges of elements\n    rotations - a list of integers representing number of rotations to apply\n    index - an integer representing the index of the element to find\n\n    Return:\n    The element at the given index after number of rotations.\n    '''\n\n    # Get the element to find\n    element = arr[index]\n\n    # Find the rotation index of the element\n    for i in range(len(rotations)):\n        if element in ranges[rotations[i] - 1]:\n            break\n\n    # Calculate the new index after rotation\n    new_index = (index + i + ranges[rotations[i] - 1].index(element)) % len(arr)\n\n    # Return the element at the new index\n    return arr[new_index]\n",
        "test": "assert find_Element([1, 2, 3, 4, 5], [[1, 3]], [0], 2) == 4",
        "num_ids": 882
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if re.match(r'^p', word):\n            return word, words[words.index(word)+1]",
        "test": "assert start_withp(['hello', 'world', 'python', 'programming', 'python']) == ('python', 'programming')",
        "num_ids": 376
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function takes an array a, its size n, an index i, and a kth element k as input.\n    It returns the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n - 1:\n        if a[index] <= k:\n            return a[index]\n        else:\n            return 0\n    else:\n        if k >= a[index]:\n            return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k - a[index]))\n        else:\n            return max_sum_increasing_subseq(a, n, index + 1, k)\n",
        "test": "assert max_sum_increasing_subseq([1, 5, 3, 7, 10, 12, 11], 7, 3, 5) == 22",
        "num_ids": 904
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Create an empty list to store the colon\n    colon_list = []\n    # Iterate through the columns of the tuple\n    for j in range(m):\n        # Create an empty list to store the row\n        row_list = []\n        # Iterate through the rows of the tuple\n        for i in range(n):\n            # Get the value of the current element in the tuple\n            value = tuplex_copy[j*n+i]\n            # Add the value to the row list\n            row_list.append(value)\n        # Add the row list to the colon list\n        colon_list.append(row_list)\n    # Return the colon list\n    return colon_list",
        "test": "assert colon_tuplex((1,2,3),(2,2),2) == ((1,2),(2,3),(3,1),(3,2),(3,3))",
        "num_ids": 681
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the result list\n    result = []\n    \n    # Loop over the desired number of products\n    for _ in range(N):\n        # Calculate the product of the two largest numbers from the first list and the first largest number from the second list\n        prod1 = nums1[-1] * nums1[-2]\n        prod2 = nums2[-1] * nums2[-2]\n        \n        # Add the product to the result list\n        result.append(prod1)\n        result.append(prod2)\n    \n    return result",
        "test": "assert large_product([1,2,3,4,5], [6,7,8,9,10], 4) == [60,72,48,30]",
        "num_ids": 740
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function finds the maximum of two numbers using the if-else statement.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(5,10) == 10, \"maximum(5,10) should return 10\"",
        "num_ids": 279
    },
    {
        "number": 310,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple and return it\n    return tuple(lst)",
        "test": "assert string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 246
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 1\n    while mask & n == 0:\n        mask <<= 1\n    return mask",
        "test": "assert set_left_most_unset_bit(1) == 1",
        "num_ids": 410
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume of the cone using formula V=1/3*pi*(r^2*h)\n    V = (1/3)*math.pi*(r**2*h)\n    return V",
        "test": "assert volume_cone(5,6) == 343.75, \"The volume of a cone with radius 5 and height 6 is not correct.\"",
        "num_ids": 278
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 that is less than or equal to n to n itself\n    highest_pow_2 = n\n    \n    # Loop from 1 to the square root of n\n    for i in range(1, int(n**0.5)+1):\n        # If the square root of n is a whole number, then n is a power of 2\n        if i == int(n**0.5):\n            break\n        # If the square root of n is a whole number, check if it is less than or equal to n\n        if i**2 <= n:\n            # If it is, update the highest power of 2 that is less than or equal to n to the current power of 2\n            highest_pow_2 = i**2\n    \n    # Return the highest power of 2 that is less than or equal to n\n    return highest_pow_2",
        "test": "assert highest_Power_of_2(10) == 4",
        "num_ids": 588
    },
    {
        "number": 389,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Find the nth lucas number.\n    \"\"\"\n    a, b = 2, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a",
        "test": "assert find_lucas(0) == 2, \"The lucas number of 0th term is not 2.\"",
        "num_ids": 373
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]",
        "test": "assert add_string(['apple', 'banana', 'cherry'], 'I have {}.') == ['I have apple.', 'I have banana.', 'I have cherry.']",
        "num_ids": 370
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1 (list): A list of dictionaries.\n    l2 (list): A list of tuples.\n    l3 (list): A list of strings.\n\n    Returns:\n    dict: A dictionary where the keys are the elements of l1, l2, and l3, and the values are lists of their corresponding elements.\n    '''\n    d = {}\n\n    # Iterate through each list in turn\n    for lst in [l1, l2, l3]:\n        # Iterate through each element in the list\n        for i in range(len(lst)):\n            # If the element is a dictionary, add its key-value pairs to the dictionary\n            if isinstance(lst[i], dict):\n                for key, value in lst[i].items():\n                    if key in d:\n                        d[key].append(value)\n                    else:\n                        d[key] = [value]\n            # If the element is a tuple, add its elements to the dictionary\n            elif isinstance(lst[i], tuple):\n                if lst[i] in d:\n                    d[lst[i]].append(lst[i+1])\n                else:\n                    d[lst[i]] = [lst[i+1]]\n            # If the element is a string, add it to the dictionary as a key with an empty list as its value\n            else:\n                if lst[i] in d:\n                    d[lst[i]].append('')\n                else:\n                    d[lst[i]] = ['']\n\n    # Return the dictionary\n    return d",
        "test": "assert convert_list_dictionary([],[],[]) == {}",
        "num_ids": 941
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case: if n is 1, the maximum sum is 1\n    if n == 1:\n        return 1\n\n    # Recursive case: calculate the maximum sum possible using the given equation\n    max_sum = max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\n    return max_sum",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 540
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 404
    },
    {
        "number": 394,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True",
        "test": "assert check_distinct((1,2,3)) == True",
        "num_ids": 278
    },
    {
        "number": 395,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char",
        "test": "assert first_non_repeating_character(\"abcbde\") == \"a\"",
        "num_ids": 429
    },
    {
        "number": 396,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    This function takes a string as input and returns True if it starts and ends with the same character, False otherwise.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_char(\"a\") == True, \"check_char('a') should return True\"",
        "num_ids": 332
    },
    {
        "number": 397,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        return numbers[mid]",
        "test": "assert median_numbers(2, 3, 1) == 2",
        "num_ids": 431
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total += digit_sum\n    return total",
        "test": "assert sum_of_digits([123]) == 6",
        "num_ids": 486
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result",
        "test": "assert bitwise_xor((1, 2, 3), (4, 5, 6))!= (5, 6, 7)",
        "num_ids": 476
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n\n    freq_dict = {}  # create an empty dictionary to store unique tuples and their frequencies\n\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1  # increment the frequency of each unique tuple\n        else:\n            freq_dict[item] = 1  # initialize the frequency of each unique tuple to 1\n\n    unique_freq_tuples = []\n    for key, value in freq_dict.items():\n        unique_freq_tuples.append((key, value))\n\n    return len(unique_freq_tuples)",
        "test": "assert extract_freq([1,2,3,4,5]) == 5",
        "num_ids": 519
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    return result",
        "test": "assert add_nested_tuples((1, (2, (3, (4, (5, 6))))), (7, (8, (9, (10, (11, 12)))))) == ((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))",
        "num_ids": 524
    },
    {
        "number": 404,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of those numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(5, 10) == 5, \"The function should return the minimum value between 5 and 10.\"",
        "num_ids": 223
    },
    {
        "number": 405,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False",
        "test": "assert check_tuplex(('a','b','c'),('b','c')) == True, 'The function should return True'",
        "num_ids": 260
    },
    {
        "number": 406,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        print(str(x) + \" is even.\")\n        return False\n    else:\n        print(str(x) + \" is odd.\")\n        return True",
        "test": "assert find_Parity(5) == True, \"find_Parity(5) should return True\"",
        "num_ids": 326
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    max_digit = max(digits)\n    index = digits.index(max_digit)\n\n    for i in range(max_digit, 9):\n        if digits[index] < i:\n            digits[index] = i\n            break\n\n    result = int(''.join(digits))\n    return result",
        "test": "assert rearrange_bigger(111) == 111",
        "num_ids": 1069
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs\n    pairs = []\n    heapq.heapify(pairs)\n\n    # Iterate over both arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # If the current pair is smaller than k, add it to the heap\n            if len(pairs) < k:\n                heapq.heappush(pairs, (min(num1, num2), (num1, num2)))\n            # Otherwise, if the current pair is larger than k, remove the smallest pair from the heap\n            else:\n                if min(heapq.heappop(pairs)[1]) > max(num1, num2):\n                    heapq.heappush(pairs, (min(num1, num2), (num1, num2)))\n\n    # Extract the k smallest pairs and return as a list of tuples\n    return [pair[1] for pair in heapq.nsmallest(k, pairs)]",
        "test": "assert k_smallest_pairs([], [], 0) == []",
        "num_ids": 968
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Find the minimum product of a pair of tuples in a given list.\n\n    Args:\n    - list1: A list of tuples.\n\n    Returns:\n    - The minimum product of a pair of tuples in the list, or None if there are not enough pairs.\n    \"\"\"\n    # Sort the list by the first element of each tuple\n    list1.sort(key=lambda x: x[0])\n\n    # Initialize variables for the minimum product and the number of pairs\n    min_product = float('inf')\n    count = 0\n\n    # Iterate over the sorted list of tuples\n    for i in range(len(list1) - 1):\n        # Calculate the product of the current pair of tuples\n        product = list1[i][0] * list1[i+1][0]\n\n        # Update the minimum product if the current product is smaller\n        if product < min_product:\n            min_product = product\n            count = 1\n        # Update the count if the current product is the same as the minimum product\n        elif product == min_product:\n            count += 1\n\n    # Return None if there are not enough pairs\n    if count < 2:\n        return None\n\n    # Return the minimum product\n    return min_product",
        "test": "assert min_product_tuple([((1, 2), (3, 4)), ((5, 6), (7, 8)), ((9, 10), (11, 12)), ((13, 14), (15, 16))]) == (4720, (3, 4))",
        "num_ids": 764
    },
    {
        "number": 410,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val",
        "test": "assert min_val([1,2,3,4,5]) == 1",
        "num_ids": 388
    },
    {
        "number": 411,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.)', lambda x: x.group(1).upper(), word)",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 469
    },
    {
        "number": 412,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 267
    },
    {
        "number": 413,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and returns the nth element from that list.\n    '''\n    return list1[n-1]",
        "test": "assert extract_nth_element([('apple', 1), ('banana', 2), ('cherry', 3), ('date', 4), ('elderberry', 5)], 2) == ('banana', 2)",
        "num_ids": 449
    },
    {
        "number": 414,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns True if any value in the first sequence exists in the second sequence,\n    and returns False otherwise.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3,4,5], [2,3,4,5,6]) == True",
        "num_ids": 385
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max_product = float('-inf')\n    current_product = 1\n    max_product_pair = None\n    current_pair = None\n    \n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n            max_product_pair = (arr[i],)\n        elif current_product == max_product:\n            max_product_pair = max_product_pair + (arr[i],)\n        \n        if i < len(arr) - 1:\n            current_product //= arr[i+1]\n            if current_product > max_product:\n                max_product = current_product\n                max_product_pair = (arr[i], arr[i+1])\n            elif current_product == max_product:\n                max_product_pair = max_product_pair + (arr[i], arr[i+1])\n    \n    if max_product_pair is None:\n        return None\n    \n    return max_product_pair",
        "test": "assert max_Product([1, 5, 2, 4, 3]) == (1, 3), \"Wrong output: max_Product([1, 5, 2, 4, 3]) should return (1, 3)\"",
        "num_ids": 811
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty dictionary to store common elements as keys and their indices as values\n    common_elements = {}\n    \n    # iterate over the input list of tuples\n    for i in range(len(Input)): \n        # get the first element of the current tuple\n        current_element = Input[i][0]\n        \n        # if the current element is not in the common_elements dictionary, add it with a value of 0\n        if current_element not in common_elements: \n            common_elements[current_element] = 0\n        \n        # increment the value of the current element in the common_elements dictionary\n        common_elements[current_element] += 1\n    \n    # find the common element with the maximum occurrences in the input list of tuples\n    max_occurrences = max(common_elements.values())\n    common_element = None\n    \n    # iterate over the common_elements dictionary to find the common element with the maximum occurrences\n    for key, value in common_elements.items(): \n        if value == max_occurrences: \n            common_element = key\n            break\n    \n    # return the common element with the maximum occurrences\n    return common_element",
        "test": "assert group_tuples([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)]) == [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)]",
        "num_ids": 904
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element with the maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem",
        "test": "assert Find_Max(['apple', 'banana', 'cherry', 'date']) == 'banana'",
        "num_ids": 434
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    total_sum = total * len(list1)\n    print(total_sum)\n",
        "test": "assert round_and_sum([-1.5, -2.5, -3.5]) == -35",
        "num_ids": 423
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of the cubes of the first n even natural numbers.\n    '''\n    # initialize sum and count to zero\n    sum = 0\n    count = 0\n\n    # iterate through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the cube of the number\n        cube = i ** 3\n\n        # add the cube to the sum\n        sum += cube\n\n        # increment the count\n        count += 1\n\n    # return the sum of the cubes\n    return sum",
        "test": "assert cube_Sum(5) == 200, \"cube_Sum(5) should be 200.\"",
        "num_ids": 402
    },
    {
        "number": 421,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Create an empty string to hold the concatenated elements\n    concatenated_str = \"\"\n    \n    # Loop through each element of the tuple\n    for element in test_tup:\n        # Append the element to the concatenated string\n        concatenated_str += str(element)\n    \n    # Return the concatenated string\n    return concatenated_str",
        "test": "assert concatenate_tuple(('apple', 'banana', 'cherry')) == 'applebananacherry'",
        "num_ids": 332
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n",
        "test": "assert find_Average_Of_Cube(10) == 20.67, \"The function should return 20.67 for n=10\"",
        "num_ids": 395
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, item in enumerate(test_tuple):\n        if isinstance(item, str):\n            rear_indices.append(len(item) - 1)\n    return rear_indices",
        "test": "assert extract_rear(('a', 'b', 'c', 'd', 'e')) == 'e'",
        "num_ids": 349
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function takes a list and a particular element as input and returns the number of sublists that contain that element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 10) == 0",
        "num_ids": 433
    },
    {
        "number": 426,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 362
    },
    {
        "number": 427,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)",
        "test": "assert change_date_format('2022-01-01') == '01-01-2022'",
        "num_ids": 620
    },
    {
        "number": 428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n // 3:\n        h = h * 3 + 1\n    \n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j - h] > temp:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = temp\n        h = h // 3",
        "test": "assert shell_sort([5, 3, 8, 1, 9]) == [1, 3, 5, 8, 9]",
        "num_ids": 640
    },
    {
        "number": 429,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Loop through the two tuples and create a new tuple with the elementwise and values\n    and_tup = tuple([x and y for x, y in zip(test_tup1, test_tup2)])\n    return and_tup",
        "test": "assert and_tuples((1,2,3), (4,5,6)) == (4, 5, 6)",
        "num_ids": 504
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Using the quadratic formula to find the directrix\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n\n    return x1, x2",
        "test": "assert parabola_directrix(0, 1, 4) == 2",
        "num_ids": 658
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == False",
        "num_ids": 436
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the length of the base of the trapezium\n    base = 0.5 * (base1 + base2)\n    \n    # Calculate the length of the top of the trapezium\n    top = 0.5 * (height + base1 + base2)\n    \n    # Calculate the length of the bottom of the trapezium\n    bottom = 0.5 * height\n    \n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n    \n    # Calculate the diagonal of the trapezium\n    diagonal = (base1**2 + base2**2 + height**2)**0.5\n    \n    # Calculate the perpendicular distance from the center of the base to the perimeter\n    perpendicular_distance = 0.5 * (diagonal - perimeter)\n    \n    # Calculate the length of the base of the trapezium that corresponds to the perpendicular distance\n    base_of_trapezium = 0.5 * (perpendicular_distance + base)\n    \n    # Calculate the length of the top of the trapezium that corresponds to the perpendicular distance\n    top_of_trapezium = 0.5 * (perpendicular_distance + height + base1 + base2)\n    \n    # Calculate the length of the bottom of the trapezium that corresponds to the perpendicular distance\n    bottom_of_trapezium = 0.5 * (perpendicular_distance + height)\n    \n    # Calculate the length of the area of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium = 0.5 * perpendicular_distance**2\n    \n    # Calculate the length of the diagonal of the trapezium that corresponds to the perpendicular distance\n    diagonal_of_trapezium = perpendicular_distance\n    \n    # Calculate the length of the diagonal of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_half = 0.5 * area_of_trapezium\n    \n    # Calculate the length of the diagonal of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_half_plus_one = area_of_trapezium_half + 1\n    \n    # Calculate the area of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_half_plus_one_plus_one = area_of_trapezium_half_plus_one + area_of_trapezium_half\n    \n    # Calculate the length of the area of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_plus_perpendicular_distance = area_of_trapezium_half_plus_one_plus_one + perpendicular_distance\n    \n    # Calculate the length of the area of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_plus_perpendicular_distance_plus_one = area_of_trapezium_plus_perpendicular_distance + 1\n    \n    # Calculate the area of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_plus_perpendicular_distance_plus_one_plus_one = area_of_trapezium_plus_perpendicular_distance_plus_one + area_of_trapezium_plus_perpendicular_distance\n    \n    # Calculate the length of the area of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_plus_perpendicular_distance_plus_one_plus_one_plus_one = area_of_trapezium_plus_perpendicular_distance_plus_one_plus_one + 1\n    \n    # Calculate the area of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_plus_perpendicular_distance_plus_one_plus_one_plus_one_plus_one = area_of_trapezium_plus_perpendicular_distance_plus_one_plus_one_plus_one + area",
        "test": "assert median_trapezium(2,3,4) == 3",
        "num_ids": 1373
    },
    {
        "number": 433,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Loop through the array and check if each element is greater than the entered number\n    for element in arr:\n        if element > number:\n            return True\n    # If no elements were greater than the number, return False\n    return False",
        "test": "assert check_greater([3, 1, 4, 1, 5], 2) == True",
        "num_ids": 375
    },
    {
        "number": 434,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one('aabab') == True",
        "num_ids": 233
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 230
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst",
        "test": "assert neg_nos([]) == []",
        "num_ids": 315
    },
    {
        "number": 437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to hold the even characters\n    even_chars = \"\"\n    \n    # iterate through each character in the string\n    for char in str1:\n        # if the character is odd, add it to the even_chars string\n        if char % 2 == 1:\n            even_chars += char\n    \n    # return the even_chars string as the output\n    return even_chars",
        "test": "assert remove_odd('hello world') == 'helo wrld'",
        "num_ids": 293
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[j][0]) in test_list or (test_list[i][0], test_list[j][1]) in test_list:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(1,2),(2,3),(3,4),(4,5),(5,6)]) == 3",
        "num_ids": 471
    },
    {
        "number": 439,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    single_int = 1\n    for num in L:\n        single_int *= num\n    return single_int",
        "test": "assert multiple_to_single([1, 2, 3]) == 6",
        "num_ids": 285
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(adverb)\\b'\n    \n    # Find all non-overlapping occurrences of adverbs in the text\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n    \n    # If there are no adverbs in the text, return None\n    if not matches:\n        return None\n    \n    # Sort the matches by their starting position in the text\n    matches.sort(key=lambda match: text.find(match))\n    \n    # Find the first adverb and its starting position\n    adverb = matches[0]\n    start_pos = text.find(adverb)\n    \n    # Find the last adverb and its ending position\n    end_pos = start_pos + len(adverb)\n    last_match = matches[-1]\n    last_end_pos = text.find(last_match)\n    \n    # Return a tuple of the first adverb and its positions\n    return (adverb, (start_pos, end_pos), (last_match, last_end_pos))",
        "test": "assert find_adverb_position('The quick brown fox jumps over the lazy dog.') == [('over', 14), ('lazy', 24)]",
        "num_ids": 749
    },
    {
        "number": 441,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l * l\n    return surface_area",
        "test": "assert surfacearea_cube(1) == 6, \"surfacearea_cube(1) should return 6\"",
        "num_ids": 335
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    negatives = 0\n    zeros = 0\n\n    for num in nums:\n        if num > 0:\n            positives += 1\n        elif num == 0:\n            zeros += 1\n        else:\n            negatives += 1\n\n    pos_ratio = positives / (positives + negatives + zeros)\n    return pos_ratio",
        "test": "assert positive_count([-1, -2, -3, -4, -5]) == 0.0",
        "num_ids": 535
    },
    {
        "number": 443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg",
        "test": "assert largest_neg([1, 2, 3, -4, 5, -10, -5, -3]) == -4",
        "num_ids": 350
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + test_list[i][K:])\n    return test_list",
        "test": "assert trim_tuple([(1,2,3,4),(5,6,7,8)], 2) == [(3,4), (7,8)]",
        "num_ids": 640
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 408
    },
    {
        "number": 446,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input. \n    The function counts the frequency of each element of the list in the tuple and returns the result as a dictionary.\n    '''\n    freq = Counter(lst)\n    return freq",
        "test": "assert count_Occurrence((1,2,3,4,5), [1,2,3,4,5]) == {1:1, 2:1, 3:1, 4:1, 5:1}",
        "num_ids": 572
    },
    {
        "number": 447,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n\n    # Loop through each element in the list and calculate its cube\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 412
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum",
        "test": "assert cal_sum(1) == 1",
        "num_ids": 1239
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n    str_list: list of strings\n    size: size of the desired string\n\n    Returns:\n    list of strings of size'size'\n    '''\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result",
        "test": "assert extract_string(['hello', 'world'], 5) == ['hello', 'world']",
        "num_ids": 368
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub('\\s+','', text).strip()",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"",
        "num_ids": 242
    },
    {
        "number": 452,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(7000,8000) == 0 # No Loss",
        "num_ids": 360
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum",
        "test": "assert sumofFactors(10) == 2, \"sumofFactors(10) should return 2, but it returns {}\".format(sumofFactors(10))",
        "num_ids": 430
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+\\b'  # matches a word containing at least one letter\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_match_wordz('The quick brown fox jumps over the lazy dogs') == 'lazy'",
        "num_ids": 381
    },
    {
        "number": 455,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        print('Invalid month number')\n        return None",
        "test": "assert check_monthnumb_number(3) == True, \"check_monthnumb_number(3) should return True.\"",
        "num_ids": 608
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list([\"hello\", \"world\"]) == [\"olleh\", \"dlrow\"]",
        "num_ids": 310
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list as input and returns the sublist with minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = []\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_sublist = i\n    return min_sublist",
        "test": "assert Find_Min([]) == [], \"Find_Min([]) should return []\"",
        "num_ids": 392
    },
    {
        "number": 458,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(2,3) == 6 # correct test case for rectangle_area function",
        "num_ids": 201
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+') # regex pattern to match uppercase substrings\n    return pattern.sub('', string) # replace all matches with an empty string",
        "test": "assert remove_uppercase(\"hello world\") == \"hello world\"",
        "num_ids": 316
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n\n    # creating a new list to store the sublist elements\n    result = []\n\n    # iterating through each sublist in the original list\n    for i in lst:\n        # appending the first element of each sublist to the new list\n        result.append(i[0])\n\n    # returning the new list with the first element of each sublist\n    return result",
        "test": "assert Extract([[1, 2], [3, 4, 5], [[6, 7], 8, 9]]) == [1, 3, 6, 7, 8, 9]",
        "num_ids": 431
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"The quick brown fox jumps over the lazy dog\") == 23",
        "num_ids": 301
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize an empty list to store the combinations\n    combinations = []\n    \n    # Iterate over the list and for each element, generate all possible combinations\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    \n    # Return the list of combinations\n    return combinations",
        "test": "assert combinations_list(['a', 'b', 'c', 'd']) == [('a',), ('b',), ('c',), ('d',)]",
        "num_ids": 440
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "test": "assert max_subarray_product([1, 2, -3, 4, -5]) == 120",
        "num_ids": 569
    },
    {
        "number": 464,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    for i in dict:\n        if not all(x == dict[i] for x in dict[i][:n]):\n            return False\n    return True",
        "test": "assert check_value({'a': 1, 'b': 2, 'c': 3}, 2) == False, \"The function should return False if there are any different values in the dictionary.\"",
        "num_ids": 515
    },
    {
        "number": 465,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict",
        "test": "assert drop_empty({'a': 'apple', 'b': '', 'c': 'banana'}) == {'a': 'apple', 'c': 'banana'}",
        "num_ids": 326
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far",
        "test": "assert max_product([2,3,-2,-3]) == 6",
        "num_ids": 931
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    size = len(test_tup)\n    add_list = []\n    for i in range(1, size):\n        add_list.append(test_tup[i] + test_tup[i-1])\n    return add_list",
        "test": "assert add_pairwise((1,2,3,4,5,6)) == 18",
        "num_ids": 365
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number n as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product",
        "test": "assert find_remainder([1, 2, 3], 3) == 0",
        "num_ids": 406
    },
    {
        "number": 472,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 3:\n        return False\n    \n    if l[0]!= l[1]:\n        return False\n    \n    for i in range(1, len(l)-1):\n        if l[i]!= l[i-1]+1:\n            return False\n    \n    if l[-1]!= l[-2]:\n        return False\n    \n    return True",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == False",
        "num_ids": 487
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty list to store the intersection of the given tuples\n    result = []\n    # Loop through both the tuple lists\n    for tup1 in test_list1:\n        # Loop through the second tuple list and check if each tuple in the first tuple list is present in the second tuple list\n        for tup2 in test_list2:\n            # If the tuple is present in the second tuple list, add it to the result list\n            if tup1 == tup2:\n                result.append(tup1)\n                break\n    # Return the result list\n    return result",
        "test": "assert tuple_intersection([(1, 2, 3), (2, 3, 4)], [(2, 3, 4), (4, 5)]) == [(2, 3, 4)]",
        "num_ids": 698
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string with the old character replaced with the new character\n    str2 = str1.replace(ch, newch)\n    return str2",
        "test": "assert replace_char(\"hello\", \"l\", \"m\") == \"hemmo\"",
        "num_ids": 243
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    \n    # Sort the Counter object based on value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n    # Create a new dictionary from the sorted Counter object\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict",
        "test": "assert sort_counter(Counter({'apple': 2, 'banana': 3, 'orange': 1})) == ['banana', 'apple', 'orange']",
        "num_ids": 351
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest",
        "test": "assert big_sum([-1, -2, -3, -4, -5]) == -5, \"big_sum([-1, -2, -3, -4, -5]) should return -5\"",
        "num_ids": 432
    },
    {
        "number": 477,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"Python\") == \"python\"",
        "num_ids": 196
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define the pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # Use the search() method to find all matches of the pattern in the string\n    matches = pattern.findall(str1)\n    # Remove all lowercase matches from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    return str1",
        "test": "assert remove_lowercase(\"Hello, World!\") == \"Hello, World!\"",
        "num_ids": 344
    },
    {
        "number": 479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return n // 10",
        "test": "assert first_Digit(1000) == 1",
        "num_ids": 179
    },
    {
        "number": 554,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "test": "assert Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]",
        "num_ids": 360
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initializing variables\n    sum_cubes = 0\n    sum_numbers = 0\n    \n    # Calculating the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # Calculating the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_numbers += i\n        \n    # Returning the difference between the two sums\n    return abs(sum_cubes - sum_numbers)",
        "test": "assert difference(2) == 5, \"The sum of cubes of the first 2 natural numbers is 27, but the function returns {}\".format(difference(2))",
        "num_ids": 522
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,2,3,4,5], 6) == 1",
        "num_ids": 527
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)",
        "test": "assert toggle_string(\"Hello, World!\") == \"hELLO, wORLD!\"",
        "num_ids": 315
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(len(str(n1))):\n        digit_sum = abs(n1 % 10 - n2 % 10)\n        sum += digit_sum\n        n1 //= 10\n        n2 //= 10\n    return sum",
        "test": "assert digit_distance_nums(12345, 67890) == 31457, \"The result should be 31457, but it's not.\"",
        "num_ids": 445
    },
    {
        "number": 559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize the maximum subarray sum and its starting index\n    max_sum = float('-inf')\n    start = 0\n\n    # Iterate through the list starting from the beginning and calculate the sum of each subarray\n    for i in range(size):\n        # Calculate the sum of the current subarray\n        current_sum = sum(a[start:i+1])\n\n        # Update the maximum sum and its starting index if necessary\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n    # Return the maximum sum and its starting index\n    return max_sum, start",
        "test": "assert max_sub_array_sum([1, 2, 3, 4, 5], 3) == 9, \"Function max_sub_array_sum failed for the given input.\"",
        "num_ids": 698
    },
    {
        "number": 560,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # initialize an empty set to store the unique elements\n    union_set = set()\n    # add the elements of both tuples to the set\n    union_set.update(test_tup1)\n    union_set.update(test_tup2)\n    # convert the set to a list and sort it\n    sorted_union_list = sorted(list(union_set))\n    # return the sorted list\n    return sorted_union_list",
        "test": "assert union_elements((2, 5, 7), (3, 8, 9)) == [2, 3, 5, 7, 8, 9]",
        "num_ids": 648
    },
    {
        "number": 562,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n\n    return max_len",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 464
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values(\"This is a sample sentence. 'This' is a value. 'is' is another value. 'a' is a third value.\") == ['This', 'is', 'a','sample','sentence.']",
        "num_ids": 300
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 2 # 2 pairs of unequal elements are present in the given list.",
        "num_ids": 317
    },
    {
        "number": 565,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 254
    },
    {
        "number": 566,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    sum_digits = 0\n    # Convert the input integer to a string\n    input_str = str(n)\n    # Loop through each character in the string\n    for char in input_str:\n        # Convert the character to an integer and add it to the sum of digits\n        sum_digits += int(char)\n    # Return the sum of digits\n    return sum_digits",
        "test": "assert sum_digits(123) == 6, \"The sum of the digits of 123 is 6.\"",
        "num_ids": 476
    },
    {
        "number": 567,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True, \"Failed test for issort_list([1, 2, 3, 4, 5])\"",
        "num_ids": 436
    },
    {
        "number": 568,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 150
    },
    {
        "number": 569,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_sublists(list1):\n    for i, sublist in enumerate(list1):\n        sublist.sort()\n    return list1",
        "test": "assert sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]) == [['a', 'b', 'c'], ['d', 'e', 'f']]",
        "num_ids": 461
    },
    {
        "number": 572,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of numbers.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 474
    },
    {
        "number": 573,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product",
        "test": "assert unique_product([1,2,3,4,5]) == 120, \"Test 1 failed\"",
        "num_ids": 482
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * h\n    return surface_area",
        "test": "assert surfacearea_cylinder(1,2) == 31.428571428571426",
        "num_ids": 566
    },
    {
        "number": 576,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False \n    for i in range(len(A)): \n        if A[i] not in B: \n            return False \n    return True",
        "test": "assert is_Sub_Array([1,2,3,4,5], [4,5,6]) == False, \"Test 2 failed\"",
        "num_ids": 512
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert n to a string\n    n_str = str(n)\n\n    # Get the last digit of the string\n    last_digit = int(n_str[-1])\n\n    # Find factorial of the number\n    factorial = 1\n    for i in range(2, last_digit + 1):\n        factorial *= i\n\n    # Return the last digit of the factorial\n    return last_digit",
        "test": "assert last_Digit_Factorial(5) == 5",
        "num_ids": 465
    },
    {
        "number": 578,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 597
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Initializing an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterating through the two tuples\n    for element1, element2 in zip(test_tup1, test_tup2):\n        # Checking if the element is in the first tuple\n        if element1 not in test_tup2:\n            dissimilar_list.append(element1)\n\n    return dissimilar_list",
        "test": "assert find_dissimilar(('apple', 'banana', 'orange'), ('banana', 'cherry', 'orange')) == ('apple',)",
        "num_ids": 536
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_fnc(item))\n        else:\n            even_list.append(even_fnc(item))\n    return tuple(even_list)",
        "test": "assert even_ele(([1, (2, (3, 4)), 5], [6, 7, 8], [9, 10]), lambda x: x%2 == 0) == ([6, 7, 8], [9, 10])",
        "num_ids": 766
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating the surface area of the square pyramid\n    surface_area = 6 * b * s\n    \n    # Returning the surface area of the square pyramid\n    return surface_area",
        "test": "assert surface_Area(6, 10) == 360, \"Error in surface_Area(6, 10)\"",
        "num_ids": 492
    },
    {
        "number": 582,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 257
    },
    {
        "number": 583,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    catalan = [0, 1]\n    for i in range(2, n+1):\n        catalan.append(catalan[i-1] + catalan[i-2])\n    return catalan[n]",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 442
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for adverbs ending with ly\n    pattern = re.compile(r'(?<![a-z])(ly|lys|lis|lis[aeiou]|lis?[aeiou])(?![a-z])', re.IGNORECASE)\n    # Find all occurrences of the pattern in the text\n    matches = pattern.finditer(text)\n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n    # Loop through all matches and add their positions to the list\n    for match in matches:\n        adverb_positions.append(match.start())\n    return adverb_positions",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == [(4, 10, 13)]",
        "num_ids": 670
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the dataset\n    for item in items:\n        # Add the item to the min-heap if it's the minimum price\n        if not min_heap or item[1] < min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n        # Remove the minimum item from the heap if the heap is full\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items\n    return min_heap",
        "test": "assert expensive_items([10, 20, 30, 40, 50], 3) == [50, 40, 30]",
        "num_ids": 628
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list into two parts\n    first_part = l[:n]\n    second_part = l[n:]\n    # Add the first part to the end of the second part\n    final_list = second_part + first_part\n    return final_list",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 3) == [4, 5, 1, 2, 3]",
        "num_ids": 528
    },
    {
        "number": 587,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)",
        "test": "assert list_tuple([]) == ()",
        "num_ids": 212
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return abs(max_num - min_num)",
        "test": "assert big_diff([2, 4, 6, 8, 10]) == 8",
        "num_ids": 370
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i**2 == i and i**2 > 0:\n            result.append(i)\n    return result",
        "test": "assert perfect_squares(5, 20) == [5, 12, 25]",
        "num_ids": 373
    },
    {
        "number": 590,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # convert polar coordinates to Cartesian coordinates\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.phase(x+y*1j)\n    # convert Cartesian coordinates to rectangular coordinates\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect",
        "test": "assert polar_rect(2, 3) == (2, 3)",
        "num_ids": 394
    },
    {
        "number": 591,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 418
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if k > n-k:\n        return 0\n\n    if k == 0 or k == n:\n        return 1\n\n    coeff = 1\n    for i in range(1, k+1):\n        coeff = coeff * (n-i+1) // i\n\n    return coeff",
        "test": "assert binomial_Coeff(0,0) == 1",
        "num_ids": 382
    },
    {
        "number": 593,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from the ip address\n    ip = re.sub('^0+(?=\\d)', '', ip)\n    return ip",
        "test": "assert removezero_ip('192.168.0.1') == '192.168.0.1'",
        "num_ids": 407
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - num\n        elif num % 2!= 0:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num - num\n\n    if even_num is None or odd_num is None:\n        return 'No even or odd numbers found in the list.'\n    else:\n        return even_num - odd_num",
        "test": "assert diff_even_odd([1,2,3,4,5]) == 3, \"Test failed\"",
        "num_ids": 704
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_Swaps(str1, str2):\n    # create a dictionary to store the frequency of each character in str1\n    freq1 = {}\n    for char in str1:\n        if char in freq1:\n            freq1[char] += 1\n        else:\n            freq1[char] = 1\n\n    # create a dictionary to store the frequency of each character in str2\n    freq2 = {}\n    for char in str2:\n        if char in freq2:\n            freq2[char] += 1\n        else:\n            freq2[char] = 1\n\n    # calculate the number of common characters between the two strings\n    common_chars = sum([freq1[char] for char in freq1 if char in freq2])\n\n    # calculate the minimum number of swaps required to convert the two strings\n    min_swaps = 0\n    for char in freq1:\n        if freq1[char]!= freq2[char]:\n            min_swaps += abs(freq1[char] - freq2[char])\n\n    return min_swaps",
        "test": "assert min_Swaps(\"1010\", \"1101\") == 2 # 2 swaps are required to convert the first binary number to the second binary number.",
        "num_ids": 1022
    },
    {
        "number": 596,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size",
        "test": "assert tuple_size(tuple()) == 0",
        "num_ids": 327
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    \n    # If one array is exhausted\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]",
        "test": "assert find_kth([1,3,5,7,9], [2,4,6,8,10], 8) == 10",
        "num_ids": 721
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Initialize the sum of the digits of the number\n    digit_sum = 0\n\n    # Get the digits of the number and calculate the sum of their squares\n    while number > 0:\n        digit = number % 10\n        digit_sum += digit ** 3\n        number //= 10\n\n    # Check if the sum of the digits of the number is equal to the number itself\n    if digit_sum == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == False",
        "num_ids": 405
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 322
    },
    {
        "number": 600,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(4) == True",
        "num_ids": 209
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    return None",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 433
    },
    {
        "number": 603,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            ludic_numbers.append(i)\n        elif i == 2:\n            ludic_numbers.append(i)\n        else:\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    break\n            else:\n                ludic_numbers.append(i)\n    return ludic_numbers",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 529
    },
    {
        "number": 604,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def reverse_words(s):\n    # split the string into words\n    words = s.split()\n    # reverse each word and join them with a space\n    return \" \".join(words[::-1])",
        "test": "assert reverse_words(\"hello world\") == \"world hello\"",
        "num_ids": 222
    },
    {
        "number": 605,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        return True\n    else:\n        return False",
        "test": "assert prime_num(2) == True, \"Should return True for 2\"",
        "num_ids": 279
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180",
        "test": "assert radian_degree(0) == 0.0",
        "num_ids": 249
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use a regex pattern to find all literals in the text\n    literals = re.findall(pattern, text)\n    \n    # If no literals are found, return an empty list\n    if not literals:\n        return []\n    \n    # Loop through each literal and return the matching subtring, a start index, and an end index\n    results = []\n    for literal in literals:\n        start_index = text.find(literal)\n        end_index = start_index + len(literal)\n        results.append([literal, start_index, end_index])\n    \n    return results",
        "test": "assert find_literals('orange and apple', r'\\b[a-z]+\\b') == ('apple', 10, 15)",
        "num_ids": 707
    },
    {
        "number": 608,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (pow(5, n) // (factorial(n) * 4))\n\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "test": "assert bell_Number(1) == 1, \"bell_Number(1) should be 1.\"",
        "num_ids": 449
    },
    {
        "number": 610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    # Loop through the list\n    for i in range(L):\n        # If the current index is equal to the k'th element, move on to the next index\n        if i == L - 1:\n            del list1[i]\n        # If the current index is not equal to the k'th element, move on to the next index\n        else:\n            list1[i], list1[L - 1] = list1[L - 1], list1[i]\n\n    # Return the modified list\n    return list1",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5]",
        "num_ids": 573
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # initialize max_col to be the value of the first column\n    max_col = test_list[0][N-1]\n\n    # loop through each row of the matrix\n    for row in test_list:\n        # if the value of then'th column in this row is greater than max_col, update max_col\n        if row[N-1] > max_col:\n            max_col = row[N-1]\n\n    return max_col",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6]], 2) == 5",
        "num_ids": 585
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def merge(lst):\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 374
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = []\n    for i in range(len(test_list)):\n        if i == 0:\n            cumulative_sum.append(test_list[i][0])\n        else:\n            cumulative_sum.append(cumulative_sum[i-1] + test_list[i][0])\n    return cumulative_sum",
        "test": "assert cummulative_sum([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 45",
        "num_ids": 565
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        count = 0\n        for sub_num in num:\n            sum += sub_num\n            count += 1\n        if count > 0:\n            result.append(sum / count)\n        else:\n            result.append(None)\n    return result",
        "test": "assert average_tuple([(7, 8), (9, 10)]) == [8.5, 9.5]",
        "num_ids": 483
    },
    {
        "number": 616,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "test": "assert tuple_modulo((1,2,3),(4,5,6)) == (1,2,3)",
        "num_ids": 455
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d): \n    # Convert the steps and d to integers\n    steps = int(steps)\n    d = int(d)\n    \n    # Initialize variables for step count, number of jumps, and current position\n    step_count = 0\n    num_jumps = 0\n    position = 0\n    \n    # Loop until we reach the target point\n    while position < steps:\n        # Move in the direction of the current position\n        if position < d:\n            position += 1\n        else:\n            position += 2\n        \n        # Increment step count\n        step_count += 1\n        \n        # Check if we have reached the target point\n        if position == d:\n            num_jumps += 1\n    \n    # Return the number of jumps\n    return num_jumps",
        "test": "assert min_Jumps(4, 1) == 1",
        "num_ids": 504
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([1,2,3,4],[5,6,7,8]) == [0.0625, 0.125, 0.1875, 0.25]",
        "num_ids": 449
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = [char for char in test_str if char.isdigit()]\n    num_str = ''.join(num_list)\n    non_num_str = ''.join([char for char in test_str if not char.isdigit()])\n    return num_str + non_num_str",
        "test": "assert move_num(\"1234567890\") == \"0123456789\"",
        "num_ids": 465
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n\n    return max(dp)",
        "test": "assert largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4",
        "num_ids": 697
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    \n    # Find the middle element of the merged list\n    middle = n // 2\n    \n    # If the number of elements is odd, the median is the middle element\n    if n % 2 == 1:\n        median = merged_list[middle]\n    \n    # If the number of elements is even, the median is the average of the two middle elements\n    else:\n        median = (merged_list[middle-1] + merged_list[middle]) / 2\n        \n    return median",
        "test": "assert get_median([1, 3, 5, 7], [2, 4, 6, 8], 5) == 5",
        "num_ids": 968
    },
    {
        "number": 623,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result",
        "test": "assert nth_nums([1, 2, 3], 1) == [1, 2, 3]",
        "num_ids": 323
    },
    {
        "number": 624,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"hello world\") == \"HELLO WORLD\"",
        "num_ids": 159
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0] \n    last_element = newList[-1] \n    newList[0] = last_element \n    newList[-1] = first_element \n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5, 2, 3, 4, 1]",
        "num_ids": 472
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Find the semi-perimeter of the circle\n    semi_perimeter = 2 * math.pi * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the circle\n    area = math.sqrt(semi_perimeter * (semi_perimeter - 3 * math.sqrt(semi_perimeter)))\n\n    return area",
        "test": "assert triangle_area(2) == 5.209982986687554",
        "num_ids": 541
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    The function assumes that the input list is already sorted in ascending order.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] < mid:\n            start = mid + 1\n        elif array[mid] > mid:\n            end = mid - 1\n        else:\n            end = mid - 1\n    return start",
        "test": "assert find_First_Missing([3,6,9,12]) == 1",
        "num_ids": 459
    },
    {
        "number": 628,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 195
    },
    {
        "number": 629,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a list of even numbers from the input list.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 431
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adjacent = []\n\n    # iterate over all possible adjacent coordinates \n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue # skip self-loop\n\n            # add adjacent coordinates to a list \n            x_adj = x + i \n            y_adj = y + j\n            if x_adj < 0 or y_adj < 0 or x_adj >= len(sub) or y_adj >= len(sub[0]):\n                continue # skip out-of-bounds coordinates\n            adjacent.append((x_adj, y_adj))\n\n    return adjacent",
        "test": "assert adjac((1, 2), [(3, 2)]) == [(1, 1), (1, 3), (2, 1), (2, 3), (3, 2), (3, 3)]",
        "num_ids": 914
    },
    {
        "number": 631,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for char in text:\n        if char.isspace():\n            result += '_'\n        else:\n            result += char\n    return result",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 267
    },
    {
        "number": 632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of integers as input and moves all the zeroes to the end of the list.\n    '''\n    # Initialize two pointers, one for the beginning of the list and one for the end of the list\n    start = 0\n    end = len(num_list) - 1\n    \n    # Traverse the list starting from the beginning and move all the zeroes to the end of the list\n    while start < end:\n        if num_list[start] == 0:\n            # Move the current element to the next available position after the end of the list\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n            \n            # Move the end pointer to the previous position to start traversing the list again\n            end -= 1\n        else:\n            start += 1\n    \n    return num_list",
        "test": "assert move_zero([1, 0, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1547
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor",
        "test": "assert pair_xor_Sum([0,1,2,3,4], 5) == 4",
        "num_ids": 404
    },
    {
        "number": 635,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a max heap from the input list\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    # extract items from the heap in sorted order and return them as a list\n    return [hq.heappop(heap) for i in range(len(iterable))]",
        "test": "assert heap_sort([4, 6, 2, 8, 1, 5]) == [1, 2, 4, 5, 6, 8]",
        "num_ids": 573
    },
    {
        "number": 637,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # check whether profit and loss are 0\n    if profit == 0 and loss == 0:\n        print(\"The given amount has no profit and no loss.\")\n        return True\n    else:\n        print(\"The given amount does not have no profit and no loss.\")\n        return False",
        "test": "assert noprofit_noloss(100,20) == False, \"No profit and loss for cost 100 and sale amount 20\"",
        "num_ids": 448
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_chill = 13.12 + 0.6215 * v - 11.37 * math.log(t) + 0.3965 * t * (t - 273.15)\n    return round(wind_chill)",
        "test": "assert wind_chill(20,20) == 22",
        "num_ids": 440
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length",
        "test": "assert sample_nam([\"John\", \"Mary\", \"Tom\", \"Jane\", \"Bob\"]) == 0",
        "num_ids": 513
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'  # regex pattern to match parenthesis and what is inbetween them\n    new_string = re.sub(pattern, '', items)  # replace the parenthesis with an empty string\n    return new_string",
        "test": "assert remove_parenthesis(\"Hello (world) how are you?\") == \"Hello  how are you?\"",
        "num_ids": 299
    },
    {
        "number": 641,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_nonagonal(n): \n    '''\n    This function finds the nth nonagonal number using the formula: n^2 + (n - 1)^2\n    '''\n    return n ** 2 + (n - 1) ** 2",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 324
    },
    {
        "number": 643,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle('zMiddle') == True",
        "num_ids": 303
    },
    {
        "number": 644,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize variables\n    left = 0\n    right = len(input) - 1\n    temp = 0\n    \n    # Reverse the array from left to right until k-th element\n    while left < k-1:\n        temp = input[left]\n        input[left] = input[right]\n        input[right] = temp\n        left += 1\n        right -= 1\n    \n    # Reverse the array from k-th element to right\n    while left <= right:\n        temp = input[left]\n        input[left] = input[right]\n        input[right] = temp\n        left += 1\n        right -= 1\n    \n    return input",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 2) == [5, 4, 3, 2, 1]",
        "num_ids": 674
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)",
        "test": "assert add_dict_to_tuple(('apple', 'banana', 'cherry'), {'name': 'John', 'age': 25, 'city': 'New York'}) == ('apple', 'banana', 'cherry', {'name': 'John', 'age': 25, 'city': 'New York'})",
        "num_ids": 476
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    \n    # initialize first row and column\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n    for j in range(N):\n        dp[j][0] = cost[j][0]\n    \n    # fill in the rest of the matrix using dynamic programming\n    for i in range(1, N):\n        for j in range(1, N):\n            if cost[i][j] > cost[i-1][j]:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # find the maximum average path\n    max_avg = dp[N-1][N-1]\n    for i in range(N-2, -1, -1):\n        for j in range(N-2, -1, -1):\n            if cost[i][j] > cost[i+1][j]:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    \n    # return the maximum average path\n    return max_avg",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) == 24.0, \"The maximum average should be 24.0\"",
        "num_ids": 1692
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # Filter the students based on height and weight\n    filtered_students = {k: v for k, v in students.items() if v[0] > h and v[1] > w}\n\n    # Print the filtered students\n    for k, v in filtered_students.items():\n        print(f\"{k}: Height: {v[0]}, Weight: {v[1]}\")\n\n    # Return the filtered students\n    return filtered_students",
        "test": "assert filter_data({'Alice': (1.8, 60.5), 'Bob': (1.7, 50), 'Charlie': (1.6, 45), 'David': (1.9, 65.2), 'Emma': (1.6, 42)}, 1.8, 50) == {'Alice': (1.8, 60.5), 'David': (1.9, 65.2)}",
        "num_ids": 697
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1,2,3,4,5], [4,5,6,7,8]) == 0",
        "num_ids": 433
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n\n    # calculate the sum of digits of the base to the power\n    result = 0\n    num = base\n    while power > 0:\n        if power % 2 == 1:\n            result += num % 10\n        power //= 2\n        num //= 10\n\n    return result",
        "test": "assert power_base_sum(10, 0) == 0, \"Incorrect output for base=10 and power=0\"",
        "num_ids": 494
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of all the values within quotation marks \" \" of the string.\n    '''\n    # defining the pattern for matching quotation marks\n    pattern = r'\"(.*?)\"'\n    # using regex to match all the values between the quotation marks\n    values = re.findall(pattern, text1)\n    return values",
        "test": "assert extract_quotation(\"'I'm a stranger'\") == 'I\\'m a stranger'",
        "num_ids": 500
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = tuple([test_tup[i]*test_tup[i+1] for i in range(N)])\n    return result",
        "test": "assert multiply_elements((1, 2, 3, 4)) == (1, 2, 3, 4)",
        "num_ids": 530
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 407
    },
    {
        "number": 730,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))",
        "test": "assert consecutive_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 425
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = math.pi * r**2 * h\n    return lateral_surface",
        "test": "assert lateralsurface_cone(1,1) == math.pi*1*1",
        "num_ids": 331
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'([,.])', r':', text)\n    return text",
        "test": "assert replace_specialchar(\"I love playing football. I am a good person.\") == \"I:love:playing:football.:I:am:a:good:person.\"",
        "num_ids": 319
    },
    {
        "number": 733,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1",
        "test": "assert find_first_occurrence([1, 3, 5, 7, 9], 5) == 2, \"Test case 1 failed\"",
        "num_ids": 553
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n\n    # Find sum of products of all sublists of length 1 to n\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            total_sum += arr[j-1] * (arr[j-1] - 1) * (arr[j-1] - 2) *... * (arr[j-1] - (i-1))\n\n    return total_sum",
        "test": "assert sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 280",
        "num_ids": 781
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    \"\"\"\n    # Get the first and last bits\n    first_bit = n & 1\n    last_bit = n & (2 ** len(bin(n)) - 2)\n    \n    # Toggle the middle bits\n    middle_bits = (n ^ (n & (n - 1))) & 1\n    \n    # Combine the first and last bits with the middle bits\n    result = first_bit | middle_bits | last_bit\n    \n    return result",
        "test": "assert set_middle_bits(24) == 30",
        "num_ids": 525
    },
    {
        "number": 736,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n        a (list): A sorted list in which the value is to be inserted.\n        x (int): The value to be inserted.\n\n    Returns:\n        int: The index where the value should be inserted in the sorted list.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 6) == 3",
        "num_ids": 457
    },
    {
        "number": 737,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"apple\") == True",
        "num_ids": 340
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (n*geometric_sum(n-1))",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 252
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_nums = []\n    # Calculate the sum of the first n natural numbers \n    for i in range(1, n+1):\n        triangular_nums.append(math.factorial(n) // (math.factorial(i) * math.factorial(n-i)))\n    \n    # Find the smallest triangular number with n digits\n    min_triangular_num = 0\n    for i in range(1, len(triangular_nums)):\n        if triangular_nums[i] < triangular_nums[min_triangular_num]:\n            min_triangular_num = i\n    \n    return min_triangular_num",
        "test": "assert find_Index(1) == 0",
        "num_ids": 580
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple and returns a dictionary using adjacent elements.\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    # iterate through the tuple and add pairs of adjacent elements to the dictionary\n    for i in range(len(test_tup)-1):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # return the completed dictionary\n    return my_dict",
        "test": "assert tuple_to_dict((1,2,3)) == {1:2, 2:3}",
        "num_ids": 472
    },
    {
        "number": 741,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False",
        "test": "assert all_Characters_Same(\"a\") == True",
        "num_ids": 341
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side**2",
        "test": "assert area_tetrahedron(2) == 2",
        "num_ids": 256
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Handle edge cases\n    if not list:\n        return list\n    elif m == 0:\n        return list\n    elif m == len(list):\n        return list[:0]\n\n    # Rotate the list\n    n = len(list)\n    # Use modulo operator to find the required index\n    index = (n + m) % n\n    # Rotate the list by reversing the first n-m items and appending the rest of the list\n    result = list[index:] + list[:index]\n    return result",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 555
    },
    {
        "number": 744,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3)) == False",
        "num_ids": 330
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % int(x) == 0 for digit in str(x)), range(startnum, endnum + 1)))",
        "test": "assert divisible_by_digits(20, 30) == [20, 24, 25, 30]",
        "num_ids": 608
    },
    {
        "number": 746,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function calculates the area of a sector given its radius and angle. If the angle is greater than 360 degrees, the function returns None.\n    '''\n\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r",
        "test": "assert sector_area(2,90) == math.pi * (2**2)",
        "num_ids": 474
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a 3x3 table to store the LCS lengths of all three sequences\n    n = len(X)\n    m = len(Y)\n    o = len(Z)\n    LCS = [[[0 for j in range(o+1)] for k in range(m+1)] for i in range(n+1)]\n\n    # Fill in the table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                elif LCS[i-1][j][k] > LCS[i][j-1][k]:\n                    LCS[i][j][k] = LCS[i-1][j][k]\n                elif LCS[i][j-1][k] > LCS[i][j][k-1]:\n                    LCS[i][j][k] = LCS[i][j-1][k]\n                else:\n                    LCS[i][j][k] = LCS[i][j][k-1]\n\n    # Find the LCS starting from the bottom right corner\n    i, j, k = n, m, o\n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i-1][j][k] > LCS[i][j-1][k]:\n            i -= 1\n        elif LCS[i][j-1][k] > LCS[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs",
        "test": "assert lcs_of_three('AGGTAB', 'GXTXAYB', 'GXTXAYB') == ['A', 'G', 'X', 'T']",
        "num_ids": 1682
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove non-alphanumeric characters\n    str1 = re.sub('[^a-zA-Z0-9]', '', str1)\n    # Split the string into words\n    words = str1.split()\n    # Create a new string to hold the new words\n    new_words = ''\n    # Loop through each word in the original list\n    for word in words:\n        # Check if the first letter of the word is capitalized\n        if word[0].isupper():\n            # Add a space before the word\n            new_words +=''\n        # Append the word to the new string\n        new_words += word\n    # Return the new string\n    return new_words",
        "test": "assert capital_words_spaces('one two three') == 'One Two Three'",
        "num_ids": 504
    },
    {
        "number": 749,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all numeric strings to integers\n    nums_int = [int(num) for num in nums_str if num.isdigit()]\n    # Sort the list of integers in ascending order\n    nums_int.sort()\n    # Convert back to strings\n    sorted_nums_str = [str(num) for num in nums_int]\n    return sorted_nums_str",
        "test": "assert sort_numeric_strings([\"10\", \"4\", \"2\", \"5\", \"6\", \"3\", \"1\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"10\"]",
        "num_ids": 701
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Using list concatenation to add the tuple to the list\n    test_list += test_tup",
        "test": "assert add_tuple([1, 2, 3], (4,)) == [1, 2, 3, 4]",
        "num_ids": 350
    },
    {
        "number": 751,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    \n    if arr[i] < arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)",
        "test": "assert check_min_heap_helper([3,2,1,4,5], 0) == True, \"check_min_heap_helper([3,2,1,4,5], 0) == True\"",
        "num_ids": 1042
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n\n    jacobsthal = [0, 1, 1]\n\n    for i in range(2, n+1):\n        jacobsthal.append(jacobsthal[i-1] + jacobsthal[i-2])\n\n    return jacobsthal[n]",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 527
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a tuple list and returns the minimum K records from the list.\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            min_list[min_list.index(min(min_list)) + 1] = test_list[i]\n    return min_list",
        "test": "assert min_k([(1,2,3),(4,5,6),(7,8,9),(1,2,3),(4,5,6)], 3) == (1,2,3)",
        "num_ids": 607
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common",
        "test": "assert extract_index_list([1,2,3], [2,3,4], [3,4,5]) == [3]",
        "num_ids": 485
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n\n    # sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # return the second element of the sorted list\n    return sorted_numbers[1]",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 408
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "",
        "test": "assert text_match_zero_one('abbbb') == False",
        "num_ids": 255
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs(['racecar','mice', 'xray']) == 0 # Test case 2",
        "num_ids": 471
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                subitem_tuple = tuple(subitem)\n                if subitem_tuple in count_dict:\n                    count_dict[subitem_tuple] += 1\n                else:\n                    count_dict[subitem_tuple] = 1\n    return count_dict",
        "test": "assert unique_sublists([1,2,3]) == {}",
        "num_ids": 722
    },
    {
        "number": 759,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False",
        "test": "assert is_decimal(\"1.23\") == True, \"Incorrect output for is_decimal(\\\"1.23\\\")\"",
        "num_ids": 296
    },
    {
        "number": 760,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 3, 4, 3]) == False, \"Expected False, got {}\".format(unique_Element([1, 2, 3, 4, 3]))",
        "num_ids": 352
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0 and monthnum3 % 100!= 0 or monthnum3 % 400 == 0:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(3) == True",
        "num_ids": 441
    },
    {
        "number": 763,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_min_diff(arr, n):\n    # sort the array\n    arr.sort()\n    min_diff = float('inf')\n\n    # iterate through the sorted array\n    for i in range(len(arr) - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff",
        "test": "assert find_min_diff([1,2,3,4,5],5) == 1",
        "num_ids": 460
    },
    {
        "number": 764,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"1234567890\") == 10, \"Number of digits incorrect for input '1234567890'\"",
        "num_ids": 292
    },
    {
        "number": 765,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    polite = 0\n    for i in range(1, n+1):\n        total = 0\n        number = i\n        while number > 0:\n            digit = number % 10\n            total += digit*digit\n            number //= 10\n        if total == i:\n            polite = i\n            break\n    return polite",
        "test": "assert is_polite(1) == 1",
        "num_ids": 598
    },
    {
        "number": 766,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    if n < 2:\n        return []\n    pairs = []\n    for i in range(n):\n        if i + 1 < n:\n            pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1,2,3,4,5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 439
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to'sum'.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 10) == 0",
        "num_ids": 488
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list",
        "test": "assert Diff([],[]) == []",
        "num_ids": 265
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(1, n + 1, 2):\n        sum_of_powers += i ** 4\n    return sum_of_powers",
        "test": "assert odd_num_sum(50) == 35306120895561, \"The sum of fourth power of first 50 odd natural numbers is incorrect.\"",
        "num_ids": 338
    },
    {
        "number": 771,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isspace():\n            continue\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            if stack.pop()!= \"(\":\n                return False\n    return not stack",
        "test": "assert check_expression(\"()\") == True, \"() should be balanced.\"",
        "num_ids": 437
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    This function takes a string and an integer as input,\n    where the integer represents the length of the words that need to be removed.\n    It removes all the words with the given length from the string and returns the modified string.\n    \"\"\"\n    # Split the string into words and store them in a list\n    words = test_str.split()\n\n    # Initialize an empty string to store the modified words\n    modified_words = \"\"\n\n    # Loop through the words and remove the words with the given length\n    for word in words:\n        if len(word)!= K:\n            modified_words += word + \" \"\n\n    # Return the modified string\n    return modified_words[:-1]",
        "test": "assert remove_length(\"Hello world, this is a test string\", 6) == \"Hello world, this is a test string\"",
        "num_ids": 454
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # Convert the pattern to a regex pattern\n    pattern = re.compile(pattern)\n\n    # Find all the substrings in the text using the regex pattern\n    matches = pattern.findall(text)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # Find the index of the first match\n    first_match_index = text.index(matches[0])\n\n    # Find the length of the first match\n    first_match_length = len(matches[0])\n\n    # Loop through the rest of the matches\n    for match in matches[1:]:\n\n        # Find the index of the match\n        match_index = text.index(match)\n\n        # Calculate the position of the match within the text\n        position = (match_index - first_match_index) + first_match_length\n\n        # Return the position and the length of the match\n        return (position, len(match))\n\n    # If there are no matches, return None\n    return None",
        "test": "assert occurance_substring(\"Hello, World! This is a test string\", \"Test\") is None",
        "num_ids": 539
    },
    {
        "number": 775,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n\n    return True",
        "test": "assert odd_position([1, 2, 3, 4, 6]) == False, \"odd_position([1, 2, 3, 4, 6]) should be False\"",
        "num_ids": 464
    },
    {
        "number": 776,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"world\") == 0, \"count_vowels('world') should return 0\"",
        "num_ids": 416
    },
    {
        "number": 777,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty set to store the elements of the list\n    set_elements = set()\n    \n    # Loop through the elements of the list\n    for element in arr:\n        # Add the element to the set\n        set_elements.add(element)\n        \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the elements of the set and add their value to the sum variable\n    for element in set_elements:\n        sum += element\n        \n    # Return the sum\n    return sum",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 715
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    packed_list = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            group = list(group)\n        else:\n            group = list(group)\n            group.pop(0)\n            group = [list1[0]] + group\n        packed_list.append(group)\n    return packed_list",
        "test": "assert pack_consecutive_duplicates([1, 2, 2, 3, 2, 4, 2, 2]) == [[1, 1, 1], [2, 2], [2, 2], [3], [2], [4]]",
        "num_ids": 532
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to remove duplicates\n    list1 = set(list1)\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Iterate through the set and count the number of occurrences of each tuple\n    for sublist in list1:\n        # Convert the sublist to a tuple and add it to the counts dictionary\n        counts[tuple(sublist)] = counts.get(tuple(sublist), 0) + 1\n    # Return the counts dictionary\n    return counts",
        "test": "assert unique_sublists([1, 1, 2, 2, 3, 3]) == {frozenset([1, 2, 3]): 2}",
        "num_ids": 632
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # convert the input list to set to remove duplicates\n    unique_tuples = set(test_list)\n    # sort the tuples in ascending order\n    sorted_tuples = sorted(unique_tuples)\n    # initialize the result list\n    result = []\n    # loop through all possible combinations of tuples\n    for i in range(len(sorted_tuples)):\n        for j in range(i+1, len(sorted_tuples)):\n            # check if the sum of the two tuples equals the first tuple\n            if sorted_tuples[i][0] + sorted_tuples[j][0] == sorted_tuples[i][1]:\n                # create a tuple of the two tuples as a pair and add it to the result list\n                pair = (sorted_tuples[i], sorted_tuples[j])\n                result.append(pair)\n    return result",
        "test": "assert find_combinations([[1,2],[3,4]]) == [(1,2), (2,2), (3,3), (4,4)], \"The function is not working correctly.\"",
        "num_ids": 872
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    if count == 0:\n        count = 1\n    return count",
        "test": "assert count_divisors(12) == 6, \"count_divisors(12) should be 6\"",
        "num_ids": 617
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    odd_sum = 0\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += arr[i]\n        if i % 2 == 1 and i > 0:\n            odd_sum += current_sum\n            current_sum = 0\n\n    return odd_sum\n",
        "test": "assert odd_length_sum([2, 4, 6, 8, 10]) == 10",
        "num_ids": 579
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Find the maximum and minimum values among the three RGB components\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Find the difference between the maximum and minimum values\n    diff = max_value - min_value\n\n    # Calculate the value of the Hue\n    if max_value == r:\n        hue = (g - b) / diff\n    elif max_value == g:\n        hue = 2 + (b - r) / diff\n    else:\n        hue = 4 + (r - g) / diff\n\n    # Normalize the hue value to the interval [0, 6]\n    hue = hue % 6\n\n    # Calculate the value of the Saturation\n    if max_value == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_value\n\n    # Calculate the value of the Value\n    value = max_value\n\n    # Return the converted values in a tuple\n    return (hue, saturation, value)",
        "test": "assert rgb_to_hsv(0, 255, 0) == (120, 1, 1)",
        "num_ids": 1705
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for i in list1:\n        if i % 2 == 0:\n            even_num += i\n        else:\n            odd_num += i\n            \n    product = even_num * odd_num\n    \n    return product",
        "test": "assert mul_even_odd([]) == 0",
        "num_ids": 442
    },
    {
        "number": 785,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for char in test_str:\n        if char.isdigit():\n            result.append(int(char))\n        else:\n            return None\n    return tuple(result)",
        "test": "assert tuple_str_int(('1', '2', '3', '4', '5')) == (1, 2, 3, 4, 5)",
        "num_ids": 475
    },
    {
        "number": 786,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect_right to find the index where x should be inserted\n    index = bisect.bisect_right(a, x)\n\n    # If x is already present in the list, its insertion point will be index\n    if index < len(a) and a[index] == x:\n        return index\n\n    # Otherwise, the insertion point is the index of the last element greater than x\n    return index - 1",
        "test": "assert right_insertion([1], 1) == 0",
        "num_ids": 533
    },
    {
        "number": 787,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(?=.{3}b)'\n    return re.search(pattern, text) is not None",
        "test": "assert text_match_three(\"abbabbab\") == True",
        "num_ids": 212
    },
    {
        "number": 788,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert list to tuple\n    new_list = tuple(test_list)\n    # Convert string to tuple\n    new_str = tuple(test_str)\n    # Combine both tuples\n    combined_tuple = new_list + new_str\n    return combined_tuple",
        "test": "assert new_tuple([1,2,3], 'hello') == (1,2,3, 'h', 'e', 'l', 'l', 'o')",
        "num_ids": 314
    },
    {
        "number": 790,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            print(\"Index\", i, \"contains an odd number.\")\n            return False\n    return True",
        "test": "assert even_position([1, 3, 5, 7, 9]) == False",
        "num_ids": 460
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup",
        "test": "assert remove_nested((1, 2, (3, (4, 5))))) == (1, 2, 3, 4, 5)",
        "num_ids": 299
    },
    {
        "number": 792,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([[1, 2], [3, 4], [5, 6]]) == 3",
        "num_ids": 340
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr: list\n        The sorted array.\n    x: any\n        The element to search for.\n\n    Returns:\n    int\n        The last position of x in arr, or -1 if x is not in arr.\n    \"\"\"\n\n    # Find the last position of x using binary search\n    lo, hi = 0, len(arr) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n\n    # x not found, return -1\n    return -1",
        "test": "assert last([1,3,5,7,9],1) == 0, \"last([1,3,5,7,9],1) should be 0\"",
        "num_ids": 708
    },
    {
        "number": 794,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_starta_endb(\"aThis is a test.b\") == \"aThis is a test.b\"",
        "num_ids": 416
    },
    {
        "number": 796,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 230
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    sum_odd = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum_odd += l\n        l += 1\n    return sum_odd",
        "test": "assert sum_odd(2) == 0, \"sum_odd(2) should return 0\"",
        "num_ids": 393
    },
    {
        "number": 798,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 232
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # get the number of bits in the number\n    bits = bin(n).lstrip('0b').__len__()\n    \n    # calculate the amount of bits to rotate by\n    rotate_bits = (d % bits)\n    \n    # rotate the bits\n    rotated_bits = bin(n >> rotate_bits)[2:].zfill(bits)\n    \n    # convert the rotated bits back to an integer\n    rotated_n = int(rotated_bits, 2)\n    \n    return rotated_n",
        "test": "assert left_rotate(4294967295,1) == 1",
        "num_ids": 566
    },
    {
        "number": 800,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)",
        "test": "assert remove_all_spaces(\"Hello world\") == \"Helloworld\"",
        "num_ids": 224
    },
    {
        "number": 801,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "test": "assert test_three_equal(5,5,5) == 3",
        "num_ids": 351
    },
    {
        "number": 802,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    :param arr: the given sorted array\n    :return: the number of rotations required to generate a sorted array\n    \"\"\"\n    n = len(arr)\n    count = 0\n    while n > 1 and arr[0] > arr[n-1]:\n        count += 1\n        n //= 2\n    return count",
        "test": "assert count_rotation([5, 1, 2, 3, 4]) == 2",
        "num_ids": 462
    },
    {
        "number": 803,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n\n    if n == 0 or n == 1:\n        return True\n    elif n < 0:\n        return False\n    else:\n        root = n ** 0.5\n        return root == int(root)",
        "test": "assert is_perfect_square(16) == True, \"16 is not a perfect square\"",
        "num_ids": 439
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2, 4, 6, 8, 10]) == True, \"The product of 2, 4, 6, 8, 10 is even.\"",
        "num_ids": 405
    },
    {
        "number": 805,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_sum_list = []\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = [lists[i]]\n        elif current_sum == max_sum:\n            max_sum_list.append(lists[i])\n    return max_sum_list",
        "test": "assert max_sum_list([[1,2,3],[4,5,6],[7,8,9]]) == [[7,8,9]]",
        "num_ids": 843
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    prev_char = None\n\n    # loop through the string\n    for char in test_str:\n        # if the character is uppercase, increment the current run\n        if char.isupper():\n            current_run += 1\n        # if the character is not uppercase, reset the current run and check for a longer run\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n        # if the current character is not uppercase and the previous character was uppercase, increment the current run\n        if prev_char is not None and prev_char.isupper() and not char.isupper():\n            current_run += 1\n\n        # update the previous character\n        prev_char = char\n\n    # check for a final longest run\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run",
        "test": "assert max_run_uppercase(\"A man, a plan, a canal, Panama!\") == 10",
        "num_ids": 753
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None",
        "test": "assert first_odd([1, 3, 5, 7, 9]) == 1",
        "num_ids": 275
    },
    {
        "number": 808,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K((1,2,3,4), 2) == True, \"The function should return True for (1,2,3,4) and K=2\"",
        "num_ids": 334
    },
    {
        "number": 809,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1,3,5),(1,3,4)) == False",
        "num_ids": 444
    }
]