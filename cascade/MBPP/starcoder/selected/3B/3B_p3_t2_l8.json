[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements",
        "test": "assert similar_elements((1,2,3), (1,3,4)) == (1, 3)",
        "num_ids": 401
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(5) == False",
        "num_ids": 325
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Create a max heap and push the first n elements into the heap\n    max_heap = []\n    for num in nums[:n]:\n        heapq.heappush(max_heap, num)\n\n    # Pop the maximum n-1 elements from the max heap and add the last element to the max heap\n    for _ in range(n - 1):\n        max_heap_largest = heapq.heappop(max_heap)\n        heapq.heappush(max_heap, max_heap_largest)\n\n    # Return the max heap as a list of integers\n    return [heapq.heappop(max_heap) for _ in range(n)]",
        "test": "assert heap_queue_largest([1, 2, 3, 4, 5], 3) == [5, 4, 3]",
        "num_ids": 582
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer x as input and returns a boolean value indicating whether\n    the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return False\n    elif x & (x-1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(5) == False, \"is_Power_Of_Two(5) is not False\"",
        "num_ids": 397
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words",
        "test": "assert find_char_long('banana') == ['banana']",
        "num_ids": 300
    },
    {
        "number": 8,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 345
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Initialize variables\n    minRotations = float('inf')\n    currRotations = 0\n\n    # Iterate over all possible rotations\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            # Find the string after rotating\n            rotatedStr = str[i:j] + str[:i] + str[j:]\n\n            # Check if the rotated string is the same as the original string\n            if rotatedStr == str:\n                # Update the minimum number of rotations\n                if currRotations < minRotations:\n                    minRotations = currRotations\n                currRotations = 0\n            else:\n                # Otherwise, increment the number of rotations\n                currRotations += 1\n\n    # Return the minimum number of rotations\n    return minRotations",
        "test": "assert find_Rotations(\"racecar\") == 0",
        "num_ids": 417
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_Occ(s, ch): \n    # Remove the first occurrence of the character from the string\n    first_occ = s.find(ch)\n    if first_occ!= -1:\n        s = s[:first_occ] + s[first_occ+1:]\n    # Remove the last occurrence of the character from the string\n    last_occ = s.rfind(ch)\n    if last_occ!= -1:\n        s = s[:last_occ] + s[last_occ+1:]\n    return s",
        "test": "assert remove_Occ('hello', 'l') == 'heo'",
        "num_ids": 465
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(i+1, len(M[i])):\n            if M[i][j] < M[i][i]:\n                M[i][j], M[i][i] = M[i][i], M[i][j]\n                for k in range(len(M)):\n                    M[k][j], M[k][i] = M[k][i], M[k][j]\n    return M",
        "test": "assert sort_matrix([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 833
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h\n    return V\n",
        "test": "assert find_Volume(1,2,3) == 6, \"The Volume of a triangular prism with sides of length 1, 2, and 3 is incorrect. It should be 6.\"",
        "num_ids": 340
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"abc_def\") == True",
        "num_ids": 291
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 181
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # convert string1 to list of characters\n    lst1 = list(string1)\n\n    # iterate through each character of string2 and remove it from string1\n    for char in string2:\n        if char in lst1:\n            lst1.remove(char)\n\n    # convert list of characters back to string\n    string1 = ''.join(lst1)\n\n    return string1",
        "test": "assert str_to_list(\"abcde\") == []",
        "num_ids": 477
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each number in the array\n    freq = {}\n\n    # Iterate through each number in the array\n    for num in arraynums:\n        # If the number is already in the dictionary, increment its frequency\n        if num in freq:\n            freq[num] += 1\n        # If the number is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary to find whether any number has a frequency greater than 1\n    for num, freq in freq.items():\n        if freq > 1:\n            # If a number has a frequency greater than 1, return True\n            return True\n\n    # If no duplicate numbers are found, return False\n    return False",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 493
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(13) == False, \"13 should not be a woodball\"",
        "num_ids": 288
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse < num:\n        return True\n    else:\n        return False",
        "test": "assert rev(1234) == False, \"Test failed for rev(1234)\"",
        "num_ids": 402
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the given digits.\n    \"\"\"\n    # Sorting the list of digits in ascending order\n    arr.sort()\n    # Initializing the maximum number to 0\n    max_num = 0\n    # Looping through the digits in the sorted list\n    for digit in arr:\n        # Adding the current digit to the maximum number\n        max_num += digit\n        # Updating the maximum number if it becomes greater than the previous maximum number\n        if max_num > max_num_prev:\n            max_num_prev = max_num\n    # Returning the final maximum number\n    return max_num",
        "test": "assert find_Max_Num([9, 8, 7, 6, 5]) == 9",
        "num_ids": 531
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(2, 3) == True",
        "num_ids": 411
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"The value of n should be greater than or equal to 1.\"\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n - 1)) // 2 + 1",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 306
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    digit_sum = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        if i == n-1:\n            digit_sum[0] += 1\n        else:\n            digit_sum[s[i]] += 1\n            digit_sum[s[i+1]] -= 1\n        for j in range(i, n-i):\n            if digit_sum[s[j]] == j+1:\n                count += 1\n    return count",
        "test": "assert count_Substrings('12345') == 1",
        "num_ids": 638
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    # initialize smallest variable to the first element of the list\n    smallest = xs[0]\n    # loop through the rest of the list\n    for x in xs[1:]:\n        # if the current element is smaller than the smallest so far, update the smallest\n        if x < smallest:\n            smallest = x\n    # return the smallest element\n    return smallest",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 460
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([(1, 2), (2, 3), (3, 4), (4, 5)]) == 3",
        "num_ids": 571
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "test": "assert subject_marks([(75, 'Maths'), (90, 'English'), (80, 'Science'), (95, 'Social Studies'), (85, 'History')]) == [('Maths', 75), ('English', 90), ('Science', 80), ('Social Studies', 95), ('History', 85)]",
        "num_ids": 401
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    def sum_list(flat_list):\n        if not flat_list:\n            return 0\n        return flat_list.pop() + sum_list(flat_list)\n\n    flat_list = flatten_list(data_list)\n    return sum_list(flat_list)",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 478
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([-1, -2, -3, -4, -5]) == 0",
        "num_ids": 294
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of ways to partition a set of Bell numbers with n elements.\n\n    :param n: an integer representing the number of elements in the set of Bell numbers\n    :return: the number of ways to partition the set of Bell numbers with n elements\n    \"\"\"\n    # Base case: if n is 0 or 1, there is only one way to partition the set\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through all possible partitionings of the set of Bell numbers\n    for i in range(n + 1):\n        for j in range(1, n + 1):\n            # If the i-th element is in the i-th column, and the j-th element is in the j-th row, increment the count by 1\n            if i == j:\n                count += 1\n\n    # Return the final count\n    return count",
        "test": "assert bell_number(0) == 1",
        "num_ids": 445
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    \n    # Check if all the elements in the array are the same\n    if A[0] == A[-1]: \n        return True\n    \n    # Check if the array is monotonic in terms of increasing or decreasing\n    if A[0] <= A[1] and A[-1] >= A[-2]: \n        return True\n    \n    return False",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True",
        "num_ids": 505
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "test": "assert is_sublist([1, 2, 3], [1, 2])",
        "num_ids": 392
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True",
        "test": "assert find_equal_tuple([(1, 2), (3, 4), (5, 6)]) == True",
        "num_ids": 368
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums",
        "test": "assert comb_sort([3, 2, 1]) == [1, 2, 3]",
        "num_ids": 636
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # create a list of numbers from 1 to n\n    nums = list(range(1, n+1))\n    \n    # loop through each number and check if it can be represented as the difference of two squares\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if nums[i] + nums[j] == n:\n                return True\n    \n    # if no pair of squares can be found, return False\n    return False",
        "test": "assert dif_Square(5) == True",
        "num_ids": 449
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    length = len(colors)\n\n    if length!= len(patterns):\n        return False\n\n    current_pattern = patterns[0]\n    count = 1\n\n    for color in colors:\n        if color == current_pattern:\n            count += 1\n        else:\n            if current_pattern == \"W\":\n                if count == 1:\n                    continue\n                else:\n                    return False\n            else:\n                if count % 2 == 0:\n                    return False\n            current_pattern = color\n            count = 1\n\n    return True",
        "test": "assert is_samepatterns(['red', 'blue', 'green'], [3, 2, 1]) == True, \"is_samepatterns failed for the given test case.\"",
        "num_ids": 599
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    divisible_tuples = []\n    for i in range(len(test_list)):\n        if all(x % K == 0 for x in test_list[i]):\n            divisible_tuples.append(test_list[i])\n    return divisible_tuples",
        "test": "assert find_tuples([([1, 2, 3], 3), ([4, 5, 6], 2), ([1, 2, 4], 6)], 3) == [([1, 2, 3], 3), ([4, 5, 6], 2)]",
        "num_ids": 542
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(11) == True, \"Function is not working correctly.\"",
        "num_ids": 279
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # Split the string into a list of words\n    for word in words:\n        if len(word) % 2 == 1: # Check if the length of the word is odd\n            return True\n    return False",
        "test": "assert word_len('hello') == True, \"word_len('hello') should return True\"",
        "num_ids": 307
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (3 * n - 1) / 2",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 393
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol",
        "test": "assert volume_sphere(2) == math.pi*(2)**3, \"The function volume_sphere(2) should return 4/3 * pi * 2^3 = 4/3 * 3.14159 * 2^3\"",
        "num_ids": 328
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):\n    # initialize an empty list to store ASCII values of characters\n    ASCII_val = []\n\n    # loop through each character in the string\n    for char in strr:\n        # convert the character to its ASCII value\n        ASCII_val.append(ord(char))\n\n    # calculate the sum of the ASCII values\n    sum_val = sum(ASCII_val)\n\n    # calculate the remainder of the sum divided by 26\n    remainder = sum_val % 26\n\n    # convert the remainder to the corresponding character\n    char = chr(65 + remainder)\n\n    # return the character\n    return char",
        "test": "assert get_Char(\"a\") == 1, \"get_Char('a') should return 1.\"",
        "num_ids": 457
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]\n    count = 2\n    while count < n:\n        temp = [0] * len(sequence)\n        for i in range(len(sequence)):\n            temp[i] = sequence[i] + sequence[i-1]\n        sequence = temp\n        count += 1\n    return sequence[n-1]",
        "test": "assert sequence(1) == 1",
        "num_ids": 382
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)",
        "test": "assert surfacearea_sphere(2) == 4 * math.pi * (2**2), \"Surface area of sphere with radius 2 is not correct.\"",
        "num_ids": 349
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        raise ValueError('n must be a positive integer.')\n    elif n == 1:\n        return 1\n    else:\n        return (n * (3 * n - 1)) // 2",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 360
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n\n    Parameters:\n        dict1: A dictionary.\n        dict2: A dictionary.\n        dict3: A dictionary.\n\n    Returns:\n        A single dictionary containing all the key-value pairs from the three input dictionaries.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict",
        "test": "assert merge_dictionaries_three(ct.OrderedDict({'a':1,'b':2,'c':3}), ct.OrderedDict({'d':4,'e':5,'f':6}), ct.OrderedDict({'g':7,'h':8,'i':9})) == {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9}",
        "num_ids": 557
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of each element in the list.\n    '''\n    freq_dict = collections.defaultdict(int) # using defaultdict to create a dictionary with initial value as 0\n    \n    for elem in lst:\n        freq_dict[elem] += 1\n    \n    return freq_dict",
        "test": "assert freq_count(['apple', 'banana', 'cherry', 'apple', 'banana']) == {'apple': 2, 'banana': 2, 'cherry': 1}",
        "num_ids": 471
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = N - 1\n    bigger_num = N + 1\n    closest_num = abs(bigger_num - N)\n    while abs(bigger_num - smaller_num) > 1:\n        middle_num = (smaller_num + bigger_num) // 2\n        if middle_num < smaller_num:\n            smaller_num = middle_num\n        else:\n            bigger_num = middle_num\n        closest_num = abs(bigger_num - N)\n    return closest_num",
        "test": "assert closest_num(10) == 6",
        "num_ids": 488
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list.\n    \"\"\"\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "test": "assert len_log(['apple', 'banana', 'orange', 'grape', 'kiwi']) == 6",
        "num_ids": 336
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring(['hello', 'world', 'python', 'programming', 'python is great'], 'python') == True, \"The function should return True for 'python' in ['hello', 'world', 'python', 'programming', 'python is great']\"",
        "num_ids": 397
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert is_undulating(1) == True, \"Function is not working as expected for value 1\"",
        "num_ids": 248
    },
    {
        "number": 93,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2, 3) == 8, \"2^3 should be 8\"",
        "num_ids": 249
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value of each tuple\n    test_list.sort(key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return test_list[0][0]",
        "test": "assert index_minimum([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]) == 'b'",
        "num_ids": 498
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_len:  \n            min_len = len(sublist)  \n    return min_len",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6]]) == 3",
        "num_ids": 375
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(10) == 4",
        "num_ids": 309
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is a list, recursively call the function to find the frequency of each element in the sub-list\n        if isinstance(element, list):\n            sub_freq = frequency_lists(element)\n            # Merge the sub-frequency dictionary into the main frequency dictionary\n            freq = {**freq, **sub_freq}\n        # If the element is not a list, add it to the dictionary with a frequency of 1\n        else:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    # Return the final dictionary with the frequency of each element\n    return freq",
        "test": "assert frequency_lists([['a', 'b', 'c'], ['d', 'e', 'f']]) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}",
        "num_ids": 842
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "test": "assert multiply_num([4, 5, 6, 7]) == 42",
        "num_ids": 293
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    elif n < 0:\n        return 'Not supported for negative numbers'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 308
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome\n    '''\n    if num < 0:\n        return False\n    reversed_num = 0\n    temp = num\n    while temp > 0:\n        reversed_num = reversed_num * 10 + temp % 10\n        temp //= 10\n    return reversed_num == num\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num + 1\n    \n    # If the number is not a palindrome, find the largest palindrome less than or equal to the original number\n    largest_palindrome = num\n    while not is_palindrome(largest_palindrome):\n        largest_palindrome += 1\n    \n    # Find the next smallest palindrome greater than the largest palindrome\n    next_smallest_palindrome = largest_palindrome + 1\n    \n    # Return the next smallest palindrome\n    return next_smallest_palindrome",
        "test": "assert next_smallest_palindrome(1) == 2",
        "num_ids": 682
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        left = kth_element(arr[:mid], k)\n        right = kth_element(arr[mid:], k - mid)\n        if left is None:\n            return right\n        elif right is None:\n            return left\n        else:\n            return arr[mid - 1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 5) == 5, \"The kth element should be 5.\"",
        "num_ids": 520
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    # convert snake case to camel case\n    words = word.split('_')\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word",
        "test": "assert snake_to_camel(\"apple_pie\") == \"applePie\"",
        "num_ids": 339
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the value of a(n, m)\n    a = (n + 1) * (m + 1) // 2\n\n    # Return the value of a(n, m)\n    return a",
        "test": "assert eulerian_num(3, 3) == 1",
        "num_ids": 662
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "test": "assert sort_sublists([[1, 2, 3], [4, 5, 6], [\"a\", \"b\", \"c\"]]) == [[1, 2, 3], [4, 5, 6], [\"a\", \"b\", \"c\"]]",
        "num_ids": 491
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num is True:\n            count += 1\n    return count",
        "test": "assert count([True, False, True, True, False]) == 3",
        "num_ids": 205
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "test": "assert add_lists([7,8,9], (1,2,3)) == (7,8,9,1,2,3)",
        "num_ids": 360
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Step 1: Merge the three sorted lists into a single sorted list\n    merged_list = sorted(num1 + num2 + num3)\n\n    # Step 2: Remove duplicates from the merged list\n    unique_list = []\n    for num in merged_list:\n        if num not in unique_list:\n            unique_list.append(num)\n\n    # Step 3: Return the unique list\n    return unique_list",
        "test": "assert merge_sorted_list([], [], []) == []",
        "num_ids": 536
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def odd_Equivalent(s, n):\n    # Define a function to rotate a binary string\n    def rotate(s):\n        return s[::-1]\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate n times to rotate the binary string\n    for i in range(n):\n        # Rotate the binary string\n        new_string = rotate(s)\n\n        # Iterate through the new string\n        for j in range(len(new_string)):\n            # Check if the current character is odd\n            if new_string[j] == '1':\n                # If it is odd, add it to the result\n                result.append(int(new_string[j]))\n\n    # Return the length of the result list\n    return len(result)",
        "test": "assert odd_Equivalent('1001', 1) == 2",
        "num_ids": 1643
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty dictionary to store common elements\n    common_elements = {}\n\n    # Iterate through the nested lists\n    for sublist in nestedlist:\n        # Iterate through the elements of the sublist\n        for element in sublist:\n            # If the element is not already present in the dictionary, add it with its count of 1\n            if element in common_elements:\n                common_elements[element] += 1\n            else:\n                common_elements[element] = 1\n\n    # Convert the dictionary to a list of tuples and sort the list based on the second element of the tuple (count)\n    common_elements_list = sorted(common_elements.items(), key=lambda x: x[1], reverse=True)\n\n    # Return the list of common elements\n    return [element[0] for element in common_elements_list]",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [3, 10]",
        "num_ids": 593
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"123\") == True, \"check_integer('123') should return True\"",
        "num_ids": 274
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if i:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 269
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)",
        "test": "assert tuple_to_int((1, 2, 3, 4, 5)) == 15, \"tuple_to_int failed\"",
        "num_ids": 389
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float]:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list",
        "test": "assert list_to_float([[1,2,3], [4,5,6], [7,8,9]]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]",
        "num_ids": 598
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 219
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Check if the array is sorted in ascending order\n    if arr[0] > arr[1]:\n        for i in range(len(arr)):\n            if i > 0 and arr[i] == arr[i-1]:\n                continue  # ignore duplicates\n            if i == len(arr)-1:\n                return arr[i]  # if the last element is unique, return it\n            if arr[i] > arr[i+1]:\n                return arr[i+1]  # if the next element is larger, return it\n    else:\n        for i in range(len(arr)-1, -1, -1):\n            if i < len(arr)-2 and arr[i] == arr[i+1]:\n                continue  # ignore duplicates\n            if i == 0:\n                return arr[i]  # if the first element is unique, return it\n            if arr[i] < arr[i-1]:\n                return arr[i-1]  # if the previous element is larger, return it\n    return None  # if no unique element found",
        "test": "assert search([1, 2, 2, 3, 3, 4, 4, 4, 5, 5]) == 3",
        "num_ids": 763
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(1, 2), (3, 4), (5, 6), (-1, -2)]) == (-2, 6)",
        "num_ids": 660
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_amicable_numbers(limit):\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num!= 1:\n            if num in amicable_numbers:\n                continue\n            if num % 2 == 0:\n                if num // 2 in amicable_numbers:\n                    continue\n            if num == sum(set(map(int, str(num)))):\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)",
        "test": "assert amicable_numbers_sum(1000) == 4179871, \"1000 should have 4179871 as sum of amicable numbers\"",
        "num_ids": 681
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle",
        "test": "assert angle_complex(1,2) == cmath.phase(1+2j)",
        "num_ids": 252
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_length(string):\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n            diff = max(abs(zero_count - one_count), max_diff)\n            max_diff = max(diff, max_diff)\n    return max_diff",
        "test": "assert find_length('00101101') == 1",
        "num_ids": 512
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # function to find common divisors of two numbers\n    def gcd(a, b):\n        \"\"\"\n        This function finds the greatest common divisor of two numbers using the Euclidean algorithm.\n        \"\"\"\n        while b!= 0:\n            temp = a % b\n            a = b\n            b = temp\n        return a\n\n    # calculate sum of common divisors of two numbers\n    c = gcd(a, b)\n    sum_of_common_divisors = a + b - c\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is\", sum_of_common_divisors)",
        "test": "assert sum(12,18) == 36, \"The sum of common divisors of 12 and 18 is incorrect.\"",
        "num_ids": 506
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(3, 4) == 12",
        "num_ids": 170
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    :param n: integer, the maximum number of characters that a word can have\n    :param words: list, a list of words to check\n    :return: list, a list of words that are longer than n characters\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list",
        "test": "assert long_words(6, ['hello', 'world', 'python', 'programming', 'pythoning', 'pythoned', 'programming']) == []",
        "num_ids": 567
    },
    {
        "number": 129,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    diagonal_sum = 0\n    antidiagonal_sum = 0\n    \n    # Check rows\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                diagonal_sum += my_matrix[i][j]\n            elif i == rows - j - 1:\n                antidiagonal_sum += my_matrix[i][j]\n    \n    # Check columns\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                diagonal_sum -= my_matrix[i][j]\n            elif i == rows - j - 1:\n                antidiagonal_sum -= my_matrix[i][j]\n    \n    # Check main diagonal\n    for i in range(rows):\n        diagonal_sum -= my_matrix[i][i]\n        \n    # Check anti-diagonal\n    for i in range(rows):\n        antidiagonal_sum -= my_matrix[i][rows - i - 1]\n    \n    # Check if sums are equal\n    if diagonal_sum == antidiagonal_sum:\n        return True\n    else:\n        return False",
        "test": "assert magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 60]]) == False",
        "num_ids": 1053
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with the maximum frequency.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item",
        "test": "assert max_occurrences([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9]) == 4",
        "num_ids": 637
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    result = \"\"\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] in vowels:\n            vowel_count += 1\n            result += str1[i]\n    return result + str1[0:vowel_count]\n",
        "test": "assert reverse_vowels(\"Python\") == \"nohtyp\"",
        "num_ids": 411
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string(\"hello\") == \"hello\"",
        "num_ids": 210
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative",
        "test": "assert sum_negativenum([-1, -2, -3, -4, -5, -6]) == 15, \"sum_negativenum([-1, -2, -3, -4, -5, -6]) should return 15\"",
        "num_ids": 439
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 28\n    elif n == 5:\n        return 45\n    elif n == 6:\n        return 66\n    elif n == 7:\n        return 91\n    elif n == 8:\n        return 120\n    elif n == 9:\n        return 153\n    elif n == 10:\n        return 190\n    else:\n        return -1",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 321
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the input array to an array of bytes\n    nums_bytes = array('B', nums)\n\n    # Count the number of zeroes and non-zeroes in the array\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums_bytes:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n\n    # Return the ratio\n    return ratio",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0.0, \"The zero_count function should return 0.0.\"",
        "num_ids": 742
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0: \n        if n & 1 == 1: \n            count += 1\n            if count > 32: \n                return False\n            n >>= 1\n        else: \n            n >>= 1\n    return True",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 679
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # pi is a mathematical constant, 2 is the diameter of a circle, and r is the radius\n    return circumference",
        "test": "assert circle_circumference(2) == 78.53981633974483, \"The circumference of a circle with radius 2 should be 78.53981633974483.\"",
        "num_ids": 428
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    # Initialize an empty set to hold the flattened numbers\n    flattened_set = set()\n\n    # Iterate through each item in the list\n    for item in test_list:\n        # If the item is a list, recursively call the function on that list\n        if isinstance(item, list):\n            flattened_set |= extract_singly(item)\n        # If the item is a number, add it to the set\n        elif isinstance(item, (int, float)):\n            flattened_set.add(item)\n\n    # Return the flattened set\n    return flattened_set",
        "test": "assert extract_singly([1, [2, 3], [4], [5, [6], 7]]) == {1, 2, 3, 4, 5, 6, 7}",
        "num_ids": 497
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function takes a list of integers as input and sorts them in ascending order using the pancake sort algorithm.\n\n    The pancake sort algorithm is an in-place variation of the bubble sort algorithm that works by repeatedly sorting pairs of adjacent elements in reverse order.\n\n    The pancake sort algorithm can be implemented in Python as follows:\n\n    def pancake_sort(nums):\n        n = len(nums)\n\n        # Initialize the largest and second largest indices\n        largest = second_largest = n - 1\n\n        # Perform a pancake iteration\n        for i in range(n - 1, 0, -1):\n            # Find the index of the next largest element\n            j = i\n            while j < largest:\n                if nums[j] > nums[largest]:\n                    largest = j\n                j += 1\n            # Swap the elements at indices i and largest\n            nums[i], nums[largest] = nums[largest], nums[i]\n\n            # Find the index of the next second largest element\n            j = i\n            while j < second_largest:\n                if nums[j] > nums[second_largest]:\n                    second_largest = j\n                j += 1\n            # Swap the elements at indices i and second_largest\n            nums[i], nums[second_largest] = nums[second_largest], nums[i]\n\n        # The pancake sort is complete, return the sorted list\n        return nums\n\n    Here's how the function works:\n\n    - The function first initializes the largest and second largest indices to the last index of the list.\n    - It then performs a pancake iteration, where it finds the index of the next largest element, swaps it with the current largest element, and finds the index of the next second largest element.\n    - This process continues until the largest element is at its correct position, and the second largest element is at its correct position.\n    - Finally, the function returns the sorted list.\n\n    Note that the time complexity of the pancake sort algorithm is O(n^2) in the worst case, but it can be optimized further to O(n log n) by using the counting sort algorithm in the inner loop. This is a more advanced algorithm that is not covered in this exercise.\n    \"\"\"\n    n = len(nums)\n\n    # Initialize the largest and second largest indices\n    largest = second_largest = n - 1\n\n    # Perform a pancake iteration\n    for i in range(n - 1, 0, -1):\n        # Find the index of the next largest element\n        j = i\n        while j < largest:\n            if nums[j] > nums[largest]:\n                largest = j\n            j += 1\n        # Swap the elements at indices i and largest\n        nums[i], nums[largest] = nums[largest], nums[i]\n\n        # Find the index of the next second largest element\n        j = i\n        while j < second_largest:\n            if nums[j] > nums[second_largest]:\n                second_largest = j\n            j += 1\n        # Swap the elements at indices i and second_largest\n        nums[i], nums[second_largest] = nums[second_largest], nums[i]\n\n    # The pancake sort is complete, return the sorted list\n    return nums",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 1425
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 5]) == 0",
        "num_ids": 489
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count",
        "test": "assert find_lists((1, 2, 3, [4, 5, 6], 7)) == 2",
        "num_ids": 366
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = float('-inf')\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n            \n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 442
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize variables\n    x = None\n    y = None\n    \n    # loop until a valid solution is found\n    while x == None or y == None:\n        # generate a random x value\n        x = random.randint(-10000, 10000)\n        \n        # check if x satisfies the given equation\n        if a * x + b * y == n:\n            # generate a random y value\n            y = random.randint(-10000, 10000)\n            \n        # if no valid solution is found, break the loop\n    return (x, y) if x!= None and y!= None else None",
        "test": "assert find_solution(3, 2, 12) == (4, 3) or find_solution(2, 3, 12) == (6, 1) or find_solution(5, 7, 24) == (1, 3)",
        "num_ids": 591
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create an empty list to store the remaining elements in list1\n    remaining_list = []\n\n    # loop through each element in list1\n    for element in list1:\n        # if the element is not present in list2, add it to the remaining list\n        if element not in list2:\n            remaining_list.append(element)\n\n    # return the remaining list\n    return remaining_list",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 369
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n // 2 + 1):\n        s += (n - 2 * i)\n    return s",
        "test": "assert sum_series(0) == 0",
        "num_ids": 337
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of a regular polygon using the formula: area = (pi * r^2) / (4 * tan(30\u00b0/n))\n    # where r is the length of one side of the polygon and n is the number of sides\n    r = s / l\n    area = (pi * r**2) / (4 * tan(pi/l))\n    \n    return area",
        "test": "assert area_polygon(7, 4) == 2 * pi * (7**2)",
        "num_ids": 499
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # list of divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n\n    # sort the list of divisors in ascending order\n    divisors.sort()\n\n    # check if the sum of the first n elements of the sorted list is equal to n\n    return sum(divisors[:n]) == n",
        "test": "assert div_sum(12) == False",
        "num_ids": 494
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char.lower() in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count",
        "test": "assert count_char_position(\"abcdefghijklmnopqrstuvwxyz\") == 26, \"count_char_position should return 26 for input string 'abcdefghijklmnopqrstuvwxyz'\"",
        "num_ids": 647
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 4",
        "num_ids": 496
    },
    {
        "number": 167,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2**((n-1).bit_length())",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 300
    },
    {
        "number": 168,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5], 3) == 1, 'The function should return 1'",
        "num_ids": 431
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 5) == 15, \"Test Case 2 failed\"",
        "num_ids": 452
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n",
        "test": "assert perimeter_pentagon(10) == 50, \"Expected: 50, Got: {}\".format(perimeter_pentagon(10))",
        "num_ids": 382
    },
    {
        "number": 172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurance of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "test": "assert count_occurance('std is a cool string') == 2",
        "num_ids": 316
    },
    {
        "number": 222,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if tuple is empty\n    if len(test_tuple) == 0:\n        return False\n    \n    # get the first element in the tuple\n    first_elem = type(test_tuple[0])\n    \n    # loop through all the elements in the tuple and check if their type is same as the first element\n    for elem in test_tuple:\n        if type(elem)!= first_elem:\n            return False\n    \n    return True",
        "test": "assert check_type((1, 2.0, 3.0)) == False",
        "num_ids": 409
    },
    {
        "number": 223,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    # Initialize variables to keep track of the count and count of x\n    count = 0\n    count_x = 0\n    \n    # Iterate through the array, starting from the second element\n    for i in range(1, n):\n        # If the current element is equal to x, increment the count of x\n        if arr[i] == x:\n            count_x += 1\n        \n        # If the count of x reaches n/2, return True because x is the majority element\n        if count_x == n//2:\n            return True\n        \n        # If the count of x reaches the total count of x, reset the count of x to 0\n        if i == n-1:\n            count_x = 0\n    \n    # If the loop completes without finding x as the majority element, return False\n    return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 6) == False",
        "num_ids": 560
    },
    {
        "number": 224,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(2) == 1",
        "num_ids": 316
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and returns a new string with all odd-indexed characters removed.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str",
        "test": "assert odd_values_string(\"abcde\") == \"abde\"",
        "num_ids": 253
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(2,3,4) == 2, \"Incorrect output for min_of_three(2,3,4)\"",
        "num_ids": 353
    },
    {
        "number": 228,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three parameters n, l, and r which are integers and represent the number, start and end range of the bits.\n    The function returns True if all the bits are set in the given range else False.\n    \"\"\"\n\n    # Initialize a variable to store the bitwise AND result of n with all the bits in the range from l to r\n    bitwise_and_result = n & (2 ** (r + 1) - 1)\n\n    # If the bitwise AND result is equal to n, it means all the bits are set in the given range, so return True\n    if bitwise_and_result == n:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(42,1,3) == False",
        "num_ids": 643
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a new array to store the positive elements\n    positive_arr = []\n    # create a new array to store the negative elements\n    negative_arr = []\n    # loop through the array and add positive elements to positive_arr and negative elements to negative_arr\n    for i in arr:\n        if i >= 0:\n            positive_arr.append(i)\n        else:\n            negative_arr.append(i)\n    # concatenate the two new arrays and sort it in ascending order\n    arr = negative_arr + positive_arr + sorted(arr[n:])\n    return arr",
        "test": "assert re_arrange_array([-1, -2, -3, -4, -5], 5) == [-1, -2, -3, -4, -5]",
        "num_ids": 1040
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def replace_blank(str1,char):\n    return str1.replace(\" \",char)",
        "test": "assert replace_blank(\"hello world\",\"-\") == \"hello-world\"",
        "num_ids": 219
    },
    {
        "number": 232,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "test": "assert larg_nnum([3,2,1,5,6,4], 1) == [6]",
        "num_ids": 434
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area",
        "test": "assert lateralsuface_cylinder(2,3) == 18",
        "num_ids": 1308
    },
    {
        "number": 234,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert volume_cube(3) == 27, \"The volume of a cube with side length 3 should be 27.\"",
        "num_ids": 279
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(16):\n        if n & (1 << i):\n            n |= (1 << i)\n    return n",
        "test": "assert even_bit_set_number(15) == 15",
        "num_ids": 354
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict",
        "test": "assert check_occurences([(1, 2), (1, 2), (1, 3), (2, 3), (2, 4)]) == {",
        "num_ids": 646
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 342
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_total_number_of_sequences(m,n):\n    total = 0\n    for i in range(m//2):\n        if n % 2 == 0:\n            # if n is even, take every even number\n            total += i * (m-i)\n        else:\n            # if n is odd, take every odd number\n            total += i * (m-i) + 1\n    return total",
        "test": "assert get_total_number_of_sequences(10, 5) == 5, \"get_total_number_of_sequences(10, 5) should return 5, but it returns {}\".format(get_total_number_of_sequences(10, 5))",
        "num_ids": 636
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2",
        "test": "assert replace_list([1,2,3,4,5],[5]) == [1,2,3,4]",
        "num_ids": 371
    },
    {
        "number": 242,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"hello\") == 5",
        "num_ids": 234
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    \n    sqrt_N = int(math.sqrt(N))\n    if sqrt_N*sqrt_N == N:\n        return sqrt_N*sqrt_N + 1\n    \n    while sqrt_N*sqrt_N <= N:\n        sqrt_N += 1\n    \n    return sqrt_N*sqrt_N",
        "test": "assert next_Perfect_Square(1) == 1",
        "num_ids": 544
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables to store the maximum sum and the maximum increasing subsequence sum\n    max_sum = arr[0]\n    max_increasing_sum = arr[0]\n\n    # Loop through the array, checking for increasing and decreasing subsequences\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]: # Check if the current element is greater than the previous element\n            if arr[i] > max_increasing_sum: # Check if the current element is greater than the maximum increasing subsequence sum\n                max_increasing_sum = arr[i] # Update the maximum increasing subsequence sum\n        elif arr[i] < arr[i-1]: # Check if the current element is less than the previous element\n            if arr[i] + max_increasing_sum > max_sum: # Check if adding the current element and the maximum increasing subsequence sum is greater than the maximum sum\n                max_sum = arr[i] + max_increasing_sum # Update the maximum sum\n\n    return max_sum",
        "test": "assert max_sum([5, 4, 3, 2, 1]) == 9",
        "num_ids": 993
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2\n    while abs(x*x - number) > 0.001:\n        x = (x + number/x)/2\n    return x",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 399
    },
    {
        "number": 247,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def lps(string):\n    '''\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n\n    Time Complexity: O(n^2 * m), where n is the length of the string and m is the maximum length of a substring.\n\n    The above time complexity comes from the fact that we need to consider all possible substrings of the string.\n    Therefore, the number of substrings is n^2, and the maximum length of a substring is m.\n\n    This can be improved by using dynamic programming. We will create a 2D table to store the length of the longest palindromic subsequence for all possible substrings of the given string. We will initialize the first row and first column of the table with 1.\n\n    We will then iterate over the remaining rows and columns of the table, and for each position (i, j), we will calculate the length of the longest palindromic subsequence for the substring of the string from index i to index j. We will use a helper function to check if a given substring is a palindrome.\n\n    Finally, we will return the length of the longest palindromic subsequence.\n\n    '''\n\n    n = len(string)\n    m = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if string[i] == string[j]:\n                m = max(m, 2)\n            else:\n                m = 1\n\n            if m > 1:\n                for k in range(2, m + 1):\n                    if i + k <= j:\n                        if string[i + k - 1] == string[j - k]:\n                            m = max(m, k + 2)\n                            break\n\n    return m\n",
        "test": "assert lps(\"\") == 0",
        "num_ids": 1195
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return 'Invalid input. Please enter a positive integer.'\n    elif n == 1:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n):\n            sum += 1/i\n        return sum",
        "test": "assert harmonic_sum(1) == 0",
        "num_ids": 268
    },
    {
        "number": 249,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection",
        "test": "assert intersection_array([1,2,3], [2,3,4]) == [2,3]",
        "num_ids": 482
    },
    {
        "number": 250,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert count_X((1,2,3,2,1), 2) == 2",
        "num_ids": 309
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + list",
        "test": "assert insert_element([1,2,3,4,5],0) == [0,1,2,3,4,5]",
        "num_ids": 355
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = num\n        # Convert real and imaginary parts to polar form\n        r = abs(real) + abs(imag)\n        theta = cmath.phase(complex(real, imag))\n        # Output polar coordinates\n        print(f\"({r:.2f}, {theta:.2f})\")",
        "test": "assert convert([-1, 2]) == [(-1, 2), (3.141592653589793, 4.242640687119285)]",
        "num_ids": 475
    },
    {
        "number": 253,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 356
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # check if length n is greater than length of list l\n    if n > len(l):\n        return []\n    # create a list of all possible combinations of length n\n    comb_list = list(combinations_with_replacement(l, n))\n    # initialize an empty list to store the final combinations\n    result = []\n    # iterate over each combination and add it to the result list as a tuple\n    for c in comb_list:\n        result.append(tuple(c))\n    return result",
        "test": "assert combinations_colors(['red', 'green', 'blue'], 3) == [('red', 'green', 'blue'), ('red', 'green', 'blue'), ('red', 'blue', 'green'), ('green', 'blue','red'), ('blue', 'green','red')]",
        "num_ids": 608
    },
    {
        "number": 256,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # initialize a variable to keep track of the number of prime numbers\n    count = 0\n\n    # loop through all numbers from 2 to n\n    for i in range(2, n):\n\n        # check if i is a prime number\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        # if i is prime, increment the count\n        if is_prime:\n            count += 1\n\n    return count",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 490
    },
    {
        "number": 257,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a, b):\n    return b, a",
        "test": "assert swap_numbers(3,7) == (7,3)",
        "num_ids": 213
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # defining the two lists\n    list1 = test_tup1[0]\n    list2 = test_tup2[0]\n    # comparing the lists\n    for i in range(len(list1)):\n        if list1[i] > list2[i]:\n            # returning the maximized list\n            return (list1, list2)\n        elif list2[i] > list1[i]:\n            # returning the maximized list\n            return (list2, list1)",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 483
    },
    {
        "number": 260,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    count = 0\n    for prime in primes:\n        count += 1\n        if count == n:\n            return prime\n\nn = 100\nprime = newman_prime(n)\nprint(\"The\", n, \"th newman-shanks-williams prime number is:\", prime)",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 1408
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples should have the same length.\")\n        return\n\n    # Divide the elements element-wise and store in a new tuple\n    result_tup = tuple(test_tup1[i] / test_tup2[i] for i in range(len(test_tup1)))\n\n    # Return the result tuple\n    return result_tup",
        "test": "assert division_elements((1,2),(4,5)) == ((0.2, 0.4), (0.5, 1. ))",
        "num_ids": 642
    },
    {
        "number": 262,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Check if the length of the list is at least L\n    if len(list1) < L:\n        raise ValueError(\"The length of the list is less than L\")\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 619
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Converting height in inches to centimeters\n    cm_height = h_age * 2.54\n    \n    # Calculating dog's years based on height\n    dog_years = cm_height / 10\n    \n    # Returning the dog's years\n    return dog_years",
        "test": "assert dog_age(2) == 14:",
        "num_ids": 357
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Use a for loop to split the list into n-sized chunks\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]",
        "num_ids": 635
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l",
        "test": "assert lateralsurface_cube(1) == 6, \"lateral surface area of a cube with side length 1 is not 6\"",
        "num_ids": 280
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n\n    sum_squares = 0\n    current_num = 1\n    count = 0\n\n    while count < n:\n        if current_num % 2 == 1:\n            sum_squares += current_num ** 2\n            count += 1\n        current_num += 1\n\n    return sum_squares",
        "test": "assert square_Sum(1) == 1, \"Expected 1, got {}\".format(square_Sum(1))",
        "num_ids": 390
    },
    {
        "number": 268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # first line of the first row\n    row = \"\"\n    # loop to create the first row\n    for i in range(1, n+1):\n        row += str(i) + \" \"\n    print(row)\n    \n    # creating the remaining rows\n    for i in range(n-1):\n        # loop to create the first part of each row\n        part1 = \"\"\n        for j in range(1, n-i):\n            part1 += \" \"\n        # loop to create the second part of each row\n        part2 = \"\"\n        for j in range(1, 2*i+1):\n            part2 += \"*\"\n        # adding the row to the output\n        print(part1 + part2 + part1)",
        "test": "assert find_star_num(2) == 2",
        "num_ids": 513
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    return ascii_val\n",
        "test": "assert ascii_value('A') == 65",
        "num_ids": 271
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0, \"sum_even_and_even_index([1, 3, 5, 7, 9]) should return 0\"",
        "num_ids": 539
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    sum = 0\n\n    for i in range(2, 2*n, 2):\n        sum += i ** 5\n\n    return sum",
        "test": "assert even_Power_Sum(5) == 397125, \"Function does not return the expected value\"",
        "num_ids": 445
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        if len(i) == 2:\n            result.append(i[1])\n    return result",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [6, 4, 2]",
        "num_ids": 334
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n    \n    # Create a new tuple with the subtraction of the elements\n    new_tup = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n    \n    return new_tup",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-1, -1, -1)",
        "num_ids": 606
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize variables\n    sum_even = 0\n    numerator = 1\n    denominator = 1\n\n    # Loop through all even indices\n    for i in range(2, n+1, 2):\n        # Calculate the numerator and denominator for the i-th even index binomial coefficient\n        numerator *= i\n        denominator *= n - i\n\n        # Add the even index binomial coefficient to the sum\n        sum_even += numerator / denominator\n\n    return sum_even",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1474
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14 * r**2 # Formula for area of a cylinder\n    volume = area * h # Formula for volume of a cylinder\n    return volume",
        "test": "assert volume_cylinder(2,3) == 228.2743338823081, \"The function is not working correctly.\"",
        "num_ids": 492
    },
    {
        "number": 277,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}",
        "test": "assert dict_filter({'a':5, 'b':10, 'c':15}, 10) == {'b':10, 'c':15}",
        "num_ids": 351
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count",
        "test": "assert count_first_elements((1, 2, 3, 4, 5)) == 1",
        "num_ids": 525
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    num = 1\n    for i in range(2, n+1):\n        num += (i * (i+1))\n    return num",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 433
    },
    {
        "number": 280,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 4) == (True, 3)",
        "num_ids": 521
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if all the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 346
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists should have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result",
        "test": "assert sub_list([1, 2, 3], [2, 3, 4]) == [0, 0, 0]",
        "num_ids": 492
    },
    {
        "number": 283,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def validate(n):\n    # Get the frequency of each digit in the integer\n    freq = [n // (10 ** i) % 10 for i in range(len(str(n)))]\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > digit:\n            return False\n    \n    return True",
        "test": "assert validate(12345) == True, \"Incorrect output\"",
        "num_ids": 347
    },
    {
        "number": 284,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True",
        "test": "assert check_element([1, 2, 3], 2) == False",
        "num_ids": 377
    },
    {
        "number": 285,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[^b]*b{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three('abc') == False, \"text_match_two_three failed for the input 'abc'\"",
        "num_ids": 1374
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    max_sum_repeated = float('-inf')\n\n    # Iterate through the array\n    for i in range(n):\n        # Update the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # Check if the current sum is greater than the maximum sum repeated so far\n        if current_sum > max_sum_repeated:\n            max_sum_repeated = current_sum\n\n        # If the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    # Calculate and return the result\n    return max_sum_repeated",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 2) == 15, \"The result is incorrect.\"",
        "num_ids": 811
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 288
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list",
        "test": "assert max_length([[1,2,3],[4,5,6],[7,8,9]]) == [1,2,3]",
        "num_ids": 486
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # initialize the count of ways to 0\n    count = 0\n\n    # loop through all possible arrangements of k colors\n    for i in range(2**k):\n\n        # convert the binary number to a list of colors\n        colors = [0]*k\n        for j in range(k):\n            if i & (1<<j):\n                colors[j] = 1\n\n        # check if the number of adjacent colors is at most 2\n        if colors.count(colors[1:]) <= 2:\n            count += 1\n\n    # return the count of ways\n    return count",
        "test": "assert count_no_of_ways(5, 3) == 10",
        "num_ids": 647
    },
    {
        "number": 292,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient",
        "test": "assert find(10,5) == 2",
        "num_ids": 398
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    angle = math.degrees(math.acos((w**2+h**2-1)/(2*w*h)))\n    return h*math.sin(math.radians(angle))",
        "test": "assert otherside_rightangle(7,8) == 12.0",
        "num_ids": 538
    },
    {
        "number": 294,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # get the maximum value in the list\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 316
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [1]\n    for i in range(2, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "test": "assert sum_div(12) == 22",
        "num_ids": 288
    },
    {
        "number": 296,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n\n    # sorting the array in ascending order\n    arr = sorted(arr)\n\n    # initializing variables for counting inversions\n    i = 1\n    inv_count = 0\n\n    # traversing the sorted array and counting inversions\n    for j in range(1, len(arr)):\n        if arr[j] < arr[i - 1]:\n            inv_count += i - 1\n            i = j\n\n    return inv_count",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0, \"get_Inv_Count([1, 2, 3, 4, 5]) == 0\"",
        "num_ids": 1059
    },
    {
        "number": 297,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert flatten_list([[1, 2], 3, [4, [5, 6]]]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 453
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(float)\n    for item in stdata:\n        max_dict[item[0]] += item[1]\n    max_agg = max(max_dict.values())\n    return max_agg",
        "test": "assert max_aggregate([(1,2), (3,4), (5,6)]) == 6",
        "num_ids": 528
    },
    {
        "number": 300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_binary_seq(n):\n    # Initialize the count variable\n    count = 0\n    \n    # Loop through all possible binary sequences\n    for i in range(2**n, 2**(n+1)):\n        # Extract the first n bits and the last n bits\n        first = i & ((1 << n) - 1)\n        last = i >> n\n        \n        # If the sum of the first n bits is same as the sum of the last n bits, increment the count\n        if sum(bin(first)[2:].zfill(n)) == sum(bin(last)[2:].zfill(n)):\n            count += 1\n            \n    # Return the count\n    return count",
        "test": "assert count_binary_seq(2) == 3",
        "num_ids": 421
    },
    {
        "number": 301,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0",
        "test": "assert dict_depth({'a': 1}) == 1",
        "num_ids": 362
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    \n    # Initialize the index of the element to be found\n    element_index = 0\n    \n    # Find the rotation count to reach the index\n    for i in range(len(arr)):\n        if element_index == index:\n            break\n        element_index += rotations[i]\n        \n    # Find the final element after rotations\n    final_element = arr[(element_index + rotations[element_index % len(rotations)]) % len(arr)]\n    \n    # Check if the final element is in the range of the given ranges\n    if final_element in ranges:\n        return final_element\n    else:\n        return None",
        "test": "assert find_Element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [[0, 2], [3, 5], [6, 8]], [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]], 2) == 9",
        "num_ids": 1057
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'^p.*'\n    matches = re.findall(pattern, words)\n    return matches\n\nwords = [\"apple\", \"banana\", \"pear\", \"pineapple\", \"grape\", \"peach\", \"pineapple\"]\nresult = start_withp(words)\nprint(result)",
        "test": "assert start_withp(['grape', 'kiwi', 'lemon', 'orange', 'peach']) == ('peach', 'orange')",
        "num_ids": 469
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Parameters:\n        a: list of integers\n        n: integer representing the length of the list\n        index: integer representing the current index of the list\n        k: integer representing the kth element after i\n\n    Returns:\n        max_sum: integer representing the maximum sum of increasing subsequence from prefix until ith index and including kth element\n    \"\"\"\n\n    # Initialize variables for the current index and the maximum sum\n    current_sum = 0\n    max_sum = 0\n\n    # Loop through the remaining indices\n    for i in range(index, n):\n        # Add the current element to the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum so far, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum is equal to the maximum sum so far, check if the element before it is greater than the kth element\n        if current_sum == max_sum and a[i] > a[k]:\n            # If it is, update the maximum sum\n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1, -2, 3, -5, 2, 4, -1, 5], 8, 2, 5) == 13 # Test case for the given input",
        "num_ids": 1448
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    -----------\n    tuplex : tuple\n        A tuple to get a colon from.\n    m : int\n        The number of elements in the colon.\n    n : int\n        The number of columns in the tuple.\n\n    Returns:\n    --------\n    colon : tuple\n        A tuple containing the m elements of the input tuple.\n\n    \"\"\"\n    colon = tuple([tuplex[i] for i in range(0, m)])\n    return colon",
        "test": "assert colon_tuplex((1, (2, 3)), 2, 3) == (1, 2)",
        "num_ids": 481
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Calculate the product of the first N largest numbers from each list\n    product1 = 1\n    for i in range(N):\n        product1 *= nums1[i]\n\n    product2 = 1\n    for i in range(N):\n        product2 *= nums2[i]\n\n    # Calculate the product of the first N smallest numbers from each list\n    product3 = 1\n    for i in range(N):\n        product3 *= nums1[N-1-i]\n\n    product4 = 1\n    for i in range(N):\n        product4 *= nums2[N-1-i]\n\n    # Return the maximum of the four products\n    return max(product1, product2, product3, product4)",
        "test": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3) == [480, 120, 60]",
        "num_ids": 1134
    },
    {
        "number": 309,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n\n    Parameters:\n    a (int): the first number to compare\n    b (int): the second number to compare\n\n    Returns:\n    int: the maximum of a and b\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2,5) == 5, \"maximum function is not working correctly\"",
        "num_ids": 247
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('abc') == ('a', 'b', 'c')",
        "num_ids": 260
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    mask = 1\n    while (n & mask) == 0:\n        mask <<= 1\n    return n | mask",
        "test": "assert set_left_most_unset_bit(1) == 1",
        "num_ids": 406
    },
    {
        "number": 312,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Formula for cone volume: V = \u03c0r^2h\n    return math.pi * r**2 * h\n",
        "test": "assert volume_cone(1,1) == math.pi*1**2*1, \"The volume of the cone with radius 1 and height 1 should be pi.\"",
        "num_ids": 337
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes an integer as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return power",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 304
    },
    {
        "number": 389,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(2) == 3, \"Function find_lucas(2) should return 3.\"",
        "num_ids": 317
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Convert the string to a list of strings\n    formatted_list = [string.format(x) for x in list_]\n    # Return the formatted list\n    return formatted_list",
        "test": "assert add_string(['apple', 'banana', 'cherry'], '{0} is a fruit.') == ['apple is a fruit.', 'banana is a fruit.', 'cherry is a fruit.']",
        "num_ids": 457
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    # create a dictionary for each list\n    dict1 = dict(zip(l1, l2))\n    dict2 = dict(zip(l1, l3))\n\n    # combine the dictionaries into a single dictionary\n    result = dict(dict1.items() + dict2.items())\n\n    return result",
        "test": "assert convert_list_dictionary([[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]], [[13, 14, 15], [16, 17, 18]]) == {('1', '7', '13'): 1, ('1', '7', '14'): 2, ('1', '7', '15'): 3, ('1', '8', '13'): 4, ('1', '8', '14'): 5, ('1', '8', '15'): 6, ('1', '9', '13'): 7, ('1', '9', '14'): 8, ('1', '9', '15'): 9, ('1', '10', '13'): 10, ('1', '10', '14'): 11, ('1', '10', '15'): 12, ('1', '11', '13'): 13, ('1', '11', '14'): 14, ('1', '11', '15'): 15, ('1', '12', '13'): 16, ('1', '12', '14'): 17, ('1', '12', '15'): 18}",
        "num_ids": 915
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 1:\n        return n\n\n    # Calculate the maximum sum possible if n is even\n    even_max = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n\n    # Calculate the maximum sum possible if n is odd\n    odd_max = max(get_max_sum(n//2) + n, get_max_sum(n//3) + n, get_max_sum(n//4) + n, get_max_sum(n//5) + n)\n\n    return max(even_max, odd_max)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 603
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list",
        "test": "assert max_length_list(['apple', 'banana', 'cherry']) == ['banana', 'cherry']",
        "num_ids": 487
    },
    {
        "number": 394,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False",
        "test": "assert check_distinct((1, 2, 3)) == True, \"Test case 1: (1, 2, 3) should return True\"",
        "num_ids": 329
    },
    {
        "number": 395,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
        "test": "assert first_non_repeating_character(\"aabbcde\") == \"c\"",
        "num_ids": 610
    },
    {
        "number": 396,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return re.match(regex, string) is not None",
        "test": "assert check_char(\"a\") == True",
        "num_ids": 314
    },
    {
        "number": 397,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import random\n\ndef quickselect(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n    pivot = random.choice(arr)\n    lows = [el for el in arr if el < pivot]\n    highs = [el for el in arr if el > pivot]\n    pivots = [el for el in arr if el == pivot]\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))\n\ndef median_numbers(a, b, c):\n    arr = [a, b, c]\n    k = len(arr) // 2\n    return quickselect(arr, k)",
        "test": "assert median_numbers(1, 2, 3) == 2.0",
        "num_ids": 537
    },
    {
        "number": 398,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            temp += num % 10\n            num //= 10\n        total += temp\n    return total",
        "test": "assert sum_of_digits([123]) == 6",
        "num_ids": 379
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Perform bitwise xor operation across all elements of the tuples\n    result = tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n    return result",
        "test": "assert bitwise_xor((0,1), (1,0)) == (1,1)",
        "num_ids": 424
    },
    {
        "number": 400,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 415
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Check if both tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length!\")\n\n    # Initialize an empty result tuple\n    result = ()\n\n    # Loop through each element in the input tuples and add the corresponding elements in index-wise manner\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements in the two input tuples and append the result to the result tuple\n        result += (test_tup1[i] + test_tup2[i],)\n\n    # Return the result tuple\n    return result",
        "test": "assert add_nested_tuples((1, 2), (3, 4)) == (4, 6)",
        "num_ids": 624
    },
    {
        "number": 404,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(5, 7) == 5",
        "num_ids": 226
    },
    {
        "number": 405,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n\n    for element in tuplex:\n        if element in tuple1:\n            return True\n\n    return False",
        "test": "assert check_tuplex((1,2,3,4,5),(1,2,3,4,5)) == True, \"Expected True, got {}\".format(check_tuplex((1,2,3,4,5),(1,2,3,4,5)))",
        "num_ids": 362
    },
    {
        "number": 406,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        print(x, \"is even.\")\n        return False\n    else:\n        print(x, \"is odd.\")\n        return True",
        "test": "assert find_Parity(4) == False",
        "num_ids": 273
    },
    {
        "number": 407,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    def next_bigger(num):\n        digits = [int(digit) for digit in str(num)]\n        digits.reverse()\n        digits.sort(reverse=True)\n        new_digits = []\n        carry = 0\n        for digit in digits:\n            if carry:\n                carry = digit\n            else:\n                new_digits.append(digit)\n        new_num = int(''.join(map(str, new_digits)))\n        return new_num\n\n    return next_bigger(n)",
        "test": "assert rearrange_bigger(987654321) == 987654321",
        "num_ids": 644
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1, num2))\n            else:\n                if num1 > heap[0][0]:\n                    heapq.heappushpop(heap, (num1, num2))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6], [7, 2], [7, 4], [7, 6]]",
        "num_ids": 1114
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1,2),(3,4),(5,6),(7,8)]) == 24, 'Incorrect output for [(1,2),(3,4),(5,6),(7,8)]'",
        "num_ids": 626
    },
    {
        "number": 410,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize minimum value to the first element of the list\n    min_val = listval[0]\n\n    # Loop through the rest of the list and update min_val if an element is smaller than current min_val\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n\n    return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 407
    },
    {
        "number": 411,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n    \"\"\"\n    return re.sub(r'_(.)', lambda match: match.group(1).upper(), word)",
        "test": "assert snake_to_camel(\"snake_case_string\") == \"snakeCaseString\"",
        "num_ids": 343
    },
    {
        "number": 412,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]",
        "num_ids": 435
    },
    {
        "number": 413,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function takes in a list of tuples and an integer n.\n    It returns the nth element from the list, or None if there is not enough elements in the list.\n    \"\"\"\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]",
        "test": "assert extract_nth_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == (4, 5, 6)",
        "num_ids": 534
    },
    {
        "number": 414,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3,4,5],[3,4,5,6,7]) == True, \"Overlapping exists in list1 and list2\"",
        "num_ids": 458
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2 and arr[i]!= max1:\n            max2 = arr[i]\n    return max1 * max2",
        "test": "assert max_Product([-2,0,-1]) == (-2, 0)",
        "num_ids": 1392
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def group_tuples(Input): \n    # create an empty dictionary to store the common elements\n    common_dict = {}\n    \n    # loop through each tuple in the input list\n    for tup in Input: \n        # get the first element of the tuple\n        element = tup[0]\n        \n        # check if the element is already a key in the dictionary\n        if element in common_dict: \n            # if it is, add the tuple to the corresponding list for that key\n            common_dict[element].append(tup) \n        else: \n            # if it's not, create a new list for that key and add the tuple to it\n            common_dict[element] = [tup]\n    \n    # create an empty list to store the result\n    result = []\n    \n    # loop through each key in the dictionary\n    for key in common_dict: \n        # get the list of tuples for that key\n        value = common_dict[key]\n        \n        # if the list has only one element, append it to the result list\n        if len(value) == 1: \n            result.append(value[0]) \n        # if the list has multiple elements, loop through them and append the first element\n        else: \n            for tup in value: \n                result.append(tup[0])\n    \n    # return the result list\n    return result",
        "test": "assert group_tuples([(1,2,3), (1,2,4), (1,3,3), (2,2,3)]) == ((1, 1), (1, 2), (1, 3), (2, 2))",
        "num_ids": 726
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element having the maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem",
        "test": "assert Find_Max([1,2,3,4,5]) == 5",
        "num_ids": 418
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))\n",
        "test": "assert round_and_sum([1, 2, 3, 4]) == 0",
        "num_ids": 432
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n\n        # Calculate the cube of the current even natural number and add it to the sum variable\n        sum += i*i*i\n\n    # Return the sum of the cubes of the even natural numbers\n    return sum",
        "test": "assert cube_Sum(1) == 0",
        "num_ids": 348
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]",
        "test": "assert concatenate_tuple((1,)) == \"(1,)\"",
        "num_ids": 289
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    total = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n    \n    average = total / count\n    \n    return average",
        "test": "assert find_Average_Of_Cube(5) == 21.666666666666668, \"find_Average_Of_Cube function is not working correctly.\"",
        "num_ids": 297
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        if i % 2 == 0:\n            rear_index.append(test_tuple[i])\n    return rear_index",
        "test": "assert extract_rear(('hello', 'world', 'python')) == ['world']",
        "num_ids": 326
    },
    {
        "number": 425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, [4, 5], 6, 7], 5) == 3",
        "num_ids": 304
    },
    {
        "number": 426,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 328
    },
    {
        "number": 427,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match the pattern in the input string\n    match = re.match(pattern, dt)\n    # extract the date components\n    year, month, day = match.groups()\n    # convert the date components to the required format\n    new_dt = f'{day}-{month}-{year}'\n    # return the new date format\n    return new_dt",
        "test": "assert change_date_format('2021-01-01') == '01-01-2021'",
        "num_ids": 523
    },
    {
        "number": 428,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest gap\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        # Iterate over array and sort elements with the gap\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap by 1\n        gap //= 2\n\n    return my_list",
        "test": "assert shell_sort([1,4,2,8,5]) == [1,2,4,5,8], \"Test case for [1,4,2,8,5] failed.\"",
        "num_ids": 671
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Lengths of input tuples are not equal.\"\n    else:\n        return tuple(x & y for x, y in zip(test_tup1, test_tup2))",
        "test": "assert and_tuples((1,2,3),(4,5,6)) == (1,4), \"Incorrect output\"",
        "num_ids": 576
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta >= 0:\n        directrix = (-b + delta**0.5) / (2*a)\n    else:\n        directrix = (-b - delta**0.5) / (2*a)\n    return directrix",
        "test": "assert parabola_directrix(1, 2, 3) == -1, \"Failed test for parabola_directrix\"",
        "num_ids": 572
    },
    {
        "number": 431,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert common_element([], []) == False",
        "num_ids": 501
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    # Calculate the length of the trapezium\n    trapezium_length = (base1 + base2) / 2 * height\n\n    # Calculate the length of the first half of the trapezium\n    half_length_1 = base1 / 2 * height\n\n    # Calculate the length of the second half of the trapezium\n    half_length_2 = base2 / 2 * height\n\n    # Determine the median length of the trapezium\n    if trapezium_length > half_length_1 + half_length_2:\n        median = half_length_1 + half_length_2\n    else:\n        median = (half_length_1 + half_length_2) / 2\n\n    return median",
        "test": "assert median_trapezium(1,3,2) == 2.0",
        "num_ids": 483
    },
    {
        "number": 433,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return any(num > number for num in arr)",
        "test": "assert check_greater([5,4,3,2,1], 6) == False",
        "num_ids": 390
    },
    {
        "number": 434,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one(\"aaaaa\") == True, \"text_match_one failed: 1st example\"",
        "num_ids": 329
    },
    {
        "number": 435,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert number to string\n    str_n = str(n)\n    \n    # Find last digit of string\n    last_digit = str_n[-1]\n    \n    # Convert last digit to int and return it\n    return int(last_digit)",
        "test": "assert last_Digit(1234) == 4",
        "num_ids": 277
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([1,2,3,-4,-5,-6]) == [-4, -5, -6]",
        "num_ids": 462
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            str2 += char\n    return str2",
        "test": "assert remove_odd('Hello') == 'Hll'",
        "num_ids": 223
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[i][1:] and (test_list[j][0], test_list[i][0]) in test_list[j][1:]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(1, 2), (3, 4), (4, 5), (5, 6)]) == 3, \"Incorrect count for (1, 2), (3, 4), and (5, 6).\"",
        "num_ids": 662
    },
    {
        "number": 439,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    \n    # Check if all the numbers are same\n    if all(isinstance(num, int) for num in L):\n        single_num = L[0]\n        for num in L:\n            single_num *= num\n        return single_num\n    \n    # Check if all the numbers are positive\n    if all(num > 0 for num in L):\n        return sum(L)\n    \n    # Check if all the numbers are positive integers\n    if all(isinstance(num, int) and num > 0 for num in L):\n        return sum(L)\n    \n    # If none of the above conditions are met, return None\n    return None",
        "test": "assert multiple_to_single([1, 2, 3, 4, 5]) == 120",
        "num_ids": 424
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*adverb\\w*\\b', text.lower())\n\n    # Check if there are any adverbs in the sentence\n    if not adverbs:\n        return None\n\n    # Find the positions of the adverbs in the sentence\n    adverb_positions = []\n    for index, word in enumerate(text.split()):\n        if word in adverbs:\n            adverb_positions.append(index)\n\n    # Find the adverb with the minimum position in the sentence\n    min_position = min(adverb_positions)\n\n    # Find the adverb with the maximum position in the sentence\n    max_position = max(adverb_positions)\n\n    # Find the adverb with the minimum and maximum positions in the sentence\n    min_and_max_position = sorted([min_position, max_position])\n\n    # Return the adverb and their positions\n    return adverbs[min_and_max_position[0]], adverb_positions[min_and_max_position[0]], adverbs[min_and_max_position[1]], adverb_positions[min_and_max_position[1]]",
        "test": "assert find_adverb_position(\"The quick brown fox jumps over the lazy dog\") == [('over', 34)]",
        "num_ids": 853
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l",
        "test": "assert surfacearea_cube(1) == 6, \"Incorrect result for surfacearea_cube(1)\"",
        "num_ids": 316
    },
    {
        "number": 442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize an array to store the count of positive numbers\n    count = array('i', [0])\n    # Loop through the array and count the number of positive numbers\n    for num in nums:\n        if num > 0:\n            count[0] += 1\n    # Calculate the ration of positive numbers and return it\n    pos_ratio = count[0] / len(nums)\n    return pos_ratio",
        "test": "assert positive_count([1, -2, 3, -4, 5]) == 0.2, \"Expected 0.2, got %s\" % positive_count([1, -2, 3, -4, 5])",
        "num_ids": 601
    },
    {
        "number": 443,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0:\n            largest = list1[i]\n    return largest",
        "test": "assert largest_neg([1, -2, 3, -4, 5]) == -4",
        "num_ids": 321
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        tup = tup[K:]\n    return test_list",
        "test": "assert trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == [(3, 4, 5), (6, 7, 8)], \"Failed to trim tuple by 3.\"",
        "num_ids": 470
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the two tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Two tuples must have same length.\")\n        return\n    \n    # Initialize an empty list to store the multiplication result\n    result = []\n    \n    # Perform index multiplication\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    \n    # Return the multiplication result\n    return tuple(result)",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == (4, 10, 18)",
        "num_ids": 480
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Convert the tuple into a list\n    tup_list = list(tup)\n\n    # Use Counter to count the occurrences of each element in the list\n    count_dict = Counter(tup_list)\n\n    # Use a dictionary comprehension to create a dictionary where the keys are the elements of the list\n    # and the values are their count in the tuple\n    count_dict = {k: v for k, v in count_dict.items()}\n\n    # Count the occurrences of each element in the original list\n    original_count = Counter(lst)\n\n    # Use a dictionary comprehension to create a dictionary where the keys are the elements of the list\n    # and the values are their count in the original list\n    original_count_dict = {k: v for k, v in original_count.items()}\n\n    # Combine the dictionaries to get the final dictionary with the counts of each element\n    final_dict = {**count_dict, **original_count_dict}\n\n    # Return the final dictionary\n    return final_dict",
        "test": "assert count_Occurrence(('apple', 'banana', 'orange', 'apple', 'banana'), ['apple', 'banana', 'orange', 'grape','strawberry']) == {'apple': 3, 'banana': 2, 'orange': 1}",
        "num_ids": 654
    },
    {
        "number": 447,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 319
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the perrin numbers from 1 to n.\n    \"\"\"\n    sum_perrin = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            sum_perrin += i\n    return sum_perrin",
        "test": "assert cal_sum(1) == 0",
        "num_ids": 264
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) <= size:\n            extracted_strings.append(string)\n    return extracted_strings",
        "test": "assert extract_string(['apple', 'banana', 'cherry'], 2) == ['banana', 'cherry']",
        "num_ids": 370
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"",
        "num_ids": 280
    },
    {
        "number": 452,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0",
        "test": "assert loss_amount(1000,1000) == 0",
        "num_ids": 359
    },
    {
        "number": 453,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactorsSum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            evenFactorsSum += i\n    return evenFactorsSum",
        "test": "assert sumofFactors(1) == 0, \"Expected sumofFactors(1) to be 0, got {}\".format(sumofFactors(1))",
        "num_ids": 463
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog. The dog is still lazy.\") == True",
        "num_ids": 341
    },
    {
        "number": 455,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(1) == True, \"1 should have 31 days\"",
        "num_ids": 426
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 406
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n\n    return min_sublist",
        "test": "assert Find_Min([1,2,3,4,5,6,7]) == [1,2,3,4,5]",
        "num_ids": 434
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(2,3) == 6, \"The area of a rectangle with length 2 and breadth 3 should be 6.\"",
        "num_ids": 286
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'(?<!\\w)[A-Z][a-z]*(?!\\w)'\n    return re.sub(pattern, '', str1)",
        "test": "assert remove_uppercase(\"PYTHON is awesome\") == \"PYTHON is awesome\"",
        "num_ids": 282
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]",
        "test": "assert Extract([['apple', 'banana'], ['orange', 'kiwi']]) == ['apple', 'orange']",
        "num_ids": 420
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count",
        "test": "assert upper_ctr(\"Hello World\") == 2",
        "num_ids": 269
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations",
        "test": "assert combinations_list([1,2,3]) == [(1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]",
        "num_ids": 495
    },
    {
        "number": 463,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_product_start = 0\n    max_product_end = 0\n    current_product = 1\n    min_product = 1\n    \n    for i in range(len(arr)):\n        if i == 0:\n            current_product = arr[i]\n            min_product = arr[i]\n        elif i == len(arr) - 1:\n            current_product = arr[i]\n            if current_product > min_product:\n                min_product = current_product\n            else:\n                max_product = max(max_product, current_product)\n                current_product = 1\n                min_product = 1\n        else:\n            current_product = max(min_product * arr[i], arr[i])\n            if current_product > max_product:\n                max_product = current_product\n                max_product_start = i\n                max_product_end = i\n            else:\n                if current_product > min_product:\n                    min_product = current_product\n                \n    if max_product_start == 0:\n        return max_product * min_product\n    elif max_product_end == len(arr) - 1:\n        return max_product * min_product\n    else:\n        return max_product",
        "test": "assert max_subarray_product([2,3,-2,4]) == 6",
        "num_ids": 732
    },
    {
        "number": 464,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(1, n+1):\n        if dict.get(i)!= dict.get(1):\n            return False\n    return True",
        "test": "assert check_value({'a':1,'b':1,'c':1,'d':1,'e':1}, 1) == True",
        "num_ids": 356
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}",
        "num_ids": 423
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for num in arr[1:]:\n        temp_max = max(max_ending_here * num, max_so_far * num)\n        temp_min = min(min_ending_here * num, temp_max)\n        max_so_far = temp_max\n        max_ending_here = temp_max / num\n        min_ending_here = temp_min\n    return max_so_far",
        "test": "assert max_product([1, 2, 3, 4]) == 24",
        "num_ids": 632
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        num_elements = len(test_tup)\n        for i in range(num_elements):\n            for j in range(i+1, num_elements):\n                result = test_tup[i] + test_tup[j]\n                print(\"Addition of the neighboring elements is:\", result)",
        "test": "assert add_pairwise((4, 5, 6)) == (7, 9, 12)",
        "num_ids": 511
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product",
        "test": "assert find_remainder([2, 4, 6], 8) == 24",
        "num_ids": 369
    },
    {
        "number": 472,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 380
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection.append(i)\n    return tuple(intersection)",
        "test": "assert tuple_intersection((1, 2, 3), (2, 4, 6)) == (2,)",
        "num_ids": 582
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes in a string and two characters as arguments, replaces the first character with the second character, and returns the modified string.\n    \"\"\"\n    # Check if the input characters are valid\n    if not (isinstance(str1, str) and isinstance(ch, str) and isinstance(newch, str) and len(str1) > 0 and len(ch) > 0 and len(newch) > 0):\n        raise ValueError(\"Input characters must be strings and not empty.\")\n\n    # Initialize an empty string to hold the modified string\n    modified_str = \"\"\n\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character matches the first character, replace it with the second character\n        if char == ch:\n            modified_str += newch\n        # Otherwise, just add the character to the modified string\n        else:\n            modified_str += char\n\n    # Return the modified string\n    return modified_str",
        "test": "assert replace_char('hello','l','x') == 'hexxo'",
        "num_ids": 479
    },
    {
        "number": 475,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict\n",
        "test": "assert sort_counter({'apple': 2, 'banana': 1, 'cherry': 3}) == {'banana': 1, 'apple': 2, 'cherry': 3}",
        "num_ids": 426
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num",
        "test": "assert big_sum([]) == 0, \"Should return 0 for empty list\"",
        "num_ids": 434
    },
    {
        "number": 477,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower('Hello, World!') == 'hello, world!'",
        "num_ids": 177
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    regex = r'\\b[a-z]+\\b'\n    return re.sub(regex, '', str1)",
        "test": "assert remove_lowercase('Hello World') == 'Hello World'",
        "num_ids": 341
    },
    {
        "number": 479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as an argument and returns its first digit.\n    \"\"\"\n    return str(n)[0]",
        "test": "assert first_Digit(456) == 4",
        "num_ids": 218
    },
    {
        "number": 554,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 355
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_of_cubes(n):\n    return (n * (n + 1) * (2 * n + 1)) // 6\n\ndef sum_of_natural_numbers(n):\n    return n * (n + 1) // 2\n\ndef difference(n):\n    return abs(sum_of_cubes(n) - sum_of_natural_numbers(n))",
        "test": "assert difference(10) == 17150",
        "num_ids": 411
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes an array A and its length N as input\n    and returns the count of odd pairs in the array.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([2,4,6,8,10], 5) == 0",
        "num_ids": 490
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string",
        "test": "assert toggle_string(\"Hello, World!\") == \"hELLO, wORLD!\"",
        "num_ids": 290
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize the sum to 0\n    sum_diff = 0\n\n    # convert the integers to lists of digits\n    num1 = [int(digit) for digit in str(n1)]\n    num2 = [int(digit) for digit in str(n2)]\n\n    # loop through each digit of the two numbers\n    for i in range(max(len(num1), len(num2))):\n        # calculate the difference between the two digits\n        diff = abs(num1[i] - num2[i])\n\n        # add the difference to the sum\n        sum_diff += diff\n\n    # return the sum\n    return sum_diff",
        "test": "assert digit_distance_nums(12345, 67890) == 45 # test case 2",
        "num_ids": 710
    },
    {
        "number": 559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n    \n    for end_index in range(size):\n        current_sum += a[end_index]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = end_index - size + 1\n    \n    return a[start_index:start_index+size]",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 3) == 12",
        "num_ids": 626
    },
    {
        "number": 560,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    # Return the sorted list as the output\n    return union_list",
        "test": "assert union_elements((1, 3, 5, 7), (2, 4, 6, 8)) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 609
    },
    {
        "number": 562,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    if not lst:\n        return 0\n    max_length = 1\n    current_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n    if current_length > max_length:\n        max_length = current_length\n    return max_length",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 424
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values(\"This is a string with 'values' between them.\") == ['values']",
        "num_ids": 232
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,2,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10],10) == 16 # expected output",
        "num_ids": 475
    },
    {
        "number": 565,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 194
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Sum up the digits\n    return sum(digits)",
        "test": "assert sum_digits(12345) == 15",
        "num_ids": 363
    },
    {
        "number": 567,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([5, 4, 3, 2, 1]) == False, \"The list should not be sorted\"",
        "num_ids": 431
    },
    {
        "number": 568,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "test": "assert empty_list(5) == [{} for i in range(5)]",
        "num_ids": 150
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()",
        "test": "assert sort_sublists([[1,2],[\"hello\", \"world\"],[\"apple\", \"banana\"],[\"cherry\", \"mango\"],[1.2, 3.4]]) == [[1, 2], [\"apple\", \"banana\"], [\"cherry\", \"mango\"], [\"hello\", \"world\"], [1.2, 3.4]]",
        "num_ids": 513
    },
    {
        "number": 572,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set to store unique numbers\n    unique_nums = set()\n    # Iterate through each number in the list\n    for num in nums:\n        # If the number is not already in the set, add it\n        if num not in unique_nums:\n            unique_nums.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_nums)",
        "test": "assert two_unique_nums([1, 2, 3, 2, 1]) == [1, 2, 3]",
        "num_ids": 426
    },
    {
        "number": 573,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set of unique numbers from the input list\n    unique_numbers = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    \n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3628800",
        "num_ids": 338
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculating the surface area using the formula A = \u03c0r\u00b2h\n    A = 3.14 * r ** 2 * h\n    # Returning the surface area\n    return A",
        "test": "assert surfacearea_cylinder(2,3) == 6.283185307179586, 'Error in surfacearea_cylinder(2,3)'",
        "num_ids": 359
    },
    {
        "number": 576,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if A is a sublist of B\n    if B in A: \n        return True\n    else: \n        return False",
        "test": "assert is_Sub_Array([1,2,3,4], [4,5,6]) == False, \"The function is not working correctly.\"",
        "num_ids": 422
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial",
        "test": "assert last_Digit_Factorial(5) == 120  # correct output for input 5",
        "num_ids": 439
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i, j, k = 0, 0, 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n    return result",
        "test": "assert interleave_lists([1,2,3], [4,5,6], [7,8,9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 721
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list\n",
        "test": "assert find_dissimilar((1,2,3), (4,5,6)) == [3], \"Function find_dissimilar did not return expected dissimilar elements.\"",
        "num_ids": 430
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for t in test_tuple:\n        if all(even_fnc(x) for x in t):\n            result.append(t)\n    return result\n",
        "test": "assert even_ele([(1, 2), (3, 4, 5), (6, 7, 8, 9), (10, 11, 12, 13, 14)], lambda x: x % 2 == 0) == [(1, 2), (6, 7, 8, 9), (10, 11, 12, 13, 14)]",
        "num_ids": 458
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s",
        "test": "assert surface_Area(5,7) == 51, \"The surface area of a square pyramid with base edge 5 and height 7 is incorrect.\"",
        "num_ids": 245
    },
    {
        "number": 582,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 206
    },
    {
        "number": 583,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + 2*catalan_number(n-2)",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 289
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Using regular expressions to find the adverbs\n    adverbs = re.findall(r'\\b\\w+(?:ly)$\\b', text)\n    # Removing duplicates and returning the positions of the adverbs\n    return list(set(adverbs))",
        "test": "assert find_adverbs(\"The quick brown fox jumped over the lazy dog.\") == [(16, 23)]",
        "num_ids": 480
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap of n items\n    max_heap = []\n    for item in items:\n        if not max_heap or item[1] > max_heap[0][1]:\n            heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Extract the n most expensive items from the heap\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap))\n    return result",
        "test": "assert expensive_items([], 1) == []",
        "num_ids": 634
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l) or n < 0:\n        print(\"Invalid input\")\n    else:\n        l.insert(len(l), l[:n])\n        print(\"The new list is:\", l)",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 3) == [1, 2, [3, 4, 5]]",
        "num_ids": 430
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5), \"list_tuple([1, 2, 3, 4, 5]) should return (1, 2, 3, 4, 5)\"",
        "num_ids": 334
    },
    {
        "number": 588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    # find the maximum and minimum value in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    # return the difference between the maximum and minimum value\n    return max_val - min_val",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 0",
        "num_ids": 372
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store perfect squares\n    perfect_squares_list = []\n\n    # Loop through the range of a to b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        square = int(num**0.5)\n        if num == square**2:\n            # Append the perfect square to the list\n            perfect_squares_list.append(num)\n\n    # Return the list of perfect squares\n    return perfect_squares_list",
        "test": "assert perfect_squares(1, 5) == [1, 4]",
        "num_ids": 443
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return r*cmath.cos(theta), r*cmath.sin(theta)",
        "test": "assert polar_rect(3,4) == (3.605551275463989, 6.414213562373095)",
        "num_ids": 305
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1,2]) == [2,1]",
        "num_ids": 370
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n\n    # initialize variables\n    result = 0\n    factorial = 1\n\n    # calculate the factorial of n\n    for i in range(1, n + 1):\n        factorial *= i\n\n    # calculate the binomial coefficient\n    for i in range(n, k - 1, -1):\n        result += factorial // i\n        factorial //= i\n\n    return result",
        "test": "assert binomial_Coeff(0,0) == 1",
        "num_ids": 536
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)",
        "test": "assert removezero_ip('192.168.0.1') == '192.168.0.1'",
        "num_ids": 406
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    return even - odd",
        "test": "assert diff_even_odd([2, 4, 6, 8, 10]) == 0",
        "num_ids": 744
    },
    {
        "number": 595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n\n    # Convert the binary strings to integers\n    n1 = int(str1, 2)\n    n2 = int(str2, 2)\n\n    # Initialize variables for storing the count of swaps and the carry over from the last operation\n    count = 0\n    carry = 0\n\n    # Iterate through the bits of the binary strings\n    for i in range(len(str1)):\n        # Calculate the sum of the current bit and the carry over from the previous operation\n        bit_sum = (int(str1[i]) + carry) % 2\n\n        # If the bit is 1, then we need to swap bits\n        if bit_sum == 1:\n            # Calculate the position of the current bit in the binary string\n            bit_pos = len(str1) - 1 - i\n\n            # If the current bit is already 1 in the other string, then we don't need to swap it\n            if bit_sum == int(str2[bit_pos]):\n                continue\n\n            # Increment the count of swaps and the carry over\n            count += 1\n            carry = 1\n\n        # If the bit is 0, then we don't need to do anything with the carry over\n        else:\n            carry = 0\n\n    # If there are any left over bits in the last operation, then we need to swap them\n    if carry == 1:\n        count += 1\n\n    # Return the minimum number of swaps required to convert one binary number to another\n    return count",
        "test": "assert min_Swaps(\"0010\", \"0110\") == 1",
        "num_ids": 1128
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size",
        "test": "assert tuple_size(()) == 0, \"Empty tuple should have size 0 bytes\"",
        "num_ids": 291
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the midpoints of both arrays\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    \n    # If the first array has fewer elements than the second, swap the arrays and recurse with the swapped arrays\n    if len(arr1) < len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    # Check if k is in the first half of the first array\n    if k <= mid1:\n        return find_kth(arr1, arr1[:mid1], k)\n    \n    # Check if k is in the second half of the first array\n    elif k > mid1 + 1:\n        return find_kth(arr1[mid1+1:], arr1[mid1:], k - mid1 - 1)\n    \n    # If k is in the first half of the second array, find the kth element there\n    elif k <= mid1 + mid2:\n        return find_kth(arr2, arr2[:mid2], k)\n    \n    # If k is in the second half of the second array, find the kth element there\n    else:\n        return find_kth(arr2[mid2+1:], arr2[mid2:], k - mid2 - 1)",
        "test": "assert find_kth([1, 2, 3], [4, 5, 6], 1) == 1 # true",
        "num_ids": 1123
    },
    {
        "number": 598,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes an integer number as input and returns True if it is an Armstrong number, else False.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.\n    '''\n\n    # Convert the number to a string\n    str_num = str(number)\n\n    # Convert the string to a list of digits\n    digits = [int(digit) for digit in str_num]\n\n    # Calculate the sum of the digits raised to the power of the number of digits\n    sum_of_powers = sum([digit**len(digits) for digit in digits])\n\n    # Check if the sum of the digits raised to the power of the number of digits is equal to the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 541
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 1:\n        raise ValueError('Input must be a positive integer.')\n    sum_ = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_ += i\n        count += 1\n    average = sum_/count\n    return sum_, average",
        "test": "assert sum_average(10) == (55, 5.5)",
        "num_ids": 297
    },
    {
        "number": 600,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 227
    },
    {
        "number": 602,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count_dict = {}\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n            \n    for char in str1:\n        if count_dict[char] > 1:\n            return char\n            \n    return \"No repeated characters found.\"",
        "test": "assert first_repeated_char('hello') == 'l', \"Failed in testing of first_repeated_char function\"",
        "num_ids": 573
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if sum(int(digit) ** i for digit in str(i)) == i:\n            ludic_numbers.append(i)\n    return ludic_numbers",
        "test": "assert get_ludic(5) == [1, 2, 3, 4, 5]",
        "num_ids": 1437
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the words back into a string\n    result =''.join(reversed_words)\n    return result",
        "test": "assert reverse_words(\"the quick brown fox jumps over the lazy dog\") == \"over lazy dog jumps fox brown the quick\"",
        "num_ids": 373
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True, \"Expected True, got {}\".format(prime_num(2))",
        "num_ids": 275
    },
    {
        "number": 606,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 264
    },
    {
        "number": 607,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"hello world\", r\"hello\") == (\"hello\", 0, 5)",
        "num_ids": 485
    },
    {
        "number": 608,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n",
        "test": "assert bell_Number(0) == 0",
        "num_ids": 432
    },
    {
        "number": 610,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1.copy()\n    list2.pop(L-1)\n    return list2",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]",
        "num_ids": 335
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = 0\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_num:\n            max_num = test_list[i][N]\n    return max_num",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6]], 1) == 5",
        "num_ids": 547
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 398
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum variable to 0\n    cumulative_sum = 0\n    # loop through each element in the list\n    for element in test_list:\n        # add the element to the cumulative sum\n        cumulative_sum += element\n    # return the cumulative sum\n    return cumulative_sum",
        "test": "assert cummulative_sum((1, 2, 3, 4, 5)) == 15",
        "num_ids": 524
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = 0\n        count = 0\n        for sub_num in num:\n            total += sub_num\n            count += 1\n        averages.append(total/count)\n    return averages",
        "test": "assert average_tuple([[1,2,3],[4,5,6]]) == [2.0, 3.0]",
        "num_ids": 371
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have the same length!\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup",
        "test": "assert tuple_modulo((1,2,3,4,5), (2,3,4,5,6)) == (1,2,3,4,5)",
        "num_ids": 524
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    n = len(steps)\n    min_steps = 0\n    last_pos = -1\n\n    # iterate through steps\n    for i in range(n):\n        # check if the current step is the start point\n        if steps[i] == 0:\n            # initialize variables\n            steps_left = steps[i]\n            steps_taken = 1\n            current_pos = i\n\n            # iterate through steps from the current position to the end\n            while steps_left > 0 and current_pos < n - 1:\n                # check if the current position is the end point\n                if steps[current_pos + 1] == 0:\n                    # update minimum number of steps if necessary\n                    if steps_taken < min_steps:\n                        min_steps = steps_taken\n\n                    # move to the next step\n                    steps_left -= 1\n                    current_pos += 1\n                else:\n                    # move to the next step\n                    steps_left -= 1\n                    current_pos += 1\n                steps_taken += 1\n\n    # return the minimum number of steps\n    return min_steps",
        "test": "assert min_Jumps(10, 2) == 4",
        "num_ids": 855
    },
    {
        "number": 618,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([1, 2, 3, 4], [2, 2, 2, 2]) == [0.5, 1, 1.5, 2]",
        "num_ids": 527
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list)",
        "test": "assert move_num('hello') == 'hello123'",
        "num_ids": 289
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n < 2:\n        return 0\n\n    # Sort the given list\n    a.sort()\n\n    # Initialize two pointers\n    left = 0\n    right = n-1\n\n    # Initialize a variable to store the size of the largest subset\n    largest = 0\n\n    # Loop through the list and find the largest subset\n    while left < right:\n        if a[left] % a[right] == 0:\n            largest = max(largest, right-left+1)\n            left += 1\n            right -= 1\n        elif a[left] % a[right] < 0:\n            left += 1\n        else:\n            right -= 1\n\n    # Add the last element of the list if it is divisible by any element in the subset\n    if a[right] % a[left] == 0:\n        largest = max(largest, right-left+1)\n\n    return largest",
        "test": "assert largest_subset([2, 5, 10, 15, 20]) == 4",
        "num_ids": 793
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two sorted lists\n    merged = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_merged = sorted(merged)\n    \n    # Find the median index\n    mid = n // 2\n    if n % 2 == 0:\n        median_index = mid\n    else:\n        median_index = mid + 1\n    \n    # Return the median element\n    return sorted_merged[median_index]",
        "test": "assert get_median([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5) == 6.5",
        "num_ids": 566
    },
    {
        "number": 623,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1,2,3,4,5], 2) == [1, 4, 9, 16, 25]",
        "num_ids": 406
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 226
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Find the length of the list\n    n = len(newList)\n    # Check if the list has at least 2 elements\n    if n < 2:\n        # If the list has only 1 element, return the list\n        return newList\n    # Swap the first and last elements of the list\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    # Return the modified list\n    return newList",
        "test": "assert swap_List([1]) == [1]",
        "num_ids": 446
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    A = 1\n    h = 2*math.sin(math.pi/5)\n    h_sq = h*h\n    A_max = (1-r*r)/(2*h_sq)\n    return A_max",
        "test": "assert triangle_area(5) == 50.26548245743669",
        "num_ids": 597
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1",
        "test": "assert find_First_Missing([1,2,3,4,6]) == 5",
        "num_ids": 474
    },
    {
        "number": 628,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 130
    },
    {
        "number": 629,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 353
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def adjac(ele, sub=None):\n    \"\"\"\n    This function takes a coordinate tuple (x, y) as input and returns the\n    coordinates of all the adjacent cells in a grid. The adjacent cells are\n    given by the eight directional neighbours (north, south, east, west,\n    north-east, south-east, north-west, and south-west).\n\n    If the sub parameter is True, then the function will return the subgrid\n    coordinates instead of the main grid coordinates.\n\n    Example:\n    >>> adjac((3, 5))\n    [(3, 4), (3, 6), (4, 5), (4, 6), (5, 5), (5, 6), (6, 5), (6, 6)]\n    >>> adjac((3, 5), sub=True)\n    [(3, 5), (4, 5), (5, 5), (6, 5), (3, 6), (4, 6), (5, 6), (6, 6)]\n    \"\"\"\n\n    if sub:\n        x, y = ele\n        return [(x-1, y-1), (x-1, y), (x-1, y+1),\n                (x, y-1), (x, y+1),\n                (x+1, y-1), (x+1, y), (x+1, y+1)]\n    else:\n        x, y = ele\n        return [(x-1, y), (x, y-1), (x+1, y),\n                (x-1, y+1), (x, y+1), (x+1, y+1)]",
        "test": "assert adjac((3,2)) == [(4, 2), (4, 1), (4, 0), (3, 1), (3, 0), (2, 1), (2, 0)]",
        "num_ids": 816
    },
    {
        "number": 631,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 252
    },
    {
        "number": 632,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list",
        "test": "assert move_zero([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 662
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor",
        "test": "assert pair_xor_Sum([1,2,3,4,5],5) == 7",
        "num_ids": 495
    },
    {
        "number": 635,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    hq.heapify(iterable)\n\n    # extract the minimum element from the heap and insert it at the end\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        hq.heappop(iterable)\n\n    return sorted_list",
        "test": "assert heap_sort([]) == [], \"The input is an empty list, so no sorting is required.\"",
        "num_ids": 489
    },
    {
        "number": 637,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= 0:\n        return True\n    elif actual_cost == sale_amount:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(100,100) == True",
        "num_ids": 458
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_speed = v * 3.6  # convert km/h to m/s\n    return math.ceil(23.72 * (math.log(wind_speed) + 11.38 * (t - 273.15) / 2))",
        "test": "assert wind_chill(25, 20) == 10, \"The function should return 10 for v = 25 and t = 20.\"",
        "num_ids": 777
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length",
        "test": "assert sample_nam(['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Heidi']) == 27, \"The sum of the length of the names of the list after removing the lowercase letter names should be 27.\"",
        "num_ids": 478
    },
    {
        "number": 640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Find all the parenthesis in the string\n    parentheses = re.findall(r'\\([^)]*\\)', items)\n\n    # Remove the parenthesis and what is inbetween them\n    for parenthesis in parentheses:\n        items = items.replace(parenthesis, '')\n\n    return items",
        "test": "assert remove_parenthesis('The quick brown (fox) jumps over the lazy dog.') == 'The quick brown fox jumps over the lazy dog'",
        "num_ids": 400
    },
    {
        "number": 641,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n-1)) + (2 * (n-1))",
        "test": "assert is_nonagonal(1) == 1, \"The function is_nonagonal(1) returns a wrong result.\"",
        "num_ids": 353
    },
    {
        "number": 643,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    return pattern.search(text) is not None",
        "test": "assert text_match_wordz_middle('hello world') == False",
        "num_ids": 331
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(0, k):\n        input[0], input[n-i-1] = input[n-i-1], input[0]\n    print(\"Array reversed upto\", k, \"position:\", input)",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 0) == [5,4,3,2,1]",
        "num_ids": 494
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Using a list comprehension to create a new tuple with the added dictionary\n    new_tuple = (test_tup[0], test_tup[1], test_dict)\n    return new_tuple",
        "test": "assert add_dict_to_tuple(('a', 'b'), {'c': 1}) == ('a', 'b', {'c': 1})",
        "num_ids": 398
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_path_sum = float('-inf')\n    dp = [[0]*N for _ in range(N)]\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n    for k in range(1, N):\n        for i in range(N-k):\n            j = i+k\n            dp[i][j] = dp[i][j-1] + cost[i][j] + dp[i+1][j] - dp[i][j-1] - dp[i+1][j-1] - cost[i][j-1] - cost[i+1][j-1]\n            max_path_sum = max(max_path_sum, dp[i][j])\n    return max_path_sum / N**2",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]]) == 37.5 #example test case",
        "num_ids": 1029
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students\n",
        "test": "assert filter_data({'John':(1.6, 65.0), 'Bob':(1.8, 58.5), 'Alice':(1.6, 72.0), 'Tom':(1.7, 63.5), 'Sophia':(1.5, 55.0)}, 1.5, 50.0) == {'John':(1.6, 65.0), 'Bob':(1.8, 58.5), 'Sophia':(1.5, 55.0)}",
        "num_ids": 892
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 5",
        "num_ids": 532
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each digit of the base\n    for digit in str(base):\n        # Convert the digit to an integer\n        digit = int(digit)\n        # Add the digit to the sum to the power\n        sum += digit ** power\n    # Return the sum\n    return sum",
        "test": "assert power_base_sum(2, 10) == 1024, \"Incorrect result for power_base_sum(2, 10)\"",
        "num_ids": 541
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_quotation(\"I am a text with 'quotation marks' inside.\") == 'quotation marks'",
        "num_ids": 256
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup) - 1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "test": "assert multiply_elements((5,7,9)) == (35,42,49)",
        "num_ids": 597
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]",
        "test": "assert sum_list([1,2,3], [4,5,6]) == [5,7,9]",
        "num_ids": 404
    },
    {
        "number": 730,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))",
        "test": "assert consecutive_duplicates([1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 553
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*r*h + 2*math.pi*r**2\n",
        "test": "assert lateralsurface_cone(2,7) == 46.0, \"lateral surface area of a cone with radius 2 and height 7 should be 46.0\"",
        "num_ids": 392
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regex pattern to replace spaces, commas, or dots with a colon\n    pattern = r'[\\s.,]+'\n    # use re.sub() method to replace all occurrences of pattern in text with a colon\n    return re.sub(pattern, ':', text)",
        "test": "assert replace_specialchar(\"this is a test. please ignore\") == \"this:is:a:test:please:ignore\"",
        "num_ids": 337
    },
    {
        "number": 733,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 6) == -1",
        "num_ids": 809
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        sub_product = 1\n        for j in range(i, n):\n            sub_product *= arr[j]\n        result += sub_product\n    return result",
        "test": "assert sum_Of_Subarray_Prod([1,2,3,4,5]) == 120",
        "num_ids": 561
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Initialize variables\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n\n    # Toggle the middle bit\n    middle_bit = first_bit ^ last_bit\n\n    # Set the first and last bits to the same value\n    n = (n & 0xFFFFFFFF) ^ (middle_bit << 31)\n\n    # Set the middle bit to 0\n    n = (n & 0xFFFFFFFF) ^ (middle_bit << 30)\n\n    return n",
        "test": "assert set_middle_bits(12345) == 67891",
        "num_ids": 538
    },
    {
        "number": 736,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        if a[index] == x:\n            return index\n    return index + 1",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 466
    },
    {
        "number": 737,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('apple') == True",
        "num_ids": 303
    },
    {
        "number": 738,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1, \"Test case 1 failed\"",
        "num_ids": 246
    },
    {
        "number": 739,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    triangular_numbers = {}\n    for i in range(1, n+1):\n        triangular_numbers[i] = math.ceil(math.sqrt(i*i + 1)) - math.floor(math.sqrt(i*i + 1))\n    smallest_triangular = None\n    for tri in triangular_numbers.values():\n        if smallest_triangular is None or tri < smallest_triangular:\n            smallest_triangular = tri\n    return triangular_numbers[min(triangular_numbers, key=triangular_numbers.get)]",
        "test": "assert find_Index(1) == 1, \"The output of find_Index(1) should be 1.\"",
        "num_ids": 660
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d",
        "test": "assert tuple_to_dict((1, 2, 3, 4, 5)) == {1: 2, 3: 4, 5: 3}",
        "num_ids": 511
    },
    {
        "number": 741,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 2:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])",
        "test": "assert all_Characters_Same(\"hello\") == False",
        "num_ids": 236
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Find the semi-perimeter of the tetrahedron\n    semi_perimeter = (side * (3 + math.sqrt(10))) / 4\n\n    # Find the area of the tetrahedron using Heron's formula\n    area = math.sqrt(semi_perimeter * (semi_perimeter - side) * (semi_perimeter - side) * (semi_perimeter - side))\n\n    # Return the area of the tetrahedron\n    return area",
        "test": "assert area_tetrahedron(2) == 6",
        "num_ids": 408
    },
    {
        "number": 743,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n  # To handle the case where m is greater than n\n    \n    # Storing the last m items in a new list\n    right_rotated = list[-m:]\n    \n    # Removing the last m items from the list\n    for i in range(m-1, -1, -1):\n        list.pop()\n    \n    # Concatenating the last m items with the first m items in the list\n    for i in range(m):\n        list.append(right_rotated[i])\n    \n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 653
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3, None, 4)) == True",
        "num_ids": 287
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) in str(x) for digit in str(x)), range(startnum, endnum + 1)))",
        "test": "assert divisible_by_digits(100, 999) == [120, 150]",
        "num_ids": 863
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    \"\"\"\n    if a > 360:\n        return None\n    \n    # Calculating the radius of the sector\n    s = r * math.sin(math.radians(a))\n    \n    # Calculating the area of the sector\n    area = math.pi * (r ** 2)\n    \n    # Calculating the area of the circle which is inside the sector\n    circ_area = math.pi * (s ** 2)\n    \n    # Returning the total area of the sector\n    return area - circ_area",
        "test": "assert sector_area(1,180)==3.141592653589793, \"sector_area(1,180) should return 3.141592653589793\"",
        "num_ids": 559
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    This function uses dynamic programming approach to solve the problem.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Creating a 3D table to store lengths of LCS of three sequences\n    dp = [[[0] * (p + 1) for j in range(n + 1)] for i in range(m + 1)]\n\n    # Fill the table in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    # Backtracking to find the LCS\n    i = m\n    j = n\n    k = p\n    lcs = \"\"\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i - 1][j][k] == dp[i][j][k]:\n            i -= 1\n        elif dp[i][j - 1][k] == dp[i][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GXTXAYB\") == \"GTAB\"",
        "num_ids": 1467
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern for matching capitalized words\n    pattern = r'\\b[A-Z]\\w+\\b'\n    # Use the re.sub() method to substitute the pattern with a space\n    return re.sub(pattern,'', str1)",
        "test": "assert capital_words_spaces(\"  Hello  world   \") == \"Hello world\"",
        "num_ids": 428
    },
    {
        "number": 749,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Use a lambda function to convert each string to a float and sort it numerically\n    nums_sorted = sorted(nums_str, key=lambda x: float(x))\n    return nums_sorted",
        "test": "assert sort_numeric_strings(['1', '5', '9', '10', '12']) == ['1', '5', '9', '10', '12']",
        "num_ids": 589
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 265
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the root is smaller than its children\n    if i > 0:\n        if arr[i] < arr[i//2]:\n            return False\n    # Recursively check if the children are smaller\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case: empty array is a min heap\n    if len(arr) == 0:\n        return True\n    # Check if the root is smaller than its children\n    if arr[0] < arr[1]:\n        return False\n    # Recursively check the heap properties\n    return check_min_heap_helper(arr, 1)\n",
        "test": "assert check_min_heap_helper([5, 4, 3, 2, 1], 0) == False",
        "num_ids": 761
    },
    {
        "number": 752,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 0\n    else:\n        jacob_num = 0\n        for i in range(2, n+1):\n            jacob_num = (2*jacob_num - 1) % n\n        return jacob_num",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 723
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the test list by the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize the minimum records list and the minimum value found so far\n    min_records = []\n    min_value = float('inf')\n\n    # Iterate over the first K elements of the sorted list\n    for i in range(K):\n        # Check if the current value is smaller than the minimum value found so far\n        if sorted_list[i][1] < min_value:\n            # If yes, update the minimum value and add the corresponding tuple to the minimum records list\n            min_value = sorted_list[i][1]\n            min_records = [sorted_list[i]]\n        # If no, check if the current value is already in the minimum records list\n        elif sorted_list[i][1] == min_value:\n            # If yes, add the corresponding tuple to the list\n            min_records.append(sorted_list[i])\n\n    # Return the minimum records list\n    return min_records",
        "test": "assert min_k([(1,2,3),(4,5,6),(7,8,9),(10,11,12),(13,14,15)], 3) == (4, 5, 6)",
        "num_ids": 981
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty set to hold common elements\n    common = set()\n    # loop through each index in the lists\n    for i in range(min(len(l1), len(l2), len(l3))):\n        # check if the elements at the current index are the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # if they are, add the element to the set of common elements\n            common.add(l1[i])\n    # return the list of common elements\n    return list(common)",
        "test": "assert extract_index_list([1, 2, 3], [2, 2, 2], [1, 2, 3]) == [2]",
        "num_ids": 684
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "test": "assert second_smallest([5, 4, 3, 2, 1]) == 2",
        "num_ids": 384
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+a'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"The string '{text}' matches the pattern '{pattern}'.\")\n    else:\n        print(f\"The string '{text}' doesn't match the pattern '{pattern}'.\")",
        "test": "assert text_match_zero_one(\"aabb\") == \"Match found\"",
        "num_ids": 344
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count",
        "test": "assert count_reverse_pairs(['abc', 'def', 'ghi', 'jkl','mno']) == 0",
        "num_ids": 543
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1_tuples = tuple(tuple(x) for x in list1)\n    count_dict = {}\n    for t in list1_tuples:\n        if t in count_dict:\n            count_dict[t] += 1\n        else:\n            count_dict[t] = 1\n    return count_dict",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 549
    },
    {
        "number": 759,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    if len(num) > 1 and '.' in num:\n        # Check if the decimal part of the number has a precision of 2\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert is_decimal('1.00') == True",
        "num_ids": 390
    },
    {
        "number": 760,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # check if all elements in the dictionary have frequency 1\n    for value in freq.values():\n        if value > 1:\n            return False\n\n    # if we reach this point, all elements have frequency 1\n    return True",
        "test": "assert unique_Element([1,2,2,3,4,5]) == False",
        "num_ids": 498
    },
    {
        "number": 762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (datetime.date(2022, 2, 29).weekday() == 5):\n            return True\n        else:\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if (datetime.date(2022, 4, 30).weekday() == 5):\n            return True\n        else:\n            return False\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        if (datetime.date(2022, 2, 29).weekday() == 5):\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert check_monthnumber_number(3) == False",
        "num_ids": 747
    },
    {
        "number": 763,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the first and the last elements\n    min_diff = abs(arr[n-1] - arr[0])\n\n    # Initialize two pointers, left and right, to start at the first and last elements of the array, respectively\n    left, right = 0, n-1\n\n    # Move the left pointer to the right until it reaches the element before the first element\n    while left < right:\n        diff = arr[left+1] - arr[left]\n        if diff < min_diff:\n            min_diff = diff\n        left += 1\n\n    # Move the right pointer to the left until it reaches the element after the last element\n    while left < right:\n        diff = arr[right] - arr[right-1]\n        if diff < min_diff:\n            min_diff = diff\n        right -= 1\n\n    return min_diff",
        "test": "assert find_min_diff([1, 3, 5, 7, 9], 5) == 2",
        "num_ids": 773
    },
    {
        "number": 764,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr('12345') == 5",
        "num_ids": 236
    },
    {
        "number": 765,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find the nth polite number.\n    '''\n    num = 0\n    i = 2\n    while num < n:\n        if i % 2 == 0:\n            num += 2\n        else:\n            num += 1\n        i += 1\n    \n    return i",
        "test": "assert is_polite(2) == 3",
        "num_ids": 494
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 376
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 6) == 2",
        "num_ids": 458
    },
    {
        "number": 769,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns their difference using sets.\n    '''\n    # Convert both lists to sets to remove duplicates\n    set1 = set(li1)\n    set2 = set(li2)\n\n    # Calculate the difference of the two sets\n    diff_set = set1 - set2\n\n    # Convert the difference set back to a list and return it\n    return list(diff_set)",
        "test": "assert Diff([1,2,3,4,5],[4,5,6,7,8]) == [1,2,3]",
        "num_ids": 391
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        fourth_power = i ** 4\n        sum_of_fourth_powers += fourth_power\n    return sum_of_fourth_powers",
        "test": "assert odd_num_sum(2) == 127",
        "num_ids": 463
    },
    {
        "number": 771,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if len(stack) == 0 or (char == ')' and stack[-1]!= '(') or (char == ']' and stack[-1]!= '[') or (char == '}' and stack[-1]!= '{'):\n                return False\n            else:\n                stack.pop()\n    if len(stack)!= 0:\n        return False\n    else:\n        return True",
        "test": "assert check_expression('(a + b)') == True",
        "num_ids": 355
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    words_to_remove = []\n    for i, word in enumerate(words):\n        if len(word) == K:\n            words_to_remove.append(i)\n    for index in sorted(words_to_remove, reverse=True):\n        del words[index]\n    return''.join(words)",
        "test": "assert remove_length(\"hello world this is a test\", 3) == \"hello this is a\"",
        "num_ids": 375
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if matches:\n        return matches[0]\n    else:\n        return None",
        "test": "assert occurance_substring('Hello World',r'\\b(World)\\b') == ('World', 6)",
        "num_ids": 404
    },
    {
        "number": 775,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 3, 5, 7, 9]) == False",
        "num_ids": 577
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"\") == 0",
        "num_ids": 415
    },
    {
        "number": 777,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Convert the set to a list and sum the elements\n    sum_list = list(unique_set)\n    sum_sum = sum(sum_list)\n\n    return sum_sum",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15, \"find_sum([1, 2, 3, 4, 5]) should return 15.\"",
        "num_ids": 1470
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst)]",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 369
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {((1, 2, 3, 4), 1), ((5,), 1)}",
        "num_ids": 579
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            comb_list.append(test_list[i] + test_list[j])\n\n    # Create a set to remove duplicates\n    comb_set = set(comb_list)\n    return list(comb_set)",
        "test": "assert find_combinations([(1,2,3),(4,5),(6,7),(8,9)]) == [(1,4,7),(1,5,6),(1,8,5),(1,9,4),(2,5,8),(2,6,7),(3,6,5),(4,5,8),(4,6,7),(5,7,9),(6,7,9),(8,9,7)]",
        "num_ids": 1120
    },
    {
        "number": 781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert count_divisors(15) == 4, \"count_divisors(15) should return 4.\"",
        "num_ids": 448
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2 == 1:\n                total_sum += arr[j]\n    return total_sum",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 582
    },
    {
        "number": 783,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    # convert rgb to hsv\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    elif cmax == b:\n        h = (r - g) / delta + 4\n    h = h / 6\n    \n    # calculate hsv values\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    \n    if cmax == 0:\n        v = 0\n    else:\n        v = cmax / 255\n    \n    # return hsv values\n    return h, s, v",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0) # black",
        "num_ids": 919
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    # Count the number of even and odd numbers in the list\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Check if there are any even or odd numbers in the list\n    if even_count == 0 or odd_count == 0:\n        return None\n    \n    # Return the product of even and odd numbers\n    return even_count * odd_count",
        "test": "assert mul_even_odd([2, 4, 6, 8, 10]) == 84, \"The function should return 84\"",
        "num_ids": 556
    },
    {
        "number": 785,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string by commas and spaces\n    str_list = test_str.split(',')\n    # create a list of integer values\n    int_list = [int(x.strip()) for x in str_list]\n    # convert the list of integers into a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple",
        "test": "assert tuple_str_int(\"1, 2, 3\") == (1, 2, 3)",
        "num_ids": 329
    },
    {
        "number": 786,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 2) == 1",
        "num_ids": 451
    },
    {
        "number": 787,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{2})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three(\"abbabbabab\") == True",
        "num_ids": 340
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # Join the tuple with the given string and convert it back to a tuple\n    new_tuple = tuple(test_str.join(str(x) for x in test_tuple))\n    return new_tuple",
        "test": "assert new_tuple([1, 2, 3], 'a') == ((1, 2, 3), 'a')",
        "num_ids": 440
    },
    {
        "number": 790,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # iterate over the list of numbers\n    for i in range(0, len(nums), 2):\n        # check if the current index contains an even number\n        if nums[i] % 2 == 0:\n            # if so, check if the number is even\n            if nums[i] % 2 == 0:\n                # if it is, return True\n                return True\n    \n    # if the loop completes without returning True, return False\n    return False",
        "test": "assert even_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False",
        "num_ids": 470
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Create a new list to store the flattened tuple\n    flat_list = []\n    # Loop through each element of the original tuple\n    for elem in test_tup:\n        # Check if the element is a tuple, and if it is not, append it to the new list\n        if not isinstance(elem, tuple):\n            flat_list.append(elem)\n        else:\n            # If it is a tuple, recursively call the function and append the results to the new list\n            flat_list.extend(remove_nested(elem))\n    # Return the new list with all nested tuples removed\n    return flat_list",
        "test": "assert remove_nested((1, (2, (3, 4)), 5, 6)) == (1, 5, 6)",
        "num_ids": 587
    },
    {
        "number": 792,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "test": "assert count_list([]) == 0",
        "num_ids": 260
    },
    {
        "number": 793,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize variables\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    \n    # Find the last index of the element\n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # Return the result\n    return result",
        "test": "assert last([1,2,3,4,5],5) == 4",
        "num_ids": 660
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)",
        "test": "assert text_starta_endb(\"abbab\") == \"abab\"",
        "num_ids": 305
    },
    {
        "number": 796,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum",
        "test": "assert return_sum({}) == 0, \"return_sum({}) should return 0\"",
        "num_ids": 297
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    s = 0\n    for i in range(l, r+1, 2):\n        s += i\n    return s",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 289
    },
    {
        "number": 798,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15, \"The sum of [1, 2, 3, 4, 5] should be 15.\"",
        "num_ids": 304
    },
    {
        "number": 799,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return (n << d) | (n >> (32 - d)) & mask",
        "test": "assert left_rotate(0,1) == 0",
        "num_ids": 444
    },
    {
        "number": 800,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()",
        "test": "assert remove_all_spaces(\"   Hello  World    \") == \"HelloWorld\"",
        "num_ids": 216
    },
    {
        "number": 801,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(1, max(x, y, z) + 1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count",
        "test": "assert test_three_equal(1,2,3) == 3",
        "num_ids": 363
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return i+1",
        "test": "assert count_rotation([2, 4, 1, 3, 5]) == 2, \"Test failed for input [2, 4, 1, 3, 5]\"",
        "num_ids": 516
    },
    {
        "number": 803,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    It does this by iterating from 1 to the square root of the given number, and checking if the square of each number is equal to the given number.\n    If it is, then the given number is a perfect square.\n    \"\"\"\n    sqrt_n = int(n ** 0.5)  # Find the square root of n\n    for i in range(1, sqrt_n+1):\n        if i ** 2 == n:\n            return True\n    return False",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 459
    },
    {
        "number": 804,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([1, 2, 3, 4, 5]) == True, \"First test case failed.\"",
        "num_ids": 388
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list",
        "test": "assert max_sum_list([[1,2],[3,4]]) == [[3,4]]",
        "num_ids": 663
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    start = 0\n    max_run = 0\n    current_run = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the character is uppercase, increase the current run\n        if test_str[i].isupper():\n            current_run += 1\n        # If the character is not uppercase, check if the current run is longer than the previous max run\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                start = i - max_run + 1\n            # Reset the current run\n            current_run = 0\n\n    # Check if there is a maximum run of uppercase characters in the string\n    if max_run == 0:\n        return \"No uppercase characters found\"\n    else:\n        # Return the maximum run of uppercase characters\n        return test_str[start:start+max_run], max_run",
        "test": "assert max_run_uppercase(\"hello world!\") == (4, \"WORLD\")",
        "num_ids": 681
    },
    {
        "number": 807,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 294
    },
    {
        "number": 808,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Check if the length of the tuple is equal to K\n    if len(test_tup) == K:\n        return True\n    else:\n        return False",
        "test": "assert check_K((1, 2), 3) == False",
        "num_ids": 373
    },
    {
        "number": 809,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1,2,3), (1,2,4)) == False",
        "num_ids": 526
    }
]