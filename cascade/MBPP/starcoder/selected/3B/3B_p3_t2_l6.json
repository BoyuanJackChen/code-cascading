[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples to lists for easier comparison\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    \n    # Loop through the lists to find the shared elements\n    shared_list = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            shared_list.append(test_list1[i])\n    \n    # Return the shared list\n    return shared_list",
        "test": "assert similar_elements((1, 2, 3, 4, 5), (2, 3, 4, 5, 6)) == [2, 3, 4, 5]",
        "num_ids": 571
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, and False otherwise.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(123) == True, 'The function should return True for 123 as it is a non-prime number.'",
        "num_ids": 574
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of integers and returns the n largest integers in descending order.\n    '''\n    # create a min-heap of size n\n    heap = hq.nsmallest(n, nums)\n    \n    # return the min-heap as the result\n    return heap",
        "test": "assert heap_queue_largest([10, 20, 30, 40, 50], 5) == [50, 40, 30, 20, 10]",
        "num_ids": 501
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # convert the integer to binary string and count the number of ones in the string\n    binary_x = bin(x)[2:]\n    count = binary_x.count('1')\n\n    # if the count of ones is equal to the number of bits in the binary representation, then the two numbers differ at one bit position\n    if count == len(binary_x):\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 316
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words",
        "test": "assert find_char_long(\"python\") == [\"python\"]",
        "num_ids": 389
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 413
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Check if the input string is palindrome or not\n    if str == str[::-1]:\n        return 0\n    \n    # Initialize two pointers, left and right, to point to the first and last characters of the string, respectively\n    left = 0\n    right = len(str) - 1\n    \n    # Initialize a variable 'rotations' to 0\n    rotations = 0\n    \n    # Iterate while the left pointer is less than the right pointer\n    while left < right:\n        \n        # Check if the characters at the left and right pointers are equal\n        if str[left]!= str[right]:\n            \n            # If they are not, then the string is not a palindrome and we can stop iterating\n            break\n        \n        # If they are equal, then we need to rotate the string by one character to get the same string\n        else:\n            left += 1\n            right -= 1\n            rotations += 1\n            \n    # Return the number of rotations needed to get the same string\n    return rotations",
        "test": "assert find_Rotations(\"abccba\") == 0, \"Test case 2: Test function find_Rotations with 'abccba' input\"",
        "num_ids": 760
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return s\n    elif s[0] == ch:\n        return remove_Occ(s[1:],ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1],ch)\n    else:\n        return s[0] + remove_Occ(s[1:],ch)\n",
        "test": "assert remove_Occ(\"hello\", \"o\") == \"hell\"",
        "num_ids": 455
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Sort the row in ascending order\n        M[i].sort()\n        # Calculate the sum of the row\n        row_sum = sum(M[i])\n        # If the row sum is negative, reverse the row\n        if row_sum < 0:\n            M[i].reverse()\n    # Return the sorted matrix\n    return M",
        "test": "assert sort_matrix([[1],[2],[3]]) == [[1], [2], [3]]",
        "num_ids": 787
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input and returns its volume.\n    '''\n    volume = l * b * h\n    return volume",
        "test": "assert find_Volume(1,2,3) == 6",
        "num_ids": 230
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z_]+'\n    return bool(re.findall(pattern, text))",
        "test": "assert text_lowercase_underscore(\"a_b_c_d\") == True",
        "num_ids": 310
    },
    {
        "number": 17,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a",
        "test": "assert square_perimeter(5) == 20, \"square_perimeter(5) should return 20, but it returns {}\".format(square_perimeter(5))",
        "num_ids": 289
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def str_to_list(string, chars_to_remove):\n    '''\n    This function takes a string and a list of characters to be removed as input.\n    It then removes the characters from the string which are present in the list.\n    '''\n    list_to_remove = list(chars_to_remove)\n    result = []\n    for char in string:\n        if char not in list_to_remove:\n            result.append(char)\n    return ''.join(result)",
        "test": "assert str_to_list('abcdefg') == ['a', 'b', 'c', 'd', 'e', 'f', 'g']",
        "num_ids": 740
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # create a dictionary to store the occurrences of each element in the array\n    occurrences = {}\n\n    for num in arraynums:\n        # check if the element is already in the dictionary\n        if num in occurrences:\n            # if it is, return True\n            return True\n        else:\n            # otherwise, add 1 to the count in the dictionary\n            occurrences[num] = 1\n\n    # if we make it through the loop without finding any duplicates, return False\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 460
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x == 1:\n        return \"It's a woodball.\"\n    elif x == 2:\n        return \"It's a woodball!\"\n    elif x == 3:\n        return \"It's a woodball!!\"\n    else:\n        return \"It's not a woodball.\"",
        "test": "assert is_woodall(3) == True",
        "num_ids": 340
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    # calculate the reverse of the number and add 1\n    reverse_sum = int(reversed_num) + 1\n    # check if the original number is one less than twice the reverse\n    return num < reverse_sum",
        "test": "assert rev(1234) == True, \"1234 should be one less than twice its reverse.\"",
        "num_ids": 386
    },
    {
        "number": 57,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize max_num to the first number in the list\n    max_num = arr[0]\n    # Loop through the list and compare each digit to the previous largest number\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    # Return the max_num\n    return max_num",
        "test": "assert find_Max_Num([9, 8, 7, 6, 5]) == 9",
        "num_ids": 431
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-3,4) == True",
        "num_ids": 447
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 10*is_octagonal(n-1) + 5*is_octagonal(n-2)",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 272
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with each length\n    substring_count = defaultdict(int)\n    \n    # iterate over all possible substrings of length len(s)\n    for i in range(len(s)):\n        # iterate over all possible substrings of length len(s)-i-1\n        for j in range(i+1, len(s)+1):\n            # calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:j])\n            \n            # if the substring has a sum of digits equal to its length, increment the count in the dictionary\n            if substring_sum == len(s[i:j]):\n                substring_count[len(s[i:j])] += 1\n                \n    # return the total count of substrings with the given condition\n    return sum(substring_count.values())\n",
        "test": "assert count_Substrings(\"python is awesome\") == 8, \"Incorrect count\"",
        "num_ids": 621
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest",
        "test": "assert smallest_num([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 1",
        "num_ids": 304
    },
    {
        "number": 63,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        test_list (list): List of tuples, where each tuple represents a pair of integers.\n\n    Returns:\n        int: The maximum difference between available pairs in the given tuple list.\n\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([(1,2), (3,4), (5,6), (7,8), (9,10)]) == 8",
        "num_ids": 597
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks([(50, \"English\"), (40, \"Maths\"), (60, \"Science\")]) == [(40, \"Maths\"), (50, \"English\"), (60, \"Science\")]",
        "num_ids": 374
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: If the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: Add the first element to the sum of the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 372
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 335
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n % 2 == 0:\n        return bell_number(n//2) + bell_number((3*n+1)//2)\n    \n    if n % 2 == 1:\n        return bell_number(n//2) + bell_number((3*n+1)//2) + 1",
        "test": "assert bell_number(1) == 1, \"bell_number(1) should be 1.\"",
        "num_ids": 491
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A and returns True if it is monotonic and False otherwise.\n    A is assumed to be sorted in non-decreasing order.\n    '''\n    if len(A) == 1:\n        return True\n    \n    if A[0] <= A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[:-1])",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True, \"is_Monotonic failed for [1, 2, 3, 4, 5]\"",
        "num_ids": 462
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for sub in s:\n        if sub not in l:\n            return False\n    return True",
        "test": "assert is_sublist([1, 2, 3], [2, 3]) == True",
        "num_ids": 361
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    count = 0\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                count += 1\n                break\n    if count == len(Input)-1:\n        return True\n    else:\n        return False",
        "test": "assert find_equal_tuple([(1, 2), (3, 4)]) == True, \"Test 2: True\"",
        "num_ids": 445
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # define variables for sorting\n    n = len(nums)\n    gap = n\n\n    # loop until gap is no longer reduced\n    while gap > 1:\n        # reduce the gap size\n        gap = int(gap / 1.3)\n\n        # loop through the list\n        for i in range(n - gap):\n            # check if the current element is greater than the next element\n            if nums[i] > nums[i+gap]:\n                # swap the elements\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n\n    # return the sorted list\n    return nums",
        "test": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 824
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt_n = int(n ** 0.5) # Get the square root of n\n    if (sqrt_n * sqrt_n == n) or (sqrt_n * sqrt_n < n): # If the square root is a perfect square\n        return True\n    else:\n        return False",
        "test": "assert dif_Square(4) == True",
        "num_ids": 493
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_colors = []\n    current_pattern = \"\"\n    for color in colors:\n        if color not in pattern_colors:\n            pattern_colors.append(color)\n            current_pattern = color\n        else:\n            if current_pattern == color:\n                continue\n            else:\n                return False\n    if current_pattern not in patterns:\n        return False\n    return True",
        "test": "assert is_samepatterns([1, 2, 3], [2, 1, 3]) == True, \"Testing correctness of is_samepatterns function\"",
        "num_ids": 560
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            count = 0\n            for k in range(len(test_list[i])):\n                if test_list[i][k] % K!= 0:\n                    count += 1\n                else:\n                    break\n            if count == 0:\n                result.append((test_list[i], test_list[j]))\n    return result",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == [(1, 2, 3), (4, 5, 6)]",
        "num_ids": 565
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(11) == True, \"Test Failed: is_Diff(11) should return True, got False.\"",
        "num_ids": 232
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for i in s.split():\n        if len(i) % 2!= 0:\n            return False\n    return True",
        "test": "assert word_len(\"hello\") == False",
        "num_ids": 285
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a, b, c, d = 0, 1, 0, 0\n    for i in range(1, n+1):\n        a, b, c, d = a + b, a + c, a + d, a + b + c + d\n    return a",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 440
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*r**3\n    return v",
        "test": "assert volume_sphere(1) == 4.1887902047863905",
        "num_ids": 316
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_Char(strr):  \n    # initialize an empty string to store the character\n    char = \"\"\n    # loop through each character in the string\n    for c in strr:\n        # add the ASCII value of the character modulo 26 to the char string\n        char += chr((ord(c) + 26) % 26)\n    # return the character string\n    return char",
        "test": "assert get_Char('world') == 18, 'The character of \"world\" should be 18 (i.e. the ASCII value of the letter \"w\")'",
        "num_ids": 1449
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # Initialize sequence with the first two numbers\n    seq = [1, 1]\n    # Loop through the rest of the sequence\n    for i in range(2, n+1):\n        # If the number at index i is 1, add it to the sequence\n        if seq[i-1] == 1:\n            seq.append(i)\n        # If the number at index i is 0, multiply it by 2 and add it to the sequence\n        else:\n            seq.append(2*i)\n    # Return the nth number in the sequence\n    return seq[n-1]",
        "test": "assert sequence(1) == 1",
        "num_ids": 448
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4*pi*r**2",
        "test": "assert surfacearea_sphere(1) == math.pi*4*1**2, \"The surface area of a sphere with radius 1 is not correct.\"",
        "num_ids": 291
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    def centered_hexagonal(a, b):\n        \"\"\"\n        Helper function to find centered hexagonal numbers.\n        \"\"\"\n        return a * (3 * a ** 2 + b ** 2) + b * (2 * a ** 2 + b ** 2)\n\n    def centered_hexagonal_sum(n):\n        \"\"\"\n        Helper function to calculate the sum of centered hexagonal numbers.\n        \"\"\"\n        return centered_hexagonal(1, 1) + centered_hexagonal(2, 2) + centered_hexagonal(3, 3) + centered_hexagonal(4, 4) + centered_hexagonal(5, 5)\n\n    # Calculate the sum of centered hexagonal numbers\n    total_sum = centered_hexagonal_sum(n)\n\n    # Calculate the centered hexagonal number\n    hexagonal_num = total_sum - centered_hexagonal_sum(n - 1)\n\n    return hexagonal_num",
        "test": "assert centered_hexagonal_number(2) == 17",
        "num_ids": 614
    },
    {
        "number": 87,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({},{},{}) == {}",
        "num_ids": 583
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n",
        "test": "assert freq_count([1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 464
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    min_diff = float('inf')\n    closest = N\n    \n    # Loop through all numbers from 1 to N-1\n    for i in range(1, N):\n        # Calculate the difference between the current number and N\n        diff = abs(N-i)\n        # If the current difference is smaller than the minimum difference, update the minimum difference and closest number\n        if diff < min_diff:\n            min_diff = diff\n            closest = i\n    \n    return closest",
        "test": "assert closest_num(0) == 0",
        "num_ids": 393
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len",
        "test": "assert len_log(['hello', 'world']) == 5",
        "num_ids": 407
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
        "test": "assert find_substring(['hello', 'world', 'python', 'programming'], 'python') == True, \"find_substring(['hello', 'world', 'python', 'programming'], 'python') should return True\"",
        "num_ids": 439
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True",
        "test": "assert is_undulating(2) == True",
        "num_ids": 313
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,3) == 8, \"2^3!= 8\"",
        "num_ids": 232
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Use the itemgetter function from the operator module to select the second value from each tuple\n    test_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the index of the first tuple in the sorted list\n    return test_list[0][0]",
        "test": "assert index_minimum([(1, 3), (2, 1), (3, 4), (4, 2), (5, 5)]) == 1",
        "num_ids": 497
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 389
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(1) == 1",
        "num_ids": 355
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Helper function to flatten a list of lists\n    def flatten(lst):\n        return [item for sublist in lst for item in sublist]\n\n    # Flatten the list of lists\n    flat_list = flatten(list1)\n\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Iterate over the flattened list and count the frequency of each element\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict",
        "test": "assert frequency_lists([[], [1], [2, 3]]) == {1: 1, 2: 1, 3: 1}",
        "num_ids": 763
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Multiply all the numbers and divide with the length of the list\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "test": "assert multiply_num([4, 5, 6]) == 30",
        "num_ids": 320
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal number to binary string with no leading zeros\n    binary = bin(n)[2:]\n    # If binary string is empty, return \"0\"\n    if not binary:\n        return \"0\"\n    # Pad the binary string with zeros to make it of equal length as the original decimal number\n    while len(binary) < len(str(n)):\n        binary = \"0\" + binary\n    return binary",
        "test": "assert decimal_to_binary(10) == \"1010\"",
        "num_ids": 435
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def next_smallest_palindrome(num):\n    while True:\n        num_str = str(num)\n        num_str_rev = num_str[::-1]\n        if num_str == num_str_rev:\n            return int(num_str)\n        num += 1",
        "test": "assert next_smallest_palindrome(999) == 1000",
        "num_ids": 607
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None",
        "test": "assert kth_element([1, 2, 3, 4, 5], 6) == None",
        "num_ids": 460
    },
    {
        "number": 102,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def snake_to_camel(word):\n    # Split the word into a list of words using snake_case\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one\n    camel_case = [words[0]] + [word.capitalize() for word in words[1:]]\n    # Join the words into a camelCase string\n    return ''.join(camel_case)",
        "test": "assert snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 279
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return m\n    elif n == 1:\n        return 2 * m\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)",
        "test": "assert eulerian_num(10, 7) == 508770592, \"The correct output is 508770592\"",
        "num_ids": 495
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()",
        "test": "assert sort_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [[1, 2, 3], [1, 2, 3], [1, 2, 3]]",
        "num_ids": 526
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n",
        "test": "assert count([False, False, True, True, True]) == 0, \"The output of count([False, False, True, True, True]) is not correct.\"",
        "num_ids": 373
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Add the list to the end of the tuple\n    test_tup += (test_list,)\n    return test_tup",
        "test": "assert add_lists([], (1, 2, 3)) == ([1, 2, 3],)",
        "num_ids": 332
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # combine three lists into one sorted list\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list\n",
        "test": "assert merge_sorted_list([],[],[]) == [], \"The function should return an empty list if all the input lists are empty\"",
        "num_ids": 669
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    odd_count = 0\n    binary_string = bin(int(s))[2:]  # convert string to binary and remove the '0b' prefix\n    for i in range(n):\n        binary_string = binary_string[-1:] + binary_string[:-1]\n    for i, digit in enumerate(binary_string):\n        if int(digit) % 2 == 1:\n            odd_count += 1\n    return odd_count",
        "test": "assert odd_Equivalent('101', 2) == 2",
        "num_ids": 581
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    set1 = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        set2 = set(nestedlist[i])\n        set1 = set1.intersection(set2)\n    common = list(set1)\n    return common",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [4, 5]",
        "num_ids": 392
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer('123') == True",
        "num_ids": 252
    },
    {
        "number": 115,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d) > 0:\n            return False\n    return True",
        "test": "assert empty_dit([{'a': 1}, {'b': 2}, {'c': 3}]) == False",
        "num_ids": 338
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total",
        "test": "assert tuple_to_int((1, 2, 3, 4, 5)) == 15",
        "num_ids": 288
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list",
        "test": "assert list_to_float([[1,'2',3], [4.5,6], ['7',8]]) == [[1.0, 2.0, 3.0], [4.5, 6.0], [7.0, 8.0]], \"list_to_float should convert all possible convertible elements in a list of lists to floats.\"",
        "num_ids": 677
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the list of strings\n    return string.split()",
        "test": "assert string_to_list('hello world') == ['hello', 'world']",
        "num_ids": 237
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]",
        "test": "assert search([4, 5, 5, 5, 6, 7, 8]) == 5",
        "num_ids": 497
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n\n    return max_product",
        "test": "assert max_product_tuple([[1,-2],[-3,4],[5,-6]]) == (-3, 4)",
        "num_ids": 566
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # create a list of tuples containing all possible pairs of numbers from 1 to limit\n    pairs = [(i, limit - i) for i in range(1, limit)]\n    \n    # initialize variables for sum of amicable numbers and sum of all numbers\n    amicable_sum = 0\n    all_sum = 0\n    \n    # iterate over the pairs list and check if the sum of the numbers is a multiple of 2\n    for pair in pairs:\n        if pair[0] + pair[1] == 28:\n            amicable_sum += pair[0] + pair[1]\n        all_sum += pair[0] + pair[1]\n        \n    return amicable_sum, all_sum",
        "test": "assert amicable_numbers_sum(100) == 233168",
        "num_ids": 785
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    angle_rad = cmath.phase(a+b*1j)\n    angle_deg = angle_rad * 180 / cmath.pi\n    angle_str = \"{:.2f}\".format(angle_deg)\n\n    print(\"The angle of\", a, \"and\", b, \"is\", angle_str, \"degrees.\")",
        "test": "assert angle_complex(3-4j,5+6j) == 1.8999289595842564j",
        "num_ids": 428
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff",
        "test": "assert find_length('1011111') == 2",
        "num_ids": 1733
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)\n\nprint(sum(12, 24)) # Output: 12",
        "test": "assert sum(15,30) == 30, \"sum of common divisors of 15 and 30 is not equal to 30\"",
        "num_ids": 600
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6, \"multiply_int failed for x=2, y=3\"",
        "num_ids": 204
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def long_words(n, words):\n    '''\n    This function takes in a list of words and an integer n as input. It then loops through the list of words and checks whether each word is longer than n characters. If it is, the word is added to a new list. Finally, the new list is returned.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list",
        "test": "assert long_words(3, ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'juniper', 'kumquat', 'lemon','mango', 'nectarine', 'olive', 'orange', 'papaya', 'pineapple', 'plum', 'raspberry','strawberry', 'tangerine', 'watermelon', 'watermelon']) == ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'juniper', 'kumquat', 'lemon','mango', 'nectarine', 'olive', 'orange', 'papaya', 'pineapple', 'plum', 'raspberry','strawberry', 'tangerine', 'watermelon']",
        "num_ids": 1252
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the sum of all elements in the matrix\n    total = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum is equal to the product of the matrix dimensions\n    if total == sum(range(1, len(my_matrix[0]) + 1)):\n        return True\n    else:\n        return False",
        "test": "assert magic_square_test([[1,2,3],[4,5,6],[7,8,9]]) == False",
        "num_ids": 636
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_freq = 0\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 2, 3, 3, 4, 4, 4, 5, 5]) == 4",
        "num_ids": 552
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels and not char.islower():\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = char + reversed_str\n    return reversed_str[::-1]",
        "test": "assert reverse_vowels(\"Hello World\") == \"olleH\"",
        "num_ids": 307
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)",
        "test": "assert tup_string(('a', 'b', 'c')) == \"('a', 'b', 'c')\"",
        "num_ids": 227
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "test": "assert sum_negativenum([-2, 3, -1, -5, 2]) == 8",
        "num_ids": 429
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    return n * (2 * factorial(n) + 1) // 3\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 370
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = array('i')\n    non_zeroes = array('i')\n\n    for num in nums:\n        if num == 0:\n            zeroes.append(1)\n        else:\n            non_zeroes.append(1)\n\n    zero_count = float(sum(zeroes)) / sum(non_zeroes)\n    print(\"The ratio of zeroes to non-zeroes in the array is:\", zero_count)",
        "test": "assert zero_count([0]) == 1, \"zero_count([0]) should return 1\"",
        "num_ids": 587
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Function to check if a number can be represented as sum of powers of 2\n    def is_powers_of_two(n):\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n = n >> 1\n        return count == 0\n    \n    # Check if the given number can be represented as sum of powers of 2\n    if n == 0:\n        return True\n    elif is_powers_of_two(n) or is_powers_of_two(~n):\n        return True\n    else:\n        return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True, \"Failed test case: 1\"",
        "num_ids": 716
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n\n    Parameters:\n    r (float): The radius of the circle\n\n    Returns:\n    float: The circumference of the circle\n    \"\"\"\n    circumference = 2 * 3.14159 * r  # pi * r\n    return circumference",
        "test": "assert circle_circumference(5) == 31.4159, \"The correct answer is 31.4159, but you returned: {}\".format(circle_circumference(5))",
        "num_ids": 343
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if type(item) == list:\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "test": "assert extract_singly([[1, 2], [3, [4, 5]]]) == [1, 2, 3, 4, 5]",
        "num_ids": 430
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # find the length of the list\n    n = len(nums)\n    \n    # create an empty list to store the sorted numbers\n    sorted_nums = []\n    \n    # loop through the numbers, starting from the last number and pancaking it\n    for i in range(n-1, -1, -1):\n        \n        # pancake the current number i\n        for j in range(i, 0, -1):\n            if nums[j] > nums[j-1]:\n                nums[j], nums[j-1] = nums[j-1], nums[j]\n        \n        # add the sorted number to the sorted_nums list\n        sorted_nums.append(nums[i])\n    \n    return sorted_nums",
        "test": "assert pancake_sort([3, 2, 1]) == [1, 2, 3]",
        "num_ids": 702
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]) == 0",
        "num_ids": 415
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "test": "assert find_lists((1, 2, (3, 4, (5, 6)))) == 2",
        "num_ids": 321
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n\n    Args:\n    arr: A list of numbers\n\n    Returns:\n    The maximum absolute difference between any two elements in the array.\n    \"\"\"\n\n    # Initialize variables to keep track of minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # Iterate through the array and find the minimum and maximum values\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    # Calculate the maximum absolute difference between any two elements in the array\n    max_diff = max_val - min_val\n\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 630
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Calculate the determinant of the matrix A with a and b as the entries\n    det = a * b - a * n / b\n    if det == 0:\n        return None\n\n    # Calculate the determinant of the matrix A^T with a and b as the entries\n    det_transpose = a * b - b * n / a\n    if det_transpose == 0:\n        return None\n\n    # Calculate the determinant of the matrix C with a and b as the entries\n    c = (a * b) / det\n    if c == 0:\n        return None\n\n    # Calculate the determinant of the matrix D with a and b as the entries\n    d = (b * b) / det\n\n    # Calculate the inverse of the matrix C\n    c_inv = 1 / c\n\n    # Calculate the determinant of the matrix A^2 + D^2 * C^2\n    det_root = (a * a + d * d) * c_inv\n\n    # Calculate the square root of the determinant of the matrix A^2 + D^2 * C^2\n    det_sqrt = det_root ** 0.5\n\n    # Calculate the x and y coordinates of the solution\n    x = -c / det_root\n    y = -d / det_sqrt\n\n    return (int(x), int(y))",
        "test": "assert find_solution(3, 4, 24) == (2, 3)",
        "num_ids": 757
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list",
        "test": "assert remove_elements([1, 2, 3, 4, 5, 6, 7], [2, 4, 6]) == [1, 3, 5, 7]",
        "num_ids": 459
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        return (n // 2) * (n - 1)\n    else:\n        return (n // 2) * (n - 2) + n",
        "test": "assert sum_series(0) == 0",
        "num_ids": 360
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += (s * (s - pi) * tan(pi/l))\n    return area",
        "test": "assert area_polygon(5, 6) == (5 * 5) * (3 * (tan(pi/6) ** 2) + (tan(pi/6) ** 2))",
        "num_ids": 418
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return (sum(divisors) == n)",
        "test": "assert div_sum(12) == False, \"div_sum(12) should return False\"",
        "num_ids": 463
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == chr(ord('a') + count):\n            count += 1\n    return count",
        "test": "assert count_char_position(\"hello\") == 0, \"count_char_position('hello') should return 0\"",
        "num_ids": 639
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0 and (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 1",
        "num_ids": 480
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 353
    },
    {
        "number": 168,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,2,4,5,4,3,2,1],2) == 3",
        "num_ids": 350
    },
    {
        "number": 170,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_list += i\n    return sum_list",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 5) == 15",
        "num_ids": 645
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * math.sqrt(5) * a\n    perimeter = circumference * 5\n    return perimeter",
        "test": "assert perimeter_pentagon(10) == 40",
        "num_ids": 340
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count",
        "test": "assert count_occurance('std') == 1 # std occurs once in the string \"Hello std\"",
        "num_ids": 320
    },
    {
        "number": 222,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = test_tuple[0]\n    for element in test_tuple:\n        if not isinstance(element, type(first_element)):\n            return False\n    return True",
        "test": "assert check_type((1, 2, 'a', True)) == False",
        "num_ids": 436
    },
    {
        "number": 223,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif count > 0:\n            count -= 1\n    if count == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1, 2, 3, 3, 3, 4, 4, 4, 5], 9, 4) == False",
        "num_ids": 625
    },
    {
        "number": 224,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(15) == 4 # 4 set bits in 15 (1011)",
        "num_ids": 453
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def odd_values_string(string):\n    # create a new string with only the odd values\n    result = ''\n    for i in range(len(string)):\n        if i % 2!= 0:\n            result += string[i]\n    return result",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 284
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 296
    },
    {
        "number": 228,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function returns True if all the bits are set in the given range and False otherwise.\n\n    Parameters:\n    n (int): An integer representing the number of bits in the range.\n    l (int): An integer representing the starting bit of the range.\n    r (int): An integer representing the ending bit of the range.\n\n    Returns:\n    bool: True if all the bits are set in the given range and False otherwise.\n\n    Example:\n    >>> all_Bits_Set_In_The_Given_Range(10, 0, 9)\n    True\n    >>> all_Bits_Set_In_The_Given_Range(10, 0, 10)\n    False\n    \"\"\"\n    if l < 0 or r >= n or l > r:\n        return False\n    if r - l + 1 == n:\n        return True\n    return all_Bits_Set_In_The_Given_Range(n, l + 1, r)",
        "test": "assert all_Bits_Set_In_The_Given_Range(7, 1, 4) == False",
        "num_ids": 618
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Create an empty list to store the new array\n    new_arr = []\n\n    # Loop through the first n elements of the original array\n    for i in range(n):\n        # Append the current element to the new array\n        new_arr.append(arr[i])\n\n    # Loop through the remaining elements of the original array\n    for i in range(n, len(arr)):\n        # Check if the current element is negative\n        if arr[i] < 0:\n            # If it is, check if it has already been appended to the new array\n            for j in range(n):\n                if arr[i] == new_arr[j]:\n                    # If it has, skip it and continue to the next element\n                    continue\n            # If it hasn't been appended yet, append it to the new array\n            new_arr.append(arr[i])\n\n    return new_arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1232
    },
    {
        "number": 230,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)",
        "test": "assert replace_blank(\"hello world\", \"*\") == \"hello*world\"",
        "num_ids": 233
    },
    {
        "number": 232,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        elif num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return list(heap)",
        "test": "assert larg_nnum([], 5) == []",
        "num_ids": 495
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # Define the formula for the lateral surface area of a cylinder\n    lateral_surface_area = 2 * pi * (r**2 + h**2)\n\n    return lateral_surface_area",
        "test": "assert lateralsuface_cylinder(4,6)==36, \"lateral surface area should be 36\"",
        "num_ids": 409
    },
    {
        "number": 234,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume",
        "test": "assert volume_cube(3) == 27, \"volume_cube(3) is incorrect\"",
        "num_ids": 202
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #initialize a variable to store the even bits of the number\n    even_bits = 0\n    #loop through each bit of the number\n    for i in range(32):\n        #if the current bit is even\n        if n & (1 << i):\n            #set the corresponding bit of the even_bits variable to 1\n            even_bits |= (1 << i)\n    #return the even_bits variable\n    return even_bits",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 441
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict",
        "test": "assert check_occurences([('apple', 3), ('banana', 2), ('apple', 5), ('orange', 1), ('grape', 4), ('orange', 2)]) == {'apple': 11, 'banana': 2, 'orange': 4, 'grape': 1}",
        "num_ids": 420
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            if str[i:j] and len(str[i:j]) > 1:\n                count += 1\n    return count",
        "test": "assert number_of_substrings('aaa') == 3",
        "num_ids": 340
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1,m):\n        if i < 2*i or i > m:\n            count += 1\n    return count",
        "test": "assert get_total_number_of_sequences(10,5) == 65, \"Function is incorrect\"",
        "num_ids": 458
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > 0:\n        list1[-1] = list2\n        return list1\n    else:\n        return None",
        "test": "assert replace_list([1, 2, 3, 4, 5], [6, 7, 8, 9]) == [1, 2, 3, 4, [6, 7, 8, 9]]",
        "num_ids": 361
    },
    {
        "number": 242,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"Hello, World!\") == 13 # correctness check",
        "num_ids": 226
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # finding the square root of N\n    square_root = int(math.sqrt(N))\n    \n    # using trial division to check if the square root is a perfect square\n    for i in range(square_root, 0, -1):\n        if i * i == N:\n            # if it is, find the next perfect square after it\n            next_square = i * i + 1\n            while next_square <= N:\n                next_square *= 2\n            return next_square\n    \n    # if the square root is not a perfect square, return the square root + 1\n    return square_root + 1",
        "test": "assert next_Perfect_Square(1) == 2",
        "num_ids": 483
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Find the maximum sum of a decreasing subsequence\n    max_sum_decreasing = max(arr)\n\n    # Find the maximum sum of a decreasing subsequence using a sliding window approach\n    max_sum_decreasing_window = 0\n    curr_sum_decreasing_window = 0\n    for i in range(1, n):\n        curr_sum_decreasing_window += arr[i]\n        if curr_sum_decreasing_window > max_sum_decreasing_window:\n            max_sum_decreasing_window = curr_sum_decreasing_window\n\n    # Find the maximum sum of a increasing subsequence\n    max_sum_increasing = 0\n    for i in range(n - 2, -1, -1):\n        curr_sum_increasing = 0\n        for j in range(i, n):\n            curr_sum_increasing += arr[j]\n            if curr_sum_increasing > max_sum_increasing:\n                max_sum_increasing = curr_sum_increasing\n\n    return max(max_sum_decreasing, max_sum_increasing, max_sum_decreasing_window)",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 2153
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n\n    The babylonian method is based on the fact that the square root of a number is a\n    rational number that represents the quotient of two numbers whose product is the number itself.\n\n    Example:\n\n    >>> babylonian_squareroot(9)\n    3.0\n\n    >>> babylonian_squareroot(16)\n    4.0\n\n    >>> babylonian_squareroot(25)\n    5.0\n\n    The babylonian method converges very quickly for small values of the number, but can be\n    unstable for larger values. However, for larger values, the error in the approximation\n    is usually small, especially if the number is very close to a perfect square.\n\n    \"\"\"\n\n    # First, check if the number is negative. If it is, we cannot compute its square root.\n    if number < 0:\n        raise ValueError(\"Number must be non-negative\")\n\n    # If the number is 0 or 1, its square root is 0 or 1, respectively.\n    if number == 0 or number == 1:\n        return number\n\n    # Otherwise, we start with an initial guess of 1. We will use this to compute the square root.\n    guess = 1\n\n    # We will keep track of the number of iterations in the loop.\n    count = 0\n\n    # We will use a tolerance of 1e-6 to stop the loop when we are reasonably confident that\n    # the square root is accurate.\n    while True:\n        # We compute the new guess for the square root by computing the square of the current guess\n        # and dividing by the number. We also add a factor of 1/2 to the denominator to ensure that\n        # the result is a rational number.\n        new_guess = (guess**2 + number) / (2 * guess)\n\n        # If the difference between the current guess and the new guess is less than the\n        # tolerance, we have converged and can stop the loop.\n        if abs(guess - new_guess) < 1e-6:\n            return new_guess\n\n        # If the number of iterations exceeds 1000, we have failed to converge and can raise an error.\n        if count > 1000:\n            raise ValueError(\"Unable to converge to a root with the specified tolerance\")\n\n        # We update the guess for the next iteration.\n        guess = new_guess\n\n        # We increment the count of iterations.\n        count += 1",
        "test": "assert babylonian_squareroot(9) == 3",
        "num_ids": 888
    },
    {
        "number": 247,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lps(s):\n    if not s:\n        return 0\n\n    n = len(s)\n    dp = [1] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1] + 2\n        else:\n            dp[i] = max(dp[i - 1], dp[i - 2])\n\n    return max(dp)",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 644
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "test": "assert harmonic_sum(1) == 1.0",
        "num_ids": 365
    },
    {
        "number": 249,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert arrays to sets to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    # Find intersection of sets\n    intersection_set = set_nums1.intersection(set_nums2)\n    # Convert set back to list\n    intersection_list = list(intersection_set)\n    # Return intersection list\n    return intersection_list",
        "test": "assert intersection_array([1, 2, 2, 1], [2, 2]) == [2]",
        "num_ids": 454
    },
    {
        "number": 250,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1 \n    return count",
        "test": "assert count_X((1, 2, 3, 2, 1), 2) == 2, \"count_X function is not working correctly\"",
        "num_ids": 373
    },
    {
        "number": 251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.extend(list[i:])\n    return result",
        "test": "assert insert_element([1,2,3,4,5],6) == [1,2,3,4,5,6]",
        "num_ids": 455
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function converts complex numbers to polar coordinates.\n    \n    Parameters:\n    numbers (list): List of complex numbers to be converted.\n    \n    Returns:\n    polar_coordinates (list): List of polar coordinates corresponding to the input numbers.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        real, imag = number.real, number.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates",
        "test": "assert convert([3+2j, 4+5j, 6+7j]) == [(3, 2), (4, 5), (6, 7)], \"Incorrect output of convert\"",
        "num_ids": 415
    },
    {
        "number": 253,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1,2,3,4,5,6,7,8,9]) == 4",
        "num_ids": 336
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'green', 'blue', 'yellow']\n    combinations = []\n    \n    for i in range(len(l) - n + 1):\n        combination = tuple(l[j] for j in range(i, i+n))\n        if combination in combinations:\n            continue\n        combinations.append(combination)\n    \n    return combinations",
        "test": "assert combinations_colors(['red', 'green', 'blue'], 3) == [('red', 'green', 'blue')]",
        "num_ids": 477
    },
    {
        "number": 256,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4, \"count_Primes_nums(10) should return 4\"",
        "num_ids": 447
    },
    {
        "number": 257,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 194
    },
    {
        "number": 259,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # compare the first element of each tuple\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 572
    },
    {
        "number": 260,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    p = 2\n    count = 1\n    prime = True\n    \n    while prime and count < n:\n        # Check if p is a newman-shanks-williams prime\n        if is_newman_shanks_williams_prime(p):\n            count += 1\n            prime = True\n        else:\n            p += 1\n    \n    if count == n:\n        return p\n    else:\n        return \"The nth newman-shanks-williams prime number does not exist.\"\n\ndef is_newman_shanks_williams_prime(n):\n    '''\n    Helper function to check if a number is a newman-shanks-williams prime.\n    '''\n    # Check if n is a multiple of 2\n    if n % 2 == 0:\n        return False\n    \n    # Check if n is divisible by any odd number less than or equal to sqrt(n)\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    \n    return True",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 704
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the tuples must be equal.\")\n        return\n\n    # Perform the element-wise division operation\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n\n    # Return the result\n    return result_tup",
        "test": "assert division_elements((2,4), (2,4)) == (1, 1)",
        "num_ids": 580
    },
    {
        "number": 262,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])",
        "test": "assert split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == ([1, 2, 3, 4], [5, 6, 7, 8, 9])",
        "num_ids": 490
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years",
        "test": "assert dog_age(7) == 5, \"dog_age(7) should return 5\"",
        "num_ids": 230
    },
    {
        "number": 265,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1,2,3,4,5,6,7,8,9], 2) == [[1,2], [3,4], [5,6], [7,8], [9]]",
        "num_ids": 522
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2",
        "test": "assert lateralsurface_cube(3) == 36, \"The function should return 36 for side length of 3.\"",
        "num_ids": 307
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum",
        "test": "assert square_Sum(10) == 2550, \"square_Sum(10) should return 2550\"",
        "num_ids": 321
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    '''\n    This function takes a positive integer n as input, and returns then'th star number.\n    '''\n    # initialize the variable star_num to 1\n    star_num = 1\n\n    # loop n-1 times and add 1 to star_num each time\n    for i in range(n-1):\n        star_num += 1\n\n    # return the final value of star_num\n    return star_num",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 422
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 204
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "test": "assert sum_even_and_even_index([2, 4, 6, 8, 10]) == 20",
        "num_ids": 484
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initializing a variable to store the sum of even numbers raised to fifth power\n    sum_of_even_numbers = 0\n\n    # iterating from 2 to n\n    for i in range(2, n+1):\n\n        # checking if the number is even\n        if i % 2 == 0:\n\n            # raising the number to the fifth power and adding it to the sum\n            sum_of_even_numbers += i**5\n\n    return sum_of_even_numbers",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 412
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list",
        "test": "assert rear_extract([(7, 8), (9, 10)]) == [9, 10]",
        "num_ids": 328
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))",
        "test": "assert substract_elements((), ()) == (), 'Should return () for empty input'",
        "num_ids": 443
    },
    {
        "number": 274,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize the sum and sum of squares\n    sum = 0\n    sum_sq = 0\n    # loop through the first n even numbers and add the even binomial coefficients to the sum and sum of squares\n    for i in range(2, n+1, 2):\n        coeff = math.comb(n, i-1)\n        sum += coeff\n        sum_sq += coeff * coeff\n    # return the sum of even index binomial coefficients\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 431
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14 * r ** 2 * h\n    return volume",
        "test": "assert volume_cylinder(2,3) == 14.14213562373095, \"Incorrect volume calculation for radius=2, height=3\"",
        "num_ids": 422
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}",
        "test": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 2) == {'b': 2, 'c': 3, 'd': 4, 'e': 5}",
        "num_ids": 443
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count",
        "test": "assert count_first_elements((1,2,3,4,5,6)) == 0",
        "num_ids": 354
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the first row of the decagonal matrix\n    matrix = [[1]]\n\n    # Check if the nth decagonal number is greater than the number of rows in the matrix\n    if n > len(matrix):\n        return \"Invalid input: n is greater than the number of rows in the decagonal matrix.\"\n\n    # Calculate the number of rows in the matrix up to n\n    rows = n\n\n    # Initialize the sum variable for the nth decagonal number\n    decagonal_sum = 0\n\n    # Loop through each row in the matrix\n    for i in range(1, rows+1):\n        # Add the sum of the previous row with the i-th column of the matrix\n        decagonal_sum += matrix[i-1][0]\n\n        # If the current row is the last row in the matrix, add the first column of the matrix\n        if i == rows:\n            decagonal_sum += matrix[i-1][1]\n\n        # Add the row to the matrix\n        matrix.append([decagonal_sum])\n\n    # Return the nth decagonal number\n    return decagonal_sum",
        "test": "assert is_num_decagonal(10) == 55",
        "num_ids": 585
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 464
    },
    {
        "number": 281,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to set to remove duplicates\n    unique_list = set(test_list)\n    # check if the length of the set is equal to the length of the list\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1,2,3,4,5]) == True, \"all_unique([1,2,3,4,5]) == True\"",
        "num_ids": 372
    },
    {
        "number": 282,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list containing the subtraction of the corresponding elements of the input lists.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    sub = []\n    for i in range(len(nums1)):\n        sub.append(nums1[i] - nums2[i])\n    return sub",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3] # test case 1",
        "num_ids": 425
    },
    {
        "number": 283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def validate(n): \n    '''\n    This function takes an integer as input and checks if the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # iterate through the digits of the integer\n    for digit in str(n):\n        # if the digit is already in the dictionary, increment its frequency by 1\n        if digit in freq:\n            freq[digit] += 1\n        # otherwise, add the digit as a key in the dictionary and set its frequency to 1\n        else:\n            freq[digit] = 1\n\n    # iterate through the keys of the dictionary and check if their frequency is greater than or equal to the value of the key\n    for key in freq:\n        if freq[key] < key:\n            return False\n\n    # if all digits pass the frequency check, return True\n    return True",
        "test": "assert validate(132) == False, \"132 should be false\"",
        "num_ids": 525
    },
    {
        "number": 284,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    for item in list:\n        if item!= element:\n            return False\n\n    return True",
        "test": "assert check_element([1, 2, 3], 2) == False # test for a list containing some 2's and some 3's",
        "num_ids": 330
    },
    {
        "number": 285,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"a[b]*b\"\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_two_three('aabbbb') == True, \"text_match_two_three function should return True for 'aabbbb'.\"",
        "num_ids": 1326
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    This function takes an array a, its size n, and the number of times the array should be repeated k. \n    It returns the maximum sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    The algorithm to solve this problem is:\n    1. Calculate the sum of the first n elements of the array a.\n    2. Calculate the sum of the first k elements of the array a.\n    3. Calculate the sum of the first (n+k) elements of the array a.\n    4. Find the difference between the two sums and the sum of the first (n+k) elements.\n    5. Return the difference.\n\n    Complexity: O(n)\n    '''\n    # Step 1: Calculate the sum of the first n elements of the array a.\n    sum_n = sum(a[:n])\n\n    # Step 2: Calculate the sum of the first k elements of the array a.\n    sum_k = sum(a[:k])\n\n    # Step 3: Calculate the sum of the first (n+k) elements of the array a.\n    sum_n_plus_k = sum(a[:n+k])\n\n    # Step 4: Find the difference between the two sums and the sum of the first (n+k) elements.\n    diff = abs(sum_k - sum_n_plus_k)\n\n    # Step 5: Return the difference.\n    return diff",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 2) == 12",
        "num_ids": 816
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 308
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns the list of maximum length.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)",
        "test": "assert max_length([[1,2,3],[4,5,6]]) == 3, \"max_length([[1,2,3],[4,5,6]]) should return 3\"",
        "num_ids": 469
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    for i in range(1, n + 1):\n        if i <= k:\n            dp[i] = 1\n        else:\n            for j in range(1, min(i, k) + 1):\n                dp[i] += dp[i - j]\n    \n    return dp[n]",
        "test": "assert count_no_of_ways(5, 3) == 5",
        "num_ids": 784
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient",
        "test": "assert find(4,2) == 2",
        "num_ids": 197
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n\n    Parameters:\n    w (float): the length of the base of the triangle\n    h (float): the length of the height of the triangle\n\n    Returns:\n    float: the third side of the right angled triangle\n    \"\"\"\n    return math.sqrt(w**2 + h**2)",
        "test": "assert otherside_rightangle(3,4) == 5, \"Wrong answer for w=3 and h=4\"",
        "num_ids": 336
    },
    {
        "number": 294,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize maximum value and its index to be the first element of the list\n    max_val = listval[0]\n    max_index = 0\n\n    # iterate over the remaining elements of the list\n    for i in range(1, len(listval)):\n        # if the current element is greater than the maximum value, update both values and indices\n        if listval[i] > max_val:\n            max_val = listval[i]\n            max_index = i\n\n    # return the maximum value and its index\n    return max_val, max_index",
        "test": "assert max_val([4, 2.5, \"hello\", \"world\", 5]) == 5",
        "num_ids": 392
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum",
        "test": "assert sum_div(28) == 34  # 28 has 1, 2, 4, 7, and 14 as divisors",
        "num_ids": 404
    },
    {
        "number": 296,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    def merge(arr, left, mid, right):\n        \"\"\"\n        Merge two sorted sub-arrays.\n        \"\"\"\n        n1 = mid - left + 1\n        n2 = right - mid\n\n        L = [0] * n1\n        R = [0] * n2\n\n        for i in range(n1):\n            L[i] = arr[left + i]\n\n        for j in range(n2):\n            R[j] = arr[mid + 1 + j]\n\n        i = 0\n        j = 0\n        k = left\n\n        while i < n1 and j < n2:\n            if L[i] <= R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < n1:\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < n2:\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\n    def merge_sort(arr, left, right):\n        \"\"\"\n        Sort an array using merge sort.\n        \"\"\"\n        if left < right:\n            mid = (left + right) // 2\n\n            merge_sort(arr, left, mid)\n            merge_sort(arr, mid + 1, right)\n\n            merge(arr, left, mid, right)\n\n    merge_sort(arr, 0, len(arr) - 1)\n    inv_count = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[0]:\n            inv_count += (len(arr) - i)\n\n    return inv_count",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 993
    },
    {
        "number": 297,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list and flattens it into a single,\n    one-dimensional list.\n    \"\"\"\n    flattened = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened",
        "test": "assert flatten_list([[1, 2], [3, [4, [5]]]]) == [1, 2, 3, 4, 5]",
        "num_ids": 476
    },
    {
        "number": 299,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int) # create defaultdict for storing max_values\n    \n    # iterate over the list of tuples\n    for item in stdata:\n        # add the values to the defaultdict\n        max_dict[item[0]] += item[1]\n        \n    # find the maximum value from the defaultdict\n    max_val = max(max_dict.values())\n        \n    # return the maximum value as the result\n    return max_val",
        "test": "assert max_aggregate([(1, 2), (3, 4), (5, 6)]) == 6, \"Failed on case 1\"",
        "num_ids": 492
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        sum1 = sum(int(i) for i in binary[:n])\n        sum2 = sum(int(i) for i in binary[-n:])\n        if sum1 == sum2:\n            count += 1\n    return count",
        "test": "assert count_binary_seq(1) == 2 # case 1",
        "num_ids": 455
    },
    {
        "number": 301,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()))\n    elif isinstance(d, list):\n        return 1 + max(map(dict_depth, d))\n    else:\n        return 0",
        "test": "assert dict_depth({\"a\": 1}) == 1",
        "num_ids": 431
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, a list of ranges, a number of rotations, and an index.\n    It calculates the index of the element that needs to be found after the number of rotations.\n    It returns the element at that index.\n    '''\n    # Initialize the count variable to keep track of the number of rotations\n    count = 0\n    \n    # Initialize the current element to the first element of the array\n    current = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Calculate the new current element after rotating\n        new_current = (current + i) % len(arr)\n        \n        # Check if the current element is in the range specified by the ranges list\n        if (count + i) % len(ranges) == index:\n            return arr[new_current]\n        \n        # Increment the count variable for the next rotation\n        count += 1\n        \n        # Check if the count variable has reached the number of rotations\n        if count == rotations:\n            return arr[new_current]\n    \n    # If the count variable has not reached the number of rotations, return the current element\n    return current",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[2,4]],1,2)==3 # rotations=1, index=2",
        "num_ids": 1076
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # create a regular expression pattern to match words starting with letter 'p'\n    pattern = r'^p.*'\n    \n    # use the pattern to find all words in the list that start with letter 'p'\n    matches = re.findall(pattern, words)\n    \n    # return the two words that match the pattern\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None",
        "test": "assert start_withp(['apple', 'banana', 'pear', 'peach', 'pineapple']) == ('pear', 'peach')",
        "num_ids": 486
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index, k - 1)\n\n    if k == index:\n        if n - k + 1 >= index:\n            return a[k] * (n - k + 1)\n        else:\n            return 0\n\n    max_sum = max_sum_increasing_subseq(a, n, index, k - 1)\n\n    if a[k] > a[index]:\n        max_sum += a[k]\n\n    if n - k + 1 >= index:\n        max_sum += a[n - k + 1] * (n - index)\n    else:\n        max_sum += 0\n\n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq([10, 22, 9, 33, 21, 50, 41, 60, 80], 8, 3, 10) == 100",
        "num_ids": 1294
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple to avoid modifying original\n    tuplex_copy = deepcopy(tuplex)\n    # Get the number of elements in the tuple\n    size = len(tuplex_copy)\n    # Loop through the tuple and print the elements in a colon\n    for i in range(m, m+n):\n        # If the index is greater than or equal to the size of the tuple, skip it\n        if i >= size:\n            continue\n        # If the index is not greater than or equal to the size of the tuple, print the element\n        print(tuplex_copy[i], end=' ')\n    # Print a newline character after printing all the elements\n    print()",
        "test": "assert colon_tuplex((1,2,3),(1,2,3,4),3) == ((1, 2, 3), (1, 2, 3, 4))",
        "num_ids": 551
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize variables to keep track of the largest products and their indices\n    largest_product = float('-inf')\n    largest_indices = (0, 0)\n\n    # loop through all possible combinations of two factors\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)+1):\n            # calculate the product of the two factors\n            product = nums1[i] * nums2[j-1]\n            # update the largest product if the product is greater than the current largest product\n            if product > largest_product:\n                largest_product = product\n                largest_indices = (i, j-1)\n                # check if we've found the desired number of largest products\n                if N == 1:\n                    break\n\n    # return the indices of the largest products\n    return largest_indices",
        "test": "assert large_product([1, 2, 3, 4], [5, 6, 7, 8], 3) == [56, 40, 36]",
        "num_ids": 1062
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(5, 2) == 5",
        "num_ids": 192
    },
    {
        "number": 310,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"\") == ()",
        "num_ids": 205
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the binary string of n to an integer\n    n = int(n, 2)\n\n    # Set the leftmost unset bit to 1\n    mask = ~(1 << 31)\n    n |= mask\n\n    # Convert the updated integer back to a binary string\n    n = bin(n)[2:]\n\n    # Check if the updated binary string is equal to the original binary string\n    if n == bin(n)[2:]:\n        return 0\n    else:\n        return 1",
        "test": "assert set_left_most_unset_bit(5) == 0, \"Incorrect value for set_left_most_unset_bit(5)\"",
        "num_ids": 595
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h",
        "test": "assert volume_cone(1,2) == math.pi*(1**2)*2, \"The volume of a cone with radius 1 and height 2 should be equal to pi times the square of the radius and twice the height.\"",
        "num_ids": 399
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # calculate the power of 2 that is less than or equal to n\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 <<= 1\n\n    # return the highest power of 2 less than or equal to n\n    return power_of_2 >> 1",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 425
    },
    {
        "number": 389,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 295
    },
    {
        "number": 390,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "test": "assert add_string([\"apple\", \"banana\", \"cherry\"], \"{0} is a fruit.\") == [\"apple is a fruit.\", \"banana is a fruit.\", \"cherry is a fruit.\"]",
        "num_ids": 297
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # initialize an empty dictionary\n    data = {}\n    \n    # loop through each list and add the values to the nested dictionary\n    for i, list in enumerate([l1, l2, l3]):\n        for value in list:\n            # get the key for the nested dictionary\n            key = f\"list{i+1}\"\n            \n            # check if the key already exists in the dictionary\n            if key in data:\n                # if it does, add the new value to the list of values for that key\n                data[key].append(value)\n            else:\n                # if it doesn't, create a new key-value pair for the dictionary\n                data[key] = [value]\n    \n    return data",
        "test": "assert convert_list_dictionary([1, 2, 3], [4, 5, 6], [7, 8, 9]) == {'list1': [1, 2, 3], 'list2': [4, 5, 6], 'list3': [7, 8, 9]}",
        "num_ids": 575
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 12\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 556
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for element in input_list:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_list = [element]\n        elif len(str(element)) == max_length:\n            max_list.append(element)\n    \n    return max_list",
        "test": "assert max_length_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 509
    },
    {
        "number": 394,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True",
        "test": "assert check_distinct((1, 2, 3, 4)) == True",
        "num_ids": 295
    },
    {
        "number": 395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        # If the character is already present in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not present in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Find the first non-repeated character in the frequency dictionary\n    for char, freq in freq.items():\n        if freq == 1:\n            return char\n\n    # If all characters are repeated, return None\n    return None",
        "test": "assert first_non_repeating_character(\"hello\") == \"e\"",
        "num_ids": 521
    },
    {
        "number": 396,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(pattern, string))",
        "test": "assert check_char('a') == True",
        "num_ids": 341
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = [a, b, c]\n    sorted_list.sort()\n    \n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[len(sorted_list)//2 - 1] + sorted_list[len(sorted_list)//2])/2\n    else:\n        median = sorted_list[len(sorted_list)//2]\n    \n    return median",
        "test": "assert median_numbers(1,2,3) == 2.0",
        "num_ids": 508
    },
    {
        "number": 398,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    total = 0\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = [int(d) for d in str(num)]\n        # Add up the digits\n        total += sum(digits)\n    # Return the total sum\n    return total",
        "test": "assert sum_of_digits([123, 456, 789]) == 45",
        "num_ids": 382
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "test": "assert bitwise_xor((1,2,3,4,5),(6,7,8,9,10)) == (7,10,13,15,15)",
        "num_ids": 466
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    unique_tuples = len(unique_tuples)\n    return unique_tuples",
        "test": "assert extract_freq([1, 2, 3, 4, 5]) == 5",
        "num_ids": 468
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize result tuple of length max of input tuples\n    result = tuple()\n    # Check if both input tuples are not empty\n    if len(test_tup1) > 0 and len(test_tup2) > 0:\n        # Check if both input tuples have the same number of elements\n        if len(test_tup1) == len(test_tup2):\n            # Iterate over all elements of the input tuples\n            for i in range(len(test_tup1)):\n                # Add the i-th element of both input tuples\n                result += (test_tup1[i] + test_tup2[i],)\n            return result\n        else:\n            # If input tuples have different numbers of elements, return None\n            return None\n    else:\n        # If input tuples are empty, return None\n        return None",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))",
        "num_ids": 698
    },
    {
        "number": 404,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2,3) == 2",
        "num_ids": 176
    },
    {
        "number": 405,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True \n    return False ",
        "test": "assert check_tuplex((1,2,3),(4,5)) == False, \"Test case 2 failed\"",
        "num_ids": 288
    },
    {
        "number": 406,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0: \n        return False\n    else: \n        return True",
        "test": "assert find_Parity(12) == False",
        "num_ids": 330
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    digits.sort(reverse=True)\n    result = 0\n    for i, digit in enumerate(digits):\n        if i == 0:\n            result = digit * 10 ** (len(digits) - 1)\n        else:\n            result += digit * 10 ** (len(digits) - 1 - i)\n    return result\n",
        "test": "assert rearrange_bigger(123456789) == 987654321",
        "num_ids": 661
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap",
        "test": "assert k_smallest_pairs([1,1,2], [1,2,3], 2) == [[1,1],[1,2]]",
        "num_ids": 870
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables\n    min_product = float('inf')\n    \n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # Update the minimum product if this is the first product found\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product",
        "test": "assert min_product_tuple([(-2, 3), (-3, 4), (-5, 1), (2, 6), (7, 0)]) == (-5, 3)",
        "num_ids": 781
    },
    {
        "number": 410,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num",
        "test": "assert min_val([3, 5, 2, 8, 1]) == 1, \"min_val([3, 5, 2, 8, 1]) should return 1.\"",
        "num_ids": 422
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    regex = re.compile(r'_(.?)')\n    camel_case = regex.sub(r'_\\1', word)\n    return camel_case.capitalize()",
        "test": "assert snake_to_camel('snake_case') =='snakeCase'",
        "num_ids": 354
    },
    {
        "number": 412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Removes odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list",
        "test": "assert remove_odd([2, 4, 6, 8, 10]) == [2, 4, 6, 8]",
        "num_ids": 340
    },
    {
        "number": 413,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1] # Returning the nth element of the list",
        "test": "assert extract_nth_element([(1,2),(3,4),(5,6),(7,8)], 2) == (3,4)",
        "num_ids": 404
    },
    {
        "number": 414,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Initialize an empty set to store the common values\n    common_values = set()\n\n    # Iterate through the first list\n    for item in list1:\n        # If the item exists in the second list, add it to the set of common values\n        if item in list2:\n            common_values.add(item)\n\n    # If the set is not empty, return True, otherwise return False\n    return bool(common_values)",
        "test": "assert overlapping([1],[]) == False, \"Error: overlapping([1],[])!= False\"",
        "num_ids": 447
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n    \n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n        if i < min1:\n            min2 = min1\n            min1 = i\n        elif i < min2:\n            min2 = i\n            \n    return max1 * max2, min1 * min2",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == (2, 2)",
        "num_ids": 611
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for tup in Input:\n        if len(set(tup[1:])) == 1:\n            return tup[0]\n    return None",
        "test": "assert group_tuples([(1,2,3), (4,5,6), (7,8,9), (1,2,3)]) == (1,)",
        "num_ids": 489
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def Find_Max(lst): \n    max_len = 0 \n    max_elem = None\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem\n    return max_elem",
        "test": "assert Find_Max([]) == None, \"The list is empty and should return None\"",
        "num_ids": 330
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))\n",
        "test": "assert round_and_sum([1.2, 3.4, 5.6, 7.8, 9.0]) == 42.4 and \\",
        "num_ids": 504
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 275
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    concatenated_str = \"\"\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]",
        "test": "assert concatenate_tuple(('apple', 'banana', 'cherry')) == 'apple|banana|cherry'",
        "num_ids": 328
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(n+1):\n        sum += i**3\n        count += 1\n    average = sum/count\n    return average",
        "test": "assert find_Average_Of_Cube(0) == 0",
        "num_ids": 406
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_tuple = []\n    for string in test_tuple:\n        rear_tuple.append(string[-1])\n    return rear_tuple",
        "test": "assert extract_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\")) == \"elderberry\"",
        "num_ids": 327
    },
    {
        "number": 425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, 2, 1, 2], 3) == 1",
        "num_ids": 361
    },
    {
        "number": 426,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 317
    },
    {
        "number": 427,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching the date format in yyyy-mm-dd format\n    pattern = re.compile(r'\\d{4}-\\d{2}-\\d{2}')\n    # Find all matches of the pattern in the input string\n    matches = pattern.findall(dt)\n    # Check if there is at least one match\n    if len(matches) == 0:\n        return dt\n    # Extract the date part from the first match and replace it with the new format\n    date = matches[0].split('-')\n    new_date = '-'.join([date[2], date[1], date[0]])\n    return new_date",
        "test": "assert change_date_format(\"2021-06-10\") == \"10-06-2021\"",
        "num_ids": 503
    },
    {
        "number": 428,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n        \n    return my_list",
        "test": "assert shell_sort([8,4,2,1,3]) == [1,2,3,4,8]",
        "num_ids": 706
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2, test_tup1 & test_tup2))",
        "test": "assert and_tuples((7, 8, 9), (10, 11, 12)) == ((7, 10), (8, 11), (9, 12))",
        "num_ids": 512
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    if disc >= 0:\n        return (-b + disc**0.5)/(2*a)\n    else:\n        return (-b - disc**0.5)/(2*a)",
        "test": "assert parabola_directrix(1, -3, 2) == 2",
        "num_ids": 316
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set of all the elements in list1\n    set1 = set(list1)\n    # Loop through all the elements in list2\n    for element in list2:\n        # If the element is in set1, it means it's a common element\n        if element in set1:\n            return True\n    # If we make it through the loop without returning True, there's no common element\n    return False",
        "test": "assert common_element([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == True",
        "num_ids": 491
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5*(base1+base2)*height\n    # calculate the length of the shorter base\n    shorter_base = min(base1,base2)\n    # calculate the length of the longer base\n    longer_base = max(base1,base2)\n    # calculate the length of the middle base\n    middle_base = (shorter_base+longer_base)/2\n    # calculate the sum of the middle base and the shorter base\n    sum_middle = middle_base + shorter_base\n    # calculate the sum of the middle base and the longer base\n    sum_longer = middle_base + longer_base\n    # check which sum is closer to the height\n    if abs(sum_middle-height)<abs(sum_longer-height):\n        return middle_base\n    else:\n        return longer_base",
        "test": "assert median_trapezium(1,2,3) == 2",
        "num_ids": 915
    },
    {
        "number": 433,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if number > i:\n            greater = True\n            break\n    return greater",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 343
    },
    {
        "number": 434,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b*)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one(\"aaaabbbb\") == True",
        "num_ids": 280
    },
    {
        "number": 435,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(1234) == 4, \"last_Digit(1234) should return 4\"",
        "num_ids": 271
    },
    {
        "number": 436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([1, -2, 3, -4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 363
    },
    {
        "number": 437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result",
        "test": "assert remove_odd(\"world\") == \"world\"",
        "num_ids": 323
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns the number of pairs of tuples that have opposite pairs in the list.\n\n    Input:\n        test_list: A list of tuples.\n\n    Output:\n        The number of pairs of tuples that have opposite pairs in the list.\n    \"\"\"\n\n    # Initialize a counter variable to keep track of the number of pairs of tuples that have opposite pairs in the list.\n    count = 0\n\n    # Loop through the list of tuples.\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the two tuples have opposite pairs in the list.\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n\n    # Return the number of pairs of tuples that have opposite pairs in the list.\n    return count",
        "test": "assert count_bidirectional(['apple', 'banana', 'apple', 'pear', 'grape']) == 14",
        "num_ids": 621
    },
    {
        "number": 439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result to 0\n    result = 0\n    \n    # Iterate over all the elements in the list\n    for num in L:\n        # If the current element is not a multiple of 5, add it to the result\n        if num % 5!= 0:\n            result += num\n    \n    # Return the result\n    return result",
        "test": "assert multiple_to_single([4,5,6]) == 456",
        "num_ids": 493
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'(\\b\\w+\\b|\\b\\w+\\s+\\w+\\b)'\n    matches = re.findall(pattern, text)\n\n    if not matches:\n        return \"No adverbs found in the sentence.\"\n\n    first_adverb = matches[0]\n    adverb_positions = re.findall(r'\\b\\w+\\b|\\b\\w+\\s+\\w+\\b', text)\n    adverb_positions = [match for match in adverb_positions if match!= first_adverb]\n\n    return f\"The first adverb is '{first_adverb}', and it appears at positions: {', '.join(str(position) for position in adverb_positions)}\"",
        "test": "assert find_adverb_position(\"I had an awesome weekend.\") == [(1, \"awesome\"), (6, \"awesome\")]",
        "num_ids": 1572
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l",
        "test": "assert surfacearea_cube(1) == 6, \"The surface area of a cube with side length 1 is incorrect.\"",
        "num_ids": 290
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    for num in nums:\n        if num > 0:\n            positives += 1\n    return positives / len(nums)",
        "test": "assert positive_count([-1, -2, -3, -4, -5]) == 0.0",
        "num_ids": 456
    },
    {
        "number": 443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def largest_neg(list1):\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest",
        "test": "assert largest_neg([-1, -2, -3, -4, 5, 10, 15]) == -4",
        "num_ids": 307
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # create a new list to store the trimmed tuples\n    trimmed_list = []\n\n    # loop through each tuple in the test list\n    for tup in test_list:\n        # create a new list to store the trimmed values\n        trimmed_values = []\n\n        # loop through each value in the tuple\n        for val in tup:\n            # trim the value by k and append it to the new list\n            trimmed_values.append(val[k-1:])\n\n        # create a new tuple from the trimmed values and append it to the new list\n        trimmed_list.append(tuple(trimmed_values))\n\n    # return the new list of trimmed tuples\n    return trimmed_list",
        "test": "assert trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8, 9)], 2) == [(3, 4), (7, 8, 9)], \"Error in the function trim_tuple\"",
        "num_ids": 693
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result",
        "test": "assert index_multiplication((1, 2, 3, 4), (5, 6, 7, 8)) == (5, 12, 21, 32)",
        "num_ids": 467
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    result = {}\n    for i in lst:\n        if i in counter:\n            result[i] = counter[i]\n        else:\n            result[i] = 0\n    return result",
        "test": "assert count_Occurrence((1, 2, 3), [1, 2, 3, 3, 2, 1]) == {1: 2, 2: 2, 3: 2}",
        "num_ids": 508
    },
    {
        "number": 447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 282
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 2\n    sum_ = 0\n    while p <= n:\n        sum_ += p\n        p += 1\n    return sum_\n",
        "test": "assert cal_sum(1) == 0",
        "num_ids": 310
    },
    {
        "number": 450,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and the size of the strings to be extracted as input.\n    It then returns a list of the specified size strings from the input list.\n    \"\"\"\n    if len(str_list) < size:\n        print(\"Error: Cannot extract strings from the list\")\n        return\n    \n    extracted_strings = []\n    for i in range(size):\n        extracted_strings.append(str_list[i])\n    \n    return extracted_strings",
        "test": "assert extract_string([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], 2) == [\"apple\", \"banana\"]",
        "num_ids": 513
    },
    {
        "number": 451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    # remove whitespaces from the start and end of the string\n    text = text.strip()\n    # remove double whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text",
        "test": "assert remove_whitespaces(\"  hello world  \") == \"hello world\"",
        "num_ids": 357
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0",
        "test": "assert loss_amount(100,100) == 0, \"The loss_amount function should return 0 if the given amount has no loss.\"",
        "num_ids": 349
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                evenFactors += i\n    return evenFactors",
        "test": "assert sumofFactors(20) == 60, \"sumofFactors(20) should return 60, but it returns {}\".format(sumofFactors(20))",
        "num_ids": 385
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_match_wordz(\"the quick brown fox jumps over the lazy dog with a zoo\") == [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"with\", \"a\", \"zoo\"]",
        "num_ids": 359
    },
    {
        "number": 455,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return False",
        "test": "assert check_monthnumb_number(\"01\") == False, \"The month number 01 should not contain 31 days.\"",
        "num_ids": 465
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]",
        "num_ids": 369
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_lst = []\n    min_len = len(lst)\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            sub_lst = lst[i]\n            min_len = len(lst[i])\n    return sub_lst",
        "test": "assert Find_Min([1,2,3]) == [1,2]",
        "num_ids": 463
    },
    {
        "number": 458,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(2,3) == 6, \"rectangle_area(2,3) should return 6\"",
        "num_ids": 232
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function removes uppercase substrings from a given string.\n    \"\"\"\n    # Use regular expression to find all uppercase substrings\n    uppercase_substrings = re.findall(r'[A-Z]+', string)\n    # Loop through the list of uppercase substrings and replace them with empty strings\n    for sub in uppercase_substrings:\n        string = string.replace(sub, '')\n    return string",
        "test": "assert remove_uppercase('I love PYTHON!') == 'I love PYTHON'",
        "num_ids": 301
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8]]) == [1, 4, 6]",
        "num_ids": 282
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as input and counts the number of upper case characters in it.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr('Hello World!') == 2",
        "num_ids": 265
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create an empty list to store all combinations\n    combinations = []\n\n    # Loop through the original list\n    for i in range(len(list1)):\n        # Loop through the remaining elements in the list\n        for j in range(i+1, len(list1)+1):\n            # Append the combination to the list\n            combinations.append(list1[i:j])\n\n    # Return the list of all combinations\n    return combinations",
        "test": "assert combinations_list([]) == [[], []]",
        "num_ids": 550
    },
    {
        "number": 463,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n        \n        if current_product > max_product:\n            max_product = current_product\n    \n    return max_product",
        "test": "assert max_subarray_product([1, 2, 3, 4]) == 24",
        "num_ids": 575
    },
    {
        "number": 464,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if value!= dict[key]:\n            return False\n    return True",
        "test": "assert check_value({'a':1, 'b':2, 'c':3}, 1) == True, \"Incorrect output for check_value({'a':1, 'b':2, 'c':3}, 1)\"",
        "num_ids": 395
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}",
        "test": "assert drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3}",
        "num_ids": 444
    },
    {
        "number": 468,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    prefix = [1] * n\n    max_product = float('-inf')\n    max_product_ending_here = 1\n    \n    for i in range(1, n):\n        prefix[i] = prefix[i-1] * arr[i-1]\n        if prefix[i] > max_product_ending_here:\n            max_product_ending_here = prefix[i]\n        if prefix[i] > max_product:\n            max_product = prefix[i]\n            \n    return max_product",
        "test": "assert max_product([-2, 0, -1]) == 0",
        "num_ids": 606
    },
    {
        "number": 470,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"The tuple must have at least two elements\")\n    else:\n        return sum(test_tup[:-1]) + test_tup[-1]",
        "test": "assert add_pairwise((1,2,3)) == 6",
        "num_ids": 416
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product",
        "test": "assert find_remainder([3, 5, 2], 10) == 0, \"Incorrect output for [3, 5, 2] and 10\"",
        "num_ids": 335
    },
    {
        "number": 472,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 450
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2:\n                result.append(tuple1)\n    return result\n",
        "test": "assert tuple_intersection([('a', 'b'), ('b', 'c'), ('c', 'd')], [('a', 'e'), ('b', 'c'), ('d', 'f')]) == [('b', 'c'), ('d', 'f')]",
        "num_ids": 553
    },
    {
        "number": 474,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello\", \"l\", \"!\")!= \"hel\"",
        "num_ids": 222
    },
    {
        "number": 475,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict",
        "test": "assert sort_counter({'apple': 2, 'banana': 1, 'cherry': 3}) == {'banana': 1, 'apple': 2, 'cherry': 3}",
        "num_ids": 472
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # find the sum of the largest and smallest values\n    largest = nums[0]\n    smallest = nums[1]\n    \n    return largest + smallest",
        "test": "assert big_sum([-1, 0, 1]) == 1",
        "num_ids": 560
    },
    {
        "number": 477,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"Hello World!\") == \"hello world!\"",
        "num_ids": 147
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'([a-z])([A-Z])')\n    return pattern.sub(r'\\1\\2', str1)",
        "test": "assert remove_lowercase(\"HellO WOrld\") == \"HellO WOrld\"",
        "num_ids": 356
    },
    {
        "number": 479,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0:\n        n = -n #make the number positive if it's negative\n    digit = n % 10 #get the last digit of the number\n    return digit",
        "test": "assert first_Digit(200) == 0, \"First digit of 200 is not zero\"",
        "num_ids": 315
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 394
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    \n    return sum_cubes - sum_natural",
        "test": "assert difference(5) == 128",
        "num_ids": 354
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,2,3,4,5,6],6) == 5",
        "num_ids": 445
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()",
        "test": "assert toggle_string('Hello, World!') == 'hELLO, wORLD!'",
        "num_ids": 260
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    num1 = [int(d) for d in str(n1)]\n    num2 = [int(d) for d in str(n2)]\n    # Calculate the per-digit difference and sum them up\n    return sum([abs(a-b) for a,b in zip(num1,num2)])",
        "test": "assert digit_distance_nums(12345, 12345) == 0, \"Failed: Incorrect sum of per-digit differences\"",
        "num_ids": 666
    },
    {
        "number": 559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        raise ValueError(\"The size is greater than the length of the input list\")\n    if size == 1:\n        return a[0]\n    if size == 2:\n        return max(a[0], a[1])\n    max_so_far = max_ending_here = a[0]\n    for i in range(1, len(a)):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        if max_ending_here < 0:\n            max_ending_here = a[i]\n        if i >= size:\n            max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "test": "assert max_sub_array_sum([1,2,3,4,5], 3) == 10",
        "num_ids": 646
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list",
        "test": "assert union_elements((1, 3, 5), (2, 4, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 486
    },
    {
        "number": 562,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n            \n    if current_length > max_length:\n        max_length = current_length\n        \n    return max_length",
        "test": "assert Find_Max_Length([]) == 0, \"Failed for empty list\"",
        "num_ids": 693
    },
    {
        "number": 563,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values('This is a string with \"quotes\" inside.') == ['quotes']",
        "num_ids": 381
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_Pairs(arr, n):\n    # Initializing variables to store the count of pairs\n    count = 0\n    # Sorting the list\n    arr.sort()\n    # Looping through the sorted list\n    for i in range(len(arr)):\n        # Finding the leftmost element greater than the current element\n        left = i + 1\n        while left < len(arr) and arr[i] == arr[left]:\n            left += 1\n        # Finding the rightmost element less than the current element\n        right = len(arr) - 1\n        while left < right:\n            if arr[left] == arr[i] and arr[right] == arr[i]:\n                count += 1\n                left += 1\n                right -= 1\n            elif arr[left] == arr[i]:\n                left += 1\n            else:\n                right -= 1\n    return count",
        "test": "assert count_Pairs([1, 2, 3, 4, 5], 5) == 0, \"count_Pairs([1, 2, 3, 4, 5], 5) should return 0\"",
        "num_ids": 495
    },
    {
        "number": 565,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 166
    },
    {
        "number": 566,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    str_n = str(n)\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # Loop through each character in the string and add it to the sum\n    for char in str_n:\n        sum_of_digits += int(char)\n    # Return the sum of digits\n    return sum_of_digits",
        "test": "assert sum_digits(123) == 6, \"sum_digits(123) should be 6\"",
        "num_ids": 427
    },
    {
        "number": 567,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1,2,3]) == True",
        "num_ids": 352
    },
    {
        "number": 568,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 159
    },
    {
        "number": 569,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "test": "assert sort_sublists([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [[1, 2, 3], [4, 5], [6, 7, 8, 9]]",
        "num_ids": 405
    },
    {
        "number": 572,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list with only the unique numbers.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 516
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n\n    # Convert the list to a set to get only unique elements\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 385
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*r + 2*3.14*r*h + 2*3.14*h*h",
        "test": "assert surfacearea_cylinder(1,2) == 31.4159, \"The surface area of a cylinder with radius 1 and height 2 is not correct.\"",
        "num_ids": 396
    },
    {
        "number": 576,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists A and B and checks whether the first list is a sublist of the second list or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    \n    return j == len(B)",
        "test": "assert is_Sub_Array([1,2,3,4,5], [5,4,3,2,1]) == True",
        "num_ids": 445
    },
    {
        "number": 577,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    str_n = str(n)\n    \n    # Calculate the factorial of the given number\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    # Extract the last digit from the factorial of the given number\n    last_digit = int(str_n[-1])\n    \n    # Return the last digit in the factorial of the given number\n    return last_digit",
        "test": "assert last_Digit_Factorial(10) == 2, \"Test failed for n=10\"",
        "num_ids": 407
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('All lists must have the same length.')\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 640
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar = []\n\n    # Loop through the tuples\n    for i in range(len(test_tup1)):\n        # If the two elements are not equal, add them to the list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar",
        "test": "assert find_dissimilar((1, 2, 3, 4, 5), (1, 2, 4, 5, 7)) == (3, 6)",
        "num_ids": 530
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Filter the even elements from the tuple using the filter() function\n    even_elems = list(filter(even_fnc, test_tuple))\n    # Return the filtered tuple\n    return even_elems",
        "test": "assert even_ele( ( (1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18) ), lambda x: x % 2 == 0) == ((1, 3, 5, 7, 9), (10, 12, 14, 16, 18))",
        "num_ids": 742
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s*(s-1)*b**2)/(4*s-3)\n    return area",
        "test": "assert surface_Area(10,2) == 20",
        "num_ids": 299
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True, \"Empty dictionary should be True\"",
        "num_ids": 309
    },
    {
        "number": 583,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * 2**num / (factorial(num-1) * factorial(2))\n\ndef factorial(num):\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 443
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the first adverb ending with ly and its positions in the string.\n    '''\n    pattern = r'\\b([a-zA-Z]+)ly\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert find_adverbs(\"She sells seashells by the seashore.\") == [(24, 26)]",
        "num_ids": 389
    },
    {
        "number": 585,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    :param items: list of items with prices\n    :param n: number of items to find\n    :return: list of n most expensive items\n    \"\"\"\n    min_heap = []\n\n    for item in items:\n        if not min_heap or item[1] < min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n        elif len(min_heap) < n:\n            heapq.heappushpop(min_heap, item)\n        elif item[1] > min_heap[0][1]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n\n    return [item for item in min_heap]",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 632
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # check if the input is valid\n    if not isinstance(l, list):\n        print(\"Input must be a list!\")\n        return\n    \n    # check if the n value is valid\n    if not isinstance(n, int) or n < 0 or n > len(l):\n        print(\"n must be a positive integer less than the length of the list!\")\n        return\n    \n    # split the list at the nth element and add the first part to the end\n    part1 = l[:n]\n    part2 = l[n:]\n    return part1 + part2",
        "test": "assert split_Arr([1,2,3,4,5,6,7,8,9], 3) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 621
    },
    {
        "number": 587,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 170
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Find the largest and smallest values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n\n    # Calculate the difference between the largest and smallest values\n    diff = max_num - min_num\n\n    # Return the difference between the largest and smallest values\n    return diff",
        "test": "assert big_diff([10, 20, 30, 40, 50]) == 40, \"big_diff([10, 20, 30, 40, 50]) should return 40\"",
        "num_ids": 455
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        if num**2 == sum([int(digit) for digit in str(num**2)]):\n            print(num**2)",
        "test": "assert perfect_squares(2, 3) == [1, 4, 9, 16, 25]",
        "num_ids": 603
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes the radius and angle of a point in polar coordinates and returns the corresponding rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "test": "assert polar_rect(1,-1) == (-1,1)",
        "num_ids": 312
    },
    {
        "number": 591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    first_element = newList[0]\n    last_element = newList[-1]\n\n    newList[0] = last_element\n    newList[-1] = first_element\n\n    print(\"New List:\", newList)",
        "test": "assert swap_List([1, 2, 3]) == [3, 1, 2]",
        "num_ids": 439
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_of_products = 0\n    for i in range(1,n+1):\n        product = 1\n        for j in range(1,i+1):\n            product *= j\n        product //= i\n        sum_of_products += product\n    return sum_of_products",
        "test": "assert binomial_Coeff(10,3) == 28.0",
        "num_ids": 338
    },
    {
        "number": 593,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+','',ip) # remove leading zeroes from the ip address\n    return ip",
        "test": "assert removezero_ip('192.168.0.1') == '192.168.0.1'",
        "num_ids": 465
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_first = [x for x in list1 if x % 2 == 0][0]\n    odd_first = [x for x in list1 if x % 2!= 0][0]\n    diff = even_first - odd_first\n    return diff",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 481
    },
    {
        "number": 595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to lists of bits\n    list1 = [int(bit) for bit in str1]\n    list2 = [int(bit) for bit in str2]\n\n    # Find lengths of binary strings\n    n1 = len(list1)\n    n2 = len(list2)\n\n    # Initialize minimum swaps\n    min_swaps = 0\n\n    # Loop through all pairs of bits\n    for i in range(n1):\n        for j in range(n2):\n            # If bits do not match, increment minimum swaps\n            if list1[i]!= list2[j]:\n                min_swaps += 1\n\n    # Return minimum swaps\n    return min_swaps",
        "test": "assert min_Swaps(\"01010\", \"10101\") == 2, \"Test case 2\"",
        "num_ids": 612
    },
    {
        "number": 596,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 290
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    count = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n            j += 1\n            \n    return None",
        "test": "assert find_kth([], [], 0) == None",
        "num_ids": 1047
    },
    {
        "number": 598,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the input number to a string and remove any leading or trailing zeros\n    number_str = str(number).lstrip('0')\n    # Calculate the sum of the cubes of each digit in the number\n    sum_of_cubes = sum(int(digit) ** 3 for digit in number_str)\n    # If the sum is equal to the input number, the number is armstrong\n    if sum_of_cubes == number:\n        return True\n    # If the sum is not equal to the input number, the number is not armstrong\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 397
    },
    {
        "number": 599,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return (sum, average)",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 317
    },
    {
        "number": 600,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(1) == False",
        "num_ids": 230
    },
    {
        "number": 602,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_repeat = None\n    for char in str1:\n        if str1.count(char) > 1:\n            if first_repeat is None:\n                first_repeat = char\n            else:\n                return first_repeat\n    return first_repeat",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 586
    },
    {
        "number": 603,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n+1):\n        if i**2 + i == 2*i and i > 0:\n            ludic.append(i)\n    return ludic",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 551
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string",
        "test": "assert reverse_words(\"this is a test\") == \"test a is this\"",
        "num_ids": 404
    },
    {
        "number": 605,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(5) == True, \"The function should return True for the input 5.\"",
        "num_ids": 460
    },
    {
        "number": 606,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Convert degrees to radians.\n    \"\"\"\n    return degree * math.pi / 180",
        "test": "assert radian_degree(0) == 0, '0 degrees is 0 radians'",
        "num_ids": 260
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"hello world\", r\"\\b\\w+\\b\") == (\"hello\", 0, 5)",
        "num_ids": 535
    },
    {
        "number": 608,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 279
    },
    {
        "number": 610,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]",
        "num_ids": 475
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(test_list[i])\n            break\n    return max_val",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 3",
        "num_ids": 550
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 545
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not isinstance(test_list, list):\n        raise TypeError(\"The input must be a list of tuples.\")\n\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        if not isinstance(test_list[i], tuple):\n            raise TypeError(\"All values in the input list must be tuples.\")\n        for j in range(len(test_list[i])):\n            if not isinstance(test_list[i][j], (int, float)):\n                raise TypeError(\"All values in a tuple must be numbers.\")\n        cumulative_sum += sum(test_list[i])\n    return cumulative_sum",
        "test": "assert cummulative_sum([(1,2,3),(4,5,6),(7,8,9)]) == 45",
        "num_ids": 491
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        avg = total / len(num)\n        result.append(avg)\n    return result",
        "test": "assert average_tuple([(1,2,3),(4,5,6)]) == [2.0, 5.0]",
        "num_ids": 471
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "test": "assert tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3)",
        "num_ids": 497
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Function to check if the point is in the desired form or not\n    def check_point(point):\n        if point[0] == d and point[1] == 0:\n            return True\n        else:\n            return False\n\n    # Initialize variables\n    current_point = [0, 0]\n    jumps = 0\n\n    # Check all possible points\n    for i in range(1, steps+1):\n        next_point = [current_point[0] + i*d, current_point[1]]\n        if check_point(next_point):\n            jumps += 1\n            current_point = next_point\n\n    # Return the number of jumps required\n    return jumps",
        "test": "assert min_Jumps(2, 1) == 1, \"min_Jumps(2, 1) should be 1\"",
        "num_ids": 809
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([1,2,3],[1,1,1]) == [1.0, 1.0, 1.0], \"div_list([1,2,3],[1,1,1]) should return [1.0, 1.0, 1.0]\"",
        "num_ids": 549
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isdigit():\n            nums.append(test_str[i])\n            i += 1\n        else:\n            i += 1\n    nums.reverse()\n    nums = ''.join(nums)\n    test_str = test_str.replace(nums, '', 1)\n    return test_str",
        "test": "assert move_num('abc123') == 'abc123'",
        "num_ids": 574
    },
    {
        "number": 620,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    max_size = 1\n    start = 0\n    \n    for i in range(1, n):\n        if a[i] % a[start] == 0:\n            dp[i] = dp[start] + 1\n            if dp[i] > max_size:\n                max_size = dp[i]\n                start = i\n        else:\n            start += 1\n    \n    return max_size",
        "test": "assert largest_subset([1,2,3,4,5,6]) == 2, \"The largest subset of [1,2,3,4,5,6] should have size 2.\"",
        "num_ids": 812
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Calculate the median\n    median = sorted_list[n]\n\n    return median",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 4) == 3.5",
        "num_ids": 573
    },
    {
        "number": 623,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1, 2, 3, 4, 5], 2) == [1, 4, 9, 16, 25]",
        "num_ids": 338
    },
    {
        "number": 624,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 161
    },
    {
        "number": 625,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def swap_List(newList):\n    # Checking if the length of the list is less than 2\n    if len(newList) < 2:\n        print(\"The list should have at least 2 elements.\")\n        return None\n    \n    # Swapping the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList",
        "test": "assert swap_List([1, 2]) == [2, 1]",
        "num_ids": 393
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577",
        "test": "assert triangle_area(2) == 4.0, \"The area of the largest triangle is not correct.\"",
        "num_ids": 1673
    },
    {
        "number": 627,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a Python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int, optional): The starting index of the sub-array to consider. Defaults to 0.\n        end (int, optional): The ending index of the sub-array to consider. Defaults to None.\n\n    Returns:\n        int: The smallest missing number from the sub-array.\n    \"\"\"\n    if end is None:\n        end = len(array)\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n    return end + 1",
        "test": "assert find_First_Missing([1,2,3,4,5]) == 6, \"Failed to find the smallest missing number\"",
        "num_ids": 625
    },
    {
        "number": 628,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 199
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for number in list:\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]",
        "num_ids": 339
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i!= x or j!= y:\n                adj.append((i, j))\n    return adj",
        "test": "assert adjac((2, 3)) == [(1, 3), (-1, 3), (3, 1), (3, -1)]",
        "num_ids": 1528
    },
    {
        "number": 631,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 290
    },
    {
        "number": 632,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n\n    return num_list",
        "test": "assert move_zero([1, 2, 0, 3, 4]) == [1, 2, 3, 4, 0]",
        "num_ids": 602
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Given a list of numbers, find the sum of their xor of all pairs.\n\n    Args:\n        arr: list of integers\n        n: number of elements in the list\n\n    Returns:\n        int: the sum of xor of all pairs\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        return arr[0] ^ pair_xor_Sum(arr[1:], n-1)",
        "test": "assert pair_xor_Sum([1, 3, 5, 7, 9], 5) == 40",
        "num_ids": 505
    },
    {
        "number": 635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result",
        "test": "assert heap_sort([1, 1, 1, 1, 1]) == [1]",
        "num_ids": 559
    },
    {
        "number": 637,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n\n    Args:\n        actual_cost (float): The actual cost of the sale.\n        sale_amount (float): The amount being sold.\n\n    Returns:\n        bool: True if the given amount has no profit and no loss, False otherwise.\n    \"\"\"\n\n    if sale_amount <= actual_cost:\n        # If the sale amount is less than or equal to the actual cost, there is no profit and no loss\n        return True\n    else:\n        # If the sale amount is greater than the actual cost, there is a profit and no loss\n        return False",
        "test": "assert noprofit_noloss(5000, 1000) == True, \"The given amount of 5000 has no profit and no loss\"",
        "num_ids": 576
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_speed_in_mps = v * 1000 # Convert from km/h to meters per second\n    temperature_in_celsius = t - 273.15 # Convert from Celsius to Kelvin\n    \n    # Calculate the constant term\n    constant_term = 1.5 * math.log(temperature_in_celsius) + 32\n    \n    # Calculate the power term\n    power_term = (13.12 + 0.6215 * temperature_in_celsius) * temperature_in_celsius\n    \n    # Calculate the combined term\n    combined_term = math.sqrt(wind_speed_in_mps) * (constant_term + power_term)\n    \n    # Calculate the wind chill index\n    wind_chill_index = round(combined_term)\n    \n    return wind_chill_index",
        "test": "assert wind_chill(10,20) == 22",
        "num_ids": 826
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_name_lengths = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_name_lengths += len(name)\n    return sum_name_lengths",
        "test": "assert sample_nam(['John', 'Samantha', 'Mary', 'David']) == 15, \"Sample_nam should return 15 for the given list ['John', 'Samantha', 'Mary', 'David']\"",
        "num_ids": 561
    },
    {
        "number": 640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    result = pattern.sub('', items)\n    return result",
        "test": "assert remove_parenthesis(\"(1 + 2) * 3\") == \"6\"",
        "num_ids": 393
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)\n\n\ndef nth_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n) - is_nonagonal(n-1)",
        "test": "assert is_nonagonal(5) == 25",
        "num_ids": 348
    },
    {
        "number": 643,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return True\n    return False",
        "test": "assert text_match_wordz_middle('zwordz') == True, 'The function should return True for \"zwordz\"'",
        "num_ids": 464
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from index 0 to k-1\n    input = input[:k][::-1] + input[k:]\n    return input",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "num_ids": 653
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup",
        "test": "assert add_dict_to_tuple((1,2,3), {'a': 4, 'b': 5}) == (1, 2, 3, {'a': 4, 'b': 5})",
        "num_ids": 369
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Create a copy of the given matrix to avoid modifying the original matrix\n    cost = [[x for x in row] for row in cost]\n    \n    # Function to check if the current cell can be visited in the path\n    def can_visit(i, j):\n        # Check if the current cell is not already visited\n        if cost[i][j] == float('inf'):\n            return False\n        \n        # Check if the current cell has not been visited before\n        if cost[i][j] == float('-inf'):\n            return True\n        \n        # If the current cell has been visited before, check if the current cell can be visited in the path\n        if j+1 < len(cost[i]) and can_visit(i, j+1):\n            return True\n        if i+1 < len(cost) and can_visit(i+1, j):\n            return True\n        \n        # If the current cell cannot be visited in the path, mark it as visited\n        cost[i][j] = float('inf')\n        return False\n    \n    # Initialize the maximum average and the maximum path\n    max_avg = float('-inf')\n    max_path = None\n    \n    # Loop through all cells in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if can_visit(i, j):\n                # Compute the total cost and the number of cells visited in the path\n                total_cost = cost[i][j]\n                num_cells = 1\n                \n                # Check all possible paths starting from the current cell\n                if j+1 < len(cost[i]) and can_visit(i, j+1):\n                    total_cost += cost[i][j+1]\n                    num_cells += 1\n                if i+1 < len(cost) and can_visit(i+1, j):\n                    total_cost += cost[i+1][j]\n                    num_cells += 1\n                if j+1 < len(cost[i]) and i+1 < len(cost) and can_visit(i, j+1) and can_visit(i+1, j):\n                    total_cost += cost[i][j+1] + cost[i+1][j]\n                    num_cells += 2\n                    \n                # Update the maximum average and the maximum path if the current average is greater than the current maximum average\n                if total_cost / num_cells > max_avg:\n                    max_avg = total_cost / num_cells\n                    max_path = (i, j)\n    \n    # Return the maximum average and the maximum path\n    return max_avg, max_path",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 1, 1], [1, 1, 1]]) == 71",
        "num_ids": 1353
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    # Filter the students that have height and weight above the minimum\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = students[name]\n    return result",
        "test": "assert filter_data({'Alice':(1.8, 75.5), 'Bob':(1.6, 80.2), 'Charlie':(1.9, 72.3), 'David':(1.7, 78.9), 'Eve':(1.5, 73.1)}, 1.6, 75) == ['Bob', 'Charlie']",
        "num_ids": 749
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 5",
        "num_ids": 622
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        base //= 10\n        power -= 1\n    return total\n",
        "test": "assert power_base_sum(10, 0) == 0, \"The sum of digits of 10^0 should be 0, but the function returned {}\".format(power_base_sum(10, 0))",
        "num_ids": 398
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n    '''\n    # use the findall() method to find all occurrences of quotation marks\n    # the pattern '(?s)\"[^\"]*\"' matches any character that is not a double quote followed by a double quote followed by any character other than a double quote\n    # the re.DOTALL flag makes the \".\" match any character, including a newline character\n    matches = re.findall(r'(?s)\"[^\"]*\"', text1, re.DOTALL)\n    \n    # loop through the matches and extract the value between the quotation marks\n    result = []\n    for match in matches:\n        # remove the first and last characters of the match (the double quotes)\n        value = match[1:-1]\n        # add the value to the result list\n        result.append(value)\n    \n    return result",
        "test": "assert extract_quotation(\"I don't know how many quotes there are, but I know there are three.\") == \"three.\"",
        "num_ids": 524
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(new_tup)",
        "test": "assert multiply_elements((4,5,6)) == (12, 15, 18)",
        "num_ids": 568
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = [lst1[i] + lst2[i] for i in range(len(lst1))]\n    return result",
        "test": "assert sum_list([1,2,3], [4,5,6]) == [5,7,9]",
        "num_ids": 440
    },
    {
        "number": 730,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 611
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h",
        "test": "assert lateralsurface_cone(2,3) == math.pi * 2**2 * 3",
        "num_ids": 490
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]+'\n    text = re.sub(pattern, ':', text)\n    return text",
        "test": "assert replace_specialchar('hello world') == 'hello:world'",
        "num_ids": 261
    },
    {
        "number": 733,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    index = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return index",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 6) == -1, \"Incorrect find_first_occurrence\"",
        "num_ids": 511
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n\n    # Create a new list to store the products of subarrays\n    products = [0] * (n + 1)\n\n    # Initialize the first product as 1\n    products[0] = 1\n\n    # Loop through all possible subarrays\n    for i in range(1, n + 1):\n        # Initialize the sum of products of the current subarray as 0\n        products[i] = 0\n\n        # Loop through all previous subarrays and find the product of the current subarray\n        for j in range(i):\n            products[i] += arr[j] * products[j]\n\n    # Initialize the sum of products as 0\n    sum_of_products = 0\n\n    # Loop through all possible subarrays and add the product to the sum of products\n    for i in range(1, n + 1):\n        sum_of_products += products[i]\n\n    return sum_of_products",
        "test": "assert sum_Of_Subarray_Prod([2,4,6,8]) == 36",
        "num_ids": 685
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b11111111111111111111111111111111\n    n = n & mask\n    n = n ^ (n & (mask + 1))\n    n = n ^ (n & (mask - 1))\n    return n",
        "test": "assert set_middle_bits(0b111001) == 0b000001",
        "num_ids": 1737
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n\n    i = bisect.bisect_left(a, x)\n\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x) - 1",
        "test": "assert left_insertion([1], 1) == 0",
        "num_ids": 328
    },
    {
        "number": 737,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"apple\") == True, \"Expected True, got {}\".format(check_str(\"apple\"))",
        "num_ids": 293
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 303
    },
    {
        "number": 739,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    min_num = 10**(n-1)\n    triangular_numbers = []\n    for i in range(min_num, 10**(n+1)):\n        triangular_numbers.append(i)\n    min_triangular_num = math.inf\n    for i in range(len(triangular_numbers)):\n        for j in range(i+1, len(triangular_numbers)):\n            triangular_sum = triangular_numbers[i] + triangular_numbers[j]\n            if triangular_sum < min_triangular_num:\n                min_triangular_num = triangular_sum\n                index = i+1\n                break\n    return index",
        "test": "assert find_Index(2) == 1",
        "num_ids": 739
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj",
        "test": "assert tuple_to_dict(('a', 'b', 'c')) == {'a': 'b', 'b': 'c'}",
        "num_ids": 608
    },
    {
        "number": 741,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert all_Characters_Same('abc') == False",
        "num_ids": 330
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3 * side ** 2) / (4 * math.tan(math.pi / 3))\n    area = math.sqrt(s) ** 2\n    return area",
        "test": "assert area_tetrahedron(3) == 6.0",
        "num_ids": 368
    },
    {
        "number": 743,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    # Check if the list is empty or not\n    if n == 0:\n        return list\n\n    # Check if the m is greater than or equal to n, if yes then m = n-m\n    m = m % n\n\n    # Traverse the list from the second last item to the first item\n    for i in range(n-m-1, -1, -1):\n        # Store the item at current index\n        temp = list[i]\n        # Shift the item to the next index\n        list[i] = list[i+m]\n        # Shift the next item to the previous index\n        list[i+m] = temp\n\n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 816
    },
    {
        "number": 744,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none((4, 5, 6)) == False",
        "num_ids": 221
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit == 0:\n                return False\n        return all(num % digit == 0 for digit in digits)\n    \n    return filter(lambda x: is_divisible_by_digits(x), range(startnum, endnum+1))",
        "test": "assert divisible_by_digits(1000, 9999) == [] # example input and output",
        "num_ids": 571
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r**2) * (a/360)\n        return area",
        "test": "assert sector_area(2, 0) == 0",
        "num_ids": 419
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Create a dictionary to store the lengths of the longest common subsequences of all prefixes of the given strings \n    dp = {} \n\n    # Traverse the given strings and calculate the lengths of the longest common subsequences of all prefixes \n    for i in range(len(X) + 1): \n        for j in range(len(Y) + 1): \n            for k in range(len(Z) + 1): \n                if i == 0 or j == 0 or k == 0: \n                    dp[(i, j, k)] = 0 \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    dp[(i, j, k)] = dp[(i-1, j-1, k-1)] + 1 \n                else: \n                    dp[(i, j, k)] = max(dp[(i-1, j, k)], dp[(i, j-1, k)], dp[(i, j, k-1)]) \n\n    # Return the length of the longest common subsequence for all prefixes \n    return dp[(len(X), len(Y), len(Z))] ",
        "test": "assert lcs_of_three([\"ABC\", \"DEF\", \"GHI\"], [\"JKL\", \"MNO\", \"PQR\"], [\"RST\", \"UVT\", \"WXYZ\"]) == [\"ABC\", \"DEF\", \"GHI\"]",
        "num_ids": 1431
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    # Remove all non-alphanumeric characters\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\n    \n    # Split the string into a list of words\n    words = str1.split()\n    \n    # Add spaces between words starting with capital letters\n    new_words = []\n    for word in words:\n        if word[0].isupper():\n            new_words.append(word +'')\n        else:\n            new_words.append(word)\n    \n    # Join the new words into a string\n    new_str =''.join(new_words)\n    \n    return new_str",
        "test": "assert capital_words_spaces(\"THE quick brown fox jumps over the lazy dog\") == \"The Quick Brown Fox Jumps Over The Lazy Dog\"",
        "num_ids": 497
    },
    {
        "number": 749,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # convert all the strings to integers\n    nums = [int(num) for num in nums_str]\n    # sort the list in numeric order\n    nums.sort()\n    # convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    # return the sorted list\n    return sorted_nums_str",
        "test": "assert sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 633
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_list:\n        if i not in test_tup:\n            test_list.append(i)\n    return test_list",
        "test": "assert add_tuple([7], (8, 9)) == [7, 8, 9]",
        "num_ids": 323
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    elif arr[i] > arr[2 * i + 1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)",
        "test": "assert check_min_heap_helper([1, 2, 3, 4, 5], 0) == True",
        "num_ids": 743
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * (jacobsthal_num(n//2) - 1)\n    else:\n        return 2 * (jacobsthal_num((n-1)//2) - 1) + 1",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 653
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    minimum = test_list[K-1]\n    return minimum",
        "test": "assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 4) == [(4, 5, 6), (7, 8, 9)]",
        "num_ids": 794
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 464
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        return min(numbers[1:], key=lambda x: abs(x - min(numbers[1:]))**2)",
        "test": "assert second_smallest([3, 2, 1]) == 1",
        "num_ids": 424
    },
    {
        "number": 756,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"abbabbab\") == True",
        "num_ids": 1255
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    # Initialize the count to 0\n    count = 0\n\n    # Sort the list of strings\n    test_list = sorted(test_list)\n\n    # Iterate through the list of strings\n    for i in range(len(test_list)):\n        # Get the current string\n        current_str = test_list[i]\n\n        # Iterate through the remaining strings after the current string\n        for j in range(i+1, len(test_list)):\n            # Get the next string\n            next_str = test_list[j]\n\n            # Compare the two strings and count the pairs if they are reversed\n            if current_str[::-1] == next_str:\n                count += 1\n\n    return count\n",
        "test": "assert count_reverse_pairs([\"abc\", \"cba\", \"aaa\", \"acb\", \"bcd\", \"abc\", \"def\"]) == 2",
        "num_ids": 570
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count",
        "test": "assert unique_sublists(['a', 'b', 'c', 'd', 'e']) == {('a', 'b', 'c', 'd', 'e'): 1}",
        "num_ids": 740
    },
    {
        "number": 759,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    num = num.split('.')\n    if len(num[0]) > 1 or len(num[1]) > 2:\n        return False\n    try:\n        float(num[0])\n    except ValueError:\n        return False\n    try:\n        float(num[1])\n        if len(num[1]) > 2:\n            return False\n    except ValueError:\n        return False\n    return True",
        "test": "assert is_decimal(\"12.345\") == False, \"Failed\"",
        "num_ids": 420
    },
    {
        "number": 760,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    return True",
        "test": "assert unique_Element([1, 1, 2, 3, 3]) == False, \"The list [1, 1, 2, 3, 3] contains more than one distinct element.\"",
        "num_ids": 392
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum % 3 == 0:\n        if monthnum % 10 == 0:\n            if monthnum % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(12) == True, 'Month 12 should contain 30 days.'",
        "num_ids": 532
    },
    {
        "number": 763,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize the minimum difference variable\n    min_diff = float('inf')\n\n    # Traverse the array from the second element\n    for i in range(1, n):\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i] - arr[i - 1]\n\n        # Update the minimum difference if the difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff\n",
        "test": "assert find_min_diff([1,3,5,7,9],4) == 2",
        "num_ids": 477
    },
    {
        "number": 764,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 307
    },
    {
        "number": 765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n <= 0: \n        return 0\n    \n    # First polite number is 1\n    polite = 1\n    \n    # Count of polite numbers starting from 2\n    count = 1\n    \n    # Calculate the nth polite number using the formula: (n * (n + 1)) / 2\n    while count < n:\n        polite = (polite * (polite + 1)) // 2\n        count += 1\n    \n    return polite\n",
        "test": "assert is_polite(2) == 7",
        "num_ids": 396
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 481
    },
    {
        "number": 767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([3, 4, 5, 6, 7, 8], 10) == 0",
        "num_ids": 530
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Compute the difference between two lists.\n\n    Args:\n        li1 (list): A list of elements\n        li2 (list): A list of elements\n\n    Returns:\n        list: A new list with the elements of `li1` that are not in `li2`\n    \"\"\"\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list",
        "test": "assert Diff([], []) == []",
        "num_ids": 336
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 0\n    sum = 0\n    while count < n:\n        num = 3 * 3 * 3 * 3\n        if num % 2 == 1:\n            sum += num\n        count += 1\n    return sum",
        "test": "assert odd_num_sum(5) == 405, \"Incorrect output for odd_num_sum(5)\"",
        "num_ids": 352
    },
    {
        "number": 771,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if char == ')' and top!= '(':\n                    return False\n                elif char == '}' and top!= '{':\n                    return False\n                elif char == ']' and top!= '[':\n                    return False\n    return not stack",
        "test": "assert check_expression('(1+2+3)*4') == True",
        "num_ids": 580
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create a set to store the words with length K\n    k_length_words = set()\n    \n    # Iterate through each word and check if its length is equal to K\n    for word in words:\n        if len(word) == K:\n            k_length_words.add(word)\n    \n    # Convert the set of k length words to a list and join them into a string\n    result =''.join(list(k_length_words))\n    \n    # Return the result string\n    return result",
        "test": "assert remove_length(\"hello world\", 1) == \"\"",
        "num_ids": 444
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        matches = re.findall(pattern, text)\n        if len(matches) == 0:\n            return None\n        else:\n            for match in matches:\n                print(f\"Match found at position {text.index(match)}: '{match}'\")\n            return matches\n    except re.error:\n        print(\"Error in the pattern.\")",
        "test": "assert occurance_substring(\"Hello, world!\", \"hello\") == None",
        "num_ids": 428
    },
    {
        "number": 775,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 2, 4, 5, 7, 9]) == False",
        "num_ids": 441
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count",
        "test": "assert count_vowels(\"abcd\") == 0, \"count_vowels('abcd') should return 0\"",
        "num_ids": 420
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_sum(arr):\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # Convert the set back to a list for the final sum calculation\n    unique_list = list(unique_set)\n    # Calculate the sum of the unique list\n    sum_unique = sum(unique_list)\n    return sum_unique",
        "test": "assert find_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 25",
        "num_ids": 476
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        list1 (list): List of elements to be packed.\n\n    Returns:\n        list: List of packed sublists.\n    \"\"\"\n    # group the list by consecutive duplicates and pack them into sublists\n    grouped_list = groupby(list1)\n    packed_list = []\n    for key, group in grouped_list:\n        if len(list(group)) > 1:\n            packed_list.append([key])\n        else:\n            packed_list.append(list(group))\n    return packed_list",
        "test": "assert pack_consecutive_duplicates([1, 1, 2, 2, 3, 3, 3, 3]) == [[1], [2], [3]]",
        "num_ids": 536
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the count of unique sublists\n    count_dict = {}\n\n    # Iterate over each element in the list1\n    for elem in list1:\n\n        # If the element is a list, turn it into a tuple and check if it is already in the dictionary\n        if type(elem) == list:\n            if tuple(elem) in count_dict:\n                count_dict[tuple(elem)] += 1\n            else:\n                count_dict[tuple(elem)] = 1\n\n    # Return the count_dict\n    return count_dict",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {",
        "num_ids": 552
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def check_combinations(combination):\n        '''\n        This function checks if the combination is valid or not.\n        '''\n        sum_combination = sum(combination)\n        if sum_combination in test_list:\n            return True\n        else:\n            return False\n\n    combinations_list = [tuple(x) for x in combinations(test_list, len(test_list))]\n    return [combination for combination in combinations_list if check_combinations(combination)]",
        "test": "assert find_combinations([[1,2,3],[4,5],[6]]) == [([1, 2, 3], [4, 5]), ([1, 2, 3], [5]), ([1, 2, 3], [6]), ([1, 3, 5], [4]), ([1, 3, 5], [6]), ([2, 3, 5], [4, 6]), ([1, 4, 6], [3, 5]), ([2, 4, 6], [3, 5]), ([1, 5, 6], [3, 4]), ([2, 5, 6], [3, 4])]",
        "num_ids": 859
    },
    {
        "number": 781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_divisors(n):\n    '''\n    This function counts the number of divisors of a given number using the Sieve of Eratosthenes algorithm.\n    '''\n    # Create a list of numbers from 2 to n (inclusive)\n    divisors = list(range(2, n+1))\n\n    # Initialize a boolean array of size n+1 to mark if each number is a divisor or not\n    is_divisor = [True] * (n+1)\n\n    # Start from 2 (not included) and mark all divisors of 2\n    for i in range(2, int(math.sqrt(n))+1):\n        if is_divisor[i]:\n            for j in range(i*i, n+1, i):\n                is_divisor[j] = False\n\n    # Count the number of remaining divisors (those that are still marked as true)\n    count = sum(is_divisor[2:])\n\n    # Return the count of divisors as even or odd based on whether they are even or odd\n    if count % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'",
        "test": "assert count_divisors(20) == 8, \"The count of divisors should be 8 for 20.\"",
        "num_ids": 679
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    # initialize a variable to store the sum of odd length subarrays\n    sum_odd_length = 0\n    \n    # loop through each element in the input array\n    for i in range(len(arr)):\n        # loop through each possible starting index for the current element\n        for j in range(i+1, len(arr)+1):\n            # check if the length of the current subarray is odd and the sum of all elements in the subarray is odd\n            if (j-i+1) % 2!= 0 and sum(arr[i:j]) % 2!= 0:\n                # add the sum of all elements in the subarray to the sum of odd length subarrays\n                sum_odd_length += sum(arr[i:j])\n    \n    # return the sum of odd length subarrays\n    return sum_odd_length",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5, 6]) == 21",
        "num_ids": 619
    },
    {
        "number": 783,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert r,g,b to floats\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n    \n    # Find the maximum and minimum values in the RGB color space\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values\n    delta = max_val - min_val\n    \n    # Calculate the hue\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n    \n    hue = hue * 60 if delta > 0 else hue * 60\n    \n    # Calculate the saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n    \n    # Calculate the value\n    value = max_val\n    \n    return hue, saturation, value",
        "test": "assert rgb_to_hsv(255, 0, 0) == (0, 1, 1)",
        "num_ids": 1059
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product = product * num\n    \n    return product",
        "test": "assert mul_even_odd([2, 4, 6, 8, 10]) == 120",
        "num_ids": 490
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # split the tuple string into a list of strings\n    lst_str = test_str.replace('(', '').replace(')', '').replace(',','').split()\n\n    # convert each string to an integer\n    lst_int = [int(num) for num in lst_str]\n\n    # convert the list of integers to a tuple\n    tup_int = tuple(lst_int)\n\n    return tup_int",
        "test": "assert tuple_str_int(('1', '2', '3')) == (1, 2, 3)",
        "num_ids": 423
    },
    {
        "number": 786,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        i = bisect.bisect_right(a, x)\n    return i",
        "test": "assert right_insertion([1, 2, 3, 4, 5], 2) == 1",
        "num_ids": 444
    },
    {
        "number": 787,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three('abc') == False",
        "num_ids": 1268
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple",
        "test": "assert new_tuple([1, 2, 3], \"hello\") == (1, 2, 3, \"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 488
    },
    {
        "number": 790,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count += 1\n            if count > 2:\n                return False\n    return True",
        "test": "assert even_position([1, 2, 4, 6, 8, 10]) == False",
        "num_ids": 461
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup",
        "test": "assert remove_nested([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]) == [(1, 2, 3, 4), (5, 6, 7, 8)]",
        "num_ids": 367
    },
    {
        "number": 792,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([[1,2,3],[4,5,6]]) == 2",
        "num_ids": 316
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n",
        "test": "assert last([1,2,3,4,5],5) == 4",
        "num_ids": 368
    },
    {
        "number": 794,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\"",
        "test": "assert text_starta_endb(\"abababab\") == \"abababab\"",
        "num_ids": 273
    },
    {
        "number": 796,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 224
    },
    {
        "number": 797,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n < 2:\n        return 0\n    else:\n        sum = 0\n        i = 1\n        while i <= n:\n            if i % 2!= 0:\n                sum += i\n            i += 1\n        return sum",
        "test": "assert sum_odd(1) == 0, \"Expected sum_odd(1) to be 0, but got {}\".format(sum_odd(1))",
        "num_ids": 406
    },
    {
        "number": 798,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 206
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # We convert the input to binary string representation and then split it into two parts\n    binary_string = bin(n)[2:]\n    # We calculate the number of bits that we need to rotate to the right\n    num_bits_to_rotate = len(binary_string) - d\n    \n    # We split the binary string into two parts\n    binary_string_left = binary_string[:num_bits_to_rotate]\n    binary_string_right = binary_string[num_bits_to_rotate:]\n    \n    # We convert the binary strings back to integers and then left-shift them by d bits\n    rotated_integer = int(binary_string_left, 2) << d\n    \n    # We concatenate the left and right binary strings to form the rotated binary string\n    rotated_binary_string = format(rotated_integer, '0' + str(num_bits_to_rotate) + 'b')\n    \n    # We convert the rotated binary string back to an integer\n    rotated_integer = int(rotated_binary_string, 2)\n    \n    # We return the rotated integer\n    return rotated_integer",
        "test": "assert left_rotate(123456789,7) == 267312317",
        "num_ids": 731
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(' +','', text)",
        "test": "assert remove_all_spaces(\"  This is a test  \") == \"Thisisatest\"",
        "num_ids": 199
    },
    {
        "number": 801,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n        elif num == y:\n            count += 1\n        elif num == z:\n            count += 1\n\n    return count",
        "test": "assert test_three_equal(1, 1, 1) == 3",
        "num_ids": 323
    },
    {
        "number": 802,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    # check if the array is already sorted\n    if n == 1 or (n > 1 and arr[0] <= arr[1]):\n        return 0\n    \n    # check if the array is already sorted in reverse\n    if n == 2 or (n > 2 and arr[n-1] >= arr[n-2]):\n        return 0\n    \n    # find the smallest element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    \n    # find the index of the smallest element\n    index = arr.index(min_element)\n    \n    # count the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(n):\n        j = (i+index)%n\n        if arr[i] > arr[j]:\n            count += 1\n    \n    return count",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0",
        "num_ids": 842
    },
    {
        "number": 803,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Convert the given number to an integer\n    n = int(n)\n\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n\n    # Set the lower and upper bounds for the binary search\n    left = 0\n    right = n\n\n    # Perform binary search until we find the perfect square\n    while left <= right:\n        mid = (left + right) // 2\n        square = mid * mid\n\n        # Check if the mid is a perfect square\n        if square == n:\n            return True\n        elif square < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If we get to this point, the number is not a perfect square\n    return False",
        "test": "assert is_perfect_square(16) == True, \"Expected True\"",
        "num_ids": 565
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2, 4, 6]) == True, \"The product of 2, 4, and 6 is even\"",
        "num_ids": 337
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_list = [lists[i][j]]\n            elif lists[i][j] == max_sum:\n                max_list.append(lists[i][j])\n\n    return max_list",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]",
        "num_ids": 954
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
        "test": "assert max_run_uppercase(\"Hello, World!\") == 1",
        "num_ids": 622
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 302
    },
    {
        "number": 808,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False",
        "test": "assert check_K(('a', 'b'), 2) == True",
        "num_ids": 282
    },
    {
        "number": 809,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must be of the same length to compare\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True",
        "test": "assert check_smaller(('apple', 10), ('banana', 5)) == False",
        "num_ids": 473
    }
]