[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples to lists for easier comparison\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    \n    # Loop through the lists to find the shared elements\n    shared_list = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            shared_list.append(test_list1[i])\n    \n    # Return the shared list\n    return shared_list",
        "test": "assert similar_elements((1, 2, 3, 4, 5), (2, 3, 4, 5, 6)) == [2, 3, 4, 5]",
        "num_ids": 1165,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, and False otherwise.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(123) == True, 'The function should return True for 123 as it is a non-prime number.'",
        "num_ids": 950,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of integers and returns the n largest integers in descending order.\n    '''\n    # create a min-heap of size n\n    heap = hq.nsmallest(n, nums)\n    \n    # return the min-heap as the result\n    return heap",
        "test": "assert heap_queue_largest([], 5) == []",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x & (x-1) == 0: \n        return True \n    else: \n        return False ",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words",
        "test": "assert find_char_long(\"python\") == [\"python\"]",
        "num_ids": 761,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 937,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Check if the input string is palindrome or not\n    if str == str[::-1]:\n        return 0\n    \n    # Initialize two pointers, left and right, to point to the first and last characters of the string, respectively\n    left = 0\n    right = len(str) - 1\n    \n    # Initialize a variable 'rotations' to 0\n    rotations = 0\n    \n    # Iterate while the left pointer is less than the right pointer\n    while left < right:\n        \n        # Check if the characters at the left and right pointers are equal\n        if str[left]!= str[right]:\n            \n            # If they are not, then the string is not a palindrome and we can stop iterating\n            break\n        \n        # If they are equal, then we need to rotate the string by one character to get the same string\n        else:\n            left += 1\n            right -= 1\n            rotations += 1\n            \n    # Return the number of rotations needed to get the same string\n    return rotations",
        "test": "assert find_Rotations(\"hello\") == 0, \"find_Rotations should return 0 for hello\"",
        "num_ids": 1338,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return s\n    elif s[0] == ch:\n        return remove_Occ(s[1:],ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1],ch)\n    else:\n        return s[0] + remove_Occ(s[1:],ch)\n",
        "test": "assert remove_Occ(\"Hello World\", \"x\") == \"Hello World\"",
        "num_ids": 932,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Sort the row in ascending order\n        M[i].sort()\n        # Calculate the sum of the row\n        row_sum = sum(M[i])\n        # If the row sum is negative, reverse the row\n        if row_sum < 0:\n            M[i].reverse()\n    # Return the sorted matrix\n    return M",
        "test": "assert sort_matrix([[1],[2],[3]]) == [[1], [2], [3]]",
        "num_ids": 1528,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input and returns its volume.\n    '''\n    volume = l * b * h\n    return volume",
        "test": "assert find_Volume(1,2,3) == 6",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]*_[a-z]*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"a_b_c_d\") == True",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a",
        "test": "assert square_perimeter(5) == 20, \"square_perimeter(5) should return 20, but it returns {}\".format(square_perimeter(5))",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n\n    char_list = list(string)\n    char_set = set(char_list)\n\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            char_list.remove(chr(i))\n\n    return ''.join(char_list)\n",
        "test": "assert str_to_list(\"abcdefghijklmnopqrstuvwxyz\") == \"bcdefghijklmnopqrstuvwxyz\"",
        "num_ids": 1709,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # create a dictionary to store the occurrences of each element in the array\n    occurrences = {}\n\n    for num in arraynums:\n        # check if the element is already in the dictionary\n        if num in occurrences:\n            # if it is, return True\n            return True\n        else:\n            # otherwise, add 1 to the count in the dictionary\n            occurrences[num] = 1\n\n    # if we make it through the loop without finding any duplicates, return False\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 1188,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define the list of valid woodall numbers\n    valid_woodall = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100]\n\n    # Check if the number is in the valid woodall list\n    if x in valid_woodall:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(15) == False, \"is_woodall(15) == False\"",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    # calculate the reverse of the number and add 1\n    reverse_sum = int(reversed_num) + 1\n    # check if the original number is one less than twice the reverse\n    return num < reverse_sum",
        "test": "assert rev(98765) == False, \"rev(98765) is not False\"",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize max_num to the first number in the list\n    max_num = arr[0]\n    # Loop through the list and compare each digit to the previous largest number\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    # Return the max_num\n    return max_num",
        "test": "assert find_Max_Num([9, 8, 7, 6, 5]) == 9",
        "num_ids": 977,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-3,4) == True",
        "num_ids": 874,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 10*is_octagonal(n-1) + 5*is_octagonal(n-2)",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[sum(int(d) for d in s[i:])] += 1\n    return digit_count[len(s)]",
        "test": "assert count_Substrings(\"1234\") == 1",
        "num_ids": 1068,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest",
        "test": "assert smallest_num([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 1",
        "num_ids": 817,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        test_list (list): List of tuples, where each tuple represents a pair of integers.\n\n    Returns:\n        int: The maximum difference between available pairs in the given tuple list.\n\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([(1,2), (3,4), (5,6), (7,8), (9,10)]) == 8",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sorting the list based on second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # Returning the sorted list\n    return subjectmarks",
        "test": "assert subject_marks([(85, 'Math'), (75, 'Science'), (90, 'English'), (80, 'History'), (95, 'Biology')]) == [('Biology', 95), ('English', 90), ('History', 80), ('Math', 85), ('Science', 75)]",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: If the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: Add the first element to the sum of the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 752,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:   \n        return 1   \n    else:   \n        return n * (n-1) // 2",
        "test": "assert bell_number(0) == 1, \"bell_number(0) should be 1.\"",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) < 2:\n        return True\n\n    for i in range(1, len(A)):\n        if A[i-1] > A[i]:\n            return False\n\n    return True",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True, \"is_Monotonic failed for [1, 2, 3, 4, 5]\"",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for sub in s:\n        if sub not in l:\n            return False\n    return True",
        "test": "assert is_sublist([1, 2, 3], [2, 4]) == False",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    count = 0\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                count += 1\n                break\n    if count == len(Input)-1:\n        return True\n    else:\n        return False",
        "test": "assert find_equal_tuple([(1, 2), (3, 4)]) == True, \"Test 2: True\"",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # define variables for sorting\n    n = len(nums)\n    gap = n\n\n    # loop until gap is no longer reduced\n    while gap > 1:\n        # reduce the gap size\n        gap = int(gap / 1.3)\n\n        # loop through the list\n        for i in range(n - gap):\n            # check if the current element is greater than the next element\n            if nums[i] > nums[i+gap]:\n                # swap the elements\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n\n    # return the sorted list\n    return nums",
        "test": "assert comb_sort([]) == []",
        "num_ids": 1533,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt_n = int(n ** 0.5) # Get the square root of n\n    if (sqrt_n * sqrt_n == n) or (sqrt_n * sqrt_n < n): # If the square root is a perfect square\n        return True\n    else:\n        return False",
        "test": "assert dif_Square(4) == True",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_colors = []\n    current_pattern = \"\"\n    for color in colors:\n        if color not in pattern_colors:\n            pattern_colors.append(color)\n            current_pattern = color\n        else:\n            if current_pattern == color:\n                continue\n            else:\n                return False\n    if current_pattern not in patterns:\n        return False\n    return True",
        "test": "assert is_samepatterns([1, 2, 3], [[1, 2, 3], [2, 3, 1]]) == False",
        "num_ids": 1367,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K!= 0:\n                count += 1\n                break\n        if count == len(tup):\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 10) == []",
        "num_ids": 1199,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(11) == True, \"Test Failed: is_Diff(11) should return True, got False.\"",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for i in s.split():\n        if len(i) % 2!= 0:\n            return False\n    return True",
        "test": "assert word_len(\"hello\") == False",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a, b, c, d = 0, 1, 0, 0\n    for i in range(1, n+1):\n        a, b, c, d = a + b, a + c, a + d, a + b + c + d\n    return a",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*r**3\n    return v",
        "test": "assert volume_sphere(1) == 4.1887902047863905",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def get_Char(strr):\n    # convert string to list\n    char_list = list(strr)\n    # initialize sum variable to 0\n    sum_val = 0\n    # iterate over each character of the list\n    for char in char_list:\n        # convert each character to its ASCII value\n        ascii_val = ord(char)\n        # add the ASCII value to the sum variable\n        sum_val += ascii_val\n    # return the character made by adding the ASCII value of all the characters of the string modulo 26\n    return chr((sum_val % 26) + ord('A'))",
        "test": "assert get_Char(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 22, \"get_Char('ABCDEFGHIJKLMNOPQRSTUVWXYZ') should return 22.\"",
        "num_ids": 2121,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # Initialize sequence with the first two numbers\n    seq = [1, 1]\n    # Loop through the rest of the sequence\n    for i in range(2, n+1):\n        # If the number at index i is 1, add it to the sequence\n        if seq[i-1] == 1:\n            seq.append(i)\n        # If the number at index i is 0, multiply it by 2 and add it to the sequence\n        else:\n            seq.append(2*i)\n    # Return the nth number in the sequence\n    return seq[n-1]",
        "test": "assert sequence(1) == 1",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4*pi*r**2",
        "test": "assert surfacearea_sphere(1) == math.pi*4*1**2, \"The surface area of a sphere with radius 1 is not correct.\"",
        "num_ids": 818,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n + 1) * (2 * n + 1) * (2 * n + 1) // 6",
        "test": "assert centered_hexagonal_number(1) == 3",
        "num_ids": 1006,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({},{},{}) == {}",
        "num_ids": 1462,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n",
        "test": "assert freq_count([1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    min_diff = float('inf')\n    closest = N\n    \n    # Loop through all numbers from 1 to N-1\n    for i in range(1, N):\n        # Calculate the difference between the current number and N\n        diff = abs(N-i)\n        # If the current difference is smaller than the minimum difference, update the minimum difference and closest number\n        if diff < min_diff:\n            min_diff = diff\n            closest = i\n    \n    return closest",
        "test": "assert closest_num(3) == 2, \"closest_num(3) should be 2\"",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len",
        "test": "assert len_log(['hello', 'world']) == 5",
        "num_ids": 886,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
        "test": "assert find_substring(['hello', 'world', 'python', 'programming'], 'python') == True, \"find_substring(['hello', 'world', 'python', 'programming'], 'python') should return True\"",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True",
        "test": "assert is_undulating(2) == True",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes in two parameters a and b and returns the value of a raised to the power of b.\n    \"\"\"\n    result = a**b\n    return result",
        "test": "assert power(2,3) == 8, \"2^3!= 8\"",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_index = None\n    for i, item in enumerate(test_list):\n        if minimum_index is None or item[1] < test_list[minimum_index][1]:\n            minimum_index = i\n    return test_list[minimum_index][0]",
        "test": "assert index_minimum([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 1",
        "num_ids": 1076,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 1004,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(1) == 1",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Helper function to flatten a list of lists\n    def flatten(lst):\n        return [item for sublist in lst for item in sublist]\n\n    # Flatten the list of lists\n    flat_list = flatten(list1)\n\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Iterate over the flattened list and count the frequency of each element\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict",
        "test": "assert frequency_lists([[], [1], [2, 3]]) == {1: 1, 2: 1, 3: 1}",
        "num_ids": 1734,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)",
        "test": "assert multiply_num([6, 7, 8]) == 42",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal number to binary string with no leading zeros\n    binary = bin(n)[2:]\n    # If binary string is empty, return \"0\"\n    if not binary:\n        return \"0\"\n    # Pad the binary string with zeros to make it of equal length as the original decimal number\n    while len(binary) < len(str(n)):\n        binary = \"0\" + binary\n    return binary",
        "test": "assert decimal_to_binary(15) == \"1111\"",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def next_smallest_palindrome(num):\n    while True:\n        num_str = str(num)\n        num_str_rev = num_str[::-1]\n        if num_str == num_str_rev:\n            return int(num_str)\n        num += 1",
        "test": "assert next_smallest_palindrome(1) == 1",
        "num_ids": 1615,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None",
        "test": "assert kth_element([1, 2, 3, 4, 5], 5) == 5",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def snake_to_camel(word):\n    # Split the word into a list of words using snake_case\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one\n    camel_case = [words[0]] + [word.capitalize() for word in words[1:]]\n    # Join the words into a camelCase string\n    return ''.join(camel_case)",
        "test": "assert snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n == 0:\n        return m\n    elif m == 0:\n        return n\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1) - eulerian_num(n-1, m-1)",
        "test": "assert eulerian_num(5, 5) == 10",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "test": "assert sort_sublists([['a', 'b'], ['c', 'd'], ['e']]) == [['a', 'b'], ['c', 'd'], ['e']]",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count",
        "test": "assert count([True, False, True, False, True]) == 3, \"The output of count([True, False, True, False, True]) is not correct.\"",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3)",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # combine three lists into one sorted list\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list\n",
        "test": "assert merge_sorted_list([],[],[]) == [], \"The function should return an empty list if all the input lists are empty\"",
        "num_ids": 1757,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def odd_Equivalent(s, n):\n    # convert the binary string to an integer\n    s = int(s, 2)\n    # initialize the counter\n    count = 0\n    # rotate the binary string the given number of times\n    for i in range(n):\n        s = ((s & 1) << 1) | (s >> 1)\n    # check if the rotated string has an odd value\n    if s & 1:\n        count += 1\n    # return the number of odd values found\n    return count",
        "test": "assert odd_Equivalent('101', 3) == 0",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements",
        "test": "assert common_in_nested_lists([]) == []",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer('123') == True",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d) > 0:\n            return False\n    return True",
        "test": "assert empty_dit([{'a': 1}, {'b': 2}, {'c': 3}]) == False",
        "num_ids": 738,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total",
        "test": "assert tuple_to_int((0, 0, 0, 0, 0)) == 0",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list",
        "test": "assert list_to_float([[1,'2',3], [4.5,6], ['7',8]]) == [[1.0, 2.0, 3.0], [4.5, 6.0], [7.0, 8.0]], \"list_to_float should convert all possible convertible elements in a list of lists to floats.\"",
        "num_ids": 1442,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the list of strings\n    return string.split()",
        "test": "assert string_to_list('hello world') == ['hello', 'world']",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]",
        "test": "assert search([4, 5, 5, 5, 6, 7, 8]) == 5",
        "num_ids": 1132,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    current_product = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product *= abs(list1[i][0] - list1[j][0])\n            current_product *= abs(list1[i][1] - list1[j][1])\n            max_product = max(max_product, current_product)\n    return max_product",
        "test": "assert max_product_tuple([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) == (432, 1320)",
        "num_ids": 1234,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function finds the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize variables\n    amicable_sum = 0\n    count = 0\n\n    # Loop through all numbers up to the specified limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if num == amicable_number(num):\n            amicable_sum += num\n            count += 1\n\n    # Return the sum of the amicable numbers\n    return amicable_sum\n\n\ndef amicable_number(num):\n    \"\"\"\n    This function calculates the amicable number of a specified number.\n    \"\"\"\n    # Check if the number is less than 2\n    if num < 2:\n        return None\n\n    # Initialize variables\n    sum_of_squares = 0\n    difference = 0\n    amicable_num = 0\n\n    # Calculate the sum of squares of the first 10 numbers\n    for i in range(1, num):\n        sum_of_squares += i ** 2\n\n    # Calculate the difference between the sum of squares and the square of the number\n    difference = (sum_of_squares - num ** 2)\n\n    # Calculate the amicable number\n    amicable_num = num + difference\n\n    # Check if the amicable number is less than 2\n    if amicable_num < 2:\n        return None\n\n    # Check if the amicable number is equal to the square of the number\n    if amicable_num == num ** 2:\n        return None\n\n    # Check if the amicable number is an amicable number\n    for i in range(1, num):\n        if amicable_number(i) == amicable_num:\n            return None\n\n    # If the amicable number is an amicable number, return it\n    return amicable_num",
        "test": "assert amicable_numbers_sum(100) == 31626",
        "num_ids": 1420,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\n",
        "test": "assert angle_complex(0+0j,0+0j) == 0j",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def find_length(string):\n    n = len(string)\n    length = 0\n    max_length = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            length += 1\n        else:\n            length = 0\n\n        if length > max_length:\n            max_length = length\n\n    return max_length",
        "test": "assert find_length(\"11001011\") == 2",
        "num_ids": 2207,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n\n    :param a: the first number\n    :type a: int\n    :param b: the second number\n    :type b: int\n    :return: the sum of common divisors\n    :rtype: int\n    \"\"\"\n    divisors = []\n\n    # find all divisors of a and b and store them in a list\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # sum up the common divisors and return the result\n    return sum(divisors)",
        "test": "assert sum(24, 36) == 96, \"The sum of common divisors of 24 and 36 is not correct.\"",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(0, 3) == 0, \"multiply_int failed for x=0, y=3\"",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # convert the input string to a list of words\n    words = str.split()\n\n    # create an empty list to store the long words\n    long_words_list = []\n\n    # iterate over each word in the list\n    for word in words:\n        # check if the word is longer than n characters\n        if len(word) > n:\n            # add the long word to the list\n            long_words_list.append(word)\n\n    # return the list of long words\n    return long_words_list",
        "test": "assert long_words(5, [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"jackfruit\", \"kiwi\", \"lemon\", \"mango\", \"nectarine\", \"orange\", \"papaya\", \"pear\", \"quince\", \"rambutan\", \"raspberry\", \"strawberry\", \"tangerine\", \"watermelon\", \"watermelon\", \"watermelon\", \"watermelon\", \"watermelon\"]) == [\"kiwi\", \"watermelon\"]",
        "num_ids": 2276,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix has the same dimensions as a magic square\n    if len(my_matrix)!= 3:\n        return False\n    if len(my_matrix[0])!= 3:\n        return False\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # check if all elements in the matrix are unique\n    for row in my_matrix:\n        if len(row)!= len(set(row)):\n            return False\n    \n    # check if the matrix has any number in its diagonals that is repeated\n    for i in range(3):\n        if my_matrix[i][i] == my_matrix[i][2-i] == my_matrix[2-i][i] == my_matrix[2-i][2-i]:\n            return True\n    \n    # if all checks pass, the matrix is a magic square\n    return True",
        "test": "assert magic_square_test([[4,9,2],[3,5,7],[8,1,6],[7,6,5],[1,3,9],[2,8,4]]) == False",
        "num_ids": 1372,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_freq = 0\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 2, 3, 3, 4, 4, 4, 5, 5]) == 4",
        "num_ids": 1087,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = []\n    \n    for i, char in enumerate(str1):\n        if char in vowels and char not in vowel_indices:\n            vowel_indices.append(i)\n    \n    if vowel_indices:\n        reversed_str = str1[:vowel_indices[0]] + ''.join(reversed(str1[i] for i in vowel_indices)) + str1[vowel_indices[-1]+1:]\n    else:\n        reversed_str = str1\n    \n    return reversed_str",
        "test": "assert reverse_vowels(\"Python is awesome\") == \"noawesmo si ynop\"",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)",
        "test": "assert tup_string(('a', 'b', 'c')) == \"('a', 'b', 'c')\"",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum",
        "test": "assert sum_negativenum([]) == 0, \"sum_negativenum([]) == 0\"",
        "num_ids": 862,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    return n * (2 * factorial(n) + 1) // 3\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * len(nums))\n    for num in nums:\n        count[num] += 1\n    non_zero_count = sum(count)\n    zero_count = sum(count[0:len(count)//2])\n    ratio = zero_count / non_zero_count\n    return ratio",
        "test": "assert zero_count([0, 0, 0, 0, 0]) == 5/5",
        "num_ids": 1419,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check for base case\n    if n == 1:\n        return True\n\n    # check for subtraction by 1\n    if n == 2:\n        return True\n\n    # check if n can be represented as sum of powers of 2\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            if n//i == i:\n                return True\n\n    return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True, \"Failed test case: 1\"",
        "num_ids": 1417,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n\n    Parameters:\n    r (float): The radius of the circle\n\n    Returns:\n    float: The circumference of the circle\n    \"\"\"\n    circumference = 2 * 3.14159 * r  # pi * r\n    return circumference",
        "test": "assert circle_circumference(5) == 31.4159, \"The correct answer is 31.4159, but you returned: {}\".format(circle_circumference(5))",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if type(item) == list:\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "test": "assert extract_singly([[1,2,3], [4,5,6], [7,8,9]]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # find the length of the list\n    n = len(nums)\n    \n    # create an empty list to store the sorted numbers\n    sorted_nums = []\n    \n    # loop through the numbers, starting from the last number and pancaking it\n    for i in range(n-1, -1, -1):\n        \n        # pancake the current number i\n        for j in range(i, 0, -1):\n            if nums[j] > nums[j-1]:\n                nums[j], nums[j-1] = nums[j-1], nums[j]\n        \n        # add the sorted number to the sorted_nums list\n        sorted_nums.append(nums[i])\n    \n    return sorted_nums",
        "test": "assert pancake_sort([1]) == [1]",
        "num_ids": 1519,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3], [4,5,6], [7,8,9]) == 0",
        "num_ids": 1309,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    # initialize count variable to 0\n    count = 0\n\n    # loop through each item in the tuple\n    for item in Input:\n\n        # check if the item is a list\n        if type(item) == list:\n            # increment count variable if it is a list\n            count += 1\n\n    # return the count of lists\n    return count",
        "test": "assert find_lists((1, 2, 3, 4, 5)) == 0",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n\n    Args:\n    arr: A list of numbers\n\n    Returns:\n    The maximum absolute difference between any two elements in the array.\n    \"\"\"\n\n    # Initialize variables to keep track of minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # Iterate through the array and find the minimum and maximum values\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    # Calculate the maximum absolute difference between any two elements in the array\n    max_diff = max_val - min_val\n\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 1, 1, 1, 1]) == 0, \"max_Abs_Diff([1, 1, 1, 1, 1]) == 0\"",
        "num_ids": 1215,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are invertible\n    if a*b == 0:\n        return None\n\n    # compute the discriminant\n    delta = b**2 - 4*a*n\n\n    # check if there is a solution\n    if delta < 0:\n        return None\n\n    # compute the two solutions\n    x1 = (-b + delta**0.5)/2/a\n    x2 = (-b - delta**0.5)/2/a\n    y1 = x1/b\n    y2 = x2/b\n\n    return (x1, y1), (x2, y2)",
        "test": "assert find_solution(3, 4, 12) == None",
        "num_ids": 1378,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list",
        "test": "assert remove_elements([1, 2, 3, 4, 5, 6, 7], [2, 4, 6]) == [1, 3, 5, 7]",
        "num_ids": 888,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        return (n // 2) * (n - 1)\n    else:\n        return (n // 2) * (n - 2) + n",
        "test": "assert sum_series(0) == 0",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        r = s/2 * tan(i*pi/l)\n        area += r\n    return area",
        "test": "assert area_polygon(6, 8) == (5/2) * pi * (6 ** 2)",
        "num_ids": 1004,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return (sum(divisors) == n)",
        "test": "assert div_sum(12) == False, \"div_sum(12) should return False\"",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == chr(ord('a') + count):\n            count += 1\n    return count",
        "test": "assert count_char_position(\"hello\") == 0, \"count_char_position('hello') should return 0\"",
        "num_ids": 1207,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result == 0:\n                even_count += 1\n    return even_count",
        "test": "assert find_even_pair([1, 3, 5, 7, 9]) == 0",
        "num_ids": 1115,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # calculate the next power of 2 \n    power = 1\n    while power < n: \n        power <<= 1\n    \n    return power",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,2,4,5,4,3,2,1],2) == 3",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_list += i\n    return sum_list",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 5) == 15",
        "num_ids": 1320,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a",
        "test": "assert perimeter_pentagon(20) == 35.0, \"The perimeter of a regular pentagon with sides of length 20 is not correct.\"",
        "num_ids": 860,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count",
        "test": "assert count_occurance(\"std std std\") == 3",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True",
        "test": "assert check_type((\"a\", 1, 3.0)) == False, \"Fail: Wrong output for tuple ('a', 1, 3.0).\"",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Create a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Iterate over the array and count the occurrences of each element\n    for i in range(n):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n\n    # Iterate over the dictionary and check if the count is more than n/2 for each element\n    for key in count_dict:\n        if count_dict[key] > n/2:\n            return True\n\n    # If none of the elements are majority elements, return False\n    return False",
        "test": "assert is_majority([1, 2, 3, 3, 3, 4, 4, 4, 5], 9, 4) == False",
        "num_ids": 1156,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(15) == 4 # 4 set bits in 15 (1011)",
        "num_ids": 968,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def odd_values_string(string):\n    # create a new string with only the odd values\n    result = ''\n    for i in range(len(string)):\n        if i % 2!= 0:\n            result += string[i]\n    return result",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize a variable 'unset' to True\n    unset = True\n\n    # Iterate from the leftmost bit to the rightmost bit\n    for bit in range(l, r + 1):\n        # Check if the current bit is set or unset\n        if n & (1 << bit):\n            # If it's set, unset the variable\n            unset = False\n            # Exit the loop\n            break\n\n    # Return the value of the unset variable\n    return unset",
        "test": "assert all_Bits_Set_In_The_Given_Range(7, 1, 4) == False",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Create an empty list to store the new array\n    new_arr = []\n\n    # Loop through the first n elements of the original array\n    for i in range(n):\n        # Append the current element to the new array\n        new_arr.append(arr[i])\n\n    # Loop through the remaining elements of the original array\n    for i in range(n, len(arr)):\n        # Check if the current element is negative\n        if arr[i] < 0:\n            # If it is, check if it has already been appended to the new array\n            for j in range(n):\n                if arr[i] == new_arr[j]:\n                    # If it has, skip it and continue to the next element\n                    continue\n            # If it hasn't been appended yet, append it to the new array\n            new_arr.append(arr[i])\n\n    return new_arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 2187,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)",
        "test": "assert replace_blank(\"hello world\", \"*\") == \"hello*world\"",
        "num_ids": 453,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([], 5) == []",
        "num_ids": 1023,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area",
        "test": "assert lateralsuface_cylinder(10, 14) == 2336.0",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume",
        "test": "assert volume_cube(3) == 27, \"volume_cube(3) is incorrect\"",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #initialize a variable to store the even bits of the number\n    even_bits = 0\n    #loop through each bit of the number\n    for i in range(32):\n        #if the current bit is even\n        if n & (1 << i):\n            #set the corresponding bit of the even_bits variable to 1\n            even_bits |= (1 << i)\n    #return the even_bits variable\n    return even_bits",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple\n    counter = Counter(test_list)\n    # Return the dictionary\n    return dict(counter)",
        "test": "assert check_occurences([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == {",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            if str[i:j] and len(str[i:j]) > 1:\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2*n:\n        return 0\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += (m-1)//(2*i+1)\n        else:\n            count += (m-i)//(2*i+1)\n    return count",
        "test": "assert get_total_number_of_sequences(6,3) == 6, \"get_total_number_of_sequences(6,3) should be 6, but it is not.\"",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > 0:\n        list1[-1] = list2\n        return list1\n    else:\n        return None",
        "test": "assert replace_list([1, 2, 3, 4, 5], [6, 7, 8, 9]) == [1, 2, 3, 4, [6, 7, 8, 9]]",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"Hello, World!\") == 13 # correctness check",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # finding the square root of N\n    square_root = int(math.sqrt(N))\n    \n    # using trial division to check if the square root is a perfect square\n    for i in range(square_root, 0, -1):\n        if i * i == N:\n            # if it is, find the next perfect square after it\n            next_square = i * i + 1\n            while next_square <= N:\n                next_square *= 2\n            return next_square\n    \n    # if the square root is not a perfect square, return the square root + 1\n    return square_root + 1",
        "test": "assert next_Perfect_Square(1) == 2",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Find the maximum sum of a decreasing subsequence\n    max_sum_decreasing = max(arr)\n\n    # Find the maximum sum of a decreasing subsequence using a sliding window approach\n    max_sum_decreasing_window = 0\n    curr_sum_decreasing_window = 0\n    for i in range(1, n):\n        curr_sum_decreasing_window += arr[i]\n        if curr_sum_decreasing_window > max_sum_decreasing_window:\n            max_sum_decreasing_window = curr_sum_decreasing_window\n\n    # Find the maximum sum of a increasing subsequence\n    max_sum_increasing = 0\n    for i in range(n - 2, -1, -1):\n        curr_sum_increasing = 0\n        for j in range(i, n):\n            curr_sum_increasing += arr[j]\n            if curr_sum_increasing > max_sum_increasing:\n                max_sum_increasing = curr_sum_increasing\n\n    return max(max_sum_decreasing, max_sum_increasing, max_sum_decreasing_window)",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 3134,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n\n    The babylonian method is based on the fact that the square root of a number is a\n    rational number that represents the quotient of two numbers whose product is the number itself.\n\n    Example:\n\n    >>> babylonian_squareroot(9)\n    3.0\n\n    >>> babylonian_squareroot(16)\n    4.0\n\n    >>> babylonian_squareroot(25)\n    5.0\n\n    The babylonian method converges very quickly for small values of the number, but can be\n    unstable for larger values. However, for larger values, the error in the approximation\n    is usually small, especially if the number is very close to a perfect square.\n\n    \"\"\"\n\n    # First, check if the number is negative. If it is, we cannot compute its square root.\n    if number < 0:\n        raise ValueError(\"Number must be non-negative\")\n\n    # If the number is 0 or 1, its square root is 0 or 1, respectively.\n    if number == 0 or number == 1:\n        return number\n\n    # Otherwise, we start with an initial guess of 1. We will use this to compute the square root.\n    guess = 1\n\n    # We will keep track of the number of iterations in the loop.\n    count = 0\n\n    # We will use a tolerance of 1e-6 to stop the loop when we are reasonably confident that\n    # the square root is accurate.\n    while True:\n        # We compute the new guess for the square root by computing the square of the current guess\n        # and dividing by the number. We also add a factor of 1/2 to the denominator to ensure that\n        # the result is a rational number.\n        new_guess = (guess**2 + number) / (2 * guess)\n\n        # If the difference between the current guess and the new guess is less than the\n        # tolerance, we have converged and can stop the loop.\n        if abs(guess - new_guess) < 1e-6:\n            return new_guess\n\n        # If the number of iterations exceeds 1000, we have failed to converge and can raise an error.\n        if count > 1000:\n            raise ValueError(\"Unable to converge to a root with the specified tolerance\")\n\n        # We update the guess for the next iteration.\n        guess = new_guess\n\n        # We increment the count of iterations.\n        count += 1",
        "test": "assert babylonian_squareroot(1) == 1",
        "num_ids": 1577,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def lps(str):\n    # create a 2D table to store the lengths of longest palindromic subsequences\n    # for all possible substrings of the given string\n    table = [[0] * (len(str) + 1) for _ in range(len(str) + 1)]\n\n    # fill the table using the recursive approach\n    for i in range(len(str) + 1):\n        table[i][0] = 0\n        table[0][i] = 0\n\n    for i in range(1, len(str) + 1):\n        for j in range(1, len(str) + 1):\n            if str[i - 1] == str[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # return the length of the longest palindromic subsequence in the string\n    return table[len(str)][len(str)]",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 1584,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "test": "assert harmonic_sum(1) == 1.0",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "test": "assert intersection_array([1,2,3], [4,5,6]) == []",
        "num_ids": 893,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1 \n    return count",
        "test": "assert count_X((1, 2, 3, 2, 1), 2) == 2, \"count_X function is not working correctly\"",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    lst = [element] + lst\n    return lst",
        "test": "assert insert_element([1], 2) == [2, 1]",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import cmath  \n\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        print(f\"{number} -> r={r}, theta={theta}\")",
        "test": "assert convert(1+2j) == (1+2j)",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_integer(list1):\n    '''\n    This function counts the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count",
        "test": "assert count_integer([]) == 0, \"The function count_integer should return 0 for an empty list\"",
        "num_ids": 818,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'green', 'blue', 'yellow']\n    combinations = []\n    \n    for i in range(len(l) - n + 1):\n        combination = tuple(l[j] for j in range(i, i+n))\n        if combination in combinations:\n            continue\n        combinations.append(combination)\n    \n    return combinations",
        "test": "assert combinations_colors([1, 2, 3], 4) == []",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4, \"count_Primes_nums(10) should return 4\"",
        "num_ids": 1008,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 392,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # compare the first element of each tuple\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 2\n    return primes[n-1]",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 1302,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the tuples must be equal.\")\n        return\n\n    # Perform the element-wise division operation\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n\n    # Return the result\n    return result_tup",
        "test": "assert division_elements((2,4), (2,4)) == (1, 1)",
        "num_ids": 1085,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])",
        "test": "assert split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == ([1, 2, 3, 4], [5, 6, 7, 8, 9])",
        "num_ids": 1053,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years",
        "test": "assert dog_age(10) == 25 # Correct: dog_age function should return 25 for a dog of 10 years old",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1,2,3,4,5,6,7,8,9], 2) == [[1,2], [3,4], [5,6], [7,8], [9]]",
        "num_ids": 1331,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l",
        "test": "assert lateralsurface_cube(20) == 60, \"20 is not a valid side length\"",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(5) == 49, \"square_Sum(5) should be 49, but it's not.\"",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_star_num(n):\n    '''\n    This function takes a positive integer n as input, and returns then'th star number.\n    '''\n    # initialize the variable star_num to 1\n    star_num = 1\n\n    # loop n-1 times and add 1 to star_num each time\n    for i in range(n-1):\n        star_num += 1\n\n    # return the final value of star_num\n    return star_num",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 1786,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 15, \"Incorrect output\"",
        "num_ids": 1147,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initializing a variable to store the sum of even numbers raised to fifth power\n    sum_of_even_numbers = 0\n\n    # iterating from 2 to n\n    for i in range(2, n+1):\n\n        # checking if the number is even\n        if i % 2 == 0:\n\n            # raising the number to the fifth power and adding it to the sum\n            sum_of_even_numbers += i**5\n\n    return sum_of_even_numbers",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6), (7, 8)]) == [7, 8]",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))",
        "test": "assert substract_elements((), ()) == (), 'Should return () for empty input'",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize the sum and sum of squares\n    sum = 0\n    sum_sq = 0\n    # loop through the first n even numbers and add the even binomial coefficients to the sum and sum of squares\n    for i in range(2, n+1, 2):\n        coeff = math.comb(n, i-1)\n        sum += coeff\n        sum_sq += coeff * coeff\n    # return the sum of even index binomial coefficients\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 913,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14159 * (r**2) * h\n    return volume",
        "test": "assert volume_cylinder(4, 5) == 5.426990816987241, \"volume_cylinder(4, 5) should return 5.426990816987241.\"",
        "num_ids": 1092,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}",
        "test": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 2) == {'b': 2, 'c': 3, 'd': 4, 'e': 5}",
        "num_ids": 755,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1] < test_tup[i]:\n            count += 1\n    return count",
        "test": "assert count_first_elements(()) == 0",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return (n*n + 4*n + 10) % 10 == 1",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1033,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to set to remove duplicates\n    unique_list = set(test_list)\n    # check if the length of the set is equal to the length of the list\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1,2,3,4,5]) == True, \"all_unique([1,2,3,4,5]) == True\"",
        "num_ids": 986,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list containing the subtraction of the corresponding elements of the input lists.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    sub = []\n    for i in range(len(nums1)):\n        sub.append(nums1[i] - nums2[i])\n    return sub",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3] # test case 1",
        "num_ids": 1065,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10\n    for i in str(n):\n        freq[int(i)] += 1\n    \n    for i in range(10):\n        if freq[i] > freq[n % 10]:\n            return False\n    \n    return True",
        "test": "assert validate(2345) == True, \"The function should return True for input 2345.\"",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    else:\n        for i in range(len(list)):\n            if list[i]!= element:\n                return False\n        return True",
        "test": "assert check_element([1, 2, 3], 2) == False # test for a list containing some 2's and some 3's",
        "num_ids": 866,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'(?<=a)[b]{2,3}')\n    return pattern.search(text) is not None",
        "test": "assert text_match_two_three('aabbbb') == True, \"text_match_two_three function should return True for 'aabbbb'.\"",
        "num_ids": 1689,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    This function takes an array a, its size n, and the number of times the array should be repeated k. \n    It returns the maximum sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    The algorithm to solve this problem is:\n    1. Calculate the sum of the first n elements of the array a.\n    2. Calculate the sum of the first k elements of the array a.\n    3. Calculate the sum of the first (n+k) elements of the array a.\n    4. Find the difference between the two sums and the sum of the first (n+k) elements.\n    5. Return the difference.\n\n    Complexity: O(n)\n    '''\n    # Step 1: Calculate the sum of the first n elements of the array a.\n    sum_n = sum(a[:n])\n\n    # Step 2: Calculate the sum of the first k elements of the array a.\n    sum_k = sum(a[:k])\n\n    # Step 3: Calculate the sum of the first (n+k) elements of the array a.\n    sum_n_plus_k = sum(a[:n+k])\n\n    # Step 4: Find the difference between the two sums and the sum of the first (n+k) elements.\n    diff = abs(sum_k - sum_n_plus_k)\n\n    # Step 5: Return the difference.\n    return diff",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 2) == 12",
        "num_ids": 1752,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns the list of maximum length.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)",
        "test": "assert max_length([[1,2,3],[4,5,6]]) == 3, \"max_length([[1,2,3],[4,5,6]]) should return 3\"",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def count_no_of_ways(n, k):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i % 2 == 0:\n                if j == 1:\n                    dp[i] += dp[i - 2]\n                else:\n                    dp[i] += dp[i - 2] * dp[i - 3]\n            else:\n                if j == 1:\n                    dp[i] += dp[i - 1]\n                else:\n                    dp[i] += dp[i - 1] * dp[i - 2]\n\n    return dp[-1]",
        "test": "assert count_no_of_ways(2, 2) == 2",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient",
        "test": "assert find(4,2) == 2",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n\n    Parameters:\n    w (float): the length of the base of the triangle\n    h (float): the length of the height of the triangle\n\n    Returns:\n    float: the third side of the right angled triangle\n    \"\"\"\n    return math.sqrt(w**2 + h**2)",
        "test": "assert otherside_rightangle(3,4) == 5, \"Wrong answer for w=3 and h=4\"",
        "num_ids": 565,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num",
        "test": "assert max_val([1, 2, 3]) == 3",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)",
        "test": "assert sum_div(12) == 36",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    def merge(arr, left, mid, right):\n        \"\"\"\n        Merge two sorted sub-arrays.\n        \"\"\"\n        n1 = mid - left + 1\n        n2 = right - mid\n\n        L = [0] * n1\n        R = [0] * n2\n\n        for i in range(n1):\n            L[i] = arr[left + i]\n\n        for j in range(n2):\n            R[j] = arr[mid + 1 + j]\n\n        i = 0\n        j = 0\n        k = left\n\n        while i < n1 and j < n2:\n            if L[i] <= R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < n1:\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < n2:\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\n    def merge_sort(arr, left, right):\n        \"\"\"\n        Sort an array using merge sort.\n        \"\"\"\n        if left < right:\n            mid = (left + right) // 2\n\n            merge_sort(arr, left, mid)\n            merge_sort(arr, mid + 1, right)\n\n            merge(arr, left, mid, right)\n\n    merge_sort(arr, 0, len(arr) - 1)\n    inv_count = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[0]:\n            inv_count += (len(arr) - i)\n\n    return inv_count",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1875,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list and flattens it into a single,\n    one-dimensional list.\n    \"\"\"\n    flattened = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened",
        "test": "assert flatten_list([[1, 2], [3, [4, [5]]]]) == [1, 2, 3, 4, 5]",
        "num_ids": 819,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int) # create defaultdict for storing max_values\n    \n    # iterate over the list of tuples\n    for item in stdata:\n        # add the values to the defaultdict\n        max_dict[item[0]] += item[1]\n        \n    # find the maximum value from the defaultdict\n    max_val = max(max_dict.values())\n        \n    # return the maximum value as the result\n    return max_val",
        "test": "assert max_aggregate([(1, 2), (3, 4), (5, 6)]) == 6, \"Failed on case 1\"",
        "num_ids": 1123,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        sum1 = sum(int(i) for i in binary[:n])\n        sum2 = sum(int(i) for i in binary[-n:])\n        if sum1 == sum2:\n            count += 1\n    return count",
        "test": "assert count_binary_seq(1) == 2 # case 1",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + dict_depth(value))\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, 1 + dict_depth(item))\n        elif isinstance(value, tuple):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, 1 + dict_depth(item))\n    return depth",
        "test": "assert dict_depth({}) == 0",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, a list of ranges, a number of rotations, and an index.\n    It calculates the index of the element that needs to be found after the number of rotations.\n    It returns the element at that index.\n    '''\n    # Initialize the count variable to keep track of the number of rotations\n    count = 0\n    \n    # Initialize the current element to the first element of the array\n    current = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Calculate the new current element after rotating\n        new_current = (current + i) % len(arr)\n        \n        # Check if the current element is in the range specified by the ranges list\n        if (count + i) % len(ranges) == index:\n            return arr[new_current]\n        \n        # Increment the count variable for the next rotation\n        count += 1\n        \n        # Check if the count variable has reached the number of rotations\n        if count == rotations:\n            return arr[new_current]\n    \n    # If the count variable has not reached the number of rotations, return the current element\n    return current",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[2,4]],1,2)==3 # rotations=1, index=2",
        "num_ids": 1868,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(\"^p\")\n    for word in words:\n        if pattern.match(word):\n            return word, next(word for word in words if pattern.match(word))\n    return None",
        "test": "assert start_withp([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == [\"pancake\", \"pear\"]",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize a list to store the maximum sum of increasing subsequence until the ith index\n    max_sum = [0] * n\n\n    # Initialize a list to store the sum of increasing subsequence until the ith index\n    sum_list = [0] * n\n\n    # Initialize a variable to store the sum of the first k elements\n    sum_k = sum(a[:k])\n\n    # Initialize a variable to store the maximum sum of increasing subsequence from prefix until the ith index\n    max_sum_until_i = sum_k\n\n    # Initialize a variable to store the sum of the first k elements until the ith index\n    sum_k_until_i = sum_k\n\n    # Iterate through the array from 0 to n-1\n    for i in range(n):\n        # Check if the i-th element is greater than or equal to k\n        if i >= k:\n            # Calculate the sum of the first k elements until the i-th index\n            sum_k_until_i -= a[i - k]\n\n        # Calculate the sum of the first k elements from the i-th index\n        sum_k_from_i = sum_k_until_i\n\n        # Calculate the maximum sum of increasing subsequence from prefix until the i-th index\n        for j in range(k, n):\n            # Update the maximum sum of increasing subsequence from prefix until the i-th index if the current element is greater than the current maximum sum\n            if a[j] > max_sum[j - k]:\n                max_sum[j - k] = a[j]\n\n            # Update the sum of increasing subsequence from prefix until the i-th index if the current element is greater than the current sum of increasing subsequence from prefix until the j-th index\n            if a[j] > sum_list[j - k]:\n                sum_list[j - k] = a[j]\n\n        # Update the maximum sum of increasing subsequence from prefix until the i-th index if the maximum sum of increasing subsequence from prefix until the i-th index is greater than the current maximum sum\n        if max_sum_until_i < sum_k_from_i:\n            max_sum_until_i = sum_k_from_i\n\n    # Return the maximum sum of increasing subsequence from prefix until the ith index\n    return max_sum_until_i",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 3, 4) == 10",
        "num_ids": 2568,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    # Reverse the colon\n    new_tuplex = tuple(new_tuplex[m:n])\n    # Return the reversed colon\n    return new_tuplex",
        "test": "assert colon_tuplex((1,2,3),1,3) == (1,3)",
        "num_ids": 1211,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list to store the largest products\n    result = []\n\n    # Iterate over the specified number of products\n    for i in range(N):\n        # Calculate the product of the i-th largest number in nums1 and the i-th largest number in nums2\n        product = nums1[i] * nums2[i]\n\n        # If the product is not already in the result list, add it\n        if product not in result:\n            result.append(product)\n\n    # Return the result list\n    return result",
        "test": "assert large_product([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 5) == [12000, 5000, 2000, 1200, 600]",
        "num_ids": 2152,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(5, 2) == 5",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"\") == ()",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit of a given integer n.\n    \"\"\"\n    # Initialize mask with all bits set to 1\n    mask = 0xffffffff\n    # Set all bits in the mask except the leftmost one\n    mask &= ~(mask << 1)\n    # Perform a bitwise AND operation with n and the mask\n    n &= mask\n    # Shift the result of the AND operation to the left by 1 bit\n    n <<= 1\n    # Return the resulting integer with the leftmost unset bit set to 1\n    return n",
        "test": "assert set_left_most_unset_bit(0) == 0",
        "num_ids": 1107,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h",
        "test": "assert volume_cone(0,10) == 0, \"The volume of a cone with radius 0 and height 10 is incorrect.\"",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # calculate the power of 2 that is less than or equal to n\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 <<= 1\n\n    # return the highest power of 2 less than or equal to n\n    return power_of_2 >> 1",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 930,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 800,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "test": "assert add_string([\"apple\", \"banana\", \"cherry\"], \"{0} is a fruit.\") == [\"apple is a fruit.\", \"banana is a fruit.\", \"cherry is a fruit.\"]",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # initialize an empty dictionary\n    data = {}\n    \n    # loop through each list and add the values to the nested dictionary\n    for i, list in enumerate([l1, l2, l3]):\n        for value in list:\n            # get the key for the nested dictionary\n            key = f\"list{i+1}\"\n            \n            # check if the key already exists in the dictionary\n            if key in data:\n                # if it does, add the new value to the list of values for that key\n                data[key].append(value)\n            else:\n                # if it doesn't, create a new key-value pair for the dictionary\n                data[key] = [value]\n    \n    return data",
        "test": "assert convert_list_dictionary([1, 2, 3], [4, 5, 6], [7, 8, 9]) == {'list1': [1, 2, 3], 'list2': [4, 5, 6], 'list3': [7, 8, 9]}",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 12\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for element in input_list:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_list = [element]\n        elif len(str(element)) == max_length:\n            max_list.append(element)\n    \n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True",
        "test": "assert check_distinct((1, 2, 3, 4)) == True",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first character that appears only once in the string\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # If no character appears only once, return None\n    return None",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(pattern, string))",
        "test": "assert check_char('a') == True",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = [a, b, c]\n    sorted_list.sort()\n    \n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[len(sorted_list)//2 - 1] + sorted_list[len(sorted_list)//2])/2\n    else:\n        median = sorted_list[len(sorted_list)//2]\n    \n    return median",
        "test": "assert median_numbers(1,2,3) == 2.0",
        "num_ids": 1018,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    total = 0\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = [int(d) for d in str(num)]\n        # Add up the digits\n        total += sum(digits)\n    # Return the total sum\n    return total",
        "test": "assert sum_of_digits([123, 456, 789]) == 45",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = tuple([a ^ b for a, b in zip(test_tup1, test_tup2)])\n    return xor_result",
        "test": "assert bitwise_xor((1, 0, 1), (1, 0, 1)) == (0, 0, 0)",
        "num_ids": 1146,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    unique_tuples = len(unique_tuples)\n    return unique_tuples",
        "test": "assert extract_freq([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result_list = []\n    # Loop through both tuples\n    for i in range(len(test_tup1)):\n        # Check if the index is within the range of the first tuple\n        if i < len(test_tup1):\n            # If it is within the range, add the elements at the current index and the next index to the result list\n            result_list.append(test_tup1[i] + test_tup2[i])\n        # If the index is out of range, add None to the result list\n        else:\n            result_list.append(None)\n    # Return the result list as a tuple\n    return tuple(result_list)",
        "test": "assert add_nested_tuples(((1,2),(3,4)), ((5,6),(7,8))) == ((6,8),(10,12))",
        "num_ids": 1104,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2,3) == 2",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True \n    return False ",
        "test": "assert check_tuplex((1,2,3),(4,5)) == False, \"Test case 2 failed\"",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0: \n        return False\n    else: \n        return True",
        "test": "assert find_Parity(12) == False",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    digits.sort(reverse=True)\n    result = 0\n    for i, digit in enumerate(digits):\n        if i == 0:\n            result = digit * 10 ** (len(digits) - 1)\n        else:\n            result += digit * 10 ** (len(digits) - 1 - i)\n    return result\n",
        "test": "assert rearrange_bigger(500000) == 500000",
        "num_ids": 1639,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    min_heap = []\n    count = 0\n\n    for num1 in nums1:\n        heapq.heappush(heap, (num1, 0))\n        if len(heap) > k:\n            num1, count = heapq.heappop(heap)\n        if count < k:\n            heapq.heappush(min_heap, (count, -num1))\n\n    for num2 in nums2:\n        if len(min_heap) > 0 and min_heap[0][1] <= num2:\n            count, num1 = min_heap[0]\n            min_heap[0] = (count-1, -num1)\n            heapq.heappush(heap, (num1, count))\n        else:\n            heapq.heappush(heap, (-num2, 0))\n            if len(heap) > k:\n                num2, count = heapq.heappop(heap)\n            if count < k:\n                heapq.heappush(min_heap, (count, num2))\n\n    result = []\n    while len(min_heap) > 0:\n        count, num1 = min_heap[0]\n        min_heap[0] = (count-1, num1)\n        heapq.heappush(heap, (num1, count))\n        result.append((num1, -num2))\n        if len(heap) > k:\n            num1, count = heapq.heappop(heap)\n        if count < k:\n            heapq.heappush(min_heap, (count, -num1))\n\n    return result",
        "test": "assert k_smallest_pairs([1,7,11], [2,4,6], 4) == [[1,2],[1,4],[1,6],[7,2],[7,4],[7,6]]",
        "num_ids": 2181,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and finds the minimum product from the pairs of tuples within that list.\n    '''\n\n    # Initialize minimum product to be infinity\n    min_product = float('inf')\n\n    # Iterate over all pairs of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and compare it with the current minimum product\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product found\n    return min_product",
        "test": "assert min_product_tuple([(1,2), (3,4), (5,6)]) == 24",
        "num_ids": 1310,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    \n    return min_val",
        "test": "assert min_val([3, 5, 2, 8, 1]) == 1, \"min_val([3, 5, 2, 8, 1]) should return 1.\"",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'(?<!^)(?=[A-Z])','', word)\n    word = re.sub(r'(?<!^)(?=[A-Z][a-z])', '', word)\n    return word.title()",
        "test": "assert snake_to_camel('') == ''",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]",
        "test": "assert remove_odd([2, 4, 6, 8, 10, 12]) == [2, 4, 6, 8, 10, 12]",
        "num_ids": 907,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list or len(list1) == 0:\n        print(\"Invalid input. Please provide a valid list of tuples.\")\n        return\n    \n    if n < 1 or n > len(list1):\n        print(\"Invalid input. Please provide a valid value for n.\")\n        return\n    \n    result = list1[n-1]\n    \n    return result",
        "test": "assert extract_nth_element([(1,2),(3,4),(5,6),(7,8)], 2) == (3,4)",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Check if the two lists have the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # Check if any value in list1 exists in list2\n    for value in list1:\n        if value in list2:\n            return True\n\n    # If the loop completes without finding any match, return False\n    return False",
        "test": "assert overlapping([1],[]) == False, \"Error: overlapping([1],[])!= False\"",
        "num_ids": 954,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the pair with highest product.\n    \"\"\"\n    # initialize max_product as negative infinity\n    max_product = float('-inf')\n\n    # iterate through the array\n    for i in range(len(arr)):\n        # iterate through the rest of the array\n        for j in range(i+1, len(arr)):\n            # calculate the product of the two sub-arrays\n            prod = arr[i]*arr[j]\n            # update max_product if the product is greater than max_product\n            if prod > max_product:\n                max_product = prod\n\n    # return the pair with highest product\n    return arr[arr.index(max_product)], max_product",
        "test": "assert max_Product([2,3,4,5,1]) == (6, 8)",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for tup in Input:\n        common_elements.append(tup[0])\n    return common_elements",
        "test": "assert group_tuples([(1, 2), (3, 4), (5, 6)]) == [(1, 3, 5)]",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def Find_Max(lst): \n    max_len = 0 \n    max_elem = None\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem\n    return max_elem",
        "test": "assert Find_Max([]) == None, \"The list is empty and should return None\"",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)",
        "test": "assert round_and_sum([1.2, 3.4, 5.6, 7.8, 9.10, 11.12, 13.14, 15.16]) == 362.0",
        "num_ids": 1117,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    concatenated_str = \"\"\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]",
        "test": "assert concatenate_tuple(()) == \"\"",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(n+1):\n        sum += i**3\n        count += 1\n    average = sum/count\n    return average",
        "test": "assert find_Average_Of_Cube(0) == 0",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for i in range(len(test_tuple)):\n        if i == len(test_tuple)-1: #if the index is equal to the last index\n            rear_index_elements.append(test_tuple[i])\n    return rear_index_elements",
        "test": "assert extract_rear(('1', '2', '3', '4', '5')) == ['5']",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, 2, 3, 1, 4], 4) == 0",
        "num_ids": 917,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching the date format in yyyy-mm-dd format\n    pattern = re.compile(r'\\d{4}-\\d{2}-\\d{2}')\n    # Find all matches of the pattern in the input string\n    matches = pattern.findall(dt)\n    # Check if there is at least one match\n    if len(matches) == 0:\n        return dt\n    # Extract the date part from the first match and replace it with the new format\n    date = matches[0].split('-')\n    new_date = '-'.join([date[2], date[1], date[0]])\n    return new_date",
        "test": "assert change_date_format('2021-01-01') == '01-01-2021'",
        "num_ids": 1011,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n        \n    return my_list",
        "test": "assert shell_sort([]) == []",
        "num_ids": 1388,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 & tup2 for tup1, tup2 in zip(test_tup1, test_tup2))",
        "test": "assert and_tuples((1, 2, 3), (4, 5, 6)) == ((0, 0, 0), (0, 0, 0)) and and_tuples((1, 2, 3), (4, 5, 6, 7)) == ((0, 0, 0), (0, 0, 0))",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    if disc >= 0:\n        return (-b + disc**0.5)/(2*a)\n    else:\n        return (-b - disc**0.5)/(2*a)",
        "test": "assert parabola_directrix(1, -3, 2) == 2",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set of all the elements in list1\n    set1 = set(list1)\n    # Loop through all the elements in list2\n    for element in list2:\n        # If the element is in set1, it means it's a common element\n        if element in set1:\n            return True\n    # If we make it through the loop without returning True, there's no common element\n    return False",
        "test": "assert common_element([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == True",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5*(base1+base2)*height\n    # calculate the length of the shorter base\n    shorter_base = min(base1,base2)\n    # calculate the length of the longer base\n    longer_base = max(base1,base2)\n    # calculate the length of the middle base\n    middle_base = (shorter_base+longer_base)/2\n    # calculate the sum of the middle base and the shorter base\n    sum_middle = middle_base + shorter_base\n    # calculate the sum of the middle base and the longer base\n    sum_longer = middle_base + longer_base\n    # check which sum is closer to the height\n    if abs(sum_middle-height)<abs(sum_longer-height):\n        return middle_base\n    else:\n        return longer_base",
        "test": "assert median_trapezium(5,3,2) == 4",
        "num_ids": 1699,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if number > i:\n            greater = True\n            break\n    return greater",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b*)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one(\"aaaabbbb\") == True",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(1234) == 4, \"last_Digit(1234) should return 4\"",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as an input and returns a list containing only the negative numbers in the input list.\n    \"\"\"\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers",
        "test": "assert neg_nos([]) == []",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isdigit()])",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([('a', 'b'), ('b', 'a'), ('a', 'c'), ('b', 'c'), ('a', 'd'), ('b', 'd')]) == 12",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return sum(L)",
        "test": "assert multiple_to_single([1,2,3,4,5]) == 15",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern for matching adverbs\n    pattern = r'\\b([a-z]+|ing|ed|ingly|ly|edly|ingly)\\b'\n\n    # Find all matches for the pattern in the text\n    matches = re.findall(pattern, text.lower())\n\n    # Create a dictionary to store the adverbs and their positions in the text\n    adverbs_dict = {}\n\n    # Iterate over the matches and add each adverb to the dictionary with its position\n    for i, match in enumerate(matches):\n        adverb = match[0]\n        position = i + 1\n        adverbs_dict[adverb] = position\n\n    return adverbs_dict",
        "test": "assert find_adverb_position(\"She ran as fast as a cat.\") == [(2, \"as\")]",
        "num_ids": 2279,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l",
        "test": "assert surfacearea_cube(1) == 6, \"The surface area of a cube with side length 1 is incorrect.\"",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from array import array\n\ndef positive_count(nums):\n    total = len(nums)\n    positive = array('i')\n    for num in nums:\n        if num > 0:\n            positive.append(1)\n        else:\n            positive.append(0)\n    ratio = 0.0\n    if total!= 0:\n        ratio = positive.count(1) / total\n    return ratio",
        "test": "assert positive_count([-1, -2, -3, -4, -5]) == 0.0",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = float('-inf') #initialize maximum negative number with negative infinity\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg",
        "test": "assert largest_neg([1, 2, 3, 4, -5, -10, -15]) == -5",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list",
        "test": "assert trim_tuple([('apple', 'banana', 'cherry'), ('grape', 'orange', 'kiwi')], 2) == [('apple', 'banana'), ('grape', 'orange')]",
        "num_ids": 1221,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    # check if both input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    # create a new tuple of the same length as the input tuples\n    result_tup = tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n    return result_tup",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == (4,10,18)",
        "num_ids": 898,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary where the keys are the elements of the list and the values are their count in the tuple.\n    '''\n    count_dict = {}\n    for item in lst:\n        count = tup.count(item)\n        count_dict[item] = count\n    return count_dict",
        "test": "assert count_Occurrence((1, 2, 3, 2, 1), [1, 2, 3, 4, 5]) == {'1': 2, '2': 3, '3': 1, '4': 1, '5': 1}",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        cube = num ** 3\n        result.append(cube)\n    return result",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0 \n    for i in range(1, n+1): \n        sum += i*i*i \n    return sum ",
        "test": "assert cal_sum(1) == 1, \"cal_sum(1) should return 1\"",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and the size of the strings to be extracted as input.\n    It then returns a list of the specified size strings from the input list.\n    \"\"\"\n    if len(str_list) < size:\n        print(\"Error: Cannot extract strings from the list\")\n        return\n    \n    extracted_strings = []\n    for i in range(size):\n        extracted_strings.append(str_list[i])\n    \n    return extracted_strings",
        "test": "assert extract_string([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], 2) == [\"apple\", \"banana\"]",
        "num_ids": 1227,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'  # regular expression pattern to match one or more whitespaces\n    text = re.sub(pattern, '', text1)  # remove all whitespaces from the string using re.sub()\n    return text",
        "test": "assert remove_whitespaces('    ') == ''",
        "num_ids": 604,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0",
        "test": "assert loss_amount(100,100) == 0, \"The loss_amount function should return 0 if the given amount has no loss.\"",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum",
        "test": "assert sumofFactors(1) == 0, \"The function should return 0 for 1\"",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]*z\\b'\n    matches = re.findall(pattern, text.lower())\n    return matches",
        "test": "assert text_match_wordz(\"hello zoo baba\") == False, \"text_match_wordz failed for 'hello zoo baba'\"",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return False",
        "test": "assert check_monthnumb_number(1) == True",
        "num_ids": 1070,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_lst = []\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_lst = [i]\n        elif len(i) == min_len:\n            min_lst.append(i)\n    return min_lst",
        "test": "assert Find_Min([]) == []",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(2,3) == 6, \"rectangle_area(2,3) should return 6\"",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)",
        "test": "assert remove_uppercase(\"1234567890\") == \"1234567890\"",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([]) == []",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as input and counts the number of upper case characters in it.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr('Hello World!') == 2",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1) - i + 1):\n            combinations.append(list1[j:j+i])\n    return combinations",
        "test": "assert combinations_list(['a', 'b', 'c']) == [('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n        \n        if current_product > max_product:\n            max_product = current_product\n    \n    return max_product",
        "test": "assert max_subarray_product([1, 2, 3, 4]) == 24",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return all(values[0] == value for value in values[1:])",
        "test": "assert check_value({'a':1, 'b':2, 'c':3}, 4) == False, \"Incorrect output for check_value({'a':1, 'b':2, 'c':3}, 4)\"",
        "num_ids": 943,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3}",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    prefix = [1] * n\n    max_product = float('-inf')\n    max_product_ending_here = 1\n    \n    for i in range(1, n):\n        prefix[i] = prefix[i-1] * arr[i-1]\n        if prefix[i] > max_product_ending_here:\n            max_product_ending_here = prefix[i]\n        if prefix[i] > max_product:\n            max_product = prefix[i]\n            \n    return max_product",
        "test": "assert max_product([-2, 0, -1]) == 0",
        "num_ids": 1289,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"The tuple must have at least two elements\")\n    else:\n        return sum(test_tup[:-1]) + test_tup[-1]",
        "test": "assert add_pairwise((1,2,3)) == 6",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product",
        "test": "assert find_remainder([3, 5, 2], 10) == 0, \"Incorrect output for [3, 5, 2] and 10\"",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) <= 1:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n\n    return True",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 902,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2:\n                result.append(tuple1)\n    return result\n",
        "test": "assert tuple_intersection(([1, 2, 3], [2, 4, 6]), ([1, 3, 5])) == ([])",
        "num_ids": 1127,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello\", \"l\", \"!\")!= \"hel\"",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict",
        "test": "assert sort_counter({'apple': 2, 'banana': 1, 'cherry': 3}) == {'banana': 1, 'apple': 2, 'cherry': 3}",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables to store the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n\n    # Iterate through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest",
        "test": "assert big_sum([0]) == 0",
        "num_ids": 1054,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"Hello World!\") == \"hello world!\"",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'([a-z])([A-Z])')\n    return pattern.sub(r'\\1\\2', str1)",
        "test": "assert remove_lowercase(\"HellO WOrld\") == \"HellO WOrld\"",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns its first digit.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Get the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to an integer\n    first_digit = int(first_char)\n    # Return the first digit\n    return first_digit",
        "test": "assert first_Digit(0) == 0, \"The function first_Digit should return 0\"",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 793,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_numbers += i\n    \n    return sum_cubes - sum_numbers",
        "test": "assert difference(1) == 0",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1, 2, 3, 4, 5], 6) == 4",
        "num_ids": 1003,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()",
        "test": "assert toggle_string('1234') == '1234'",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    num1 = [int(d) for d in str(n1)]\n    num2 = [int(d) for d in str(n2)]\n    # Calculate the per-digit difference and sum them up\n    return sum([abs(a-b) for a,b in zip(num1,num2)])",
        "test": "assert digit_distance_nums(12345, 12345) == 0, \"Failed: Incorrect sum of per-digit differences\"",
        "num_ids": 1361,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        raise ValueError(\"The size is greater than the length of the input list\")\n    if size == 1:\n        return a[0]\n    if size == 2:\n        return max(a[0], a[1])\n    max_so_far = max_ending_here = a[0]\n    for i in range(1, len(a)):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        if max_ending_here < 0:\n            max_ending_here = a[i]\n        if i >= size:\n            max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, 2, 1], 3) == 6, \"Max subarray sum is not correct\"",
        "num_ids": 1415,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list",
        "test": "assert union_elements((1, 3, 5), (2, 4, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # initialize variables to keep track of the length of the longest sublists\n    max_length = 0\n    current_length = 0\n    \n    # loop through the list and add each element to the current_length\n    for element in lst:\n        current_length += 1\n        \n        # if the current_length is greater than max_length, update max_length\n        if current_length > max_length:\n            max_length = current_length\n        \n        # if the current_length is equal to max_length, check if the next element is equal to the current_length\n        elif current_length == max_length:\n            if lst[current_length] == current_length:\n                current_length += 1\n    \n    # return the maximum length of the longest sublists\n    return max_length\n",
        "test": "assert Find_Max_Length([]) == 0, \"Failed for empty list\"",
        "num_ids": 1288,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values('This is a string without a value') == []",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,2,3,3,4,5], 7) == 19",
        "num_ids": 1157,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    str_n = str(n)\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # Loop through each character in the string and add it to the sum\n    for char in str_n:\n        sum_of_digits += int(char)\n    # Return the sum of digits\n    return sum_of_digits",
        "test": "assert sum_digits(123) == 6, \"sum_digits(123) should be 6\"",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] >= list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])",
        "test": "assert issort_list([1,2,3]) == True",
        "num_ids": 813,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 286,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "test": "assert sort_sublists([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [[1, 2, 3], [4, 5], [6, 7, 8, 9]]",
        "num_ids": 1338,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list with only the unique numbers.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1166,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n\n    # Convert the list to a set to get only unique elements\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * (3.14 * r**2)\n    volume = (3.14 * r**2 * h)\n    return area, volume",
        "test": "assert surfacearea_cylinder(3,5) == 31.4159",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    i,j = 0,0\n    while i < len(A):\n        if A[i] == B[j]:\n            j += 1\n            if j == len(B):\n                return True\n        i += 1\n    return False",
        "test": "assert is_Sub_Array([1,2,3,4,5], [4,3,2,1]) == False",
        "num_ids": 1042,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the given number to a string\n    num = str(n)\n    # Initialize the last digit as 0\n    last_digit = 0\n    # Iterate through each digit of the string\n    for digit in num:\n        # Check if the digit is greater than the last digit\n        if int(digit) > last_digit:\n            # If it is, update the last digit\n            last_digit = int(digit)\n    # Return the last digit of the factorial\n    return last_digit",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('All lists must have the same length.')\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 1339,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set(test_tup1).symmetric_difference(set(test_tup2))\n    return list(dissimilar_set)\n",
        "test": "assert find_dissimilar((1,2,3), (1,2,3)) == [] # for equal tuples",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    if type(test_tuple) == tuple:\n        return tuple(filter(lambda x: even_fnc(x), test_tuple))\n    else:\n        raise TypeError(\"The input must be a tuple\")",
        "test": "assert even_ele(((1, 2, 3, 4, 5), (6, 7, 8, 9)), lambda x: x % 2 == 0) == (2, 4, 6, 8)",
        "num_ids": 1373,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Calculate the area of the square pyramid\n    area = (b * s) / 2\n    # Calculate the surface area of the pyramid\n    surface_area = area * 3\n    return surface_area",
        "test": "assert surface_Area(10,10) == 314.0:",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True, \"Empty dictionary should be True\"",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth catalan number, which is the number of paths from the top left corner of a n x n grid to the bottom right corner.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(1, n+1):\n            result += catalan_number(i-1) * catalan_number(n-i)\n        return result",
        "test": "assert catalan_number(0) == 1, \"0th catalan number is incorrect.\"",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    return adverbs\n",
        "test": "assert find_adverbs(\"I'm a good student.\") == []",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return heap",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # check if the input is valid\n    if not isinstance(l, list):\n        print(\"Input must be a list!\")\n        return\n    \n    # check if the n value is valid\n    if not isinstance(n, int) or n < 0 or n > len(l):\n        print(\"n must be a positive integer less than the length of the list!\")\n        return\n    \n    # split the list at the nth element and add the first part to the end\n    part1 = l[:n]\n    part2 = l[n:]\n    return part1 + part2",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1212,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Find the largest and smallest values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n\n    # Calculate the difference between the largest and smallest values\n    diff = max_num - min_num\n\n    # Return the difference between the largest and smallest values\n    return diff",
        "test": "assert big_diff([-100, 0, 100]) == 200",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two numbers as input, a and b, and returns a list containing all perfect squares between a and b.\n    '''\n    # Initialize a list to store the perfect squares\n    perfect_squares_list = []\n\n    # Loop through all numbers between a and b\n    for i in range(a, b+1):\n        # Check if the square is a perfect square\n        if i**2 == i:\n            # If it is, add it to the list of perfect squares\n            perfect_squares_list.append(i)\n\n    # Return the list of perfect squares\n    return perfect_squares_list",
        "test": "assert perfect_squares(12, 16) == [144, 256]",
        "num_ids": 1259,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list is not empty\n    if len(newList)!= 0:\n        # Check if the list has only one element\n        if len(newList) == 1:\n            return newList\n        else:\n            # Interchange the first and last elements\n            newList[0], newList[-1] = newList[-1], newList[0]\n            return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_of_products = 0\n    for i in range(1,n+1):\n        product = 1\n        for j in range(1,i+1):\n            product *= j\n        product //= i\n        sum_of_products += product\n    return sum_of_products",
        "test": "assert binomial_Coeff(1,0) == 1",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+','',ip) # remove leading zeroes from the ip address\n    return ip",
        "test": "assert removezero_ip(\"192.168.1.1\") == \"192.168.1.1\"",
        "num_ids": 1068,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_first = [x for x in list1 if x % 2 == 0][0]\n    odd_first = [x for x in list1 if x % 2!= 0][0]\n    diff = even_first - odd_first\n    return diff",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 864,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def min_Swaps(str1,str2):\n    if len(str1)!= len(str2):\n        return \"Invalid input\"\n    \n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count += 1\n    \n    return count",
        "test": "assert min_Swaps('000000', '000000') == 0",
        "num_ids": 2224,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    len1 = len(arr1)\n    len2 = len(arr2)\n\n    while i < len1 and j < len2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n\n    if i < len1:\n        return arr1[i]\n    else:\n        return arr2[j]",
        "test": "assert find_kth([1], [1], 0) == 1",
        "num_ids": 1984,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the input number to a string\n    number_str = str(number)\n    \n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through each digit in the string\n    for digit in number_str:\n        # Multiply the digit by the power of the number of digits\n        sum += int(digit) ** len(number_str)\n    \n    # Return whether the sum is equal to the input number\n    return sum == number",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return (sum, average)",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(1) == False",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def first_repeated_char(string):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    char_set = set()\n    for char in string:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 1116,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        j = 2\n        while j*j <= i:\n            if i % j == 0:\n                is_lucid = False\n                break\n            j += 1\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 1393,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string with spaces\n    result =''.join(reversed_words)\n    return result",
        "test": "assert reverse_words(\"a\") == \"a\"",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(5) == True, \"The function should return True for the input 5.\"",
        "num_ids": 831,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Convert degrees to radians.\n    \"\"\"\n    return degree * math.pi / 180",
        "test": "assert radian_degree(0) == 0, '0 degrees is 0 radians'",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"hello world\", r\"\\b\\w+\\b\") == (\"hello\", 0, 5)",
        "num_ids": 1180,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    n = len(list1)\n    if k > n:\n        return []\n    result = []\n    index = 0\n    for i in range(n):\n        if index!= k-1:\n            result.append(list1[i])\n        index += 1\n    return result",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]",
        "num_ids": 1207,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(test_list[i])\n            break\n    return max_val",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 9",
        "num_ids": 1571,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 1163,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not isinstance(test_list, list):\n        raise TypeError(\"The input must be a list of tuples.\")\n\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        if not isinstance(test_list[i], tuple):\n            raise TypeError(\"All values in the input list must be tuples.\")\n        for j in range(len(test_list[i])):\n            if not isinstance(test_list[i][j], (int, float)):\n                raise TypeError(\"All values in a tuple must be numbers.\")\n        cumulative_sum += sum(test_list[i])\n    return cumulative_sum",
        "test": "assert cummulative_sum([(1,2,3),(4,5,6),(7,8,9)]) == 45",
        "num_ids": 988,
        "indeed": true
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        avg = total / len(num)\n        result.append(avg)\n    return result",
        "test": "assert average_tuple([(1,2,3),(4,5,6)]) == [2.0, 5.0]",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "test": "assert tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3)",
        "num_ids": 1174,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Function to check if the point is in the desired form or not\n    def check_point(point):\n        if point[0] == d and point[1] == 0:\n            return True\n        else:\n            return False\n\n    # Initialize variables\n    current_point = [0, 0]\n    jumps = 0\n\n    # Check all possible points\n    for i in range(1, steps+1):\n        next_point = [current_point[0] + i*d, current_point[1]]\n        if check_point(next_point):\n            jumps += 1\n            current_point = next_point\n\n    # Return the number of jumps required\n    return jumps",
        "test": "assert min_Jumps(2, 1) == 1, \"min_Jumps(2, 1) should be 1\"",
        "num_ids": 1291,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result",
        "test": "assert div_list([1, 2, 3], [1, 2, 3]) == [1.0, 1.0, 1.0]",
        "num_ids": 1074,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isdigit():\n            nums.append(test_str[i])\n            i += 1\n        else:\n            i += 1\n    nums.reverse()\n    nums = ''.join(nums)\n    test_str = test_str.replace(nums, '', 1)\n    return test_str",
        "test": "assert move_num('abc123') == 'abc123'",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    max_size = 1\n    start = 0\n    \n    for i in range(1, n):\n        if a[i] % a[start] == 0:\n            dp[i] = dp[start] + 1\n            if dp[i] > max_size:\n                max_size = dp[i]\n                start = i\n        else:\n            start += 1\n    \n    return max_size",
        "test": "assert largest_subset([1,2,3,4,5,6]) == 2, \"The largest subset of [1,2,3,4,5,6] should have size 2.\"",
        "num_ids": 1940,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Calculate the median\n    median = sorted_list[n]\n\n    return median",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 3) == 4",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1, 2, 3, 4, 5], 2) == [1, 4, 9, 16, 25]",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n\n    # Interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList",
        "test": "assert swap_List([1, 2]) == [2, 1]",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculating the semi-perimeter of the triangle\n    s = 2 * math.sqrt(3) * r\n    \n    # Calculating the area of the triangle\n    area = math.sqrt(s * (s - r) * (s - 2*r) * (s - 3*r))\n    \n    # Returning the area of the triangle\n    return area",
        "test": "assert triangle_area(4) == 12.566370614359172",
        "num_ids": 2317,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a Python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int, optional): The starting index of the sub-array to consider. Defaults to 0.\n        end (int, optional): The ending index of the sub-array to consider. Defaults to None.\n\n    Returns:\n        int: The smallest missing number from the sub-array.\n    \"\"\"\n    if end is None:\n        end = len(array)\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n    return end + 1",
        "test": "assert find_First_Missing([1,2,3,4,5]) == 6, \"Failed to find the smallest missing number\"",
        "num_ids": 1593,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 392,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for number in list:\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub is None:\n        sub = []\n    if isinstance(ele, tuple):\n        if len(ele) == 2:\n            sub.append(ele)\n        if len(ele) == 3:\n            sub.append((ele[0], ele[1]))\n            sub.append((ele[0], ele[2]))\n            sub.append((ele[1], ele[2]))\n        if len(ele) == 4:\n            sub.append((ele[0], ele[1]))\n            sub.append((ele[0], ele[2]))\n            sub.append((ele[0], ele[3]))\n            sub.append((ele[1], ele[2]))\n            sub.append((ele[1], ele[3]))\n            sub.append((ele[2], ele[3]))\n    elif isinstance(ele, list):\n        for i in ele:\n            adjac(i, sub)\n    return sub",
        "test": "assert adjac((2,3), [(1,1),(0,0)]) == [(1,2), (1,3), (2,3)]",
        "num_ids": 2176,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")",
        "test": "assert replace_spaces(\"hello world123\") == \"hello world123\"",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n\n    return num_list",
        "test": "assert move_zero([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 1165,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i] ^ arr[n-1-i]\n    return xor_sum",
        "test": "assert pair_xor_Sum([0], 1) == 0, \"pair_xor_Sum([0], 1) == 0\"",
        "num_ids": 1048,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    heap = [None] * len(iterable)\n    for i, item in enumerate(iterable):\n        heap[i] = item\n        hq.heapify(heap)\n    \n    # sort the heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    \n    # convert the sorted list back to a list\n    sorted_list = [item for item in result if item is not None]\n    return sorted_list",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n\n    Args:\n        actual_cost (float): The actual cost of the sale.\n        sale_amount (float): The amount being sold.\n\n    Returns:\n        bool: True if the given amount has no profit and no loss, False otherwise.\n    \"\"\"\n\n    if sale_amount <= actual_cost:\n        # If the sale amount is less than or equal to the actual cost, there is no profit and no loss\n        return True\n    else:\n        # If the sale amount is greater than the actual cost, there is a profit and no loss\n        return False",
        "test": "assert noprofit_noloss(5000, 1000) == True, \"The given amount of 5000 has no profit and no loss\"",
        "num_ids": 1127,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import math\n\ndef wind_chill(v, t):\n    wind_chill_index = round(35.74 + 0.6215*t - 35.75*math.log(v)/10)\n    return wind_chill_index",
        "test": "assert wind_chill(5,30) == 6, \"The wind chill index should be 6 for v=5 and t=30.\"",
        "num_ids": 1295,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_name_lengths = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_name_lengths += len(name)\n    return sum_name_lengths",
        "test": "assert sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"]) == 23",
        "num_ids": 1269,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Create a pattern to match any parenthesis enclosed word\n    pattern = r'\\((.*?)\\)'\n    # Use re.sub() to replace all parenthesis enclosed words with empty string\n    items = re.sub(pattern, '', items)\n    return items",
        "test": "assert remove_parenthesis(\"a+b*c\") == \"a+b*c\"",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return n*(n+1)//2",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return True\n    return False",
        "test": "assert text_match_wordz_middle('zWoRdZzz') == True, 'The function should return True for \"zWoRdZzz\"'",
        "num_ids": 993,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Create a new array to store the reversed elements\n    output = []\n    # Initialize the reverse pointer to the end of the array\n    reverse_pointer = len(input) - 1\n    # Iterate through the input array from the first element upto the k-th element\n    for i in range(k):\n        # Append the element at the current pointer to the output array\n        output.append(input[i])\n        # Decrement the reverse pointer\n        reverse_pointer -= 1\n    # Iterate through the input array from the k-th element upto the end of the array\n    for i in range(k, len(input)):\n        # Append the element at the current pointer to the output array\n        output.append(input[i])\n        # Increment the reverse pointer\n        reverse_pointer += 1\n    # Return the reversed output array\n    return output",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]",
        "num_ids": 1448,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert test_dict to a list of tuples to add to test_tup\n    dict_as_list = list(test_dict.items())\n    # Add the list of tuples to test_tup and return the result\n    return test_tup + tuple(dict_as_list)",
        "test": "assert add_dict_to_tuple((1,2,3), {'a':4, 'b':5}) == (1, 2, 3, {'a': 4, 'b': 5})",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    max_avg = float('-inf')\n    \n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            if i == n-1 and j == n-1:\n                avg = dp[i][j] / (i+1)\n                max_avg = max(max_avg, avg)\n                \n    return max_avg",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6]]) == 5.0",
        "num_ids": 2454,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "test": "assert filter_data({'Alice':(170, 55), 'Bob':(165, 60), 'Charlie':(175, 70), 'David':(160, 58), 'Eve':(180, 65)}, 175, 50) == {'Charlie':(175, 70), 'Eve':(180, 65)}",
        "num_ids": 1734,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 5",
        "num_ids": 1234,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        base //= 10\n        power -= 1\n    return total\n",
        "test": "assert power_base_sum(10, 2) == 1, \"The sum of digits of 10 to the power of 2 is not equal to 1.\"",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(\".*?\")'\n    match = re.findall(pattern, text1)\n    return match",
        "test": "assert extract_quotation(\"string with'single' quotes\") == \"single\"",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(new_tup)",
        "test": "assert multiply_elements(()) == ()",
        "num_ids": 1223,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = [lst1[i] + lst2[i] for i in range(len(lst1))]\n    return result",
        "test": "assert sum_list([1,2,3], [4,5,6]) == [5,7,9]",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 1094,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula to find the lateral surface area of a cone\n    lateral_surface_area = math.pi*r**2*h\n    \n    # Return the lateral surface area of the cone\n    return lateral_surface_area",
        "test": "assert lateralsurface_cone(2,3) == math.pi * 2**2 * 3",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[^a-zA-Z0-9_]+'\n    replacement = ':'\n    text = re.sub(pattern, replacement, text)\n    return text\n\nif __name__ == \"__main__\":\n    # Example usage:\n    text = \"Hello, world! How are you today?\"\n    result = replace_specialchar(text)\n    print(result)",
        "test": "assert replace_specialchar('hello world') == 'hello:world'",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    index = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return index",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 4",
        "num_ids": 1340,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    ans = 0\n    MOD = 10**9 + 7\n    \n    for i in range(n):\n        if i == 0:\n            ans = arr[i]\n        else:\n            temp = (arr[i] * (i+1)) % MOD\n            ans = (ans + temp) % MOD\n            \n    return ans",
        "test": "assert sum_Of_Subarray_Prod([2,3,4]) == 24",
        "num_ids": 1195,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b11111111111111111111111111111111\n    n = n & mask\n    n = n ^ (n & (mask + 1))\n    n = n ^ (n & (mask - 1))\n    return n",
        "test": "assert set_middle_bits(0b111001) == 0b000001",
        "num_ids": 2212,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)",
        "test": "assert left_insertion([1], 1) == 0",
        "num_ids": 958,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"apple\") == True, \"Expected True, got {}\".format(check_str(\"apple\"))",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    min_num = 10**(n-1)\n    triangular_numbers = []\n    for i in range(min_num, 10**(n+1)):\n        triangular_numbers.append(i)\n    min_triangular_num = math.inf\n    for i in range(len(triangular_numbers)):\n        for j in range(i+1, len(triangular_numbers)):\n            triangular_sum = triangular_numbers[i] + triangular_numbers[j]\n            if triangular_sum < min_triangular_num:\n                min_triangular_num = triangular_sum\n                index = i+1\n                break\n    return index",
        "test": "assert find_Index(1) == 1",
        "num_ids": 1138,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Example:\n    test_tup = (1, 2, 3, 4, 5)\n    tuple_to_dict(test_tup) # Output: {1:2, 3:4, 5:None}\n    \"\"\"\n    # Convert the tuple to a dictionary using adjacent elements\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj",
        "test": "assert tuple_to_dict(('apple', 'banana', 'orange', 'grape')) == {'apple': 'banana', 'orange': 'grape'}",
        "num_ids": 1276,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    \n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    \n    return True",
        "test": "assert all_Characters_Same('abc') == False",
        "num_ids": 606,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side**2",
        "test": "assert area_tetrahedron(1) == 0.5, \"The area of a tetrahedron with side 1 should be 0.5\"",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rotate_right(lst, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(lst)\n    m = m % n\n    lst.extend(lst[:m])\n    lst = lst[m:]\n    return lst",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1538,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none((4, 5, 6)) == False",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Define a lambda function that checks if a number is divisible by every digit it contains\n    is_divisible = lambda x: all(int(d) in str(x) for d in str(x))\n\n    # Use the is_divisible function to filter out numbers outside the given range\n    filtered_numbers = filter(lambda x: startnum <= x <= endnum, range(startnum, endnum + 1))\n\n    # Use the lambda function to filter out numbers that are not divisible by every digit they contain\n    divisible_numbers = filter(is_divisible, filtered_numbers)\n\n    # Print the result\n    for num in divisible_numbers:\n        print(num)",
        "test": "assert divisible_by_digits(100, 999) == [123, 234, 345, 456, 567, 678, 789, 890, 901, 1012, 1123, 1234, 1345, 1456, 1567, 1678, 1789, 1890, 1901, 2012, 2123, 2234, 2345, 2456, 2567, 2678, 2789, 2890, 2901, 3012, 3123, 3234, 3345, 3456, 3567, 3678, 3789, 3890, 3901, 4012, 4123, 4234, 4345, 4456, 4567, 4678, 4789, 4890, 4901, 5012, 5123, 5234, 5345, 5456, 5567, 5678, 5789, 5890, 5901, 6012, 6123, 6234, 6345, 6456, 6567, 6678, 6789, 6890, 6901, 7012, 7123, 7234, 7345, 7456, 7567, 7678, 7789, 7890, 7901, 8012, 8123, 8234, 8345, 8456, 8567, 8678, 8789, 8890, 8901, 9012, 9123, 9234, 9345, 9456, 9567, 9678, 9789, 9890, 9901]",
        "num_ids": 1513,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r**2) * (a/360)\n        return area",
        "test": "assert sector_area(5, 361) == None",
        "num_ids": 908,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    p = [[0] * (m + 1) for i in range(n + 1)] \n  \n    # Step 1 \n    for i in range(1, n + 1): \n        for j in range(1, m + 1): \n  \n            # If the characters are same, then use previous diagonals \n            if X[i - 1] == Y[j - 1]: \n                p[i][j] = p[i - 1][j - 1] + 1 \n  \n            # If not same, then use the greater of two and previous columns \n            else: \n                p[i][j] = max(p[i - 1][j], p[i][j - 1]) \n  \n    # Step 2 \n    L = [] \n    i = n \n    j = m \n  \n    # Step 3 \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            L.append(X[i - 1]) \n            i -= 1 \n            j -= 1 \n        elif p[i - 1][j] > p[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n  \n    # Reverse the list \n    L.reverse() \n  \n    return ''.join(L) ",
        "test": "assert lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"ACEHR\") == \"ADH\"",
        "num_ids": 2472,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1)\n    new_words = []\n    for word in words:\n        if word[0].isupper():\n            new_words.append(word)\n            new_words.append(' ')\n        else:\n            new_words.append(word)\n    return ''.join(new_words)",
        "test": "assert capital_words_spaces(\"12345\") == \"12345\"",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # convert all the strings to integers\n    nums = [int(num) for num in nums_str]\n    # sort the list in numeric order\n    nums.sort()\n    # convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    # return the sorted list\n    return sorted_nums_str",
        "test": "assert sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 1236,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list",
        "test": "assert add_tuple([], ()) == []",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    elif arr[i] > arr[2 * i + 1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)",
        "test": "assert check_min_heap_helper([1, 2, 3, 4, 5], 2) == True",
        "num_ids": 1803,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_num_n = jacobsthal_num(n-1)\n        if jacobsthal_num_n % 2 == 0:\n            return jacobsthal_num_n + jacobsthal_num(n-2)\n        else:\n            return 2*jacobsthal_num_n - jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 1236,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    minimum = test_list[K-1]\n    return minimum",
        "test": "assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == (4, 5, 6)",
        "num_ids": 2200,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        return min(numbers[1:], key=lambda x: abs(x - min(numbers[1:]))**2)",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_zero_one(\"abbabbab\") == True",
        "num_ids": 2626,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            reverse_i = test_list[j][::-1]\n            if reverse_i in test_list[:i]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs([\"hello\", \"world\", \"leetcode\", \"programming\", \"code\"]) == 0",
        "num_ids": 2144,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = list(list1)\n    count_dict = {}\n    for i in range(len(list1)):\n        if tuple(list1[i]) not in count_dict:\n            count_dict[tuple(list1[i])] = 1\n        else:\n            count_dict[tuple(list1[i])] += 1\n    return count_dict",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1366,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # convert the string to float and check if it has a precision of 2\n        float(num)\n        num_str = str(num)\n        num_len = len(num_str)\n        if num_len > 1 and num_str[num_len-1] == '0':\n            return True\n        elif num_len == 1 and num_str[0] == '0':\n            return True\n        elif num_str.count('.') == 1:\n            return True\n        else:\n            return False\n    except ValueError:\n        # if the string cannot be converted to a float, return False\n        return False",
        "test": "assert is_decimal(\"12345\") == False",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    return True",
        "test": "assert unique_Element([1, 1, 2, 3, 3]) == False, \"The list [1, 1, 2, 3, 3] contains more than one distinct element.\"",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum % 3 == 0:\n        if monthnum % 10 == 0:\n            if monthnum % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(12) == True, 'Month 12 should contain 30 days.'",
        "num_ids": 1148,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize the minimum difference variable\n    min_diff = float('inf')\n\n    # Traverse the array from the second element\n    for i in range(1, n):\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i] - arr[i - 1]\n\n        # Update the minimum difference if the difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff\n",
        "test": "assert find_min_diff([1,3,5,7,9],4) == 2",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 565,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    a = 1\n    b = 1\n    count = 1\n    \n    while count < n:\n        if count % 2 == 1:\n            a += 1\n        else:\n            b += 1\n        count += 1\n        \n    if a == 1:\n        return b\n    else:\n        return a\n    ",
        "test": "assert is_polite(1) == 1, \"is_polite(1) should be 1\"",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 946,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 10) == 0",
        "num_ids": 1116,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Compute the difference between two lists.\n\n    Args:\n        li1 (list): A list of elements\n        li2 (list): A list of elements\n\n    Returns:\n        list: A new list with the elements of `li1` that are not in `li2`\n    \"\"\"\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list",
        "test": "assert Diff([], []) == []",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 0\n    sum = 0\n    while count < n:\n        num = 3 * 3 * 3 * 3\n        if num % 2 == 1:\n            sum += num\n        count += 1\n    return sum",
        "test": "assert odd_num_sum(5) == 405, \"Incorrect output for odd_num_sum(5)\"",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if char == ')' and top!= '(':\n                    return False\n                elif char == '}' and top!= '{':\n                    return False\n                elif char == ']' and top!= '[':\n                    return False\n    return not stack",
        "test": "assert check_expression(\"1+2*3-4)5\") == False, \"Test case 3 failed\"",
        "num_ids": 1093,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create a set to store the words with length K\n    k_length_words = set()\n    \n    # Iterate through each word and check if its length is equal to K\n    for word in words:\n        if len(word) == K:\n            k_length_words.add(word)\n    \n    # Convert the set of k length words to a list and join them into a string\n    result =''.join(list(k_length_words))\n    \n    # Return the result string\n    return result",
        "test": "assert remove_length(\"hello world\", 1) == \"\"",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        matches = re.findall(pattern, text)\n        if len(matches) == 0:\n            return None\n        else:\n            for match in matches:\n                print(f\"Match found at position {text.index(match)}: '{match}'\")\n            return matches\n    except re.error:\n        print(\"Error in the pattern.\")",
        "test": "assert occurance_substring(\"This is a test string to check the function of the occurance_substring function.\", \"not_found\") is None",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 2, 4, 5, 7, 9]) == False",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count",
        "test": "assert count_vowels(\"\") == 0",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_sum(arr):\n    if not arr:\n        return 0\n    \n    seen = set()\n    sum = 0\n    \n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            sum += num\n    \n    return sum",
        "test": "assert find_sum([]) == 0",
        "num_ids": 1331,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        list1 (list): List of elements to be packed.\n\n    Returns:\n        list: List of packed sublists.\n    \"\"\"\n    # group the list by consecutive duplicates and pack them into sublists\n    grouped_list = groupby(list1)\n    packed_list = []\n    for key, group in grouped_list:\n        if len(list(group)) > 1:\n            packed_list.append([key])\n        else:\n            packed_list.append(list(group))\n    return packed_list",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 1152,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the counts of lists\n    counts = {}\n    # Loop through the input list of lists\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it already exists in the dictionary\n        if tuple(sublist) not in counts:\n            # If it doesn't exist, add it to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n        # If it does exist, increment the count by 1\n        else:\n            counts[tuple(sublist)] += 1\n    # Return the dictionary of counts\n    return counts",
        "test": "assert unique_sublists([1,2,2,3,4,4,4,5,5]) == {((1, 2, 3, 4, 5), 1), ((2, 2, 2, 3, 4), 2)}",
        "num_ids": 1032,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    # Create a set of all the sums in the list\n    sums = set()\n    for tup in test_list:\n        sums.add(sum(tup))\n\n    # Find all combinations of sums with tuples in the list\n    result = []\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(sums, i):\n            # Check if the combination is a tuple of tuples\n            if all(isinstance(tup, tuple) for tup in comb):\n                result.append(comb)\n\n    return result",
        "test": "assert find_combinations([(1,2,3), (4,5), (7,8,9)]) == []",
        "num_ids": 1708,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0",
        "test": "assert count_divisors(24) == 12",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    temp_sum = 0\n    \n    for i in range(n):\n        temp_sum += arr[i]\n        if i > 0 and i % 2!= 0 and i % 5 == 0:\n            result += temp_sum\n            temp_sum = 0\n    \n    if temp_sum!= 0:\n        result += temp_sum\n        \n    return result",
        "test": "assert odd_length_sum([]) == 0",
        "num_ids": 1215,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255, g/255, b/255  # Normalize the values to the range of 0-1\n\n    # Convert to HSV color model\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val\n\n    if max_val == min_val:\n        h = 0  # achromatic\n    elif max_val == r and g >= b:\n        h = 60 * ((g - b) / (max_val - min_val))\n    elif max_val == r and g < b:\n        h = 60 * ((g - b) / (max_val - min_val)) + 360\n    elif max_val == g:\n        h = 60 * ((b - r) / (max_val - min_val)) + 120\n    elif max_val == b:\n        h = 60 * ((r - g) / (max_val - min_val)) + 240\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = (max_val - min_val) / max_val\n\n    return (h, s, v)",
        "test": "assert rgb_to_hsv(255, 0, 0) == (0, 1, 1)",
        "num_ids": 2147,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0:\n        return None\n    else:\n        return odd_count * even_count",
        "test": "assert mul_even_odd([1, 2, 3, 4, 5]) == 20, \"The function is not working correctly\"",
        "num_ids": 1080,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a list of strings\n    str_list = test_str.split(\",\")\n\n    # Create an empty list to store integers\n    int_list = []\n\n    # Loop through each string in the list\n    for str_item in str_list:\n        # Convert the string to an integer\n        int_item = int(str_item.strip())\n        # Add the integer to the list\n        int_list.append(int_item)\n\n    # Return the integer tuple\n    return tuple(int_list)",
        "test": "assert tuple_str_int(('1', '2', '3')) == (1, 2, 3)",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)",
        "test": "assert right_insertion([1, 2, 3, 4, 5], 6) == 5",
        "num_ids": 1008,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three('abc') == False",
        "num_ids": 1470,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple",
        "test": "assert new_tuple([\"apple\", \"banana\", \"cherry\"], \"hello\") == (\"apple\", \"banana\", \"cherry\", \"hello\")",
        "num_ids": 728,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count += 1\n    return count == len(nums) // 2",
        "test": "assert even_position([1, 2, 4, 6, 8, 10]) == False",
        "num_ids": 934,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for i in test_tup:\n        if type(i) == tuple:\n            for j in i:\n                new_list.append(j)\n        else:\n            new_list.append(i)\n    return new_list",
        "test": "assert remove_nested((1, 2, 3, 4)) == [1, 2, 3, 4]",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([[1,2,3],[4,5,6]]) == 2",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n",
        "test": "assert last([1,2,3,4,5],5) == 4",
        "num_ids": 962,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\"",
        "test": "assert text_starta_endb(\"abababab\") == \"abababab\"",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 394,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 0, n\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum",
        "test": "assert sum_odd(0) == 0",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the number of bits to rotate\n    num_bits = len(bin(n)) - 2 # number of bits in binary form of n\n\n    # Calculate the number of bits to shift\n    shift_bits = d % num_bits\n\n    # Shift the binary representation of n left by shift_bits bits\n    rotated = (n << shift_bits) | (n >> (num_bits - shift_bits))\n\n    return rotated",
        "test": "assert left_rotate(0x12345678, 0) == 0x12345678 # 0x12345678 is already rotated left by 0 bits",
        "num_ids": 1426,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(' +','', text)",
        "test": "assert remove_all_spaces(\"  This is a test  \") == \"Thisisatest\"",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n        elif num == y:\n            count += 1\n        elif num == z:\n            count += 1\n\n    return count",
        "test": "assert test_three_equal(7, 7, 7) == 3",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    # check if the array is already sorted\n    if n == 1 or (n > 1 and arr[0] <= arr[1]):\n        return 0\n    \n    # check if the array is already sorted in reverse\n    if n == 2 or (n > 2 and arr[n-1] >= arr[n-2]):\n        return 0\n    \n    # find the smallest element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    \n    # find the index of the smallest element\n    index = arr.index(min_element)\n    \n    # count the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(n):\n        j = (i+index)%n\n        if arr[i] > arr[j]:\n            count += 1\n    \n    return count",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1897,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Convert the given number to an integer\n    n = int(n)\n\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n\n    # Set the lower and upper bounds for the binary search\n    left = 0\n    right = n\n\n    # Perform binary search until we find the perfect square\n    while left <= right:\n        mid = (left + right) // 2\n        square = mid * mid\n\n        # Check if the mid is a perfect square\n        if square == n:\n            return True\n        elif square < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If we get to this point, the number is not a perfect square\n    return False",
        "test": "assert is_perfect_square(16) == True, \"Expected True\"",
        "num_ids": 999,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2, 4, 6]) == True, \"The product of 2, 4, and 6 is even\"",
        "num_ids": 723,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[9], [8], [7]]",
        "num_ids": 2190,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
        "test": "assert max_run_uppercase(\"Hello, World!\") == 1",
        "num_ids": 1076,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False",
        "test": "assert check_K(((1,2,3), (4,5,6)), 7) == False",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True",
        "test": "assert check_smaller(('apple', 10), ('banana', 5)) == False",
        "num_ids": 1043,
        "indeed": false
    }
]