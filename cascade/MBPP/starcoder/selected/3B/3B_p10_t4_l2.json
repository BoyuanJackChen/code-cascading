[
    {
        "number": 2,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create a dictionary to store the frequency of each element in both lists\n    freq_dict = {}\n    for element in test_tup1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    for element in test_tup2:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    # create a list to store the shared elements\n    shared_elements = []\n    # iterate through the dictionary and append elements with a frequency of 2 or more\n    for element, frequency in freq_dict.items():\n        if frequency >= 2:\n            shared_elements.append(element)\n    return shared_elements",
        "test": "assert similar_elements([1, 2, 3], [3, 4, 5]) == [3]",
        "num_ids": 2162,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # if n is less than 2, it is not a prime number\n    if n < 2:\n        return True\n\n    # if n is divisible by 2 or 3, it is not a prime number\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n\n    # if n is divisible by any number between 5 and the square root of n, it is not a prime number\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return True\n\n    # if none of the above conditions are met, it is a prime number\n    return False",
        "test": "assert is_not_prime(5) == False, \"is_not_prime(5) should return False\"",
        "num_ids": 1566,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 30,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a heap of size n\n    heap = hq.nlargest(n, nums)\n    \n    # convert the heap back to a list and return it\n    return list(heap)",
        "test": "assert heap_queue_largest([1],1) == [1]",
        "num_ids": 2336,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 31,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'  # Matches words that are at least 4 characters long\n    return re.findall(pattern, text)",
        "test": "assert find_char_long(\"hello world\")!= [\"hell\", \"world\"]",
        "num_ids": 1442,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 1376,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Find the length of the string\n    n = len(str)\n\n    # Create a list to store the frequency of each character in the string\n    freq = [0] * 26\n\n    # Calculate the frequency of each character in the string\n    for char in str:\n        freq[ord(char) - ord('a')] += 1\n\n    # Initialize the minimum number of rotations to the length of the string\n    min_rotations = n\n\n    # Iterate over all possible rotations of the string\n    for i in range(n):\n        # Calculate the frequency of each character in the rotated string\n        rotated_freq = [0] * 26\n        j = i\n        while j < n:\n            rotated_freq[ord(str[j]) - ord('a')] += 1\n            j += n - i\n\n        # Compare the frequency of each character in the rotated string with the frequency of each character in the original string\n        for k in range(26):\n            if rotated_freq[k] < freq[k]:\n                min_rotations = min(min_rotations, n - i)\n                break\n\n    return min_rotations",
        "test": "assert find_Rotations(\"\") == 0",
        "num_ids": 2891,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'').replace(ch,'',1)",
        "test": "assert remove_Occ(\"hello world\", \"h\") == \"ello world\"",
        "num_ids": 1599,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def sort_matrix(M):\n    # Find the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n\n    # Sort the row sums in ascending order\n    row_sums.sort()\n\n    # Create a list of lists to store the sorted matrix\n    sorted_matrix = [[0] * len(M[0]) for _ in range(len(M))]\n\n    # Reconstruct the sorted matrix\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            sorted_matrix[row_sums.index(sum(M[i]))][j] = M[i][j]\n\n    return sorted_matrix",
        "test": "assert sort_matrix([[1, 3, 5], [2, 4, 6], [7, 9, 11]]) == [[1, 3, 5], [2, 4, 6], [7, 9, 11]]",
        "num_ids": 3328,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = l*b\n    volume = area*h\n    return volume",
        "test": "assert find_Volume(1,2,3) == 6.0, \"The volume of a triangle prism with length = 1, width = 2, height = 3 should be 6.0.\"",
        "num_ids": 919,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z_]+'\n    return bool(re.search(pattern, text))",
        "test": "assert text_lowercase_underscore(\"a_bc\") == True, \"text_lowercase_underscore('a_bc') should return True\"",
        "num_ids": 1676,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(5) == 20, \"Incorrect perimeter calculation for side length 5\"",
        "num_ids": 1298,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    for char in char_set:\n        string = string.replace(char, '')\n    return string",
        "test": "assert str_to_list(\"!@#$%^&*()\") == \"\"",
        "num_ids": 2748,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5, 5]) == True",
        "num_ids": 1955,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 6 and x <= 12:\n        return True\n    elif x >= 13 and x <= 20:\n        return True\n    elif x >= 21 and x <= 28:\n        return True\n    elif x >= 29 and x <= 36:\n        return True\n    elif x >= 37 and x <= 44:\n        return True\n    elif x >= 45 and x <= 52:\n        return True\n    elif x >= 53 and x <= 60:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(99) == False, \"99 should not be a woodball\"",
        "num_ids": 1373,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it\n    num_str = str(num)\n    num_str = num_str[::-1]\n    \n    # Convert the reversed number to an integer and subtract 1\n    reversed_num = int(num_str) - 1\n    \n    # Check if the reversed number is one less than twice the original number\n    if reversed_num < num * 2:\n        return True\n    else:\n        return False",
        "test": "assert rev(1234) == False",
        "num_ids": 1721,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the given digits.\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    n = len(arr)\n    max_num = 0\n\n    for i in range(n):\n        for j in range(n - i - 1):\n            if arr[j] > max_num:\n                max_num = arr[j]\n                break\n\n    return max_num\n",
        "test": "assert find_Max_Num([0,0,0,0,0]) == 0",
        "num_ids": 2203,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def opposite_Signs(x, y):\n    if x*y < 0:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-1,2) == True",
        "num_ids": 1480,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    base = 1\n    for i in range(2, n+1):\n        base *= 2\n    return base\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    base = 1\n    for i in range(2, n+1):\n        base *= 2\n    return base - n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1631,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the frequency of each digit in the string\n    digit_freq = defaultdict(int)\n    for i in s:\n        digit_freq[i] += 1\n\n    # Create a dictionary to store the frequency of each substring ending with each digit\n    substring_freq = defaultdict(int)\n    for i in range(len(s)-1):\n        for j in range(i+1, len(s)+1):\n            substring_freq[s[i:j]] += 1\n\n    # Count the number of substrings with the sum of digits equal to their length\n    count = 0\n    for digit in digit_freq:\n        count += (digit_freq[digit] * substring_freq[str(digit_freq[digit]) + digit])\n\n    return count",
        "test": "assert count_Substrings(\"\") == 0",
        "num_ids": 2164,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1321,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    diff = 0\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([]) == 0",
        "num_ids": 2718,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks([(85, 'Math'), (90, 'Science'), (75, 'English'), (60, 'History'), (70, 'Social Studies')])[3] == ('Science', 90)",
        "num_ids": 1672,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum([recursive_list_sum(item) for item in data_list])\n    else:\n        return data_list",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 2123,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([-1, -2, -3, -4, -5]) == 0",
        "num_ids": 1403,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    :param n: integer, the number of elements in the set of Bell numbers to partition\n    :return: integer, the number of ways to partition the set of Bell numbers\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return (1 << n - 1) // 2",
        "test": "assert bell_number(0) == 1",
        "num_ids": 1890,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the array has only one element\n    if len(A) <= 1:\n        return True\n\n    # Check if all elements are same\n    if A[0] == A[-1]:\n        return True\n\n    # Check for increasing or decreasing array\n    if A[1] > A[0]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1]:\n                return False\n        return True\n\n    # Check for decreasing or increasing array\n    if A[1] < A[0]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1]:\n                return False\n        return True",
        "test": "assert is_Monotonic([1, 2, 3, 5, 4, 3]) == False, \"Expected False\"",
        "num_ids": 2562,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "test": "assert is_sublist([1, 2, 3, 4, 5], [2, 3, 6]) == False",
        "num_ids": 1837,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    equal_length = True\n    \n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            equal_length = False\n            break\n    \n    return equal_length",
        "test": "assert find_equal_tuple(()) == True",
        "num_ids": 1599,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n\n    return nums",
        "test": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Failed to sort the list correctly.\"",
        "num_ids": 2605,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 25,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number can be represented as the sum of two squares\n    square_sum = int(n**0.5)**2\n    if n == square_sum:\n        return True\n    # Check if the given number can be represented as the difference of two squares\n    square_diff = (int(n**0.5)**2) + (int(square_sum**0.5)**2)\n    if square_diff == n:\n        return True\n    # If none of the above conditions are true, the given number cannot be represented as the difference of two squares\n    return False",
        "test": "assert dif_Square(12) == False",
        "num_ids": 2311,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Check whether the colors in the list colors follow the sequence given in the patterns list.\n    If a color is not present in the patterns list, it is not checked for consistency.\n    The function returns True if the colors follow the sequence, and False otherwise.\n    '''\n\n    # Check that all colors are present in the patterns list\n    for color in colors:\n        if color not in patterns:\n            return False\n\n    # Check that the colors in the colors list follow the sequence given in the patterns list\n    prev_color = colors[0]\n    for color in colors[1:]:\n        if color not in patterns or patterns.index(color)!= patterns.index(prev_color) + 1:\n            return False\n        prev_color = color\n\n    return True",
        "test": "assert is_samepatterns([\"red\", \"blue\", \"green\", \"yellow\", \"orange\"], [\"cycle\", \"cycle\", \"cycle\", \"cycle\"]) == False, \"Test failed: False negative\"",
        "num_ids": 3155,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(i % K == 0 for i in tuple):\n            result.append(tuple)\n    return result",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 4) == []",
        "num_ids": 2469,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False",
        "test": "assert is_Diff(10) == False",
        "num_ids": 1140,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2 == 0:\n            return False\n    return True",
        "test": "assert word_len(\"banana\") == False, \"The word 'banana' should have an even length.\"",
        "num_ids": 1178,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 1592,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in a radius r and returns the volume of a sphere.\n    '''\n\n    return (4/3) * math.pi * (r ** 3)",
        "test": "assert volume_sphere(1) == 4/3 * math.pi * 1**3 # Correct output for radius 1",
        "num_ids": 1626,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Convert the string to a list of characters\n    lst = list(strr)\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate over the characters in the list\n    for char in lst:\n        # Convert the character to its ASCII value\n        ascii_val = ord(char)\n        # Add the ASCII value to the sum modulo 26\n        sum = (sum + ascii_val) % 26\n    # Convert the sum to a character and return it\n    return chr(sum)",
        "test": "assert get_Char(\"abc\") == 25 + 97 + 25 + 98 + 25 + 99 == 4981 # the correct result",
        "num_ids": 1406,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def sequence(n):\n    # Initialize sequence with first two numbers\n    sequence = [1, 1]\n\n    # Loop through the remaining numbers\n    for i in range(2, n):\n        # Calculate next number in sequence\n        next_number = sequence[-1] + sequence[-2]\n\n        # Add next number to sequence\n        sequence.append(next_number)\n\n    # Return nth number in sequence\n    return sequence[n-1]",
        "test": "assert sequence(1) == 1, \"The first number in the sequence is not 1\"",
        "num_ids": 1553,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == math.pi*4*1**2 # check for radius of 1",
        "num_ids": 1419,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    def centered_hexagonal(n, side_length):\n        \"\"\"\n        Helper function to find the centered hexagonal number.\n        \"\"\"\n        if n == 1:\n            return side_length\n        elif n % 2 == 0:\n            return centered_hexagonal(n/2, side_length + 1)\n        else:\n            return centered_hexagonal((n-1)//2, side_length + 1)\n        \n    return centered_hexagonal(n, 1)\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 1849,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}",
        "num_ids": 2447,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict",
        "test": "assert freq_count([1, 2, 3, 4, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 2, 5: 1}",
        "num_ids": 1317,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    closest_num = None\n\n    for i in range(1, N):\n        diff = abs(N - i)\n\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = i\n\n    if closest_num is None:\n        closest_num = N\n\n    return closest_num",
        "test": "assert closest_num(1) == 1",
        "num_ids": 1489,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n\n    Parameters:\n    list1 (list of str): List of words\n\n    Returns:\n    int: Length of the longest word in the list\n\n    Example:\n    ```python\n    >>> len_log(['apple', 'banana', 'cherry', 'date', 'elderberry'])\n    7\n    ```\n    \"\"\"\n\n    # Initialize max_len to 0\n    max_len = 0\n\n    # Loop through each word in the list\n    for word in list1:\n\n        # Find the length of the current word\n        len_word = len(word)\n\n        # If the current word is longer than max_len, update max_len\n        if len_word > max_len:\n            max_len = len_word\n\n    # Return the value of max_len\n    return max_len",
        "test": "assert len_log(['']) == 0, 'Incorrect result'",
        "num_ids": 1657,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1) == list:\n        for value in str1:\n            if sub_str in value:\n                return True\n        return False\n    else:\n        if sub_str in str1:\n            return True\n        return False",
        "test": "assert find_substring([\"hello\", \"world\"], \"world\") == True",
        "num_ids": 1758,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 21,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the given number is divisible by 3\n    if n % 3 == 0: \n        return True\n    # Check if the given number is divisible by 4 and not divisible by 100\n    elif n % 4 == 0 and n % 100!= 0: \n        return True\n    # If none of the above conditions are met, the number is not undulating\n    else: \n        return False",
        "test": "assert is_undulating(10) == False, \"Function should return False for undulating numbers\"",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b",
        "test": "assert power(2,3) == 8, \"power(2,3) should be 8, but it is {}.\".format(power(2,3))",
        "num_ids": 1269,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))",
        "test": "assert index_minimum([(1, 2), (3, 4), (5, 6), (7, 8)]) == (1, 2)",
        "num_ids": 1998,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = float('inf')   # initializing the length variable with infinite value\n    for sublist in lst:    # iterating through each sublist in the list\n        if len(sublist) < length:    # checking if the length of the sublist is less than the length variable\n            length = len(sublist)    # updating the length variable with the length of the smallest sublist\n    return length",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 2113,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count",
        "test": "assert divisor(0) == 0 # correctness check: 0 has 0 divisors: 0",
        "num_ids": 1495,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 2944,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "test": "assert multiply_num([0,1,0,1,0]) == 0",
        "num_ids": 1414,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "test": "assert decimal_to_binary(10) == \"1010\"",
        "num_ids": 1400,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Returns True if the given number is palindrome, False otherwise.\n    \"\"\"\n    n = str(n)\n    return n == n[::-1]\n\ndef is_prime(n):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of the given integer.\n    \"\"\"\n    if is_palindrome(num):\n        return num + 1\n    while True:\n        next_num = num + 1\n        if is_palindrome(next_num) and is_prime(next_num):\n            return next_num\n        num += 1",
        "test": "assert next_smallest_palindrome(2) == 3",
        "num_ids": 2691,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 2273,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 28,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words using snake case convention\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one\n    result = []\n    for word in words:\n        if word!= words[0]:\n            result.append(word.capitalize())\n        else:\n            result.append(word)\n    # Join the words into a camel case string\n    return ''.join(result)",
        "test": "assert snake_to_camel('camelCase') == 'camelCase'",
        "num_ids": 1612,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def eulerian_num(n, m): \n    '''\n    This function calculates the Eulerian number a(n, m) using the following formula:\n    a(n, m) = (n + m) // 2\n\n    The function returns the value of a(n, m).\n    '''\n    return (n + m) // 2",
        "test": "assert eulerian_num(2, 1) == 1, \"The correct value for eulerian_num(2, 1) is 1\"",
        "num_ids": 2891,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "test": "assert sort_sublists([[1, 2, 3], [4, 5, 6], ['a', 'b', 'c']]) == [[1, 2, 3], [4, 5, 6], ['a', 'b', 'c']]",
        "num_ids": 1729,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count",
        "test": "assert count([True, True, True]) == 3, \"count([True, True, True]) should return 3.\"",
        "num_ids": 1250,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuples to lists\n    list_test_list = list(test_list)\n    tuple_test_list = list(test_tup)\n    \n    # Append the lists to the tuples\n    new_list = list_test_list + tuple_test_list\n    \n    # Convert the new list back to a tuple\n    new_tuple = tuple(new_list)\n    \n    return new_tuple",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 1446,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Merge num1 and num2\n    merged_list = num1 + num2\n    \n    # Merge merged_list and num3\n    merged_list += num3\n    \n    # Sort the merged_list\n    sorted_list = sorted(merged_list)\n    \n    return sorted_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 3739,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list of bits\n    bits = [int(bit) for bit in list(s)]\n    # Find the length of the binary string\n    length = len(bits)\n    # Initialize a variable to count the number of odd numbers\n    count = 0\n    # Loop through each bit of the binary string\n    for i in range(length):\n        # If the bit is odd, increment the count\n        if bits[i] % 2!= 0:\n            count += 1\n        # Rotate the bits to the right by one position\n        bits = bits[1:] + [bits[0]]\n        # Rotate the bits to the right by n positions\n        for j in range(n):\n            bits = bits[1:] + [bits[0]]\n    # Return the count of odd numbers found\n    return count",
        "test": "assert odd_Equivalent('10111', 2) == 4",
        "num_ids": 2832,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # convert the input list to set to remove duplicates and get the unique elements\n    unique_elements = set([item for sublist in nestedlist for item in sublist])\n\n    # initialize an empty set to store the common elements\n    common_elements = set()\n\n    # loop through each element in the unique set\n    for element in unique_elements:\n        # check if the element is present in all the nested lists\n        all_present = True\n        for sublist in nestedlist:\n            if element not in sublist:\n                all_present = False\n                break\n        # if the element is present in all the nested lists, add it to the common set\n        if all_present:\n            common_elements.add(element)\n\n    # convert the common set back to a list and return it\n    return list(common_elements)",
        "test": "assert common_in_nested_lists([[1,2,3],[3,4,5],[4,5,6],[7,8,9],[10,11,12]]) == []",
        "num_ids": 2592,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer('123') == True",
        "num_ids": 1073,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True",
        "test": "assert empty_dit([{'a': 1}, {'b': 2}, {'c': 3}]) == False, \"empty_dit([{'a': 1}, {'b': 2}, {'c': 3}]) should return False\"",
        "num_ids": 1505,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)",
        "test": "assert tuple_to_int((0, 0, 0, 0, 0)) == 0, \"tuple_to_int function should convert a tuple of zeros to a single integer.\"",
        "num_ids": 1463,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, (int, float, complex)):\n                continue\n            elif isinstance(element, list):\n                sublist.remove(element)\n            elif isinstance(element, str):\n                try:\n                    value = float(element)\n                    sublist[sublist.index(element)] = value\n                except ValueError:\n                    continue\n    return test_list",
        "test": "assert list_to_float([[1, 2, 3], [4, 5.0, 6.0], [7, 8, 9.0]]) == [[1, 2, 3], [4, 5.0, 6.0], [7, 8, 9.0]]",
        "num_ids": 2720,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 1057,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # create a set to keep track of the elements we've seen\n    seen = set()\n    # loop through the array\n    for num in arr:\n        # if the element is already in the set, we've found a duplicate and can return it\n        if num in seen:\n            return num\n        # add the element to the set\n        seen.add(num)\n    # if we reach here, there were no duplicates and we can return None\n    return None",
        "test": "assert search([]) == None",
        "num_ids": 2264,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables for maximum absolute product and current product\n    max_product = 0\n    current_product = 1\n    \n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        # Get the first number in the tuple\n        num1 = list1[i][0]\n        \n        # Iterate through each tuple in the list from the next index\n        for j in range(i+1, len(list1)):\n            # Get the second number in the tuple\n            num2 = list1[j][1]\n            \n            # Calculate the absolute difference between the two numbers\n            diff = abs(num1 - num2)\n            \n            # Update the maximum absolute product if this difference is larger\n            max_product = max(max_product, diff)\n            \n            # Update the current product with the maximum absolute product\n            current_product = max(current_product, num1*num2)\n            \n    # Return the current product\n    return current_product",
        "test": "assert max_product_tuple([(-2, 5), (-3, -1), (0, 3), (2, -2)]) == 6",
        "num_ids": 2895,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num!= 1:\n            for i in range(2, num):\n                if num % i == 0:\n                    break\n            else:\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)",
        "test": "assert amicable_numbers_sum(100) == 1060",
        "num_ids": 2650,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle",
        "test": "assert angle_complex(0+0j, 0+0j) == 0",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            if count > 0:\n                max_diff = max(max_diff, count)\n            count = 0\n    if count > 0:\n        max_diff = max(max_diff, count)\n    return max_diff",
        "test": "assert find_length(\"10101\") == 1, \"Error: find_length should return 1 for input '10101'\"",
        "num_ids": 3409,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def sum(a, b):\n    '''\n    This function takes two numbers a and b as input and returns their sum of common divisors.\n    '''\n    # Check if a is less than b\n    if a < b:\n        # Swap the values of a and b\n        a, b = b, a\n\n    # Initialize sum variable to 0\n    sum_cd = 0\n\n    # Loop through all the numbers between 1 and b\n    for i in range(1, b + 1):\n        # If i is a common divisor of a and b, add it to the sum variable\n        if a % i == 0 and b % i == 0:\n            sum_cd += i\n\n    # Return the sum of common divisors\n    return sum_cd",
        "test": "assert sum(12, 18) == 12, \"sum should be 12\"",
        "num_ids": 2357,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "test": "assert multiply_int(2, 3) == 6, \"Test case 1 failed\"",
        "num_ids": 1023,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes a list of words and a number n as input and returns a list of words that are longer than n characters.\n\n    Args:\n        words (list): List of words to be searched for words that are longer than n characters.\n        n (int): Maximum number of characters allowed for a word.\n\n    Returns:\n        list: List of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "test": "assert long_words(4, ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']) == ['apple', 'cherry', 'elderberry', 'honeydew']",
        "num_ids": 1514,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check whether the sum of the diagonal elements is equal to the sum of the remaining elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n    remaining_sum = sum(sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix)))\n\n    return diagonal_sum == remaining_sum",
        "test": "assert magic_square_test([[8,1,6],[3,5,7],[4,9,2],[7,6,5],[9,3,1],[5,8,4],[2,9,6]]) == False",
        "num_ids": 3495,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = defaultdict(int)\n    for num in nums:\n        freq_map[num] += 1\n\n    max_freq = max(freq_map.values())\n    max_num = None\n    for num in nums:\n        if freq_map[num] == max_freq:\n            max_num = num\n\n    return max_num",
        "test": "assert max_occurrences([1, 2, 3, 2, 1, 4, 2, 3, 1, 2]) == 2",
        "num_ids": 3525,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char in vowels and char not in \"AEIOU\":\n            result += char\n    result = result[::-1]\n    return result",
        "test": "assert reverse_vowels(\"world\") == \"dlrow\"",
        "num_ids": 1474,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def tup_string(tup):\n    return str(tup)",
        "test": "assert tup_string((1,2,3, 'a')) == '1,2,3,a'",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum",
        "test": "assert sum_negativenum([1,2,3,4,5,6,7,8,9,-10,-20,-30]) == -60",
        "num_ids": 1446,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 1134,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    if non_zero_count == 0:\n        return 0\n    return zero_count / non_zero_count",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0.0",
        "num_ids": 2507,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    def is_power_of_two(x): \n        return x & (x - 1) == 0\n\n    def sum_of_powers_of_two(x): \n        result = 0\n        while x > 0: \n            if x & 1 == 1: \n                result += 1\n            x >>= 1\n        return result\n\n    if is_power_of_two(n): \n        return True\n\n    result = 0\n    while n > 1: \n        if n & 1 == 1: \n            result += 1\n        n >>= 1\n\n    return result == n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10000) == False, \"The number 10000 can be represented as sum of non-zero powers of 2.\"",
        "num_ids": 2943,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference",
        "test": "assert circle_circumference(5) == 31.41592653589793",
        "num_ids": 1648,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty set to hold the flattened numbers\n    flattened_numbers = set()\n    # Loop through each item in the list\n    for item in test_list:\n        # If the item is a list, recursively flatten it\n        if isinstance(item, list):\n            flattened_numbers.update(extract_singly(item))\n        # Otherwise, add the number to the set\n        else:\n            flattened_numbers.add(item)\n    # Return the flattened numbers set\n    return flattened_numbers",
        "test": "assert extract_singly([]) == set()",
        "num_ids": 1530,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    # Find the length of the list\n    n = len(nums)\n    # Create a list of size n-1 filled with True\n    swapped = [True] * (n - 1)\n\n    while True:\n        # Find the first element that is not sorted\n        for i in range(n - 1):\n            if swapped[i] == True:\n                # If the element is greater than the next element, swap them\n                if nums[i] > nums[i + 1]:\n                    nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                    swapped[i], swapped[i + 1] = swapped[i + 1], swapped[i]\n                else:\n                    # If the element is already sorted, break out of the inner loop\n                    break\n\n        # If all elements are sorted, break out of the outer loop\n        if all(swapped):\n            break\n\n    return nums",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 3009,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3,4,5], [4,5,6,7,8], [5,6,7,8,9]) == 0",
        "num_ids": 2466,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "test": "assert find_lists([]) == 0",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 2309,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # initialize variables\n    x = y = 0\n    count = 0\n\n    # iterate until a solution is found\n    while count < n:\n        # update x and y\n        x = x + 1\n        y = a * x + b * y\n\n        # check if solution is valid\n        if a * x + b * y == n:\n            # return solution as a tuple\n            return (x, y)\n\n        # increment count\n        count += 1\n\n    # no solution found\n    return None",
        "test": "assert find_solution(2, 3, 12) == None # no solution",
        "num_ids": 2633,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 28,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n\n    Parameters:\n    list1 (list): The original list.\n    list2 (list): The list of elements to remove from list1.\n\n    Returns:\n    list: A new list without the elements present in list2.\n    \"\"\"\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [5]) == [1, 2, 3, 4]",
        "num_ids": 1897,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Calculate the sum of the first n terms\n    sum_n = (n * (n+1)) // 2\n    \n    # Initialize the sum of the remaining terms\n    sum_remaining = 0\n    \n    # Initialize the counter\n    i = 0\n    \n    while sum_remaining < 0:\n        # Calculate the sum of the current term\n        current_sum = n - 2 * i\n        \n        # Update the sum of the remaining terms\n        sum_remaining += current_sum\n        \n        # Update the counter\n        i += 1\n        \n    # Return the sum of the first n terms\n    return sum_n",
        "test": "assert sum_series(5) == 15 # correct for n=5",
        "num_ids": 1723,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l) * (s - l - 1)) / (2 * math.factorial(l - 2))\n    return area\n",
        "test": "assert area_polygon(7, 8) == 98.7597787546818, \"The area should be 98.7597787546818\"",
        "num_ids": 2208,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n    return divisors[-1] == sum(divisors)",
        "test": "assert div_sum(15) == False # false as 15 does not have any common divisor",
        "num_ids": 2061,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Initialize a dictionary to store the frequency of each character in the string\n    char_freq = {}\n\n    # Convert the string to lowercase and split into a list of characters\n    str1 = str1.lower().split()\n\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is a letter\n        if char.isalpha():\n            # If it is, add it to the dictionary\n            char_freq[char] = char_freq.get(char, 0) + 1\n\n    # Initialize a counter to store the count of characters at the same position in the English alphabet\n    count = 0\n\n    # Loop through the keys in the dictionary\n    for key in char_freq:\n        # Check if the position of the character in the English alphabet matches the position of its key in the string\n        if char_freq[key] == char_freq.get(key, 0):\n            # If it does, increment the count\n            count += 1\n\n    return count",
        "test": "assert count_char_position('') == 0",
        "num_ids": 2265,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([]) == 0",
        "num_ids": 2220,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 1647,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,2,1,4,5,4,3,2], 2) == 3",
        "num_ids": 1870,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 21,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_range = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_range += i\n    return sum_range",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 6",
        "num_ids": 2150,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n",
        "test": "assert perimeter_pentagon(5) == 25",
        "num_ids": 1697,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '', 1)\n    return count",
        "test": "assert count_occurance('') == 0",
        "num_ids": 1239,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the length of the tuple is 0\n    if len(test_tuple) == 0:\n        return True\n\n    # Get the first element in the tuple\n    first_element = type(test_tuple[0])\n\n    # Iterate over the rest of the tuple\n    for element in test_tuple[1:]:\n        # Check if the element has same data type as the first element\n        if type(element)!= first_element:\n            return False\n\n    # If all the elements have same data type, return True\n    return True",
        "test": "assert check_type((1,2,3)) == True",
        "num_ids": 1656,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([2, 2, 3, 3, 3, 4, 4, 5, 5], 8, 4) == False",
        "num_ids": 3199,
        "indeed": true
    },
    {
        "number": 224,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Set_Bits(n): \n    count = 0 \n    while n > 0: \n        if n & 1 == 1: \n            count += 1 \n        n = n >> 1 \n    return count ",
        "test": "assert count_Set_Bits(0b0000000000000000000000000000000) == 0",
        "num_ids": 1593,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Initialize an empty string to store the new string\n    new_str = \"\"\n    # Loop through each character in the original string\n    for char in str:\n        # Check if the current character has an odd index\n        if len(str) % 2 == 0:\n            # If the current character has an odd index, add it to the new string\n            new_str += char\n        else:\n            # If the current character has an even index, ignore it\n            pass\n    # Return the new string\n    return new_str",
        "test": "assert odd_values_string('') == ''",
        "num_ids": 1537,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)",
        "test": "assert min_of_three(1,2,3) == 1, \"min_of_three(1,2,3) should return 1, but it returns {}\".format(min_of_three(1,2,3))",
        "num_ids": 1545,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # initialize a variable to keep track of the number of unset bits in the range\n    unset_bits = 0\n\n    # loop through all the bits in the given range\n    for i in range(l, r + 1):\n        # check if the current bit is set\n        if n & (1 << i):\n            # if the bit is set, increment the unset_bits variable\n            unset_bits += 1\n            # if the unset_bits variable becomes greater than the range, return False\n            if unset_bits > r - l + 1:\n                return False\n\n    # if the loop completes without returning False, return True\n    return True",
        "test": "assert all_Bits_Set_In_The_Given_Range(10, 0, 0) == True, \"Test Case 4 Failed\"",
        "num_ids": 2921,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # Iterate over the input array\n    for num in arr:\n        # If the number is negative, append it to the negative list\n        if num < 0:\n            neg_list.append(num)\n        # Otherwise, append it to the positive list\n        else:\n            pos_list.append(num)\n\n    # Sort the negative list in reverse order\n    neg_list.sort(reverse=True)\n\n    # Combine the two sorted lists into a single list\n    result = neg_list + pos_list\n\n    # Return the resulting list\n    return result",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 4070,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str1 = str1.replace(\" \", char)\n    return str1",
        "test": "assert replace_blank(\"hello world\", \"x\") == \"helloxworld\"",
        "num_ids": 964,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # sorting the list in descending order\n    list1.sort(reverse=True)\n    # returning the first n items from the sorted list\n    return list1[:n]",
        "test": "assert larg_nnum([1], 1) == [1]",
        "num_ids": 2432,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface = 2 * r * h\n    return lateral_surface",
        "test": "assert lateralsuface_cylinder(3,4) == 24, \"lateral surface area should be 24\"",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert volume_cube(3) == 27, \"Incorrect volume calculation\"",
        "num_ids": 1064,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize count to 0\n    count = 0\n    # loop through each bit of the binary representation of n\n    for i in range(32):\n        # calculate the current bit position as a binary number\n        current_bit_position = bin(i)[2:].zfill(5)\n        # if the current bit is even, set the corresponding bit of the result\n        if (n & (1 << int(current_bit_position, 2)))!= 0:\n            n |= (1 << int(current_bit_position, 2))\n        # increment the count of even bits set\n        count += 1\n    # return the result with the specified number of even bits set\n    return n",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 2047,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to get rid of duplicates\n    unique_tuples = set(test_list)\n    \n    # Count the occurrences of each unique tuple using Counter from the collections module\n    count_dict = Counter(unique_tuples)\n    \n    return count_dict",
        "test": "assert check_occurences([]) == {}",
        "num_ids": 3546,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize a variable to store the number of substrings\n    num_substrings = 0\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Check if the current character is a letter or digit\n        if str[i].isalnum():\n            # Initialize variables to store the substring start and end indices\n            start = i\n            end = i\n            # Loop through each subsequent character in the string\n            while end < len(str) and str[end].isalnum():\n                end += 1\n            # If the substring is non-empty, increment the number of substrings\n            if end > start:\n                num_substrings += 1\n    # Return the number of substrings\n    return num_substrings",
        "test": "assert number_of_substrings('') == 0, 'Empty string'",
        "num_ids": 1757,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize counters\n    count = 0\n    prev_num = 0\n    \n    # Loop through possible combinations of sequence elements\n    for i in range(1, m+1):\n        num = 2 * prev_num + i\n        if num <= m:\n            count += 1\n        prev_num = num\n    \n    return count",
        "test": "assert get_total_number_of_sequences(10, 10) == 2",
        "num_ids": 2460,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def replace_list(list1, list2):\n    # get the last element of the first list\n    last_element = list1[-1]\n    # remove the last element from the first list\n    list1.pop()\n    # append the elements of the second list to the first list\n    list1.extend(list2)\n    # return the modified first list\n    return list1",
        "test": "assert replace_list([1,2,3,4,5], [6]) == [1,2,3,4,6]",
        "num_ids": 1463,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"Hello World\") == 11",
        "num_ids": 871,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number.\n    \"\"\"\n    x = N\n    while True:\n        x += 1\n        if x**2 > N:\n            return x - 1\n        if x**2 < N:\n            continue\n        else:\n            return x",
        "test": "assert next_Perfect_Square(1) == 1",
        "num_ids": 2023,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def max_sum(arr):\n    # Initialize variables to keep track of the current and previous sums\n    curr_sum = 0\n    prev_sum = 0\n    max_sum = 0\n\n    # Loop through the array and update the current and previous sums\n    for num in arr:\n        curr_sum += num\n        if curr_sum > prev_sum:\n            curr_sum = prev_sum + num\n        max_sum = max(max_sum, curr_sum)\n        prev_sum = curr_sum\n\n    return max_sum",
        "test": "assert max_sum([5, 4, 3, 2, 1]) == 15, \"Expected 15, got {}\".format(max_sum([5, 4, 3, 2, 1]))",
        "num_ids": 3096,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 29,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize the guess as the square root of the number\n    guess = number ** 0.5\n\n    # initialize the previous guess and difference\n    prev_guess = guess\n    difference = 0\n\n    while difference > 0.000001:\n        # compute the next guess using the babylonian method\n        next_guess = guess - ((guess ** 3) - number) / (3 * guess ** 2)\n\n        # check if the next guess is closer to the target number than the previous guess\n        if abs(next_guess - number) < abs(guess - number):\n            # update the previous guess and difference\n            prev_guess = guess\n            difference = abs(next_guess - number)\n\n        # update the guess\n        guess = next_guess\n\n    return guess",
        "test": "assert babylonian_squareroot(0) == 0.0, \"Error: The computed square root of 0 is incorrect.\"",
        "num_ids": 2176,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def lps(str):\n    '''\n    This function will find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return len(str)\n\n    # Create a 2D table to store all the lengths of palindromic subsequences.\n    # The table will have dimensions (n+1) x (m+1) where n is the length of str\n    # and m is the length of the longest palindromic subsequence found so far.\n    # The table will be filled up in a bottom-up manner, by filling in the table from the bottom-right corner.\n    table = [[0 for j in range(len(str)+1)] for i in range(len(str)+1)]\n\n    # Initialize the first column and first row of the table.\n    for i in range(1, len(str)+1):\n        table[i][0] = 0\n\n    for j in range(1, len(str)+1):\n        table[0][j] = 0\n\n    # Fill up the table in a bottom-up manner.\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # The length of the longest palindromic subsequence is stored in the last element of the bottom-right corner of the table.\n    return table[-1][-1]\n",
        "test": "assert lps(\"a\") == 1, \"lps('a') should be 1\"",
        "num_ids": 3482,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum",
        "test": "assert harmonic_sum(1) == 0",
        "num_ids": 1367,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns a list of their intersection.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "test": "assert intersection_array([1, 2, 3], [1, 2, 3]) == [1, 2, 3]",
        "num_ids": 2010,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 2, 1, 4, 3, 2, 1), 2) == 3",
        "num_ids": 1580,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list",
        "test": "assert insert_element([], 0) == [0]",
        "num_ids": 1871,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:  \n        complex_number = complex(number)  \n        r = cmath.sqrt(complex_number.real**2 + complex_number.imag**2)  \n        theta = cmath.phase(complex_number)  \n        polar_number = (r, theta)  \n        print(polar_number)  ",
        "test": "assert convert([1+2j, 3+4j]) == [(1, 2), (3, 4)], \"convert([1+2j, 3+4j]) should return [(1, 2), (3, 4)]\"",
        "num_ids": 1781,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1532,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        combo = tuple(l[i:i+n])\n        result.append(combo)\n    return result",
        "test": "assert combinations_colors([1, 2, 3], 3) == [(1, 2, 3)]",
        "num_ids": 2450,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(4) == 2",
        "num_ids": 2230,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = None\n    if test_tup1[0] > test_tup2[0]:\n        max_tuple = test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        max_tuple = test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            max_tuple = test_tup1\n        else:\n            max_tuple = test_tup2\n    return max_tuple",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6))!= (4, 5, 7)",
        "num_ids": 2537,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 23,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    # Define a list of primes\n    primes = []\n\n    # Start with 2\n    num = 2\n\n    # While we haven't found the nth prime yet\n    while len(primes) < n:\n        # Check if this number is prime\n        if is_prime(num):\n            # If it is, add it to the list of primes\n            primes.append(num)\n        # Increment the number by 1\n        num += 1\n\n    # Return the nth prime\n    return primes[-1]",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 2891,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Create a new tuple with the same length as the shorter tuple\n    result_tup = tuple(int(x) / int(y) for x, y in zip(test_tup1, test_tup2))\n\n    return result_tup",
        "test": "assert division_elements((1, 2), (3, 4)) == (0.3333333333333333, 0.5)",
        "num_ids": 2249,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    \"\"\"\n    # Calculate the length of the second part\n    part2_len = len(lst) - L\n    \n    # Split the list into two parts using the calculated lengths\n    part1 = lst[:L]\n    part2 = lst[L:]\n    \n    return (part1, part2)",
        "test": "assert split_two_parts([1,2,3,4,5], 2) == ([1,2], [3,4,5])",
        "num_ids": 2615,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert human age from years to months\n    age_in_months = h_age * 12\n    # Calculate dog's age in years\n    age_in_years = age_in_months / 12\n    # Return the calculated age\n    return age_in_years",
        "test": "assert dog_age(0) == 0, \"dog_age(0) should return 0\"",
        "num_ids": 1497,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def list_split(S, step):\n    if step <= 0:\n        raise ValueError(\"Step must be positive.\")\n\n    if not isinstance(S, list):\n        raise TypeError(\"Input must be a list.\")\n\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n\n    return result",
        "test": "assert list_split([1,2,3,4,5,6,7,8,9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1914,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * (l ** 2)  # Cube surface area = 6 * side_length^2\n    return surface_area",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 1463,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    # initialize the sum variable to zero\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current number to the sum\n        sum += i*i\n    \n    # return the sum of the squares of the first n odd natural numbers\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 1460,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize a variable to keep track of the number of stars\n    count = 1\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Add a star to the count each time through the loop\n        count *= i\n    \n    # Return the count as then'th star number\n    return count",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 1624,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a string k and returns the ASCII value of the first character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('A') == 65",
        "num_ids": 1579,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([0, 0, 0, 0, 0]) == 0",
        "num_ids": 2190,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_of_powers += i**5\n    return sum_of_powers",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "test": "assert rear_extract([(1,2), (3,4), (5,6)]) == [2, 4, 6]",
        "num_ids": 1093,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "test": "assert substract_elements((), ()) == ()",
        "num_ids": 2070,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    # Initialize count to 0\n    count = 0\n    # Loop through odd indices from 1 to n\n    for i in range(1, n+1, 2):\n        # Calculate the binomial coefficient of i and n-i using math.comb() function\n        coeff = math.comb(n, i)\n        # If the coefficient is even, add it to the sum\n        if coeff % 2 == 0:\n            sum += coeff\n            count += 1\n    # Return the sum of even binomial coefficients\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1958,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume\n    volume = (3/4) * 3.14 * r**2 * h\n    \n    # return the volume\n    return volume",
        "test": "assert volume_cylinder(8,12) == 17073.387060344375",
        "num_ids": 1882,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}",
        "test": "assert dict_filter({'a': 1, 'b': 2, 'c': 3}, 4) == {}",
        "num_ids": 1838,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count",
        "test": "assert count_first_elements(()) == 0",
        "num_ids": 1934,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0: \n        return False\n    else: \n        decagonal = (n * (3 * n - 1)) // 2\n        return decagonal",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1581,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2), \"sequential_search([1, 2, 3, 4, 5], 3) should return (True, 2)\"",
        "num_ids": 2126,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True, \"all_unique([1, 2, 3, 4, 5]) == True, but it returns False\"",
        "num_ids": 1836,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([-1,-2,-3],[-4,-5,-6]) == [3,3,3]",
        "num_ids": 1956,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 25,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq = [0]*10\n    for digit in digits:\n        freq[digit] += 1\n    for digit in freq:\n        if digit > digit:\n            return False\n    return True",
        "test": "assert validate(12345) == True",
        "num_ids": 2243,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    all_equal = True\n    for item in list:\n        if item!= element:\n            all_equal = False\n            break\n    return all_equal",
        "test": "assert check_element([1, 2, 3], 2) == False # The list [1, 2, 3] is not equal to 2",
        "num_ids": 1687,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = re.compile(r'a.*b\\d*')\n    return bool(pattern.search(text))",
        "test": "assert text_match_two_three(\"abbabb\") == True",
        "num_ids": 1430,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    :param a: A list of integers\n    :param n: The length of the list\n    :param k: The number of times to repeat the array\n    :return: The largest sum of a contiguous array in the modified array which is formed by repeating the given array k times\n    \"\"\"\n\n    # Initialize the maximum sum and the sum of the current subarray\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Repeat the array k times and calculate the sum of each subarray\n    for i in range(k):\n        current_sum = 0\n        for j in range(n):\n            current_sum += a[j]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1,2,3,4,5], 5, 5) == 15",
        "num_ids": 2979,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i*i\n    return sum_squares",
        "test": "assert square_Sum(1) == 0, \"square_Sum(1) should be 0\"",
        "num_ids": 1354,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6]]) == 3",
        "num_ids": 1858,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "def count_no_of_ways(n, k):\n    # initialize a 2D table to store the count of ways for each number of colors and number of posts\n    dp = [[0] * (n+1) for _ in range(k+1)]\n\n    # base cases: when n=0 or k=0, there is only one way to paint the fence\n    for i in range(1, k+1):\n        dp[i][0] = 1\n        dp[0][i] = 1\n\n    # iterate over the remaining numbers of colors and posts\n    for j in range(1, k+1):\n        for i in range(1, n+1):\n            # count the number of ways to paint the fence with i-1 posts and j-1 colors, with the same color as the previous row\n            dp[j][i] = dp[j][i-1]\n\n            # count the number of ways to paint the fence with i-1 posts and j colors, with the same color as the previous row\n            if i > 1 and dp[j-1][i] > 0:\n                dp[j][i] += dp[j-1][i-1]\n\n    # return the total number of ways to paint the fence\n    return dp[k][n]",
        "test": "assert count_no_of_ways(3, 3) == 4",
        "num_ids": 2703,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient",
        "test": "assert find(10,3) == 3",
        "num_ids": 978,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the length of the hypotenuse\n    c = math.sqrt(w**2 + h**2)\n\n    # Return the third side of the right angled triangle\n    return c",
        "test": "assert otherside_rightangle(3,4) == math.sqrt(3**2 + 4**2)",
        "num_ids": 1652,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5, \"max_val([1, 2, 3, 4, 5]) should return 5\"",
        "num_ids": 1936,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert sum_div(12) == 28,'sum_div(12) should return 28'",
        "num_ids": 1548,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Sort the array in O(nlogn) time complexity\n    arr.sort()\n    # Initialize variables to keep track of count of inversions\n    inv_count = 0\n    # Traverse the array from the first and last elements\n    for i in range(n-1):\n        # If the current element is greater than the previous one, \n        # then count an inversion\n        if arr[i] > arr[i+1]:\n            inv_count += n - i - 1\n    return inv_count",
        "test": "assert get_Inv_Count([1, 2]) == 0, \"get_Inv_Count([1, 2]) should return 0.\"",
        "num_ids": 4051,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "test": "assert flatten_list([[1, 2], 3, [[4], 5]]) == [1, 2, 3, 4, 5]",
        "num_ids": 1643,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(int)\n    max_agg = 0\n    for item in stdata:\n        data[item[0]] += item[1]\n        if item[1] > max_agg:\n            max_agg = item[1]\n    return max_agg",
        "test": "assert max_aggregate([]) == 0, \"max_aggregate([]) should return 0.\"",
        "num_ids": 2331,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n), 2**(2*n+2)-1):\n        sum1 = sum(int(digit) for digit in bin(i)[2:])\n        sum2 = sum(int(digit) for digit in bin(i)[-2:])\n        if sum1 == sum2:\n            count += 1\n    return count",
        "test": "assert count_binary_seq(1) == 0",
        "num_ids": 1893,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = 0\n        for v in d.values():\n            depth = dict_depth(v)\n            max_depth = max(max_depth, depth + 1)\n        return max_depth\n    else:\n        return 0",
        "test": "assert dict_depth({}) == 0",
        "num_ids": 1418,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, the number of rotations, and an index as input.\n    The function returns the element at the given index after the number of rotations.\n    \"\"\"\n\n    # Initialize the current index to the index we are searching for\n    current_index = index\n\n    # Loop through each range in the list of ranges\n    for range_start, range_end in ranges:\n        # Calculate the number of rotations needed to get to the end of the range\n        rotations_needed = range_end - range_start\n\n        # If we have already rotated the required number of times, then we can stop looping\n        if current_index >= range_start + rotations_needed:\n            break\n\n        # Calculate the index after the required number of rotations\n        new_index = (current_index - range_start) % (range_end - range_start) + range_start\n\n        # If the new index is the one we are searching for, then return the element at the new index\n        if new_index == current_index:\n            return arr[new_index]\n\n        # Update the current index to the new index\n        current_index = new_index\n\n    # If we have not found the element at the required index, then return None\n    return None",
        "test": "assert find_Element([1, 2, 3, 4, 5], [(0, 4)], 1, 2) == 3, \"find_Element failed on the third test case.\"",
        "num_ids": 3832,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(\"^p\")\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result",
        "test": "assert start_withp(['apple', 'banana', 'orange', 'pear', 'pineapple']) == ['pear', 'pineapple']",
        "num_ids": 2608,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    max_seq = []\n    max_seq.append(index)\n    for i in range(index + 1, n):\n        if a[i] > a[max_seq[-1]]:\n            if len(max_seq) < k:\n                max_seq.append(i)\n            else:\n                max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i, k - 1))\n        else:\n            if a[max_seq[-1]] < a[i]:\n                if len(max_seq) < k:\n                    max_seq.append(i)\n                else:\n                    max_sum = max(max_sum, max_sum_increasing_subseq(a, n, max_seq[-1], k - 1))\n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 0, 3) == 15",
        "num_ids": 4855,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # check if the length of the tuple is equal to the maximum dimension\n    if len(tuplex) == m*n:\n        # create a new tuple with the same elements as the original tuple\n        new_tuplex = deepcopy(tuplex)\n        # get the index of the colon\n        colon_index = n*(m-1)\n        # create a new tuple with the elements from the original tuple to the colon\n        colon = tuple(new_tuplex[i] for i in range(m*n-1))\n        # create a new tuple with the colon and the rest of the elements\n        new_tuplex = colon + new_tuplex[colon_index:]\n        # return the new tuple with the colon\n        return new_tuplex\n    else:\n        print(\"The length of the tuple should be equal to the maximum dimension.\")\n        return None",
        "test": "assert colon_tuplex((1,2,3),(3,1,2)) == (3,1,2)",
        "num_ids": 2508,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Calculate the largest products\n    products = []\n    for i in range(N):\n        products.append(nums1[i] * nums2[i])\n\n    # Return the largest products\n    return products",
        "test": "assert large_product([2, 4, 6], [1, 3, 5], 5) == (300, [1, 1, 1, 1, 1])",
        "num_ids": 4097,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def maximum(a, b):\n    '''\n    This function takes in two numbers and returns the larger of them.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2,3) == 3 # correctness of maximum function with two numbers",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('') == ()",
        "num_ids": 1110,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes a positive integer n and returns the updated integer with the leftmost unset bit set to 1.\n    If there is no unset bit in n, it returns n itself.\n    '''\n    i = 1\n    while i <= n:\n        if n & i:\n            break\n        i <<= 1\n    if i > n:\n        return n\n    else:\n        return n | i",
        "test": "assert set_left_most_unset_bit(3) == 3",
        "num_ids": 2023,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 210,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone with a given base radius and height.\n    \"\"\"\n    return math.pi * r**2 * h",
        "test": "assert volume_cone(1,1) == math.pi*1*1",
        "num_ids": 1212,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 1654,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(2) == 3, \"The third lucas number is 3.\"",
        "num_ids": 1892,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]",
        "test": "assert add_string([], '%s %s') == []",
        "num_ids": 1515,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Define the nested dictionary\n    data = {}\n    # Iterate over the three lists and create the nested dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = {l2[i]: l3[i]}\n    # Return the nested dictionary\n    return data",
        "test": "assert convert_list_dictionary([[1,2,3],[4,5,6],[7,8,9]], [10,20,30], ['A','B','C']) == {'outer_list': [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'inner_list': [10, 20, 30], 'list_of_lists': [['A', 'B', 'C']]}",
        "num_ids": 2066,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1940,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(str(item)) > max_len:\n            max_len = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_len:\n            max_list.append(item)\n    \n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 1973,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False",
        "test": "assert check_distinct((1, 2, 3)) == True",
        "num_ids": 1274,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char\n    \n    return None",
        "test": "assert first_non_repeating_character(\"leetcode\") == \"l\"",
        "num_ids": 1953,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_char(\"123\") == False",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Get the length of the sorted list\n    length = len(numbers)\n\n    # Check if the length is odd or even\n    if length % 2 == 0:\n        # If the length is even, calculate the average of the two middle numbers\n        median = (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n    else:\n        # If the length is odd, simply return the middle number\n        median = numbers[length // 2]\n\n    return median",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 2352,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        sum_of_digits += digit_sum\n    return sum_of_digits",
        "test": "assert sum_of_digits([0, 0, 0]) == 0",
        "num_ids": 1558,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "test": "assert bitwise_xor((1, 2), (3, 4)) == (2, 6)",
        "num_ids": 2094,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # convert the list to set to remove duplicates\n    unique_set = set(test_list)\n    # convert the set back to a list and count its length\n    unique_list = list(unique_set)\n    return len(unique_list)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 1688,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same number of elements\")\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            tup1_elem = test_tup1[i]\n            tup2_elem = test_tup2[i]\n            if isinstance(tup1_elem, tuple) and isinstance(tup2_elem, tuple):\n                result.append(add_nested_tuples(tup1_elem, tup2_elem))\n            else:\n                result.append(tup1_elem + tup2_elem)\n        return tuple(result)",
        "test": "assert add_nested_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)",
        "num_ids": 1939,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2,3) == 2",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two tuples as input and checks whether an element exists within the first tuple.\n    If an element is found, the function returns True. Otherwise, it returns False.\n    '''\n\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False",
        "test": "assert check_tuplex(tuplex=(1,2,3), tuple1=(4,)) == False, \"check_tuplex failed\"",
        "num_ids": 1380,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 21,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert find_Parity(5) == True, \"The parity of 5 should be odd.\"",
        "num_ids": 1310,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a list of digits\n    digits = list(str(n))\n    # sort the list of digits in ascending order\n    digits.sort()\n    # concatenate the sorted digits in reverse order\n    reversed_digits = digits[::-1]\n    # convert the reversed list of digits back to a string and convert it to an integer\n    next_bigger = int(''.join(reversed_digits))\n    # return the next bigger number\n    return next_bigger",
        "test": "assert rearrange_bigger(1) == 1",
        "num_ids": 2955,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    min_heap = []\n    result = []\n\n    for i, num1 in enumerate(nums1):\n        for j, num2 in enumerate(nums2):\n            pair = (min(num1, num2), num1, num2)\n            heapq.heappush(min_heap, pair)\n\n            if len(min_heap) == k:\n                pair = heapq.heappop(min_heap)\n                result.append([pair[1], pair[2]])\n\n    return result",
        "test": "assert k_smallest_pairs([],[],0) == []",
        "num_ids": 3825,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Sort the list of tuples based on the first element\n    list1.sort(key=lambda x: x[0])\n    \n    # Initialize variables to store the minimum product and the count of tuples\n    min_product = list1[0][1]\n    count = 1\n    \n    # Loop through the sorted list of tuples\n    for i in range(1, len(list1)):\n        # If the next tuple's first element is different from the current tuple's, increment the count\n        if list1[i][0]!= list1[i-1][0]:\n            count += 1\n        # Otherwise, multiply the current minimum product by the next tuple's second element and update the minimum product\n        else:\n            min_product *= list1[i][1]\n            \n    # Return the minimum product and count of tuples\n    return min_product, count",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6)]) == (2, 3)",
        "num_ids": 3346,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1967,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # replace all underscores with spaces\n    word = re.sub(r'_','', word)\n    # split the word into words using spaces as the delimiter\n    words = word.split()\n    # capitalize the first letter of each word except the first word\n    for i in range(1, len(words)):\n        words[i] = words[i][0].upper() + words[i][1:]\n    # join the words back into a string with no spaces\n    camel_case_word = ''.join(words)\n    return camel_case_word",
        "test": "assert snake_to_camel('') == ''",
        "num_ids": 1690,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "test": "assert remove_odd([]) == []",
        "num_ids": 1702,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 28,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # Check if the list is empty\n    if not list1:\n        return None\n    # Extract the nth element from the list of tuples\n    for i in range(len(list1)):\n        if i == n - 1:\n            return list1[i]",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == (1, 2)",
        "num_ids": 2366,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3], [4,5,6]) == False, \"overlapping([1,2,3], [4,5,6]) should return False\"",
        "num_ids": 2252,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to store the maximum product of the first and second elements\n    max_product1 = max_product2 = arr[0] * arr[1]\n\n    # Loop through the array from the second element to the last element\n    for i in range(2, len(arr)):\n        # Update the maximum product of the first and second elements\n        if arr[i] * arr[i-1] > max_product2:\n            max_product2 = arr[i] * arr[i-1]\n        # Update the maximum product of the second and third elements\n        if arr[i] * arr[i-2] > max_product1:\n            max_product1 = arr[i] * arr[i-2]\n\n    return max_product1, max_product2",
        "test": "assert max_Product([1,1,1,1]) == (1,1), \"Test 4 failed\"",
        "num_ids": 2942,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = []\n    for tuple_ in Input:\n        if tuple_[0] not in common_first:\n            common_first.append(tuple_[0])\n    return common_first",
        "test": "assert group_tuples([(1,2), (3,4), (5,6), (7,8)]) == [1, 3, 5, 7]",
        "num_ids": 2163,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n    return max_element",
        "test": "assert Find_Max([]) == None",
        "num_ids": 1721,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))\n",
        "test": "assert round_and_sum([2, 4, 6, 8, 10]) == 300.0",
        "num_ids": 1884,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize sum and counter variables\n    sum = 0\n    count = 0\n\n    # Loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Cube the current even number\n        num = i * i * i\n        # Add the cubes to the sum\n        sum += num\n        # Increment the counter\n        count += 1\n\n    return sum",
        "test": "assert cube_Sum(0) == 0, \"The cube sum of 0th even natural number is 0.\"",
        "num_ids": 1379,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for item in test_tup:\n        result += str(item)\n    return result",
        "test": "assert concatenate_tuple(tuple()) == ''",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    total = 0\n    count = 0\n\n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n\n    average = total/count\n\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1.0",
        "num_ids": 1723,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for i, element in enumerate(test_tuple):\n        if i == len(test_tuple)-1:\n            rear_elements.append(element)\n    return rear_elements",
        "test": "assert extract_rear(('abc', 123, 'xyz')) == ['xyz']",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count ",
        "test": "assert count_element_in_list([], 3) == 0",
        "num_ids": 1796,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1545,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 31,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return day + '-' + month + '-' + year\n    else:\n        return 'Invalid date format'",
        "test": "assert change_date_format('2022-01-01') == '01-01-2022'",
        "num_ids": 2579,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Calculate the gap\n    gap = n // 2\n    while gap > 0:\n        # Move the gap to the next position\n        for i in range(gap, n):\n            # Compare the current element with the elements before it\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                # Swap the elements\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        # Reduce the gap\n        gap //= 2\n    return my_list",
        "test": "assert shell_sort([1]) == [1]",
        "num_ids": 2776,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Extract the elementwise and tuples from the given two tuples\n    and_tup = tuple(bool(x & y) for x, y in zip(test_tup1, test_tup2))\n    return and_tup",
        "test": "assert and_tuples((), ()) == ()",
        "num_ids": 1631,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    determinant = (b**2) - (4*a*c)\n\n    if determinant > 0: \n        directrix = (-b + (determinant**0.5)) / (2*a)\n        return directrix\n    elif determinant == 0:\n        directrix = -b / (2*a)\n        return directrix\n    else:\n        print(\"The parabola does not have a real directrix.\")",
        "test": "assert parabola_directrix(1, 1, 0) == 0",
        "num_ids": 2594,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == True, \"Function should return True.\"",
        "num_ids": 1916,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the lengths of each half of the trapezium\n    half1 = base1 * height\n    half2 = base2 * height\n\n    # Calculate the areas of the trapezium and the areas of its two halves\n    area1 = half1 * 0.5\n    area2 = half2 * 0.5\n\n    # Calculate the trapezium's base and height\n    base = (area1 + area2) / height\n\n    # Calculate the length of the trapezium's base\n    length1 = base / 2\n\n    # Calculate the length of the trapezium's first half\n    length2 = half1 - length1\n\n    # Calculate the length of the trapezium's second half\n    length3 = half2 - length2\n\n    # Calculate the median length of the trapezium's first half\n    median1 = length2 / 2\n\n    # Calculate the median length of the trapezium's second half\n    median2 = length3 / 2\n\n    # Calculate the median length of the trapezium\n    median = (median1 + median2) / 2\n\n    return median",
        "test": "assert median_trapezium(1,2,3) == 1.5",
        "num_ids": 4834,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            print(f\"{number} is greater than {element}\")\n            return True\n    print(f\"{number} is not greater than any element in the array.\")\n    return False",
        "test": "assert check_greater([], 1) == False",
        "num_ids": 1577,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]*')\n    return pattern.match(text) is not None",
        "test": "assert text_match_one(\"aaaaaabab\") == True, \"The function should return True for text 'aaaaaabab'\"",
        "num_ids": 2245,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(12345) == 5, \"last_Digit(12345) should return 5\"",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst",
        "test": "assert neg_nos([-5, -4, -3, -2, -1]) == [-5, -4, -3, -2, -1]",
        "num_ids": 1520,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit() or char.isalpha()])",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 1227,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if test_list[i] == test_list[j][::-1]:\n                    count += 1\n    return count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 2430,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 1\n    for num in L:\n        result *= num\n    return result",
        "test": "assert multiple_to_single([1,2,3,4,5]) == 120",
        "num_ids": 1396,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Find all the adverbs in the sentence\n    matches = re.findall(r'\\b\\w*[a-zA-Z]+\\w*\\b', text)\n    \n    # Find the positions of all the adverbs\n    positions = []\n    for i, match in enumerate(matches):\n        positions.append(text.find(match))\n        \n    # Sort the positions based on their order in the sentence\n    sorted_positions = sorted(positions)\n    \n    # Print the results\n    for i, position in enumerate(sorted_positions):\n        print(f'{i+1}. {position}: \"{matches[i]}\"')",
        "test": "assert find_adverb_position(\"The sun is shining. The cat is so cute. It is always happy. The owner is nice.\") == [('nice', 13), ('nice', 16), ('nice', 26)]",
        "num_ids": 4787,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 1331,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Create an array to store the count of positive and negative numbers\n    count_arr = array('i', [0, 0])\n\n    # Loop over the array of integers\n    for num in nums:\n        # If the number is positive, increment the count for that\n        if num > 0:\n            count_arr[0] += 1\n        # Otherwise, increment the count for the other number\n        else:\n            count_arr[1] += 1\n\n    # Calculate the ration of positive numbers by dividing the count for the positive number by the total count\n    positive_ratio = count_arr[0] / (count_arr[0] + count_arr[1])\n\n    # Return the ration as a float\n    return positive_ratio",
        "test": "assert positive_count([-1, -2, -3, -4, -5]) == 0.0",
        "num_ids": 3587,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest",
        "test": "assert largest_neg([-1,2,3,4,5]) == -1",
        "num_ids": 1765,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Args:\n    test_list (list): List of tuples.\n    K (int): Number of elements to trim from each tuple.\n\n    Returns:\n    list: Trimmed tuple list.\n    \"\"\"\n    trimmed_list = []\n\n    for i in range(len(test_list)):\n        new_tuple = tuple(test_list[i][j] for j in range(len(test_list[i])) if j >= K)\n        trimmed_list.append(new_tuple)\n\n    return trimmed_list",
        "test": "assert trim_tuple([], 10) == []",
        "num_ids": 2879,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x*y, test_tup1, test_tup2))",
        "test": "assert index_multiplication((1,2,3), (4,5,6)) == (4,10,18)",
        "num_ids": 1646,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    result = {}\n    for key in count_dict:\n        if key in lst:\n            result[key] = count_dict[key]\n    return result",
        "test": "assert count_Occurrence((1,2,3,4,5), [1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 2297,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 1813,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum",
        "test": "assert cal_sum(0) == 0, \"cal_sum(0) should be 0\"",
        "num_ids": 1503,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a specified size of string to be extracted as inputs.\n    The function returns a list of string values of the specified size.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings",
        "test": "assert extract_string(['hello', 'world', 'python', 'programming'], 3) == []",
        "num_ids": 1781,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # define regular expression to match whitespaces\n    pattern = re.compile(r'\\s+')\n    \n    # remove all whitespaces using replace() method\n    return pattern.sub('', text)",
        "test": "assert remove_whitespaces('  Hello  World  ') == 'HelloWorld'",
        "num_ids": 1195,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0",
        "test": "assert loss_amount(1000,1000) == 0, \"loss_amount(1000,1000) should return 0\"",
        "num_ids": 1414,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize a variable to store the sum of even factors\n    total = 0\n    \n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the current number is even\n        if i % 2 == 0:\n            # add the even number to the total\n            total += i\n    \n    # return the total sum of even factors\n    return total",
        "test": "assert sumofFactors(2) == 2",
        "num_ids": 1957,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_z = re.compile(r'\\b[a-zA-Z]+z\\b')\n    return bool(word_z.search(text))",
        "test": "assert text_match_wordz(\"The quick brown fox jumped over the lazy doggy.\") == False, \"text_match_wordz function doesn't match the given example\"",
        "num_ids": 1603,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(monthnum2, \"is a leap year.\")\n        return True\n    else:\n        print(monthnum2, \"is not a leap year.\")\n        return False\n",
        "test": "assert check_monthnumb_number(12) == True, \"The month number 12 contains 31 days.\"",
        "num_ids": 2052,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop through each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string using slicing and join\n        stringlist[i] = ''.join(reversed(stringlist[i]))\n    return stringlist",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]",
        "num_ids": 1114,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    \n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist",
        "test": "assert Find_Min([1, 2]) == [1]",
        "num_ids": 2034,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(2,3) == 6",
        "num_ids": 1054,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?<!\\w)([A-Z])(?!\\w)')\n    result = pattern.sub(r'\\1', str1)\n    return result",
        "test": "assert remove_uppercase(\"this is a test\") == \"this is a test\"",
        "num_ids": 1286,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([]) == []",
        "num_ids": 1398,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the count of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"\") == 0",
        "num_ids": 1206,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of elements in the given list\n    \"\"\"\n    combinations = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            combinations.append(lst[i:j])\n    return combinations",
        "test": "assert combinations_list([]) == []",
        "num_ids": 3170,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray of the array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        if num < 0:\n            current_product *= num\n        else:\n            current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product",
        "test": "assert max_subarray_product([1, 2, 3, 4]) == 24, \"Test case 3 failed\"",
        "num_ids": 2205,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    else:\n        for value in dict.values():\n            if value!= dict[list(dict.keys())[0]]:\n                return False\n        return True",
        "test": "assert check_value({'a': 1, 'b': 2, 'c': 3}, 2) == False, \"Error in check_value\"",
        "num_ids": 1686,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3}",
        "num_ids": 1284,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    # Calculate the maximum product for the first k elements of the array\n    max_product_subseq = [arr[0]]\n    for i in range(1, n):\n        max_product_subseq.append(max(arr[i], max_product_subseq[-1] * arr[i]))\n        \n    # Calculate the maximum product for the entire array by taking the maximum of each increasing subsequence\n    max_product_entire = max(max_product_subseq)\n    \n    return max_product_entire",
        "test": "assert max_product([-2, 0, -1]) == 0, \"Test Case 3 failed\"",
        "num_ids": 2777,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Get the length of the input tuple\n    length = len(test_tup)\n    # Initialize a variable to store the sum of the neighboring elements\n    sum_neighb = 0\n    # Loop through the tuple and add the neighboring elements to the sum\n    for i in range(length-1):\n        sum_neighb += test_tup[i+1]\n    # Return the final sum of the pairwise additions\n    return sum_neighb",
        "test": "assert add_pairwise(()) == 0, \"add_pairwise() failed for the test case ()\"",
        "num_ids": 1825,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product",
        "test": "assert find_remainder([7, 8, 9], 12) == 0, \"find_remainder([7, 8, 9], 12)!= 0\"",
        "num_ids": 1620,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def check_Consecutive(l):\n    # Initialize variables\n    consecutive = False\n    current = l[0]\n\n    # Iterate through the list\n    for num in l:\n        # Check if the current number is the next consecutive number\n        if num == current + 1:\n            consecutive = True\n            current = num\n        # If the current number is not consecutive, reset the consecutive flag and set the current number to the next number\n        else:\n            consecutive = False\n            current = num\n\n    # Return the result of the function\n    return consecutive",
        "test": "assert check_Consecutive([1, 3, 5, 7, 9]) == False",
        "num_ids": 1849,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set from the first list to get unique elements\n    unique_elements1 = set(test_list1)\n    # Create another set from the second list to get unique elements\n    unique_elements2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = unique_elements1.intersection(unique_elements2)\n    # Convert the intersection set to a list and return it\n    return list(intersection)",
        "test": "assert tuple_intersection([(1,2,3),(4,5,6),(7,8,9)], [(1,2,3),(5,6,7)]) == [(1,2,3)]",
        "num_ids": 2085,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str",
        "test": "assert replace_char('', 'h', 'H') == ''",
        "num_ids": 1322,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Sort a dictionary by value.\n\n    Args:\n        dict1 (dict): A dictionary to be sorted by value.\n\n    Returns:\n        dict: The sorted dictionary.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "test": "assert sort_counter({'a': 1, 'b': 3, 'c': 2}) == {'b': 3, 'a': 1, 'c': 2}",
        "num_ids": 1649,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    # calculate the sum of the largest and smallest value\n    result = nums[0] + nums[1]\n    return result",
        "test": "assert big_sum([1, 2]) == 3",
        "num_ids": 1896,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower('Hello World!') == 'hello world!', 'The function should convert the given string to lower case.'",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)",
        "test": "assert remove_lowercase('Hello World') == 'Hello World'",
        "num_ids": 1502,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 32,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Check if the input is a valid integer\n    if type(n)!= int:\n        print(\"Error: Please enter a valid integer.\")\n        return\n    \n    # Convert the number to a string\n    num = str(n)\n    \n    # Get the first digit of the string\n    first_digit = num[0]\n    \n    # Return the first digit as an integer\n    return int(first_digit)",
        "test": "assert first_Digit(0) == 0, \"first_Digit failed for 0\"",
        "num_ids": 1352,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for i in lst:\n        if i % 2!= 0:\n            result.append(i)\n    return result",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1486,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    return sum_of_cubes - sum_of_numbers",
        "test": "assert difference(1) == 0, \"Expected difference(1) == 0, but got {}\".format(difference(1))",
        "num_ids": 1660,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def find_Odd_Pair(A, N):\n    # Create a hash table to store the count of odd xor values\n    odd_xor = {}\n    for i in range(N):\n        # Calculate the xor of the current element and all other elements in the array\n        xor = sum(A[j] for j in range(N) if j!= i)\n        # If the xor value is odd, increment the count for that value in the hash table\n        if xor % 2 == 1:\n            odd_xor[xor] = odd_xor.get(xor, 0) + 1\n\n    # Return the count of odd xor values found\n    return sum(odd_xor.values())",
        "test": "assert find_Odd_Pair([1,2,3,4,5], 0) == 0, \"The result is incorrect for the input [1,2,3,4,5], 0\"",
        "num_ids": 2088,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()",
        "test": "assert toggle_string('') == ''",
        "num_ids": 1134,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Get the length of the numbers\n    num_length = len(str(n1))\n\n    # Initialize the sum variable\n    digit_diff_sum = 0\n\n    # Loop through each digit of the numbers\n    for i in range(num_length):\n        # Get the digits of the numbers\n        num_digit1 = int(str(n1)[i])\n        num_digit2 = int(str(n2)[i])\n\n        # Calculate the per-digit difference between the digits\n        digit_diff = abs(num_digit1 - num_digit2)\n\n        # Add the per-digit difference to the sum\n        digit_diff_sum += digit_diff\n\n    # Return the sum of the per-digit differences\n    return digit_diff_sum",
        "test": "assert digit_distance_nums(12345, 12345) == 0",
        "num_ids": 2726,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if i > 0 and curr_sum < 0:\n            curr_sum = 0\n    return max_sum",
        "test": "assert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 6",
        "num_ids": 2241,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Convert tuples to sets to remove duplicates and sort them\n    tup1_set = set(sorted(test_tup1))\n    tup2_set = set(sorted(test_tup2))\n\n    # Find the union of the two sets and convert it back to a sorted list\n    union_list = sorted(tup1_set.union(tup2_set))\n\n    return union_list",
        "test": "assert union_elements((1, 3, 5), (2, 4, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 2137,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length",
        "test": "assert Find_Max_Length([]) == 0, \"Incorrect output for list []\"",
        "num_ids": 2516,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values(\"12345 is not a valid number\") == []",
        "num_ids": 1311,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def count_Pairs(arr, n):\n    # Initialize count to zero\n    count = 0\n\n    # Iterate through all possible pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the sum of the two elements is not equal to the current element\n            if arr[i] + arr[j]!= arr[j]:\n                count += 1\n\n    # Return the count of possible pairs\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10",
        "num_ids": 1644,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 838,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then convert each character to an integer\n    digits = [int(digit) for digit in str(n)]\n    # Initialize a variable to store the sum of the digits\n    total = 0\n    # Loop through each digit and add it to the total\n    for digit in digits:\n        total += digit\n    # Return the total sum of the digits\n    return total",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 1438,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([5,4,3,2,1]) == False",
        "num_ids": 1812,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 24,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1",
        "test": "assert sort_sublists([[1, 2], ['a', 'b']]) == [[1, 2], ['a', 'b']]",
        "num_ids": 2295,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "test": "assert two_unique_nums([1, 2, 3, 2, 1, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 2368,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "test": "assert unique_product([1, 2, 3, 2, 1]) == 6, \"The product of the unique numbers in the list [1, 2, 3, 2, 1] is incorrect.\"",
        "num_ids": 1640,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to calculate surface area of a cylinder\n    surface_area = 2*3.14159*(r**2 + h**2)\n    return surface_area",
        "test": "assert surfacearea_cylinder(1, 2) == 31.4159",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Sort the two lists\n    A.sort()\n    B.sort()\n\n    # Initialize two pointers\n    i = j = 0\n\n    # Check if the first list is a sublist of the second list\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        elif A[i] < B[j]:\n            i += 1\n        else:\n            j += 1\n\n    # If the two pointers meet, it means that A is a sublist of B\n    if j == len(B):\n        return True\n    else:\n        return False",
        "test": "assert is_Sub_Array([], []) == True",
        "num_ids": 2158,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Convert the given number to string\n    num_str = str(n)\n    \n    # Get the last digit of the number\n    last_digit = num_str[-1]\n    \n    # Convert the last digit to int\n    last_digit_int = int(last_digit)\n    \n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(2,last_digit_int+1):\n        factorial *= i\n    \n    # Return the last digit of the factorial\n    return last_digit_int",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 1602,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n    list1 (list): The first list to be interleaved.\n    list2 (list): The second list to be interleaved.\n    list3 (list): The third list to be interleaved.\n\n    Returns:\n    list: A flat list with the elements of list1, list2, and list3 interleaved.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 1891,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set(test_tup1) - set(test_tup2)\n    return list(dissimilar_set)",
        "test": "assert find_dissimilar((1,2,3), (1,2,3)) == [] # test case 1",
        "num_ids": 2018,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.extend(even_fnc(i))\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return new_tuple\n",
        "test": "assert even_ele((1, 2, 3, 4, 5, (6, 7, 8, 9), 10), lambda x: x) == (3, 5, 7, 9)",
        "num_ids": 2348,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the height of the pyramid\n    h = s / b\n    \n    # Calculate the surface area of the base\n    base_area = 2 * b * h\n    \n    # Calculate the surface area of the top part of the pyramid\n    top_area = (4 * b ** 2 * h) / 3\n    \n    # Add the two areas and return the result\n    return base_area + top_area",
        "test": "assert surface_Area(2,3)==14, \"The surface area of a square pyramid should be 14.\"",
        "num_ids": 1392,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 1292,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1775,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w*[aeiou][^aeiou]*ly\\b'\n    matches = re.findall(pattern, text)\n    positions = []\n    for match in matches:\n        positions.append((match.start(), match.end()))\n    return positions",
        "test": "assert find_adverbs('The quick brown fox is a quick brown fox.') == []",
        "num_ids": 2390,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes in a list of items and an integer n as input, and returns a list of the n most expensive items in the dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 2512,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    rest_of_list = l[n:]\n    return first_part + rest_of_list",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1310,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 1122,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num",
        "test": "assert big_diff([0, 0, 0]) == 0",
        "num_ids": 1756,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i*i == i:\n            squares.append(i)\n    return squares",
        "test": "assert perfect_squares(2, 2) == []",
        "num_ids": 1584,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "test": "assert polar_rect(0,0) == (0.0, 0.0)",
        "num_ids": 1731,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def swap_List(newList):\n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1, 2]) == [2, 1] # correct output",
        "num_ids": 1423,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    elif k < 0 or k > n:\n        return 0\n\n    res = binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n    return res",
        "test": "assert binomial_Coeff(1,1) == 1",
        "num_ids": 1853,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 29,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', r'\\1.\\2.\\3.\\4', ip)\n    return ip",
        "test": "assert removezero_ip(\"192.168.1.1\") == \"192.168.1.1\"",
        "num_ids": 2300,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            elif odd_num is None:\n                odd_num = num\n        else:\n            if even_num is None:\n                even_num = num\n            elif odd_num is None:\n                odd_num = num\n    \n    if even_num is None or odd_num is None:\n        return None\n    \n    return odd_num - even_num",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 2317,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def min_Swaps(str1,str2):\n    str1 = list(str1)\n    str2 = list(str2)\n    n = len(str1)\n\n    # initialize all counts to zero\n    count = [[0]*(n+1) for _ in range(n+1)]\n\n    # fill in the count matrix\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str1[i-1] == '0' and str2[j-1] == '1':\n                count[i][j] = count[i-1][j] + 1\n            elif str1[i-1] == '1' and str2[j-1] == '0':\n                count[i][j] = min(count[i-1][j], count[i][j-1]) + 1\n            else:\n                count[i][j] = count[i-1][j-1]\n\n    return count[n][n]",
        "test": "assert min_Swaps(\"1010101010\", \"1010101010\") == 0, \"Incorrect result for input '1010101010' and '1010101010'.\"",
        "num_ids": 3956,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if not isinstance(tuple_list, tuple):\n        sys.exit(\"Error: Input must be a tuple.\")\n    else:\n        size = 0\n        for item in tuple_list:\n            size += sys.getsizeof(item)\n        return size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 1400,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    while i < len(arr1):\n        return arr1[i]\n\n    while j < len(arr2):\n        return arr2[j]",
        "test": "assert find_kth([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 3) == 4, \"Error: find_kth([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 3) should return 4, but it returns {}\".format(find_kth([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 3))",
        "num_ids": 3657,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize variables to keep track of the number's digits and the sum of the digits raised to the power of the number of digits\n    digits = []\n    sum_of_digits = 0\n    \n    # Convert the given number to a string and store its digits in a list\n    for digit in str(number):\n        digits.append(int(digit))\n    \n    # Calculate the sum of the digits raised to the power of the number of digits\n    for digit in digits:\n        sum_of_digits += digit ** len(digits)\n    \n    # Check if the sum of the digits raised to the power of the number of digits is equal to the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(25) == False, \"The number 25 is an Armstrong number.\"",
        "num_ids": 2004,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_num = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_num += i\n        count += 1\n    average = sum_num/count\n    return sum_num, average",
        "test": "assert sum_average(5) == (15, 3)",
        "num_ids": 1574,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a positive integer as input and returns True if it is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(0) == True",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] in str1[j:]:\n                return str1[i]",
        "test": "assert first_repeated_char(\"\") == None, \"The empty string should have no repeated character\"",
        "num_ids": 1855,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(2, n+1):\n        if all(i%j!= 0 for j in range(2, int(i**0.5)+1)):\n            ludic_numbers.append(i)\n    return ludic_numbers",
        "test": "assert get_ludic(0) == []",
        "num_ids": 4460,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)",
        "test": "assert reverse_words(\"  \") == \"\"",
        "num_ids": 1150,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 1458,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "test": "assert radian_degree(0) == 0.0",
        "num_ids": 1111,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"hello world\", r\"hello\") == (\"hello\", 0, 5)",
        "num_ids": 2481,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a Python function to find the nth Bell number.\n    \"\"\"\n\n    # Initialize the first two bell numbers\n    bell_1 = 1\n    bell_2 = 1\n\n    # Loop through the rest of the bell numbers\n    for i in range(2, n+1):\n        # Calculate the next bell number\n        next_bell = bell_1 + bell_2\n\n        # Update the values of the previous bell numbers\n        bell_1 = bell_2\n        bell_2 = next_bell\n\n    # Return the nth bell number\n    return bell_1",
        "test": "assert bell_Number(1) == 1, \"bell_Number(1) == 1\"",
        "num_ids": 1635,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    if L >= n:\n        return list1\n    else:\n        result = []\n        for i in range(n):\n            if i!= L-1:\n                result.append(list1[i])\n        return result",
        "test": "assert remove_kth_element([], 0) == []",
        "num_ids": 2497,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        test_list[i].sort()\n    max_num = test_list[N-1][-1]\n    return max_num",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 9",
        "num_ids": 2768,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]",
        "num_ids": 1928,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if type(test_list[i]) is tuple:\n            for j in range(len(test_list[i])):\n                cum_sum += test_list[i][j]\n        else:\n            cum_sum += test_list[i]\n    return cum_sum",
        "test": "assert cummulative_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1842,
        "indeed": true
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        average = total / len(tup)\n        result.append(average)\n    return result",
        "test": "assert average_tuple([]) == []",
        "num_ids": 1651,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)",
        "test": "assert tuple_modulo((1, 2, 3), (4, 5, 6))!= (1, 2, 3, 4)",
        "num_ids": 2061,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # number of jumps required to reach (d,0)\n    jumps = 0\n    # starting position of the ball\n    start_pos = (0, 0)\n    # moving left or right to reach the ball\n    dir = 1\n\n    # loop through the given number of steps\n    for i in range(steps):\n        # check if we need to move left or right\n        if start_pos[0] == d:\n            # if we need to move left, move right\n            dir = -1\n        elif start_pos[0] == 0:\n            # if we need to move right, move left\n            dir = 1\n\n        # move the ball one step in the current direction\n        start_pos = (start_pos[0] + dir, start_pos[1])\n\n        # check if we reached the ball at (d,0) from origin\n        if start_pos[0] == d and start_pos[1] == 0:\n            return jumps + 1\n\n        # increment the number of jumps if we reached the ball from a different position\n        jumps += 1\n\n    # if we reach here, then we have not found the ball at (d,0) from origin\n    return jumps + 1",
        "test": "assert min_Jumps(5, 3) == 3",
        "num_ids": 3259,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result",
        "test": "assert div_list([1,2,3], [4,5,6]) == [0.25, 0.4, 0.5]",
        "num_ids": 1633,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    letters = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return ''.join(nums) + ''.join(letters)",
        "test": "assert move_num(\"abc\") == \"abc\"",
        "num_ids": 1757,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    dp = [1] * n\n    max_length = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                max_length = max(max_length, dp[i])\n\n    return max_length\n",
        "test": "assert largest_subset([1, 5, 7, 9]) == 2",
        "num_ids": 3401,
        "indeed": true
    },
    {
        "number": 622,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    median = None\n    if n % 2 == 0:\n        median = (arr1[n//2-1] + arr1[n//2] + arr2[n//2-1] + arr2[n//2]) / 4\n    else:\n        median = arr1[n//2]\n    return median",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 5) == 5",
        "num_ids": 2675,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1,2,3], 2) == [1, 4, 9]",
        "num_ids": 1687,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper('Hello') == 'HELLO'",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 1551,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of a triangle with sides of length 1\n    s = 1/2 * r * r\n    # Calculate the area of the biggest triangle that can be inscribed in a semicircle with radius r\n    area = 3 * r * r\n    # Calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r\n    area_min = 0.5 * r * r\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area_max = 0.5 * area_min * 2\n    # Calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r\n    area_max_min = 0.5 * r * r\n    # Compare the areas of the biggest triangle and the smallest triangle and the area of the smallest triangle and the area of the largest triangle\n    if area < area_min and area > area_max:\n        # If the biggest triangle is the largest triangle that can be inscribed in the semicircle with radius r, return the area of the biggest triangle\n        return area\n    elif area_min < area < area_max_min:\n        # If the smallest triangle is the smallest triangle that can be inscribed in the semicircle with radius r, return the area of the smallest triangle\n        return area_min\n    else:\n        # If the area of the largest triangle is less than the area of the smallest triangle, return the area of the largest triangle\n        return area_max",
        "test": "assert triangle_area(4) == 8, \"The area of the largest triangle that can be inscribed in a semicircle with radius 4 should be 8.\"",
        "num_ids": 3452,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if i+1 not in array:\n            return i+1",
        "test": "assert find_First_Missing([6,7,8,9,10]) == 1",
        "num_ids": 2281,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 897,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as an argument and returns a new list with only the even numbers from the original list.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 1371,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \n    Args:\n        ele (tuple): a coordinate tuple (x, y)\n        sub (list): a list of coordinate tuples (x, y)\n    \n    Returns:\n        list: a list of coordinate tuples (x, y)\n    \n    Raises:\n        ValueError: if the coordinate tuple is not a valid coordinate\n    \n    Examples:\n        >>> adjac((0, 0))\n        [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        >>> adjac((0, 0), [(0, 1), (1, 0), (0, -1), (-1, 0)])\n        [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        >>> adjac((10, 5))\n        ValueError: (10, 5) is not a valid coordinate\n    '''\n    x, y = ele\n    if sub is None:\n        sub = [(x+dx, y+dy) for dx in [-1, 0, 1] for dy in [-1, 0, 1] if not (dx == 0 and dy == 0)]\n    \n    if not (0 <= x < 10 and 0 <= y < 10):\n        raise ValueError(f\"{ele} is not a valid coordinate\")\n    \n    return sub",
        "test": "assert adjac((0, 0), [(0, 1), (0, -1), (1, 0), (-1, 0)]) == [(0, 1), (0, -1), (1, 0), (-1, 0)]",
        "num_ids": 4040,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    return new_text",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 1431,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers and moves all zeroes to the end of the list.\n    \"\"\"\n    # Create a new list to store non-zero elements\n    non_zero_list = []\n    \n    # Iterate through the list and add non-zero elements to the new list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n    \n    # Add all zeroes to the end of the new list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            non_zero_list.append(0)\n    \n    # Return the new list with all zeroes moved to the end\n    return non_zero_list",
        "test": "assert move_zero([1,2,3,4]) == [1,2,3,4]",
        "num_ids": 3258,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
        "test": "assert pair_xor_Sum([0,0,0,0,0],5) == 0, \"Incorrect output for [0,0,0,0,0], 5\"",
        "num_ids": 1766,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given list to a min heap\n    heap = [x for x in iterable]\n    hq.heapify(heap)\n\n    # Extract and return the minimum element from the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list",
        "test": "assert heap_sort([]) == []",
        "num_ids": 2163,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Calculate the profit and loss\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    # Check whether the profit and loss are equal\n    if profit == loss:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(500, 500) == True, \"Test case 3 failed\"",
        "num_ids": 2027,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the dew point temperature\n    dp = (v * 1.15 * (t + 273.15)) / (math.pow(t + 273.15, 2) + 17.625 * (t + 273.15))\n\n    # Calculate the wind chill index\n    wci = 13.12 + (0.6215 * dp) - (11.37 * math.exp((dp - 25) / (23.4))) + (0.3965 * math.exp((dp - 14.2) / (17.27)))\n\n    # Round the wind chill index to the nearest integer\n    wci = int(math.ceil(wci))\n\n    # Return the wind chill index\n    return wci",
        "test": "assert wind_chill(10,15) == 10",
        "num_ids": 3391,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if not name[0].islower():\n            result += len(name)\n    return result",
        "test": "assert sample_nam(['John', 'jane', 'Joe', 'Mary', 'Sarah']) == 16",
        "num_ids": 2083,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    result = re.sub(pattern, r'\\1', items)\n    return result",
        "test": "assert remove_parenthesis(\"()\") == \"\"",
        "num_ids": 1359,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (n + 1) // 2",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 1676,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regex to find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Iterate over each word and check if it contains 'z' except at the start and end of the word\n    for word in words:\n        if word[0]!= 'z' and word[-1]!= 'z':\n            return True\n    \n    # If we reach here, no word contained 'z' except at the start and end of the word\n    return False",
        "test": "assert text_match_wordz_middle(\"hello zzz\") == True, \"Expected True\"",
        "num_ids": 1908,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from index 0 to k-1\n    input = input[::-1]\n\n    # reverse the array from k to the end\n    for i in range(k, len(input)):\n        input[i], input[k] = input[k], input[i]\n\n    return input",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 5) == [5,4,3,2,1]",
        "num_ids": 2588,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary and add the items of test_dict\n    new_dict = test_dict.copy()\n    # create a new tuple with the items of test_tup and the new dictionary\n    new_tup = test_tup + (new_dict,)\n    # return the new tuple\n    return new_tup",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 4, 'b': 5, 'c': 6}) == (1, 2, 3, {'a': 4, 'b': 5, 'c': 6})",
        "num_ids": 1363,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n\n    # Initialize variables\n    max_path_avg = 0\n    max_path_len = 0\n    max_path = [[0] * N for _ in range(N)]\n\n    # Initialize base case\n    max_path[0][0] = cost[0][0]\n    max_path_avg = cost[0][0]\n    max_path_len = 1\n\n    # Iterate through all cells\n    for i in range(1, N):\n        for j in range(1, N):\n            # Calculate the cost of moving right\n            right_cost = cost[i][j] + max(max_path[i - 1][j], max_path[i][j - 1])\n\n            # Calculate the cost of moving down\n            down_cost = cost[i][j] + max(max_path[i - 1][j - 1], max_path[i - 1][j])\n\n            # Update the maximum average and path length\n            if right_cost > down_cost:\n                max_path[i][j] = right_cost\n                max_path_avg = (max_path_avg * max_path_len + right_cost) / (max_path_len + 1)\n                max_path_len += 1\n            else:\n                max_path[i][j] = down_cost\n                max_path_avg = (max_path_avg * max_path_len + down_cost) / (max_path_len + 1)\n                max_path_len += 1\n\n    return max_path_avg",
        "test": "assert maxAverageOfPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 159",
        "num_ids": 5948,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students",
        "test": "assert filter_data({'Alice':(1.75, 65.0), 'Bob':(1.80, 70.0), 'Charlie':(1.70, 60.0)}, 1.60, 50.0) == {'Alice':(1.75, 65.0)}",
        "num_ids": 2657,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 5",
        "num_ids": 2283,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        digit = base % 10\n        base_sum += digit ** power\n        base //= 10\n        power -= 1\n    return base_sum",
        "test": "assert power_base_sum(3, 2) == 9 # test case 1",
        "num_ids": 1914,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define the regular expression pattern for matching quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # Use the re.findall() function to extract all the matches of the pattern from the input text\n    matches = re.findall(pattern, text)\n\n    # Create a list to store the extracted values\n    result = []\n\n    # Loop through each match and append the value to the result list\n    for match in matches:\n        result.append(match.strip())\n\n    # Return the list of extracted values\n    return result",
        "test": "assert extract_quotation(\"I never said goodbye.\") == []",
        "num_ids": 1381,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    length = len(test_tup)\n    new_tup = ()\n    for i in range(length-1):\n        new_tup += (test_tup[i] * test_tup[i+1],)\n    new_tup += (test_tup[-1] * test_tup[-1],)\n    return new_tup",
        "test": "assert multiply_elements((1,0,0,0,0)) == (0, 0, 0, 0, 0)",
        "num_ids": 2527,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5, 7, 9]",
        "num_ids": 1511,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 21,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n        else:\n            continue\n    return result",
        "test": "assert consecutive_duplicates([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1942,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area",
        "test": "assert lateralsurface_cone(1,2) == 6.283185307179586",
        "num_ids": 1712,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expressions to match spaces, commas, and dots\n    space_pattern = re.compile(r'\\s+')\n    comma_pattern = re.compile(r',')\n    dot_pattern = re.compile(r'\\.')\n    # Replace spaces, commas, and dots with colons using a group\n    return space_pattern.sub(':', comma_pattern.sub(':', dot_pattern.sub(':', text)))",
        "test": "assert replace_specialchar('abc,def,ghi') == 'abc:def:ghi'",
        "num_ids": 1168,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    while i < n:\n        if A[i] == x:\n            return i\n        elif A[i] < x:\n            i += 1\n        else:\n            n = i\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2, \"The output of find_first_occurrence([1, 2, 3, 4, 5], 3) should be 2.\"",
        "num_ids": 2549,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Calculate sum of products of all subarrays of length 1 to n-1\n    prod_sum = sum(arr[i]*arr[j]*arr[k]*arr[l] for i in range(n) for j in range(i+1, n) for k in range(j+1, n) for l in range(k+1, n))\n    return prod_sum",
        "test": "assert sum_Of_Subarray_Prod([]) == 0, \"Empty list should have sum of products of subarrays is zero.\"",
        "num_ids": 3243,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Finding the middle bit of the number\n    mid_bit = n & ((1 << 1) - 1)\n    \n    # Toggling the bits except the first and last bits\n    n ^= mid_bit\n    \n    return n",
        "test": "assert set_middle_bits(1) == 0",
        "num_ids": 2099,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 21,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    if a[index] == x:\n        return index\n    if a[index] < x:\n        return index + 1\n    else:\n        return index",
        "test": "assert left_insertion([1, 3, 4, 7, 9], 1) == 0",
        "num_ids": 2083,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"python\") == False",
        "num_ids": 1294,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 1493,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math\n\ndef find_Index(n):\n    def is_valid(triangular_num, n):\n        if n == 1:\n            return triangular_num == 1\n        triangular_num_str = str(triangular_num)\n        for digit in triangular_num_str:\n            if int(digit) > n:\n                return False\n        return True\n\n    def smallest_triangular_num(n):\n        i = 1\n        triangular_num = i\n        while not is_valid(triangular_num, n):\n            triangular_num += i\n            i += 1\n        return triangular_num\n\n    smallest_triangular_num_with_n_digits = smallest_triangular_num(n)\n    return smallest_triangular_num_with_n_digits",
        "test": "assert find_Index(1) == 1",
        "num_ids": 2429,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    dictionary = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dictionary[key] = value\n    return dictionary",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 1968,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are same and False otherwise.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[-1]",
        "test": "assert all_Characters_Same('hello world') == False, \"All characters are same\"",
        "num_ids": 1379,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side ** 2",
        "test": "assert area_tetrahedron(1) == math.sqrt(3)",
        "num_ids": 1699,
        "indeed": true
    },
    {
        "number": 743,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # If m is more than n, do nothing\n    if m > n:\n        return list\n    \n    # If m is negative, rotate to the left\n    if m < 0:\n        m = m % n\n        list = list[-m:] + list[:-m]\n    \n    # If m is zero or a positive number, rotate to the right\n    list = list[m:] + list[:m]\n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 2730,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3, 'abc', 5)) == False",
        "num_ids": 1320,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digit(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit % 9!= 0:\n                return False\n        return True\n    \n    return list(filter(is_divisible_by_digit, range(startnum, endnum+1)))",
        "test": "assert divisible_by_digits(98765, 12345) == []",
        "num_ids": 4008,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area\n",
        "test": "assert sector_area(1, 360) == 3.141592653589793",
        "num_ids": 2187,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # To store the length of longest common subsequence \n    # for all subsequences of three strings \n    dp = [[0 for i in range(len(Y)+1)] for j in range(len(X)+1)] \n\n    # Base cases \n    for i in range(len(X)+1): \n        dp[i][0] = 0\n    for j in range(len(Y)+1): \n        dp[0][j] = 0\n\n    # Fill dp table using dynamic programming \n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            if X[i-1] == Y[j-1]: \n                dp[i][j] = dp[i-1][j-1] + 1\n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n\n    # To store the final result \n    lcs = \"\" \n\n    # Backtracking to find the LCS \n    i = len(X) \n    j = len(Y) \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs = X[i-1] + lcs \n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]: \n            i -= 1\n        else: \n            j -= 1\n\n    return lcs ",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"DTACB\") == \"GTAB\"",
        "num_ids": 5227,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r\"\\b[A-Z][a-z]*\\b\"\n    words = re.findall(pattern, str1)\n    new_str = \" \".join(words)\n    return new_str",
        "test": "assert capital_words_spaces(\"Hello World\") == \"Hello World\"",
        "num_ids": 2136,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(num) for num in nums_str]\n    nums.sort()\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str",
        "test": "assert sort_numeric_strings([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\"]",
        "num_ids": 1754,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "test": "assert add_tuple([], ()) == []",
        "num_ids": 1648,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array as input and returns True if the array represents a min heap, and False otherwise.\n    '''\n    if len(arr) == 0:\n        return True\n    return check_min_heap_helper(arr, len(arr) - 1)",
        "test": "assert check_min_heap_helper([4,2,5,1,3], 1) == False",
        "num_ids": 3000,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = 1\n        k = 1\n        l = 2\n\n        while l <= n:\n            j = j + k\n            k = j - k\n            l = l + 1\n\n        return j",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 3200,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    \"\"\"\n    # Sorting the list based on the first element\n    test_list.sort(key=lambda x: x[0])\n    # Initializing minimum count and minimum element\n    min_count = float('inf')\n    min_element = None\n    # Looping through the list\n    for i in range(len(test_list)):\n        # If current element count is smaller than minimum count or equal to minimum count but current element is smaller, updating minimum count and minimum element\n        if test_list[i][1] < min_count or (test_list[i][1] == min_count and test_list[i][0] < min_element):\n            min_count = test_list[i][1]\n            min_element = test_list[i][0]\n        # If count of current element is equal to minimum count, updating minimum element if current element is smaller\n        elif test_list[i][1] == min_count and test_list[i][0] < min_element:\n            min_element = test_list[i][0]\n    # Returning the minimum count and minimum element\n    return min_count, min_element",
        "test": "assert min_k([(1, 5), (2, 2), (3, 4), (4, 6), (5, 1)], 3) == (1, 5)",
        "num_ids": 3537,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in common:\n            common.append(l1[i])\n    return common",
        "test": "assert extract_index_list([1, 2, 3], [3, 4, 5], [2, 4, 6]) == []",
        "num_ids": 2871,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest",
        "test": "assert second_smallest([10, 20, 30, 40, 50]) == 20",
        "num_ids": 1783,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 21,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a(b*)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one('ababab') == True",
        "num_ids": 3175,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] or test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 1797,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # convert lists to tuples and count occurences\n    counts = {}\n    for i in lst:\n        if isinstance(i, list):\n            i = tuple(i)\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return counts",
        "test": "assert unique_sublists([1,2,3]) == {1: 1, 2: 1, 3: 1}",
        "num_ids": 3161,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        decimal_part = num - int(num)\n        if decimal_part < 0.01 and decimal_part > -0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "test": "assert is_decimal(\"123.456\") == False",
        "num_ids": 2429,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique = set(arr)\n    return len(unique) == 1",
        "test": "assert unique_Element([1, 2, 2, 3, 4, 5]) == False",
        "num_ids": 1605,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 30,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(13) == False, \"Should return False for month 13\"",
        "num_ids": 2186,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = abs(arr[-1] - arr[0])\n    for i in range(1, n-1):\n        diff = abs(arr[-1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([5, 5, 5, 5, 5], 5) == 0",
        "num_ids": 2594,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr('') == 0, \"Expected 0, got {}\".format(number_ctr(''))",
        "num_ids": 1283,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    polite_numbers = []\n    # we start with 0 and 1 as first two polite numbers\n    polite_numbers.append(0)\n    polite_numbers.append(1)\n    # we use loop to generate all the polite numbers from 2nd to nth polite number\n    for i in range(2, n+1):\n        # we calculate the sum of all previous polite numbers\n        current_polite = sum(polite_numbers)\n        # we check if the current number is a polite number or not\n        if current_polite % 2 == 0:\n            polite_numbers.append(current_polite)\n        else:\n            # if current number is odd, we add one to the sum\n            current_polite += 1\n            polite_numbers.append(current_polite)\n    # we return the nth polite number\n    return polite_numbers[n]",
        "test": "assert is_polite(1) == 1, \"1st polite number is 1\"",
        "num_ids": 2830,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result",
        "test": "assert pair_wise([]) == []",
        "num_ids": 1679,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1,2,3,4,5], 16) == 0, \"get_pairs_count([1,2,3,4,5], 16) should return 0\"",
        "num_ids": 2388,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list",
        "test": "assert Diff([],[]) == []",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum",
        "test": "assert odd_num_sum(2) == 1",
        "num_ids": 1357,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "test": "assert check_expression(\"a+b*c\") == True, \"Invalid expression\"",
        "num_ids": 1768,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the given string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the words without k length\n    new_words = []\n    \n    # Loop through each word in the list of words\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # Append the word to the new_words list\n            new_words.append(word)\n    \n    # Join the new_words list into a string and return it\n    return \" \".join(new_words)",
        "test": "assert remove_length('', 4) == ''",
        "num_ids": 1626,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    else:\n        for match in matches:\n            index = text.find(match)\n            return (match, index)",
        "test": "assert occurance_substring(\"Hello world\", r\"\\b(goodbye)\\b\") == None",
        "num_ids": 1602,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if not any(num % 2 == 1 for num in nums[i:]):\n                return False\n\n    return True",
        "test": "assert odd_position([1, 3, 5, 7, 2, 4, 6, 8]) == False",
        "num_ids": 1805,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count",
        "test": "assert count_vowels(\"\") == 0",
        "num_ids": 1543,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # Calculate the sum of unique elements\n    total_sum = sum(unique_elements)\n    # Return the total sum of unique elements\n    return total_sum",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 2628,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 2133,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        if sublist not in counts:\n            counts[sublist] = 1\n        else:\n            counts[sublist] += 1\n    return counts",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2672,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def find_subsets(test_list, i, target_sum, current_sum):\n        if current_sum == target_sum:\n            result.append(tuple(sorted(test_list[i])))\n            return\n        if current_sum > target_sum:\n            return\n\n        if i == len(test_list):\n            return\n\n        find_subsets(test_list, i + 1, target_sum, current_sum + test_list[i])\n        find_subsets(test_list, i + 1, target_sum, current_sum)\n\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            current_sum = test_list[i] + test_list[j]\n            find_subsets(test_list, i, current_sum, 0)\n\n    return result",
        "test": "assert find_combinations([]) == []",
        "num_ids": 4158,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert count_divisors(24) == True, \"count of divisors should be even\"",
        "num_ids": 2142,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def odd_length_sum(arr):\n    # Initialize variables\n    n = len(arr)\n    subarray_sum = 0\n\n    # Loop through all possible subarrays\n    for i in range(n):\n        for j in range(i, n):\n            # If the length of the subarray is odd, add its sum to the running total\n            if j - i + 1 % 2 == 1:\n                subarray_sum += sum(arr[i:j+1])\n\n    return subarray_sum",
        "test": "assert odd_length_sum([]) == 0",
        "num_ids": 2276,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    del_max = max_val - min_val\n    h = 0\n    s = 0\n    v = max_val / 255.0\n    if del_max == 0:\n        h = 0\n        s = 0\n    else:\n        if max_val == r:\n            h = (g - b) / del_max\n        elif max_val == g:\n            h = 2 + (b - r) / del_max\n        else:\n            h = 4 + (r - g) / del_max\n        h = h / 6.0\n        if h < 0:\n            h = h + 1\n        s = del_max / max_val\n    return h, s, v",
        "test": "assert rgb_to_hsv(255,0,0) == (0.0, 1.0, 1.0)",
        "num_ids": 4535,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_num += i\n        else:\n            odd_num += i\n    return even_num * odd_num",
        "test": "assert mul_even_odd([]) == 0",
        "num_ids": 2496,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_list = [int(i) for i in test_str]\n    return tuple(int_list)",
        "test": "assert tuple_str_int(('1', '2', '3')) == (1, 2, 3), \"The tuple_str_int function is not working properly for the input (1, 2, 3).\"",
        "num_ids": 1814,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Initialize variables\n    index = bisect.bisect_left(a, x)\n    prev_index = index - 1\n    \n    # Check if x is already present in the list\n    if index!= len(a) and a[index] == x:\n        return index\n    \n    # Find the right insertion point\n    while prev_index >= 0 and a[prev_index] > x:\n        prev_index -= 1\n    \n    return prev_index + 1",
        "test": "assert right_insertion([1, 3, 5, 7], 8) == 4",
        "num_ids": 2086,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a\\w{3}b\"\n    return re.search(pattern, text) is not None",
        "test": "assert text_match_three(\"abcde\") == False, \"The function matched an unexpected output.\"",
        "num_ids": 1187,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Combine the two lists into a single list\n    combined_list = test_list + [test_str]\n    # Convert the combined list to a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple",
        "test": "assert new_tuple(['apple', 'banana', 'cherry'], 'orange') == ('apple', 'banana', 'cherry', 'orange')",
        "num_ids": 1521,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums:\n            if num % 2 == 0:\n                count += 1\n        if count % 2 == 1:\n            return False\n    return True",
        "test": "assert even_position([1,3,5,7,9,2,4,6,8,10]) == False",
        "num_ids": 1749,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while any(isinstance(x, tuple) for x in test_tup):\n        test_tup = [x for x in test_tup if not isinstance(x, tuple)]\n    return test_tup",
        "test": "assert remove_nested([1,2,3,4]) == [1,2,3,4] # Test 2: check if the function does not remove non-nested tuples",
        "num_ids": 1583,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([[1,2,3],[4,5,6]]) == 2",
        "num_ids": 1562,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1  # element not found in the array\n",
        "test": "assert last([],-1) == -1",
        "num_ids": 2478,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_starta_endb(\"abcab\") == True",
        "num_ids": 1302,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == 10, \"return_sum({'a': 1, 'b': 2, 'c': 3, 'd': 4}) should return 10.\"",
        "num_ids": 1649,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum of odd natural numbers to 0\n    sum_odd = 0\n    \n    # iterate through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # if the number is odd, add it to the sum\n        if i % 2 == 1:\n            sum_odd += i\n    \n    # return the sum of odd natural numbers\n    return sum_odd",
        "test": "assert sum_odd(0) == 0",
        "num_ids": 1683,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1887,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert number to binary string\n    binary_str = bin(n)[2:]\n    \n    # Calculate the number of zeroes to add\n    num_zeros = d % 32\n    \n    # Calculate the number of bits to rotate\n    num_bits = 32 - num_zeros\n    \n    # Extract the last num_zeros bits from the binary string\n    last_zeros = binary_str[-num_zeros:]\n    \n    # Rotate the bits to the left\n    rotated_bits = last_zeros + binary_str[:-num_zeros]\n    \n    # Convert the rotated bits back to a number\n    rotated_num = int(rotated_bits, 2)\n    \n    return rotated_num",
        "test": "assert left_rotate(0, 8) == 0",
        "num_ids": 2804,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces('   ') == ''",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and y == x:\n        count += 1\n    if y == z and x == y:\n        count += 1\n    return count",
        "test": "assert test_three_equal(3,4,5) == 0",
        "num_ids": 1777,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def count_rotation(arr):   \n    rotations_dict = {}\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            if arr[i] in rotations_dict:\n                rotations_dict[arr[i]] += 1\n            else:\n                rotations_dict[arr[i]] = 1\n    return sum(rotations_dict.values())",
        "test": "assert count_rotation([1,2,3,4,5]) == 0",
        "num_ids": 2575,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    # Find the square root of n using the Newton's method.\n    x0 = 0\n    x1 = n\n    while abs(x1-x0) > 1e-10:\n        x0 = x1\n        x1 = (x0 + n/x0) / 2\n    # Check whether the square root is an integer or not.\n    if x1 == int(x1):\n        return True\n    else:\n        return False",
        "test": "assert is_perfect_square(26) == False, \"26 is not a perfect square\"",
        "num_ids": 1988,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0: \n        return True \n    elif len(arr) == 1: \n        return arr[0] % 2 == 0\n    else:\n        product = arr[0] * is_product_even(arr[1:])\n        return product % 2 == 0",
        "test": "assert is_product_even([2, 4, 6, 8, 10]) == True",
        "num_ids": 1632,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for list1 in lists:\n        for list2 in lists:\n            if list1 is not list2:\n                current_sum = sum(list1) + sum(list2)\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                    max_list = [list1, list2]\n\n    return max_list",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]",
        "num_ids": 3369,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables to store the maximum run of uppercase characters\n    max_run = 0\n    current_run = 0\n\n    # Iterate through each character in the string\n    for i in range(len(test_str)):\n\n        # If the current character is uppercase, add 1 to the current run\n        if test_str[i].isupper():\n            current_run += 1\n\n        # If the current character is lowercase or if the current run is greater than the maximum run, update the maximum run\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    # Update the maximum run with the last character in the string\n    max_run = max(max_run, current_run)\n\n    # Return the maximum run of uppercase characters\n    return max_run",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 2569,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1,2,3,4,5]) == 1",
        "num_ids": 1509,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 28,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K((('a', 'b'), (3, 4, 5)), 2) == False",
        "num_ids": 1583,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((1, 2, 3), (2, 1, 3)) == False",
        "num_ids": 2214,
        "indeed": false
    }
]