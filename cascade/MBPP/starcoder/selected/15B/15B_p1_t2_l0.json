[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "test": "assert similar_elements((1, 2, 3), (4, 5, 6)) == ()",
        "num_ids": 128,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "test": "assert is_not_prime(1) == False",
        "num_ids": 140,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-hq.heappop(heap) for i in range(len(heap))]",
        "test": "assert heap_queue_largest([1,2,3,4,5], 5) == [5,4,3,2,1]",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer as input and returns True if the number is a power of 2, else False.\n    '''\n    if x == 0:\n        return False\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 108,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "test": "assert find_char_long(\"The quick brown fox jumps over the lazy dog.\") == ['quick', 'brown', 'jumps', 'lazy']",
        "num_ids": 127,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 124,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        mid = n // 2\n        if str[0:mid] == str[mid:n]:\n            return find_Rotations(str[mid:n])\n        else:\n            return 1 + min(find_Rotations(str[mid:n]), find_Rotations(str[mid+1:n+1]))",
        "test": "assert find_Rotations(\"abcde\") == 1",
        "num_ids": 167,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string and a character as input and removes the first and last occurrence of the character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        index = s.index(ch)\n        if index == 0:\n            return s[1:]\n        elif index == len(s)-1:\n            return s[:-1]\n        else:\n            return s[:index] + s[index+1:]",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
        "num_ids": 136,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=lambda x: sum(x))\n    return sorted_matrix",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [[10, 11, 12], [7, 8, 9], [4, 5, 6], [1, 2, 3]]",
        "num_ids": 199,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume",
        "test": "assert find_Volume(2,3,4) == 24",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore('abc_def') == True",
        "num_ids": 107,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 65,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = [False] * NO_OF_CHARS\n    for char in string:\n        char_list[ord(char)] = True\n    return char_list\n\ndef remove_chars(string, char_list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = ''\n    for char in string:\n        if not char_list[ord(char)]:\n            result += char\n    return result",
        "test": "assert str_to_list(\"hello world\", \"lo\") == \"he wor\"",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 113,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(1) == False",
        "num_ids": 86,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n    # Convert the reversed number back to an integer\n    rev_num = int(rev_num)\n    # Check if the original number is one less than twice the reversed number\n    if num == rev_num + 1:\n        return True\n    else:\n        return False",
        "test": "assert rev(98765) == True",
        "num_ids": 132,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] * (10 ** i)\n    return max_num",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5]) == 12345",
        "num_ids": 158,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-1,2) == True",
        "num_ids": 95,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal_num = 0\n    while i <= n:\n        octagonal_num = i * (2*i - 1)\n        i += 1\n    return octagonal_num",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            if sum(int(digit) for digit in sub) == len(sub):\n                count += 1\n    return count",
        "test": "assert count_Substrings(\"123456\") == 15",
        "num_ids": 119,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 109,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([(1, 3), (2, 4), (5, 6)]) == 2",
        "num_ids": 160,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "test": "assert subject_marks([(10, 80), (90, 70), (80, 90), (70, 80), (60, 70)]) == [(90, 70), (80, 90), (70, 80), (60, 70), (10, 80)]",
        "num_ids": 203,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "test": "assert recursive_list_sum([1, 2, [3, 4], 5]) == 15",
        "num_ids": 162,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 103,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]",
        "test": "assert bell_number(0) == 1",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        return A[0] <= A[1]\n    else:\n        for i in range(1, n):\n            if A[i] < A[i-1]:\n                return False\n        return True",
        "test": "assert is_Monotonic([1,2,3,4,5]) == True",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "test": "assert is_sublist([1, 2, 3, 4, 5], [2, 3]) == True",
        "num_ids": 150,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "test": "assert find_equal_tuple([(1,2,3), (4,5,6), (7,8,9)]) == True",
        "num_ids": 118,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "test": "assert comb_sort([5, 3, 8, 6, 7, 2, 4, 1]) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n can be represented as the difference of two squares,\n    otherwise it returns False.\n    \"\"\"\n    # Find the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False",
        "test": "assert dif_Square(2) == True",
        "num_ids": 116,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True",
        "test": "assert is_samepatterns(['red', 'green', 'blue'], ['red', 'green', 'blue']) == True",
        "num_ids": 123,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]",
        "num_ids": 192,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(22) == True",
        "num_ids": 72,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\"",
        "test": "assert word_len(\"world\") == 5",
        "num_ids": 90,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 77,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "test": "assert volume_sphere(1) == 4/3 * math.pi",
        "num_ids": 84,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr(sum % 26 + 65)",
        "test": "assert get_Char(\"hello\") == \"k\"",
        "num_ids": 98,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]",
        "test": "assert sequence(1) == 1",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4*math.pi",
        "num_ids": 85,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [i*(2*i-1) for i in range(1, n+1)]\n    return hexagonal_numbers[n-1]",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 99,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({'a':1,'b':2},{'b':3,'c':4},{'a':5,'d':6}) == {'a':5,'b':3,'c':4,'d':6}",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "test": "assert freq_count([1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 189,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i < N:\n            return i\n    return None",
        "test": "assert closest_num(10) == 9",
        "num_ids": 76,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6",
        "num_ids": 98,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
        "test": "assert find_substring(\"hello world\", \"l\") == True",
        "num_ids": 88,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is a positive integer\n    if type(n)!= int or n <= 0:\n        return False\n    \n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # Check if the number is divisible by 3\n    if n % 3 == 0:\n        return False\n    \n    # Check if the number is divisible by 5\n    if n % 5 == 0:\n        return False\n    \n    # Check if the number is divisible by 7\n    if n % 7 == 0:\n        return False\n    \n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return False\n    \n    # Check if the number is divisible by 13\n    if n % 13 == 0:\n        return False\n    \n    # Check if the number is divisible by 17\n    if n % 17 == 0:\n        return False\n    \n    # Check if the number is divisible by 19\n    if n % 19 == 0:\n        return False\n    \n    # Check if the number is divisible by 23\n    if n % 23 == 0:\n        return False\n    \n    # Check if the number is divisible by 29\n    if n % 29 == 0:\n        return False\n    \n    # Check if the number is divisible by 31\n    if n % 31 == 0:\n        return False\n    \n    # Check if the number is divisible by 37\n    if n % 37 == 0:\n        return False\n    \n    # Check if the number is divisible by 41\n    if n % 41 == 0:\n        return False\n    \n    # Check if the number is divisible by 43\n    if n % 43 == 0:\n        return False\n    \n    # Check if the number is divisible by 47\n    if n % 47 == 0:\n        return False\n    \n    # Check if the number is divisible by 53\n    if n % 53 == 0:\n        return False\n    \n    # Check if the number is divisible by 59\n    if n % 59 == 0:\n        return False\n    \n    # Check if the number is divisible by 61\n    if n % 61 == 0:\n        return False\n    \n    # Check if the number is divisible by 67\n    if n % 67 == 0:\n        return False\n    \n    # Check if the number is divisible by 71\n    if n % 71 == 0:\n        return False\n    \n    # Check if the number is divisible by 73\n    if n % 73 == 0:\n        return False\n    \n    # Check if the number is divisible by 79\n    if n % 79 == 0:\n        return False\n    \n    # Check if the number is divisible by 83\n    if n % 83 == 0:\n        return False\n    \n    # Check if the number is divisible by 89\n    if n % 89 == 0:\n        return False\n    \n    # Check if the number is divisible by 97\n    if n % 97 == 0:\n        return False\n    \n    # If none of the above conditions are met, the number is undulating\n    return True",
        "test": "assert is_undulating(2) == True",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "test": "assert power(2,3) == 8",
        "num_ids": 61,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "test": "assert index_minimum([(1, 2), (3, 4), (5, 1), (7, 8), (9, 0)]) == 3",
        "num_ids": 132,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 136,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(1) == 1",
        "num_ids": 80,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict",
        "test": "assert frequency_lists([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 2}",
        "num_ids": 210,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "test": "assert multiply_num([0, 0, 0, 0, 0]) == 0",
        "num_ids": 105,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary",
        "test": "assert decimal_to_binary(0) == '0'",
        "num_ids": 113,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If the number is already a palindrome, add 1 to the number and return it as an integer\n        return int(str(num + 1))\n    \n    # If the number is not a palindrome, find the next smallest palindrome by adding 1 to the largest palindrome\n    # that is a prefix of the number\n    for i in range(len(num_str), 0, -1):\n        # Check if the largest palindrome that is a prefix of the number is a palindrome\n        if num_str[:i] == num_str[:i][::-1]:\n            # If it is a palindrome, add 1 to it and return it as an integer\n            return int(num_str[:i] + str(int(num_str[:i]) + 1))\n    \n    # If no palindrome is found, return None\n    return None",
        "test": "assert next_smallest_palindrome(131) == 1411",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 98,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 1\n    elif n == 1:\n        return m\n    elif m == 1:\n        return n\n    else:\n        return n * m",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 109,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['dog', 'cat', 'fish']]) == [['apple', 'banana', 'cherry'], ['cat', 'dog', 'fish']]",
        "num_ids": 175,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "test": "assert count([True, True, False, True, False]) == 3",
        "num_ids": 82,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6, 7)) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 134,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n\n    while num3:\n        merged_list.append(heapq.heappop(num3))\n\n    return merged_list",
        "test": "assert merge_sorted_list([1,3,5],[2,4,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and a number n as input and returns the number of numbers with an odd value when rotating the binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n    \n    # Rotate the binary string n times\n    for i in range(n):\n        s = s[1:] + s[:1]\n    \n    # Count the number of odd numbers in the rotated string\n    count = 0\n    for i in s:\n        if i % 2!= 0:\n            count += 1\n    \n    return count",
        "test": "assert odd_Equivalent(\"1011\", 2) == 2",
        "num_ids": 177,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements",
        "test": "assert common_in_nested_lists([['apple', 'banana', 'orange'], ['banana', 'orange', 'grape'], ['grape', 'kiwi','mango']]) == []",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 69,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 65,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 97,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "test": "assert list_to_float([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 79,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    else:\n        i = 0\n        j = n - 1\n        while i < j:\n            mid = (i + j) // 2\n            if arr[mid] == arr[mid+1]:\n                i = mid + 1\n            elif arr[mid] == arr[mid-1]:\n                j = mid - 1\n            else:\n                return arr[mid]\n        return arr[i]",
        "test": "assert search([1, 2, 3, 4, 4, 5]) == 5",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(1,2), (3,4), (-5,6)]) == 24",
        "num_ids": 176,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    sum_divisors = sum(get_divisors(num))\n    if sum_divisors == num:\n        return False\n    elif sum_divisors == 0:\n        return False\n    elif sum_divisors == num and num!= 1:\n        return True\n    else:\n        return is_amicable(sum_divisors)\n\ndef get_divisors(num):\n    '''\n    Get all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors",
        "test": "assert amicable_numbers_sum(20000) == 31626 # example test case",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b)",
        "test": "assert angle_complex(1,-1) == 2.356194490192345",
        "num_ids": 102,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            length = abs(count_0 - count_1)\n            if length > max_length:\n                max_length = length\n    return max_length",
        "test": "assert find_length
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the maximum number among the two given numbers\n    max_num = max(a, b)\n\n    # Find the minimum number among the two given numbers\n    min_num = min(a, b)\n\n    # Initialize the sum of common divisors to zero\n    sum_of_common_divisors = 0\n\n    # Loop through all the numbers from min_num to max_num\n    for i in range(min_num, max_num + 1):\n\n        # Check if both numbers are divisible by i\n        if a % i == 0 and b % i == 0:\n\n            # If yes, add i to the sum of common divisors\n            sum_of_common_divisors += i\n\n    # Return the sum of common divisors\n    return sum_of_common_divisors",
        "test": "assert sum(15, 21) == 10 # 1, 3, 5, 6, 9, 10",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 56,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "test": "assert long_words(7, \"The quick brown fox jumps over the lazy dog\") == ['brown', 'jumps', 'lazy']",
        "num_ids": 135,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if the sum of each row and column is the same\n    if row_sums!= col_sums:\n        return False\n\n    # Calculate the sum of the diagonals\n    diag_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n\n    # Check if the sum of the diagonals is the same\n    if diag_sum1!= diag_sum2:\n        return False\n\n    # If all checks pass, the matrix is a magic square\n    return True",
        "test": "assert magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) == True",
        "num_ids": 320,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num",
        "test": "assert max_occurrences([1, 2, 3, 2, 1, 2, 3]) == 2",
        "num_ids": 141,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    vowel_indices.reverse()\n    new_str = \"\"\n    for i in vowel_indices:\n        new_str += str1[i]\n    for i in range(len(str1)):\n        if i not in vowel_indices:\n            new_str += str1[i]\n    return new_str",
        "test": "assert reverse_vowels(\"Python is awesome\") == \"Pythn si emos\"",
        "num_ids": 156,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "test": "assert tup_string((1, \"two\", 3.0)) == \"(1, 'two', 3.0)\"",
        "num_ids": 85,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 112,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 84,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    return zeroes / non_zeroes",
        "test": "assert zero_count(array('i', [1, 2, 3, 0, 4, 0, 5])) == 0.4",
        "num_ids": 159,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        for i in range(31):\n            if (2**i) > n:\n                break\n            elif (2**i) == n:\n                return True\n        return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(0) == True",
        "num_ids": 146,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "test": "assert circle_circumference(3) == 28.274333882308138",
        "num_ids": 105,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return flat_list",
        "test": "assert extract_singly([[1, 2], [3, 4]]) == {1, 2, 3, 4}",
        "num_ids": 124,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Start from the largest number and work our way down\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:i+1]))\n        # If the maximum element is not at the end of the list, flip it to the end\n        if max_index!= i:\n            # Flip the maximum element to the end of the list\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n            # Flip the entire list up to the maximum element\n            nums[:i+1] = nums[:i+1][::-1]\n    return nums",
        "test": "assert pancake_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 266,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[2,3,4],[4,5,6]) == 0",
        "num_ids": 139,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "test": "assert find_lists((1,2,3)) == 0",
        "num_ids": 86,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 147,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if a*x % n == 0:\n            y = n // a*x\n            return (x, y)\n    return None",
        "test": "assert find_solution(3, 2, 5) == (1, 2)",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 134,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum",
        "test": "assert sum_series(2) == 1",
        "num_ids": 116,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi / s)",
        "test": "assert area_polygon(10, 4) == 25.0",
        "num_ids": 94,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            div_sum += i \n            if i!= n//i: \n                div_sum += n//i \n    return div_sum ",
        "test": "assert div_sum(15) == False",
        "num_ids": 121,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count += 1\n    return count",
        "test": "assert count_char_position(\"The quick brown fox jumps over the lazy dog\") == {'t': 2, 'h': 2, 'e': 3, 'q': 1, 'u': 2, 'i': 1, 'c': 1, 'k': 1, 'b': 1, 'r': 2, 'o': 4, 'w': 1, 'n': 1, 'f': 1, 'x': 1, 'j': 1,'m': 1, 'p': 1,'s': 1, 'v': 1, 'l': 1, 'a': 1, 'z': 1, 'y': 1, 'd': 1, 'g': 1}",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5, 6]) == 1",
        "num_ids": 119,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 85,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list and a number as input and returns the number of occurrences of the number in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9,10], 5) == 1",
        "num_ids": 124,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 2, 4) == 9",
        "num_ids": 130,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "test": "assert perimeter_pentagon(10) == 70",
        "num_ids": 80,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "test": "assert count_occurance('hello world') == 0",
        "num_ids": 105,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 102,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1, 2, 3, 4, 4, 4, 5, 5, 5, 5], 10, 4) == True",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 90,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "test": "assert odd_values_string(\"hello\") == \"hlo\"",
        "num_ids": 103,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 95,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the given range to binary and remove the '0b' prefix\n    binary_string = bin(n)[2:]\n    # Check if all the bits in the given range are set or not\n    for i in range(l, r+1):\n        if binary_string[i-1] == '1':\n            return False\n    return True",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,0,4) == False",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one at the beginning of the array and the other at the end\n    left = 0\n    right = n - 1\n    \n    # Traverse the array from left to right\n    while left < right:\n        # If the element at the left pointer is negative, move the left pointer to the right\n        if arr[left] < 0:\n            left += 1\n        # If the element at the right pointer is positive, move the right pointer to the left\n        elif arr[right] >= 0:\n            right -= 1\n        # If the element at the left pointer is positive and the element at the right pointer is negative, swap them\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n    \n    return arr",
        "test": "assert re_arrange_array([-1, -2, -3, 1, 2, 3, 4, 5], 3) == [-1, -2, -3, 1, 2, 3, 4, 5]",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in a string with a specified character.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank(\"hello world\", \"*\") == \"hello*world\"",
        "num_ids": 76,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap[::-1]",
        "test": "assert larg_nnum([1,2,3,4,5],3) == [5,4,3]",
        "num_ids": 151,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return lateralsurface",
        "test": "assert lateralsuface_cylinder(5,7) == 157.56637061435917, \"The lateral surface area of a cylinder with radius 5 and height 7 is not correct.\"",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "test": "assert volume_cube(2) == 8",
        "num_ids": 57,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary and split it into a list of bits\n    bits = bin(n)[2:].zfill(32)\n    # Iterate over the bits and set even bits to 1\n    for i in range(0, len(bits), 2):\n        bits = bits[:i] + '1' + bits[i+1:]\n    # Convert the list of bits back to an integer and return it\n    return int(bits, 2)",
        "test": "assert even_bit_set_number(1) == 1",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "test": "assert check_occurences([(1,2),(2,3),(1,2),(3,4),(1,2)]) == {(1,2): 3, (2,3): 1, (3,4): 1}",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"aaa\") == 6",
        "num_ids": 116,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    else:\n        total_sequences = 0\n        for i in range(1, m+1):\n            total_sequences += get_total_number_of_sequences(i, n-1)\n        return total_sequences",
        "test": "assert get_total_number_of_sequences(5,3) == 4",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "test": "assert replace_list([1,2,3], [4]) == [1,2,4]",
        "num_ids": 103,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"hello world\") == 11",
        "num_ids": 73,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return int(root) + 1\n    else:\n        return int(math.ceil(root))**2",
        "test": "assert next_Perfect_Square(2) == 4",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # Initialize the first row of the dp table\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    # Fill the remaining cells of the dp table\n    for gap in range(1, n):\n        for i in range(n-gap):\n            j = i + gap\n            dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + arr[j]\n\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, dp[0][i])\n\n    return max_sum",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.00001:\n        guess = (guess + number / guess) / 2\n    return guess",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 127,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n\n    # Return the maximum length palindromic subsequence\n    return max(max(row) for row in dp)",
        "test": "assert lps(\"cbbd\") == 2",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "test": "assert harmonic_sum(1) == 1.0",
        "num_ids": 89,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "test": "assert intersection_array([1,2,3],[2,3,4]) == [2,3]",
        "num_ids": 113,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 4, 5), 1) == 1",
        "num_ids": 118,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result",
        "test": "assert insert_element([1,2,3,4,5],0) == [0,1,0,2,0,3,0,4,0,5]",
        "num_ids": 149,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(f\"Polar coordinates of {num} are {polar}\")",
        "test": "assert convert(3-4j) == (cmath.polar(3-4j)[0], cmath.polar(3-4j)[1])",
        "num_ids": 128,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 104,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]",
        "test": "assert combinations_colors(['red', 'green', 'blue'], 2) == [('red','red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')]",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 136,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 88,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        p = 3\n        count = 2\n        while count < n:\n            p += 2\n            is_prime = True\n            for i in range(3, int(p**0.5)+1, 2):\n                if p % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n        return p",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "test": "assert division_elements((1, 2, 3), (4, 5, 6)) == (0.25, 0.4, 0.5)",
        "num_ids": 171,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"Error: L is greater than the length of the list\"\n    else:\n        return (list1[:L], list1[L:])",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 182,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "test": "assert dog_age(10) == 36, \"dog_age(10) should be 36\"",
        "num_ids": 99,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2",
        "test": "assert lateralsurface_cube(3) == 36",
        "num_ids": 70,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 89,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 2\n        count += 1\n    return num",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 81,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 55,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "test": "assert sum_even_and_even_index([2, 4, 6, 8, 10]) == 0",
        "num_ids": 139,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 5\n        count += 1\n    return sum",
        "test": "assert even_Power_Sum(2) == 225 + 3125",
        "num_ids": 122,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "test": "assert rear_extract([(1,2,3), (4,5,6), (7,8,9)]) == [3, 6, 9]",
        "num_ids": 139,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "test": "assert substract_elements((1, 2, 3), (2, 1, 4)) == (-1, 1, -1)",
        "num_ids": 165,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(1) == 0",
        "num_ids": 110,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume",
        "test": "assert volume_cylinder(5,7) == 152.6207348963211",
        "num_ids": 112,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({'a': 10, 'b': 5, 'c': 15}, 10) == {'a': 10, 'c': 15}",
        "num_ids": 165,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        count += 1\n    return count",
        "test": "assert count_first_elements((1,2,2,3,4,5)) == 1",
        "num_ids": 114,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    count = 0\n    while count < n:\n        decagonal += 10*count\n        count += 1\n    return decagonal",
        "test": "assert is_num_decagonal(2) == 5",
        "num_ids": 97,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 167,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 97,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[3,4,5]) == [-2,-2,-2]",
        "num_ids": 114,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True",
        "test": "assert validate(12345) == True",
        "num_ids": 103,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(i == elem for i in lst):\n        return True\n    else:\n        return False",
        "test": "assert check_element([1,1,1,1,1],1) == True",
        "num_ids": 99,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three('abbb') == True",
        "num_ids": 111,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a new array of size n*k\n    new_a = [0] * (n*k)\n    # Copy the original array k times into the new array\n    for i in range(k):\n        new_a[i*n:(i+1)*n] = a\n    # Find the maximum sum of a contiguous subarray in the new array\n    max_sum = max_sub_array_sum(new_a, n*k)\n    return max_sum\n\ndef max_sub_array_sum(a, n):\n    '''\n    Write a function to find the largest sum of a contiguous subarray in an array.\n    '''\n    # Initialize variables for the maximum sum and the current sum\n    max_sum = a[0]\n    curr_sum = a[0]\n    # Loop through the array and update the current sum and maximum sum\n    for i in range(1, n):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 3) == 18",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(1) == 0",
        "num_ids": 86,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]) == [1, 2, 3, 4, 5]",
        "num_ids": 175,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        count = 0\n        for i in range(1, k+1):\n            count += count_no_of_ways(n-1, k)\n        return count",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 112,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m",
        "test": "assert find(10,3) == 3",
        "num_ids": 60,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 81,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "test": "assert sum_div(2) == 1",
        "num_ids": 84,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0",
        "num_ids": 127,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert flatten_list([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 130,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n    for elem in stdata:\n        freq[elem] += 1\n    \n    # Calculate the maximum aggregate\n    max_agg = 0\n    for i in range(len(stdata)):\n        for j in range(i+1, len(stdata)):\n            if stdata[i] < stdata[j]:\n                max_agg += freq[stdata[i]] * freq[stdata[j]]\n    \n    return max_agg",
        "test": "assert max_aggregate([(1,2), (3,4), (5,6), (7,8)]) == 23",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if sum(int(binary[:n])) == sum(int(binary[n:])):\n            count += 1\n    return count",
        "test": "assert count_binary_seq(2) == 5",
        "num_ids": 95,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())",
        "test": "assert dict_depth({'a': 1, 'b': {'c': 2, 'd': {'e': 3}}}) == 3",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges, rotations and index as input and returns the element at the given index after rotating the array by the given number of rotations.\n    '''\n    # Finding the range of the array\n    start = ranges[0]\n    end = ranges[1]\n\n    # Finding the length of the array\n    length = end - start + 1\n\n    # Finding the new index after rotating the array\n    new_index = (index - start + rotations) % length\n\n    # Finding the element at the new index\n    element = arr[new_index]\n\n    return element",
        "test": "assert find_Element([1,2,3,4,5],[[0,4]],0,1) == 2",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*\\s\\w*')\n    matches = [word for word in words if pattern.match(word)]\n    if len(matches) < 2:\n        return None\n    return matches[:2]",
        "test": "assert start_withp(['pear', 'peach', 'pineapple', 'plum']) == None",
        "num_ids": 144,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        return 0\n    \n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        if i == index:\n            dp[i] = a[i]\n        else:\n            dp[i] = max(dp[i-1], a[i])\n    \n    max_sum = dp[index]\n    for i in range(index+1, n):\n        if a[i] > dp[i-1]:\n            dp[i] = a[i] + dp[i-1]\n            max_sum = max(max_sum, dp[i])\n    \n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 3, 6) == 106",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > n:\n        return ()\n    else:\n        return deepcopy(tuplex[m-1:n])",
        "test": "assert colon_tuplex((1,2,3,4,5),1,5) == (1,2,3,4,5)",
        "num_ids": 123,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    result = []\n    \n    # Iterate through each pair of numbers in the two lists\n    for i in range(N):\n        for j in range(N):\n            # Calculate the product of the two numbers\n            product = nums1[i] * nums2[j]\n            \n            # Check if the product is greater than the current maximum\n            if product > max_product:\n                # If it is, update the maximum and reset the result list\n                max_product = product\n                result = [(nums1[i], nums2[j])]\n            elif product == max_product:\n                # If the product is equal to the current maximum, add the pair to the result list\n                result.append((nums1[i], nums2[j]))\n    \n    # Return the result list\n    return result",
        "test": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3) == [20, 60, 100]",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2,3) == 3",
        "num_ids": 62,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes an integer as input and returns the integer with the left most unset bit set.\n    '''\n    # Find the rightmost set bit\n    rightmost_set_bit = n & -n\n    \n    # Set the left most unset bit\n    return n | rightmost_set_bit + 1",
        "test": "assert set_left_most_unset_bit(0b10101010) == 0b10101011",
        "num_ids": 149,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(2,3) == 20.132741228718345",
        "num_ids": 121,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        n -= power\n        power *= 2\n    return power // 2\n",
        "test": "assert highest_Power_of_2(0) == 0",
        "num_ids": 95,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 97,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "test": "assert add_string(['apple', 'banana', 'cherry'], 'I like {}.') == ['I like apple.', 'I like banana.', 'I like cherry.']",
        "num_ids": 134,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result",
        "test": "assert convert_list_dictionary([{'name': 'John', 'age': 25}, {'name': 'Jane', 'age': 30}], ['apple', 'banana', 'orange'], ['cat', 'dog', 'fish']) == [{'name': 'John', 'age': 25, 'fruits': ['apple', 'banana', 'orange'], 'pets': ['cat', 'dog', 'fish']}, {'name': 'Jane', 'age': 30, 'fruits': ['apple', 'banana', 'orange'], 'pets': ['cat', 'dog', 'fish']}]",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(n + get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 157,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "test": "assert max_length_list([1, 2, 3, [4, 5], 6]) == [1, 2, 3, [4, 5], 6]",
        "num_ids": 162,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "test": "assert check_distinct((1, 2, 3)) == True",
        "num_ids": 76,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Loop through each character in the string again\n    for char in str1:\n        # If the character has a count of 1, return it as the first non-repeated character\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated characters are found, return None\n    return None",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 243,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_char('abcc') == False",
        "num_ids": 98,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 87,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        result.append(sum)\n    return result",
        "test": "assert sum_of_digits([10, 20, 30]) == 60",
        "num_ids": 122,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "test": "assert bitwise_xor((1, 2, 3), (4, 5, 6)) == (5, 7, 5)",
        "num_ids": 152,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)",
        "test": "assert extract_freq([('a', 'b'), ('a', 'c'), ('b', 'c'), ('d', 'e'), ('f', 'g')]) == 5",
        "num_ids": 171,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "test": "assert add_nested_tuples(((1,2), (3,4)), ((5,6), (7,8))) == (((6,8), (10,12)),)",
        "num_ids": 194,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2,3) == 2",
        "num_ids": 66,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex((1,2,3),4) == False",
        "num_ids": 82,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert find_Parity(2) == False",
        "num_ids": 75,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Find the index of the rightmost digit that needs to be swapped\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    \n    # If no such digit is found, return -1\n    if i < 0:\n        return -1\n    \n    # Find the index of the smallest digit on the right that is greater than digits[i]\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the digits at indices i and j\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Sort the digits to the right of i in ascending order\n    digits[i+1:] = sorted(digits[i+1:])\n    \n    # Convert the list of digits back to an integer and return it\n    return int(''.join(digits))",
        "test": "assert rearrange_bigger(98765) == 98765",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap",
        "test": "assert k_smallest_pairs([1, 1, 2], [1, 2, 3], 2) == [(1, 1), (1, 1)]",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1,2), (3,4), (5,6), (7,8)]) == 2880",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))",
        "test": "assert snake_to_camel('snake_case_string') =='snakeCaseString'",
        "num_ids": 83,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 93,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]",
        "test": "assert extract_nth_element([(1,2), (3,4), (5,6)], 1) == 2",
        "num_ids": 100,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if any value in list1 exists in list2, otherwise it returns False.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3],[2,3,4]) == True",
        "num_ids": 97,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == (4, 5)",
        "num_ids": 169,
        "indeed": true
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if common_element is None:\n            common_element = i[0]\n        elif common_element!= i[0]:\n            return None\n    return common_element",
        "test": "assert group_tuples([(1,2), (2,3), (1,4), (2,5), (3,6), (4,7)]) == 1",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem",
        "test": "assert Find_Max([1, 2, 3, 4, 5, 6]) == 6",
        "num_ids": 127,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "test": "assert round_and_sum([1.2, 3.4, 5.6, 7.8, 9.0, 10.1]) == 64.1",
        "num_ids": 168,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum",
        "test": "assert cube_Sum(1) == 0",
        "num_ids": 81,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]",
        "test": "assert concatenate_tuple(('hello', 'world')) == 'hello-world'",
        "num_ids": 100,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 111,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "test": "assert extract_rear(('orange', 'grape', 'pear')) == ('orange',)",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, 4, 5], 6) == 0",
        "num_ids": 123,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 94,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "test": "assert change_date_format('2021-01-01') == '01-01-2021'",
        "num_ids": 173,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "test": "assert shell_sort([5, 2, 8, 3, 9, 1]) == [1, 2, 3, 5, 8, 9]",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup",
        "test": "assert and_tuples((True, False, True), (True, True, False)) == (True, False, False)",
        "num_ids": 137,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the two roots\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Return the two roots\n        return root1, root2\n    else:\n        # Return None if the discriminant is not positive\n        return None",
        "test": "assert parabola_directrix(1, 2, 1) == 1",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3], [2, 3, 4]) == True",
        "num_ids": 106,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height",
        "test": "assert median_trapezium(5,10,15) == 7.5",
        "num_ids": 97,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one('aab') == 'aab'",
        "num_ids": 75,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 70,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([1, 2, -3, 4, -5]) == [-3, -5]",
        "num_ids": 124,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result",
        "test": "assert remove_odd(\"hello\") == \"hll\"",
        "num_ids": 82,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(1,2),(2,3),(3,4),(4,5),(5,1),(1,3),(2,4),(3,5),(4,1),(5,2)]) == 5",
        "num_ids": 184,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "test": "assert multiple_to_single([10, 20, 30, 40, 50]) == 123450",
        "num_ids": 100,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None, None",
        "test": "assert find_adverb_position(\"The quick brown fox jumps over the lazy dog. The dog barks.\") == [(10, 'quick'), (16, 'brown'), (22, 'fox'), (29, 'lazy'), (40, 'dog')]",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "test": "assert surfacearea_cube(2) == 24",
        "num_ids": 65,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
        "test": "assert positive_count(array('i', [-1, -2, -3, -4, -5])) == 0",
        "num_ids": 131,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest",
        "test": "assert largest_neg([-1, -2, -3, -4, -5]) == -5",
        "num_ids": 109,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i] for i in range(K))\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "test": "assert trim_tuple([(1,2,3,4,5), (6,7,8,9,10), (11,12,13,14,15)], 3) == [(1,2,3), (6,7,8), (11,12,13)]",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == (4,10,18)",
        "num_ids": 138,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = []\n    for i in tup:\n        if i in count:\n            result.append(count[i])\n        else:\n            result.append(0)\n    return result",
        "test": "assert count_Occurrence((1,2,3,4,5), [1,2,3,4]) == Counter({1: 1, 2: 1, 3: 1, 4: 1})",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 106,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n\nprint(cal_sum(5)) # Output: 15",
        "test": "assert cal_sum(1) == 1",
        "num_ids": 101,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of strings of specified size.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result",
        "test": "assert extract_string(['apple', 'banana', 'cherry', 'date', 'elderberry'], 4) == ['appl', 'bana', 'cher', 'date', 'elder']",
        "num_ids": 168,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "test": "assert remove_whitespaces(\"Hello World\") == \"HelloWorld\"",
        "num_ids": 85,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes two arguments: actual_cost and sale_amount.\n    It calculates the loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(100,150) == 0",
        "num_ids": 117,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i \n    return sum ",
        "test": "assert sumofFactors(15) == 12 # 3 + 5",
        "num_ids": 114,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog.\") == ['quick', 'brown', 'fox', 'jumps', 'lazy']",
        "num_ids": 134,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(2) == False",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 117,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "test": "assert Find_Min([1,2,3,4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 147,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(5, 10) == 50",
        "num_ids": 67,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)",
        "test": "assert remove_uppercase(\"HeLLo WorLD\") == \"HeLLo WorLD\"",
        "num_ids": 88,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([['apple', 'banana', 'cherry'], ['dog', 'cat', 'fish'], ['python', 'java', 'kotlin']]) == ['apple', 'dog', 'python']",
        "num_ids": 135,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"Hello World\") == 2",
        "num_ids": 80,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result",
        "test": "assert combinations_list([1, 2, 3]) == [(1, 2), (1, 3), (2, 3)], \"combinations_list([1, 2, 3]) should return [(1, 2), (1, 3), (2, 3)]\"",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(len(arr)):\n        max_ending_here *= arr[i]\n        min_ending_here *= arr[i]\n        \n        if max_ending_here < min_ending_here:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n        \n        if max_ending_here > max_product:\n            max_product = max_ending_here\n            \n    return max_product",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6",
        "num_ids": 198,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({'a': 1, 'b': '', 'c': 3}) == {'a': 1, 'c': 3}",
        "num_ids": 114,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_ending_here = arr[0]\n        min_ending_here = arr[0]\n        max_so_far = arr[0]\n        for i in range(1, n):\n            if arr[i] > max_ending_here * arr[i]:\n                max_ending_here = arr[i]\n            elif arr[i] < min_ending_here * arr[i]:\n                min_ending_here = arr[i]\n            else:\n                max_ending_here = max(max_ending_here * arr[i], min_ending_here * arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far",
        "test": "assert max_product([-2, 0, -1]) == 0",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "test": "assert add_pairwise((1, 2, 3, 4)) == (2, 4, 6)",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n",
        "test": "assert find_remainder([1, 2, 3, 4, 5], 7) == 1",
        "num_ids": 103,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False",
        "test": "assert check_Consecutive([1,2,3,4,6]) == True",
        "num_ids": 101,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return list(intersection)",
        "test": "assert tuple_intersection([(1,2),(2,3),(3,4)], [(2,3),(3,4),(4,5)]) == [(2,3),(3,4)]",
        "num_ids": 156,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello world\", \"l\", \"x\") == \"hexxo worxd\"",
        "num_ids": 90,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "test": "assert sort_counter({'a': 1, 'b': 2, 'c': 3}) == [('a', 1), ('b', 2), ('c', 3)]",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums), min(nums)])",
        "test": "assert big_sum([5, 4, 3, 2, 1]) == 15",
        "num_ids": 92,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are in lower case, else False.\n    '''\n    return string.islower()",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 70,
        "indeed": false
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)",
        "test": "assert remove_lowercase(\"Python is awesome\") == \"Pythn s mwz\"",
        "num_ids": 88,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    return n // 10**(len(str(n))-1)",
        "test": "assert first_Digit(12345) == 1",
        "num_ids": 76,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 103,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
        "test": "assert difference(1) == 0",
        "num_ids": 118,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,2,3,4,5,6],6) == 1",
        "num_ids": 112,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "test": "assert toggle_string(\"Hello World\") == \"hELLO wORLD\"",
        "num_ids": 72,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Calculate the sum of the per-digit differences\n    digit_diff_sum = 0\n    for i in range(len(n1_str)):\n        digit_diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    \n    return digit_diff_sum",
        "test": "assert digit_distance_nums(100, 200) == 100, \"Test case 2 failed\"",
        "num_ids": 193,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7) == 7",
        "num_ids": 191,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_tup = tuple(set(test_tup1) | set(test_tup2))\n    \n    # Sort the union tuple in ascending order\n    union_tup = sorted(union_tup)\n    \n    # Print the union tuple\n    print(union_tup)",
        "test": "assert union_elements((1, 2, 3), (3, 4, 5)) == (1, 2, 3, 4, 5)",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length",
        "test": "assert Find_Max_Length([1,2,3,4,5]) == 5",
        "num_ids": 149,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values('The price of the product is \"100 USD\".') == ['100 USD']",
        "num_ids": 104,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10",
        "num_ids": 127,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 75,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 111,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 109,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 57,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['dog', 'cat', 'fish']]) == [['apple', 'banana', 'cherry'], ['cat', 'dog', 'fish']]",
        "num_ids": 158,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(num_list)\n    return list(unique_nums)",
        "test": "assert two_unique_nums([1, 2, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 115,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns its surface area.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area",
        "test": "assert surfacearea_cylinder(5,7) == 157.07963267948966",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and returns True if the first list is a sublist of the second list, else False.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n    return False",
        "test": "assert is_Sub_Array([1,2,3,4,5],[1,2,3,4,5]) == True",
        "num_ids": 153,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 92,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 188,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "test": "assert find_dissimilar((1,2,3),(2,3,4)) == (1,3)",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            new_tuple.append(i)\n    return tuple(new_tuple)",
        "test": "assert even_ele((1, 2, 3, 4, 5), lambda x: x % 2 == 0) == (2, 4)",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the square base\n    area_base = b * b\n    \n    # Calculate the area of the square face\n    area_face = 4 * b * s\n    \n    # Calculate the area of the square top\n    area_top = area_base * 2\n    \n    # Calculate the total surface area\n    total_area = area_base + area_face + area_top\n    \n    return total_area",
        "test": "assert surface_Area(5,4) == 200",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 60,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        catalan = 0\n        for i in range(num):\n            catalan += catalan_number(i) * catalan_number(num-i-1)\n        return catalan",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 112,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == (None, None)",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "test": "assert expensive_items([(\"apple\", 1.5), (\"banana\", 0.7), (\"orange\", 2.0), (\"pear\", 1.2), (\"grape\", 2.5)], 2) == [(\"orange\", 2.0), (\"banana\", 0.7)]",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 3) == [1, 2, 3, 4, 5, 1, 2]",
        "num_ids": 136,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 80,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 94,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        if num > 0:\n            root = int(num ** 0.5)\n            if root ** 2 == num:\n                result.append(num)\n    return result",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 125,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.exp(complex(0,y))",
        "test": "assert polar_rect(1,cmath.pi/2) == (0.0, 1.0)",
        "num_ids": 96,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 122,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two arguments, n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) \n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n,k))",
        "test": "assert binomial_Coeff(7,3) == 35",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)",
        "test": "assert removezero_ip('192.168.0.1') == '192.168.0.1'",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    if even_num is not None and odd_num is not None:\n        return abs(even_num - odd_num)\n    else:\n        return None",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 183,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i\n            while str1[j]!= str2[i]:\n                j += 1\n            str1 = str1[:i] + str1[j] + str1[i+1:j] + str1[i] + str1[j+1:]\n            count += 1\n    return count",
        "test": "assert min_Swaps(\"1010101010\",\"1111000011\") == 1",
        "num_ids": 180,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "test": "assert tuple_size((1,)) == 24",
        "num_ids": 69,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 > n2:\n        arr1, arr2, n1, n2 = arr2, arr1, n2, n1\n    if k > n1:\n        return None\n    i, j, count = 0, 0, 0\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        count += 1\n        if count == k:\n            return arr1[i-1]\n    return None",
        "test": "assert find_kth([1, 2, 3], [4, 5, 6], 4) == 5",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    num_str = str(number)\n    # Calculate the length of the number\n    num_len = len(num_str)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate through each digit in the number\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Add the square of the digit to the sum\n        sum += digit_int ** num_len\n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 187,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 89,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the number is even, and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 72,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated characters found\"",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"",
        "num_ids": 112,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics",
        "test": "assert get_ludic(2) == [1, 2]",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string",
        "test": "assert reverse_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"z y x w v u t s r q p o n m l k j i h g f e d c b a\"",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 82,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "test": "assert radian_degree(90) == math.pi/2",
        "num_ids": 66,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals('hello world', r'\\d+') == ('', 0, 0)",
        "num_ids": 134,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum(range(n+1))",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 73,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input and returns a new list with the k'th element removed.\n    '''\n    return list1[:k-1] + list1[k:]",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 1) == [1, 3, 4, 5]",
        "num_ids": 136,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 1) == 8",
        "num_ids": 151,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1,3,5],[2,4,6]]",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i[1]\n    return total_sum",
        "test": "assert cummulative_sum([(1,2),(3,4),(5,6),(7,8)]) == [3, 7, 11, 15]",
        "num_ids": 137,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result",
        "test": "assert average_tuple(((1,2,3), (4,5,6), (7,8,9))) == [2.0, 3.0, 4.0]",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of the same length.\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup",
        "test": "assert tuple_modulo((5, 7, 9), (3, 2, 1)) == (2, 1, 0)",
        "num_ids": 184,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d < 0:\n        return -1\n    if steps == 0:\n        return -1\n    \n    dp = [[0 for i in range(d+1)] for j in range(steps+1)]\n    \n    for i in range(steps+1):\n        for j in range(d+1):\n            if i == 0:\n                dp[i][j] = -1\n            elif j == 0:\n                dp[i][j] = 0\n            elif j == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + 1\n                if j - steps >= 0:\n                    dp[i][j] = min(dp[i][j], dp[i][j-steps] + 1)\n    \n    return dp[steps][d]",
        "test": "assert min_Jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 15) == 3",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([1,2,3],[4,5,6]) == [0.25, 0.4, 0.5]",
        "num_ids": 130,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    alpha_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            alpha_list.append(char)\n    return ''.join(alpha_list + num_list)",
        "test": "assert move_num(\"hello world\") == \"hello world\"",
        "num_ids": 142,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
        "test": "assert largest_subset([1, 2, 3, 4, 5, 6]) == 5",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # If the length of the merged list is even, the median is the average of the middle two elements\n        return (arr1[n//2] + arr1[n//2 - 1] + arr2[n//2] + arr2[n//2 - 1]) / 2\n    else:\n        # If the length of the merged list is odd, the median is the middle element\n        return (max(arr1[n//2], arr2[n//2]) + min(arr1[n//2 - 1], arr2[n//2 - 1])) / 2",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 4) == 3.5",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1,2,3,4,5],1) == [1,2,3,4,5]",
        "num_ids": 116,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are uppercase, else False.\n    '''\n    for char in string:\n        if char.islower():\n            return False\n    return True",
        "test": "assert is_upper(\"WORLD\") == \"WORLD\"",
        "num_ids": 81,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 123,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the area of the semicircle\n    area_semicircle = math.pi * r * r / 2\n    \n    # Calculate the length of the largest triangle's hypotenuse\n    hypotenuse = 2 * r * math.sin(math.pi / 3)\n    \n    # Calculate the area of the largest triangle\n    area_triangle = 0.5 * hypotenuse * hypotenuse\n    \n    # Return the area of the largest triangle\n    return area_triangle if area_triangle < area_semicircle else area_semicircle",
        "test": "assert triangle_area(2) == 0.7853981633974483",
        "num_ids": 221,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] > end:\n            return end + 1\n\n    for i in range(start, end + 1):\n        if array[i] == i:\n            continue\n        elif array[i] == array[array[i]]:\n            return array[i]\n        else:\n            array[i], array[array[i]] = array[array[i]], array[i]\n\n    return end + 1",
        "test": "assert find_First_Missing([1,2,3,4,6]) == 5",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 87,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1,2,3,4,5,6]) == [2,4,6]",
        "num_ids": 101,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    if sub:\n        adj = [a for a in adj if a not in sub]\n    return adj",
        "test": "assert adjac((1,1)) == [(0,1), (1,0), (2,1), (1,2)]",
        "num_ids": 140,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 91,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return non_zeroes + zeroes",
        "test": "assert move_zero([1, 0, 2, 0, 3, 4, 0]) == [1, 2, 3, 4, 0, 0, 0]",
        "num_ids": 178,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum",
        "test": "assert pair_xor_Sum([1,2,3,4,5,6],6) == 22 # (1^2)+(1^3)+(1^4)+(1^5)+(1^6)+(2^3)+(2^4)+(2^5)+(2^6)+(3^4)+(3^5)+(3^6)+(4^5)+(4^6)+(5^6) = 22",
        "num_ids": 243,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "test": "assert heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]",
        "num_ids": 148,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments:\n    actual_cost: the actual cost of the item\n    sale_amount: the amount of the item sold\n    \n    It returns True if the sale has no profit and no loss, and False otherwise.\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(50,100) == False",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert the temperature from celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # Calculate the wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t_f - 35.75 * (v ** 0.16) + 0.4275 * t_f * (v ** 0.16)\n    \n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index",
        "test": "assert wind_chill(10,10) == 10",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "test": "assert sample_nam(['John', 'Sarah', 'Mike', 'Emily', 'david']) == 15",
        "num_ids": 134,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)",
        "test": "assert remove_parenthesis(\"This is a (test) string.\") == \"This is a  string.\"",
        "num_ids": 109,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 69,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*\\b)z(?!.*\\b)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle(\"hello worldz\") == False",
        "num_ids": 122,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 136,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'c': 6}) == ((1, 2, 3), {'c': 6})",
        "num_ids": 144,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    max_avg = dp[n-1][n-1] / 2\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                max_avg = max(max_avg, dp[i][j] / (j+1))\n            elif j == 0:\n                max_avg = max(max_avg, dp[i][j] / (i+1))\n            else:\n                max_avg = max(max_avg, (dp[i][j] - dp[i-1][j-1]) / (i+j-1))\n    return max_avg",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) == 15.0",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students",
        "test": "assert filter_data({'Alice':(1.7,5.2), 'Bob':(1.8,5.1), 'Charlie':(1.6,5.3)}, 1.8, 5.1) == {'Bob':(1.8,5.1)}",
        "num_ids": 251,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1,2,3,4,5], [5,4,3,2,1]) == [(0,4), (1,3), (2,2), (3,1), (4,0)]",
        "num_ids": 199,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base**power):\n        total += int(digit)\n    return total",
        "test": "assert power_base_sum(3, 5) == 243",
        "num_ids": 105,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "test": "assert extract_quotation(\"The quick brown fox jumps over the lazy dog.\") == []",
        "num_ids": 103,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "test": "assert multiply_elements((1,2,3,4)) == (2, 6)",
        "num_ids": 168,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the sum of corresponding elements of the two input lists.\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 132,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]",
        "test": "assert consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]",
        "num_ids": 133,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * h + 2 * math.pi * r ** 2",
        "test": "assert lateralsurface_cone(2,3) == 25.132741228718345",
        "num_ids": 128,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)",
        "test": "assert replace_specialchar(\"hello world\") == \"hello:world\"",
        "num_ids": 85,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 3, 4, 4, 4, 5], 3) == 2",
        "num_ids": 204,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            res += arr[i] * arr[j]\n    return res",
        "test": "assert sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6]) == 120",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # To toggle the bits, we need to XOR the number with a mask that has all bits set except the first and last bit.\n    # The first and last bit are set to 1, so we need to set the middle bits to 0.\n    mask = (1 << (len(bin(n)) - 3)) - 1\n    return n ^ mask",
        "test": "assert set_middle_bits(12) == 13",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 6) == 3",
        "num_ids": 107,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    result = re.match(pattern, string)\n    if result:\n        return True\n    else:\n        return False",
        "test": "assert check_str('apple') == True",
        "num_ids": 105,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1) * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 117,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the number of digits in the smallest triangular number with n digits\n    num_digits = n * (n + 1) // 2\n    \n    # Find the index of the smallest triangular number with n digits\n    index = (num_digits * (num_digits + 1)) // 2\n    \n    return index",
        "test": "assert find_Index(2) == 1",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "test": "assert tuple_to_dict((1, 2, 3, 4)) == {1: 2, 3: 4}",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters are same, otherwise False.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert all_Characters_Same(\"a\") == True",
        "num_ids": 78,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (6 * math.sqrt(2)) / (4 * math.tan(math.pi / 6)) * side ** 2\n    return area",
        "test": "assert area_tetrahedron(5) == 15.39",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 166,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "test": "assert check_none((1,2,3)) == False",
        "num_ids": 79,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum+1)))",
        "test": "assert divisible_by_digits(100, 1000) == [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 207, 208, 210, 211, 213, 214, 216, 217, 219, 220, 222, 223, 225, 226, 228, 229, 231, 232, 234, 235, 237, 238, 240, 241, 243, 244, 246, 247, 249, 250, 252, 253, 255, 257, 259, 260, 262, 263, 265, 266, 268, 269, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 332, 334, 335, 337, 338, 340, 341, 343, 344, 346, 347, 349, 350, 352, 353, 3",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360*math.pi",
        "test": "assert sector_area(5, 180) == 78.53981633974483",
        "num_ids": 133,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D array to store the lengths of LCS of subsequences of X[0..m-1], Y[0..n-1] and Z[0..o-1]\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the LCS array using dynamic programming\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Find the length of the longest common subsequence\n    lcs_length = L[m][n][o]\n\n    # Create a character array to store the longest common subsequence\n    lcs = ['' for i in range(lcs_length)]\n\n    # Find the longest common subsequence using the LCS array\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs[lcs_length-1] = X[i-1]\n            lcs_length -= 1\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k]:\n            i -= 1\n        elif L[i-1][j][k] < L[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Return the longest common subsequence\n    return ''.join(lcs)",
        "test": "assert lcs_of_three(\"abcdefg\", \"hijklmn\", \"opqrstu\") == \"\"",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Join the words with spaces\n    result =''.join(words)\n    \n    return result",
        "test": "assert capital_words_spaces(\"This Is A Test String\") == \"This Is A Test String\"",
        "num_ids": 131,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str",
        "test": "assert sort_numeric_strings(['10', '2', '3', '4', '5']) == ['2', '3', '4', '5', '10']",
        "num_ids": 168,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "test": "assert add_tuple([1, 2, 3], (4,)) == [1, 2, 3, 4]",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True",
        "test": "assert check_min_heap_helper([4, 2, 7, 1, 3], 2) == True",
        "num_ids": 262,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Return the first K elements of the sorted list\n    return sorted_list[:K]",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 3) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 212,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [3, 4, 5, 6]) == []",
        "num_ids": 199,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 141,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one('ab') == True",
        "num_ids": 78,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs(['abc', 'bca', 'cab', 'cba', 'abcd', 'dcba']) == 4",
        "num_ids": 172,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists",
        "test": "assert unique_sublists([1,2,3,4,5,1,2,3,4,5]) == {(1,2,3): 2, (2,3,4): 2, (3,4,5): 2, (1,2,3,4): 2, (2,3,4,5): 2, (1,2,3,4,5): 2}",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return round(float_num, 2) == float_num\n    except ValueError:\n        return False",
        "test": "assert is_decimal(\"12.34\") == True",
        "num_ids": 112,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1,2,3,4,5]) == False",
        "num_ids": 91,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return True if monthnum3 % 2 == 0 else False",
        "test": "assert check_monthnumber_number(2) == False",
        "num_ids": 128,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([1, 2, 3, 4, 5], 5) == 0",
        "num_ids": 146,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 88,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(i) and is_prime(i+2):\n            count += 1\n        i += 1\n    return i-2\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert is_polite(1) == 2",
        "num_ids": 168,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 150,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 6) == 2",
        "num_ids": 157,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff",
        "test": "assert Diff([1,2,3],[2,3,4]) == [1], \"Diff([1,2,3],[2,3,4]) should return [1]\"",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "test": "assert odd_num_sum(1) == 1",
        "num_ids": 93,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "test": "assert check_expression(\"((()))\") == True",
        "num_ids": 149,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)",
        "test": "assert remove_length(\"hello world\", 3) == \"lo world\"",
        "num_ids": 109,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    if result:\n        return result\n    else:\n        return None",
        "test": "assert occurance_substring(\"hello world\",\"lo\") == [(3, 5)]",
        "num_ids": 144,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "test": "assert odd_position([2, 4, 6, 8, 10]) == True",
        "num_ids": 110,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"world\") == 0",
        "num_ids": 140,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 106,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result",
        "test": "assert pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [[1, 1, 1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists",
        "test": "assert unique_sublists([1,2,3,4,5,1,2,3,4,5]) == {(1, 2, 3): 2, (2, 3, 4): 2, (3, 4, 5): 2}",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                result.append(j)\n    return result",
        "test": "assert find_combinations([(1,2,3), (4,5,6), (7,8,9), (10,11,12)]) == [(1, 4, 7, 10), (1, 4, 7, 11), (1, 4, 7, 12), (1, 4, 8, 11), (1, 4, 8, 12), (1, 4, 9, 12), (1, 5, 8, 11), (1, 5, 8, 12), (1, 5, 9, 12), (1, 6, 9, 11), (1, 6, 9, 12), (2, 5, 7, 10), (2, 5, 7, 11), (2, 5, 7, 12), (2, 5, 8, 11), (2, 5, 8, 12), (2, 5, 9, 12), (2, 6, 8, 11), (2, 6, 8, 12), (2, 6, 9, 12), (3, 6, 7, 10), (3, 6, 7, 11), (3, 6, 7, 12), (3, 6, 8, 11), (3, 6, 8, 12), (3, 6, 9, 12)]",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count",
        "test": "assert count_divisors(10) == 4",
        "num_ids": 103,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += sum(arr[i:j])\n    return sum",
        "test": "assert odd_length_sum([1,2,3,4,5,6]) == 25",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value",
        "test": "assert rgb_to_hsv(255, 255, 255) == (0.0, 0.0, 1.0)",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1[::-1]:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return None",
        "test": "assert mul_even_odd([2, 4, 6, 8, 10]) == 10",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Convert the list of strings to a list of integers\n    int_list = [int(i) for i in str_list]\n    \n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple",
        "test": "assert tuple_str_int('(4,5,6)') == (4,5,6)",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "test": "assert right_insertion([1, 3, 5, 7], 6) == 4",
        "num_ids": 101,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three('abbb') == True",
        "num_ids": 75,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple",
        "test": "assert new_tuple([], \"\") == ()",
        "num_ids": 104,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert even_position([2, 4, 6, 8, 10]) == True",
        "num_ids": 110,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 93,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([[], [], []]) == 3",
        "num_ids": 91,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments:\n    arr: a sorted list of integers\n    x: an integer to be searched in the list\n    \n    It returns the last position of the element x in the list arr.\n    If x is not present in the list, it returns -1.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            # If x is found at mid, then we need to find the last occurrence of x\n            # on the left side of mid\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        \n        elif arr[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    # If x is not found in the list, return -1\n    return -1",
        "test": "assert last([1,2,3,4,5], 5) == 4",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_starta_endb('ab') == None",
        "num_ids": 105,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 109,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum",
        "test": "assert sum_odd(10) == 25",
        "num_ids": 86,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all the elements in the array.\n    \"\"\"\n    return sum(arr)",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 82,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    mask = (2**d - 1) << (32 - d)\n    return (n << d) & mask | (n >> (32 - d))",
        "test": "assert left_rotate(0b10101010, 2) == 0b00101010",
        "num_ids": 141,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\"",
        "num_ids": 79,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "test": "assert test_three_equal(1,2,1) == 2",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    # Find the number of rotations required\n    count = 0\n    for i in range(n):\n        if arr[i] == min_element:\n            break\n        count += 1\n    return count",
        "test": "assert count_rotation([1,2,3,4,5]) == 0",
        "num_ids": 144,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return math.sqrt(n) == int(math.sqrt(n))",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 78,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([1, 2, 3, 4, 5]) == True",
        "num_ids": 116,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]) == [[10,11,12]]",
        "num_ids": 170,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run",
        "test": "assert max_run_uppercase(\"ABCD\") == 4",
        "num_ids": 138,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 99,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "test": "assert check_K((1,2,3), 4) == False",
        "num_ids": 86,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 2, 3), (4, 5, 6)) == False",
        "num_ids": 129,
        "indeed": true
    }
]