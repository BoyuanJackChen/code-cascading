[
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "test": "assert similar_elements([1, 2, 3], [2, 4, 3]) == [2, 3]",
        "num_ids": 1324,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, False otherwise.\n    '''\n    if n <= 1: # if n is less than or equal to 1, it is not a prime number\n        return False\n    elif n == 2: # if n is equal to 2, it is a prime number\n        return True\n    elif n % 2 == 0: # if n is even, it is not a prime number\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2): # check for factors of n up to sqrt(n)\n            if n % i == 0:\n                return False\n        return True",
        "test": "assert is_not_prime(1) == False",
        "num_ids": 1386,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "test": "assert heap_queue_largest([1,2,3,4,5], 5) == [5, 4, 3, 2, 1] # Expected Output",
        "num_ids": 1717,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x /= 2\n    return True",
        "test": "assert is_Power_Of_Two(1) == True, \"1 is a power of 2\"",
        "num_ids": 1088,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to find all words that are at least 4 characters long in the text\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches",
        "test": "assert find_char_long(\"The quick brown fox jumps over the lazy dog\") == [\"quick\", \"brown\", \"jumps\", \"over\", \"lazy\"]",
        "num_ids": 1277,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 1086,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    for i in range(n):\n        if str == str[i:] + str[:i]:\n            return i\n    return n",
        "test": "assert find_Rotations(\"\") == 0",
        "num_ids": 2287,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def remove_Occ(s,ch): \n    '''\n    This function removes the first and last occurrence of the given character from the string.\n    '''\n    if s.count(ch) < 2: \n        return s  # If the character is not present in the string or is present only once, return the original string.\n    else: \n        return s.replace(ch,'',1).replace(ch,'',-1)  # Replace the first and last occurrences of the character with empty strings.",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
        "num_ids": 1486,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def sort_matrix(M):\n    '''\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n    - M (list of lists): The matrix to be sorted.\n\n    Returns:\n    - list of lists: The sorted matrix.\n    '''\n    # Create a list of tuples, where each tuple contains the sum of a row and the row itself\n    sums = [(sum(row), row) for row in M]\n\n    # Sort the list of tuples by the sum of the rows\n    sums.sort()\n\n    # Extract the rows from the sorted tuples and return them as a new matrix\n    return [t[1] for t in sums]",
        "test": "assert sort_matrix([[10,20],[30,40],[5,15]]) == [[5,15], [10,20], [30,40]]",
        "num_ids": 2004,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism and returns its volume.\n    '''\n    volume = (1/2)*l*b*h\n    return volume",
        "test": "assert find_Volume(1,1,1) == 0.5",
        "num_ids": 907,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore('abc_def') == True",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(5) == 20, 'incorrect perimeter calculation'",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def str_to_list(string, remove_chars):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert remove_chars to a set for faster lookup\n    remove_set = set(remove_chars)\n    # Convert string to a list of characters\n    string_list = list(string)\n    # Iterate over the list and remove characters from the remove_set\n    for i in range(len(string_list)):\n        if string_list[i] in remove_set:\n            string_list[i] = ''\n    # Join the list of characters back into a string and return it\n    return ''.join(string_list)",
        "test": "assert str_to_list(\"hello\", \"lo\") == \"he\"",
        "num_ids": 1707,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = set(arraynums)\n    if len(unique_nums)!= len(arraynums):\n        return True\n    else:\n        return False",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 1179,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_woodall(x):\n    '''\n    Check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 3 == 0 and x % 5 == 0:\n        return True\n    elif x % 3 == 0 or x % 5 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(2) == False",
        "num_ids": 1252,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num + int(str(num)[::-1])) == 2*num",
        "test": "assert rev(456) == False",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    num = 0\n    for i in arr:\n        num = num*10 + i\n    return num",
        "test": "assert find_Max_Num([9,9,9,9]) == 9999",
        "num_ids": 1603,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers x and y as input and returns True if they have opposite signs\n    and False otherwise.\n    '''\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-3,4) == True",
        "num_ids": 931,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    octagonal_num = n * (3*n - 2)\n    return octagonal_num",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1416,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            if sum(int(d) for d in sub) == len(sub):\n                count += 1\n    return count",
        "test": "assert count_Substrings(\"123\") == 1 #12+32+23=9",
        "num_ids": 1826,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]  # assume the first number is the smallest\n    for num in xs:\n        if num < smallest:\n            smallest = num  # update the smallest if a smaller number is found\n    return smallest",
        "test": "assert smallest_num([10, 20, 30]) == 10",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([(1,2), (3,4), (5,6)]) == 4",
        "num_ids": 1801,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sorts a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "test": "assert subject_marks([(1,50), (2,60), (3,70), (4,80), (5,90)]) == sorted([(1,50), (2,60), (3,70), (4,80), (5,90)], key=lambda x:x[1])",
        "num_ids": 1890,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        total_sum = 0\n        for item in data_list:\n            total_sum += recursive_list_sum(item)\n        return total_sum",
        "test": "assert recursive_list_sum([1]) == 1",
        "num_ids": 1188,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1,2,3,4,5]) == 5",
        "num_ids": 983,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of ways to partition a set of Bell numbers up to n.\n    \"\"\"\n    bell = [0] * (n+1)\n    bell[0] = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-j-1]\n    return bell[n]",
        "test": "assert bell_number(1) == 1",
        "num_ids": 1293,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Monotonic(A): \n    if len(A) < 2:\n        return True\n    if A[1] > A[0]:\n        return is_Monotonic(A[1:])\n    elif A[1] < A[0]:\n        return is_Monotonic(A[1:])\n    else:\n        return True",
        "test": "assert is_Monotonic([1,2,3,4,5]) == True",
        "num_ids": 1523,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    :param l: the list to search in\n    :param s: the sublist to search for\n    :return: True if l contains s, False otherwise\n    \"\"\"\n    return s == [] or any(is_sublist(l[i:], s[1:]) for i in range(len(l) - len(s) + 1))",
        "test": "assert is_sublist([1, 2, 3, 4, 5], [3, 4]) == True",
        "num_ids": 1604,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = set()\n    for tup in Input:\n        lengths.add(len(tup))\n    if len(lengths) == 1:\n        return True\n    else:\n        return False",
        "test": "assert find_equal_tuple([(1, 2, 3), (4, 5, 6, 7)]) == False",
        "num_ids": 1275,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap // shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "test": "assert comb_sort([]) == []",
        "num_ids": 2265,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_square(n):\n    \"\"\"\n    Check if a number is a perfect square.\n\n    :param n: int\n    :return: bool\n    \"\"\"\n    if int(n**0.5)**2 == n:\n        return True\n    else:\n        return False\n\ndef dif_Square(n): \n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    :param n: int\n    :return: bool\n    \"\"\"\n    if is_square(n) or is_square(n+2) or is_square(n-2):\n        return True\n    else:\n        return False",
        "test": "assert dif_Square(17) == False",
        "num_ids": 1638,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'R' and colors[i]!= 'R':\n            return False\n        elif patterns[i] == 'G' and colors[i]!= 'G':\n            return False\n        elif patterns[i] == 'B' and colors[i]!= 'B':\n            return False\n    return True",
        "test": "assert is_samepatterns(['red', 'green', 'blue', 'yellow'], ['red', 'green', 'blue', 'yellow']) == True",
        "num_ids": 1685,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1,2,3),(4,5,6),(7,8,9),(10,11,12)], 3) == [(3,6,9)]",
        "num_ids": 1940,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Diff(n): \n    '''\n    This function takes an integer as input and returns True if the number is divisible by 11, and False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(11) == True",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert word_len('hello') == True",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_num = (n * (n + 1) * (n + 2)) // 6\n    return tetrahedral_num",
        "test": "assert tetrahedral_number(1) == 1, \"tetrahedral_number(1) should be 1\"",
        "num_ids": 878,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume",
        "test": "assert volume_sphere(1) == 4/3 * math.pi",
        "num_ids": 940,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def get_Char(strr):\n    \"\"\"\n    This function takes a string as input and returns the character made by adding the ASCII value of all the characters of the string modulo 26.\n    \"\"\"\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    \n    # Finding the character by taking the sum modulo 26 and adding ASCII value of 'a'\n    char = chr((sum % 26) + ord('a'))\n    \n    return char",
        "test": "assert get_Char(\"defghijklmnopqrstuvwxyz\") == \"f\"",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]",
        "test": "assert sequence(1) == 1",
        "num_ids": 1366,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4*math.pi",
        "num_ids": 1061,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        hex_num = i * (2 * i - 1)\n        count += hex_num\n        i += 1\n    return hex_num",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({'a':1},{'b':2},{'c':3}) == {'a':1,'b':2,'c':3}",
        "num_ids": 2022,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    '''\n\n    freq_dict = {}\n\n    # Iterate through the list and count the frequency of each element using collections.Counter() method.\n    for element in list1:\n        freq_dict[element] = list1.count(element)\n\n    return freq_dict",
        "test": "assert freq_count([1,2,3,4,5]) == {1:1, 2:1, 3:1, 4:1, 5:1}",
        "num_ids": 1739,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(N-1, -1, -1):\n        if i < N:\n            closest = i\n            break\n    return closest",
        "test": "assert closest_num(10) == 9",
        "num_ids": 1005,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word_length = 0\n    for word in list1:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6",
        "num_ids": 1061,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring(\"hello world\", \"abc\") == False",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer n as input and returns True if n is an undulating number, else it returns False.\n    An undulating number is a positive integer whose digits have a constant difference between them. \n    For example, 123456789 is an undulating number as the difference between each digit is 1.\n    '''\n    # Convert the number to a string and store it in a list\n    num_list = list(str(n))\n\n    # Calculate the difference between each digit and store it in a list\n    diff_list = [int(num_list[i+1]) - int(num_list[i]) for i in range(len(num_list)-1)]\n\n    # Check if the difference list contains only one value or not\n    if len(set(diff_list)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert is_undulating(4) == False",
        "num_ids": 2152,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "test": "assert power(2,0) == 1",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "test": "assert index_minimum([(1, 5), (2, 3), (4, 2)]) == 4",
        "num_ids": 1406,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sub_list in lst:\n        if len(sub_list) < min_len:\n            min_len = len(sub_list)\n    return min_len",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9], []]) == 0",
        "num_ids": 1358,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(10) == 4",
        "num_ids": 832,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for i in item:\n                if i in freq:\n                    freq[i] += 1\n                else:\n                    freq[i] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 2301,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "test": "assert multiply_num([5, 10]) == 25, \"Testing with a list of two numbers\"",
        "num_ids": 1085,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n)[2:]\n    return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = num + 1\n    while not str(palindrome) == str(palindrome)[::-1]:\n        palindrome += 1\n    return palindrome",
        "test": "assert next_smallest_palindrome(131) == 141",
        "num_ids": 3008,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 1153,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)",
        "test": "assert eulerian_num(1,1) == 1, \"1,1\"",
        "num_ids": 1596,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 1598,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "test": "assert count([True, True, True, False, False]) == 3",
        "num_ids": 756,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup",
        "test": "assert add_lists([], ()) == ()",
        "num_ids": 1187,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 or num2 or num3:\n        if num1 and num2 and num3:\n            if num1[0] <= num2[0] and num1[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num1))\n            elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num2))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        elif num1 and num2:\n            if num1[0] <= num2[0]:\n                merged_list.append(heapq.heappop(num1))\n            else:\n                merged_list.append(heapq.heappop(num2))\n        elif num1 and num3:\n            if num1[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num1))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        elif num2 and num3:\n            if num2[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num2))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        elif num1:\n            merged_list.append(heapq.heappop(num1))\n        elif num2:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    return merged_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 3511,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes two arguments:\n    - s: a binary string of length n\n    - n: the number of times to rotate the string\n    \n    It returns the number of numbers with an odd value when the binary string is rotated n times.\n    '''\n    # Convert the binary string to a list of integers\n    binary_list = [int(bit) for bit in s]\n    \n    # Rotate the list n times\n    rotated_list = binary_list[-n:] + binary_list[:-n]\n    \n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for num in rotated_list:\n        if num % 2 == 1:\n            count += 1\n    \n    # Return the count of odd numbers\n    return count",
        "test": "assert odd_Equivalent('101', 1) == 2",
        "num_ids": 1760,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for lst1 in nestedlist:\n        for lst2 in nestedlist:\n            if lst1!= lst2:\n                for element in lst1:\n                    if element in lst2 and element not in common_elements:\n                        common_elements.append(element)\n    return common_elements",
        "test": "assert common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9]]) == []",
        "num_ids": 1769,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"42\") == True",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True",
        "test": "assert empty_dit([{}, {}, {}]) == True",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 973,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        elif isinstance(item, (int, float)):\n            result.append(float(item))\n        else:\n            result.append(item)\n    return result",
        "test": "assert list_to_float([['1', '2', '3'], ['4', '5', '6.7'], ['8', '9.5', '10']]), [[1.0, 2.0, 3.0], [4.0, 5.0, 6.7], [8.0, 9.5, 10.0]]",
        "num_ids": 2219,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 883,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n    if n == 2:\n        if arr[0] == arr[1]:\n            return None\n        return arr[0]\n    for i in range(n):\n        if arr[i]!= arr[0]:\n            break\n    j = i + 1\n    while j < n:\n        if arr[j] == arr[i]:\n            j += 1\n        else:\n            return arr[i]\n    return None",
        "test": "assert search([1, 1, 2, 3, 3, 3, 4, 5]) == 2",
        "num_ids": 2667,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1] - list1[i][1]*list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(1,2), (-3,4), (5,-6), (-7,8)]) == (20, -60)",
        "num_ids": 1814,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def is_amicable(num):\n    '''\n    Returns True if a number is amicable, False otherwise.\n    '''\n    div = sum([i for i in range(1, num) if num % i == 0])\n    return num!= div and num == sum([i for i in range(1, div) if div % i == 0])\n\ndef amicable_numbers_sum(limit):\n    '''\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    '''\n    amicables = [num for num in range(1, limit) if is_amicable(num)]\n    return sum(amicables)",
        "test": "assert amicable_numbers_sum(10000) == 31626",
        "num_ids": 2229,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Returns the angle of the complex number a+bi.\n    \"\"\"\n    return cmath.phase(a + b * 1j)",
        "test": "assert angle_complex(1,1) == cmath.phase(1+1j)",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_str = string[i:j]\n            diff = abs(sub_str.count('0') - sub_str.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert find_length('1010101010') == 1",
        "num_ids": 1753,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisor_sum = 0\n    # Find the list of common divisors\n    divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0]\n    # Sum the common divisors\n    for i in divisors:\n        divisor_sum += i\n    return divisor_sum",
        "test": "assert sum(2,3) == 1",
        "num_ids": 2028,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2,3) == 6",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes two arguments:\n    n: an integer representing the maximum number of characters that a word can have\n    words: a list of words\n    \n    It returns a list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "test": "assert long_words(5, \"Hello World\") == []",
        "num_ids": 1451,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the size of the matrix\n    size = len(my_matrix)\n\n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n\n    # Check if the sum of the first row is equal to the sum of the magic number\n    if row_sum!= size * (size * size + 1) / 2:\n        return False\n\n    # Calculate the sum of each column\n    col_sums = [0] * size\n\n    for j in range(size):\n        col_sum = sum([my_matrix[i][j] for i in range(size)])\n        col_sums[j] = col_sum\n\n        if col_sum!= size * (size * size + 1) / 2:\n            return False\n\n    # Calculate the sum of the diagonal\n    diag_sum1 = sum([my_matrix[i][i] for i in range(size)])\n    diag_sum2 = sum([my_matrix[i][size - i - 1] for i in range(size)])\n\n    if diag_sum1!= size * (size * size + 1) / 2 or diag_sum2!= size * (size * size + 1) / 2:\n        return False\n\n    # If all the checks pass, return True\n    return True",
        "test": "assert magic_square_test([[28, 13, 19], [ 5, 23, 15], [ 7, 17, 27]]) == False",
        "num_ids": 3656,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n\n    for num, count in freq.items():\n        if count == max_freq:\n            return num\n",
        "test": "assert max_occurrences([1, 2, 3, 2, 1, 2, 3]) == 2",
        "num_ids": 1633,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    vowel_indices.reverse()\n    reversed_str = [char for i, char in enumerate(str1) if i not in vowel_indices]\n    return ''.join(reversed_str)",
        "test": "assert reverse_vowels('aeiou') == ''",
        "num_ids": 1793,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string((1, 2, 3)) == \"(1, 2, 3)\"",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers as input and calculates the sum of all the negative numbers in the list.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1132,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth hexagonal number.\n    \"\"\"\n    hex_num = n * (2*n - 1)\n    return hex_num",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 836,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)",
        "test": "assert zero_count(array('i', [1, 2, 3, 0, 4, 5, 0, 6, 7])) == 2/9",
        "num_ids": 1746,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    This function takes an integer as input and returns True if the number can be represented as sum of non-zero powers of 2,\n    otherwise False.\n    '''\n    if n == 0:\n        return True\n    while n % 2 == 0:\n        n //= 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n //= i\n    if n == 1:\n        return True\n    else:\n        return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(0) == True",
        "num_ids": 1917,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 1011,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    This function extracts all the numbers from the list of lists and returns a single set of numbers.\n    \"\"\"\n    result = set()\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            for num in sublist:\n                result.add(num)\n        else:\n            result.add(sublist)\n    return result",
        "test": "assert extract_singly([[1, 2], [3, 4], [5, 6]]) == {1, 2, 3, 4, 5, 6}",
        "num_ids": 1660,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pancake_sort(nums):\n    '''\n    Implementation of Pancake Sort algorithm in Python.\n    '''\n\n    n = len(nums)\n\n    # Start from the largest value and move it to the end of the list\n    for i in range(n - 1, 0, -1):\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Move the maximum value to the end of the list\n        if max_index!= i:\n            nums[max_index], nums[i] = nums[i], nums[max_index]\n            # Reverse the list from 0 to max_index\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n\n    return nums",
        "test": "assert pancake_sort([1]) == [1]",
        "num_ids": 2362,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the number of items that are identical in the same position of the three lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[2,3,4],[4,5,6]) == 0",
        "num_ids": 1336,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "test": "assert find_lists((1, 2, [3, 4], 5)) == 1",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 4",
        "num_ids": 1533,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if i * a + j * b == n:\n                return (i, j)\n    return None",
        "test": "assert find_solution(1, 2, 3) == (1, 1)",
        "num_ids": 1449,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input, list1 and list2, and returns a new list that contains all the elements of list1 that are not present in list2.\n    \"\"\"\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list",
        "test": "assert remove_elements([1, 2, 3], [1, 2]) == [3], \"remove_elements([1, 2, 3], [1, 2]) should return [3]\"",
        "num_ids": 1364,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += (n - 2 * i)\n    return total",
        "test": "assert sum_series(0) == 0",
        "num_ids": 1250,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculates the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter\n    s = s / 2\n    # Calculate the area\n    area = (0.25 * l * s**2) / tan(pi / s)\n    # Return the area\n    return area",
        "test": "assert area_polygon(10, 4) == 100",
        "num_ids": 1213,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            if math.gcd(i, n//i) == 1:\n                return True\n    return False",
        "test": "assert div_sum(2) == True # 2 has divisors 1, 2",
        "num_ids": 1567,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def count_char_position(str1):\n    # Initialize an empty dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Loop through each character in the string and check if it is in the English alphabet (case insensitive)\n    for char in str1:\n        if char.lower() in 'abcdefghijklmnopqrstuvwxyz':\n            # Increment the count of the character in the dictionary\n            if char.lower() in char_count:\n                char_count[char.lower()] += 1\n            else:\n                char_count[char.lower()] = 1\n    \n    # Loop through the dictionary and count the number of characters in the same position as the English alphabet\n    count = 0\n    for i in range(26):\n        if chr(i+97).lower() in char_count:\n            count += 1\n    \n    return count",
        "test": "assert count_char_position(\"Abcdefghijklmnopqrstuvwxyz\") == 26",
        "num_ids": 2648,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def find_even_pair(A):\n    # Create a list of even numbers in A\n    even_numbers = [x for x in A if x % 2 == 0]\n    \n    # Loop through the even numbers and find pairs that xor to an even number\n    pair_count = 0\n    for i in range(len(even_numbers)):\n        for j in range(i+1, len(even_numbers)):\n            if even_numbers[i] ^ even_numbers[j] == 0 and even_numbers[i]!= even_numbers[j]:\n                pair_count += 1\n    \n    return pair_count",
        "test": "assert find_even_pair([2, 3, 4, 5, 6]) == 0",
        "num_ids": 1297,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # If n is a power of 2, return it\n    if n and not (n & (n - 1)):\n        return n\n    \n    # Find the smallest power of 2 greater than n\n    m = 1\n    while m < n:\n        m *= 2\n    \n    return m",
        "test": "assert next_power_of_2(3) == 4",
        "num_ids": 1070,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list 'a' and a number 'x' as inputs and returns the frequency of number 'x' in the list 'a'.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5,1,2,3,4,5],1) == 2",
        "num_ids": 1119,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    This function takes a list and two indices m and n as inputs and returns the sum of all numbers in the list within the range [m, n] (inclusive).\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9",
        "num_ids": 1430,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "test": "assert perimeter_pentagon(1) == 5",
        "num_ids": 824,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Count the number of occurrences of the string'std' in a given string.\n    \"\"\"\n    count = s.count('std')\n    return count",
        "test": "assert count_occurance('hello std world') == 1",
        "num_ids": 962,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 1148,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Find the middle index of the array\n    mid = n // 2\n    \n    # If x is present at the middle index or x is the only element in the array, return True\n    if arr[mid] == x or (arr[mid-1] == arr[mid] == x):\n        return True\n    \n    # If x is greater than the middle element, check if x is present in the right half of the array\n    elif x > arr[mid]:\n        count = 0\n        for i in range(mid, n):\n            if arr[i] == x:\n                count += 1\n        \n        # If x is present more than n/2 times, return True\n        if count > n // 2:\n            return True\n    \n    # If x is less than the middle element, check if x is present in the left half of the array\n    else:\n        count = 0\n        for i in range(mid):\n            if arr[i] == x:\n                count += 1\n        \n        # If x is present more than n/2 times, return True\n        if count > n // 2:\n            return True\n    \n    # If x is not found, return False\n    return False",
        "test": "assert is_majority([1, 2, 3, 4, 4, 4, 4, 5], 8, 1) == False",
        "num_ids": 2245,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes a number as input and returns the number of set bits in it.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "test": "assert odd_values_string('world') == 'wrd'",
        "num_ids": 966,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(3, 2, 1) == 1",
        "num_ids": 966,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Check if all the bits in the range [l, r] are set to 1.\n    :param n: An integer representing the number to check.\n    :param l: An integer representing the left endpoint of the range.\n    :param r: An integer representing the right endpoint of the range.\n    :return: True if all the bits are set, False otherwise.\n    \"\"\"\n    mask = ((1 << (r+1)) - 1) ^ ((1 << l) - 1)  # create a mask that has 1s in the range [l, r] and 0s outside it\n    return (n & mask) == mask  # check if the masked number is equal to the mask itself",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,7) == False",
        "num_ids": 2340,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def re_arrange_array(arr, n):\n    # Separate negative and positive elements\n    neg_elems = sorted([x for x in arr[:n] if x < 0], reverse=True)\n    pos_elems = sorted([x for x in arr[:n] if x >= 0])\n    # Re-arrange the array\n    arr[:n] = neg_elems + pos_elems\n    return arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 2470,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "test": "assert replace_blank(\"hello world\", \"*\") == \"hello*world\"",
        "num_ids": 871,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, lst)",
        "test": "assert larg_nnum([1, 2, 3, 4, 5], 1) == [5]",
        "num_ids": 1753,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface_area = 2 * math.pi * r * h\n    return lateralsurface_area",
        "test": "assert lateralsuface_cylinder(5,10) == 314.1592653589793 ",
        "num_ids": 1599,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "test": "assert volume_cube(2) == 8",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def even_bit_set_number(n):\n    '''\n    Set all even bits of a given number to 1.\n    '''\n    mask = 0xAAAAAAAA # binary representation of 0x55555555\n    return (n & ~mask) | (n & mask)",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 1301,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "test": "assert check_occurences([(1, 2), (2, 3), (1, 2)]) == {(1, 2): 2, (2, 3): 1}",
        "num_ids": 1717,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_of_substrings(str):\n    '''\n    This function takes a string as input and returns the number of non-empty substrings in the string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if len(substring) > 0:\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 1089,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m - 1\n    else:\n        total = 0\n        for i in range(m):\n            total += get_total_number_of_sequences(m, n - 1) * (m - i)\n        return total // (m ** (n - 1))",
        "test": "assert get_total_number_of_sequences(2, 1) == 1  # only one sequence of length 1 is possible: [1]",
        "num_ids": 2053,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2",
        "test": "assert replace_list([1,2,3], [4,5]) == [1,2,4,5]",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_charac(str1):\n    \"\"\"\n    This function takes a string as an argument and returns the total number of characters in the string.\n    \"\"\"\n    return len(str1)",
        "test": "assert count_charac('') == 0",
        "num_ids": 719,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number as input and returns the next perfect square greater than it.\n    '''\n    # Check if the number is a perfect square\n    if math.sqrt(N) == int(math.sqrt(N)):\n        return int(math.pow(int(math.sqrt(N))+1, 2))\n    else:\n        # If the number is not a perfect square, find the nearest perfect square greater than it\n        return int(math.pow(int(math.sqrt(N))+1, 2))",
        "test": "assert next_Perfect_Square(12) == 16",
        "num_ids": 1321,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize variables to keep track of the current sum and the maximum sum seen so far\n    current_sum = arr[0]\n    max_sum = arr[0]\n    # Traverse the array\n    for i in range(1, n):\n        # If the current element is greater than the previous element, add it to the current sum\n        if arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        # Otherwise, reset the current sum to the current element\n        else:\n            current_sum = arr[i]\n        # Update the maximum sum if the current sum is greater than the maximum sum seen so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 2630,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    for i in range(10):\n        x = (x + (number / x)) / 2\n    return x",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 1341,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    # LPS for single characters is always 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Check for subsequence of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n    \n    # Check for subsequence of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    return dp[0][n-1]",
        "test": "assert lps(\"cbbd\") == 2",
        "num_ids": 2595,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "test": "assert harmonic_sum(1) == 1.0",
        "num_ids": 978,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set to store the unique values in array_nums1\n    set_nums1 = set(array_nums1)\n    # Create an empty list to store the intersection of array_nums1 and array_nums2\n    intersection_list = []\n    # Loop through array_nums2 and check if the value is in the set_nums1\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection_list.append(num)\n    return intersection_list",
        "test": "assert intersection_array([1, 2, 3, 4, 5], [2, 4, 6, 8]) == [2, 4]",
        "num_ids": 1428,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count\n",
        "test": "assert count_X((1, 2, 3, 4, 5), 1) == 1",
        "num_ids": 1114,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result",
        "test": "assert insert_element([1,2,3],4) == [4, 1, 4, 2, 4, 3]",
        "num_ids": 1406,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers as input and returns a list of tuples containing their polar coordinates.\n    \"\"\"\n    polar_coords = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        polar_coords.append(polar)\n    return polar_coords",
        "test": "assert convert(2j) == (0.0, cmath.polar(2j)[1]) # line 2",
        "num_ids": 1400,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function takes a list as an input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count",
        "test": "assert count_integer([]) == 0",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(x) for x in combinations_with_replacement(l, n)]",
        "test": "assert combinations_colors(['a', 'b', 'c'], 2) == [('a', 'a'), ('a', 'b'), ('a', 'c'), ('b', 'b'), ('b', 'c'), ('c', 'c')]",
        "num_ids": 2676,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(0) == 0",
        "num_ids": 1588,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 796,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple containing the \n    maximum elements from both tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup",
        "test": "assert maximize_elements((1,2,3), (4,5,6)) == (4,5,6)",
        "num_ids": 1913,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    primes = []  # initialize an empty list to store prime numbers\n    candidate = 2  # start with the first prime number\n\n    while len(primes) < n:  # keep finding primes until we have n of them\n        is_prime = True  # assume the current number is prime until proven otherwise\n        for i in range(2, int(candidate ** 0.5) + 1):\n            if candidate % i == 0:  # if the candidate is divisible by i, it's not prime\n                is_prime = False\n                break\n\n        if is_prime:  # if the candidate is prime, add it to the list of primes\n            primes.append(candidate)\n\n        candidate += 1  # try the next candidate number\n\n    return primes[-1]  # return the nth prime number in the list",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 3520,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]),)\n    return result_tup",
        "test": "assert division_elements((1, 2, 3), (4, 5, 6)) == (0.25, 0.4, 0.5)",
        "num_ids": 1678,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if L > len(list1):\n        raise ValueError(\"L is greater than the length of the list\")\n\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    return (part1, part2)",
        "test": "assert split_two_parts([1,2,3,4,5], 2) == ([1,2], [3,4,5])",
        "num_ids": 1709,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "test": "assert dog_age(5) == 18, \"dog_age should return 18 for h_age=5\"",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]",
        "num_ids": 1930,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function calculates the lateral surface area of a cube with side length \"l\".\n    '''\n    return 6 * l ** 2",
        "test": "assert lateralsurface_cube(3) == 54",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1099,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_star_num(n): \n    '''\n    This function takes an integer n as input and returns then'th star number.\n    '''\n    count = 0\n    result = 0\n    while count < n:\n        result += 1\n        if result % 2!= 0:\n            count += 1\n    return result",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 942,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 623,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "test": "assert sum_even_and_even_index([1,3,5,7,9]) == 0 # no even numbers at even positions",
        "num_ids": 1465,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_Power_Sum(n):\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**5\n    return total",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]",
        "test": "assert rear_extract([(1,2),(3,4)]) == [2, 4]",
        "num_ids": 1329,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 1613,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    even_binomial_Coeff_Sum = 0\n    \n    # Loop through all even indices from 0 to n-2\n    for i in range(0, n-2, 2):\n        # Calculate the binomial coefficient for the current index\n        binomial_coeff = math.comb(n-1, i)\n        \n        # Add the binomial coefficient to the sum if it is even\n        if binomial_coeff % 2 == 0:\n            even_binomial_Coeff_Sum += binomial_coeff\n            \n    return even_binomial_Coeff_Sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1207,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    volume = math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cylinder(2,4) == 50.26548245743669",
        "num_ids": 1227,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({'a': 10, 'b': 5, 'c': 15}, 10) == {'a': 10, 'c': 15}",
        "num_ids": 1534,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            break\n        else:\n            count += 1\n    return count",
        "test": "assert count_first_elements((1,2,3,4,5)) == 0",
        "num_ids": 1335,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    count = 1\n    while count <= n:\n        decagonal_num += count\n        count += 1\n    return decagonal_num",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 5) == (True, 4)",
        "num_ids": 1631,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements in a list are unique.\n    \"\"\"\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False",
        "test": "assert all_unique(['a', 'b', 'c']) == True",
        "num_ids": 1147,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns a list containing the element-wise subtraction of the two lists.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3]",
        "num_ids": 1356,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def validate(n): \n    freq = [0]*10\n    while n>0: \n        freq[n%10]+=1\n        n//=10\n    for i in freq: \n        if i>i: \n            return False\n    return True",
        "test": "assert validate(12345) == True",
        "num_ids": 1245,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element as input and returns True if all the elements in the list are equal to the given element.\n    \"\"\"\n    if len(set(lst)) == 1:\n        return lst[0] == elem\n    else:\n        return False",
        "test": "assert check_element([1,1,1,1],1) == True",
        "num_ids": 1117,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\w{1,2}b\\w{1,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three('abc') == False",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = 0\n    for i in range(k):\n        temp_sum = 0\n        for j in range(n):\n            temp_sum += a[j]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 1) == 15",
        "num_ids": 2416,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the first n even numbers\n    for i in range(2, 2*n, 2):\n        # Add the square of the current even number to the sum\n        sum += i**2\n        \n    # Return the sum of squares of first n even numbers\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "test": "assert max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]) == [7, 8, 9, 10]",
        "num_ids": 1645,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def count_no_of_ways(n, k):\n    if n < 0 or k < 0:\n        return 0\n    \n    if n == 0 or k == 1:\n        return 1\n    \n    if n == 1:\n        return k\n    \n    dp = [[0] * k for _ in range(n+1)]\n    \n    for i in range(k):\n        dp[1][i] = 1\n        \n    for i in range(2, n+1):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1]\n            \n    return dp[n][k-1]",
        "test": "assert count_no_of_ways(1, 1) == 1 ",
        "num_ids": 2053,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m",
        "test": "assert find(4,2) == 2",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    a = math.sqrt(w**2 + h**2)\n    return a",
        "test": "assert otherside_rightangle(3,4) == 5.0",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_val(listval):\n    \"\"\"\n    This function finds the maximum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "test": "assert sum_div(1) == 1",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                count += 1\n    return count",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0",
        "num_ids": 2555,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert flatten_list([]) == []",
        "num_ids": 1668,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    if n == 0:\n        return 0\n    \n    # create a dictionary to store the frequency of each city pair\n    freq = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1, n):\n            city1, city2, dist = stdata[i]\n            city3, city4, dist = stdata[j]\n            if city1 == city3 and city2 == city4:\n                freq[(city1, city2)] += 1\n                freq[(city2, city1)] += 1\n    \n    # calculate the maximum aggregate\n    max_agg = 0\n    for k, v in freq.items():\n        city1, city2 = k\n        max_agg += v * (dist ** 2)\n    \n    return max_agg",
        "test": "assert max_aggregate([(1,3), (2,4), (5,6), (7,8)]) == 22",
        "num_ids": 2363,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    \n    # loop over all possible combinations of first n bits\n    for first_bits in range(2**n):\n        # convert first_bits to binary string and remove leading '0b'\n        first_bits_str = bin(first_bits)[2:]\n        \n        # compute the sum of first n bits\n        first_bits_sum = sum(int(digit) for digit in first_bits_str[:n])\n        \n        # loop over all possible combinations of last n bits\n        for last_bits in range(2**n):\n            # convert last_bits to binary string and remove leading '0b'\n            last_bits_str = bin(last_bits)[2:]\n            \n            # compute the sum of last n bits\n            last_bits_sum = sum(int(digit) for digit in last_bits_str[:n])\n            \n            # if the sums are equal, add 1 to the count\n            if first_bits_sum == last_bits_sum:\n                count += 1\n    \n    return count",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 1576,
        "indeed": true
    },
    {
        "number": 301,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def dict_depth(d, depth=1):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return depth\n    max_depth = depth\n    for value in d.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, dict_depth(value, depth+1))\n    return max_depth",
        "test": "assert dict_depth({'a': 1, 'b': {'c': 2, 'd': {'e': 3}}}) == 3",
        "num_ids": 1255,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    low, high = 0, n - 1\n    for i in range(rotations):\n        mid = (low + high) // 2\n        if index >= arr[mid]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[(low + high) // 2]",
        "test": "assert find_Element([1,2,3,4,5],[[1,5]],1,3) == 4",
        "num_ids": 2266,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p\\w+', word):\n            p_words.append(word)\n    if len(p_words) < 2:\n        return \"Not enough words starting with 'p' found\"\n    else:\n        return p_words[0], p_words[1]",
        "test": "assert start_withp(['apple', 'pear', 'peach', 'pineapple', 'plum']) == ('pear', 'peach'), \"Incorrect output for input ['apple', 'pear', 'peach', 'pineapple', 'plum']\"",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a dp array of size n\n    dp = [0] * n\n\n    # Initialize the dp array with the first element\n    dp[0] = a[0]\n\n    # Traverse through the array from 1st element to kth element (k > i)\n    for i in range(1, k - index + 1):\n        # Find the maximum element in the dp array that is less than a[i]\n        max_element = -1\n        for j in range(i):\n            if dp[j] < a[i] and dp[j] > max_element:\n                max_element = dp[j]\n\n        # If max_element is -1, then the current element cannot be part of the increasing subsequence, so dp[i] = a[i]\n        if max_element == -1:\n            dp[i] = a[i]\n        else:\n            # Otherwise, the current element can be part of the increasing subsequence, so dp[i] = max_element + a[i]\n            dp[i] = max_element + a[i]\n\n    # Traverse through the array from kth element to last element\n    max_sum = -1\n    for i in range(k - index + 1, n):\n        # Find the maximum element in the dp array that is less than a[i]\n        max_element = -1\n        for j in range(k - index + 1):\n            if dp[j] < a[i] and dp[j] > max_element:\n                max_element = dp[j]\n\n        # If max_element is -1, then the current element cannot be part of the increasing subsequence, so dp[i] = a[i]\n        if max_element == -1:\n            dp[i] = a[i]\n        else:\n            # Otherwise, the current element can be part of the increasing subsequence, so dp[i] = max_element + a[i]\n            dp[i] = max_element + a[i]\n\n        # Update max_sum if the current sum is greater than max_sum\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n\n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1,2,3,4,5], 5, 0, 3) == 9",
        "num_ids": 3046,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Return a colon of a tuple, with given start and end indices.\n    '''\n    colon = deepcopy(tuplex)\n    colon = colon[m:n]\n    return colon",
        "test": "assert colon_tuplex((1,2,3,4,5),0,5) == (1,2,3,4,5)",
        "num_ids": 1469,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for i in range(N):\n        max_product = -float('inf')\n        for j in range(len(nums1)):\n            if nums1[j] <= nums2[i]:\n                product = nums1[j] * nums2[i]\n                if product > max_product:\n                    max_product = product\n        max_products.append(max_product)\n    return max_products",
        "test": "assert large_product([10, 20, 30, 40], [5, 15, 25, 35], 3) == [1000, 3000, 2000]",
        "num_ids": 2418,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2,3) == 3",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and returns a tuple of characters.\n    \"\"\"\n    # Convert the string to a tuple of characters\n    char_tuple = tuple(str1)\n    return char_tuple",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the integer with the left most unset bit set to 1.\n    \"\"\"\n    return n | (n + 1)",
        "test": "assert set_left_most_unset_bit(0b00000000) == 0b00000001",
        "num_ids": 1645,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in two arguments:\n    r: radius of the base of the cone\n    h: height of the cone\n    \n    It returns the volume of the cone.\n    '''\n    return (1 / 3) * math.pi * r ** 2 * h",
        "test": "assert volume_cone(5,10)==math.pi*5**2*10/3",
        "num_ids": 1233,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 991,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 965,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list",
        "test": "assert add_string(['apple', 'banana', 'orange'], 'The fruit is {}') == ['The fruit is apple', 'The fruit is banana', 'The fruit is orange']",
        "num_ids": 1322,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    This function takes in three lists and converts them to a nested dictionary.\n    '''\n    # create an empty dictionary to store the nested dictionary\n    result = {}\n    \n    # iterate through each list and add them as key-value pairs in the nested dictionary\n    for i, l in enumerate([l1, l2, l3]):\n        result[f'list_{i+1}'] = {f'item_{j+1}': val for j, val in enumerate(l)}\n    \n    return result",
        "test": "assert convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], [True, False]) == [{'0': 1, '1': 'a', '2': True}, {'0': 2, '1': 'b', '2': False}, {'0': 3, '1': 'c', '2': True}]",
        "num_ids": 2321,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 2160,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list",
        "test": "assert max_length_list([[]]) == []",
        "num_ids": 1543,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))",
        "test": "assert check_distinct((1,2,3)) == True",
        "num_ids": 812,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return \"All characters are repeated.\"",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 1654,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re  \n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_char('abc') == False",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and finds the median of them.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        # If the length of the sorted list is even, take the average of the middle two numbers\n        median = (sorted_numbers[len(sorted_numbers) // 2] + sorted_numbers[len(sorted_numbers) // 2 - 1]) / 2\n    else:\n        # If the length of the sorted list is odd, take the middle number\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    return median",
        "test": "assert median_numbers(3,2,1) == 2",
        "num_ids": 1406,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45",
        "num_ids": 1535,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if i >= len(test_tup1):\n            result += (test_tup2[i],)\n        elif i >= len(test_tup2):\n            result += (test_tup1[i],)\n        else:\n            result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "test": "assert bitwise_xor((0, 1, 0), (1, 1, 1)) == (1, 0, 1)",
        "num_ids": 1537,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)",
        "test": "assert extract_freq([('apple', 'banana'), ('banana', 'orange'), ('apple', 'orange'), ('pear', 'banana'), ('apple', 'pear')]) == 5",
        "num_ids": 1432,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "test": "assert add_nested_tuples(((1,2),(3,4)), ((5,6),(7,8))) == ((6,8),(10,12))",
        "num_ids": 2030,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2, 3) == 2",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if set(tuplex) >= set(tuple1):\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex((1,2,3),(4,)) == False",
        "num_ids": 1018,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer as input and returns True if the parity of the input number is odd, and False otherwise.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False",
        "test": "assert find_Parity(1) == True",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n = list(n)\n    n.sort(reverse=True)\n    if n == list(map(int, n)):\n        return -1\n    n = list(map(str, n))\n    n = int(\"\".join(n))\n    return n",
        "test": "assert rearrange_bigger(12) == 21",
        "num_ids": 2400,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    while k > 0:\n        pairs.append((nums1[heap[0][1]], nums2[heap[0][2]]))\n        heapq.heappop(heap)\n        k -= 1\n    return pairs",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)]",
        "num_ids": 2011,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Returns the minimum product of two tuples in a list of tuples.\n\n    :param lst: list of tuples\n    :return: minimum product of two tuples\n    \"\"\"\n    min_product = None\n    for t1 in lst:\n        for t2 in lst:\n            if t1!= t2:\n                product = t1[0] * t1[1] * t2[0] * t2[1]\n                if min_product is None or product < min_product:\n                    min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1,2), (3,4), (5,6)]) == 24",
        "num_ids": 1790,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    :param l: A list of integers.\n    :return: A new list with all odd numbers removed.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]",
        "test": "assert remove_odd([1,2,3,4,5]) == [2,4]",
        "num_ids": 957,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n\n    Args:\n        lst (list): A list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        The nth element from the list of tuples.\n    \"\"\"\n    return lst[n-1][1]",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == 4",
        "num_ids": 1257,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def overlapping(list1,list2):\n    '''\n    This function takes two sequences as inputs and returns True if there are any common values between them.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3], [2,3,4]) == True",
        "num_ids": 1040,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = arr[0]\n    max_num_index = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            max_num_index = i\n    \n    second_max_num = arr[0]\n    for i in range(len(arr)):\n        if i!= max_num_index:\n            if arr[i] > second_max_num:\n                second_max_num = arr[i]\n    \n    product = max_num * second_max_num\n    return product",
        "test": "assert max_Product([1,2,3,4,5]) == 20",
        "num_ids": 1924,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def group_tuples(Input):\n    # initialize an empty dictionary to store the first elements as keys and the tuples as values\n    first_elements = {}\n    \n    # iterate over the input list of tuples\n    for tup in Input:\n        # extract the first element of the tuple\n        first_element = tup[0]\n        \n        # check if the first element is already a key in the dictionary\n        if first_element in first_elements:\n            # if yes, append the current tuple to the list of tuples for that key\n            first_elements[first_element].append(tup)\n        else:\n            # if not, create a new key-value pair with the first element as the key and a list containing the current tuple as the value\n            first_elements[first_element] = [tup]\n    \n    # iterate over the dictionary of first elements and find the first element that appears in more than one tuple\n    for key, value in first_elements.items():\n        if len(value) > 1:\n            return key\n    \n    # if no common first element is found, return None\n    return None",
        "test": "assert group_tuples([(1, 2), (3, 4), (5, 6)]) == None",
        "num_ids": 1649,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    \n    return max_element",
        "test": "assert Find_Max(['apple', 'banana', 'cherry']) == 'banana'",
        "num_ids": 1208,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "test": "assert round_and_sum([-1.2, 2.3, -3.4, 4.5, -5.6]) == -2.9, \"Error: The sum of rounded numbers is not correct.\"",
        "num_ids": 1359,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 947,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \",\"\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    concatenated_string = concatenated_string[:-1] # Remove the last delimiter\n    return concatenated_string",
        "test": "assert concatenate_tuple(('apple', 'banana', 'cherry')) == 'apple,banana,cherry'",
        "num_ids": 1321,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    \n    average_of_cubes = sum_of_cubes / n\n    \n    return average_of_cubes",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1163,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "test": "assert extract_rear(('apple', 'banana', 'orange')) == 'orange'",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function counts the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            count += count_element_in_list(list1[i], x)\n        elif list1[i] == x:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([[1,2,3],[4,5,6],[7,8,9],[10]], 5) == 1",
        "num_ids": 1273,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers from the input list.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert filter_oddnumbers([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 1023,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return '{}-{}-{}'.format(day, month, year)\n    else:\n        return None",
        "test": "assert change_date_format('2022-01-01') == '01-01-2022'",
        "num_ids": 1697,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list",
        "test": "assert shell_sort([]) == []",
        "num_ids": 1998,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple containing the elementwise and values of the two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i], )\n    return result_tup",
        "test": "assert and_tuples((True, True, True), (True, True, True)) == (True, True, True)",
        "num_ids": 1342,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes the coefficients of a parabola equation in the form of:\n    y = ax^2 + bx + c\n    \n    and returns the value of the directrix (x-axis intersection) of the parabola.\n    '''\n    return (-b)/(2*a)",
        "test": "assert parabola_directrix(1, -2, 1) == 1",
        "num_ids": 1655,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3], [3, 4, 5]) == True",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = (base1 + base2) / 2\n    return median_length",
        "test": "assert median_trapezium(5,3,4) == 4",
        "num_ids": 1082,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "test": "assert check_greater([1,2,3,4,5], 4) == True",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a[b]+\\w\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_match_one(\"abbb\") == \"abbb\"",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Returns the last digit of a given number.\n    \"\"\"\n    if n < 0:\n        n = -n\n    return n % 10",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 707,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result",
        "test": "assert neg_nos([1, 2, 3, 4, -5, -6, -7, -8, -9, -10]) == [-5, -6, -7, -8, -9, -10]",
        "num_ids": 1223,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str",
        "test": "assert remove_odd('hello') == 'hll'",
        "num_ids": 1048,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n            elif test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(1, 2), (3, 4), (5, 6)]) == 0",
        "num_ids": 1740,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result",
        "test": "assert multiple_to_single([0,0,0,0,0]) == 0",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b(very|extremely|really|quite|rather|pretty|most|actually|actually)\\b', re.IGNORECASE)\n    match = pattern.search(text)\n    if match:\n        return (match.start(), match.end())\n    else:\n        return None",
        "test": "assert find_adverb_position(\"I read a book yesterday.\") == (8, 'yesterday')",
        "num_ids": 1886,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2",
        "test": "assert surfacearea_cube(1) == 6, \"The surface area of a cube of size 1 is 6.\"",
        "num_ids": 819,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "test": "assert positive_count(array('i', [0, 0, 0, 0])) == 0/4",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < largest and list1[i] < 0:\n            largest = list1[i]\n    return largest",
        "test": "assert largest_neg([0, 2, 5, -1]) == -1",
        "num_ids": 1198,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[K:])\n    return result_list",
        "test": "assert trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [(2, 3), (5, 6), (8, 9)]",
        "num_ids": 1705,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input, test_tup1 and test_tup2, and returns a new tuple\n    where each element is the result of multiplying the corresponding elements in test_tup1 and\n    test_tup2.\n    \"\"\"\n    # Create an empty tuple to store the result.\n    result = ()\n    \n    # Iterate through the indices of the tuples using a for loop.\n    for i in range(len(test_tup1)):\n        # Multiply the corresponding elements and append the result to the result tuple.\n        result += (test_tup1[i] * test_tup2[i],)\n    \n    # Return the result tuple.\n    return result",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == (4,10,18)",
        "num_ids": 1545,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input, and returns a dictionary with the count of each element of the list in the tuple.\n    '''\n    count_dict = Counter(lst)\n    for item in tup:\n        if item in count_dict:\n            count_dict[item] += 1\n    return count_dict",
        "test": "assert count_Occurrence(('a', 'b', 'c', 'd', 'e'), ['b', 'c', 'e', 'f']) == {'b': 1, 'c': 1, 'e': 1, 'f': 0}",
        "num_ids": 1841,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 1203,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)",
        "test": "assert cal_sum(1) == 1",
        "num_ids": 1073,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n\n    Parameters:\n    str_list (list): A list of string values.\n    size (int): The size of the strings to extract.\n\n    Returns:\n    list: A list of extracted string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(''.join(str_list[i:i+size]))\n    return result",
        "test": "assert extract_string(\"abc\", 1) == [\"a\", \"b\", \"c\"]",
        "num_ids": 1392,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(remove_whitespaces(text))",
        "test": "assert remove_whitespaces(\"This is a     test string.\") == \"Thisisateststring.\"",
        "num_ids": 990,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(100,100) == 0",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of even factors of the number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum",
        "test": "assert sumofFactors(2) == 2",
        "num_ids": 1462,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = 'The quick brown fox jumps over the lazy dog. The dog slept over the veranda.'\nmatches = text_match_wordz(text)\nprint(matches)",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog.\") == [\"lazy\"]",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        if monthnum % 2 == 0:\n            return True\n        else:\n            return False",
        "test": "assert check_monthnumb_number(2) == True # February has 28 or 29 days depending on the year",
        "num_ids": 1455,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for string in stringlist:\n        reversed_stringlist.append(string[::-1])\n    return reversed_stringlist",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 1179,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst",
        "test": "assert Find_Min([[1,2,3],[4,5],[6,7,8,9]]) == [4,5]",
        "num_ids": 1587,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(5,7) == 35",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    # Regular expression to match all uppercase substrings in the string\n    pattern = re.compile('[A-Z]+')\n    # Findall method returns all the matches in the string\n    matches = pattern.findall(str1)\n    # Join all the matches into a single string\n    uppercase_str = ''.join(matches)\n    # Remove all uppercase substrings from the original string using the replace method\n    new_str = str1.replace(uppercase_str, '')\n    return new_str",
        "test": "assert remove_uppercase('hello world') == 'hello world'",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1, 4, 7]",
        "num_ids": 1080,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"Hello, World!\") == 2",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list as input and returns a list of all possible combinations of the elements of the list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append((lst[i], lst[j]))\n    return result",
        "test": "assert combinations_list([]) == [], \"combinations_list([]) should return []\"",
        "num_ids": 1974,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6",
        "num_ids": 1889,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_set = set(dict.values())\n    if len(value_set) == 1:\n        return True\n    else:\n        return False",
        "test": "assert check_value({'a':1, 'b':1, 'c':1}, 1) == True, \"All values should be 1\"",
        "num_ids": 1285,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}",
        "test": "assert drop_empty({'a': 1, 'b': '', 'c': 3}) == {'a': 1, 'c': 3}",
        "num_ids": 1233,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return arr[0]\n\n    # Initialize the maximum product and the current maximum\n    max_product = arr[0]\n    curr_max = arr[0]\n\n    # Iterate through the array and update the maximum product\n    for i in range(1, n):\n        if arr[i] < curr_max:\n            curr_max = arr[i]\n        else:\n            curr_max, prev_max = arr[i], curr_max\n            max_product = max(max_product, prev_max * curr_max)\n\n    return max_product",
        "test": "assert max_product([-2, 0, -1]) == 0",
        "num_ids": 2386,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i] + test_tup[i+1])\n    return res",
        "test": "assert add_pairwise((10, 20, 30, 40)) == (30, 60, 90)",
        "num_ids": 1386,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n",
        "test": "assert find_remainder([1,2,3], 5) == 1",
        "num_ids": 970,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False",
        "test": "assert check_Consecutive([1, 2, 3, 4, 6]) == True",
        "num_ids": 1115,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for item in test_list1:\n        if item in test_list2:\n            intersection.append(item)\n    return intersection",
        "test": "assert tuple_intersection([(1,2),(3,4),(5,6)], [(7,8),(9,10)]) == []",
        "num_ids": 1917,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char('hello', 'l', 'x') == 'hexxo'",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    return counter.most_common()",
        "test": "assert sort_counter({'a': 1, 'b': 1, 'c': 1}) == [('a', 1), ('b', 1), ('c', 1)]",
        "num_ids": 1543,
        "indeed": true
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num",
        "test": "assert big_sum([-10, 0, 10]) == 0",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower('hello world') == 'hello world'",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Find all lowercase substrings using regex\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', str1)\n    # Create a list of all non-lowercase substrings\n    non_lowercase_substrings = [s for s in re.split(r'\\b[a-z]+\\b', str1) if s.strip()!= '']\n    # Combine the non-lowercase substrings with the lowercase substrings\n    result = ''.join(non_lowercase_substrings + lowercase_substrings)\n    return result",
        "test": "assert remove_lowercase(\"AbCDeFgHiJkLmNoPqRsTuVwXyZ\") == \"AbCDeFgHiJkLmNoPqRsTuVwXyZ\"",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10 ** (len(str(n)) - 1) % 10",
        "test": "assert first_Digit(12345) == 1",
        "num_ids": 881,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "test": "assert Split([1,2,3,4,5,6,7,8,9]) == [1, 3, 5, 7, 9]",
        "num_ids": 979,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
        "test": "assert difference(1) == 0 ",
        "num_ids": 1323,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,3,5,7,9],5) == 0",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "test": "assert toggle_string('Hello World') == 'hELLO wORLD'",
        "num_ids": 932,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    # Check if the integers have different lengths\n    if len(str1)!= len(str2):\n        print(\"Error: the two integers must have the same number of digits.\")\n        return\n    # Compute the sum of the per-digit differences\n    diff_sum = 0\n    for i in range(len(str1)):\n        diff_sum += abs(int(str1[i]) - int(str2[i]))\n    return diff_sum",
        "test": "assert digit_distance_nums(123, 456) == 9, \"Test case 1 failed\"",
        "num_ids": 1983,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function finds the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "test": "assert max_sub_array_sum([1, 2, 3, 4, 5], 5) == 15",
        "num_ids": 1800,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    \n    # Convert the combined tuple to a set (to remove duplicates) and back to a tuple\n    unique_tup = tuple(sorted(set(combined_tup)))\n    \n    # Return the unique tuple\n    return unique_tup",
        "test": "assert union_elements((1,2,3), (2,3,4)) == (1,2,3,4)",
        "num_ids": 1782,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_len:\n                max_len = len(lst[i:j])\n                \n    return max_len",
        "test": "assert Find_Max_Length([]) == 0 # test an empty list",
        "num_ids": 1364,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values('The price is \"20$\".') == ['20$']",
        "num_ids": 1057,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Pairs(arr,n): \n    count = 0 \n    for i in range(n-1): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1 \n    return count ",
        "test": "assert count_Pairs([1,2,3,4,5],5)==10",
        "num_ids": 1312,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split(word):\n    '''\n    This function takes a string as an input and returns a list of characters.\n    '''\n    return list(word)",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_digits(n):\n    '''\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    '''\n    # Initialize the sum to zero\n    total = 0\n    \n    # Iterate through each digit of the number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        \n        # Add the digit to the sum\n        total += digit\n        \n        # Remove the last digit from the number\n        n = n // 10\n    \n    # Return the total sum of digits\n    return total",
        "test": "assert sum_digits(12345) == 15",
        "num_ids": 1260,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(0, n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 1107,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    This function takes a list of lists as input and sorts each sublist of strings in it.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['dog', 'cat', 'bird'], ['pear', 'orange', 'plum']]) == [['apple', 'banana', 'cherry'], ['bird', 'cat', 'dog'], ['orange', 'pear', 'plum']]",
        "num_ids": 1574,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)",
        "test": "assert two_unique_nums([1, 2, 2]) == [1, 2]",
        "num_ids": 1651,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = set(list_data)  # get the unique numbers in the list\n    product = 1\n    for num in unique_numbers:\n        product *= num  # multiply the product with each unique number\n    return product",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 1175,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns the surface area of the cylinder.\n    '''\n    area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return area",
        "test": "assert surfacearea_cylinder(2,3) == 50.26548245743669",
        "num_ids": 1597,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if set(B).issubset(set(A)): \n        return True \n    else: \n        return False",
        "test": "assert is_Sub_Array([1,2,3,4,5],[1,2,3,4,5]) == True",
        "num_ids": 1675,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function returns the last digit in factorial of a given number.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact % 10",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 2012,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 3)) == []",
        "num_ids": 1803,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    This function takes a nested tuple as input and applies the even_fnc to every element.\n    If the even_fnc returns True for an element, it is kept in the new tuple.\n    If the even_fnc returns False for an element, it is removed from the new tuple.\n    \"\"\"\n    new_tuple = []\n    for element in test_tuple:\n        if type(element) == tuple:\n            new_tuple.append(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            new_tuple.append(element)\n    return tuple(new_tuple)\n",
        "test": "assert even_ele((1, 2, 3), lambda x: x%2 == 0) == (2, )",
        "num_ids": 2228,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def surface_Area(b,h):\n    '''\n    This function takes the base edge b and height h of a square pyramid as input and returns its surface area.\n    '''\n    area = (6*b*h) + (4*b*b)\n    return area",
        "test": "assert surface_Area(5, 10) == 400",
        "num_ids": 1559,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty.\n    If the dictionary is empty, it returns True, else it returns False.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert not my_dict({'a': 1, 'b': 2}), \"The dictionary is not empty\" # check if the dictionary is not empty",
        "num_ids": 736,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if num == 0 or num == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - i - 1)\n        return result",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1239,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    adverbs = []\n    for match in matches:\n        adverbs.append((match.group(), match.start()))\n    return adverbs",
        "test": "assert find_adverbs(\"He was carefully listening to the music while playing the guitar.\")!= [(12, 'while'), (17, 'while')]",
        "num_ids": 1771,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return [item for item in reversed(heap)]",
        "test": "assert expensive_items([(\"apple\", 3), (\"banana\", 2), (\"orange\", 4), (\"grape\", 1)], 1) == [(\"orange\", 4)]",
        "num_ids": 2597,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "test": "assert split_Arr([1,2,3,4,5], 5) == [1,2,3,4,5]",
        "num_ids": 1191,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as an input and returns a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 831,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "test": "assert big_diff([1,2,3,4,5]) == 4",
        "num_ids": 954,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i == int(i**0.5)**2:\n            result.append(i)\n    return result",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9], \"Test 1 failed\"",
        "num_ids": 1404,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import cmath\n\ndef polar_rect(rho,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y",
        "test": "assert polar_rect(1,0) == (1,0)",
        "num_ids": 1221,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the length of the list is at least 2\n    if length >= 2:\n        # Get the first element\n        first_element = newList[0]\n        \n        # Get the last element\n        last_element = newList[length-1]\n        \n        # Replace the first element with the last element\n        newList[0] = last_element\n        \n        # Replace the last element with the first element\n        newList[length-1] = first_element\n        \n        # Return the modified list\n        return newList\n    else:\n        # Return the original list if the length is less than 2\n        return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1409,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function will calculate the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res = res * (n - i) // (i + 1)\n    return res",
        "test": "assert binomial_Coeff(5,2) == 10",
        "num_ids": 1349,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    new_ip = ''\n    for i in ip_list:\n        if i.startswith('0') and len(i) > 1:\n            i = i.lstrip('0')\n            if not i:\n                new_ip += '0.'\n            else:\n                new_ip += i + '.'\n        else:\n            new_ip += i + '.'\n    return new_ip[:-1]",
        "test": "assert removezero_ip('192.168.0.1') == '192.168.0.1'",
        "num_ids": 1526,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function finds the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = lst[0]\n    odd_num = lst[1]\n    diff = abs(even_num - odd_num)\n    return diff",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5, 6]) == 1",
        "num_ids": 1715,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of integers\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n    \n    # Pad the lists with zeros to ensure they are the same length\n    if len(list1) < len(list2):\n        list1 += [0] * (len(list2) - len(list1))\n    elif len(list2) < len(list1):\n        list2 += [0] * (len(list1) - len(list2))\n    \n    # Initialize variables for tracking the number of swaps and the current position in the lists\n    swaps = 0\n    pos1 = 0\n    pos2 = 0\n    \n    # Loop through the lists, comparing digits and swapping as necessary\n    while pos1 < len(list1) and pos2 < len(list2):\n        if list1[pos1]!= list2[pos2]:\n            # Check if the digits are the same, if not, swap and increment the swap count\n            if list1[pos1] == 0:\n                swaps += 1\n                list2[pos2], list1[pos1] = list1[pos1], list2[pos2]\n                pos1 += 1\n                pos2 += 1\n            elif list2[pos2] == 0:\n                swaps += 1\n                list1[pos1], list2[pos2] = list2[pos2], list1[pos1]\n                pos1 += 1\n                pos2 += 1\n            else:\n                pos1 += 1\n                pos2 += 1\n        else:\n            pos1 += 1\n            pos2 += 1\n    \n    # Return the final number of swaps\n    return swaps",
        "test": "assert min_Swaps(\"111000\",\"101010\") == 2 # the expected output is 2",
        "num_ids": 2904,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple(tuple_list))\n    return size",
        "test": "assert tuple_size([(((),),)]) == sys.getsizeof((((),),))",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Get the total length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize the pointers for both arrays\n    i = 0\n    j = 0\n\n    # Loop until the kth element is found\n    while k > 0:\n        # Check if the current element in arr1 is smaller than arr2[j]\n        if i == n1 or (j < n2 and arr1[i] > arr2[j]):\n            # If true, move the pointer of arr1 to the right\n            i += 1\n        else:\n            # If false, move the pointer of arr2 to the right\n            j += 1\n\n        # Decrement k\n        k -= 1\n\n    # If k is still greater than 0, then the element is not present in the arrays\n    if k > 0:\n        return None\n\n    # If both elements are the same, return the element\n    if arr1[i-1] == arr2[j-1]:\n        return arr1[i-1]\n\n    # Otherwise, return the smaller element\n    return min(arr1[i-1], arr2[j-1])",
        "test": "assert find_kth([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == 5",
        "num_ids": 2960,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def armstrong_number(number):\n    '''\n    This function checks whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    num = str(number)\n\n    # Calculate the length of the number\n    length = len(num)\n\n    # Calculate the sum of the cubes of each digit\n    sum_of_cubes = sum([int(digit)**length for digit in num])\n\n    # Check if the sum is equal to the given number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 1720,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count\n    total = 0\n    count = 0\n\n    # loop through first n natural numbers\n    for i in range(1, number+1):\n        total += i\n        count += 1\n\n    # calculate average\n    average = total / count\n\n    # return the sum and average\n    return total, average",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 1079,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as an argument and returns True if it is even, and False if it is odd.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 665,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n\n    return None",
        "test": "assert first_repeated_char(\"abca\") == \"a\"",
        "num_ids": 1071,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, i)):\n            ludic.append(i)\n    return ludic",
        "test": "assert get_ludic(0) == []",
        "num_ids": 2395,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n\n    # Join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n\n    return reversed_string",
        "test": "assert reverse_words(\"The quick brown fox jumps over the lazy dog\") == \"dog lazy the over jumps fox brown quick The\"",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if a given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    \n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    \n    return True",
        "test": "assert prime_num(2) == True # 2 is a prime number",
        "num_ids": 946,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes degrees as input and returns the equivalent radians.\n    '''\n    radians = (math.pi/180) * degree\n    return radians",
        "test": "assert radian_degree(90) == math.pi/2",
        "num_ids": 823,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"hello world\", r\"\\w+\") == ('hello', 0, 5)",
        "num_ids": 1302,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth bell number.\n    '''\n    bell = [0] * (n + 1)  # create a list of n+1 elements initialized to 0\n    bell[0] = 1  # initialize first bell number as 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - 1 - j]\n    return bell[n]",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def remove_kth_element(list1, k):\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k:\n            new_list.append(list1[i])\n    return new_list",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 4, 5]",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    This function takes a list of lists as input and returns the maximum value of the Nth column.\n    \"\"\"\n    # Get the length of the list\n    n = len(test_list)\n    \n    # Create a list to store the maximum values\n    max_list = []\n    \n    # Iterate over the rows of the list\n    for i in range(n):\n        # Get the Nth element of the row\n        element = test_list[i][N-1]\n        \n        # Add the element to the max_list\n        max_list.append(element)\n    \n    # Find the maximum value in the max_list\n    max_value = max(max_list)\n    \n    return max_value",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 8",
        "num_ids": 1749,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def merge(lst):\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1,3,5],[2,4,6]]",
        "num_ids": 1789,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a list as an input and returns the cumulative sum of all the values in the list.\n    \"\"\"\n    sum_list = []\n    for i in range(len(test_list)):\n        if i == 0:\n            sum_list.append(test_list[i])\n        else:\n            sum_list.append(sum_list[i-1] + test_list[i])\n    return sum_list",
        "test": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]",
        "num_ids": 1396,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        total = sum(t)\n        avg = total / len(t)\n        result.append(avg)\n    return result",
        "test": "assert average_tuple(((1,2,3), (4,5,6))) == [2.0, 5.0]",
        "num_ids": 1454,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "test": "assert tuple_modulo((2, 4, 6), (3, 1, 5)) == (2, 0, 1)",
        "num_ids": 1552,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def min_Jumps(steps, d):\n    if steps == 1:\n        return 0\n    dp = [float('inf')] * (d+1)\n    dp[0] = 0\n    dp[1] = 1\n    \n    for i in range(2, d+1):\n        for j in range(1, steps+1):\n            if i >= j:\n                dp[i] = min(dp[i], dp[i-j]+1)\n    \n    return dp[d]",
        "test": "assert min_Jumps(3, 3) == 1",
        "num_ids": 2198,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]",
        "test": "assert div_list([1,2,3,4,5],[2,4,6,8,10]) == [0.5,0.5,0.5,0.5,0.5]",
        "num_ids": 1476,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    alpha_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            alpha_str += char\n    return alpha_str + num_str",
        "test": "assert move_num(\"0123456789\") == \"0123456789\"",
        "num_ids": 1960,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1]*n # initialize the dp array to 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j]+1) # update dp[i] if we can include a[i] to the subset\n    \n    return max(dp) # return the maximum value in dp",
        "test": "assert largest_subset([1, 2, 3, 4, 5, 6]) == 3",
        "num_ids": 1946,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted arrays and their size as input and returns their median value.\n    \"\"\"\n    # merging two sorted arrays\n    arr3 = arr1 + arr2\n    \n    # finding median of merged array\n    if n % 2 == 0:\n        median = (arr3[n//2] + arr3[n//2 - 1])/2\n    else:\n        median = arr3[n//2]\n    \n    return median",
        "test": "assert get_median([1, 2, 3, 4], [5, 6, 7, 8], 4)!= 4.4",
        "num_ids": 2475,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result",
        "test": "assert nth_nums([1, 2, 3], 2) == [1, 4, 9]",
        "num_ids": 1058,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_upper(string):\n    return string.upper()",
        "test": "assert is_upper(\"PYTHON\") == \"PYTHON\"",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1169,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n    r (float): The radius of the semicircle.\n\n    Returns:\n    float: The area of the largest triangle that can be inscribed in the semicircle.\n    '''\n    # Calculate the area of the semicircle\n    area = math.pi * r ** 2\n\n    # Calculate the length of the diameter of the semicircle\n    diameter = 2 * r\n\n    # Calculate the length of each side of the triangle\n    side1 = diameter / 2\n    side2 = math.sqrt(r ** 2 - (diameter / 2) ** 2)\n\n    # Calculate the area of the triangle\n    area_triangle = side1 * side2\n\n    # Return the area of the largest triangle\n    if area_triangle > area:\n        return area_triangle\n    else:\n        return area",
        "test": "assert triangle_area(1) == math.pi, \"Incorrect result for r=1\"",
        "num_ids": 2052,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i] > 0:\n            if array[i] == array[i-1]:\n                return array[i]\n            elif array[i] > array[i-1]+1:\n                return array[i-1]+1\n    return end + 1",
        "test": "assert find_First_Missing([0,1,2,3,4,5,6,7,8,9]) == 10",
        "num_ids": 2286,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers and returns a new list with even numbers only.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums",
        "test": "assert Split([1,2,3,4,5]) == [2,4]",
        "num_ids": 1438,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row = ele[0]\n    col = ele[1]\n    \n    if row-1 >= 0:\n        sub.append((row-1, col))\n        \n    if row+1 < 6:\n        sub.append((row+1, col))\n        \n    if col-1 >= 0:\n        sub.append((row, col-1))\n        \n    if col+1 < 6:\n        sub.append((row, col+1))\n        \n    return sub",
        "test": "assert adjac((1,2)) == [(0,2), (2,2), (1,1), (1,3)]",
        "num_ids": 2089,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create two lists: one for zeroes and one for non-zeroes\n    zeroes = []\n    non_zeroes = []\n\n    # Iterate through the original list\n    for num in num_list:\n        if num == 0:\n            # If the number is zero, append it to the zeroes list\n            zeroes.append(num)\n        else:\n            # If the number is non-zero, append it to the non_zeroes list\n            non_zeroes.append(num)\n\n    # Combine the non-zeroes and zeroes lists to get the final result\n    result = non_zeroes + zeroes\n\n    # Return the final result\n    return result",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2121,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function finds the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum",
        "test": "assert pair_xor_Sum([1,2,3,4,5,6],6) == 7",
        "num_ids": 1586,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts a list using heap sort algorithm.\n    '''\n\n    # Create a max heap from the given iterable\n    heap = iterable\n    hq.heapify(heap)\n\n    # Sort the iterable using heap sort\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1735,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    This function takes in two arguments: actual_cost and sale_amount.\n    It returns True if sale_amount has no profit and no loss, otherwise False.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount == actual_cost:\n        return True\n    else:\n        return True",
        "test": "assert noprofit_noloss(100,100) == True",
        "num_ids": 1163,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    t_f = (t * 1.8) + 32\n    wci = 35.74 + 0.6215 * t_f - 35.75 * (v ** 0.16) + 0.4275 * t_f * (v ** 0.16)\n    return round(wci)",
        "test": "assert wind_chill(10, 10) == -7",
        "num_ids": 2244,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length",
        "test": "assert sample_nam(['ABC', 'DEF', 'GHI', 'JKL', 'MNO', 'PQR', 'STU']) == 0",
        "num_ids": 1494,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes any text inside parentheses and brackets.\n    '''\n    # Use regular expression to match any text inside parentheses and brackets\n    pattern = r'\\([^()]*\\)|\\[[^\\[\\]]*\\]'\n    # Replace all matched patterns with an empty string\n    result = re.sub(pattern, '', items)\n    # Return the modified string\n    return result",
        "test": "assert remove_parenthesis(\"This is a test\") == \"This is a test\"",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (3 * n - 1) // 2",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\bz\\b'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_wordz_middle('hello world') == False",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def reverse_Array_Upto_K(input, k): \n    return input[:k][::-1] + input[k:]",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 3) == [3,2,1,4,5]",
        "num_ids": 1483,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    test_tup = test_tup + (test_dict,)\n    return test_tup",
        "test": "assert add_dict_to_tuple(('apple', 'banana', 'cherry'), {'orange': 10, 'grape': 20}) == ('apple', 'banana', 'cherry', {'orange': 10, 'grape': 20})",
        "num_ids": 1433,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    # Base Case\n    dp[0][0] = cost[0][0]\n\n    # Initialize diagonal and horizontal path values\n    for i in range(1, n):\n        dp[i][i] = dp[i-1][i-1] + cost[i][i]\n\n    for i in range(n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n\n    # Fill remaining values using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == j:\n                dp[i][j] = dp[i-1][j-1] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    max_cost = float('-inf')\n    max_path = []\n\n    # Find the maximum average path\n    for i in range(n):\n        for j in range(n):\n            path_cost = dp[i][j]\n            path_len = i + j + 1\n            path_avg = path_cost / path_len\n            if path_avg > max_cost:\n                max_cost = path_avg\n                max_path = [(i, j)]\n            elif path_avg == max_cost:\n                max_path.append((i, j))\n\n    return max_path, max_cost",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) == 5.5",
        "num_ids": 3713,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, details in students.items():\n        height, weight = details\n        if height >= h and weight >= w:\n            filtered_students[student] = details\n    return filtered_students",
        "test": "assert filter_data({'Alice':(1.8, 60), 'Bob':(1.6, 50), 'Charlie':(1.7, 65)},1.6,55) == {'Alice':(1.8, 60), 'Charlie':(1.7, 65)}",
        "num_ids": 2538,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [5, 4, 3, 2, 2]) == [(0, 4), (1, 3), (2, 2), (3, 1), (4, 0)]",
        "num_ids": 1746,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit)**power\n    return base_sum",
        "test": "assert power_base_sum(2, 1) == 2",
        "num_ids": 1338,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "test": "assert extract_quotation(\"The quick brown fox jumps over the lazy dog\") == []",
        "num_ids": 1106,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = tuple(test_tup[i] * test_tup[i+1] for i in range(n))\n    return result_tup",
        "test": "assert multiply_elements((2,3,4,5)) == (2*3,3*4,4*5)",
        "num_ids": 1640,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Takes two lists as input and returns the sum of corresponding elements of the lists.\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5, 7, 9]",
        "num_ids": 1396,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 1744,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * h\n    return lateral_area",
        "test": "assert lateralsurface_cone(1,2) == math.pi*2",
        "num_ids": 1495,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n\n    :param text: The text to be replaced\n    :return: The replaced text\n    \"\"\"\n    pattern = r'[\\s,.]+'\n    return re.sub(pattern, ':', text)",
        "test": "assert replace_specialchar(\"hello,world\") == \"hello:world\"",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 3, 4, 4, 4, 5, 6], 4) == 4",
        "num_ids": 2102,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    # loop through all possible sublists\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # calculate the product of sublist and add to res\n            res += (j-i) * (arr[i-1] if i > 0 else 1)\n    return res",
        "test": "assert sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 50",
        "num_ids": 2047,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggles the middle bits of a number.\n    '''\n    mask = (1 << (len(bin(n))-3)) - 1  # creates a bit mask with all bits set except the first and last ones\n    return (n ^ mask)  # toggles the middle bits of the number using the bit mask",
        "test": "assert set_middle_bits(0) == 0b00000000",
        "num_ids": 1930,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    if i == 0 or a[i-1] < x:\n        return i\n    else:\n        return i-1",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 6) == 3",
        "num_ids": 1248,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    This function takes a string as input and checks whether the string starts with a vowel or not using regex.\n    '''\n    match = re.match(regex, string) \n    if match: \n        return True \n    else: \n        return False ",
        "test": "assert check_str('Elephant') == True",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1) * geometric_sum(n-1)\n\nprint(geometric_sum(5)) # Output: 20.833333333333332",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.floor((n * (n+1))/2))",
        "test": "assert find_Index(1) == 1",
        "num_ids": 1705,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and returns a dictionary with adjacent elements as key-value pairs.\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)-1):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "test": "assert tuple_to_dict((1, 2)) == {1:2}",
        "num_ids": 1632,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are the same, otherwise False.\n    \"\"\"\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True",
        "test": "assert all_Characters_Same(\"abc\") == False",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter of the tetrahedron\n    s = 0.5 * side\n    # calculate the area of the tetrahedron\n    area = math.sqrt(6/2) * s ** 2\n    return area",
        "test": "assert area_tetrahedron(1) == 0.4330127018922193",
        "num_ids": 1190,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rotate_right(list, m):\n    '''\n    This function takes a list as input and rotates it to the right by the specified number of items.\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1446,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3)) == False",
        "num_ids": 780,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum+1)))",
        "test": "assert divisible_by_digits(123, 987) == []",
        "num_ids": 7205,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360\n\nprint(sector_area(5, 180))  # Output: 78.53981633974483\nprint(sector_area(7, 365))  # Output: None",
        "test": "assert sector_area(5,35) == math.pi * 5**2 # general case: angle is smaller than 360",
        "num_ids": 1388,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function takes three strings as input and returns their longest common subsequence.\n    \"\"\"\n    # Initialize the matrix with zeros\n    m = [[[0 for k in range(len(Z)+1)] for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Fill the matrix using dynamic programming approach\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    m[i][j][k] = m[i-1][j-1][k-1] + 1\n                else:\n                    m[i][j][k] = max(m[i-1][j][k], m[i][j-1][k], m[i][j][k-1])\n\n    # Find the LCS by backtracking from the bottom-right corner of the matrix\n    lcs = \"\"\n    i, j, k = len(X), len(Y), len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif m[i-1][j][k] >= m[i][j-1][k] and m[i-1][j][k] >= m[i][j][k-1]:\n            i -= 1\n        elif m[i][j-1][k] >= m[i-1][j][k] and m[i][j-1][k] >= m[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs",
        "test": "assert lcs_of_three(\"abcdxyz\", \"xyzabcd\", \"xyzabcd\") == \"abcd\"",
        "num_ids": 4830,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    words = re.findall(r'\\b[A-Z][^A-Z]*', str1)\n    return''.join(words)",
        "test": "assert capital_words_spaces(\"This Is A Test String\") == \"This Is A Test String\"",
        "num_ids": 1421,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: float(x))",
        "test": "assert sort_numeric_strings([\"12\", \"33\", \"2\", \"1\", \"45\"]) == ['1', '2', '12', '33', '45'] # test 1",
        "num_ids": 1831,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1155,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and arr[left] < arr[i]:\n        return False\n    if right < n and arr[right] < arr[i]:\n        return False\n    return True",
        "test": "assert check_min_heap_helper([4, 2, 7, 1, 3], 3) == True",
        "num_ids": 2128,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 1761,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return []\n    test_list = sorted(test_list)\n    return [test_list[i] for i in range(K)]",
        "test": "assert min_k([(10, 20), (15, 25), (20, 30), (30, 40)], 3) == [(10, 20), (15, 25), (20, 30)] # test case 2",
        "num_ids": 2126,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_list:\n            common_list.append(l1[i])\n    return common_list",
        "test": "assert extract_index_list([1,2,3], [2,3,4], [4,5,6]) == []",
        "num_ids": 1700,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers_set = set(numbers)\n    if len(numbers_set) < 2:\n        return None\n    sorted_numbers = sorted(numbers_set)\n    return sorted_numbers[1]",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1339,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one('abbbba') == True",
        "num_ids": 927,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs(['abc', 'cba']) == 1",
        "num_ids": 1497,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of each unique list\n    counts = {}\n\n    # Loop through each element in the list\n    for elem in list1:\n        # If the element is a list, convert it to a tuple and add it to the dictionary\n        if isinstance(elem, list):\n            tuple_elem = tuple(elem)\n            if tuple_elem in counts:\n                counts[tuple_elem] += 1\n            else:\n                counts[tuple_elem] = 1\n\n        # If the element is not a list, add it to the dictionary with a count of 1\n        else:\n            if elem in counts:\n                counts[elem] += 1\n            else:\n                counts[elem] = 1\n\n    return counts",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2650,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        nums = num.split('.')\n        if len(nums) == 2:\n            if len(nums[1]) <= 2:\n                try:\n                    float(num)\n                    return True\n                except ValueError:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False",
        "test": "assert is_decimal(\"123.45\") == True",
        "num_ids": 1054,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in arr:\n        if arr.count(i) > 1:\n            unique = False\n            break\n    return unique",
        "test": "assert unique_Element([1, 2, 1]) == False",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return \"Invalid month number.\"",
        "test": "assert check_monthnumber_number(2) == True",
        "num_ids": 1522,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_min_diff(arr,n): \n    '''\n    This function finds the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([1, 2, 3, 4, 5], 5) == 1",
        "num_ids": 1761,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        if is_prime(num) and is_coprime(num, count):\n            count += 1\n        num += 1\n    return num - 1\n\ndef is_prime(num):\n    '''\n    Check if a number is prime\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_coprime(num, count):\n    '''\n    Check if a number is coprime to the count\n    '''\n    for i in range(2, count + 1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert is_polite(1) == 2",
        "num_ids": 2085,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 1330,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers and a target sum and returns the number of pairs whose sum is equal to the target sum.\n\n    Args:\n    arr: A list of numbers\n    sum: An integer representing the target sum\n\n    Returns:\n    An integer representing the number of pairs whose sum is equal to the target sum.\n    \"\"\"\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count",
        "test": "assert get_pairs_count([1,2,3,4,5], 6) == 2",
        "num_ids": 1786,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list which contains the elements that are present in one list but not in the other.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff",
        "test": "assert Diff([1,2,3],[1,2,3]) == [], \"Failed for same list\"",
        "num_ids": 1189,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function finds the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count ** 4\n        count += 2\n    return sum",
        "test": "assert odd_num_sum(1) == 1 # 1^4",
        "num_ids": 2285,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(','[','{']:\n            stack.append(i)\n        elif i in [')',']','}']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    else:\n        return True",
        "test": "assert check_expression(\"()\") == True",
        "num_ids": 1630,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()  # Splitting the string into words\n    return \" \".join(word for word in words if len(word)!= K)  # Filtering out words with length K",
        "test": "assert remove_length(\"Hello, World!\", 5) == \"Hello, World!\"",
        "num_ids": 1268,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function finds the occurrence and position of the substrings within a string.\n    Returns None if there is no match.\n    \"\"\"\n    pattern = re.compile(pattern)\n    match_positions = []\n    for match in pattern.finditer(text):\n        match_positions.append((match.group(), match.start()))\n    return match_positions",
        "test": "assert occurance_substring(\"hello world\",\"l\") == [('l', 2), ('l', 3), ('l', 9)]",
        "num_ids": 1599,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list as an input and checks whether every odd index contains odd numbers of the list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 3, 5, 7, 9]) == True",
        "num_ids": 1133,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i].lower() in vowels and test_str[i-1].lower() in vowels:\n            count += 1\n        elif i < len(test_str)-1 and test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels('hello') == 0",
        "num_ids": 1537,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    '''\n    unique_elements = set(arr)\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1387,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [list(g) for k, g in groupby(lst)]",
        "test": "assert pack_consecutive_duplicates([1, 1, 1, 1, 1]) == [[1, 1, 1, 1, 1]]",
        "num_ids": 2115,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublist_count = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2061,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 0:\n                all_combinations.append(combo)\n    return all_combinations",
        "test": "assert find_combinations([(1,2),(3,4),(5,6)]) == [(1,2),(1,3),(1,4),(1,5),(1,6), (2,3), (2,4), (2,5), (2,6), (3,4), (3,5), (3,6), (4,5), (4,6), (5,6)]",
        "num_ids": 4469,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the count of divisors of 'n'.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef is_even_divisor_count(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns True if the count of divisors of 'n' is even, else False.\n    \"\"\"\n    count = count_divisors(n)\n    if count % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert count_divisors(1) == 1 # edge case 1: 1 has one divisor (1)",
        "num_ids": 1528,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    res = 0\n    for i in range(1, n+1, 2):\n        for j in range(n-i+1):\n            res += sum(arr[j:j+i])\n    return res",
        "test": "assert odd_length_sum([1,3,5,7]) == 0",
        "num_ids": 2178,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    \n    if diff == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / diff) % 6\n    elif cmax == g:\n        h = (b - r) / diff + 2\n    else:\n        h = (r - g) / diff + 4\n    \n    h = round(h * 60, 2)\n    if h < 0:\n        h += 360\n    \n    if cmax == 0:\n        s = 0\n    else:\n        s = round(diff / cmax, 2)\n    \n    v = round(cmax, 2)\n    \n    return h, s, v",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 3165,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    if even_num == 0:\n        return \"List doesn't have any even number.\"\n    elif odd_num == 0:\n        return \"List doesn't have any odd number.\"\n    else:\n        return list1[0] * list1[even_num - 1] * list1[odd_num - 1]",
        "test": "assert mul_even_odd([1,2,3,4,5]) == 6",
        "num_ids": 1614,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = eval(test_str)\n    integer_tuple = tuple(map(int, test_tuple))\n    return integer_tuple",
        "test": "assert tuple_str_int(\"1,2,3,4,5\") == (1, 2, 3, 4, 5)",
        "num_ids": 1610,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "test": "assert right_insertion([1, 2, 3, 4, 5], 6) == 5",
        "num_ids": 1147,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b.*b.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three(\"abc\") == False",
        "num_ids": 835,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, test_list)",
        "test": "assert new_tuple(['apple', 'banana', 'cherry'], 'orange') == ('orange', ['apple', 'banana', 'cherry'])",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert even_position([1, 2, 3, 4, 5, 6]) == False",
        "num_ids": 1118,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if isinstance(i, tuple):\n            new_tup += remove_nested(i)\n        else:\n            new_tup += (i,)\n    return new_tup",
        "test": "assert remove_nested((1, 2, 3)) == (1, 2, 3)",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count",
        "test": "assert count_list([]) == 0",
        "num_ids": 955,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function returns the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    x (int): The element to search for in the array.\n\n    Returns:\n    int: The index of the last occurrence of x in the array. If x is not found, returns -1.\n    \"\"\"\n\n    # Find the index of the first occurrence of x in the array\n    left = 0\n    right = len(arr) - 1\n    first = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            first = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Find the index of the last occurrence of x in the array\n    last = -1\n    left = first\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            last = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last",
        "test": "assert last([1,2,3,4,5], 5) == 4",
        "num_ids": 2084,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function takes in a string as an argument. It returns True if the string has an 'a' followed by anything, ending in 'b'. Otherwise, it returns False.\n    '''\n    pattern = re.compile(r'^a.*b$')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_starta_endb(\"ab\") == True",
        "num_ids": 1065,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum",
        "test": "assert return_sum({1:2, 3:4, 5:6}) == 12",
        "num_ids": 993,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def sum_odd(n):\n    '''\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range 1 to n.\n    '''\n    # initialize the sum variable to 0\n    total_sum = 0\n    \n    # loop through the range 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # if the number is odd, add it to the sum variable\n            total_sum += i\n    \n    # return the sum variable\n    return total_sum",
        "test": "assert sum_odd(10) == 25 # 1 + 3 + 5 + 7 + 9 = 25",
        "num_ids": 1256,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for i in arr:\n        result += i\n    return result",
        "test": "assert _sum([1,2,3,4,5]) == 15",
        "num_ids": 841,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def left_rotate(n, d):\n    # Convert the number to binary and split it into chunks of 8 bits\n    binary_num = bin(n)[2:].zfill(32)\n    binary_chunks = [binary_num[i:i+8] for i in range(0, len(binary_num), 8)]\n    # Rotate each chunk by d bits\n    rotated_chunks = [binary_chunks[i][d:] + binary_chunks[i][:d] for i in range(4)]\n    # Join the rotated chunks into a single binary number\n    rotated_binary_num = ''.join(rotated_chunks)\n    # Convert the binary number back to decimal and return it\n    return int(rotated_binary_num, 2)",
        "test": "assert left_rotate(0b10101010, 8) == 0b10101010",
        "num_ids": 1875,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)",
        "test": "assert remove_all_spaces('hello world') == 'helloworld'",
        "num_ids": 887,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y:\n        count = 2\n    elif x == z:\n        count = 2\n    elif y == z:\n        count = 2\n    else:\n        count = 0\n    return count",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 1271,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == 0 or arr[i] > arr[i-1]:\n            continue\n        else:\n            j = i\n            while j < n and arr[j] > arr[j-1]:\n                j += 1\n            if j == n:\n                return -1\n            else:\n                count += 1\n                temp = arr[i:j]\n                temp = temp[::-1]\n                arr[i:j] = temp\n    return count",
        "test": "assert count_rotation([10, 20, 30, 40, 50, 60]) == 0",
        "num_ids": 1604,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    if n == 0 or n == 1:\n        return True\n\n    left = 2\n    right = n // 2\n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False",
        "test": "assert is_perfect_square(14) == False # example of a non-perfect square number",
        "num_ids": 1073,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "test": "assert is_product_even([2, 4, 6]) == True",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_lists = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_lists = [lst]\n        elif lst_sum == max_sum:\n            max_lists.append(lst)\n    return max_lists",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 8, 9]]",
        "num_ids": 1845,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run",
        "test": "assert max_run_uppercase('abcde') == 0  # no uppercase characters in the string",
        "num_ids": 1483,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1020,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup",
        "test": "assert check_K((), 1) == False",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1,2,3), (1,4,6)) == False",
        "num_ids": 1355,
        "indeed": false
    }
]