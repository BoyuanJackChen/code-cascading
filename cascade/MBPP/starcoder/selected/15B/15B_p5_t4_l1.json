[
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set()\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.add(element)\n    return shared_elements",
        "test": "assert similar_elements((1, 2, 3), (2, 3, 4)) == {2, 3}",
        "num_ids": 1031,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(1) == False # not a prime number",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "test": "assert heap_queue_largest([1,2,3,4,5],5) == [5,4,3,2,1]",
        "num_ids": 1097,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "test": "assert find_char_long(\"Hello world\") == ['Hello', 'world']",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result",
        "test": "assert square_nums([1, 2, 3]) == [1, 4, 9]",
        "num_ids": 800,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and finds the minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(str)\n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    else:\n        # Check if the string is already a substring of itself\n        for i in range(n):\n            if str[i:n] == str[i:n][::-1]:\n                return 1\n        # If not, we need to find the minimum number of rotations\n        min_rotations = n\n        for i in range(n):\n            if str[i:n] == str[i:n][::-1]:\n                return 1\n            else:\n                # Check for the minimum number of rotations\n                for j in range(26):\n                    new_str = str[i:] + chr(ord('a') + j) + str[:i]\n                    if new_str == new_str[::-1]:\n                        return min_rotations + 1\n                min_rotations += 1\n        # If we reach here, then the string is not a palindrome and not a substring of itself.\n        return \"Not possible\"",
        "test": "assert find_Rotations('abcde') == 1",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n    elif ch == s[0]:\n        return s[1:]\n    elif ch == s[-1]:\n        return s[:-1]\n    else:\n        return s.replace(ch, \"\", 1)",
        "test": "assert remove_Occ('hello', 'z') == 'hello'",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sort_matrix(M):\n    '''\n    Sorts a matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_rows = sorted(M, key=sum)\n    return sorted_rows",
        "test": "assert sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1895,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the dimensions of a triangular prism as input parameters and returns its volume.\n    \"\"\"\n    return 0.5 * l * b * h",
        "test": "assert find_Volume(0,0,0) == 0, \"The volume of a triangular prism with dimensions 0,0,0 should be 0.\"",
        "num_ids": 758,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return re.search(pattern, text) is not None",
        "test": "assert text_lowercase_underscore('abc_def') == True",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(2) == 8, \"The perimeter of a square with side length 2 is 8\"",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def str_to_list(string):\n    # Initialize the character set\n    char_set = [False] * NO_OF_CHARS\n    \n    # Mark the characters present in the second string as True in the character set\n    for char in second_string:\n        char_set[ord(char)] = True\n    \n    # Remove the characters from the first string that are present in the character set\n    result = []\n    for char in first_string:\n        if not char_set[ord(char)]:\n            result.append(char)\n    \n    return result",
        "test": "assert str_to_list(\"hello world\", \"lo\") == \"he wor\"",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as input and returns True if the array contains any duplicate element, otherwise False.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 915,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 0:\n        return False\n    elif x == 0:\n        return True\n    else:\n        return is_woodall(x-2) or is_woodall(x-3) or is_woodall(x-4) or is_woodall(x-5) or is_woodall(x-6)",
        "test": "assert is_woodall(4) == True, \"4 is woodball\"",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as an argument and checks if it is one less than twice its reverse.\n    \"\"\"\n    if str(num) == str(num)[::-1]:\n        return True\n    else:\n        return False",
        "test": "assert rev(12345) == False",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num * (10 ** (len(str(num)) - 1)))\n    return max_num",
        "test": "assert find_Max_Num([0, 0, 0, 0, 0]) == 0",
        "num_ids": 1083,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(0, 0) == False",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonals = []\n    i = 1\n    while True:\n        num = i*(2*i-1)\n        if num > 1000000:\n            break\n        octagonals.append(num)\n        i += 1\n    if n > len(octagonals):\n        return \"n is out of range\"\n    else:\n        return octagonals[n-1]",
        "test": "assert is_octagonal(1) == 1 ",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            sum_of_digits = sum([int(digit) for digit in substring])\n            if sum_of_digits == len(substring):\n                count += 1\n    return count",
        "test": "assert count_Substrings('12345') == 1",
        "num_ids": 1113,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for i in range(1, len(xs)):\n            if xs[i] < smallest:\n                smallest = xs[i]\n        return smallest",
        "test": "assert smallest_num([1, 3, 2, 4, 5]) == 1",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([(1, 2), (4, 5), (8, 9)]) == 7",
        "num_ids": 1196,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def subject_marks(subject_marks_list):\n    '''\n    This function takes a list of tuples as input and sorts it based on the second value of each tuple.\n    '''\n    sorted_list = sorted(subject_marks_list, key=lambda x: x[1])\n    return sorted_list",
        "test": "assert subject_marks([(2, 'C'), (4, 'A'), (5, 'B'), (1, 'D')]) == [(4, 'A'), (5, 'B'), (2, 'C'), (1, 'D')]",
        "num_ids": 1739,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        total_sum = 0\n        for item in data_list:\n            total_sum += recursive_list_sum(item)\n        return total_sum",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 858,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1,2,3,4,5]) == 5",
        "num_ids": 697,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers))\n    return bell_numbers[n]",
        "test": "assert bell_number(0) == 1",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    A : List[int]\n    return : bool\n    '''\n    # Check if the array is sorted in ascending order\n    if A == sorted(A):\n        return True\n    \n    # Check if the array is sorted in descending order\n    if A == sorted(A, reverse=True):\n        return True\n    \n    # Otherwise, the array is not monotonic\n    return False",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True",
        "num_ids": 1010,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sublist(l, s):\n    '''\n    Check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "test": "assert is_sublist([1,2,3], [1,2]) == True",
        "num_ids": 1095,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a list to store the lengths of the tuples\n    lengths = []\n    \n    # Iterate over the input tuples and append their lengths to the list\n    for tup in Input:\n        lengths.append(len(tup))\n        \n    # Check if all the lengths in the list are equal\n    if all(length == lengths[0] for length in lengths):\n        return True\n    else:\n        return False",
        "test": "assert find_equal_tuple([(1,2,3), (4,5,6), (7,8,9)]) == True",
        "num_ids": 957,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap/shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n            \n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n    return nums",
        "test": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1370,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def dif_Square(n): \n    '''\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the given number is negative or not\n    if n < 0:\n        return False\n    \n    # check if the given number is 0 or 1\n    if n == 0 or n == 1:\n        return True\n    \n    # initialize the variable to store the square root of the given number\n    sqrt_n = n ** 0.5\n    \n    # check if the square root is an integer or not\n    if sqrt_n.is_integer():\n        # find the difference of two squares\n        diff_squares = int(sqrt_n) * (int(sqrt_n) + 1)\n        \n        # check if the difference is equal to the given number or not\n        if diff_squares == n:\n            return True\n    \n    # if none of the above conditions are true, return False\n    return False",
        "test": "assert dif_Square(13) == False ",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n        \n    return True",
        "test": "assert is_samepatterns(['yellow','red', 'blue', 'green', 'white'], ['square', 'circle', 'dot', 'dash', 'triangle']) == False",
        "num_ids": 1436,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = True\n        for elem in tup:\n            if elem % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1,2,3,4,5),(2,3,4,5,6),(3,4,5,6,7),(4,5,6,7,8),(5,6,7,8,9)],9) == []",
        "num_ids": 1503,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if the number is divisible by 11, else False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(13) == False # Testcase 1",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def word_len(s):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Args:\n        s (str): The word to be checked.\n\n    Returns:\n        bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(s) % 2!= 0",
        "test": "assert word_len(\"banana\") == False",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n*(n+1)*(n+2)/6)",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "test": "assert volume_sphere(0) == 0",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def get_Char(strr):\n    # Initialize the sum to zero\n    sum = 0\n    # Iterate over each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum += ord(char)\n    # Return the character made by adding the sum modulo 26\n    return chr(sum % 26 + ord('a'))",
        "test": "assert get_Char('python') == 'y', 'Incorrect result for input \"python\"'",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        for i in range(3, n+1):\n            current = prev_prev + prev\n            prev_prev = prev\n            prev = current\n        return current",
        "test": "assert sequence(2) == 1",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4*math.pi",
        "num_ids": 789,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = n*(2*n-1)\n    return h",
        "test": "assert centered_hexagonal_number(0) == 0",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({'a':1,'b':2},{'c':3,'d':4},{'e':5,'f':6}) == {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}",
        "num_ids": 1536,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    This function will get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict",
        "test": "assert freq_count([1, 2, 3, 2, 1, 4]) == {1: 2, 2: 2, 3: 1, 4: 1}",
        "num_ids": 1103,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def closest_num(n):\n    '''\n    This function finds the closest smaller number than n.\n    '''\n    # initialize a variable to store the closest number\n    closest = None\n    \n    # loop through the list of numbers starting from n-1 and going backwards\n    for i in range(n-1, 0, -1):\n        # if the current number is smaller than n and the closest number found so far is None\n        if i < n and (closest is None or i > closest):\n            # set the closest number to i\n            closest = i\n    \n    # return the closest smaller number found\n    return closest",
        "test": "assert closest_num(0) == None",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n    return max_length",
        "test": "assert len_log(['apple', 'banana', 'cherry']) == 6",
        "num_ids": 777,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments - the first one is the main string and the second one is the substring to be checked.\n    The function returns True if the substring is found in the main string, otherwise it returns False.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring(\"hello world\", \"l\") == True",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    s = str(n)\n    if len(s) % 2 == 1:  # check if length of string is odd\n        return False\n    i = 0\n    while i < len(s) - 1:\n        if s[i]!= s[i + 1]:\n            return False\n        i += 2\n    return True",
        "test": "assert is_undulating(5) == False ",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power(a, b):\n    '''\n    Calculates the value of 'a' to the power 'b'.\n    '''\n    return a ** b",
        "test": "assert power(2,3) == 8",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    return test_list.index(min(test_list, key=itemgetter(1)))",
        "test": "assert index_minimum([(1, 2), (1, 2), (1, 2)]) == 0",
        "num_ids": 1005,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = min([len(sublist) for sublist in lst])\n    return min_len",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(5) == 2",
        "num_ids": 564,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if isinstance(i, list):\n            for j in i:\n                if j in freq_dict:\n                    freq_dict[j] += 1\n                else:\n                    freq_dict[j] = 1\n        else:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict",
        "test": "assert frequency_lists([[], [1, 1, 1], [2, 2, 2], [], [1, 1, 1], [2, 2, 2]]) == {1: 6, 2: 6}",
        "num_ids": 1741,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of all the numbers divided by the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product/len(numbers)",
        "test": "assert multiply_num([0,0,0]) == 0",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function takes a decimal number as input and returns its binary equivalent as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "test": "assert decimal_to_binary(10) == '1010'",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a given number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num",
        "test": "assert next_smallest_palindrome(123) == 131",
        "num_ids": 1576,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    This function returns the kth element in the given array using 1-based indexing.\n\n    Args:\n    arr: list of integers\n    k: integer, the kth element to find (1 <= k <= len(arr))\n\n    Returns:\n    The kth element in the array, or None if k is out of range.\n    \"\"\"\n\n    if k < 1 or k > len(arr):\n        return None\n\n    # Convert k to 0-based indexing\n    k -= 1\n\n    # Use the QuickSelect algorithm to find the kth element in O(n) time complexity\n    left = 0\n    right = len(arr) - 1\n    while True:\n        pivot_index = partition(arr, left, right)\n        if pivot_index == k:\n            return arr[pivot_index]\n        elif pivot_index < k:\n            left = pivot_index + 1\n        else:\n            right = pivot_index - 1\n\ndef partition(arr, left, right):\n    \"\"\"\n    This function partitions the array into two parts around a pivot element.\n\n    Args:\n    arr: list of integers\n    left: integer, the left index of the subarray to partition\n    right: integer, the right index of the subarray to partition\n\n    Returns:\n    The index of the pivot element after partitioning.\n    \"\"\"\n\n    pivot = arr[right]\n    i = left - 1\n\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    arr[i+1], arr[right] = arr[right], arr[i+1]\n    return i+1",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function takes a string in snake case and returns the string in camel case.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel(\"_snake_case_string\") == \"SnakeCaseString\"",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    else:\n        return (n * eulerian_num(n, m-1)) - ((n-1) * eulerian_num(n-1, m-1))",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 731,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['dog', 'cat', 'fish']]) == [['apple', 'banana', 'cherry'], ['cat', 'dog', 'fish']]",
        "num_ids": 1488,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count",
        "test": "assert count([True, True, True, True]) == 4",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuples.\n    '''\n    return tuple(test_list + list(test_tup))",
        "test": "assert add_lists([], ()) == ()",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    heap = []\n    heapq.heapify(heap)  # initialize heap\n    \n    for num in num1:\n        heapq.heappush(heap, num)\n    \n    for num in num2:\n        heapq.heappush(heap, num)\n    \n    for num in num3:\n        heapq.heappush(heap, num)\n    \n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    \n    return result",
        "test": "assert merge_sorted_list([0],[1],[2]) == [0,1,2]",
        "num_ids": 1956,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    This function takes two arguments:\n    s: a binary string\n    n: an integer representing the number of rotations\n    \n    The function returns the number of numbers with an odd value when rotating the binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n    \n    # Rotate the list n times\n    s = s[-n:] + s[:-n]\n    \n    # Count the number of odd values in the rotated list\n    odd_count = sum(i%2!=0 for i in s)\n    \n    return odd_count",
        "test": "assert odd_Equivalent('1101101',1) == 5",
        "num_ids": 1167,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_list = []\n    for i in nestedlist:\n        if len(common_list) == 0:\n            common_list = i\n        else:\n            common_list = list(set(common_list) & set(i))\n    return common_list",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9], []]) == []",
        "num_ids": 1298,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer('123') == True",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True",
        "test": "assert empty_dit([{}, {'a': 1}, {}]) == False",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    \n    result = nums[0]\n    for i in range(1, len(nums)):\n        result *= 10\n        result += nums[i]\n    \n    return result",
        "test": "assert tuple_to_int((1,2,3)) == 123",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "test": "assert list_to_float([[\"1\", \"2\"], [\"3\", \"4\"]]) == [[1.0, 2.0], [3.0, 4.0]]",
        "num_ids": 1791,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_to_list(string):\n    '''\n    This function takes a string as input and returns a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1] and i+2 == n:\n            return arr[i]\n        elif arr[i]!= arr[i+1] and i+2 == n:\n            return arr[i+1]\n    return None",
        "test": "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10",
        "num_ids": 1254,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]) == 0, \"test case 4 failed\"",
        "num_ids": 1207,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def is_amicable_number(num):\n    '''\n    Check if a number is amicable or not.\n    A number is amicable if the sum of the proper divisors equals the number itself.\n    '''\n    # Get the sum of proper divisors\n    divisor_sum = 0\n    for i in range(1, num//2+1):\n        if num % i == 0:\n            divisor_sum += i\n    if divisor_sum == num:\n        return True\n    else:\n        return False\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        if is_amicable_number(num):\n            amicable_sum += num\n    return amicable_sum",
        "test": "assert amicable_numbers_sum(1000) == 31626",
        "num_ids": 1265,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Calculates the angle of a complex number.\n    \"\"\"\n    return cmath.phase(complex(a, b))",
        "test": "assert angle_complex(1, 0) == 0",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_length(string):\n    max_length = 0\n    current_length = 0\n    current_bit = string[0]\n\n    for bit in string:\n        if bit == current_bit:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n            current_bit = bit\n\n    max_length = max(max_length, current_length)\n    return max_length",
        "test": "assert find_length(\"11110000\") == 4",
        "num_ids": 3118,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # find the maximum number\n    if a > b:\n        max_num = a\n    else:\n        max_num = b\n    # initialize the sum variable\n    sum = 0\n    # loop through the numbers from 1 to the maximum number\n    for i in range(1, max_num + 1):\n        # check if both numbers are divisible by i\n        if a % i == 0 and b % i == 0:\n            sum += i\n    # return the sum of common divisors\n    return sum",
        "test": "assert sum(25,30) == 45",
        "num_ids": 1152,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 494,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    words = str.split()\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "test": "assert long_words(8, \"The quick brown fox jumps over the lazy dog\") == []",
        "num_ids": 1018,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes a matrix as input and returns True if it is a magic square, and False otherwise.\n\n    A magic square is a square grid of numbers where each row, column, and diagonal add up to the same sum.\n    \"\"\"\n\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of each row, column and diagonal\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    diagonal_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diagonal_sum2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n\n    # Check if all row, column and diagonal sums are equal\n    if all(row_sum == row_sums[0] for row_sum in row_sums) and \\\n       all(col_sum == row_sums[0] for col_sum in col_sums) and \\\n       diagonal_sum1 == row_sums[0] and \\\n       diagonal_sum2 == row_sums[0]:\n        return True\n    else:\n        return False",
        "test": "assert magic_square_test([[1,2,3],[4,5,6],[7,8,0]]) == False, \"Incorrect magic square test\"",
        "num_ids": 1883,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function finds the item with maximum frequency in a given list of numbers.\n    '''\n    frequency_dict = defaultdict(int)\n    for num in nums:\n        frequency_dict[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, freq in frequency_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num",
        "test": "assert max_occurrences([1, 1, 1, 1, 1]) == 1",
        "num_ids": 1190,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_indices = [i for i in range(len(str1)) if str1[i] in vowels]\n    for i in vowel_indices:\n        if str1[i] not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            continue\n        if str1[i] == 'y':\n            continue\n        j = i + 1\n        while j < len(str1) and str1[j] in vowels:\n            j += 1\n        if j == len(str1):\n            break\n        while j > i + 1 and str1[j] not in vowels:\n            j -= 1\n        if j == i + 1:\n            break\n        str1 = str1[:i+1] + str1[i+1:j][::-1] + str1[j:]\n    return str1",
        "test": "assert reverse_vowels('12345') == '12345'",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "test": "assert tup_string(('a', 'b', 'c')) == 'abc'",
        "num_ids": 636,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total",
        "test": "assert sum_negativenum([-1, -2, -3, -4, -5]) == -15",
        "num_ids": 809,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the ratio of zeroes to non-zeroes in the array.\n    \"\"\"\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n        else:\n            continue\n    ratio = count/len(nums)\n    return ratio",
        "test": "assert zero_count(array('i', [1, 1, 1, 1, 1])) == 0.0",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Base case\n    if n == 0: \n        return False\n    \n    # If n is a power of 2, return True\n    if (n & (n - 1)) == 0: \n        return True\n    \n    # Check if n can be represented as sum of powers of 2\n    for i in range(31,-1,-1):\n        if (n >> i) & 1: # If the i-th bit is set\n            # Check if it can be represented as sum of powers of 2\n            for j in range(i-1, -1, -1):\n                if (n >> j) & 1: # If the j-th bit is set\n                    if (n >> (j+1)) & 1: # If the (j+1)-th bit is also set\n                        return False # Can not be represented as sum of powers of 2\n                    else:\n                        n = n - (1 << j) # Subtract the j-th bit from n\n                        break\n            else:\n                return True # Can be represented as sum of powers of 2\n    \n    return False # Can not be represented as sum of powers of 2",
        "test": "assert is_Sum_Of_Powers_Of_Two(9) == False",
        "num_ids": 1490,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "test": "assert circle_circumference(0) == 0 # Example 4",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            result.extend(extract_singly(sublist))\n        else:\n            result.append(sublist)\n    return result",
        "test": "assert extract_singly([[1,2],[3,4],[5,6]]) == [1,2,3,4,5,6]",
        "num_ids": 1173,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # start from the maximum value of the list and pancake it up\n    for i in range(n-1, 0, -1):\n        max_idx = i\n        # find the index of the maximum value in the unsorted part of the list\n        for j in range(0, i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # if the maximum value is not at the end of the list, pancake it up\n        if max_idx!= i:\n            nums = reverse(nums, max_idx)\n            nums = reverse(nums, i)\n    return nums\n\ndef reverse(nums, start):\n    \"\"\"\n    Reverse a list starting from the given index.\n    \"\"\"\n    end = len(nums) - 1\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\n    return nums",
        "test": "assert pancake_sort([1]) == [1]",
        "num_ids": 1627,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[3,2,1],[2,2,2]) == 1",
        "num_ids": 984,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "test": "assert find_lists(()) == 0",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function returns the maximum absolute difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([0,0,0,0,0]) == 0",
        "num_ids": 1014,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if (a*x) % n == b:\n            return (x, n//a)\n    return None",
        "test": "assert find_solution(2, 4, 11) == (2, 5)",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "test": "assert remove_elements([1,2,3,4,5], [2,4]) == [1, 3, 5]",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return n // 2 * (n // 2 + 1)\n    else:\n        return (n // 2) * (n // 2 + 1) + n // 2 * n\n\nprint(sum_series(10)) # Output: 90\nprint(sum_series(7)) # Output: 28\nprint(sum_series(0)) # Output: 0",
        "test": "assert sum_series(0) == 0",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l * tan(pi / s))\n    return area",
        "test": "assert area_polygon(8, 7) == 56.291576430568",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n+1):\n        if n%i == 0:\n            sum_of_divisors = i + n//i\n        else:\n            sum_of_divisors = n//i + i\n        if sum_of_divisors == n:\n            return True\n    return False",
        "test": "assert div_sum(28) == True # should be True",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n    # create an empty list to store the count of each character in the string\n    count_list = [0] * 26\n    # loop through each character in the string\n    for char in str1:\n        # if the character is a letter, increment its count in the count_list\n        if char.isalpha():\n            count_list[ord(char)-ord('a')] += 1\n    # return the count_list\n    return count_list",
        "test": "assert count_char_position(\"The quick brown fox jumps over the lazy dog.\") == {'t': 1, 'h': 1, 'e': 3, 'q': 1, 'u': 2, 'i': 1, 'c': 1, 'k': 1, 'b': 1, 'r': 2, 'o': 4, 'w': 1, 'n': 1, 'f': 1, 'x': 1, 'j': 1,'m': 1, 'p': 1,'s': 1, 'v': 1, 't': 1, 'l': 1, 'a': 1, 'z': 1, 'y': 1, 'd': 1, 'g': 1, '.': 1}",
        "num_ids": 2255,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 2, 3, 4, 5, 6]) == 4",
        "num_ids": 967,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "test": "assert next_power_of_2(5) == 8",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments:\n    - a: list of numbers\n    - x: number whose frequency needs to be counted\n\n    It returns the frequency of the given number in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5], 1) == 1",
        "num_ids": 903,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Returns the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(lst[m:n+1])",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 0) == 1",
        "num_ids": 1083,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "test": "assert perimeter_pentagon(3) == 15",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count",
        "test": "assert count_occurance('hello std world') == 1",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    # Initialize count and i to 0\n    count = 0\n    i = 0\n\n    # Traverse the sorted array\n    while i < n:\n        # If the current element is equal to x\n        if arr[i] == x:\n            # Increment the count\n            count += 1\n        # If the count becomes greater than or equal to n/2\n        if count >= n//2:\n            # Return True\n            return True\n        # Increment i\n        i += 1\n\n    # Return False if the element is not the majority element\n    return False",
        "test": "assert is_majority([1, 2, 3, 4, 4, 4, 5, 5, 5, 5], 10, 6) == False",
        "num_ids": 1494,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as an argument and removes all the characters which have odd index values.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function checks whether all the bits are set in the given range or not.\n    '''\n    # Calculate the total number of bits in the range\n    total_bits = r - l + 1\n    \n    # Check if the number of bits set in the range is equal to the total number of bits in the range\n    if bin(n & ((1 << r) - (1 << l))).count('1') == total_bits:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b11111110,0,7) == False",
        "num_ids": 1361,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Re-arrange the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # sort the array in non-decreasing order\n    arr.sort()\n\n    # find the index of the first negative element in the sorted array\n    neg_index = 0\n    while neg_index < n and arr[neg_index] < 0:\n        neg_index += 1\n\n    # swap the negative and positive elements in the sorted array\n    for i in range(neg_index, n):\n        if arr[i] < 0:\n            arr[i], arr[neg_index] = arr[neg_index], arr[i]\n            neg_index += 1\n\n    return arr",
        "test": "assert re_arrange_array([1, 2, 3, -4, -5, 6], 6) == [-5, -4, 1, 2, 3, 6]",
        "num_ids": 1563,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "test": "assert replace_blank(\"\", \"_\") == \"\"",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heapreplace(heap, list1[i])\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([1,2,3,4,5],1) == [5]",
        "num_ids": 1137,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as inputs and returns the lateral surface area of the cylinder.\n    \"\"\"\n    lateralsurface = 2 * 3.14 * r * h\n    return lateralsurface",
        "test": "assert lateralsuface_cylinder(0,10)==0, \"Lateral surface area of a cylinder with radius 0 and height 10 is not correct\"",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "test": "assert volume_cube(5) == 125",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Using bitwise AND operator to check even bits of the number\n    even_bits = n & 0xAAAAAAAA\n    \n    # Using bitwise OR operator to set even bits of the number\n    return even_bits | n",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n",
        "test": "assert check_occurences([(1, 2), (1, 2), (3, 4), (3, 4)]) == {(1, 2): 2, (3, 4): 2}",
        "num_ids": 1558,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"aaa\") == 6",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    prev_max = m // 2\n    for i in range(n):\n        curr_min = prev_max + 1\n        curr_max = m\n        count += curr_max - curr_min + 1\n        prev_max = curr_max\n    return count",
        "test": "assert get_total_number_of_sequences(1, 1) == 1",
        "num_ids": 1256,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function replaces the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2",
        "test": "assert replace_list([],[1,2,3]) == []",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"Hello, World!\") == 13",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return N + 1\n    else:\n        return int(root + 1)**2",
        "test": "assert next_Perfect_Square(2) == 4, \"Failed test case 2\"",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n <= 2:\n        return sum(arr)\n    elif arr[0] > arr[1]:\n        return max(max_sum(arr[1:]), arr[0] + max_sum(arr[2:]))\n    else:\n        return max(max_sum(arr[:-1]), arr[-1] + max_sum(arr[:-2]))\n",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 9 # [1, 2, 3, 4, 5]",
        "num_ids": 1735,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes the square root of a number using the Babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess * guess - number) > 0.00001:\n        guess = (guess + number / guess) / 2\n    return guess",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 772,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if str[i] == str[j] and l == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]",
        "test": "assert lps(\"cbbd\") == 2",
        "num_ids": 1396,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "test": "assert harmonic_sum(1) == 1.0",
        "num_ids": 815,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))",
        "test": "assert intersection_array([1,2,3,4,5],[5,4,3,2,1]) == [1,2,3,4,5]",
        "num_ids": 1048,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X(('apple', 'banana', 'cherry', 'banana', 'apple', 'apple'), 'apple') == 3",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes a list and an element as inputs and returns a new list with the element inserted before each element in the original list.\n    '''\n    new_lst = []\n    for item in lst:\n        new_lst.append(element)\n        new_lst.append(item)\n    return new_lst",
        "test": "assert insert_element([1], 0) == [0, 1]",
        "num_ids": 1070,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r = abs(num)\n        phi = cmath.phase(num)\n        result.append((r, phi))\n    return result",
        "test": "assert convert(7-8j) == (cmath.polar(7-8j)[0], cmath.polar(7-8j)[1])",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_integer(list1):\n    '''\n    This function returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(comb) for comb in combinations_with_replacement(l, n)]",
        "test": "assert combinations_colors(['a', 'b', 'c'], 2) == [('a', 'a'), ('a', 'b'), ('a', 'c'), ('b', 'b'), ('b', 'c'), ('c', 'c')]",
        "num_ids": 2669,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize the count of prime numbers\n    count = 0\n    \n    # Loop through all numbers from 2 to n-1\n    for i in range(2, n):\n        # Check if i is a prime number\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If i is prime, increment the count of prime numbers\n        if is_prime:\n            count += 1\n            \n    # Return the count of prime numbers\n    return count",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 1555,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    # initialize the sequence of prime numbers\n    s = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # iterate over the sequence until we find the nth prime\n    for i in range(len(s), n+1):\n        # find the smallest odd divisor of the current largest prime\n        divisor = next(d for d in range(3, s[-1]+1, 2) if s[-1] % d == 0)\n\n        # append the next prime to the sequence\n        s.append(s[-1] + divisor)\n\n    # return the nth prime\n    return s[n-1]",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 1132,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n\n    return result_tup",
        "test": "assert division_elements((1, 2, 3), (4, 5, 6)) == (0.25, 0.4, 0.5)",
        "num_ids": 1350,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 1250,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7",
        "test": "assert dog_age(0) == 0, \"dog_age function is incorrect\"",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]",
        "num_ids": 1723,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 679,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer n and returns then'th star number.\n    \"\"\"\n    # Initialize variables\n    count = 1\n    num = 1\n    # Loop through the sequence of numbers\n    while count < n:\n        # Calculate the next number in the sequence\n        num = num * 2 + 1\n        # Increment the count\n        count += 1\n    # Return then'th star number\n    return num",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    This function takes a list as an argument and returns the sum of even numbers at even positions of the list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "test": "assert sum_even_and_even_index([2, 2, 4, 4, 6]) == 12",
        "num_ids": 1171,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**5\n    return total",
        "test": "assert even_Power_Sum(1) == 0 # base case",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]",
        "test": "assert rear_extract([(1,2),(3,4),(5,6)]) == [2,4,6]",
        "num_ids": 874,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "test": "assert substract_elements((1,2,3), (1,2,3)) == (0,0,0)",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r ** 2) * h\n    return volume\n\nprint(volume_cylinder(5,10))",
        "test": "assert volume_cylinder(0,5) == 0",
        "num_ids": 958,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}",
        "test": "assert dict_filter({'a': 10, 'b': 5, 'c': 20}, 20) == {'c': 20}",
        "num_ids": 1113,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[test_tup.index(i)+1]:\n            count += 1\n    return count",
        "test": "assert count_first_elements((1,1,1,1,1)) == 0",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    count = 1\n    while count <= n:\n        decagonal += count\n        count += 1\n    return decagonal",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1231,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sequential_search(dlist, item):\n    '''\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return found, index",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 1040,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1,2,3,4,5]) == True",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3, -3, -3]",
        "num_ids": 1059,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def validate(n):\n    # get the digits of the integer\n    digits = [int(d) for d in str(n)]\n    \n    # check the frequency of each digit\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    \n    return True",
        "test": "assert validate(12345) == True # valid input with all digits unique",
        "num_ids": 993,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element, otherwise it returns False.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "test": "assert check_element([1,1,1,1,1],1) == True",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.b{2,3}'\n    return re.search(pattern, text) is not None",
        "test": "assert text_match_two_three(\"abc\") == False",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    if k > n:\n        return -1\n    \n    max_sum = float('-inf')\n    for i in range(k):\n        current_sum = 0\n        for j in range(i, n, k):\n            current_sum += a[j]\n            max_sum = max(max_sum, current_sum)\n            \n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 1) == 15",
        "num_ids": 1540,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_length(lst):\n    \"\"\"\n    This function takes a list of lists as an argument and returns a list of maximum length.\n    \"\"\"\n    max_lst = []\n    max_len = 0\n    \n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_lst = sublist\n            \n    return max_lst",
        "test": "assert max_length([ [1, 2], [3, 4, 5], [6, 7, 8, 9] ]) == [6, 7, 8, 9]",
        "num_ids": 1192,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_no_of_ways(n, k):\n    if n <= 0 or k <= 0:\n        return 0\n    elif n == 1:\n        return k\n    else:\n        return count_no_of_ways(n-1, k) + (k*count_no_of_ways(n-2, k))\n",
        "test": "assert count_no_of_ways(2, 2) == 2",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m",
        "test": "assert find(10,3) == 3 # quotient of 10 divided by 3 is 3",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s",
        "test": "assert otherside_rightangle(8,6) == 10",
        "num_ids": 802,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val",
        "test": "assert max_val([1, 2, 3]) == 3",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes a number as input and returns the sum of all its divisors.\n    \"\"\"\n    sum_divisor = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisor += i\n    return sum_divisor",
        "test": "assert sum_div(1) == 1 # 1 is a self divisor",
        "num_ids": 811,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Count the number of inversions in a given array.\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
        "test": "assert get_Inv_Count([1, 2, 3]) == 0",
        "num_ids": 1296,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "test": "assert flatten_list([1, [2, 3], [4, [5, 6]], [[7]]]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 1007,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    st_dict = defaultdict(int)\n    max_agg = 0\n    for tup in stdata:\n        st_dict[tup[0]] += tup[1]\n        max_agg = max(max_agg, sum(st_dict.values()))\n    return max_agg",
        "test": "assert max_aggregate([(1, 2), (3, 4), (5, 6)]) == 12",
        "num_ids": 1518,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if sum(map(int, binary[:n])) == sum(map(int, binary[-n:])):\n            count += 1\n    return count\n\nprint(count_binary_seq(3))",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def dict_depth(d, depth=0):\n    \"\"\"\n    Recursively count the depth of a dictionary.\n\n    Args:\n        d (dict): The dictionary to count the depth of.\n        depth (int, optional): The current depth of the dictionary. Defaults to 0.\n\n    Returns:\n        int: The depth of the dictionary.\n    \"\"\"\n    if not isinstance(d, dict) or not d:\n        return depth\n    return max(dict_depth(v, depth+1) for v in d.values())",
        "test": "assert dict_depth({'a':1}) == 1",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the length of the array\n    n = len(arr)\n\n    # Find the starting and ending indices of the rotation\n    start = (index - rotations) % n\n    end = (start + ranges - 1) % n\n\n    # Find the element at the given index in the range\n    element = arr[start]\n    for i in range(start + 1, end + 1):\n        element = arr[i]\n\n    # Return the element at the given index\n    return element",
        "test": "assert find_Element([1,2,3,4,5,6,7,8,9,10], 10, 0, 5) == 6",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\n\ndef start_withp(words):\n    # Using regular expression to find words starting with 'p'\n    p_words = [word for word in words if re.match('^p', word)]\n    \n    # Returning two words from the list of words starting with 'p'\n    if len(p_words) >= 2:\n        return p_words[:2]\n    else:\n        return []",
        "test": "assert start_withp(['pear', 'plum', 'pineapple']) == ('pear', 'plum')",
        "num_ids": 957,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum variable and the dp array\n    max_sum = 0\n    dp = [0] * n\n    \n    # Fill the dp array using the values of the previous elements\n    for i in range(n):\n        if i == 0:\n            dp[i] = a[i]\n        else:\n            dp[i] = max(dp[i-1], a[i])\n    \n    # Initialize the maximum sum variable for the subsequence including the kth element\n    max_sum_k = 0\n    \n    # Traverse from the ith element to the beginning of the array\n    for i in range(index, -1, -1):\n        # Update the maximum sum for the subsequence including the kth element\n        if a[i] < k:\n            max_sum_k = max(max_sum_k, dp[i])\n        else:\n            # Update the maximum sum variable for the subsequence from prefix until ith index\n            max_sum = max(max_sum, dp[i] + max_sum_k)\n    \n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1, 5, 11, 2, 10, 7], 6, 3, 4) == 15 # 15",
        "num_ids": 2537,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n == 0:\n        return ()\n    \n    if n > len(tuplex):\n        return tuplex\n    \n    if m == 0:\n        return deepcopy(tuplex[:n])\n    \n    return colon_tuplex(tuplex[m:], m-1, n-1)",
        "test": "assert colon_tuplex((1,2,3,4,5), 3, 5) == (4, 5)",
        "num_ids": 1027,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for i in range(N):\n        max_product = float('-inf')\n        for j in range(len(nums1)):\n            product = nums1[j] * nums2[i]\n            if product > max_product:\n                max_product = product\n        max_products.append(max_product)\n    return max_products",
        "test": "assert large_product([10, 11, 12, 13, 14], [15, 16, 17, 18, 19], 2) == [840, 600]",
        "num_ids": 1814,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(5, 10))\nprint(maximum(20, 10))",
        "test": "assert maximum(1,2) == 2",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as an argument and returns a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Sets the left most unset bit in a number.\n\n    Args:\n        n (int): The number to modify.\n\n    Returns:\n        int: The modified number with the left most unset bit set.\n    '''\n\n    # Find the rightmost set bit\n    rightmost_set_bit = n & -n\n\n    # Set the rightmost set bit to 1\n    n |= rightmost_set_bit\n\n    return n",
        "test": "assert set_left_most_unset_bit(0b10000000) == 0b10000000",
        "num_ids": 1227,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(2, 3) == math.pi * 2**2 * 3/3, \"The volume of the cone is not correct.\"",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while(power <= n):\n        power *= 2\n    return power // 2",
        "test": "assert highest_Power_of_2(3) == 2",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function returns then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a = 2\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "test": "assert add_string([], '{} are fruits.') == []",
        "num_ids": 1133,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        new_dict = {}\n        new_dict[l1[i]] = {}\n        new_dict[l1[i]][l2[i]] = l3[i]\n        result.append(new_dict)\n    return result",
        "test": "assert convert_list_dictionary([], ['a', 'b', 'c'], ['A', 'B', 'C']) == []",
        "num_ids": 1768,
        "indeed": true
    },
    {
        "number": 392,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n % 2 == 0 and n % 3 == 0 and n % 4 == 0 and n % 5 == 0:\n        return n\n    else:\n        return max((get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5)), n)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list",
        "test": "assert max_length_list([[1,2,3],[4,5],[6]]) == [1,2,3]",
        "num_ids": 1217,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "test": "assert check_distinct((1, 2, 3)) == True",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    return None",
        "test": "assert first_non_repeating_character('hello world') == 'h'",
        "num_ids": 1147,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    return match is not None",
        "test": "assert check_char('a') == True",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n    # find the middle index of the sorted numbers list\n    middle_index = len(numbers) // 2\n    # if the length of the sorted list is odd, return the middle element\n    if len(numbers) % 2 == 1:\n        return numbers[middle_index]\n    # if the length of the sorted list is even, return the average of the middle two elements\n    else:\n        return (numbers[middle_index - 1] + numbers[middle_index]) / 2",
        "test": "assert median_numbers(2, 4, 6) == 4",
        "num_ids": 968,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        while num > 0:\n            total += num % 10\n            num //= 10\n    return total",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 937,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "test": "assert bitwise_xor((0, 0, 0), (0, 0, 0)) == (0, 0, 0)",
        "num_ids": 1154,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    freq_dict = {}\n    for tuple_ in test_list:\n        freq_dict[tuple_] = freq_dict.get(tuple_, 0) + 1\n    \n    return len(freq_dict)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 1453,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)",
        "test": "assert add_nested_tuples(((1,2,3), (4,5,6)), ((7,8,9), (10,11,12))) == ((8,10,12), (14,16,18))",
        "num_ids": 1559,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2,3) == 2",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i in tuple1: \n            return True\n    return False\n",
        "test": "assert check_tuplex((1,2,3),(4,5,6)) == False",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert find_Parity(10) == True # test case 2",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_str = str(n)\n    n_list = list(n_str)\n    i = len(n_list) - 1\n    while i > 0 and n_list[i] <= n_list[i-1]:\n        i -= 1\n    if i == 0:\n        return -1 # no next bigger number\n    j = len(n_list) - 1\n    while n_list[j] <= n_list[i-1]:\n        j -= 1\n    n_list[i-1], n_list[j] = n_list[j], n_list[i-1]\n    n_list[i:] = sorted(n_list[i:])\n    return int(''.join(n_list))",
        "test": "assert rearrange_bigger(1234) == 1243",
        "num_ids": 1376,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    for _ in range(k):\n        pair = heapq.heappop(heap)\n        pairs.append((nums1[pair[1]], nums2[pair[2]]))\n    return pairs",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)]",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1] * list1[i][1] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 24",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_val(lst):\n    \"\"\"\n    This function returns the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 864,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel('snake_case') =='snakeCase'",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and removes all odd numbers from the list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list",
        "test": "assert remove_odd([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 796,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i][n])\n    return result",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 0) == (1, 2)",
        "num_ids": 975,
        "indeed": true
    },
    {
        "number": 414,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    return any(elem in list2 for elem in list1)",
        "test": "assert overlapping([1,2,3],[2,3,4]) == True",
        "num_ids": 661,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    \n    # Loop through all possible pairs of elements in the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            \n            # Update max_product if current product is greater than max_product\n            if product > max_product:\n                max_product = product\n    \n    return max_product",
        "test": "assert max_Product([0, 2, -2, 3]) == 6",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    for tuple in Input:\n        if common_first_element is None:\n            common_first_element = tuple[0]\n        elif common_first_element!= tuple[0]:\n            return None\n    return common_first_element",
        "test": "assert group_tuples([(1,2,3),(4,5,6),(7,8,9),(1,2)]) == None",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as an argument and returns the element of the list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem",
        "test": "assert Find_Max([]) == None",
        "num_ids": 838,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = []\n    for num in list1:\n        rounded_list.append(round(num))\n    total_sum = sum(rounded_list)\n    total = total_sum * len(list1)\n    print(total)",
        "test": "assert round_and_sum([1.0, 2.0, 3.0, 4.0, 5.0]) == 50",
        "num_ids": 1152,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an even natural number n as input and returns the cube sum of first n even natural numbers.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate from 2 to n, and add the cube of the even number to the sum\n    for i in range(2, n+1, 2):\n        sum += i**3\n        \n    return sum",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)",
        "test": "assert concatenate_tuple(tuple()) == ''",
        "num_ids": 728,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer 'n' as input and returns the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 815,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = ()\n    for string in test_tuple:\n        result += (string[len(string)-1],)\n    return result",
        "test": "assert extract_rear((\"dog\", \"cat\", \"bird\")) == (\"g\", \"t\", \"d\")",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            count += count_element_in_list(list1[i], x)\n        else:\n            if list1[i] == x:\n                count += 1\n    return count",
        "test": "assert count_element_in_list([], 1) == 0",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 775,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None",
        "test": "assert change_date_format('1999-01-01') == '01-01-1999'",
        "num_ids": 1175,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list",
        "test": "assert shell_sort([]) == []",
        "num_ids": 1168,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples and returns a new tuple with the element-wise and values.\n    \"\"\"\n    return tuple(i & j for i, j in zip(test_tup1, test_tup2))",
        "test": "assert and_tuples((True, True, False), (True, False, True)) == (True, False, False)",
        "num_ids": 931,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        print(\"The equation is not a parabola.\")\n        return None\n    \n    else:\n        x = -b / (2 * a)\n        return x",
        "test": "assert parabola_directrix(1, 0, 0) == 0, \"parabola_directrix failed\"",
        "num_ids": 1252,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = (base1 + base2) / 2\n    return median_length",
        "test": "assert median_trapezium(1,1,1) == 1.0",
        "num_ids": 888,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "test": "assert check_greater([1,2,3,4,5], 3) == True",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None",
        "test": "assert text_match_one(\"bbb\") == None",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        n = abs(n)\n    return n % 10",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 1498,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the negative numbers from the input list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([1,2,-3,4,-5]) == [-3,-5]",
        "num_ids": 773,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0] in test_list[j] and test_list[i][1] in test_list[j]) or (test_list[i][1] in test_list[j] and test_list[i][0] in test_list[j]):\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3)]) == 2",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))",
        "test": "assert multiple_to_single([0]) == 0",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b(very|extremely|quite|really|rather|hardly|barely|scarcely|little|much|more|most|less|least|least|several|a lot of|notably|particularly|considerably|undoubtedly|probably|presumably|definitely|undoubtably|unquestionably|absolutely|certainly|exactly|precisely|absolutely)\\b', text, re.IGNORECASE)\n\n    # If there are adverbs in the sentence, return their positions and the first one\n    if adverbs:\n        positions = [match.start() for match in re.finditer(r'\\b(very|extremely|quite|really|rather|hardly|barely|scarcely|little|much|more|most|less|least|least|several|a lot of|notably|particularly|considerably|undoubtedly|probably|presumably|definitely|undoubtably|unquestionably|absolutely|certainly|exactly|precisely|absolutely)\\b', text, re.IGNORECASE)]\n        return positions[0], adverbs[0]\n\n    # If there are no adverbs in the sentence, return None for both positions and adverb\n    else:\n        return None, None",
        "test": "assert find_adverb_position(\"The cat is sleeping in the box.\") == {\"is\": (0, 2), \"in\": (11, 13)}",
        "num_ids": 1873,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2",
        "test": "assert surfacearea_cube(1) == 6 ",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_positive = 0\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n    return count_positive / len(nums)",
        "test": "assert positive_count(array('i', [-1, 0, 1, 2, -3])) == 2/5",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest",
        "test": "assert largest_neg([-1, -2, -3, -4, -5]) == -1",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for i in range(K):\n            if i < len(tup):\n                trimmed_tup += (tup[i],)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "test": "assert trim_tuple([(1,2,3),(4,5,6),(7,8,9)], 3) == [(1,2,3),(4,5,6),(7,8,9)]",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input. It counts the occurrence of all elements of the list in the tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    for item in tup:\n        if item in count:\n            result[item] = count[item]\n    return result",
        "test": "assert count_Occurrence((1, 2, 3, 2, 1), [3, 2, 1]) == {1: 1, 2: 1, 3: 1}",
        "num_ids": 1588,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 915,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n\nprint(cal_sum(10))",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n\n    :param str_list: list of string values\n    :param size: size of strings to extract\n    :return: list of extracted strings\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            result.append(str_list[i][:size])\n    return result",
        "test": "assert extract_string(\"hello world\", 1) == [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"]",
        "num_ids": 1250,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(1000, 1000) == 0",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of even factors of that number.\n    \"\"\"\n    sum_of_factors = 0\n    \n    # Finding the factors of the input number\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    \n    # Summing up the even factors of the input number\n    for factor in factors:\n        if factor % 2 == 0:\n            sum_of_factors += factor\n    \n    return sum_of_factors",
        "test": "assert sumofFactors(1) == 0 # 0",
        "num_ids": 805,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_match_wordz('hi zthere') == True",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    elif monthnum2 == 2:\n        return True\n    else:\n        return \"Invalid month number\"\n\nprint(check_monthnumb_number(2)) # True\nprint(check_monthnumb_number(4)) # False\nprint(check_monthnumb_number(13)) # Invalid month number",
        "test": "assert check_monthnumb_number(12) == True",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 786,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "test": "assert Find_Min([1,2,3,4,5,6]) == [1,2,3,4,5]",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(3,4) == 12",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)",
        "test": "assert remove_uppercase('Abcdefg') == 'bcdefg'",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def Extract(lst):\n    '''\n    This function returns a new list containing the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([['apple', 'banana', 'cherry'], ['dog', 'cat', 'fish'], ['red', 'green', 'blue']]) == ['apple', 'dog','red']",
        "num_ids": 794,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes in a string as input and returns the number of uppercase characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr('Hello World') == 2, 'Should be 2'",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result",
        "test": "assert combinations_list([]) == []",
        "num_ids": 1619,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_subarray_product(arr):\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    return max_product",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6  # [-2, 3]",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = dict.values()\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert check_value({'a':1, 'b':1, 'c':1}, 1) == True",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def drop_empty(dict1):\n    '''\n    This function drops empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1], arr[0] * arr[1])\n    else:\n        # Initialize max_so_far and max_ending_here with the first element of the array\n        max_so_far = max_ending_here = arr[0]\n\n        # Loop through the array from the second element to the last element\n        for i in range(1, n):\n            # Update max_ending_here and max_so_far accordingly\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n\n        return max_so_far",
        "test": "assert max_product([2,3,-2,4]) == 6",
        "num_ids": 1436,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i]+test_tup[i+1])\n    return res",
        "test": "assert add_pairwise((1, 5, 10, 15, 20)) == (6, 12, 18)",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product",
        "test": "assert find_remainder([1, 2, 3], 5) == 1",
        "num_ids": 690,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_Consecutive(l): \n    n = len(l) \n    for i in range(n-1): \n        if (l[i+1] - l[i] == 1) or (l[i] - l[i+1] == 1): \n            return True \n    return False ",
        "test": "assert check_Consecutive([1, 2, 3, 5, 6]) == True",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert both lists to sets of tuples, so that we can find the intersection\n    set1 = set(map(tuple, test_list1))\n    set2 = set(map(tuple, test_list2))\n    # Find the intersection and convert it back to a list of tuples\n    intersection = list(set1.intersection(set2))\n    return intersection",
        "test": "assert tuple_intersection([(1, 2), (2, 3), (3, 4)], [(1, 2), (3, 4)]) == [(1, 2), (3, 4)]",
        "num_ids": 1376,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello\", \"l\", \"z\") == \"hezzo\"",
        "num_ids": 745,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return Counter(dict1).most_common()",
        "test": "assert sort_counter({'a': 4, 'b': 2, 'c': 1, 'd': 3}) == [('a', 4), ('d', 3), ('b', 2), ('c', 1)]",
        "num_ids": 1034,
        "indeed": true
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)",
        "test": "assert big_sum([-1,2,-3,4,-5]) == -1",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower('hello') == 'hello'",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r\"[a-z]+[A-Z]\"\n    return re.sub(pattern, \"\", str1)",
        "test": "assert remove_lowercase('12345') == '12345'",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    return n // 10**(len(str(n))-1)",
        "test": "assert first_Digit(12345) == 1",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in lst if x % 2!= 0]",
        "test": "assert Split([1,2,3,4,5,6,7]) == [1,3,5,7]",
        "num_ids": 737,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
        "test": "assert difference(1) == 0",
        "num_ids": 763,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    \n    for i in range(N):\n        for j in range(i+1,N):\n            if ((A[i] ^ A[j]) & 1):\n                count += 1\n    \n    return count",
        "test": "assert find_Odd_Pair([1,3,5,7,9],5) == 0",
        "num_ids": 892,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "test": "assert toggle_string(\"Hello, World!\") == \"hELLO, wORLD!\"",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    n1_list = [int(d) for d in str(n1)]\n    n2_list = [int(d) for d in str(n2)]\n    total_sum = 0\n    for i in range(len(n1_list)):\n        total_sum += abs(n1_list[i] - n2_list[i])\n    return total_sum",
        "test": "assert digit_distance_nums(10, 11) == 1",
        "num_ids": 1496,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "test": "assert max_sub_array_sum([1, 2, 3, 4, 5], 5) == 15",
        "num_ids": 1299,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set to store unique elements of both tuples\n    unique_elements = set(test_tup1).union(set(test_tup2))\n\n    # Sort the unique elements and convert them back to tuple\n    sorted_tuple = tuple(sorted(unique_elements))\n\n    return sorted_tuple",
        "test": "assert union_elements((1,2,3,4), (3,4,5,6)) == (1,2,3,4,5,6)",
        "num_ids": 1315,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 987,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"This is a string with 'one' and \\\"two\\\" quotes inside.\"\nvalues = extract_values(text)\nprint(values)",
        "test": "assert extract_values(\"The price of the car is \\\"$10,000\\\".\") == [\"$10,000\"]",
        "num_ids": 991,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5], 5) == 10",
        "num_ids": 832,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 647,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 'Invalid input. Please enter a non-negative integer.'\n    else:\n        sum_n = 0\n        while n > 0:\n            sum_n += n % 10\n            n //= 10\n        return sum_n",
        "test": "assert sum_digits(12345) == 15",
        "num_ids": 794,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted_list = sorted(list1)\n    if list1 == sorted_list:\n        return True\n    else:\n        return False",
        "test": "assert issort_list([1,2,3,4,5]) == True",
        "num_ids": 676,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['dog', 'cat', 'bird'], ['hello', 'world']]) == [['apple', 'banana', 'cherry'], ['bird', 'cat', 'dog'], ['hello', 'world']]",
        "num_ids": 1720,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def two_unique_nums(nums):\n    unique_nums = list(set(nums))\n    return unique_nums",
        "test": "assert two_unique_nums([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set()\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "test": "assert unique_product([1, 2, 3]) == 6",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area",
        "test": "assert surfacearea_cylinder(0,6) == 0, 'Incorrect surface area calculation'",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    A: List A\n    B: List B\n\n    Returns True if B is a sublist of A, otherwise returns False.\n    '''\n    if len(B) == 0:\n        return True\n    if len(A) < len(B):\n        return False\n    \n    if A[:len(B)] == B:\n        return True\n    return is_Sub_Array(A[1:], B)",
        "test": "assert not is_Sub_Array([1,2,3], [4,5,6]), \"Sublist not found\"",
        "num_ids": 1033,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact % 10",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 1242,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple containing the dissimilar elements from both tuples.\n    '''\n    dissimilar_elements = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements += (test_tup1[i],)\n    return dissimilar_elements",
        "test": "assert find_dissimilar((1,2,3),(1,2,3)) == ()",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes in a nested mixed tuple and a function that determines if an element is even or not.\n    It then removes any uneven elements from the nested tuple and returns the modified tuple.\n    '''\n    new_tuple = []\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == tuple:\n            new_tuple.append(even_ele(test_tuple[i], even_fnc))\n        elif even_fnc(test_tuple[i]):\n            new_tuple.append(test_tuple[i])\n    return tuple(new_tuple)",
        "test": "assert even_ele((('a', 'b'), (3, 4), ('c',)), lambda x: True) == (('a', 'b'), (3, 4), ('c',))",
        "num_ids": 1427,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (4 * b) + (4 * b * s)\n    return area",
        "test": "assert surface_Area(7,3)==44",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True",
        "test": "assert not my_dict({'a': 1}), \"Dictionary is not empty\"",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += catalan_number(i) * catalan_number(n-i-1)\n        return result",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        adverb = matches[0]\n        start_pos = text.find(adverb)\n        end_pos = start_pos + len(adverb)\n        return adverb, start_pos, end_pos\n    else:\n        return None, None, None",
        "test": "assert find_adverbs(\"The car drove down the road.\") == (\"down\", 21)",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import heapq\ndef expensive_items(items, n):\n    \"\"\"\n    Finds the n most expensive items in a given dataset.\n\n    Args:\n        items (list): A list of tuples (name, price) representing the items and their prices.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of the n most expensive items, in descending order of price.\n    \"\"\"\n    # Create a min-heap of (price, name) tuples using the heapq module\n    heap = [(item[1], item[0]) for item in items]\n    heapq.heapify(heap)\n\n    # Extract the n most expensive items from the heap, in descending order of price\n    result = []\n    for i in range(n):\n        if heap:\n            result.append(heapq.heappop(heap))\n\n    # Sort the result by price in descending order\n    result.sort(reverse=True)\n\n    # Return the list of (name, price) tuples for the most expensive items\n    return [(name, price) for price, name in result]",
        "test": "assert expensive_items([(\"apple\", 1.5), (\"banana\", 2), (\"orange\", 1.3), (\"pear\", 3), (\"grape\", 2.5)], 0) == []",
        "num_ids": 1853,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "test": "assert split_Arr([1,2,3,4,5],5) == [1,2,3,4,5], 'incorrect split'",
        "num_ids": 1262,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns a tuple containing the same elements as the input list.\n    \"\"\"\n    return tuple(lst)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 612,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    return max(nums) - min(nums)",
        "test": "assert big_diff([1,2,3,4,5]) == 4",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a  # swap a and b if a > b\n        \n    result = []\n    for i in range(a, b+1):\n        if i == int(i**0.5)**2:  # check if i is a perfect square\n            result.append(i)\n            \n    return result",
        "test": "assert perfect_squares(1, 100) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
        "num_ids": 1174,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = x\n    theta = y\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)",
        "test": "assert polar_rect(0,0) == (0.0, 0.0)",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    res = 1\n    for i in range(k):\n        res = res*(n-i)//(i+1)\n    return res",
        "test": "assert binomial_Coeff(5,2) == 10",
        "num_ids": 1080,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an ip address.\n    '''\n    # Split the ip address into its octets\n    octets = ip.split('.')\n    \n    # Remove any leading zeroes from each octet and join the octets back together\n    return '.'.join(str(int(octet)) for octet in octets)",
        "test": "assert removezero_ip('192.168.1.0') == '192.168.1.0'",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    if len(list1) == 0:\n        return None\n    else:\n        even = list1[0]\n        odd = list1[1]\n        if even % 2 == 0:\n            return abs(even - odd)\n        else:\n            return abs(odd - even)",
        "test": "assert diff_even_odd([1, 3, 5, 7, 9]) == 2",
        "num_ids": 1181,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    mapping = {}\n    for i in range(n):\n        if str1[i] == str2[i]:\n            continue\n        elif str1[i] in mapping:\n            count += 1\n            mapping[str1[i]] = mapping[str1[i]] + [i]\n        else:\n            mapping[str1[i]] = [i]\n    return count",
        "test": "assert min_Swaps('111000','001111') == 3",
        "num_ids": 2870,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "test": "assert tuple_size((1, 2, 3)) == sys.getsizeof((1, 2, 3))",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n    arr1 (list): The first sorted array of integers.\n    arr2 (list): The second sorted array of integers.\n    k (int): The position of the kth element to be found.\n\n    Returns:\n    int: The kth element from the two sorted arrays.\n    \"\"\"\n\n    n1, n2 = len(arr1), len(arr2)\n\n    # Find the length of the intersection of the two arrays\n    len_intersection = min(n1, n2)\n\n    # Initialize pointers to the first element of both arrays\n    i, j = 0, 0\n\n    # Iterate over the intersection of the two arrays\n    while i < len_intersection:\n\n        # Check if the current element of arr1 is smaller than the current element of arr2\n        if arr1[i] < arr2[j]:\n            i += 1\n\n        # If the current element of arr1 is greater than the current element of arr2,\n        # increment the pointer of arr2\n        else:\n            j += 1\n\n        # If the pointer of arr1 is equal to k, return the current element of arr1\n        if i == k:\n            return arr1[i]\n\n    # If k is greater than the length of the intersection, k must be in the second array\n    # so decrement j by one and return the kth element from arr2\n    j -= 1\n    return arr2[j]",
        "test": "assert find_kth([1, 2, 3], [4, 5, 6, 7], 7) == 7",
        "num_ids": 1872,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Finding the number of digits in the given number\n    num_digits = len(str(number))\n\n    # Finding the sum of the cube of each digit\n    sum_of_cubes = sum([int(digit)**num_digits for digit in str(number)])\n\n    # Checking if the sum is equal to the given number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 1055,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(0) == True",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, return it\n        if char in freq:\n            return char\n        # otherwise, add it to the dictionary with a frequency of 1\n        else:\n            freq[char] = 1\n    # if no repeated characters are found, return None\n    return None",
        "test": "assert first_repeated_char('hello') == 'l'",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, i)):\n            ludic.append(i)\n    return ludic",
        "test": "assert get_ludic(0) == []",
        "num_ids": 969,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def reverse_words(s):\n    \"\"\"\n    This function takes a string as input and returns the string with the words reversed.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse the list of words\n    words.reverse()\n\n    # Join the reversed list of words into a string\n    return''.join(words)",
        "test": "assert reverse_words(\"a\") == \"a\"",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian",
        "test": "assert radian_degree(90) == math.pi/2",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals('Hello, World!', 'Hello') == ('Hello', 0, 5)",
        "num_ids": 1131,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def bell_Number(n):\n    b = 1\n    for i in range(n):\n        b = b * (i + 1)\n    return b",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]",
        "test": "assert remove_kth_element([1,2,3,4,5], 3) == [1,2,4,5]",
        "num_ids": 998,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if N < len(row):\n            if row[N] > max_num:\n                max_num = row[N]\n    return max_num",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 1) == 8",
        "num_ids": 1118,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1,3,5],[2,4,6]]",
        "num_ids": 1328,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for tup in test_list:\n        cumulative_sum += sum(tup)\n    return cumulative_sum",
        "test": "assert cummulative_sum([(1,2,3,4,5), (6,7,8,9,10)]) == [(1,2,3,4,5), (7,9,11,13,15)]",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 615,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        result.append(total/count)\n    return result",
        "test": "assert average_tuple(((1, 2), (3, 4))) == [1.5, 3.5]",
        "num_ids": 1226,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "test": "assert tuple_modulo((7,8,9), (3,2,1)) == (1, 0, 0)",
        "num_ids": 1116,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def min_Jumps(steps, d):\n    n = len(steps)\n    dp = [[float('inf')]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n-1):\n        dp[i][i+1] = steps[i]\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i + k\n            for p in range(i+1, j):\n                if dp[i][p]+dp[p][j] < dp[i][j]:\n                    dp[i][j] = dp[i][p]+dp[p][j]\n    return dp[0][n-1]",
        "test": "assert min_Jumps([1, 1, 1, 1, 1], 1) == 4",
        "num_ids": 1723,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([2,4,6],[1,2,3]) == [2,2,2]",
        "num_ids": 1080,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            num_str += char\n    return num_str",
        "test": "assert move_num(\"123456\") == \"123456\"",
        "num_ids": 1325,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
        "test": "assert largest_subset([1, 2, 3, 4, 6, 7]) == 3",
        "num_ids": 1235,
        "indeed": true
    },
    {
        "number": 622,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = (n - 1) // 2\n    j = i\n\n    while i >= 0 and j < n:\n        if arr1[i] <= arr2[j]:\n            return (arr1[i] + arr2[j]) / 2\n        elif arr1[i] > arr2[j]:\n            return arr1[i]\n        i -= 1\n        j += 1\n\n    return arr2[j]",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 3) == 3.5",
        "num_ids": 1358,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def nth_nums(nums, n):\n    '''\n    Computes the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]",
        "test": "assert nth_nums([1,2,3,4,5], 2) == [1, 4, 9, 16, 25]",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_upper(string):\n    return string.upper()",
        "test": "assert is_upper(\"PYTHON\")!= \"Python\"",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last element of the list.\n    '''\n    # Save the first element in a temporary variable\n    temp = newList[0]\n    # Assign the last element to the first element\n    newList[0] = newList[-1]\n    # Assign the temporary variable to the last element\n    newList[-1] = temp\n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    h = r * math.sin(math.pi/3)\n    return 0.5 * r * h",
        "test": "assert triangle_area(5) == 78.53981633974483",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if i < 0 or i > end:\n            continue\n        elif i == array[i]:\n            continue\n        elif i!= array[i]:\n            if i == array[start]:\n                return start + 1\n            else:\n                return i\n    \n    return end + 1",
        "test": "assert find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10",
        "num_ids": 1823,
        "indeed": true
    },
    {
        "number": 628,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def Split(list):\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 843,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple as input and returns a list of all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            adj.append((ele[0]+i, ele[1]+j))\n    return adj",
        "test": "assert adjac((0,3)) == [(0,2), (1,3)]",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        text = text.replace(' ', '_')\n    else:\n        text = text.replace('_','')\n    return text",
        "test": "assert replace_spaces('123456') == '123456'",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    for i in range(count, len(num_list)):\n        num_list[i] = 0\n    return num_list",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1502,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def pair_xor_Sum(arr,n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = xor_sum + (arr[i] ^ arr[j])\n    return xor_sum",
        "test": "assert pair_xor_Sum([1,2,3,4,5,6,7,8],8) == 32",
        "num_ids": 1328,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using heap sort algorithm.\n    '''\n    heap = iterable[:] # create a heap from the iterable\n    hq.heapify(heap) # convert the list into a heap\n    return [hq.heappop(heap) for i in range(len(heap))] # sort the heap and return a sorted list",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1224,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount == actual_cost:\n        return True\n    else:\n        return True\n",
        "test": "assert noprofit_noloss(100,50) == True, \"Test 2 failed\"",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert wind velocity from km/h to m/s\n    v = v / 3.6\n\n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index",
        "test": "assert wind_chill(20,30) == 18, \"Failed for wind speed 20 km/h and temperature 30 \u00b0C\"",
        "num_ids": 1464,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "test": "assert sample_nam(['Alice', 'Bob', 'Charlie', 'David']) == 20",
        "num_ids": 1102,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)",
        "test": "assert remove_parenthesis(\"This is a string with no parenthesis.\") == \"This is a string with no parenthesis.\"",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (3 * n - 1) // 2",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r\"(\\b[^z]*z[^z]*\\b)\"\n    match = re.search(pattern, text)\n    return bool(match)",
        "test": "assert text_match_wordz_middle('It is a truth universally acknowledged.') == False",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 1541,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 19,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)",
        "test": "assert add_dict_to_tuple((1, 2), {\"a\": 3, \"b\": 4}) == ((1, 2), {\"a\": 3, \"b\": 4})",
        "num_ids": 1158,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    \n    # Fill the first row and first column of the dp table\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    \n    # Fill the rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # Compute the maximum average of all possible paths\n    max_avg = -float('inf')\n    for i in range(n):\n        for j in range(n):\n            avg = (dp[i][j] - dp[i-1][j] - dp[i][j-1] + cost[i][j]) / (n-1)\n            max_avg = max(max_avg, avg)\n    \n    return max_avg",
        "test": "assert maxAverageOfPath([[10,20,30],[40,50,60],[70,80,90]]) == 45.0",
        "num_ids": 1905,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[student] = data\n    return filtered_students",
        "test": "assert filter_data({'Alice':(1.8, 60), 'Bob':(1.6, 50), 'Charlie':(1.7, 55)}, 1.6, 65) == {}",
        "num_ids": 2173,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3], [4, 5, 6]) == []",
        "num_ids": 1175,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert base to string to iterate over its characters\n    base_str = str(base)\n    # Initialize sum to 0\n    sum = 0\n    # Iterate over characters of the base string\n    for char in base_str:\n        # Convert character back to integer\n        digit = int(char)\n        # Calculate the power of the digit and add it to the sum\n        sum += digit ** power\n    # Return the final sum\n    return sum",
        "test": "assert power_base_sum(5, 0) == 1  # 5^0 = 1",
        "num_ids": 964,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Find all the occurrences of quotation marks\n    matches = re.findall(r'\"[^\"]*\"', text1)\n    # Extract the values between the quotation marks\n    values = [match.strip('\"') for match in matches]\n    return values",
        "test": "assert extract_quotation(\"The quick brown fox \\\"jumps\\\" over the lazy dog\") == [\"jumps\"]",
        "num_ids": 1025,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1  # number of elements in the original tuple\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "test": "assert multiply_elements((1,2,3,4)) == (2,6,12)",
        "num_ids": 1112,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the sums of corresponding elements of the input lists.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Lists should have same length.\")\n\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n\n    return result",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5, 7, 9]",
        "num_ids": 1027,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use groupby() to group the elements of nums together based on their consecutive duplicates\n    groups = groupby(nums)\n    # Iterate over the groups and keep only the first element of each group\n    result = [next(group) for key, group in groups]\n    return result",
        "test": "assert consecutive_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1203,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * h + 2 * math.pi * r * math.sqrt(r ** 2 + h ** 2)\n    return surface_area",
        "test": "assert lateralsurface_cone(7,8) == math.pi * 7 + 2 * math.pi * 7",
        "num_ids": 1060,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Replace spaces with a colon\n    text = re.sub(r'[\\s]', ':', text)\n    # Replace commas with a colon\n    text = re.sub(r'[,]', ':', text)\n    # Replace dots with a colon\n    text = re.sub(r'[.]', ':', text)\n    return text",
        "test": "assert replace_specialchar('this is a test') == 'this:is:a:test'",
        "num_ids": 690,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 5], 4) == 3",
        "num_ids": 1426,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_prod = [1] * n\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n\n    postfix_prod = [1] * n\n    for i in range(n-2, -1, -1):\n        postfix_prod[i] = postfix_prod[i+1] * arr[i+1]\n\n    sum_prod = 0\n    for i in range(n):\n        sum_prod += prefix_prod[i] * postfix_prod[i]\n\n    return sum_prod",
        "test": "assert sum_Of_Subarray_Prod([0, 1, 0, 0, 0, 0, 0]) == 0",
        "num_ids": 2032,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Toggle all bits except the first and last bit\n    toggle = (n ^ (n >> 1)) & ~(1 << n.bit_length() - 1)\n    \n    # Toggle all bits except the first bit\n    toggle = (toggle ^ (toggle << 1)) & ~(1 << toggle.bit_length() - 1)\n    \n    # Toggle all bits except the last bit\n    toggle = (toggle ^ (toggle >> 1)) & ~(1 << toggle.bit_length() - 1)\n    \n    return toggle",
        "test": "assert set_middle_bits(10) == 5",
        "num_ids": 1065,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = bisect.bisect_left(a, x)\n    return left",
        "test": "assert left_insertion([1, 3, 5, 7], 4) == 2",
        "num_ids": 808,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"apple\") == True",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1-n**-1) + geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 1\n    index = 1\n    while count <= n: \n        num = (index*(index+1))//2\n        digits = len(str(num))\n        if digits == n: \n            return index\n        elif digits > n: \n            index -= 1\n        else: \n            index += 1\n\nprint(find_Index(6)) # Output: 6",
        "test": "assert find_Index(1) == 1",
        "num_ids": 860,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict_tup = {}\n    for i in range(len(test_tup)):\n        if i+1 < len(test_tup):\n            dict_tup[test_tup[i]] = test_tup[i+1]\n    return dict_tup",
        "test": "assert tuple_to_dict((10, 20)) == {10: 20}",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Checks whether all the characters in a string are the same or not.\n    :param s: string\n    :return: True if all the characters are the same, False otherwise.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        first_char = s[0]\n        for char in s:\n            if char!= first_char:\n                return False\n        return True",
        "test": "assert all_Characters_Same(\"abcde\") == False",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron given its side length.\n    '''\n    area = (3**0.5) * (side**2) / 4\n    return area",
        "test": "assert area_tetrahedron(6) == 6*6/4*math.sqrt(3)",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    return list[-m:] + list[:-m]",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 1174,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3)) == False",
        "num_ids": 540,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(digit)!= 0 and x % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))",
        "test": "assert divisible_by_digits(1000000, 10000000) == [1234567, 2345678, 3456789, 4567890, 5678901, 6789012, 7890123, 8901234, 9012345, 10123456, 11234567, 12345678, 13456789, 14567890, 15678901, 16789012, 17890123, 18901234, 19012345, 20123456]",
        "num_ids": 5310,
        "indeed": true
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360*math.pi",
        "test": "assert sector_area(1,360)==math.pi",
        "num_ids": 892,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Finding the length of LCS\n    lcs_len = L[m][n][o]\n\n    # Finding the LCS\n    lcs = [\"\"] * (lcs_len + 1)\n    lcs[lcs_len] = \"\"\n\n    i = m\n    j = n\n    k = o\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs[lcs_len-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            lcs_len -= 1\n        elif L[i-1][j][k] > L[i][j-1][k]:\n            i -= 1\n        elif L[i-1][j][k] < L[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return \"\".join(lcs)",
        "test": "assert lcs_of_three('abcd', 'efgh', 'ijkl') == ''",
        "num_ids": 2746,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r\"(?<!\\s)([A-Z][a-z]+)\", r\"\\1 \", str1)\n    str1 = re.sub(r\"(?<=\\s)([A-Z])([a-z]+)\", r\"\\1\\2\", str1)\n    return str1\n",
        "test": "assert capital_words_spaces(\"this is a Test String\") == \"this is a Test String\"",
        "num_ids": 1139,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    return sorted(nums_str, key=lambda x: float(x))",
        "test": "assert sort_numeric_strings(['3', '2', '1']) == ['1', '2', '3']",
        "num_ids": 1547,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < len(arr) and arr[i] > arr[l]:\n        return False\n\n    if r < len(arr) and arr[i] > arr[r]:\n        return False\n\n    return check_min_heap_helper(arr, l) and check_min_heap_helper(arr, r)\n\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)",
        "test": "assert check_min_heap_helper([4, 2, 7, 1, 3], 1) == False",
        "num_ids": 1578,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 856,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def min_k(test_list, K):\n    # Sort the list of tuples based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Return the first k tuples from the sorted list\n    return test_list[:K]",
        "test": "assert min_k([(10, 'a'), (20, 'b'), (30, 'c'), (40, 'd')], 2) == [(10, 'a'), (20, 'b')]",
        "num_ids": 1316,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n    return common_list",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 1317,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    second_smallest = min(numbers)\n    return second_smallest",
        "test": "assert second_smallest([5, 3, 8, 2, 1]) == 2",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one('ab') == True",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pair_count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                pair_count += 1\n    \n    return pair_count",
        "test": "assert count_reverse_pairs([\"abcd\", \"bacd\", \"cdab\", \"cdba\"]) == 0",
        "num_ids": 1114,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_sublists(lst):\n    unique_dict = {}\n    for sublist in lst:\n        if isinstance(sublist, list):\n            sublist = tuple(sublist)\n        if sublist not in unique_dict:\n            unique_dict[sublist] = 1\n        else:\n            unique_dict[sublist] += 1\n    return unique_dict",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1936,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    \n    decimal = num.split('.')\n    if len(decimal) == 1:\n        return True\n    elif len(decimal) == 2:\n        return len(decimal[1]) <= 2\n    else:\n        return False",
        "test": "assert is_decimal(\"3.141\") == False",
        "num_ids": 1726,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 3, 4, 5, 1]) == False",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    This function checks whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        if monthnum3 % 2 == 0:\n            return False\n        else:\n            return True",
        "test": "assert check_monthnumber_number(4) == True",
        "num_ids": 970,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[j] - arr[i])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([1, 2, 3, 4, 5], 5) == 1",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_ctr(string):\n    \"\"\"\n    Counts the number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert is_polite(1) == 2 ",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1,2,3,4]) == [(1,2),(2,3),(3,4)]",
        "num_ids": 737,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Returns the number of pairs of integers in the list whose sum is equal to the given sum.\n    \"\"\"\n    count = 0\n    seen = set()\n    for i in arr:\n        if (sum - i) in seen:\n            count += 1\n        seen.add(i)\n    return count",
        "test": "assert get_pairs_count([10, 20, 30, 40, 50], 30) == 1 # [10, 20]",
        "num_ids": 1206,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # Initialize an empty list to store the elements that are present in the first list but not in the second list.\n    result = []\n    \n    # Loop through each element in the first list and check if it is present in the second list.\n    for element in li1:\n        if element not in li2:\n            # If the element is not present in the second list, add it to the result list.\n            result.append(element)\n            \n    # Return the result list.\n    return result",
        "test": "assert Diff([1,2,3,4,5],[3,4,5]) == [1,2], \"Incorrect result for Diff([1,2,3,4,5],[3,4,5])\"",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    \n    while count <= n:\n        sum += count**4\n        count += 2\n    \n    return sum\n\nprint(odd_num_sum(5)) # Output: 576",
        "test": "assert odd_num_sum(1) == 1",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(','{','[']:\n            stack.append(i)\n        elif i in [')',']','}']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "test": "assert check_expression('()') == True",
        "num_ids": 928,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    This function takes a string and integer K as input.\n    It removes all the words with length K from the given string.\n    \"\"\"\n    # Splitting the test_str into words\n    words = test_str.split()\n    \n    # Creating an empty list to store the words with length K\n    result = []\n    \n    # Iterating over each word in the words list\n    for word in words:\n        # Checking if the length of the current word is equal to K\n        if len(word)!= K:\n            # If the length is not equal to K, then append the current word to the result list\n            result.append(word)\n    \n    # Joining the words with length K into a single string\n    final_str = \" \".join(result)\n    \n    # Returning the final string with all words of length K removed\n    return final_str",
        "test": "assert remove_length(\"apple banana cherry\", 7) == \"apple banana cherry\"",
        "num_ids": 1115,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = []\n    for match in re.finditer(pattern, text):\n        start, end = match.start(), match.end()\n        matches.append((start, end))\n    if matches:\n        return matches\n    else:\n        return None",
        "test": "assert occurance_substring('hello world', 'z') == None",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every odd index contains an odd number, else False.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 2, 3, 4, 6]) == False",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels('apple') == 0",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = [(key, list(group)) for key, group in groupby(list1)]\n    result = []\n    for group in groups:\n        if len(group[1]) > 1:\n            result.append(group[1])\n    return result",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 1460,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_sublists(list1):\n    '''\n    This function takes a list as input and returns a dictionary, where every unique sublist is converted to a tuple and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists.append(tuple(list1[i:j]))\n    unique_sublists = {}\n    for sublist in sublists:\n        if sublist not in unique_sublists:\n            unique_sublists[sublist] = 1\n        else:\n            unique_sublists[sublist] += 1\n    return unique_sublists",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1811,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        temp = combinations(test_list, i)\n        for j in temp:\n            if sum(j) == 0:\n                result.append(j)\n    return result",
        "test": "assert find_combinations([(1, 2), (3, 4), (5, 6), (7,)]) == [(2, 4), (3, 5), (4, 6), (5, 7)]",
        "num_ids": 3102,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nprint(count_divisors(10)) # Output: 10\nprint(count_divisors(12)) # Output: 9\nprint(count_divisors(28)) # Output: 16",
        "test": "assert count_divisors(10) == 4",
        "num_ids": 943,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(1, n+1, 2):\n        for j in range(n-i+1):\n            temp_sum = sum(arr[j:j+i])\n            total_sum += temp_sum\n    return total_sum",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55",
        "num_ids": 991,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    # Convert the values from 0-255 to 0-1\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    # Find the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val) / max_val\n    \n    # Calculate the hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (60 * ((g - b) / (max_val - min_val)) + 360) % 360\n    elif max_val == g:\n        hue = (60 * ((b - r) / (max_val - min_val)) + 120) % 360\n    else:\n        hue = (60 * ((r - g) / (max_val - min_val)) + 240) % 360\n    \n    return hue, saturation, max_val",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0) #black",
        "num_ids": 1875,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    return even_num * odd_num",
        "test": "assert mul_even_odd([2, 4, 6, 8, 10]) == 30 # 2*10 = 20, 4*8 = 32, 6*6 = 36, 8*4 = 32, 10*2 = 20, so the product of first even and odd number is 20*32 = 640",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Splitting the tuple string by comma and then by space\n    tuple_list = test_str.strip('()').split(',')\n    # Converting each element of the list to integer\n    int_tuple = tuple(int(i) for i in tuple_list)\n    return int_tuple",
        "test": "assert tuple_str_int(\"1, 2, 3, 4\") == (1,2,3,4)",
        "num_ids": 902,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect_right to find the rightmost index where x can be inserted to maintain order\n    i = bisect.bisect_right(a, x)\n    return i",
        "test": "assert right_insertion([], 5) == 0",
        "num_ids": 750,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three('ababab') == False",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple([test_str, test_list])\n    return new_tuple",
        "test": "assert new_tuple(['apple', 'banana', 'cherry'], 'orange') == ('orange', ['apple', 'banana', 'cherry'])",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_position(nums):\n    '''\n    This function checks whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert even_position([1, 3, 5, 7, 9]) == False",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup += remove_nested(item)\n        else:\n            new_tup.append(item)\n    return tuple(new_tup)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([]) == 0",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n\n        elif arr[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return -1",
        "test": "assert last([1,2,3,4,5], 6) == -1",
        "num_ids": 1263,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b$\"  # pattern to match 'a' followed by anything, ending in 'b'\n    match = re.search(pattern, text)  # search for pattern in text\n    if match:\n        return match.group()  # return matched string\n    else:\n        return None  # if pattern not found, return None",
        "test": "assert text_starta_endb('a thing is not a thing') == None",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all its items.\n    \"\"\"\n    total_sum = 0\n    for key in dictionary:\n        total_sum += dictionary[key]\n    return total_sum",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 787,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of all odd natural numbers within the range 1 to n.\n    \"\"\"\n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Loop through the range 1 to n and add the odd numbers to the sum\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            total_sum += i\n    \n    # Return the total sum\n    return total_sum",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def left_rotate(n, d):\n    # Convert the number to a binary string\n    binary = bin(n)[2:].zfill(32)\n    \n    # Rotate the bits\n    rotated = binary[d:] + binary[:d]\n    \n    # Convert the rotated string back to an integer\n    result = int(rotated, 2)\n    \n    return result",
        "test": "assert left_rotate(123456789, 32) == 123456789",
        "num_ids": 1693,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces(\"The quick brown fox jumps over the lazy dog\") == \"Thequickbrownfoxjumpsoverthelazydog\"",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function takes three integers as input and returns the number of equal numbers in the three integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "test": "assert test_three_equal(1,1,2) == 1",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= arr[right]:\n            right = mid\n        else:\n            left = mid + 1\n    return left\n",
        "test": "assert count_rotation([1,2,3,4,5]) == 0",
        "num_ids": 1338,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    else:\n        return int(n ** 0.5) ** 2 == n",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 586,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2, 3, 4, 5]) == True ",
        "num_ids": 700,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return [max_list]",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 8, 9]]",
        "num_ids": 1520,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run",
        "test": "assert max_run_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26",
        "num_ids": 907,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K((1,2), 2) == True",
        "num_ids": 665,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 2, 3), (1, 2, 3)) == False",
        "num_ids": 949,
        "indeed": true
    }
]