[
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "test": "assert similar_elements([1, 2, 3], [2, 3, 4]) == [2, 3]",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_not_prime(17) == True",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes in a list of numbers and returns the n largest integers in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "test": "assert heap_queue_largest([1,1,1,1,1], 5) == [1,1,1,1,1]",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is a power of two or not\n    if x > 0 and ((x & (x-1)) == 0):\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to split the string into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Return a list of words which are at least 4 characters long\n    return [word for word in words if len(word) >= 4]",
        "test": "assert find_char_long(\"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\") == ['quick', 'brown', 'jumps', 'lazy', 'quick', 'brown', 'jumps', 'lazy']",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 645,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str == str[i:]+str[:i]:\n            return i\n    return n",
        "test": "assert find_Rotations(\"abcde\") == 0",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes a string and a character as input and removes the first and last occurrence of the character from the string.\n    \"\"\"\n    if s.count(ch) >= 2:\n        # If the character appears more than once in the string\n        first = s.find(ch)\n        last = s.rfind(ch)\n        if first == last:\n            # If the first and last occurrence are the same\n            s = s[:first] + s[first+1:]\n        else:\n            s = s[:first] + s[first+1:last] + s[last+1:]\n    elif s.count(ch) == 1:\n        # If the character appears only once in the string\n        first = s.find(ch)\n        if first == 0:\n            # If the first occurrence is the first character in the string\n            s = s[first+1:]\n        else:\n            last = s.rfind(ch)\n            if first == last:\n                # If the first and last occurrence are the same\n                s = s[:first] + s[first+1:]\n            else:\n                s = s[:first] + s[first+1:last] + s[last+1:]\n    else:\n        # If the character does not appear in the string\n        s = s\n    return s",
        "test": "assert remove_Occ(\"hello world\",\"o\") == \"hell wrld\"",
        "num_ids": 775,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M",
        "test": "assert sort_matrix([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 2], [3, 4], [5, 6], [7, 8]]",
        "num_ids": 1087,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the length, width, and height of a triangular prism and returns its volume.\n    '''\n    return 0.5 * l * b * h",
        "test": "assert find_Volume(0,0,0) == 0, \"Incorrect volume calculation for 0x0x0 triangular prism\"",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))",
        "test": "assert text_lowercase_underscore('abc_def') == True",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(3) == 12",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def str_to_list(string):\n    '''\n    This function removes all characters from the first string that are present in the second string.\n    '''\n    chars_to_remove = input(\"Enter the characters to remove: \")\n    result = []\n    for char in string:\n        if char not in chars_to_remove:\n            result.append(char)\n    return result",
        "test": "assert str_to_list(\"hello\", \"el\") == \"ho\"",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define the conditions to check if the number is woodball\n    if x % 4 == 0 and x % 6 == 0:\n        return True\n    elif x % 4 == 0 or x % 6 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(57) == False",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    original = num\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if original == reverse + 1 and original % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert rev(12345) == False",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the maximum possible number that can be formed using the given list of digits.\n    \"\"\"\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        max_num = max_num * 10 + arr[i]\n    return max_num",
        "test": "assert find_Max_Num([0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if(x < 0 and y < 0) or (x > 0 and y > 0):\n        return False\n    else:\n        return True",
        "test": "assert opposite_Signs(3, -5) == True",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonals = []\n    while len(octagonals) < n:\n        octagonals.append(i * (2 * i - 1))\n        i += 1\n    return octagonals[-1]\n",
        "test": "assert is_octagonal(1) == 1 # 1",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(digit) for digit in s[i:j+1]) == j-i+1:\n                count += 1\n    return count",
        "test": "assert count_Substrings(\"123\") == 1",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "test": "assert smallest_num([1, 2, 3]) == 1",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([(1, 2), (4, 7), (8, 10)]) == 6",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "test": "assert subject_marks([(2, 'English'), (85, 'Maths'), (78, 'Science'), (67, 'Social Studies'), (90, 'History')]) == [(90, 'History'), (85, 'Maths'), (67, 'Social Studies'), (2, 'English'), (78, 'Science')] ",
        "num_ids": 930,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "test": "assert recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, -3, 4, -5]) == 3",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        sum = 0\n        for i in range(n):\n            sum += bell_number(i) * bell_number(n-i-1)\n        return sum",
        "test": "assert bell_number(0) == 1",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A and returns True if it is monotonic and False otherwise.\n    A is considered monotonic if it is either strictly increasing, strictly decreasing, or both.\n    '''\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False",
        "test": "assert is_Monotonic([1,2,3,4,5]) == True",
        "num_ids": 631,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    if len(l) < len(s):\n        return False\n    if s == l[:len(s)]:\n        return True\n    return is_sublist(l[1:], s)",
        "test": "assert is_sublist([1, 2, 3], [1, 2, 3]) == True",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])  # Find the length of the first tuple in the list\n\n    for i in Input:\n        if len(i)!= length:  # Check if all the tuples in the list have the same length\n            return False  # If any tuple has different length, return False\n\n    return True  # If all tuples have the same length, return True",
        "test": "assert find_equal_tuple([(1,2,3), (4,5,6), (7,8,9)]) == True",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    while gap!= 1:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return nums",
        "test": "assert comb_sort([]) == []",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    :param n: integer value\n    :return: True if it can be represented as the difference of two squares, False otherwise\n    \"\"\"\n    # check if n is positive\n    if n <= 0:\n        print(\"Number should be positive\")\n        return False\n    \n    # calculate the square root of n\n    import math\n    root_n = math.sqrt(n)\n    \n    # check if the square root is an integer\n    if root_n!= int(root_n):\n        print(\"Number cannot be represented as the difference of two squares\")\n        return False\n    \n    # check if n can be represented as the difference of two squares\n    if n == int(root_n)**2 - int(root_n) + int(root_n-1)**2:\n        print(f\"{n} can be represented as the difference of two squares\")\n        return True\n    else:\n        print(f\"{n} cannot be represented as the difference of two squares\")\n        return False",
        "test": "assert dif_Square(4) == False",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two arrays of strings as input, colors and patterns.\n    It checks whether the sequence given in the patterns array is followed in the colors array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] == 'R':\n            if colors[i]!='red':\n                return False\n        elif patterns[i] == 'G':\n            if colors[i]!= 'green':\n                return False\n        elif patterns[i] == 'B':\n            if colors[i]!= 'blue':\n                return False\n    return True",
        "test": "assert is_samepatterns(['red', 'green', 'blue'], ['red', 'green', 'blue']) == True, \"Should return True for same patterns\"",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as input and returns a list of tuples that have all elements divisible by K.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 6) == []",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Diff(n): \n    '''\n    This function takes in a number n as input and returns True if the number is divisible by 11, otherwise False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(22) == True",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def word_len(s):\n    words = s.split()  # split the string into words\n    for word in words:\n        if len(word) % 2 == 0:  # check if length is even\n            return False  # if even, return False\n    return True  # if all words have odd length, return True",
        "test": "assert word_len(\"hello\") == True",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)",
        "test": "assert volume_sphere(1) == 4/3 * math.pi",
        "num_ids": 369,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_Char(strr):\n    # initialize the sum of ASCII values to zero\n    sum = 0\n    \n    # loop through each character in the string and add its ASCII value to the sum\n    for char in strr:\n        sum += ord(char)\n    \n    # return the character made by adding the ASCII values modulo 26\n    return chr(sum % 26 + ord('a'))",
        "test": "assert get_Char(\"hello\") =='m'",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n + 1):\n            sequence_list.append(sequence_list[sequence_list[i - 1]] + sequence_list[i - sequence_list[i - 1]])\n        return sequence_list[n]",
        "test": "assert sequence(2) == 1",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4*math.pi",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    sum = 0\n    while True:\n        hexagonal_num = i*(2*i - 1)\n        if hexagonal_num >= n:\n            return sum + hexagonal_num\n        else:\n            sum += hexagonal_num\n            i += 1",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merges three dictionaries into a single dictionary.\n    '''\n    result_dict = dict1.copy()\n    result_dict.update(dict2)\n    result_dict.update(dict3)\n    return result_dict",
        "test": "assert merge_dictionaries_three({'a':1,'b':2},{'b':3,'c':4},{'a':5,'d':6}) == {'a':5,'b':3,'c':4,'d':6}",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict",
        "test": "assert freq_count(['apple', 'banana', 'orange', 'apple', 'grape', 'banana', 'pear']) == {'apple': 2, 'banana': 2, 'orange': 1, 'grape': 1, 'pear': 1}",
        "num_ids": 778,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i!= N:\n            return i\n    return None",
        "test": "assert closest_num(0) == None",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length",
        "test": "assert len_log(['hello', 'world', 'how', 'are', 'you']) == 5",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:].startswith(sub_str):\n            return True\n    return False",
        "test": "assert find_substring(\"hello world\", \"l\") == True",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_undulating(n):\n    '''\n    Check whether the given number is undulating or not.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    '''\n    # Check if the number is prime\n    if n < 2 or n % 2 == 0:\n        return False\n\n    # Check if the number is the sum of two primes\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    # Check if the number is odd\n    if n % 2 == 0:\n        return False\n\n    # Check if the number is equal to its reversal\n    if str(n)!= str(n)[::-1]:\n        return False\n\n    # If all checks pass, return True\n    return True",
        "test": "assert is_undulating(123) == False",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    :param a: the base\n    :param b: the exponent\n    :return: the value of 'a' to the power 'b'\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,3) == 8",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "test": "assert index_minimum([(1,2), (3,4), (5,6)]) == 1",
        "num_ids": 604,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len",
        "test": "assert Find_Min_Length([[], [1], [1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 0",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(1) == 1",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def frequency_lists(list1):\n    flat_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "test": "assert frequency_lists([[1,2,3], [4,5,6], [7]]) == {1:1, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1}",
        "num_ids": 1140,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result",
        "test": "assert multiply_num([0, 0, 0]) == 0",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary",
        "test": "assert decimal_to_binary(10) == '1010'",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        # If the number is already a palindrome, find the next smallest palindrome by adding 1 to the number\n        return next_smallest_palindrome(num + 1)\n    else:\n        # If the number is not a palindrome, find the largest palindrome that is less than the number and return it\n        palindrome = str(num)\n        while True:\n            new_palindrome = str(num) + palindrome[::-1]\n            if int(new_palindrome) > num:\n                break\n            palindrome = new_palindrome\n        return int(new_palindrome)",
        "test": "assert next_smallest_palindrome(122) == 212",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function converts a snake case string to camel case string.\n    \"\"\"\n    words = word.split(\"_\")\n    camel_case = words[0].lower()\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Step 1: Compute the product of the row lengths\n    row_product = 1\n    for i in range(n):\n        row_product *= m\n\n    # Step 2: Compute the product of the column lengths\n    col_product = 1\n    for i in range(m):\n        col_product *= n\n\n    # Step 3: Compute the Eulerian number\n    eulerian_num = (row_product + col_product) // 2\n\n    return eulerian_num",
        "test": "assert eulerian_num(1,1) == 1",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"cherry\"], [\"dog\", \"cat\"], [\"zebra\", \"elephant\", \"giraffe\"]]) == [[\"apple\", \"banana\", \"cherry\"], [\"cat\", \"dog\"], [\"elephant\", \"giraffe\", \"zebra\"]]",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "test": "assert count([False, False, False]) == 0",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup",
        "test": "assert add_lists([], ()) == ()",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a new empty list to store the merged sorted list\n    merged_list = []\n\n    # Create a max-heap using the built-in heapify function from the heapq module\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    # Loop until all the elements in the three lists have been added to the merged sorted list\n    while len(merged_list)!= len(num1) + len(num2) + len(num3):\n        # If num1 is empty, add the smallest element from num2 to the merged sorted list and heapify num2\n        if not num1:\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        # If num2 is empty, add the smallest element from num3 to the merged sorted list and heapify num3\n        elif not num2:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n        # If num3 is empty, add the smallest element from num1 to the merged sorted list and heapify num1\n        elif not num3:\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        # If all three lists have elements, compare the smallest elements and add the smallest to the merged sorted list\n        else:\n            if num1[0] < num2[0] and num1[0] < num3[0]:\n                heapq.heappush(merged_list, heapq.heappop(num1))\n            elif num2[0] < num1[0] and num2[0] < num3[0]:\n                heapq.heappush(merged_list, heapq.heappop(num2))\n            else:\n                heapq.heappush(merged_list, heapq.heappop(num3))\n\n    # Return the merged sorted list\n    return merged_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 1580,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Returns the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert binary string to integer\n    num = int(s, 2)\n    \n    # Rotate the binary string n times\n    rotated = bin((num << n) | (num >> (len(s) - n)))[2:].zfill(len(s))\n    \n    # Count the number of odd numbers in the rotated binary string\n    count = 0\n    for digit in rotated:\n        if int(digit) % 2 == 1:\n            count += 1\n    \n    return count",
        "test": "assert odd_Equivalent('10101',1) == 4",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements",
        "test": "assert common_in_nested_lists([[\"apple\", \"banana\", \"cherry\"], [\"banana\", \"orange\"], [\"grapes\", \"peach\", \"mango\"]]) == []",
        "num_ids": 1199,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Args:\n        text (str): A string to be checked.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"10\") == True",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True  # test case 1",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "test": "assert tuple_to_int((1,2,3)) == 123",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].replace('.','',1).isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list",
        "test": "assert list_to_float([[1, 2, 3], [4, 5, '6.7'], ['8', '9', '10'], ['11', '12', 13], ['14', 15, '16.0']]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.7], [8.0, 9.0, 10.0], [11.0, 12.0, 13.0], [14.0, 15.0, 16.0]]",
        "num_ids": 1301,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "test": "assert string_to_list('hello world') == ['hello', 'world']",
        "num_ids": 383,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def search(arr):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize variables for counting and loop through the array\n    count = 1\n    for i in range(1, len(arr)):\n        # If the current element is the same as the previous element, increment the count\n        if arr[i] == arr[i-1]:\n            count += 1\n        # If the count is greater than 2, return the current element as the result\n        elif count > 2:\n            return arr[i-1]\n    # If no element is found, return None\n    return None",
        "test": "assert search([1, 1, 1, 1, 1]) == None",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_product_tuple(lst):\n    max_prod = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            prod = abs(lst[i][0]*lst[i][1] * lst[j][0]*lst[j][1])\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod",
        "test": "assert max_product_tuple([(1,2),(3,4),(5,6),(7,8),(9,10),(11,12),(13,14)]) == 192",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def divisors(n):\n    \"\"\"\n    Returns a list of all integers from 1 to n that divide n evenly.\n    \"\"\"\n    divs = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n // i:\n                divs.append(n // i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to the given limit.\n    \"\"\"\n    total = 0\n    for num in range(2, limit + 1):\n        sum_of_divisors = sum(divisors(num))\n        if sum_of_divisors!= num and sum(divisors(sum_of_divisors)) == num:\n            total += num\n    return total",
        "test": "assert amicable_numbers_sum(10000) == 31626",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a, b))\n    return round(angle, 2)",
        "test": "assert angle_complex(1,0) == 0",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n    for i in range(n):\n        count_zeros = 0\n        count_ones = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_zeros += 1\n            elif string[j] == '1':\n                count_ones += 1\n            max_length = max(max_length, count_zeros - count_ones)\n    return max_length",
        "test": "assert find_length('1100') == 2",
        "num_ids": 1515,
        "indeed": true
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Finding the list of common divisors\n    divisors = []\n    for i in range(1,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            divisors.append(i)\n    \n    # Finding the sum of common divisors\n    sum_div = sum(divisors)\n    \n    return sum_div",
        "test": "assert sum(15,25) == 50",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 260,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list",
        "test": "assert long_words(4, \"This is a test string\") == []",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes in a matrix as input and returns True if the matrix is a magic square, False otherwise.\n    '''\n\n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n\n    # Calculate the sum of the first column\n    col_sum = sum([my_matrix[i][0] for i in range(len(my_matrix))])\n\n    # Calculate the sum of the diagonal from top-left to bottom-right\n    diag_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n\n    # Calculate the sum of the diagonal from top-right to bottom-left\n    diag_sum2 = my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n\n    # Check if the calculated values match the sum of each row, column, and diagonal\n    if row_sum == col_sum == diag_sum == diag_sum2:\n        return True\n    else:\n        return False",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 1417,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store item frequencies\n    freq_dict = defaultdict(int)\n    \n    # Iterate through the list and count the occurrences of each item\n    for num in nums:\n        freq_dict[num] += 1\n        \n    # Find the item with the maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item",
        "test": "assert max_occurrences([1, 1, 1, 1, 1, 1, 1, 1]) == 1",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def reverse_vowels(str1):\n    \"\"\"\n    This function takes a string as input and returns the string with only the vowels reversed.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] in vowels and str1[j] in vowels:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n        elif str1[i] in vowels:\n            j -= 1\n        elif str1[j] in vowels:\n            i += 1\n    return ''.join(str1)",
        "test": "assert reverse_vowels(\"aeiou\") == \"uoiea\"",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)",
        "test": "assert tup_string((1, 2, 3)) == '(1, 2, 3)'",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            neg_sum += num\n            \n    return neg_sum",
        "test": "assert sum_negativenum([-10,-20,-30]) == -60",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    hex_num = 1\n    while count < n:\n        hex_num += 6*count\n        count += 1\n    return hex_num",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    return count_zeroes / count_non_zeroes",
        "test": "assert zero_count(array('i', [1, 2, 3, 0, 4, 0, 5])) == 0.4",
        "num_ids": 770,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    power_of_two = 1\n    while n > 0:\n        if n & 1 == 1:\n            return False\n        n >>= 1\n        power_of_two <<= 1\n    return True",
        "test": "assert is_Sum_Of_Powers_Of_Two(3) == False # 2^0 + 2^1 + 2^2 = 8",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if type(item) == list:\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert extract_singly([[1,2,3],[4,5,6],[7,8,9]]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Start from the maximum element and move it to the end\n    for i in range(n, 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        # If the maximum element is not at the end, move it to the end\n        if max_index!= i-1:\n            nums = rotate_list(nums, max_index)\n            # Move the maximum element to the end\n            nums = rotate_list(nums, i-1)\n    return nums\n\ndef rotate_list(nums, k):\n    return nums[k:]+nums[:k]",
        "test": "assert pancake_sort([1]) == [1]",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns the number of items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[2,3,4],[3,4,5]) == 0",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count",
        "test": "assert find_lists((1, 2, 3)) == 0",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([0, 0, 0, 0, 0]) == 0",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        if x * b == n:\n            return (x, 0)\n    for y in range(n + 1):\n        if y * a == n:\n            return (0, y)\n    for x in range(1, n):\n        for y in range(1, n):\n            if a * x + b * y == n:\n                return (x, y)\n    return None",
        "test": "assert find_solution(1, -1, 0) == (0, 0)",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "test": "assert remove_elements([1,2,3,4,5], [2,4,6]) == [1,3,5] # remove_elements should return [1,3,5] if the function is implemented correctly.",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculates the sum of a series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    if n % 2 == 0:\n        # If n is even, sum is n - 2*i + n - 2*i-1 +...\n        return (n // 2) * (n - 1)\n    else:\n        # If n is odd, sum is n - 2*i + n - 2*i-1 +... + n - 2\n        return n // 2 * n\n",
        "test": "assert sum_series(0) == 0",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given the length and number of sides.\n    '''\n    # Calculate the apothem (half the perimeter)\n    a = (s * s / (4 * tan(pi / s)))\n    \n    # Calculate the area using the formula A = (n * l^2) / (4 * tan(pi/n))\n    area = (s * l) / 2\n    \n    # Return the area\n    return area",
        "test": "assert area_polygon(3, 4) == 6.0",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Determines if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            div_sum += i\n            if n // i!= i:\n                div_sum += n // i\n    return div_sum == n",
        "test": "assert div_sum(15) == False",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    \n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count += 1\n    \n    return count",
        "test": "assert count_char_position('abcde') == 5 # all characters occur at different positions in the string",
        "num_ids": 1546,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_even_pair(A):\n    '''\n    This function takes a list of integers as input and returns the number of pairs of integers in the list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([2, 4, 6, 8, 10]) == 0",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** (n - 1).bit_length()",
        "test": "assert next_power_of_2(3) == 4",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9,10],5)==1",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return \"Invalid range\"\n    else:\n        return sum(list1[m:n+1])",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 586,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a",
        "test": "assert perimeter_pentagon(30) == 210",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "test": "assert count_occurance('hello world') == 0",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        data_type = type(test_tuple[0])\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i])!= data_type:\n                return False\n        return True",
        "test": "assert check_type((1,2,3)) == True",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False",
        "test": "assert is_majority([1, 2, 3, 4, 4, 4, 5, 5, 5, 5], 10, 6) == False ",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 289,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "test": "assert odd_values_string(\"world\") == \"wrd\"",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Make a mask to check if a bit is set or not\n    mask = (1 << r) - (1 << l) - 1\n    # Check if all the bits are set or not\n    return n & mask == 0",
        "test": "assert all_Bits_Set_In_The_Given_Range(17, 1, 4) == False # 01001",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # First, we will separate the array into negative and positive elements.\n    neg_arr = []\n    pos_arr = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n\n    # Now, we will sort the negative and positive elements separately.\n    neg_arr.sort()\n    pos_arr.sort()\n\n    # Finally, we will merge the sorted negative and positive elements into a single array.\n    arr = neg_arr + pos_arr\n\n    return arr",
        "test": "assert re_arrange_array([3, -1, 0, 2, -5], 1) == [3]",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces all the blank spaces in a given string with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank(\"\", \"_\") == \"\"",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap",
        "test": "assert larg_nnum([3, 2, 1, 5, 6, 4], 1) == [6]",
        "num_ids": 758,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns the lateral surface area of the cylinder.\n    '''\n    lateral_area = 2 * 3.14 * r * h\n    return lateral_area",
        "test": "assert lateralsuface_cylinder(0,5) == 0",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "test": "assert volume_cube(1) == 1, 'volume of cube of side length 1 should be 1'",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and returns the number with all even bits set to 1.\n    '''\n    # Set all even bits to 1\n    n |= n >> 1  # Set all the even bits to 1 using the bitwise OR operator\n    n |= n >> 2  # Shift the even bits to the right by 2 bits and set them to 1\n    n |= n >> 4  # Shift the even bits to the right by 4 bits and set them to 1\n    n |= n >> 8  # Shift the even bits to the right by 8 bits and set them to 1\n    n |= n >> 16  # Shift the even bits to the right by 16 bits and set them to 1\n    return n",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "test": "assert check_occurences([(1,2), (2,3), (1,2), (4,5), (2,3)]) == {(1,2): 2, (2,3): 2, (4,5): 1}",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    This function takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element\n    but less than or equal to m.\n    '''\n    # Initialize variables\n    total_sequences = 0\n    previous_num = 2\n    \n    # Loop through each number in the range of 2 to m\n    for i in range(2, m+1):\n        # Check if the current number is greater than twice the previous number\n        if i >= 2*previous_num:\n            # Check if the length of the sequence is greater than or equal to n\n            if n == 1:\n                total_sequences += 1\n            else:\n                # Calculate the number of possible sequences of length n-1\n                num_sequences = get_total_number_of_sequences(i-1, n-1)\n                # Add the number of possible sequences of length n to the total_sequences\n                total_sequences += num_sequences\n            # Update the previous number to the current number\n            previous_num = i\n    \n    return total_sequences",
        "test": "assert get_total_number_of_sequences(40, 7) == 65022105",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "test": "assert replace_list([1,2,3,4],[]) == [1,2,3,4]",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac('') == 0",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer as input and returns the next perfect square greater than the input number.\n    '''\n    # Calculate the square root of the given number to find the next perfect square\n    sqrt_N = int(math.sqrt(N))\n    # Add 1 to the square root to find the next perfect square\n    next_sqrt = sqrt_N + 1\n    # Calculate the next perfect square by multiplying the square root by 2\n    next_square = next_sqrt ** 2\n    # Return the next perfect square\n    return next_square",
        "test": "assert next_Perfect_Square(12) == 16",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Create two arrays to store increasing and decreasing subsequence sums\n    inc_sum = [0] * n\n    dec_sum = [0] * n\n    # Initialize the first element of the arrays\n    inc_sum[0] = arr[0]\n    dec_sum[0] = 0\n    # Calculate the increasing and decreasing subsequence sums using dynamic programming\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            inc_sum[i] = arr[i] + inc_sum[i-1]\n            dec_sum[i] = dec_sum[i-1]\n        else:\n            inc_sum[i] = inc_sum[i-1]\n            dec_sum[i] = arr[i] + dec_sum[i-1]\n    # Find the maximum sum of a bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        if inc_sum[i] > dec_sum[i]:\n            max_bitonic_sum = max(max_bitonic_sum, inc_sum[i])\n    return max_bitonic_sum",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1511,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n    \"\"\"\n    # Set the initial guess to the square root of the number\n    guess = number ** 0.5\n    \n    # Iterate until the difference between the guess and the square of the guess is less than 0.0001\n    while abs(guess ** 2 - number) > 0.0001:\n        # Update the guess using the average of the guess and the number divided by the guess\n        guess = (guess + number / guess) / 2\n        \n    return guess",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            if L == 2:\n                if str[i] == str[j]:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = 1\n            else:\n                if str[i] == str[j]:\n                    dp[i][j] = dp[i+1][j-1]+2\n                else:\n                    dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]",
        "test": "assert lps(\"cbbd\") == 2",
        "num_ids": 861,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 470,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function finds the intersection of two arrays and returns the common elements.\n    \"\"\"\n    return list(set(array_nums1) & set(array_nums2))",
        "test": "assert intersection_array([1,2,3],[2,3,4]) == [2,3]",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 'x', 'x', 4), 'x') == 2",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def insert_element(list, element):\n    '''\n    Inserts the element before each element in the list and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list",
        "test": "assert insert_element([], 1) == []",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append(polar)\n    return result",
        "test": "assert convert(7-8j) == (cmath.polar(7-8j)[0], cmath.polar(7-8j)[1])",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as an input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 'a', 'b', 'c']) == 3",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]",
        "test": "assert combinations_colors([], 2) == []",
        "num_ids": 1051,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(0) == 0",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a",
        "test": "assert swap_numbers(5,10) == (10,5)",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    max_tup = (max_tup1, max_tup2)\n    return max_tup",
        "test": "assert maximize_elements((1,2,3), (4,5,6,7)) == (4,5,6,7)",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n    return None\n\nprint(newman_prime(10)) # Output: 797\nprint(newman_prime(20)) # Output: 3791",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "test": "assert division_elements((2, 4, 6), (1, 2, 3)) == (2.0, 2.0, 2.0)",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 851,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "test": "assert dog_age(20) == 50",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2",
        "test": "assert lateralsurface_cube(10) == 600",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Iterate from 1 to n and add the square of each odd number to the sum_of_squares variable\n    for i in range(1, n*2, 2):\n        sum_of_squares += i**2\n        \n    # Return the sum of squares\n    return sum_of_squares",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 532,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * find_star_num(n-1)",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character k and returns its ASCII value.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 240,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "test": "assert sum_even_and_even_index([2, 3, 4, 6, 8]) == 14, \"incorrect sum at even positions\"",
        "num_ids": 741,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i ** 5\n    return sum",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 619,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 785,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    return sum([math.comb(n, i) for i in range(2, n+1, 2)])",
        "test": "assert even_binomial_Coeff_Sum(1) == 0",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cylinder(0,5) == 0, \"volume_cylinder(0,5) should be 0\"",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({'a':1,'b':2,'c':3,'d':4,'e':5},6) == {}",
        "num_ids": 709,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count",
        "test": "assert count_first_elements((1,1,1,1,1)) == 0",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if num == int(num**(1/12)):\n            count += 1\n    return num",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Sequential search algorithm to find an element in a list.\n\n    :param dlist: The list to search in.\n    :param item: The element to search for.\n    :return: A tuple containing a boolean indicating if the element was found and the index position of the element (or -1 if not found).\n    \"\"\"\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3, -3, -3]",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and returns True if the frequency of each digit in the integer is less than or equal to the digit itself, else False.\n    '''\n    # convert integer to string\n    n = str(n)\n\n    # initialize a dictionary to store frequency of each digit\n    digit_freq = {}\n\n    # loop through each digit in the integer\n    for digit in n:\n        # if the digit is already in the dictionary, increment its frequency by 1\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        # if the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            digit_freq[digit] = 1\n\n    # loop through each digit in the integer again\n    for digit in n:\n        # if the frequency of the digit is greater than or equal to the digit itself, return False\n        if digit_freq[digit] >= int(digit):\n            return False\n\n    # if all digits have a frequency less than or equal to the digit itself, return True\n    return True",
        "test": "assert validate(22233) == False",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and an element and returns True if all items in the list are equal to the element.\n    '''\n    if all(i == element for i in lst):\n        return True\n    else:\n        return False",
        "test": "assert check_element([], 5) == True",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\bb{2,3}'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_two_three('abc') == False",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the sum of the original array\n    total_sum = sum(a)\n    # Divide the total sum by k to get the average sum of each subarray\n    average_sum = total_sum / k\n\n    # Initialize the maximum sum to the first subarray's sum\n    max_sum = sum(a[:n])\n\n    # Loop through all possible subarrays of length n and length k\n    for i in range(n, len(a), k):\n        # Initialize the sum of the subarray to the sum of the first k subarrays\n        subarray_sum = sum(a[i-k:i])\n        # Check if the subarray sum is greater than the average sum and greater than the current maximum sum\n        if subarray_sum > average_sum and subarray_sum > max_sum:\n            # If so, update the maximum sum\n            max_sum = subarray_sum\n    \n    # Return the maximum sum\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1,2,3,4,5], 5, 3) == 15",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        sum = 0\n        for i in range(2, n+1, 2):\n            sum += i**2\n        return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_length(lst):\n    \"\"\"\n    Finds the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    max_lst = []\n    for lst in lst:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8], [9]]) == [1, 2, 3]",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    This function takes in two arguments - n and k - which represent the number of posts in the fence and the number of colors used for painting. It returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return k\n    if k == 1: \n        return 1\n    if n == 2: \n        return k\n    dp = [[0 for i in range(k+1)] for j in range(n+1)] \n    for i in range(n+1): \n        dp[i][0] = 1\n    for i in range(1, n+1): \n        for j in range(1, k+1): \n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1] \n            if i > 2 and j >= 2 and dp[i][j] > dp[i-1][j-1] + dp[i-3][j-2]: \n                dp[i][j] = dp[i-1][j-1] + dp[i-3][j-2] \n    return dp[n][k] ",
        "test": "assert count_no_of_ways(10, 2) == 48620, \"Test case failed\"",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < m:\n        return 0\n    else:\n        return n // m",
        "test": "assert find(10,3)==3",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the third side\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side",
        "test": "assert otherside_rightangle(5, 12) == 13",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        max_val = listval[0]\n        for val in listval[1:]:\n            if val > max_val:\n                max_val = val\n        return max_val",
        "test": "assert max_val([10.5, 20.3, 30.6, 40.8]) == 40.8",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "test": "assert sum_div(10) == 18",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "test": "assert flatten_list([]) == []",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq = defaultdict(int)\n    for i in stdata:\n        freq[i[0]] += i[1]\n\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for i in stdata:\n        max_agg += freq[i[0]]\n\n    return max_agg",
        "test": "assert max_aggregate([(0, 0), (0, 0), (0, 0)]) == 0, \"Incorrect aggregate for max_aggregate\"",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if binary[:n] == binary[-n:]:\n            count += 1\n    return count",
        "test": "assert count_binary_seq(1) == 2",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        depth = 1\n        for value in d.values():\n            if isinstance(value, dict):\n                depth += dict_depth(value)\n        return depth",
        "test": "assert dict_depth({1: 2, 3: 4, 5: {6: 7}}) == 2",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations == 0:\n        return arr[index]\n    elif rotations > 0:\n        rotated_arr = arr[rotations:] + arr[:rotations]\n        return find_Element(rotated_arr,ranges,rotations-1,index)\n    elif rotations < 0:\n        rotations = abs(rotations)\n        rotated_arr = arr[rotations:] + arr[:rotations]\n        return find_Element(rotated_arr,ranges,rotations,index)",
        "test": "assert find_Element([1,2,3,4,5], [(1,5)], 0, 2) == 3",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*\\s')\n    match = pattern.search(words)\n    if match:\n        first_word = match.group(0).strip()\n        return first_word, words.replace(first_word, '')\n    else:\n        return None, None",
        "test": "assert start_withp([]) == (None, None), \"Function should return (None, None) for [].\"",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a list to store the maximum sum of increasing subsequence up to ith index\n    max_sum = [0]*n\n\n    # Initialize the maximum sum of increasing subsequence up to the first index as the first element in the array\n    max_sum[0] = a[0]\n\n    # Fill the list max_sum with the maximum sum of increasing subsequence up to ith index and including the ith element\n    for i in range(1, n):\n        if a[i] > max_sum[index]:\n            max_sum[i] = a[i]\n        else:\n            max_sum[i] = max_sum[index]\n\n    # Calculate the sum of increasing subsequence up to ith index and including the ith and kth element\n    sum_inc_subseq = 0\n    for i in range(index+1):\n        if a[i] <= max_sum[index]:\n            sum_inc_subseq += a[i]\n\n    # Add the sum of increasing subsequence up to ith index and including the ith and kth element to the maximum sum of increasing subsequence up to ith index and including the ith element\n    max_sum_k = max_sum[index] + sum_inc_subseq\n\n    # Return the maximum sum of increasing subsequence up to ith index and including the ith and kth element\n    return max_sum_k",
        "test": "assert max_sum_increasing_subseq([1,2,3,4,5], 5, 2, 3) == 9 # [1,2,3,4,5] -> [1,2,3,5,6] -> [1,2,3,4,5]",
        "num_ids": 1734,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a shallow copy of the original tuple\n    tupl_copy = deepcopy(tuplex)\n    \n    # Slice the tuple from index m to index n (exclusive)\n    colon = tupl_copy[m:n]\n    \n    # Return the colon tuple\n    return colon",
        "test": "assert colon_tuplex((1,2,3,4),2,4) == (3,4), \"colon_tuplex((1,2,3,4),2,4) should return (3,4)\"",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the products of selected factors\n    products = []\n    \n    # Iterate through the two lists and select one factor from each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Check if the product of the selected factors is greater than the Nth largest product found so far\n            if len(products) < N or nums1[i]*nums2[j] > products[-1]:\n                # If the product is greater than the Nth largest product found so far, add it to the list\n                products.append(nums1[i]*nums2[j])\n    \n    # Return the N largest products\n    return products[-N:]",
        "test": "assert large_product([-1, 0, 1], [2, -3, 4], 3) == (0, 0, 0)",
        "num_ids": 1198,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(5,10)==10",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the integer with the left most unset bit set to 1.\n    \"\"\"\n    # Set all bits to 1\n    n = n | (n - 1)\n\n    # Find the rightmost set bit\n    rightmost_set_bit = n & (-n)\n\n    # Set the rightmost set bit\n    n = n | rightmost_set_bit\n\n    return n",
        "test": "assert set_left_most_unset_bit(0b1101001) == 0b1101001",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone given its radius r and height h.\n\n    :param float r: the radius of the base of the cone\n    :param float h: the height of the cone\n    :return float: the volume of the cone\n\n    :Example:\n\n    >>> volume_cone(5, 10)\n    1140.33\n    '''\n    # Calculate the volume of a cone using the formula V = (1/3) * \u03c0 * r^2 * h\n    volume = (1 / 3) * math.pi * r ** 2 * h\n    return volume",
        "test": "assert volume_cone(2,3)==math.pi*2*2*3/3",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    return power_of_2 // 2",
        "test": "assert highest_Power_of_2(0) == 0",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(10)) # Output: 173",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "test": "assert add_string([], \"\") == []",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    This function takes three lists and converts them to nested dictionary.\n    \"\"\"\n\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # Loop through the three lists and add each element to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n\n    # Return the nested dictionary\n    return nested_dict",
        "test": "assert convert_list_dictionary([{'a':1}, {'b':2}, {'c':3}], ['x', 'y', 'z'], [True, False, True]) == [{'a':1, 'x':True}, {'b':2, 'y':False}, {'c':3, 'z':True}]",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    result = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            result += i\n    \n    return result",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for list in input_list:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_list = list\n    return max_list",
        "test": "assert max_length_list([[1],[2,3],[4,5,6]]) == [4,5,6]",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 416,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store character counts\n    char_counts = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is not already in the dictionary, add it with a count of 1\n        if char not in char_counts:\n            char_counts[char] = 1\n        # if the character is already in the dictionary, increment its count\n        else:\n            char_counts[char] += 1\n\n    # loop through each character in the string again\n    for char in str1:\n        # if the character has a count of 1, return it as the first non-repeating character\n        if char_counts[char] == 1:\n            return char\n\n    # if no non-repeating characters were found, return None\n    return None",
        "test": "assert first_non_repeating_character('abcdcaf') == 'b'",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_char('ab') == False",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function finds the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median",
        "test": "assert median_numbers(2,4,6) == 4",
        "num_ids": 521,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    \n    for num in nums:\n        # convert the number to a string and iterate through each character\n        for digit in str(num):\n            # convert the character back to an integer and add it to the total sum\n            total_sum += int(digit)\n    \n    return total_sum",
        "test": "assert sum_of_digits([123, 456, 789]) == 45,'sum_of_digits([123, 456, 789]) returns {} instead of 45'.format(sum_of_digits([123, 456, 789]))",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if i < len(test_tup1) and i < len(test_tup2):\n            result += (test_tup1[i] ^ test_tup2[i],)\n        elif i < len(test_tup1):\n            result += (test_tup1[i],)\n        elif i < len(test_tup2):\n            result += (test_tup2[i],)\n    return result",
        "test": "assert bitwise_xor((1, 2, 3), (4, 5, 6)) == (5, 7, 5)",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for i in test_list:\n        if tuple(i) in freq_dict:\n            freq_dict[tuple(i)] += 1\n        else:\n            freq_dict[tuple(i)] = 1\n    return len(freq_dict)",
        "test": "assert extract_freq([('a', 'b', 'c'), ('d', 'e', 'f'), ('a', 'b', 'c'), ('g', 'h', 'i')]) == 3",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        temp_tup = []\n        for j in range(len(test_tup1[i])):\n            temp_tup.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp_tup))\n    return tuple(result)",
        "test": "assert add_nested_tuples(((1,2),(3,4)),(((5,6),(7,8)),((9,10),(11,12)))) == (((6, 8), (10, 12)), ((13, 15), (15, 17)))",
        "num_ids": 879,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2,5) == 2",
        "num_ids": 266,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex((1,2,3),(2,4)) == False",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert find_Parity(20) == False",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string\n    n_str = str(n)\n\n    # Find the index of the last digit\n    i = len(n_str) - 1\n\n    # Find the index of the first digit that needs to be swapped\n    j = i - 1\n\n    while j >= 0 and n_str[j] >= n_str[i]:\n        j -= 1\n\n    # Swap the digits\n    if j >= 0:\n        n_str = n_str[:j] + n_str[i] + n_str[j+1:i] + n_str[j] + n_str[i+1:]\n\n    # Reconstruct the number\n    next_n = int(n_str)\n\n    return next_n",
        "test": "assert rearrange_bigger(12) == 21",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            heapq.heappush(heap, pair)\n\n    for i in range(k):\n        pair = heapq.heappop(heap)\n        pairs.append(pair)\n\n    return pairs",
        "test": "assert k_smallest_pairs([1,7,11], [2,4,6], 3) == [(1, 2), (1, 4), (1, 6)]",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Returns the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1,2),(3,4),(5,6)]) == 24",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function returns the minimum value from a heterogeneous list.\n    \"\"\"\n    minimum = listval[0]\n    for i in listval:\n        if i < minimum:\n            minimum = i\n    return minimum",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel('snake_case') =='snakeCase'",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]",
        "test": "assert extract_nth_element([(1,2), (3,4), (5,6)], 2) == 4",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Checks whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    set2 = set(list2)\n    for value in list1:\n        if value in set2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3],[2,4,6]) == True",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_Product(arr): \n    n = len(arr) \n    arr.sort() \n    max_product = arr[n-1] * arr[n-2] \n    return max_product ",
        "test": "assert max_Product([1,2,3,4,5]) == 20",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for tpl in Input:\n        if tpl[0] in result:\n            result[tpl[0]].append(tpl[1])\n        else:\n            result[tpl[0]] = [tpl[1]]\n    return result",
        "test": "assert group_tuples([('apple', 1), ('banana', 2), ('orange', 3), ('apple', 4), ('banana', 5), ('orange', 6), ('grape', 7), ('peach', 8)]) == None",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_element = i\n    return max_element",
        "test": "assert Find_Max(['apple', 'banana', 'orange', 'grape', 'pear', 'peach', 'pineapple']) == 'pineapple'",
        "num_ids": 513,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    print(total_sum * len(list1))",
        "test": "assert round_and_sum([-10, 20, -30]) == -150",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize the sum to 0\n    cube_sum = 0\n    \n    # iterate from 0 to n-1\n    for i in range(n):\n        # check if i is even\n        if i % 2 == 0:\n            # add the cube of i to the sum\n            cube_sum += i ** 3\n            \n    # return the sum\n    return cube_sum",
        "test": "assert cube_Sum(1) == 0",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n    test_tup (tuple): A tuple of strings to be concatenated.\n    delimiter (str): A string to be used as delimiter between the elements of the tuple. Default is a space.\n\n    Returns:\n    A string that is the concatenation of the elements of the tuple separated by the delimiter.\n    '''\n    return delimiter.join(test_tup)",
        "test": "assert concatenate_tuple((('hello', 'world'), ('how', 'are', 'you'))) == ('h-e-l-l-o-w-o-r-l-d', 'h-o-w-a-r-e-y-o-u')",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1  # 1**3 = 1",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for i in test_tuple:\n        rear_tuple += (i[-1],)\n    return rear_tuple",
        "test": "assert extract_rear(('cat', 'dog', 'bird', 'fish', 'lizard')) == 'd'",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([[]], 1) == 0",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers from the input list.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "test": "assert change_date_format('2021-05-10') == '10-05-2021'",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "test": "assert shell_sort([5, 2, 4, 6, 1, 3]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 979,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple with elementwise and values.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "test": "assert and_tuples((True, True, True), (True, False, True)) == (True, False, True)",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a)",
        "test": "assert parabola_directrix(1, 0, 0) == 0",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists as arguments and returns True if they have at least one common element, else it returns False.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3], [3, 4, 5]) == True",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    area = (base1 + base2) * height / 2\n    return median",
        "test": "assert median_trapezium(30,35,40) == 32.5, \"Test case 4 failed\"",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes two arguments - arr (an array) and number (a number).\n    It returns True if number is greater than any element in the array, and False otherwise.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "test": "assert check_greater([1,2,3,4,5], 4) == True",
        "num_ids": 446,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one('a') == False",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as an argument and returns the last digit of the number.\n    \"\"\"\n    if n < 0:\n        n *= -1  # Converting negative numbers to positive to find the last digit\n    \n    last_digit = n % 10  # Finding the last digit by taking the remainder of the number divided by 10\n    \n    return last_digit",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 327,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns the negative numbers in a list.\n    \"\"\"\n    negative_numbers = []\n    for i in lst:\n        if i < 0:\n            negative_numbers.append(i)\n    return negative_numbers",
        "test": "assert neg_nos([]) == []",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str",
        "test": "assert remove_odd(\"hello\") == \"hll\"",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] < test_list[j][1] and test_list[j][0] < test_list[i][1]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]) == 0",
        "num_ids": 969,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result *= 10\n        result += i\n    return result",
        "test": "assert multiple_to_single([10]) == 10",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None, None",
        "test": "assert find_adverb_position(\"She was furious with the latest news.\") == ([('furious', 4)], [('news', 18)])",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a single argument l which represents the length of a cube.\n    It returns the surface area of the cube as an integer.\n    '''\n    return 6 * l ** 2",
        "test": "assert surfacearea_cube(2) == 24",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
        "test": "assert positive_count(array('i', [0, 0, 0, 0, 0, 0])) == 0.0",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in list1:\n        if i < 0 and abs(i) > abs(largest):\n            largest = i\n    return largest",
        "test": "assert largest_neg([-10,-5,0,5,10]) == -10",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tuple(tup[K:]))\n    return result",
        "test": "assert trim_tuple([(1,), (2,), (3,)], 0) == [(1,), (2,), (3,)]",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "test": "assert index_multiplication((1,2,3), (4,5,6)) == (4,10,18)",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two arguments:\n    - tup: a tuple of elements.\n    - lst: a list of elements.\n    \n    The function returns a dictionary where the keys are elements in lst and the values are their respective counts in tup.\n    '''\n    count = Counter(tup)\n    res = {}\n    for elem in lst:\n        if elem in count:\n            res[elem] = count[elem]\n    return res",
        "test": "assert count_Occurrence(('a', 'b', 'c'), ['a', 'b', 'c']) == Counter({'a': 1, 'b': 1, 'c': 1})",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of their cubes.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "test": "assert cube_nums([1,2,3]) == [1, 8, 27]",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i * i\n    return s",
        "test": "assert cal_sum(1) == 1",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    :param str_list: List of string values.\n    :param size: Size of the strings to extract.\n    :return: List of extracted string values.\n    \"\"\"\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]\n",
        "test": "assert extract_string(\"abcdefg\", 2) == [\"ab\", \"cd\", \"ef\", \"g\"]",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)",
        "test": "assert remove_whitespaces('Python is a great language') == 'Pythonisagreatlanguage'",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    This function calculates the loss amount if the given sale amount is less than the actual cost. \n    '''\n    if sale_amount < actual_cost: \n        loss = actual_cost - sale_amount \n        return loss\n    else: \n        return 0",
        "test": "assert loss_amount(100, 80) == 20",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    This function takes a number as input and returns the sum of all even factors of the number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i\n    return sum",
        "test": "assert sumofFactors(48) == 15, \"Incorrect output for sum of factors of 48\"",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'\n    '''\n    # Find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter words containing 'z'\n    words_containing_z = list(filter(lambda word: 'z' in word, words))\n    \n    # Return the list of words containing 'z'\n    return words_containing_z",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy cog\") == False",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function checks whether the given month number contains 31 days or not.\n    If the given month number is valid and contains 31 days, it returns True. Otherwise, it returns False.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(2) == True  # February has 29 days in a leap year",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "test": "assert Find_Min(['apple', 'banana', 'cherry']) == 'apple'",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes the length and breadth of a rectangle as input and returns its area.\n    '''\n    area = length * breadth\n    return area",
        "test": "assert rectangle_area(3, 4) == 12",
        "num_ids": 322,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # find all substrings of uppercase letters using regex\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # replace uppercase substrings with empty string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n        \n    return str1",
        "test": "assert remove_uppercase(\"12345\") == \"12345\"",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as an input and returns a new list containing the first element of each sublist.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i][0])\n    return result",
        "test": "assert Extract([]) == []",
        "num_ids": 515,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr('HELLO WORLD') == 10 # test 2",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def combinations_list(lst):\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst]\n    result = []\n    for i in range(len(lst)):\n        rest_combs = combinations_list(lst[:i] + lst[i+1:])\n        for c in rest_combs:\n            result.append([lst[i]] + c)\n    return result",
        "test": "assert combinations_list([1]) == [[1]]",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    curr_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], curr_product*arr[i])\n        max_product = max(max_product, curr_product)\n        \n    return max_product",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6 # [2, 3]",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False",
        "test": "assert check_value({'a': 5, 'b': 5, 'c': 5}, 5) == True",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}",
        "test": "assert drop_empty({'a':1, 'b':{'c':2}}) == {'a':1, 'b':{'c':2}}",
        "num_ids": 610,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        elif arr[i] > arr[i] * min_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], arr[i] * max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n    return max_so_far",
        "test": "assert max_product([2, 3, -2, 4]) == 6, \"Wrong answer for arr [2, 3, -2, 4]\"",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result_list = []\n    for i in range(len(test_tup)-1):\n        result_list.append(test_tup[i] + test_tup[i+1])\n    return result_list",
        "test": "assert add_pairwise((1,)) == ()",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product",
        "test": "assert find_remainder([1, 1, 1, 1], 5) == 1 ",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False",
        "test": "assert check_Consecutive([1,2,3,4,6]) == True",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return list(set1 & set2)",
        "test": "assert tuple_intersection([(1, 2), (2, 3), (3, 4)], [(4, 5), (5, 6)]) == []",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1",
        "test": "assert replace_char('hello','l','L') == 'heLLo'",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))",
        "test": "assert sort_counter({'a': 1, 'b': 1, 'c': 1}) == [('a', 1), ('b', 1), ('c', 1)]",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = float('inf')\n    largest = float('-inf')\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest + largest",
        "test": "assert big_sum([0, 0, 0, 0, 0]) == 0, \"Test case 3 failed\"",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_lower(string):\n    '''\n    This function converts a given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower('Abc') == 'abc'",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[a-z]+')\n    return pattern.sub('', str1)\n",
        "test": "assert remove_lowercase('123') == '123'",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as an input and returns the first digit of the number.\n    \"\"\"\n    if n < 0:\n        n *= -1\n    return n // 10 ** (len(str(n)) - 1)",
        "test": "assert first_Digit(123) == 1",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list of only the odd integers.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]",
        "num_ids": 454,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\nprint(difference(10))",
        "test": "assert difference(1) == 0",
        "num_ids": 416,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([2,2,4,4,5],5) == 4",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled = ''\n    for char in string:\n        if char.isupper():\n            toggled += char.lower()\n        elif char.islower():\n            toggled += char.upper()\n        else:\n            toggled += char\n    return toggled",
        "test": "assert toggle_string(\"hello\") == \"HELLO\"",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff_sum = 0\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    if len(n1_list)!= len(n2_list):\n        n1_list = ['0'] * (len(n2_list) - len(n1_list)) + n1_list\n        n2_list = ['0'] * (len(n1_list) - len(n2_list)) + n2_list\n    for i in range(len(n1_list)):\n        diff_sum += abs(int(n1_list[i]) - int(n2_list[i]))\n    return diff_sum",
        "test": "assert digit_distance_nums(12, 12) == 0",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum",
        "test": "assert max_sub_array_sum([1, 2, 3, 4, 5], 5) == 15",
        "num_ids": 787,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # convert both tuples to sets to get unique elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # find the union of the two sets and convert back to a list\n    union_list = list(set1.union(set2))\n\n    # sort the list and return it\n    return sorted(union_list)",
        "test": "assert union_elements((1, 2, 3), (2, 3, 4)) == [1, 2, 3, 4]",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list as an input and returns the length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length",
        "test": "assert Find_Max_Length([1,2,3,4,5]) == 5",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    # Regular expression pattern to match values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return the matches as a list\n    return matches",
        "test": "assert extract_values(\"hello world\") == []",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5,6],6) == 15",
        "num_ids": 482,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split(word):\n    '''\n    This function takes a string as an argument and returns a list of characters.\n    '''\n    return list(word)",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 361,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input: input must be a non-negative integer\"\n    else:\n        return sum(int(digit) for digit in str(n))",
        "test": "assert sum_digits(1234) == 10",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "test": "assert sort_sublists([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 818,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums",
        "test": "assert two_unique_nums([1,2,3,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as input and returns its surface area.\n    \"\"\"\n    surfacearea = 2 * 3.14159 * r * h + 2 * 3.14159 * r**2\n    return surfacearea",
        "test": "assert surfacearea_cylinder(0,5)==0, \"The surface area of a cylinder with radius 0 and height 5 should be 0\"",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists and checks if the second list is a sublist of the first list.\n    :param A: list of integers\n    :param B: list of integers\n    :return: True if the second list is a sublist of the first list, False otherwise.\n    \"\"\"\n    # Convert both lists to sets to get the O(1) lookup time.\n    set_A = set(A)\n    set_B = set(B)\n\n    # Check if B is a subset of A.\n    if set_B.issubset(set_A):\n        return True\n\n    # Check if there exists any B[i:] such that B[i:] is a subset of A.\n    for i in range(len(A) - len(B) + 1):\n        if set_B == set(A[i:]):\n            return True\n\n    return False",
        "test": "assert is_Sub_Array([1,2,3,4], [1,2,3,4]), \"Function should return True for [1,2,3,4] and [1,2,3,4]\"",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Find the last digit of the factorial of n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        factorial = 1\n        while n > 0:\n            factorial *= n\n            n -= 1\n        return factorial % 10",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave three lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 3)) == []",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            new_elem = even_ele(elem, even_fnc)\n            new_tuple.append(new_elem)\n        elif even_fnc(elem):\n            new_tuple.append(elem)\n    return tuple(new_tuple)",
        "test": "assert even_ele(((1, 2), (3, 4), (5, 6)), lambda x: False) == ()",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes two arguments, base_edge and height, and returns the surface area of a square pyramid\n    with the given base edge and height.\n    '''\n\n    # Find the area of the square base\n    square_area = base_edge ** 2\n\n    # Find the area of the triangle's base\n    triangle_base = base_edge * height / 2\n\n    # Find the area of the triangle's height\n    triangle_height = base_edge * height / 2\n\n    # Find the area of the pyramid\n    pyramid_area = (triangle_base * 2) + (triangle_height ** 2)\n\n    # Calculate the surface area of the pyramid\n    surface_area = (4 * square_area) + pyramid_area\n\n    return surface_area",
        "test": "assert surface_Area(8, 6) == 72, 'The surface area of a square pyramid with base edge 8 and height 6 should be 72'",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert not my_dict({\"key1\": \"value1\"}), \"The function did not return False when the dictionary had a key-value pair\"",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        catalan = [0]*(num+1)\n        catalan[0] = 1\n        for i in range(1, num+1):\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i-j-1]\n        return catalan[num]",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function finds the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert find_adverbs('The cat was standing still.') == (['still'], [(16, 20)])",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Create a max-heap of size n\n    heap = []\n\n    # Iterate through the items and add each item to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # If the heap size exceeds n, remove the smallest item from the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Sort the heap in descending order\n    heap = sorted(heap, reverse=True)\n\n    return heap",
        "test": "assert expensive_items([(\"apple\", 2), (\"banana\", 1), (\"orange\", 3), (\"grape\", 5), (\"peach\", 4)], 1) == [('peach', 4)]",
        "num_ids": 1105,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "test": "assert split_Arr([1,2,3,4,5,6], 6) == [1,2,3,4,5,6]",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def list_tuple(listx):\n    '''\n    This function converts a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1,2,3]) == (1,2,3)",
        "num_ids": 318,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        if num == int(num**0.5)**2:\n            result.append(num)\n    return result",
        "test": "assert perfect_squares(2, 4) == [4]",
        "num_ids": 575,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y",
        "test": "assert polar_rect(0,0) == (0.0, 0.0)",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(k): \n        res = res * (n-i) // (i+1)\n    return res\n",
        "test": "assert binomial_Coeff(0,0) == 1",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0*)', '', ip)",
        "test": "assert removezero_ip('255.255.255.255') == '255.255.255.255'",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n            \n    return abs(even_num - odd_num)",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5, 6]) == 1 # Test case 1",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def min_Swaps(str1, str2):\n    if str1 == str2:\n        return 0\n    \n    # Count the number of occurrences of each digit in both strings\n    freq1 = [0] * 10\n    freq2 = [0] * 10\n    for digit in str1:\n        freq1[int(digit)] += 1\n    for digit in str2:\n        freq2[int(digit)] += 1\n    \n    # Find the initial position of each digit in both strings\n    pos1 = [0] * 10\n    pos2 = [0] * 10\n    for i in range(10):\n        pos1[i] = str1.find(str(i))\n        pos2[i] = str2.find(str(i))\n    \n    # Calculate the minimum number of swaps required to convert str1 to str2\n    swaps = 0\n    for digit in range(10):\n        if freq1[digit] > 0:\n            while freq2[digit] > 0 and pos1[digit] > pos2[digit]:\n                # Swap the digits in str1 and str2\n                str1, str2 = str1[:pos1[digit]], str1[pos1[digit]+1:] + str1[pos1[digit]]\n                str2, str1 = str2[:pos2[digit]], str2[pos2[digit]+1:] + str2[pos2[digit]]\n                swaps += 1\n                freq1[digit] -= 1\n                freq2[digit] -= 1\n                pos1[digit] -= 1\n                pos2[digit] -= 1\n    \n    return swaps",
        "test": "assert min_Swaps(\"0101\",\"1010\") == 2",
        "num_ids": 1173,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Find the kth element from two sorted arrays.\n    '''\n    i = len(arr1) - 1\n    j = len(arr2) - 1\n    while i >= 0 and j >= 0:\n        if k == 0:\n            return arr1[i]\n        elif k == 1:\n            return arr2[j]\n        elif k >= len(arr1) + len(arr2):\n            return None\n        elif arr1[i] >= arr2[j]:\n            i -= 1\n        else:\n            j -= 1\n        k -= 1",
        "test": "assert find_kth([1,2,3], [4,5,6], 2) == 5",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def armstrong_number(number):\n    '''\n    This function checks whether the given number is an Armstrong number or not.\n    '''\n    # Convert the number to a string\n    num = str(number)\n\n    # Find the length of the number\n    length = len(num)\n\n    # Calculate the sum of the cube of each digit\n    sum_of_cubes = sum([int(digit)**length for digit in num])\n\n    # Check if the sum is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # Loop through first n natural numbers\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n\n    # Calculate and return sum and average of first n natural numbers\n    average = sum / count\n    return sum, average",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes in a number as input and returns True if the number is even, otherwise it returns False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(0) == True",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None",
        "test": "assert first_repeated_char('hello') == 'l'",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while len(ludic) < n:\n        if len(str(i)) == len(str(2*i)):\n            ludic.append(i)\n        i += 1\n    return ludic",
        "test": "assert get_ludic(1) == [1], \"get_ludic(1) should return [1]\"",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_words(s):\n    \"\"\"\n    This function takes a string as input and returns the string with the words reversed.\n    \"\"\"\n    words = s.split()  # Split the string into words\n    words = [word[::-1] for word in words]  # Reverse each word\n    return \" \".join(words)  # Join the reversed words with spaces in between",
        "test": "assert reverse_words('a') == 'a'",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if a given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians",
        "test": "assert radian_degree(90) == math.pi/2",
        "num_ids": 323,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return (matches[0], text.index(matches[0]), text.index(matches[0])+len(matches[0]))\n    else:\n        return None",
        "test": "assert find_literals('hello world', '[a-z]+') == ('hello', 0, 5)",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bell_Number(n):\n    bell = [1]\n    for i in range(1, n):\n        bell.append(bell[i-1] + bell[i-1-1])\n    return bell[n-1]",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input. It returns a list with the same elements, but the k'th element removed.\n    '''\n    if k > len(list1):\n        return \"Invalid Input\"\n    else:\n        return list1[:k-1] + list1[k:]",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5]",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_num:\n            max_num = test_list[i][N-1]\n    return max_num",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 3) == 9",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([ [1,2], [3,4], [5,6] ]) == [ [1,3,5], [2,4,6] ]",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        if i == 0:\n            result.append(test_list[i][1])\n        else:\n            result.append(result[i-1] + test_list[i][1])\n    return result",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for sublist in nums:\n        avg = sum(sublist)/len(sublist)\n        avg_list.append(avg)\n    return avg_list",
        "test": "assert average_tuple(((1,2,3), (4,5,6), (7,8,9), (10,11,12), (13,14,15), (16,17,18))) == [4, 6, 8, 11, 14, 17]",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: the tuples must have the same length.\")\n        return None\n    else:\n        return tuple(a % b for a, b in zip(test_tup1, test_tup2))",
        "test": "assert tuple_modulo((5, 2, 7), (3, 2, 1)) == (2, 0, 0)",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def min_Jumps(steps, d):\n    '''\n    This function takes two arguments:\n    1. steps: an integer that represents the maximum length of the jump\n    2. d: an integer that represents the maximum distance of the jump\n\n    It returns the minimum number of jumps required to reach the point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initialize the array to store the minimum jumps required for each index\n    dp = [float('inf')] * (d+1)\n\n    # initialize the first index as 0\n    dp[0] = 0\n\n    # iterate through the array\n    for i in range(1, d+1):\n        # iterate through all the possible steps from the current index\n        for j in range(1, steps+1):\n            # if the current step is less than or equal to the current index, update the dp array\n            if j <= i:\n                dp[i] = min(dp[i], dp[i-j]+1)\n\n    # return the minimum jumps required\n    return dp[d]",
        "test": "assert min_Jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 25) == 0",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([1,2,3],[2,3,4]) == [0.5, 0.6666666666666666, 0.75]",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_lst = []\n    alpha_lst = []\n    for char in test_str:\n        if char.isdigit():\n            num_lst.append(char)\n        else:\n            alpha_lst.append(char)\n    return \"\".join(alpha_lst + num_lst)",
        "test": "assert move_num(\"This is a test\") == \"This is a test\"",
        "num_ids": 715,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def largest_subset(a):\n    a.sort()\n    largest = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                largest = max(largest, j-i+1)\n    return largest\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(largest_subset(a))",
        "test": "assert largest_subset([1,4,6,8]) == 0",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = (arr1[n//2] + arr2[n//2]) / 2\n    return median",
        "test": "assert get_median([1, 2, 3], [4, 5, 6], 3) == 3.5",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1,2,3],2) == [1,4,9]",
        "num_ids": 465,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"PYTHON\") == \"PYTHON\"",
        "num_ids": 275,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and returns a list with the first and last elements interchanged.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 564,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = math.sqrt(r**2/2)\n    area = (math.pi * r**2) / 2 - math.pi * a**2\n    return area",
        "test": "assert triangle_area(4) == 2.1995404103804967",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    # Handle edge case when array is empty or has only one element\n    if array[start]!= start + 1 or array[end]!= end + 1:\n        return start + 1 if array[start]!= start + 1 else start + 2\n\n    # Find the minimum and maximum elements in the array\n    min_val = array[start]\n    max_val = array[end]\n\n    # If all elements are in the correct range, then the missing number is max_val + 1\n    if min_val == 1 and max_val == len(array):\n        return max_val + 1\n\n    # Loop through the array and mark each element as missing or present\n    missing_num = None\n    for i in range(min_val, max_val+1):\n        if i not in array:\n            if missing_num is None:\n                missing_num = i\n            else:\n                return i\n\n    # If we reach here, then all numbers are present in the array\n    return missing_num",
        "test": "assert find_First_Missing([1,2,3,4,5]) == 6",
        "num_ids": 1018,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes an element and a sublist as input. \n    The element is a tuple representing a coordinate on the board.\n    The sublist is an optional parameter that defaults to an empty list.\n\n    The function returns a list of all the coordinates that are adjacent to the given element.\n    '''\n\n    # Define the adjacent coordinates\n    adj = [\n        (ele[0]-1, ele[1]-1),\n        (ele[0]-1, ele[1]),\n        (ele[0]-1, ele[1]+1),\n        (ele[0], ele[1]-1),\n        (ele[0], ele[1]+1),\n        (ele[0]+1, ele[1]-1),\n        (ele[0]+1, ele[1]),\n        (ele[0]+1, ele[1]+1)\n    ]\n\n    # Remove the coordinates that are not on the board\n    adj = [coord for coord in adj if coord[0] >= 0 and coord[1] >= 0]\n\n    # Remove the coordinates that are already in the sublist\n    adj = [coord for coord in adj if coord not in sub]\n\n    return adj",
        "test": "assert adjac((3,3)) == [(2,3), (3,2)]",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with underscores and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")",
        "test": "assert replace_spaces('') == ''",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zeroes = []\n    non_zeroes = []\n    \n    # Separating the zeroes from the non-zeroes\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n            \n    # Adding the zeroes at the end of the list\n    num_list = non_zeroes + zeroes\n    \n    return num_list",
        "test": "assert move_zero([0,0,0,0,0,0]) == [0,0,0,0,0,0]",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list and its size as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += arr[i] ^ arr[j]\n    return res",
        "test": "assert pair_xor_Sum([1,2,3,4,5,6,7,8], 8) == 96 # 1^2 + 1^3 + 1^4 + 1^5 + 1^6 + 1^7 + 1^8 + 2^3 + 2^4 + 2^5 + 2^6 + 2^7 + 2^8 + 3^4 + 3^5 + 3^6 + 3^7 + 3^8 + 4^5 + 4^6 + 4^7 + 4^8 + 5^6 + 5^7 + 5^8 + 6^7 + 6^8 + 7^8",
        "num_ids": 945,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable.copy()\n    hq.heapify(heap)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result",
        "test": "assert heap_sort([]) == []",
        "num_ids": 604,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True",
        "test": "assert noprofit_noloss(100,50) == True",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert wind velocity from km/h to m/s\n    v = v * 0.277778\n\n    # Calculate the wind chill index\n    # https://en.wikipedia.org/wiki/Wind_chill#Formulas\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # Round the wind chill index to the next integer\n    wci = round(wci)\n\n    return wci",
        "test": "assert wind_chill(20, 15) == 18",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "test": "assert sample_nam(['Alice', 'Bob', 'Charlie', 'David']) == 13 ",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    result = re.sub(pattern, '', items)\n    return result",
        "test": "assert remove_parenthesis(\"hello (world)\") == \"hello \"",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    num = 0\n    while i <= n:\n        num += (i * (3 * i - 1)) // 2\n        i += 1\n    return num",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*(?:\\w*z\\w*))\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle('abcde fghij') == False",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple((1,2,3),{'a':4, 'b':5, 'c':6}) == (1,2,3,{'a':4, 'b':5, 'c':6})",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for i in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    max_avg = dp[n-1][n-1]/2\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                path_avg = (dp[i][j] + dp[j][i])/(2*(n-1))\n                if path_avg > max_avg:\n                    max_avg = path_avg\n    \n    return max_avg",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18]]) == 14.5",
        "num_ids": 1676,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students",
        "test": "assert filter_data({\"John\": (1.8, 70), \"Mary\": (1.6, 60), \"David\": (1.7, 65), \"Emma\": (1.6, 50)}, 1.6, 60)!= {\"John\": (1.8, 70), \"Mary\": (1.6, 60), \"David\": (1.7, 65)}, \"The function is not working correctly.\"",
        "num_ids": 1801,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3], [3, 2, 1]) == [(0, 2), (1, 1), (2, 0)]",
        "num_ids": 660,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit) ** power\n    return base_sum",
        "test": "assert power_base_sum(9, 1) == 9 #9^1 = 9",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "test": "assert extract_quotation(\"The quick brown fox jumps over the lazy dog.\") == []",
        "num_ids": 482,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result_tup = tuple(test_tup[i]*test_tup[i+1] for i in range(N))\n    return result_tup",
        "test": "assert multiply_elements((1, 2, 3)) == (2, 6)",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    This function takes two lists as input and returns their sum as a new list.\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 569,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, _ in groupby(nums)]",
        "test": "assert consecutive_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in the radius r and height h of a cone and returns the lateral surface area of the cone.\n    '''\n    lateralsurface = math.pi * r * h\n    return lateralsurface",
        "test": "assert lateralsurface_cone(4,5) == 62.83185307179586, \"The function lateralsurface_cone(4,5) should return 62.83185307179586\"",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)",
        "test": "assert replace_specialchar(\"hello world\") == \"hello:world\"",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1  # x not found in A",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 5, 6, 7, 8], 4) == 3",
        "num_ids": 868,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function takes a list as input and returns the sum of products of all possible sublists of the list. \n    '''\n    n = len(arr)\n    # Initialize the sum variable to 0\n    total_sum = 0\n    # Iterate over all sublists of length 1 to n\n    for i in range(1, n+1):\n        # Iterate over all sublists of length i\n        for j in range(n-i+1):\n            # Calculate the product of the sublist and add it to the total sum\n            total_sum += arr[j] * arr[j+i-1]\n    return total_sum",
        "test": "assert sum_Of_Subarray_Prod([1,1,1,1]) == 0",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles bits of the number except the first and last bit.\n    \"\"\"\n    # Get the binary representation of the number\n    binary_n = bin(n)[2:]\n    # Pad the binary representation with leading zeros\n    binary_n = binary_n.rjust(len(binary_n) + 2, '0')\n    # Get the binary representation of the middle bits\n    middle_bits = binary_n[1:-1]\n    # Convert the middle bits back to decimal and toggle them\n    middle_bits_dec = int(middle_bits, 2) ^ (2**len(middle_bits)-1)\n    # Convert the modified middle bits back to binary\n    modified_middle_bits = bin(middle_bits_dec)[2:]\n    # Pad the modified binary with leading zeros to match the original length\n    modified_middle_bits = modified_middle_bits.rjust(len(binary_n) - 2, '0')\n    # Combine the modified binary with the other parts of the original number\n    result = binary_n[0] + modified_middle_bits + binary_n[-1]\n    # Convert the result back to decimal and return\n    return int(result, 2)",
        "test": "assert set_middle_bits(21) == 25",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i",
        "test": "assert left_insertion([1,3,4,5,6], 5) == 3",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r\"^[aeiouAEIOU][A-Za-z0-9_]*\")\n    if pattern.match(string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('Abc') == True",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n - 1) * geometric_sum(n - 1)\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef find_index(n):\n    index = 0\n    count = 1\n    triangular_num = 1\n    while len(str(triangular_num)) < n:\n        index += 1\n        count += 1\n        triangular_num = int(math.pow(10, count) * count / (count - 1))\n    return index",
        "test": "assert find_Index(4) == 6",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as an input and returns a dictionary with the adjacent elements as keys and values.\n    '''\n    # Initialize an empty dictionary to store the key-value pairs.\n    test_dict = {}\n\n    # Iterate over the tuple using a for loop and add the adjacent elements as key-value pairs to the dictionary.\n    for i in range(len(test_tup)-1):\n        test_dict[test_tup[i]] = test_tup[i+1]\n\n    # Return the dictionary.\n    return test_dict",
        "test": "assert tuple_to_dict((1, 2)) == {1: 2}",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Check if all characters in a string are the same.\n\n    Parameters:\n    s (str): the input string\n\n    Returns:\n    bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    first = s[0]\n    for char in s[1:]:\n        if char!= first:\n            return False\n    return True",
        "test": "assert all_Characters_Same(\"hello\") == False",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    volume = (math.sqrt(2) / 3) * (side ** 3)\n    area = (6 * side ** 2) / (4 * (math.sqrt(2) / 3))\n    return area",
        "test": "assert area_tetrahedron(4) == 1/4, \"area_tetrahedron(4) should return 1/4\"",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n items.\n    \"\"\"\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 1) == [5, 1, 2, 3, 4]",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False",
        "test": "assert check_none((1,2,3)) == False",
        "num_ids": 324,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Create a list of all digits from 0 to 9\n    digits = [i for i in range(10)]\n    \n    # Use a lambda function to check if a number is divisible by every digit it contains\n    is_divisible = lambda num: all(num % digit == 0 for digit in digits)\n    \n    # Use filter() to filter out all numbers that are not divisible by every digit\n    divisible_nums = filter(is_divisible, range(startnum, endnum+1))\n    \n    # Return the list of divisible numbers\n    return list(divisible_nums)",
        "test": "assert divisible_by_digits(10000, 100000) == [10000, 10101, 10202, 10404, 10505, 10606, 10808, 11010, 11111, 11212, 11414, 11515, 11616, 11818, 12020, 12121, 12222, 12424, 12525, 12626, 12828, 13030, 13131, 13232, 13434, 13535, 13636, 13838, 14040, 14141, 14242, 14444, 14545, 14646, 14848, 15050, 15151, 15252, 15555, 15858, 16060, 16161, 16262, 16666, 17070, 17294, 17575, 17777, 18080, 18416, 18888, 19090, 19456, 19798, 20000, 20101, 20202, 20404, 20505, 20606, 20808, 21010, 21111, 21212, 21414, 21515, 21616, 21818, 22020, 22121, 22222, 22424, 22525, 22626, 22828, 23030, 23131, 23232, 23434, 23535, 23636, 23838, 24040, 24141, 24242, 24444, 24545, 24646, 24848, 25050, 25151, 25252, 25555, 25858, 26060, 26161, 26262, 26666, 27070, 27294, 27575, 27777, 28080, 28416, 28888, 29090, 29456, 2",
        "num_ids": 1697,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2 * a/360)",
        "test": "assert sector_area(5,180)==math.pi*5**2/2",
        "num_ids": 618,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    # Create three matrices to store the length of common subsequence of three strings\n    m = len(X) + 1\n    n = len(Y) + 1\n    o = len(Z) + 1\n\n    # Initialize the first row and first column of the matrices with zeros\n    matrix1 = [[0 for i in range(o)] for j in range(m)]\n    matrix2 = [[0 for i in range(o)] for j in range(m)]\n    matrix3 = [[0 for i in range(o)] for j in range(m)]\n\n    # Fill the matrices using dynamic programming approach\n    for i in range(1, m):\n        for j in range(1, o):\n            if X[i-1] == Z[j-1]:\n                matrix1[i][j] = matrix2[i-1][j-1] + 1\n            else:\n                matrix1[i][j] = max(matrix1[i-1][j], matrix2[i][j-1], matrix3[i][j])\n\n    for i in range(1, n):\n        for j in range(1, o):\n            if Y[i-1] == Z[j-1]:\n                matrix2[i][j] = matrix1[i-1][j-1] + 1\n            else:\n                matrix2[i][j] = max(matrix1[i][j-1], matrix2[i-1][j], matrix3[i][j])\n\n    # Fill the last matrix using dynamic programming approach\n    for i in range(1, m):\n        for j in range(1, o):\n            if X[i-1] == Y[j-1] and X[i-1]!= Z[j-1]:\n                matrix3[i][j] = matrix2[i-1][j-1]\n\n    # Find the maximum value in the three matrices\n    max_val = max(max(row) for row in matrix1)\n    max_val = max(max_val, max(max(row) for row in matrix2))\n    max_val = max(max_val, max(max(row) for row in matrix3))\n\n    # Initialize the result string\n    result = \"\"\n\n    # Traverse the three matrices in reverse order to find the common subsequence\n    i = m - 1\n    j = o - 1\n    while i > 0 and j > 0:\n        if X[i-1] == Z[j-1]:\n            result = X[i-1] + result\n            i -= 1\n            j -= 1\n        elif matrix1[i-1][j] > matrix2[i][j-1] and matrix1[i-1][j] > matrix3[i][j]:\n            i -= 1\n        else:\n            j -= 1\n\n    return result",
        "test": "assert lcs_of_three(\"ABCDEF\", \"BCDEFG\", \"DEFGHI\") == \"DEF\"",
        "num_ids": 1498,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Splitting the string into words using regex\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Joining the words with spaces in between\n    capital_words_spaces =''.join(words)\n    # Returning the capital_words_spaces string\n    return capital_words_spaces",
        "test": "assert capital_words_spaces(\"This   is  a    sample string\") == \"This is a sample string\"",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: float(x))",
        "test": "assert sort_numeric_strings(['123', '456', '789']) == ['123', '456', '789']",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_min_heap_helper(arr, i):\n    # If the index is greater than or equal to the length of the array,\n    # then the sub-tree rooted at this index is a valid heap\n    if i >= len(arr):\n        return True\n\n    # Get the indices of the left and right child of i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    # Check if the current node is less than or equal to both its children\n    if (left < len(arr) and arr[left] < arr[i]) or (right < len(arr) and arr[right] < arr[i]):\n        return False\n\n    # Recursively check if the left and right sub-trees are valid heaps\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    # Check if the first element of the array is the smallest element in the array\n    if arr[0]!= min(arr):\n        return False\n\n    # Check if the rest of the array is a valid min heap\n    return check_min_heap_helper(arr, 0)",
        "test": "assert check_min_heap_helper([10, 14, 13, 8, 7, 6, 4, 1, 2, 5], 1) == False",
        "num_ids": 1252,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 669,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a value K as input and returns the minimum K tuples from the list.\n    \"\"\"\n    return sorted(test_list, key=lambda x: x[0])[:K]",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 3) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 918,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([1, 2, 3, 4], [2, 3, 4, 5], [5, 6, 7, 8]) == []",
        "num_ids": 736,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]",
        "test": "assert second_smallest([3, 2, 1]) == 2",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"abbb\") == True",
        "num_ids": 313,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    This function counts the number of pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs(['abc', 'cba', 'abcd', 'dcba']) == 2",
        "num_ids": 776,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in count:\n                count[sublist] = 1\n            else:\n                count[sublist] += 1\n    return count",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1117,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    try:\n        float_num = float(num)\n    except ValueError:\n        return False\n\n    if round(float_num, 2) == float_num:\n        return True\n    else:\n        return False",
        "test": "assert is_decimal('12.34') == True",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1,2,3,4,5,5]) == False",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return None",
        "test": "assert check_monthnumber_number(1) == False # January doesn't have 30 days",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([4, 2, 1, 5, 3],5) == 1",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr('12345') == 5",
        "num_ids": 326,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number.\n    \"\"\"\n    if n <= 0:\n        return None\n    \n    polite = []\n    count = 0\n    \n    i = 1\n    while count < n:\n        is_prime = True\n        \n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        \n        if is_prime and '0' not in str(i) and '2' not in str(i):\n            count += 1\n            polite.append(i)\n        \n        i += 1\n    \n    return polite[-1] if polite else None",
        "test": "assert is_polite(2) == 3",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum.\n    '''\n    pairs_count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    \n    return pairs_count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 6) == 2",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements that are present in the first list but not in the second list.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list",
        "test": "assert Diff([1,2,3,4],[2,4]) == [1,3]",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Find the sum of fourth power of first n odd natural numbers.\n\n    :param n: int, the number of odd natural numbers to sum\n    :return: int, the sum of fourth power of first n odd natural numbers\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    \n    return sum",
        "test": "assert odd_num_sum(1) == 1",
        "num_ids": 612,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return True if not stack else False",
        "test": "assert check_expression('()[]{}') == True # Testcase 1",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Splitting the string into words\n    words = test_str.split()\n    # Removing words with k length\n    for word in words[:]:\n        if len(word) == K:\n            words.remove(word)\n    # Joining the words back to string\n    return''.join(words)",
        "test": "assert remove_length(\"\", 1) == \"\"",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        results.append((match.group(), match.start()))\n    return results if results else None",
        "test": "assert occurance_substring(\"hello world\", \"l\") == [(2, 3), (3, 4), (9, 10), (10, 11)]",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_position(nums):\n    '''\n    This function checks whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "test": "assert odd_position([2, 4, 6, 7, 9]) == False",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i - 1] not in vowels) and (i == len(test_str) - 1 or test_str[i + 1] not in vowels):\n            count += 1\n    return count",
        "test": "assert count_vowels(\"abstemious\") == 2",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the list.\n    freq = {}\n\n    # Traverse the list and add each element to the dictionary along with its frequency.\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # Create an empty list to store the non-repeated elements in the list.\n    non_repeated = []\n\n    # Traverse the dictionary and add each non-repeated element to the list.\n    for i in freq:\n        if freq[i] == 1:\n            non_repeated.append(i)\n\n    # Calculate the sum of the non-repeated elements in the list.\n    sum_non_repeated = sum(non_repeated)\n\n    return sum_non_repeated",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as input and returns a list with consecutive duplicates packed into sublists.\n    \"\"\"\n    return [[key] * len(list(group)) for key, group in groupby(lst)]",
        "test": "assert pack_consecutive_duplicates([1,2,3,4,5,5,5,6,7,7,7,8,9,9,9]) == [[1],[2],[3],[4],[5,5,5],[6],[7,7,7],[8],[9,9,9]]",
        "num_ids": 958,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def unique_sublists(list1):\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists.append(tuple(list1[i:j]))\n    counts = {}\n    for sublist in sublists:\n        if sublist in counts:\n            counts[sublist] += 1\n        else:\n            counts[sublist] = 1\n    return counts",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for r in range(1, len(test_list)+1):\n        for comb in combinations(test_list, r):\n            if sum(comb) == r:\n                print(comb)",
        "test": "assert find_combinations([(1, 2, 3), (4, 5, 6)]) == [(1, 4), (1, 5), (1, 6), (2, 3), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]",
        "num_ids": 2573,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if n ** 0.5 == int(n ** 0.5):\n        count -= 1\n    return count\n\nprint(count_divisors(10)) # Output: 4\nprint(count_divisors(15)) # Output: 8\nprint(count_divisors(20)) # Output: 10",
        "test": "assert count_divisors(6) == 4",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function finds the sum of all odd length subarrays of an array.\n    \"\"\"\n    n = len(arr)\n    sum_odd = 0\n    \n    # Traverse through all subarrays of odd length\n    for i in range(n):\n        for j in range(i, n, 2):\n            sum_odd += sum(arr[i:j+1])\n    \n    return sum_odd",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8]) == 36",
        "num_ids": 884,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Initialize variables to store even and odd numbers\n    even_num = 0\n    odd_num = 0\n    \n    # Loop through the list to find even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    # Return the product of even and odd numbers\n    return even_num * odd_num",
        "test": "assert mul_even_odd([0, 2, 4, 6, 8]) == 0",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a string in the form of a tuple and converts it into an integer tuple.\n\n    :param test_str: a string in the form of a tuple\n    :return: an integer tuple\n    \"\"\"\n\n    # Split the string into a list of strings using commas as separators\n    str_list = test_str.strip(\"()\").split(\",\")\n\n    # Convert each string in the list to an integer and append it to a new list\n    int_list = [int(x.strip()) for x in str_list]\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    # Return the tuple\n    return int_tuple",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 752,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos",
        "test": "assert right_insertion([1, 2, 3, 4, 5], 6) == 5",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b'.\n    '''\n    pattern = 'ab{3}'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_three('ababbbbbb') == True",
        "num_ids": 308,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "test": "assert new_tuple([1, 2, 3], \"this is a test\") == (1, 2, 3, 't', 'h', 'i','s','', 'i','s','', 'a','', 't', 'e','s', 't')",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every even index contains even numbers of the list, otherwise it returns False.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert even_position([2,4,6,8,10]) == True",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    This function removes tuples from the given tuple.\n    \"\"\"\n    result = []\n    for i in test_tup:\n        if type(i) == tuple:\n            result.extend(remove_nested(i))\n        else:\n            result.append(i)\n    return tuple(result)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_list(input_list):\n    '''\n    This function counts the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count",
        "test": "assert count_list([[],[],[]]) == 3",
        "num_ids": 360,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of an element in a sorted array.\n\n    :param arr: A sorted array of integers\n    :param x: The element whose last position is to be found\n    :return: The last position of the element, or -1 if the element is not present in the array\n    \"\"\"\n\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1]!= x):\n            return mid\n        elif arr[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1",
        "test": "assert last([1,2,3,4,5], 1) == 0",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "test": "assert text_starta_endb(\"abx\") == False",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum",
        "test": "assert return_sum({'a':1, 'b':2, 'c':3}) == 6",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Returns the sum of all odd numbers in the range [l, r], inclusive.\n    \"\"\"\n    return sum(i for i in range(l, r+1, 2))",
        "test": "assert sum_odd(1,10) == 25",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 354,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def left_rotate(n, d):\n    '''\n    This function takes two arguments:\n    - n: the number to be rotated\n    - d: the number of bits to rotate by\n    '''\n\n    # Convert n to binary string and pad with leading zeros to 32 bits\n    binary = bin(n)[2:].zfill(32)\n\n    # Get the first d bits and the remaining bits\n    first_d = binary[:d]\n    remaining = binary[d:]\n\n    # Pad the remaining bits with zeros to get a 32-bit binary string\n    padded = remaining.zfill(32 - len(remaining))\n\n    # Concatenate the rotated bits with the remaining bits\n    rotated = first_d + padded\n\n    # Convert the rotated binary string back to an integer\n    rotated_int = int(rotated, 2)\n\n    return rotated_int",
        "test": "assert left_rotate(0b10101010101010101010101010101010, 1) == 0b10101010101010101010101010101010",
        "num_ids": 1337,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\"",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0",
        "test": "assert test_three_equal(1, 2, 3) == 0",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if i < n-1 and arr[i] > arr[i+1]:\n            break\n    else:\n        return 0\n        \n    pivot = arr[i]\n    left = arr[:i]\n    right = arr[i+1:]\n    \n    left_count = count_rotation(left)\n    right_count = count_rotation(right)\n    \n    return left_count + right_count + n - i - 1",
        "test": "assert count_rotation([4, 5, 1, 2, 3]) == 3",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef is_perfect_square(n):\n    # Check if the given number is a perfect square or not\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n*sqrt_n == n",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function checks whether the product of numbers in a list is even or not.\n    :param arr: A list of numbers.\n    :return: True if the product is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "test": "assert is_product_even([2, 3, 4]) == True",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for l in lists:\n        l_sum = sum(l)\n        if l_sum > max_sum:\n            max_sum = l_sum\n            max_list = l\n    return [max_list]",
        "test": "assert max_sum_list([[1, 2], [3, 4], [5, 6]]) == [[5, 6]]",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run",
        "test": "assert max_run_uppercase(\"ABCD\") == 4",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If there are no odd numbers in the list, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "test": "assert check_K((1, 2, 3), 3) == True",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            result = False\n            break\n    return result",
        "test": "assert check_smaller((1, 2, 3), (3, 4, 5)) == False",
        "num_ids": 606,
        "indeed": true
    }
]