[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return shared_elements",
        "test": "assert similar_elements((1, 2, 3), (2, 3, 4)) == {2, 3}",
        "num_ids": 1288,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_not_prime(n):\n    if n < 2:\n        return False\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n))+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    return True if primes[n] else False",
        "test": "assert is_not_prime(1) == False",
        "num_ids": 1109,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    for num in nums[n:]:\n        if num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n\n    return sorted(heap, reverse=True)",
        "test": "assert heap_queue_largest([1,2,3,4,5],5) == [5,4,3,2,1]",
        "num_ids": 1848,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer x as input and returns True if x is a power of two and False otherwise.\n    '''\n\n    # Check if x is a power of two or not\n    if x == 0:\n        return False\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True",
        "test": "assert is_Power_Of_Two(16) == True",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "test": "assert find_char_long('The quick brown fox jumps over the lazy cat') == ['brown', 'quick', 'jumps', 'over']",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 1173,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    i = 0\n    while str[i:] + str[:i]!= str:\n        i += 1\n    return i",
        "test": "assert find_Rotations(\"abcde\") == 0",
        "num_ids": 1861,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_Occ(s, ch):\n    if ch in s:\n        s = s.replace(ch, '')\n        if ch in s:\n            s = s[:s.index(ch)] + s[s.index(ch) + 1:]\n    return s",
        "test": "assert remove_Occ(\"hello\",\"l\")!= \"heoo\"",
        "num_ids": 1474,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    sorted_matrix = sorted(M, key=lambda x: sum(x))\n    return sorted_matrix",
        "test": "assert sort_matrix([[1,2],[3,4]]) == [[1,2],[3,4]]",
        "num_ids": 2024,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Returns the volume of a triangular prism given its length, breadth, and height.\n    '''\n    return 0.5 * l * b * h",
        "test": "assert find_Volume(1,2,3) == 3",
        "num_ids": 997,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    This function returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    \"\"\"\n    pattern = re.compile(r'[a-z]+_')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore('hello_world') == True",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def str_to_list(string, char_list):\n    '''\n    This function removes all the characters present in the second string from the first string.\n    '''\n    string_list = list(string)\n    char_list = list(char_list)\n    for char in char_list:\n        while char in string_list:\n            string_list.remove(char)\n    return ''.join(string_list)",
        "test": "assert str_to_list(\"abc\", \"bc\") == \"a\"",
        "num_ids": 2178,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary\n    num_dict = {}\n\n    # Iterate through the array and add each element to the dictionary\n    for num in arraynums:\n        if num in num_dict:\n            # If the element already exists in the dictionary, return True\n            return True\n        else:\n            # If the element does not exist in the dictionary, add it to the dictionary\n            num_dict[num] = True\n\n    # If the loop completes without finding any duplicate element, return False\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 1293,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    :param x: The number to check\n    :type x: int\n    :return: True if the number is woodball, False otherwise\n    :rtype: bool\n    \"\"\"\n    # Check if x is divisible by 4 and not divisible by 100\n    if x % 4 == 0 and x % 100!= 0:\n        return True\n    # Check if x is divisible by 400\n    elif x % 400 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(100) == False",
        "num_ids": 1280,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rev(num):\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Reverse the string and convert it back to an integer\n    rev_num = int(num_str[::-1])\n    \n    # Check if the original number is one less than twice the reversed number\n    if num == rev_num + rev_num - num:\n        return True\n    else:\n        return False",
        "test": "assert rev(12345) == False",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed with these digits.\n    \"\"\"\n    max_num = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            num = int(''.join(map(str, arr[i:j])))\n            if num > max_num:\n                max_num = num\n    \n    return max_num",
        "test": "assert find_Max_Num([9,9,9,9,9]) == 99999",
        "num_ids": 1498,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(5, -2) == True",
        "num_ids": 933,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Find the nth octagonal number.\n    \"\"\"\n    count = 1\n    octagonal = 1\n    \n    while count < n:\n        octagonal += 8 * count\n        count += 1\n        \n    return octagonal",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(map(int, s[i:j+1])) == len(s[i:j+1]):\n                count += 1\n    return count",
        "test": "assert count_Substrings(\"1357\") == 1",
        "num_ids": 1572,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)",
        "test": "assert smallest_num([10, 5, 3, 8, 2]) == 2",
        "num_ids": 907,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[j][0] - test_list[i][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([(1, 3), (2, 4), (3, 5)]) == 2",
        "num_ids": 1766,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "test": "assert subject_marks([]) == []",
        "num_ids": 1877,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(x) for x in data_list)\n    else:\n        return data_list",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1343,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0] * (n+1) # initialize the list of Bell numbers\n    bell[0] = 1 # base case: there is only one way to partition 0 elements\n    for i in range(1, n+1):\n        bell[i] = 0 # reset the sum of the previous terms\n        for j in range(i):\n            bell[i] += bell[j] # add the sum of the previous terms to get the current term\n    return bell[n] # return the Bell number for n elements",
        "test": "assert bell_number(0) == 1, \"bell_number(0) should return 1\"",
        "num_ids": 1338,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes in an array A and checks whether the array is monotonic or not.\n    A monotonic array is an array that either increases or decreases, but not both.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            decreasing = False\n        elif A[i] > A[i-1]:\n            increasing = False\n    \n    return increasing or decreasing",
        "test": "assert is_Monotonic([1,2,3,4,4]) == True",
        "num_ids": 1405,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if s == []:\n        return True\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "test": "assert is_sublist([1,2,3], [3,2]) == False, \"is_sublist([1,2,3], [3,2]) should return False\"",
        "num_ids": 1360,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(len(t) for t in Input)) == 1",
        "test": "assert find_equal_tuple([(1,2,3), (4,5,6), (7,8,9)]) == True",
        "num_ids": 1355,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "test": "assert comb_sort([3, 2, 1]) == [1, 2, 3]",
        "num_ids": 1920,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    i = 1\n    while i*i <= n:\n        if n % i == 0 and (i*i!= n or (i-n/i) % 2 == 0):\n            return True\n        i += 1\n    return False",
        "test": "assert dif_Square(25) == True",
        "num_ids": 1502,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    while i < len(colors):\n        if patterns[i] == 'R' and colors[i]!= 'Red':\n            return False\n        elif patterns[i] == 'G' and colors[i]!= 'Green':\n            return False\n        elif patterns[i] == 'B' and colors[i]!= 'Blue':\n            return False\n        elif patterns[i] == 'Y' and colors[i]!= 'Yellow':\n            return False\n        elif patterns[i] == 'W' and colors[i]!= 'White':\n            return False\n        i += 1\n    return True",
        "test": "assert is_samepatterns(['red', 'blue', 'green', 'yellow'], ['red', 'blue', 'green', 'yellow']) == True",
        "num_ids": 1872,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function finds tuples from the given list of tuples which have all elements divisible by K.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1,2,3), (4,5,6), (7,8,9)], 2) == []",
        "num_ids": 1879,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(13) == False",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n\n    Parameters:\n        s (str): The string to check.\n\n    Returns:\n        bool: True if the length of the string is odd, False otherwise.\n    \"\"\"\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False",
        "test": "assert word_len('world') == True",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return tetrahedral_number(n - 1) + 4 * (n - 1)",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 1148,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n\nprint(\"The volume of a sphere with radius 5 is:\", volume_sphere(5))",
        "test": "assert volume_sphere(1) == 4/3 * math.pi",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for i in strr:\n        sum_ascii += ord(i)\n    return chr(sum_ascii % 26 + ord('a'))",
        "test": "assert get_Char('xyz') == 'z', 'Test Case 2 failed'",
        "num_ids": 1280,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return sequence[n-1]",
        "test": "assert sequence(1) == 1",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4*math.pi, \"surface area of sphere with radius 1 should be 4*pi\"",
        "num_ids": 1014,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 1168,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({'a': 1}, {'b': 2}, {'c': 3}) == {'a': 1, 'b': 2, 'c': 3} # Test case 1",
        "num_ids": 2973,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq",
        "test": "assert freq_count([1,2,3,4,5,5,5,6,6,6]) == {1:1, 2:1, 3:1, 4:1, 5:3, 6:3}",
        "num_ids": 1771,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def closest_num(n):\n    '''\n    Returns the closest smaller number than n.\n    '''\n    for i in range(n-1, -1, -1):\n        if i < n:\n            return i\n    return -1",
        "test": "assert closest_num(3) == 2",
        "num_ids": 978,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "test": "assert len_log(['hello', 'world']) == 5",
        "num_ids": 1073,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes two arguments - the string that needs to be searched and the substring to be found.\n    It returns True if the substring is present in the string, else it returns False.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring(\"hello world\", \"l\") == True",
        "num_ids": 957,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check if a given number is undulating or not.\n\n    A number is said to be undulating if the absolute difference between any two adjacent digits is 1.\n\n    Parameters:\n    n (int): An integer number\n\n    Returns:\n    bool: True if n is undulating, False otherwise.\n    \"\"\"\n    n = str(n)\n    for i in range(len(n) - 1):\n        if abs(int(n[i]) - int(n[i + 1]))!= 1:\n            return False\n    return True",
        "test": "assert is_undulating(25) == False",
        "num_ids": 2017,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b",
        "test": "assert power(2,3) == 8",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "test": "assert index_minimum([(1, 2), (4, 5), (7, 1), (9, 1)]) == 7  # should return 7",
        "num_ids": 1323,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "test": "assert Find_Min_Length([[], [1,2,3], [4,5,6]]) == 0",
        "num_ids": 1530,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def divisor(n):\n    '''\n    This function finds the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(12) == 6",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def flatten(lst):\n    \"\"\"\n    Returns a flattened version of the input list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten(item))\n        else:\n            result.append(item)\n    return result\n\n\ndef frequency_lists(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in a flattened list of lists.\n    \"\"\"\n    flat_lst = flatten(lst)\n    freq = {}\n    for item in flat_lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq",
        "test": "assert frequency_lists([[1,2,3],[2,3,4],[3,4,5]]) == {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}",
        "num_ids": 2469,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
        "test": "assert multiply_num([1, 2, 3]) == 2.0",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def decimal_to_binary(n): \n    '''\n    This function takes a decimal number n as input and returns its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert n to binary using the built-in bin() function\n    binary = bin(n)[2:]\n    return binary",
        "test": "assert decimal_to_binary(1) == \"1\"",
        "num_ids": 969,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def next_smallest_palindrome(num):\n    # Convert the number to a string to check if it is already a palindrome\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        # If the number is already a palindrome, add 1 and repeat the process until a palindrome is found\n        while True:\n            num += 1\n            num_str = str(num)\n            if num_str == num_str[::-1]:\n                return num\n    else:\n        # If the number is not a palindrome, find the largest odd factor of the number and multiply it by the smallest odd factor larger than it\n        # to find the next smallest palindrome\n        # First, find the largest odd factor of the number\n        largest_odd_factor = None\n        for i in range(num//2, 1, -1):\n            if num % i == 0:\n                largest_odd_factor = i\n                break\n        if largest_odd_factor is None:\n            # If the number is a prime number, return the next odd number\n            return num + 2\n        # Find the smallest odd factor larger than the largest odd factor\n        smallest_odd_factor = largest_odd_factor + 2\n        # Multiply the two factors to find the next smallest palindrome\n        return smallest_odd_factor * largest_odd_factor",
        "test": "assert next_smallest_palindrome(1) == 2",
        "num_ids": 3230,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return \"Invalid input\"\n    else:\n        return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 1251,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def snake_to_camel(word):\n    words = word.split(\"_\")\n    return words[0] + \"\".join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel('snake_Case') =='snakeCase'",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 1\n    else:\n        return n * m",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "test": "assert sort_sublists([[\"apple\", \"banana\"], [\"cherry\", \"date\", \"elderberry\"]]) == [[\"apple\", \"banana\"], [\"cherry\", \"date\", \"elderberry\"]]",
        "num_ids": 1787,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "test": "assert count([True, False, True, True, False]) == 3",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup",
        "test": "assert add_lists([1,2,3],(4,5,6)) == (1,2,3,4,5,6)<|im_sep|>",
        "num_ids": 1142,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heap = []\n    heapq.heapify(heap)\n    \n    for lst in [num1, num2, num3]:\n        for num in lst:\n            heapq.heappush(heap, num)\n            \n    while heap:\n        merged_list.append(heapq.heappop(heap))\n        \n    return merged_list",
        "test": "assert merge_sorted_list([], [], []) == []",
        "num_ids": 3114,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Given a binary string `s` and a number `n`, returns the number of numbers with an odd value when rotating the string `n` times.\n    \"\"\"\n    # Convert the binary string to a list of digits\n    digits = [int(d) for d in s]\n    \n    # Rotate the digits `n` times\n    rotated = digits[-n:] + digits[:-n]\n    \n    # Count the number of odd digits\n    count = sum(d % 2 == 1 for d in rotated)\n    \n    return count",
        "test": "assert odd_Equivalent(\"10101\", 1) == 3",
        "num_ids": 1791,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Find the common elements in given nested lists.\n    '''\n    # Create a set of the elements in the first list\n    common = set(nestedlist[0])\n    # Iterate over the remaining lists and remove elements that are not common\n    for lst in nestedlist[1:]:\n        common &= set(lst)\n    # Return the common elements as a list\n    return list(common)",
        "test": "assert common_in_nested_lists([['apple', 'banana', 'orange'], ['grape', 'peach']]) == []",
        "num_ids": 1668,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 696,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "test": "assert tuple_to_int((1,2)) == 12",
        "num_ids": 944,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].replace('.','',1).isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list",
        "test": "assert list_to_float([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]",
        "num_ids": 2716,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_to_list(string):\n    '''\n    This function converts a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list('hello world') == ['hello', 'world']",
        "num_ids": 820,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def search(arr):\n    # Initialize the dictionary to store the count of each element\n    count = {}\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the element is already in the dictionary, increment its count\n        if arr[i] in count:\n            count[arr[i]] += 1\n        # If the element is not in the dictionary, add it and set its count to 1\n        else:\n            count[arr[i]] = 1\n    \n    # Iterate through the dictionary to find the element that appears only once\n    for key in count:\n        if count[key] == 1:\n            return key\n    \n    # If no element appears only once, return None\n    return None",
        "test": "assert search([1, 1, 1, 1, 1, 1]) == None",
        "num_ids": 2104,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n            product = abs(list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(1,2),(3,4),(5,6)]) == 30",
        "num_ids": 1855,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    # Create a list of all numbers from 1 to the specified limit\n    numbers = list(range(1, limit+1))\n    # Loop through all numbers in the list\n    for i in numbers:\n        # Check if i is amicable\n        j = sum(divisors(i))\n        if j < limit and j!= i and i == sum(divisors(j)):\n            # Add i and j to the amicable sum\n            amicable_sum += i + j\n    return amicable_sum\n\ndef divisors(n):\n    \"\"\"\n    Return a list of all divisors of a number.\n    \"\"\"\n    divs = []\n    # Loop through all numbers from 1 to n/2\n    for i in range(1, n//2+1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            divs.append(i)\n    return divs",
        "test": "assert amicable_numbers_sum(10000) == 31626",
        "num_ids": 2355,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle",
        "test": "assert angle_complex(1,0) == 0",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        elif string[i] == '1':\n            current_length -= 1\n            if -current_length > max_length:\n                max_length = -current_length\n    return max_length",
        "test": "assert find_length('01010101') == 1",
        "num_ids": 1875,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of common divisors of the two numbers.\n    \"\"\"\n    # Create an empty list to store the common divisors\n    common_divisors = []\n    \n    # Find the greatest common divisor using Euclid's algorithm\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    \n    # Find the sum of common divisors\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n            \n    # Calculate the sum of common divisors\n    sum_divisors = sum(common_divisors)\n    \n    # Return the sum of common divisors\n    return sum_divisors",
        "test": "assert sum(10,15) == 10",
        "num_ids": 1764,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    This function takes two integers as input and returns their product.\n    \"\"\"\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "test": "assert long_words(3, \"cat dog elephant lion\") == [\"elephant\", \"lion\"]",
        "num_ids": 1410,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in my_matrix]\n    \n    # Calculate the sum of each column\n    col_sums = [sum(row[i] for row in my_matrix) for i in range(len(my_matrix[0]))]\n    \n    # Check if the sum of each row is the same\n    if row_sums!= col_sums:\n        return False\n    \n    # Check if the sum of the main diagonal is equal to the sum of the secondary diagonal\n    main_diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    secondary_diagonal_sum = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    if main_diagonal_sum!= secondary_diagonal_sum:\n        return False\n    \n    # If all checks passed, the matrix is a magic square\n    return True",
        "test": "assert magic_square_test([[4, 9, 2], [3, 5, 7], [1, 6, 8]]) == False # example 2",
        "num_ids": 3143,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_count = 0\n    for num, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    return max_num",
        "test": "assert max_occurrences([1, 2, 3, 2, 1]) == 1",
        "num_ids": 1613,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n    return \"\".join(s)",
        "test": "assert reverse_vowels('leetcode') == 'leotcede'",
        "num_ids": 1852,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string(\"hello\") == \"hello\"",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum",
        "test": "assert sum_negativenum([0, 0, 0, 0, 0]) == 0",
        "num_ids": 1155,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * ((2*n) - 1)\n    return hex_num",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 838,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count = nums.count(0)\n    total = len(nums)\n    ratio = count / total\n    return ratio",
        "test": "assert zero_count(array('i', [1,2,3,4,5,6])) == 0",
        "num_ids": 1619,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    powers = []\n    while n > 0:\n        if n % 2 == 1:\n            powers.append(2)\n        n = n // 2\n    \n    # check if all elements in the list are powers of 2\n    return all(power == 2 for power in powers)",
        "test": "assert is_Sum_Of_Powers_Of_Two(2) == True",
        "num_ids": 2154,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r",
        "test": "assert circle_circumference(0) == 0                     # circumference of a line",
        "num_ids": 1996,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_set = set()\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_set.update(extract_singly(item))\n        else:\n            flattened_set.add(item)\n    return flattened_set",
        "test": "assert extract_singly([[1, 2], [3], [4, 5, 6]]) == {1, 2, 3, 4, 5, 6}",
        "num_ids": 1579,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pancake_sort(nums):\n    '''\n    Sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in the unsorted portion of the list\n        max_index = nums.index(max(nums[:i]))\n        # Move the maximum element to the end of the list\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        # Move the maximum element to its correct position\n        nums = nums[:i][::-1] + nums[i:]\n    return nums",
        "test": "assert pancake_sort([1]) == [1]",
        "num_ids": 2562,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[2,3,4],[4,5,6]) == 0",
        "num_ids": 1450,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count",
        "test": "assert find_lists(()) == 0 # test with empty tuple",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1548,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if x*a + y*b == n:\n                return (x, y)\n    return None",
        "test": "assert find_solution(4, 5, 20) == (0, 4)",
        "num_ids": 1471,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 that are present in list2.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "test": "assert remove_elements([1,2,3], [2]) == [1,3]",
        "num_ids": 1319,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_series(n):\n    \"\"\"\n    Returns the sum of the series (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return sum([i for i in range(n//2+1)])",
        "test": "assert sum_series(0) == 0",
        "num_ids": 1059,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n\nprint(area_polygon(5, 4))",
        "test": "assert area_polygon(3, 4) == 6.0",
        "num_ids": 1218,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    div_sum = sum(divisors)\n    if div_sum % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert div_sum(1) == False",
        "num_ids": 1552,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # converting the string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n    \n    # initializing the character count list with zeros\n    char_count_list = [0] * 26\n    \n    # iterating over each character in the string\n    for char in str1:\n        # checking if the character is an alphabet\n        if ord(char) >= 97 and ord(char) <= 122:\n            # incrementing the count for the corresponding alphabet position\n            char_count_list[ord(char) - 97] += 1\n    \n    # counting the number of characters that occur at the same position as the English alphabet\n    count = 0\n    for i in range(26):\n        if char_count_list[i] > 0:\n            count += 1\n    \n    # returning the count\n    return count",
        "test": "assert count_char_position(\"The quick brown fox jumps over the lazy dog\") == 26",
        "num_ids": 3672,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([2, 3, 4, 6]) == 0",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the smallest power of 2 greater than or equal to 'n'.\n    \"\"\"\n    power_of_2 = 1\n    \n    while power_of_2 < n:\n        power_of_2 *= 2\n        \n    return power_of_2",
        "test": "assert next_power_of_2(15) == 16",
        "num_ids": 962,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def frequency(a, x):\n    '''\n    This function takes in two parameters:\n    a: a list of numbers\n    x: a number to be searched for in the list\n    It returns the frequency of the number x in the list a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9,10,10], 10) == 2",
        "num_ids": 1169,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9",
        "num_ids": 1406,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "test": "assert perimeter_pentagon(3) == 15",
        "num_ids": 912,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "test": "assert count_occurance('hello world') == 0",
        "num_ids": 968,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False",
        "test": "assert check_type((1, 2, 3, 4, 5)) == True",
        "num_ids": 1162,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_majority(arr, n, x):\n    if x > arr[n-1]:\n        return False\n\n    count = 1\n    i = 0\n    while i < n and arr[i] <= x:\n        if arr[i] == x:\n            count += 1\n        i += 1\n\n    return count > n/2",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 3) == False",
        "num_ids": 1841,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 891,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])",
        "test": "assert odd_values_string(\"hello world\") == \"hlowrd\"",
        "num_ids": 940,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(3,5,2) == 2",
        "num_ids": 927,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    if n & (1<<l)!= 0 or n & (1<<r)!= 0:\n        return False\n    return all_Bits_Set_In_The_Given_Range(n^(1<<l),l+1,r)\n    \n",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b101010, 1, 5) == False",
        "num_ids": 2033,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = [x for x in arr if x < 0]\n    positives = [x for x in arr if x >= 0]\n    negatives.sort()\n    positives.sort()\n    result = negatives + positives\n    return result[:n]",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 2419,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces blank spaces in a string with the specified character.\n    '''\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank('hello world', '_') == 'hello_world'",
        "num_ids": 843,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes a list and an integer n as input and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([1,2,3,4,5,6,7,8,9], 3) == [9, 8, 7]",
        "num_ids": 1870,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculates the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): the radius of the cylinder\n    h (float): the height of the cylinder\n\n    Returns:\n    float: the lateral surface area of the cylinder\n    \"\"\"\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area",
        "test": "assert lateralsuface_cylinder(2,3)==153.93804002589985, 'Test case 2 failed'",
        "num_ids": 1483,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def volume_cube(l):\n    '''\n    This function takes a side length as input and returns the volume of a cube with that side length.\n    '''\n    return l**3",
        "test": "assert volume_cube(1) == 1",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number to 1.\n\n    :param n: An integer.\n    :return: The given number with all even bits set to 1.\n    \"\"\"\n    # Set all even bits to 1\n    n |= (n >> 1) & 0x55555555\n    \n    # Clear all odd bits\n    n &= ~(n >> 1) & 0xAAAAAAAA\n    \n    return n",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 1426,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "test": "assert check_occurences([(1,2),(1,2),(3,4),(3,4),(5,6)]) == {(1,2):2, (3,4):2, (5,6):1}",
        "num_ids": 1809,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"aaa\") == 6 # aaa, aaa, aaa, aa, aa, a",
        "num_ids": 918,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    \n    prev_seq_count = get_total_number_of_sequences(m, n-1)\n    curr_seq_count = prev_seq_count * (m - prev_seq_count + 1) // 2\n    \n    return curr_seq_count",
        "test": "assert get_total_number_of_sequences(4,2) == 2",
        "num_ids": 2463,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1",
        "test": "assert replace_list([1,2,3],[4,5]) == [1,2,4,5]",
        "num_ids": 1108,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "test": "assert count_charac('hello') == 5",
        "num_ids": 743,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Find the square root of N\n    root = math.sqrt(N)\n    # Add 0.5 to the square root to get the next perfect square\n    next_square = math.ceil(root + 0.5) ** 2\n    return next_square",
        "test": "assert next_Perfect_Square(12) == 16",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for gap in range(1, n):\n        for i in range(n - gap):\n            j = i + gap\n            dp[i][j] = max(arr[i] + dp[i+1][j], arr[j] + dp[i][j-1])\n    return dp[0][n-1]",
        "test": "assert max_sum([2, 4, 6, 8, 10]) == 30",
        "num_ids": 2567,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00001 # Define epsilon value\n    guess = number / 2 # Define initial guess as half of the number\n    \n    while abs(guess**2 - number) >= epsilon: # Repeat until the guess is close enough to the actual square root\n        guess = (guess + number / guess) / 2 # Update guess using the babylonian method\n        \n    return guess # Return the final guess as the square root of the number",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 1556,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for k in range(2, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if k == 2:\n                dp[i][j] = 2 if str[i] == str[j] else 1\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n                if str[i] == str[j]:\n                    dp[i][j] = max(dp[i][j], dp[i+1][j-1] + 2)\n    return dp[0][n-1]",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 3073,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function finds the intersection of two arrays.\n    '''\n    # Convert the arrays to sets to find their intersection\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the sets\n    intersection_set = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection_set)",
        "test": "assert intersection_array([1,2,3,4],[2,3,4,5]) == [2, 3, 4]",
        "num_ids": 1607,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes a tuple and an element as input, and returns the count of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count",
        "test": "assert count_X((1,2,3,4), 1) == 1",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert the element before each element in the list and return the resulting list.\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        new_lst.append(element)\n        new_lst.append(i)\n    return new_lst",
        "test": "assert insert_element([1,2,3,4,5],0) == [0,1,0,2,0,3,0,4,0,5]",
        "num_ids": 1319,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result",
        "test": "assert convert((-2+3j)) == (5.0, 2.2143951023931957)",
        "num_ids": 1455,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1,2,3,4,5,6]) == 6",
        "num_ids": 1039,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(combo) for combo in combinations_with_replacement(l, n)]",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 2509,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4 # should pass",
        "num_ids": 1603,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def swap_numbers(a,b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a",
        "test": "assert swap_numbers(1,2) == (2,1) # Test case 1",
        "num_ids": 805,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = test_tup1\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > max_tup[i]:\n            max_tup = test_tup2\n    return max_tup",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 1620,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        p = 3\n        k = 2\n        i = 4\n        while i <= n:\n            p = 6*p - k*(k-1)\n            k += 1\n            i += 1\n        return p",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 2145,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "test": "assert division_elements((1,2,3),(4,5,6)) == (0.25, 0.4, 0.5)",
        "num_ids": 1673,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 1802,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # dog's year is 7 years per human year\n    dog_years = h_age * 7\n    return dog_years",
        "test": "assert dog_age(12) == 30",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1,2,3,4,5,6,7,8,9,10], 3) == [[1,2,3],[4,5,6],[7,8,9],[10]]",
        "num_ids": 1794,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n\nprint(lateralsurface_cube(5))",
        "test": "assert lateralsurface_cube(3) == 54",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through first n odd numbers and add their squares to sum\n    for i in range(1, n*2, 2):\n        sum += i**2\n        \n    return sum",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1145,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 2\n        count += 1\n    return num",
        "test": "assert find_star_num(1) == 1 ",
        "num_ids": 1047,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of even numbers at even positions.\n\n    :param arr: A list of integers.\n    :return: The sum of even numbers at even positions.\n    \"\"\"\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
        "test": "assert sum_even_and_even_index([1, 2, 3, 4, 5]) == 0 # [2, 4] = 0",
        "num_ids": 1624,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 1359,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result",
        "test": "assert rear_extract([(1,2), (3,4), (5,6)]) == [2, 4, 6]",
        "num_ids": 1294,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "test": "assert substract_elements((1, 2, 3), (2, 1, 4)) == (-1, 1, -1)",
        "num_ids": 1664,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        sum = 0\n        for i in range(0, n, 2):\n            binomial_coef = math.comb(n, i)\n            sum += binomial_coef\n        return sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1357,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume",
        "test": "assert volume_cylinder(0,5) == 0, 'volume_cylinder test failed'",
        "num_ids": 1263,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({1:2, 3:4, 5:6}, 4) == {3:4, 5:6}",
        "num_ids": 1490,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if i!= test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count",
        "test": "assert count_first_elements((1, 1, 1, 1)) == 0, \"Incorrect count for first elements in (1, 1, 1, 1)\"",
        "num_ids": 1205,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def is_num_decagonal(n): \n    \"\"\"\n    This function finds the nth decagonal number.\n    \"\"\"\n    num = n * (3 * n - 1) // 2\n    return num",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 1608,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 985,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3]",
        "num_ids": 1298,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def validate(n):\n    # convert the integer into a string and store in a list\n    num_str = [int(d) for d in str(n)]\n    \n    # check the frequency of each digit\n    for digit in range(10):\n        count = num_str.count(digit)\n        if count > digit:\n            return False\n    \n    return True",
        "test": "assert validate(12345) == True",
        "num_ids": 1263,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    :param list: A list of elements\n    :param element: An element to check against\n    :return: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    if len(set(list)) == 1 and list[0] == element:\n        return True\n    else:\n        return False",
        "test": "assert check_element([1,1,1,1,1], 1) == True",
        "num_ids": 1077,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(bb{2}|\\bb{3}\\b)'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_two_three('abab') == False",
        "num_ids": 873,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(k): \n        curr_sum = 0\n        for j in range(n): \n            curr_sum += a[j]\n            if curr_sum > max_sum: \n                max_sum = curr_sum\n\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 1) == 15",
        "num_ids": 2788,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through first n even natural numbers\n    for i in range(0, 2*n, 2):\n        # add square of each even natural number to sum\n        sum += i**2\n    \n    return sum",
        "test": "assert square_Sum(2) == 4",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function finds the list of maximum length in a list of lists.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    \n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_list",
        "test": "assert max_length([[], [1], [1, 2], [1, 2, 3], [1, 2, 3, 4]]) == [1, 2, 3, 4]",
        "num_ids": 1525,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def count_no_of_ways(n, k):\n    # Base cases\n    if n <= 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    # Create a memoization table\n    memo = [[0] * k for _ in range(n)]\n\n    # Fill the memoization table using dynamic programming\n    for i in range(n):\n        for j in range(k):\n            if i == 0:\n                memo[i][j] = j + 1\n            elif i == 1:\n                memo[i][j] = k - j + 1\n            else:\n                memo[i][j] = sum(memo[i-2][max(j-1, 0):j+1])\n\n    # Return the number of ways to paint the fence\n    return memo[n-1][k-1]",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 2575,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m",
        "test": "assert find(10,2) == 5",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #Calculate the square of the hypotenuse\n    c = math.pow(w, 2) + math.pow(h, 2)\n    #Calculate the square of the other side of the right angled triangle\n    a = math.pow(c, 0.5)\n    #Calculate the third side\n    b = c / a\n    #Round the result to the nearest integer and return the third side\n    return round(b)",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum_divisor = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_divisor += i\n    return sum_divisor",
        "test": "assert sum_div(12) == 28 # 1 + 2 + 3 + 4 + 6 + 12 = 28",
        "num_ids": 1033,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    An inversion is defined as a pair of elements (a[i], a[j]) such that i < j and a[i] > a[j].\n    '''\n    n = len(arr)\n    inversion_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inversion_count += 1\n    return inversion_count",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0",
        "num_ids": 2207,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert flatten_list([1, [2, [3, 4], 5], 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1518,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each possible length of the sequence\n    max_agg = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for i in range(len(stdata)):\n        # Iterate over the possible lengths of the sequence\n        for j in range(i+1, len(stdata)+1):\n            # Calculate the sum of the tuples from i to j-1\n            agg = sum(t[0] for t in stdata[i:j])\n\n            # Update the maximum aggregate for the current length of the sequence\n            max_agg[j] = max(max_agg[j], agg)\n\n    # Return the maximum aggregate for the longest sequence\n    return max(max_agg.values())",
        "test": "assert max_aggregate([(1,1),(2,2),(3,3),(4,4)]) == 10",
        "num_ids": 2152,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(n)\n        first_n_bits = int(binary_str, 2)\n        last_n_bits = int(binary_str[::-1], 2)\n        if first_n_bits == last_n_bits:\n            count += 1\n    return count",
        "test": "assert count_binary_seq(1) == 2 # 00 and 01",
        "num_ids": 1866,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    \n    def recursive_depth(d, depth):\n        nonlocal max_depth\n        if isinstance(d, dict):\n            depth += 1\n            if depth > max_depth:\n                max_depth = depth\n            for value in d.values():\n                recursive_depth(value, depth)\n    \n    recursive_depth(d, 0)\n    return max_depth",
        "test": "assert dict_depth({'a': 1}), 1",
        "num_ids": 1272,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #calculate the length of the array\n    n = len(arr)\n    #calculate the number of times the array is rotated\n    rotations = rotations % n\n    \n    #rotate the array\n    arr = arr[rotations:]+arr[:rotations]\n    #calculate the index of the element in the rotated array\n    index = (index + rotations) % n\n    \n    return arr[index]",
        "test": "assert find_Element([1,2,3,4,5],(0,4),0,2) == 3",
        "num_ids": 1943,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = [w.lower() for w in words] # convert all words to lowercase\n    pattern = re.compile('^p.*') # match any word starting with 'p'\n    matches = [w for w in words if pattern.match(w)] # filter words that match pattern\n    if len(matches) < 2: # if there are not at least two matches, return empty list\n        return []\n    else:\n        return matches[:2] # return the first two matches",
        "test": "assert start_withp(['pear', 'pineapple', 'apple', 'peach', 'orange']) == ['pear', 'pineapple']",
        "num_ids": 1554,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    dp[0] = a[0]\n    \n    for i in range(1, n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + a[i]:\n                dp[i] = dp[j] + a[i]\n    \n    max_sum = 0\n    for i in range(index):\n        if a[i] < a[index] and dp[i] > max_sum:\n            max_sum = dp[i]\n    \n    if k > index:\n        max_sum += a[k]\n    \n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 5, 7) == 23",
        "num_ids": 3198,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # deep copy the input tuple\n    tupl = deepcopy(tuplex)\n    # slice the tuple and return\n    return tupl[m:n]",
        "test": "assert colon_tuplex((1, 2, 3, 4, 5), 0, 5) == (1, 2, 3, 4, 5)",
        "num_ids": 1572,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize an empty list to store the products\n    products = []\n    \n    # Loop through each combination of factors from the two lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Multiply the selected factors and append to the products list\n            products.append(nums1[i] * nums2[j])\n    \n    # Sort the products in descending order and return the top N products\n    return sorted(products, reverse=True)[:N]",
        "test": "assert large_product([10, 20, 30, 40, 50], [60, 70, 80, 90, 100], 2) == [(21000, 20), (1512000, 40)]",
        "num_ids": 2574,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(3, 7) == 7",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a given number.\n    \"\"\"\n    return n & -n",
        "test": "assert set_left_most_unset_bit(0b00000001) == 0b00000001",
        "num_ids": 1326,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Calculate the volume of a cone with base radius r and height h.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(2,3)==math.pi*2*2*3/3",
        "num_ids": 1275,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize the variable to store the highest power of 2 less than or equal to n\n    highest_power_of_2 = 0\n    \n    # Loop through all the numbers between 1 and n (inclusive)\n    for i in range(1, n+1):\n        # Check if i is a power of 2\n        if i & (i-1) == 0:\n            # If it is, check if it is greater than the current highest power of 2\n            if i > highest_power_of_2:\n                # If it is, update the highest power of 2\n                highest_power_of_2 = i\n    \n    return highest_power_of_2",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 1128,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 1064,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    This function applies a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "test": "assert add_string([], \"x is a fruit\") == []",
        "num_ids": 1283,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "test": "assert convert_list_dictionary([1,2,3], ['a', 'b', 'c'], [True, False, True]) == {1: {'a': True}, 2: {'b': False}, 3: {'c': True}}",
        "num_ids": 2427,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    else:\n        return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1811,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "test": "assert max_length_list([[]]) == []",
        "num_ids": 1520,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "test": "assert check_distinct((1, 2, 3, 4)) == True",
        "num_ids": 934,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_non_repeating_character(str1):\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    return None  # no non-repeating character found",
        "test": "assert first_non_repeating_character('hello world') == 'h'",
        "num_ids": 1555,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_char(\"aba\") == True",
        "num_ids": 957,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function finds the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the median\n    if len(sorted_numbers) % 2 == 0:\n        # If the length of the sorted list is even, take the average of the two middle numbers\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1])/2\n    else:\n        # If the length of the sorted list is odd, take the middle number\n        median = sorted_numbers[len(sorted_numbers)//2]\n\n    return median",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 1491,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit\n            num //= 10\n        total_sum += sum\n    return total_sum",
        "test": "assert sum_of_digits([9, 9, 9, 9]) == 36",
        "num_ids": 1612,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "test": "assert bitwise_xor((1,2,3), (4,5,6)) == (5,7,5)",
        "num_ids": 1485,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)",
        "test": "assert extract_freq([('a', 1), ('b', 2), ('c', 3), ('d', 1)]) == 4",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    result = []\n\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n\n    return tuple(result)",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))",
        "num_ids": 2018,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def minimum(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2,3) == 2",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function takes two arguments:\n    tuplex: The tuple in which we want to check for the element.\n    tuple1: The element whose existence we want to check.\n    \n    The function returns True if the element exists within the tuple, and False otherwise.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex((1,2,3,4,5),(6,7,8)) == False",
        "num_ids": 998,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def find_Parity(x): \n    \"\"\"\n    This function takes a number as input and returns True if the parity of the number is odd, else False.\n    \"\"\"\n    if x % 2!= 0: # if the remainder of the number divided by 2 is not equal to 0, it's odd\n        return True\n    else:\n        return False",
        "test": "assert find_Parity(3) == True",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def rearrange_bigger(n):\n    '''\n    This function takes a number as input and returns the next bigger number by rearranging the digits of the input number.\n    '''\n    \n    # Convert the input number into a list of digits\n    digits = list(str(n))\n    \n    # Reverse the list of digits to start comparing from the least significant digit\n    digits.reverse()\n    \n    # Initialize variables to keep track of the indices of the digits to be swapped\n    i = 0\n    j = len(digits) - 1\n    \n    # Initialize a flag variable to keep track of whether a swap is made or not\n    swap_made = False\n    \n    # Loop through the list of digits and find the indices of the digits to be swapped\n    while i < j:\n        if digits[i] < digits[j]:\n            i += 1\n        else:\n            j -= 1\n            swap_made = True\n    \n    # If no swap is made, the input number is the largest possible number, so return None\n    if not swap_made:\n        return None\n    \n    # Swap the digits at the indices i and j\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the list of digits back to its original order and convert it back to an integer\n    return int(\"\".join(digits))",
        "test": "assert rearrange_bigger(12) == 21",
        "num_ids": 2889,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            heapq.heappush(heap, pair)\n\n    for i in range(k):\n        pairs.append(heapq.heappop(heap))\n\n    return pairs",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)]",
        "num_ids": 1881,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0] * list1[j][1]) < (list1[i][1] * list1[j][0]):\n                product = list1[i][0] * list1[j][1]\n            else:\n                product = list1[i][1] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (-5, -6), (-7, -8), (-9, -10)]) == (-10, -5)",
        "num_ids": 1921,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for item in listval:\n        if type(item) == int:\n            if item < minimum:\n                minimum = item\n        elif type(item) == float:\n            if item < minimum:\n                minimum = item\n        elif type(item) == str:\n            if len(item) < len(str(minimum)):\n                minimum = item\n    return minimum",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1235,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word",
        "test": "assert snake_to_camel(\"snake_case_string\") == \"snakeCaseString\"",
        "num_ids": 934,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def remove_odd(l):\n    '''\n    This function removes odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i%2 == 0:\n            new_list.append(i)\n    return new_list",
        "test": "assert remove_odd([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 984,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n\n    Parameters:\n    lst (list): The list of tuples to extract from.\n    n (int): The index of the element to extract.\n\n    Returns:\n    The nth element from the list of tuples.\n    \"\"\"\n    return lst[n-1][1]",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == 2",
        "num_ids": 1197,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def overlapping(list1, list2):\n    '''\n    Check if any value in a sequence exists in another sequence.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3],[2,3,4]) == True",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = -float('inf')\n    min1 = min2 = float('inf')\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n        if i < min1:\n            min2 = min1\n            min1 = i\n        elif i < min2:\n            min2 = i\n    return max(max1*max2, min1*min2)",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20",
        "num_ids": 2092,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns the first element of the tuples\n    that occurs most frequently.\n    '''\n    # initialize a dictionary to store the frequency of each first element\n    freq = {}\n\n    # loop through each tuple in the input list\n    for t in Input:\n        # if the first element of the tuple is already in the dictionary, increment its frequency\n        if t[0] in freq:\n            freq[t[0]] += 1\n        # if the first element of the tuple is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[t[0]] = 1\n\n    # initialize variables to keep track of the maximum frequency and the corresponding first element\n    max_freq = 0\n    max_element = None\n\n    # loop through the dictionary to find the first element with the maximum frequency\n    for element, frequency in freq.items():\n        if frequency > max_freq:\n            max_freq = frequency\n            max_element = element\n\n    return max_element",
        "test": "assert group_tuples([(1,2,3),(1,2,3),(1,2,3)]) == 1",
        "num_ids": 1745,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem",
        "test": "assert Find_Max(['apple', 'banana', 'orange', 'kiwi']) == 'banana'",
        "num_ids": 1198,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))",
        "test": "assert round_and_sum([-1.1, -2.5, -3.3, -4.6]) == -12.2",
        "num_ids": 1493,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize variables\n    sum = 0\n    count = 0\n\n    # Loop through first n even natural numbers and add their cubes to sum\n    while count < n:\n        sum += count ** 3\n        count += 2\n\n    # Return the sum of cubes\n    return sum",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]",
        "test": "assert concatenate_tuple((1, 2, 3)) == \"1,2,3\"",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum / n\n    return avg",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1163,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0]) - 1\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[rear_index],)\n    return rear_tuple",
        "test": "assert extract_rear(('cat', 'dog', 'elephant')) == ('t', 'g', 'e')",
        "num_ids": 1230,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            count += count_element_in_list(list1[i], x)\n        elif list1[i] == x:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 'x') == 0",
        "num_ids": 1374,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "test": "assert filter_oddnumbers([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 1061,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None",
        "test": "assert change_date_format('2021-03-23') == '23-03-2021'",
        "num_ids": 1619,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "test": "assert shell_sort([]) == []",
        "num_ids": 2109,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "test": "assert and_tuples((1, 0, 1), (1, 1, 0)) == (1, 0, 0)",
        "num_ids": 1294,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -b / (2 * a)\n    return directrix",
        "test": "assert parabola_directrix(1, -2, 1) == 1",
        "num_ids": 1921,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert common_element([1,2,3], [2,3,4]) == True",
        "num_ids": 1080,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median",
        "test": "assert median_trapezium(1,2,3)==1.5 # 0.5*(base1+base2)",
        "num_ids": 1179,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_greater(arr, number):\n    '''\n    This function checks whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one('aab') == True",
        "num_ids": 783,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    if n < 0:\n        n = abs(n)\n    last_digit = n % 10\n    return last_digit",
        "test": "assert last_Digit(1234) == 4",
        "num_ids": 708,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([1,2,-3,4,-5,6]) == [-3,-5]",
        "num_ids": 1168,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str",
        "test": "assert remove_odd(\"hello\") == \"hll\"",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]) or \\\n               (test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]):\n                count += 1\n    return count",
        "test": "assert count_bidirectional([]) == 0, \"count_bidirectional([]) should return 0\"",
        "num_ids": 1793,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 0\n    for num in L:\n        single_num = single_num * 10 + num\n    return single_num",
        "test": "assert multiple_to_single([1,2,3,4,5]) == 12345",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input and returns the position and value of the first adverb in the sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        position = match.start()\n        return (position, adverb)\n    else:\n        return None",
        "test": "assert find_adverb_position(\"The quick brown fox jumps over the lazy dog\") == None",
        "num_ids": 1881,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a cube as input and returns the surface area of the cube.\n    '''\n    surfacearea = 6 * l**2\n    return surfacearea",
        "test": "assert surfacearea_cube(3) == 54",
        "num_ids": 761,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "test": "assert positive_count(array('i', [1, 2, 3, -4, -5, 6])) == 4/6",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    '''\n    largest_num = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num",
        "test": "assert largest_neg([1, -2, 3, -4, 5]) == -2",
        "num_ids": 1230,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tup[K:])\n    return trimmed_list",
        "test": "assert trim_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)], 0) == [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]",
        "num_ids": 1895,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == (4,10,18)",
        "num_ids": 1605,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as inputs and returns a dictionary containing the count of each element in the list in the tuple.\n    '''\n    count_dict = {}\n    for elem in lst:\n        count_dict[elem] = tup.count(elem)\n    return count_dict",
        "test": "assert count_Occurrence(('a', 'b', 'c', 'd', 'e'), ['b', 'c', 'e']) == {'b': 1, 'c': 1, 'e': 1} ",
        "num_ids": 2005,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 1192,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def extract_string(lst, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n\n    Parameters:\n        lst: list of string values\n        size: desired size of strings to extract\n\n    Returns:\n        List of strings of specified size extracted from the input list.\n    \"\"\"\n    result = []\n    for s in lst:\n        if len(s) >= size:\n            result.append(s[:size])\n    return result",
        "test": "assert extract_string([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"], 3) == [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"]",
        "num_ids": 1460,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all white spaces from the string using regular expression\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2",
        "test": "assert remove_whitespaces(\"Hello world\") == \"Helloworld\"",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Returns the loss amount on a sale if the given amount has loss, otherwise returns 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(1000, 1000) == 0",
        "num_ids": 1123,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and finds the sum of all the even factors of the number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum",
        "test": "assert sumofFactors(1) == 0",
        "num_ids": 1486,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert text_match_wordz('The quick brown fox jumps over the laziest dog.') == ['laziest']",
        "num_ids": 1087,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(4) == True, \"April should contain 30 days\"",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 1153,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])  # initialize the minimum length as the length of the first sublist\n    min_sublist = lst[0]  # initialize the minimum sublist as the first sublist\n    \n    for sublist in lst:  # iterate through all sublists\n        if len(sublist) < min_len:  # if the length of the current sublist is less than the minimum length\n            min_len = len(sublist)  # update the minimum length\n            min_sublist = sublist  # update the minimum sublist\n            \n    return min_sublist",
        "test": "assert Find_Min([[1, 2, 3], [4, 5], [6, 7, 8, 9, 10]]) == [4, 5]",
        "num_ids": 1640,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes two arguments, length and breadth, and returns the area of the rectangle.\n    '''\n    area = length * breadth\n    return area",
        "test": "assert rectangle_area(2,3) == 6",
        "num_ids": 755,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)",
        "test": "assert remove_uppercase('hello world') == 'hello world'",
        "num_ids": 1069,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([['apple', 'banana', 'cherry'], ['dog', 'cat', 'bird'], ['orange', 'grape', 'peach']]) == ['apple', 'dog', 'orange']",
        "num_ids": 1048,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"HELLO WORLD\") == 10",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append([list1[i], list1[j]])\n    return result",
        "test": "assert combinations_list([1,2,3]) == [[1,2],[1,3],[2,3]], \"combinations_list([1,2,3]) should return [[1,2],[1,3],[2,3]]\"",
        "num_ids": 2097,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        max_product = arr[0]\n        max_ending_here = arr[0]\n        min_ending_here = arr[0]\n        for i in range(1, len(arr)):\n            temp = max_ending_here * arr[i]\n            max_ending_here = max(arr[i], max(temp, min_ending_here * arr[i]))\n            min_ending_here = min(arr[i], min(temp, min_ending_here * arr[i]))\n            max_product = max(max_product, max_ending_here)\n        return max_product",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6",
        "num_ids": 1945,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and the value of n as input. It returns True if all values in the dictionary are the same, False otherwise.\n    '''\n    values = list(dict.values())\n    # Checking if all values are same\n    if values.count(values[0]) == len(values):\n        return True\n    else:\n        return False",
        "test": "assert check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True",
        "num_ids": 1329,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({'a': 1, 'b': '', 'c': 3}) == {'a': 1, 'c': 3}",
        "num_ids": 1239,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return None\n\n    # Initialize variables to keep track of the maximum product and the ending index of the increasing subsequence\n    max_product = float('-inf')\n    end_index = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is greater than the previous element, update the maximum product and the ending index\n        if i > 0 and arr[i] > arr[i-1]:\n            max_product = max(max_product, arr[i] * arr[end_index])\n            end_index = i\n        # If the current element is less than or equal to the previous element, reset the ending index\n        else:\n            end_index = i\n\n    # Return the maximum product\n    return max_product",
        "test": "assert max_product([-2,0,-1]) == 0",
        "num_ids": 2301,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_tup = ()\n    for i in range(len(test_tup)-1):\n        sum_tup = sum_tup + (test_tup[i] + test_tup[i+1],)\n    return sum_tup",
        "test": "assert add_pairwise((1, 2, 3)) == (3, 5)",
        "num_ids": 1305,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n\n",
        "test": "assert find_remainder([1,2,3], 5) == 1",
        "num_ids": 796,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if it contains consecutive numbers, otherwise False.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the tuple list to sets to find the intersection of elements\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of sets\n    intersection_set = set1.intersection(set2)\n    # Convert the intersection set back to tuple list\n    intersection_list = list(intersection_set)\n    # Sort the tuple list in ascending order based on the first element of each tuple\n    intersection_list.sort(key=lambda x: x[0])\n    return intersection_list",
        "test": "assert tuple_intersection([(1,2),(2,3),(3,4)], [(2,3),(3,4),(4,5)]) == [(2,3),(3,4)]",
        "num_ids": 2294,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character 'ch' in a string'str1' with a new character 'newch'.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello\", \"l\", \"z\") == \"hezzo\"",
        "num_ids": 1018,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function will sort a dictionary by value.\n    '''\n    # Creating a counter object from the dictionary\n    counter = Counter(dict1)\n    # Sorting the counter object by value in descending order\n    sorted_counter = counter.most_common()[::-1]\n    # Creating a new dictionary with sorted values\n    sorted_dict = {}\n    for item in sorted_counter:\n        sorted_dict[item[0]] = item[1]\n    # Returning the sorted dictionary\n    return sorted_dict",
        "test": "assert sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == [('a', 1), ('b', 2), ('c', 3), ('d', 4)]",
        "num_ids": 1523,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = nums[0]\n    largest = nums[0]\n    \n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    \n    return smallest + largest",
        "test": "assert big_sum([-1, 0, 1, 2, -3]) == -2",
        "num_ids": 1075,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def is_lower(string):\n    '''\n    This function converts the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower('hello') == 'hello'",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', str1)\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1",
        "test": "assert remove_lowercase('Python Is AWESOME') == 'Python Is AWESOME'",
        "num_ids": 1156,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes in a number and returns the first digit of the number.\n    \"\"\"\n    first_digit = n // 10**(len(str(n))-1)\n    return first_digit",
        "test": "assert first_Digit(0) == 0",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1025,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize variables\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n\n    # Calculate sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # Calculate sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_numbers += i\n\n    # Calculate and return the difference\n    return sum_of_cubes - sum_of_numbers",
        "test": "assert difference(1) == 1 - 1",
        "num_ids": 1399,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,2,3,4,5], 5) == 2",
        "num_ids": 1198,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string",
        "test": "assert toggle_string(\"hello world\") == \"HELLO WORLD\"",
        "num_ids": 913,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    # convert the integers to strings to easily compare their digits\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # compare the digits of the two integers and add the difference to the sum\n    for i in range(len(n1_str)):\n        if n1_str[i]!= n2_str[i]:\n            sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    return sum",
        "test": "assert digit_distance_nums(123, 456) == 9 # 123 - 456 = 333 - 333 = 0 + 0 + 0 = 0, 1 + 2 + 3 = 6, 4 + 5 + 6 = 15, so the sum of the per-digit differences is 0 + 6 + 15 = 21.",
        "num_ids": 2441,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = -1000000\n    max_ending_here = 0\n\n    for i in range(0, size):\n        max_ending_here += a[i]\n\n        if (max_ending_here > max_so_far):\n            max_so_far = max_ending_here\n\n        if (max_ending_here < 0):\n            max_ending_here = 0\n\n    return max_so_far",
        "test": "assert max_sub_array_sum([1,2,3,4,5], 5) == 15",
        "num_ids": 1828,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Use set union to get unique elements from both tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n    \n    # Sort the elements and return as tuple\n    return tuple(sorted(union_set))",
        "test": "assert union_elements((1, 2, 3), (3, 4, 5)) == (1, 2, 3, 4, 5)",
        "num_ids": 1783,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i]:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n    return max_length",
        "test": "assert Find_Max_Length([1]) == 1",
        "num_ids": 1433,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values",
        "test": "assert extract_values(\"I'm eating a sandwich.\") == []",
        "num_ids": 1013,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4],4)==6",
        "num_ids": 1155,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def split(word):\n    return list(word)",
        "test": "assert split('') == []",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 'Input must be non-negative'\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum",
        "test": "assert sum_digits(1234) == 10 # 1 + 2 + 3 + 4 = 10",
        "num_ids": 1149,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 1132,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['dog', 'cat', 'fish']]) == [['apple', 'banana', 'cherry'], ['cat', 'dog', 'fish']]",
        "num_ids": 1735,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    if len(unique_nums) < 2:\n        return None\n    else:\n        return unique_nums\n",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1591,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 1259,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area",
        "test": "assert surfacearea_cylinder(0,5)==0",
        "num_ids": 1595,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if list B is a sublist of list A, else False.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    \n    return False",
        "test": "assert is_Sub_Array([1,2,3,4], [2,3,4,5]) == False",
        "num_ids": 1506,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit of n!\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 983,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 2017,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list",
        "test": "assert find_dissimilar((1, 2, 3), (4, 5, 6)) == (1, 2, 3)",
        "num_ids": 1604,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            new_tuple.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return tuple(new_tuple)\n\ndef is_even(num):\n    '''\n    Function to check if a number is even or not.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\ntest_tuple = ((1, 2, 3), 4, (5, 6, 7, 8))\nresult = even_ele(test_tuple, is_even)\nprint(result)",
        "test": "assert even_ele((1,2,3), lambda x: x%2==0) == (2,)",
        "num_ids": 2277,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def surface_Area(base, height):\n    '''\n    This function takes two arguments, base and height, which are the base edge and height of the square pyramid respectively.\n    It returns the total surface area of the square pyramid.\n    '''\n    total_area = 4*base*height + 2*(base**2)\n    return total_area",
        "test": "assert surface_Area(1,1)==6",
        "num_ids": 1752,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function checks if a dictionary is empty.\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 715,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        c = 0\n        for i in range(num):\n            c += catalan_number(i) * catalan_number(num-i-1)\n        return c\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1265,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r\"\\b\\w+ly\\b\"\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return \"No adverbs ending with 'ly' found in the text.\"\n    else:\n        adverbs = []\n        for match in matches:\n            start_pos = text.find(match)\n            adverbs.append((match, start_pos))\n        return adverbs",
        "test": "assert find_adverbs(\"The movie was really good.\") == [(10, 'good')]",
        "num_ids": 1716,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function finds the n most expensive items in a given dataset.\n\n    Args:\n    items: A list of dictionaries containing item details\n    n: The number of items to be returned\n\n    Returns:\n    A list containing the n most expensive items in the dataset.\n    \"\"\"\n\n    # Create a heap with the initial n items\n    heap = []\n    for item in items[:n]:\n        heapq.heappush(heap, (item['price'], item['name']))\n\n    # Iterate over the remaining items and compare their prices with the minimum price in the heap\n    for item in items[n:]:\n        if item['price'] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (item['price'], item['name']))\n\n    # Extract the n most expensive items from the heap and return them as a list\n    result = [heapq.heappop(heap)[1] for i in range(n)]\n    return result",
        "test": "assert expensive_items([(\"apple\", 3), (\"banana\", 2), (\"orange\", 5), (\"grape\", 4)], 3) == [(\"orange\", 5), (\"apple\", 3), (\"grape\", 4)]",
        "num_ids": 2123,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def split_arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "test": "assert split_Arr([1,2,3,4,5],4) == [1,2,3,4] + [5]",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1,2,3]) == (1,2,3)",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return 0\n    else:\n        return max(nums) - min(nums)",
        "test": "assert big_diff([10, 20, 30, 40, 50]) == 40",
        "num_ids": 1089,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        root = int(num**0.5)\n        if root*root == num:\n            squares.append(num)\n    return squares",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 2076,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates (rho, theta) to rectangular coordinates (x, y).\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y",
        "test": "assert polar_rect(0,0) == (0.0,0.0) # check if the function is correct for (0,0)",
        "num_ids": 1302,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 1363,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    if k == 0:\n        return result\n    for i in range(1, k+1):\n        result = result * (n-i+1) / i\n    return int(result)",
        "test": "assert binomial_Coeff(1,1)==1",
        "num_ids": 1561,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0+(\\d+)', r'\\1', ip)",
        "test": "assert removezero_ip('172.16.254.1') == '172.16.254.1'",
        "num_ids": 1461,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    even_num = lst[0]\n    odd_num = lst[1]\n    return abs(even_num - odd_num)",
        "test": "assert diff_even_odd([1,2,3,4,5]) == 1",
        "num_ids": 1624,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    This function takes two binary numbers represented as strings and returns the minimum number of swaps required to convert one to the other.\n    '''\n    n = len(str1)\n    count = 0\n    visited = [False]*n\n    for i in range(n) : \n        if str1[i]!= str2[i] : \n            if visited[i] == False : \n                visited[i] = True\n                j = i + 1\n                while j < n and str1[j] == str2[j] : \n                    j += 1\n                if j == n : \n                    count += 1\n                else : \n                    for k in range(j,n) : \n                        if str1[k]!= str2[k] : \n                            if visited[k] == False : \n                                count += 1\n                                visited[k] = True\n                i = j - 1\n    return count",
        "test": "assert min_Swaps('111','111') == 0",
        "num_ids": 2234,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "test": "assert tuple_size((1, 2)) == sys.getsizeof((1, 2)), \"The function is not working correctly for tuple with two elements\"",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the total number of elements in both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    n = n1 + n2\n    \n    # Initialize two pointers for traversing the arrays\n    i = 0\n    j = 0\n    \n    # Traverse the arrays until the kth element is found\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            break\n    \n    # Check if k is less than the number of elements in the first array\n    if k <= i:\n        return arr1[k-1]\n    \n    # Check if k is greater than or equal to the number of elements in both arrays\n    elif k > i + j:\n        return arr2[k-1-i]\n    \n    # If k is between i and i+j, then the kth element is present in both arrays\n    else:\n        return arr1[i-1]",
        "test": "assert find_kth([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == 5",
        "num_ids": 2563,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is armstrong or not.\n    An Armstrong number is an n-digit number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    n = len(str(number))\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(1) == True",
        "num_ids": 1702,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total/number\n    return total, average",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 1112,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is even and False if it is odd.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
        "test": "assert first_repeated_char('hello') == 'l'",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Returns a list of all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludics = []\n    for i in range(2, n + 1):\n        is_lucid = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics",
        "test": "assert get_ludic(0) == []",
        "num_ids": 1635,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 18,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = \" \".join(words[::-1])\n    return reversed_words",
        "test": "assert reverse_words('hello world') == 'world hello'",
        "num_ids": 1078,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(1) == False",
        "num_ids": 1220,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "test": "assert radian_degree(90) == math.pi/2",
        "num_ids": 760,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    else:\n        return None",
        "test": "assert find_literals('hello world', r'\\w+') == ('hello', 0, 5)",
        "num_ids": 1437,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function finds the nth bell number.\n    \"\"\"\n    bell = 1\n    for i in range(1, n + 1):\n        bell = bell * i\n    return bell",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 1186,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and removes the k'th element from the list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k:\n            new_list.append(list1[i])\n    return new_list",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 4, 5]",
        "num_ids": 1357,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes a list of lists representing a matrix and returns the maximum of the Nth column.\n    '''\n    max_val = -float('inf') # initialize max value to negative infinity\n    for row in test_list:\n        max_val = max(max_val, row[N-1]) # update max value if current value is greater\n    return max_val",
        "test": "assert max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 1) == 7",
        "num_ids": 1643,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    if not all(len(sublist) == 2 for sublist in lst):\n        raise ValueError(\"Each sublist should have exactly two elements.\")\n    \n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    \n    return [first_list, second_list]",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1,3,5],[2,4,6]]",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if i == 0:\n            result.append(test_list[i][1])\n        else:\n            result.append(test_list[i][1] + result[i-1])\n    return result",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for i in nums:\n        total = sum(i)\n        avg = total / len(i)\n        result.append(avg)\n    return result",
        "test": "assert average_tuple(((1,2,3), (4,5,6), (7,8,9))) == [2.0, 5.0, 8.0]",
        "num_ids": 1613,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tupples must have the same length\"\n    else:\n        result = tuple(i % j for i, j in zip(test_tup1, test_tup2))\n        return result",
        "test": "assert tuple_modulo((10, 20, 30), (3, 4, 5)) == (1, 0, 0)",
        "num_ids": 1694,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def min_Jumps(steps, d):\n    # Initialize the current position to the origin\n    current = (0, 0)\n    # Initialize the distance to reach the end of the jump\n    distance = abs(d)\n    # Initialize the number of jumps needed to reach the end\n    jumps = 1\n    \n    # While the current position is not at the end\n    while current!= (d, 0):\n        # Check if the current position can reach the end of the jump\n        if current[0] + distance >= d:\n            # If it can, update the distance to the end of the jump\n            distance = d - current[0]\n        else:\n            # If it cannot, update the distance to the next point in the jump\n            distance = min(distance, steps[current[0]][current[1]])\n        \n        # Update the current position to the next point in the jump\n        current = (current[0] + distance, current[1])\n        \n        # Increment the number of jumps needed to reach the end\n        jumps += 1\n    \n    # Return the number of jumps needed to reach the end\n    return jumps",
        "test": "assert min_Jumps(4, 2) == 2",
        "num_ids": 3004,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([2, 4, 6], [1, 2, 3]) == [2.0, 2.0, 2.0]",
        "num_ids": 1357,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for char in test_str:\n        if not char.isdigit():\n            result += char\n    for char in test_str:\n        if char.isdigit():\n            result += char\n    return result",
        "test": "assert move_num(\"1234567890\") == \"1234567890\"",
        "num_ids": 1614,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [[False for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if a[j] % a[i] == 0:\n                dp[i][j] = dp[i][j-1] or dp[i+1][j]\n                \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if dp[i][j]:\n                return j-i+1\n    \n    return 0",
        "test": "assert largest_subset([2,3,5,7,11,13]) == 0",
        "num_ids": 2464,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Initialize variables for median calculation\n    i = 0\n    j = 0\n    median = 0\n\n    # Find the median of the two lists\n    while (i + j) < n:\n        # Check if arr1[i] is smaller than arr2[j]\n        if arr1[i] < arr2[j]:\n            median = arr1[i]\n            i += 1\n        else:\n            median = arr2[j]\n            j += 1\n\n    # If the lists have the same length, return the average of the middle elements\n    if (n % 2) == 0:\n        return (max(arr1[i-1], arr2[j-1]) + median) / 2\n    # If the lists have different lengths, return the median element\n    else:\n        return median",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 3) == 3",
        "num_ids": 2227,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result",
        "test": "assert nth_nums([1,2,3], 2) == [1,4,9]",
        "num_ids": 1117,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as an argument and returns the uppercase version of the string.\n    \"\"\"\n    return string.upper()",
        "test": "assert is_upper(\"HELLO\") == \"HELLO\"",
        "num_ids": 679,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0] \n    last_element = newList[-1] \n    newList[0] = last_element \n    newList[-1] = first_element \n    return newList ",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 1282,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # The maximum area of a triangle inscribed in a semicircle with radius r is pi * r^2 / 2.\n    # We can find the radius of the largest inscribed triangle by finding the value of r for which\n    # the area of the triangle is greater than or equal to pi * r^2 / 2.\n    area = 0.5 * math.pi * r ** 2\n    while area >= 0.5 * math.pi * r ** 2:\n        r -= 0.001\n        area = 0.5 * math.pi * r ** 2\n    # The area of the largest triangle inscribed in a semicircle with radius r is pi * r^2 / 2 - 0.5 * pi * (r - 0.001)^2.\n    return math.pi * r ** 2 / 2 - 0.5 * math.pi * (r - 0.001) ** 2\n",
        "test": "assert triangle_area(2) == 1.5707963267948966",
        "num_ids": 1881,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    If all numbers are present in the list, it returns the next number greater than the last number in the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize a dictionary to keep track of the frequency of each number in the array\n    frequency_dict = {}\n    for num in array[start:end+1]:\n        frequency_dict[num] = frequency_dict.get(num, 0) + 1\n\n    # Traverse the array and find the first missing number\n    for i in range(start, end+1):\n        if i+1 not in frequency_dict:\n            return i+1\n\n    # If all numbers are present, return the next number greater than the last number in the list\n    return end+2",
        "test": "assert find_First_Missing([0,1,2,4,5,6,7,8,9]) == 3",
        "num_ids": 2489,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with only the even numbers from the original list.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 1159,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    if sub:\n        return [adj for adj in adjacent if adj not in sub]\n    else:\n        return adjacent",
        "test": "assert adjac((1, 2)) == [(0, 2), (2, 2), (1, 1), (1, 3)]",
        "num_ids": 1886,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')",
        "test": "assert replace_spaces('hello world') == 'hello_world'",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    \n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    \n    return non_zeroes + zeroes",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1925,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes an array and its size as input and returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum",
        "test": "assert pair_xor_Sum([2,4,6,8,10],5) == 24, \"Sum of XOR pairs not correct for [2,4,6,8,10]\"",
        "num_ids": 1667,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using heap sort algorithm.\n\n    Args:\n        iterable (iterable): An iterable object to sort.\n\n    Returns:\n        A sorted list of elements.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1411,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given sale amount has no profit and no loss.\n\n    Args:\n    actual_cost (float): Actual cost of the item\n    sale_amount (float): Amount that was sold\n\n    Returns:\n    bool: True if there is no profit and no loss, False otherwise\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(100,100) == True",
        "num_ids": 1117,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the Wind Chill Index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    temp = 13.12 + 0.6215*t - 11.37*math.pow(v,0.16) + 0.3965*t*math.pow(v,0.16)\n    wind_chill = 35.74 + 0.6215*temp - 35.75*(math.pow((v/1.6),0.16)) + 0.4275*temp*(math.pow((v/1.6),0.16))\n    return round(wind_chill)",
        "test": "assert wind_chill(5,10) == 4",
        "num_ids": 2428,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "test": "assert sample_nam([\"John\", \"Bob\", \"Sarah\", \"Karen\", \"Samuel\", \"james\", \"Mary\"]) == 10 # expected output: 10",
        "num_ids": 1382,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    return re.sub(pattern, '', items)",
        "test": "assert remove_parenthesis('hello (world) there') == 'hello  there'",
        "num_ids": 1218,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return n * (3 * n - 1) // 2",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)z(?!\\w)'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_wordz_middle(\"axazrzzz\") == False",
        "num_ids": 1225,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # reverse the array up to position k\n    reversed_array = input[:k][::-1] + input[k:]\n    return reversed_array",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 5) == [5,4,3,2,1]",
        "num_ids": 1662,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new tuple with the original tuple and the dictionary\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "test": "assert add_dict_to_tuple((1,2,3), {'a':4, 'b':5}) == (1,2,3,{'a':4, 'b':5})",
        "num_ids": 1600,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. \n    We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    max_avg = float('-inf')\n    \n    # Calculate the cost of the path ending at each cell\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n                \n    # Calculate the average of each path and update the maximum average if necessary\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                avg = dp[i][j] / (j+1)\n            elif j == 0:\n                avg = dp[i][j] / (i+1)\n            else:\n                avg = (dp[i][j] - min(dp[i-1][j], dp[i][j-1])) / (i+j-1)\n            if avg > max_avg:\n                max_avg = avg\n    \n    return max_avg",
        "test": "assert maxAverageOfPath([",
        "num_ids": 4801,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, height_weight in students.items():\n        if height_weight[0] >= h and height_weight[1] >= w:\n            filtered_students[student] = height_weight\n    return filtered_students",
        "test": "assert filter_data({'Alice': (1.8, 70), 'Bob': (1.6, 60), 'Charlie': (1.7, 80)}, 1.7, 70) == {'Alice': (1.8, 70), 'Charlie': (1.7, 80)}",
        "num_ids": 2529,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3], [2, 3, 4]) == [], \"Should return []\"",
        "num_ids": 1637,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    for digit in str(base):\n        sum_of_digits += int(digit) ** power\n    return sum_of_digits",
        "test": "assert power_base_sum(2, 1) == 2",
        "num_ids": 1473,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # find all occurrences of double quotes\n    matches = re.findall(r'\"([^\"]*)\"', text1)\n    \n    # return all matches\n    return matches",
        "test": "assert extract_quotation('The quick brown \"fox\" jumps over the \"lazy\" dog') == ['fox', 'lazy']",
        "num_ids": 1156,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "test": "assert multiply_elements((1, 2, 3)) == (2, 6)",
        "num_ids": 1691,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the element-wise sum of the input lists.\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 1417,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]",
        "test": "assert consecutive_duplicates([1,1,1,1,1,1,1]) == [1]",
        "num_ids": 1466,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculates the lateral surface area of a cone given the radius and height of the base.\n\n    Args:\n        r (float): The radius of the base of the cone.\n        h (float): The height of the cone from the base to the top.\n\n    Returns:\n        float: The lateral surface area of the cone.\n    '''\n\n    return math.pi * r * h + 2 * math.pi * r**2",
        "test": "assert lateralsurface_cone(5,10) == 314.1592653589793, \"Error: The lateral surface area of a cone with radius 5 and height 10 is not correct\"",
        "num_ids": 1698,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[.,\\s]')\n    return pattern.sub(':', text)",
        "test": "assert replace_specialchar(\"hello,world\") == \"hello:world\"",
        "num_ids": 985,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x and (mid == 0 or A[mid-1]!= x):\n            return mid\n\n        elif A[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 3, 4, 5], 3) == 2",
        "num_ids": 1901,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    res = 0\n    # loop through all possible sublists\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sublist = arr[i:j]\n            res += math.prod(sublist)\n    return res",
        "test": "assert sum_Of_Subarray_Prod([0,0,0,0,0]) == 0",
        "num_ids": 2510,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def set_middle_bits(n):\n    # Get the binary representation of the number\n    binary = bin(n)[2:]\n    # Convert the binary representation to a list of bits\n    bits = list(binary)\n    # Toggle the bits except for the first and last bit\n    for i in range(1, len(bits)-1):\n        if bits[i] == '0':\n            bits[i] = '1'\n        else:\n            bits[i] = '0'\n    # Convert the list of toggled bits to a string of bits\n    binary_string = ''.join(bits)\n    # Convert the string of toggled bits back to an integer\n    toggled_n = int(binary_string, 2)\n    # Return the toggled integer\n    return toggled_n",
        "test": "assert set_middle_bits(5) == 7",
        "num_ids": 1439,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return i",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 1197,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(pattern, string))",
        "test": "assert check_str('hello') == False",
        "num_ids": 1025,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function takes an integer n as input and calculates the geometric sum of n-1.\n    The geometric sum of a number n is defined as the sum of the first n positive integers, \n    each raised to the power of the sum of the first n positive integers.\n    For example, the geometric sum of 5 is 1+2+3+4+5 = 15, which is equal to 1^1 + 2^2 + 3^3 + 4^4 + 5^5.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import math\n\ndef find_Index(n):\n    # calculate the number of digits in the smallest triangular number with n digits\n    count = int(n * (n + 1) / 2)\n    # calculate the smallest triangular number with n digits\n    triangular_number = count * (count + 1) // 2\n    # convert triangular_number to string and return the length of the string\n    return len(str(triangular_number))",
        "test": "assert find_Index(1) == 1 ",
        "num_ids": 1199,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple and returns a dictionary with the first element of the tuple as the key\n    and the second element of the tuple as the value.\n    '''\n    new_dict = {}\n    for i in range(0, len(test_tup), 2):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict",
        "test": "assert tuple_to_dict(('a', 'b', 'c', 'd')) == {'a': 'b', 'c': 'd'}",
        "num_ids": 1712,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function returns True if all the characters in a given string s are the same, False otherwise.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        for i in range(1, len(s)):\n            if s[i]!= s[0]:\n                return False\n        return True",
        "test": "assert all_Characters_Same(\"hello\") == False",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (3 * side) / (2 * (2 ** 0.5))\n    \n    # Calculate the area of the tetrahedron\n    area = (math.sqrt(24 * s ** 2 + 1) + 6 * s) / 4\n    \n    return area",
        "test": "assert area_tetrahedron(5) == 10.825317547305483",
        "num_ids": 1103,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a list by specified number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    m %= n\n    return lst[n-m:] + lst[:n-m]",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 1456,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3, 4, 5)) == False",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = set(str(num))\n        if all(int(digit)%num == 0 for digit in digits):\n            result.append(num)\n    return result",
        "test": "assert divisible_by_digits(10, 20) == []",
        "num_ids": 5459,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Find the area of a sector.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r ** 2) * a / 360 * math.pi",
        "test": "assert sector_area(1,360) == math.pi",
        "num_ids": 1307,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    # create a 3D table to store lengths of LCS at every point\n    table = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    # fill the table using dynamic programming\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    table[i][j][k] = table[i - 1][j - 1][k - 1] + 1\n                else:\n                    table[i][j][k] = max(table[i - 1][j][k], table[i][j - 1][k], table[i][j][k - 1])\n\n    # find the maximum length of LCS\n    max_length = 0\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if table[i][j][k] > max_length:\n                    max_length = table[i][j][k]\n\n    # print the LCS\n    lcs = ''\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i - 1][j][k] >= table[i][j - 1][k] and table[i - 1][j][k] >= table[i][j][k - 1]:\n            i -= 1\n        elif table[i][j - 1][k] >= table[i - 1][j][k] and table[i][j - 1][k] >= table[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs",
        "test": "assert lcs_of_three(\"abcdefg\", \"hijklmn\", \"opqrstu\") == \"\", \"Test Case 2\"",
        "num_ids": 4566,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    pattern = r\"(?<=[A-Z])(?=[A-Z][a-z])|(?<=[a-z])(?=[A-Z])\"\n    return re.sub(pattern, r\" \", str1)",
        "test": "assert capital_words_spaces('HELLO WORLD') == 'HELLO WORLD'",
        "num_ids": 1475,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings as input and sorts the strings in ascending order of their numeric values.\n    \"\"\"\n    return sorted(nums_str, key=lambda x: float(x))",
        "test": "assert sort_numeric_strings(['1', '5', '3', '2', '4']) == ['1', '2', '3', '4', '5']",
        "num_ids": 1586,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function adds the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1324,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    if i < 0 or i >= len(arr):\n        return True\n    \n    left = 2*i + 1\n    right = 2*i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    \n    if smallest!= i:\n        arr[smallest], arr[i] = arr[i], arr[smallest]\n        check_min_heap_helper(arr, smallest)\n    \n    return True",
        "test": "assert check_min_heap_helper([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == True",
        "num_ids": 2491,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1636,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    test_list = sorted(test_list, key = lambda x: x[0])\n    result = []\n    for i in range(K):\n        result.append(test_list[i])\n    for i in range(K, n):\n        if test_list[i][0] < result[-1][0]:\n            result.pop()\n            result.append(test_list[i])\n    return result",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6)], 2) == [(1, 2), (3, 4)]",
        "num_ids": 2017,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    This function takes three lists as input and returns a list of common elements that appear in all three lists at the same index.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([1,2,3],[2,3,4],[5,6,7]) == [], \"The function should return [] for the given lists.\"",
        "num_ids": 1856,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1401,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"ab\") == True",
        "num_ids": 811,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n                \n    return count",
        "test": "assert count_reverse_pairs(['abcd', 'dcba', 'badc', 'cadb', 'abcd', 'dcba', 'badc', 'cadb']) == 4",
        "num_ids": 1774,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        # Convert sublist to tuple to make it hashable\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublist_dict:\n            sublist_dict[sublist_tuple] = 1\n        else:\n            sublist_dict[sublist_tuple] += 1\n    return sublist_dict",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2537,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num and len(num.split('.')[1]) == 2:\n            return True\n        return False\n    except ValueError:\n        return False",
        "test": "assert is_decimal(\"0.00\") == True",
        "num_ids": 1194,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1",
        "test": "assert unique_Element([1,2,3,4,5]) == False",
        "num_ids": 959,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(2) == False",
        "num_ids": 1568,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array as input and finds the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sorting the array\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]  # Finding the difference between consecutive elements\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([1, 2, 3, 4, 5], 5) == 1",
        "num_ids": 1810,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr('0') == 1",
        "num_ids": 841,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    count = 1\n    i = 2\n    while count < n:\n        j = 2\n        is_polite = True\n        while j <= int(math.sqrt(i)):\n            if i % j == 0:\n                is_polite = False\n                break\n            j += 1\n        if is_polite:\n            count += 1\n        i += 1\n    return i-1",
        "test": "assert is_polite(1) == 1",
        "num_ids": 1712,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list as an input and returns a list of all pairs of consecutive items in the list.\n    '''\n    pair = []\n    for i in range(len(l1)-1):\n        pair.append((l1[i], l1[i+1]))\n    return pair",
        "test": "assert pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 1370,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 5) == 2",
        "num_ids": 1700,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))",
        "test": "assert Diff([1, 2, 3], [2, 3, 4]) == [1], \"Test case 1 failed\"",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return ((n**4) * (3*n**2 - n - 2) // 3) + ((n-1)**4) + (2*n-1)**4",
        "test": "assert odd_num_sum(1) == 1 # 1^4 = 1 ",
        "num_ids": 1350,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "test": "assert check_expression(\"\") == True",
        "num_ids": 1498,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Splitting the given string into words\n    words = test_str.split()\n\n    # Removing words with k length\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n\n    # Joining the words back to a string and returning it\n    return \" \".join(words)",
        "test": "assert remove_length(\"hello world\", 10) == \"hello world\"",
        "num_ids": 1138,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return [(m.start(), m.end()) for m in re.finditer(pattern, text)]\n    else:\n        return None",
        "test": "assert occurance_substring('hello world','z') == None",
        "num_ids": 1620,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 3, 5, 7, 9]) == True",
        "num_ids": 1124,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i == 0 or test_str[i-1] not in vowels:\n                if i == len(test_str)-1 or test_str[i+1] not in vowels:\n                    count += 1\n            elif i == len(test_str)-1 or test_str[i+1] not in vowels:\n                count += 1\n            elif test_str[i-1] not in vowels and test_str[i+1] not in vowels:\n                count += 1\n    \n    return count",
        "test": "assert count_vowels(\"syzygy\") == 0",
        "num_ids": 1455,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create an empty dictionary to keep track of non-repeated elements\n    non_repeated_dict = {}\n\n    # Traverse the list and add non-repeated elements to the dictionary\n    for num in arr:\n        if num not in non_repeated_dict:\n            non_repeated_dict[num] = 1\n\n    # Calculate the sum of non-repeated elements\n    sum_non_repeated = sum(non_repeated_dict.keys())\n\n    return sum_non_repeated",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 1815,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 2349,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for sublist in list1:\n        key = tuple(sublist)\n        if key not in unique_lists:\n            unique_lists[key] = 1\n        else:\n            unique_lists[key] += 1\n    return unique_lists",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2119,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 0:\n                result.append(comb)\n    return result",
        "test": "assert find_combinations([(2, 3), (2, 1), (4, 2), (3, 3), (6, 1)]) == {(1, 1, 1, 1, 1), (2, 1, 1, 0, 0), (1, 1, 2, 0, 0), (0, 0, 3, 1, 0), (0, 0, 2, 2, 0), (0, 0, 1, 3, 0), (0, 0, 0, 4, 0)}<|im_sep|>",
        "num_ids": 5414,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count",
        "test": "assert count_divisors(10) == 4",
        "num_ids": 1604,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    res = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            res += sum(arr[i:j])\n\n    return res",
        "test": "assert odd_length_sum([1,2,3]) == 12 # [1], [2], [3], [1,2], [2,3], [1,2,3]",
        "num_ids": 1774,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else delta / cmax\n\n    value = cmax\n\n    return (hue, saturation, value)",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 2927,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    even_list = []\n    odd_list = []\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n            \n    if len(even_list) > 0:\n        product *= even_list[0]\n    if len(odd_list) > 0:\n        product *= odd_list[0]\n    \n    return product",
        "test": "assert mul_even_odd([0,1,2,3,4,5]) == 0 # should return 0 (0*6)",
        "num_ids": 1989,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes a tuple string as input and returns the corresponding integer tuple.\n    '''\n    # Splitting the input string by comma and converting each element to integer\n    int_tuple = tuple(map(int, test_str.strip('()').split(',')))\n    return int_tuple",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 1588,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 0) == 0",
        "num_ids": 1013,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three(\"bbbaaa\") == False",
        "num_ids": 931,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple",
        "test": "assert new_tuple(['apple', 'banana', 'orange'], 'hello') == ('hello', ['apple', 'banana', 'orange'])",
        "num_ids": 1139,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if every even index contains even numbers,\n    else returns False.\n\n    :param nums: list of numbers\n    :return: True if every even index contains even numbers, else False\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert even_position([2, 3, 4, 5, 6]) == True",
        "num_ids": 1183,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as input and removes tuples from it.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i) == tuple:\n            result.extend(remove_nested(i))\n        else:\n            result.append(i)\n    return tuple(result)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 1426,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([[],[],[],[],[]]) == 5",
        "num_ids": 1060,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid+1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
        "test": "assert last([1,2,3,4,5], 3) == 2",
        "num_ids": 1825,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_starta_endb(\"a_b\") == \"a_b\"",
        "num_ids": 997,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def return_sum(dict):\n    '''\n    This function takes a dictionary as input and returns the sum of all items in the dictionary.\n    '''\n    return sum(dict.values())",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 1021,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Returns the sum of all odd numbers between 1 and n (inclusive).\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))",
        "test": "assert sum_odd(10) == 25",
        "num_ids": 1105,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total_sum = 0\n    for i in arr:\n        total_sum += i\n    return total_sum",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 752,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    This function rotates left d bits of a given number n.\n    Assuming that the number is 32 bit.\n    \"\"\"\n    mask = (2**d - 1) << (32 - d)\n    shifted_n = (n << d) & 0xffffffff\n    return (shifted_n | (n >> (32 - d))) & 0xffffffff\n",
        "test": "assert left_rotate(1,1) == 2 ",
        "num_ids": 1467,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)",
        "test": "assert remove_all_spaces('Hello World') == 'HelloWorld'",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0",
        "test": "assert test_three_equal(1,2,3) == 0, \"Function should return 0 when no three numbers are equal\"",
        "num_ids": 1241,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function will count the number of rotations required to generate a sorted array.\n    :param arr: List of integers\n    :return: Number of rotations required to generate a sorted array\n    \"\"\"\n    n = len(arr)\n    # Initialize variables for left and right pointers\n    left, right = 0, n - 1\n    # Initialize variables for count of rotations and pivot\n    count = 0\n    pivot = arr[0]\n    # Traverse the array from left to right\n    while left <= right:\n        # If the left pointer is less than the right pointer, then the array is not rotated\n        if arr[left] <= pivot <= arr[right]:\n            return count\n        # If the left pointer is less than the pivot, then increment the left pointer and decrement the right pointer\n        elif arr[left] < pivot:\n            left += 1\n        # If the right pointer is greater than the pivot, then decrement the right pointer and increment the left pointer\n        else:\n            right -= 1\n        # Increment the count of rotations\n        count += 1\n    # Return the count of rotations\n    return count",
        "test": "assert count_rotation([1,2,3,4,5]) == 0",
        "num_ids": 3774,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Check if a number is a perfect square or not.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n**2 == n",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 1192,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([1, 2, 3, 4]) == True",
        "num_ids": 1116,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = float('-inf')\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_list = lst\n            max_sum = current_sum\n    return [max_list]\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 8, 9]]",
        "num_ids": 1982,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n            if curr_run > max_run:\n                max_run = curr_run\n        else:\n            curr_run = 0\n    return max_run",
        "test": "assert max_run_uppercase('ABCDE') == 5",
        "num_ids": 1637,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If there are no odd numbers in the list, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1085,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "test": "assert check_K([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == True",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True",
        "test": "assert check_smaller((4,3,2), (1,2,3)) == False",
        "num_ids": 1302,
        "indeed": true
    }
]