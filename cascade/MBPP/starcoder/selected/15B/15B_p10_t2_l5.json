[
    {
        "number": 2,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create two empty sets\n    set1 = set()\n    set2 = set()\n\n    # Add elements of tuple1 to set1\n    for element in test_tup1:\n        set1.add(element)\n\n    # Add elements of tuple2 to set2\n    for element in test_tup2:\n        set2.add(element)\n\n    # Find the common elements in both sets\n    common_elements = set1.intersection(set2)\n\n    # Return the common elements in a tuple\n    return tuple(common_elements)",
        "test": "assert similar_elements((1, 2, 3), (3, 4, 5)) == (3,)",
        "num_ids": 1412,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    A function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "test": "assert is_not_prime(1) == False",
        "num_ids": 1237,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "test": "assert heap_queue_largest([1, 1, 1, 1, 1], 1) == [1] # example 2",
        "num_ids": 1651,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expressions to find words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert find_char_long(\"The quick brown fox jumps over the lazy dog.\") == [\"quick\", \"brown\", \"jumps\", \"over\", \"lazy\"]",
        "num_ids": 1097,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 1087,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n    else:\n        for i in range(len(str)):\n            if str == str[i:]+str[:i]:\n                return i+1\n        return -1",
        "test": "assert find_Rotations(\"\") == 0",
        "num_ids": 1507,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string s and a character ch as input and removes the first and last occurrence of ch from the string.\n    '''\n    s = s.replace(ch, '', 1)\n    s = s.replace(ch, '', -1)\n    return s",
        "test": "assert remove_Occ(\"hello\",\"l\")==remove_Occ(\"hello\",\"l\")",
        "num_ids": 1627,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Create a list of tuples, where each tuple contains the sum of the row and the row itself\n    sums = [(sum(row), row) for row in M]\n    # Sort the list of tuples by the sum of the rows\n    sums.sort()\n    # Return a list of rows sorted by the sum of the rows in ascending order\n    return [row for (s, row) in sums]",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 2129,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the dimensions of a triangular prism and returns its volume.\n\n    :param l: length of the base of the triangular prism\n    :param b: width of the base of the triangular prism\n    :param h: height of the triangular prism\n    :return: the volume of the triangular prism\n    \"\"\"\n    return 0.5 * l * b * h",
        "test": "assert find_Volume(6,4,2) == 24, \"Incorrect volume for dimensions (6,4,2)\"",
        "num_ids": 1054,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore('ABC_def') == False",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n\n    Args:\n    string (str): The input string to be processed.\n    remove_chars (str): The characters to be removed from the input string.\n\n    Returns:\n    str: The processed string.\n\n    Example:\n    >>> str_to_list(\"hello world\", \"ld\")\n    'heo wor'\n    '''\n\n    # Convert the remove_chars string to a list for faster access.\n    remove_chars_list = list(remove_chars)\n\n    # Create an empty list to store the characters from the input string.\n    result = []\n\n    # Iterate over each character in the input string.\n    for char in string:\n        # Check if the character is not in the remove_chars list.\n        if char not in remove_chars_list:\n            # Add the character to the result list.\n            result.append(char)\n\n    # Convert the result list to a string and return it.\n    return ''.join(result)",
        "test": "assert str_to_list('abcd', 'abc') == 'd'",
        "num_ids": 1572,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = set(arraynums)\n    if len(arraynums)!= len(unique_nums):\n        return True\n    else:\n        return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 1142,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is woodball or not.\n    \"\"\"\n    if x < 1:\n        return False\n    if x == 1:\n        return True\n    for i in range(2, x):\n        if x % i == 0:\n            return False\n    return True",
        "test": "assert is_woodall(10) == False",
        "num_ids": 1215,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rev(num):\n    # convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n    # convert the reversed string back to an integer and add 1 to it\n    rev_num = int(num_str) + 1\n    # check if the original number plus 1 is equal to the reversed number\n    if num + 1 == rev_num:\n        return True\n    else:\n        return False",
        "test": "assert rev(456) == False",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            num = int(\"\".join(str(x) for x in arr[i:j+1]))\n            max_num = max(max_num, num)\n    return max_num",
        "test": "assert find_Max_Num([0, 0, 0, 0]) == 0",
        "num_ids": 1713,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-2, 5) == True",
        "num_ids": 1011,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while True:\n        oct_num = i * (2*i - 1)\n        if oct_num == n:\n            return True\n        elif oct_num > n:\n            return False\n        i += 1",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1205,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    # a dictionary to store the frequency of each digit in the string\n    freq = defaultdict(int)\n    # loop through each digit of the string\n    for i in range(n):\n        freq[int(s[i])] += 1\n    # loop through each substring of the string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # calculate the sum of digits in the substring\n            digit_sum = sum(int(s[k]) for k in range(i,j))\n            # if the sum of digits is equal to the length of the substring, increment the count\n            if digit_sum == j-i:\n                count += 1\n    return count",
        "test": "assert count_Substrings(\"123\") == 1",
        "num_ids": 1866,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 950,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([(1,2),(3,4),(5,6),(7,8),(9,10)]) == 8",
        "num_ids": 1778,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "test": "assert subject_marks([('Maths', 75), ('Science', 80), ('English', 90), ('History', 85), ('Geography', 70)]) == [('English', 90), ('Maths', 75), ('Science', 80), ('History', 85), ('Geography', 70)]",
        "num_ids": 1615,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    if not data_list: # Base case: empty list\n        return 0\n    \n    if isinstance(data_list[0], list): # Recursive case: list contains another list\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    \n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 1342,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5, -1, -2, -3]) == 5",
        "num_ids": 1027,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function returns the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    # Initialize the Bell numbers list with the first number (1)\n    bell_numbers = [1]\n    \n    # Loop through the range from 1 to n and calculate each Bell number\n    for i in range(1, n+1):\n        # Calculate the sum of the previous Bell numbers\n        bell_sum = sum(bell_numbers)\n        \n        # Append the new Bell number to the Bell numbers list\n        bell_numbers.append(bell_sum)\n    \n    # Return the nth Bell number\n    return bell_numbers[n]",
        "test": "assert bell_number(0) == 1",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            is_decreasing = False\n        elif A[i] < A[i-1]:\n            is_increasing = False\n\n    return is_increasing or is_decreasing",
        "test": "assert is_Monotonic([1,2,3,4,5])",
        "num_ids": 1555,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if s == []:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "test": "assert is_sublist([1, 2, 3, 4, 5], [2, 3]) == True",
        "num_ids": 1814,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "test": "assert find_equal_tuple([(1,2,3), (1,2), (1,2,3,4)]) == False",
        "num_ids": 1328,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap // shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums",
        "test": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2132,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # find the square root of n\n    root = int(n ** 0.5)\n\n    # check if root is an integer or not\n    if root ** 2 == n:\n        return True\n    else:\n        return False",
        "test": "assert dif_Square(11) == False",
        "num_ids": 1451,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function takes two arrays as input - colors and patterns - and checks whether they follow the sequence given in the patterns array.\n    \"\"\"\n\n    # Check if the length of the colors and patterns arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Create a dictionary to store the color and its corresponding pattern\n    color_to_pattern = {}\n\n    # Iterate through the colors and patterns arrays\n    for i in range(len(colors)):\n        color = colors[i]\n        pattern = patterns[i]\n\n        # If the color is already in the dictionary, check if the pattern matches with the existing pattern in the dictionary\n        if color in color_to_pattern:\n            if color_to_pattern[color]!= pattern:\n                return False\n        # If the color is not in the dictionary, add the color and its corresponding pattern to the dictionary\n        else:\n            color_to_pattern[color] = pattern\n\n    # If the function has not returned False, it means that all the patterns match the sequence in the patterns array\n    return True",
        "test": "assert is_samepatterns(['red', 'green', 'blue'], ['red', 'green', 'blue']) == True",
        "num_ids": 1814,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == []",
        "num_ids": 2064,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(10) == False",
        "num_ids": 763,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0",
        "test": "assert word_len(\"hello\") == True, \"Expected True, got False\"",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 902,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Calculate the volume of a sphere.\n\n    Parameters:\n    r (float): the radius of the sphere\n\n    Returns:\n    float: the volume of the sphere\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume",
        "test": "assert volume_sphere(1) == 4/3 * math.pi # Testing for r=1",
        "num_ids": 940,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def get_Char(strr):\n    # Find the sum of ASCII values of all characters in the string\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    \n    # Find the character made by adding the sum modulo 26\n    return chr(sum % 26 + 97)",
        "test": "assert get_Char(\"world\") == 'g'",
        "num_ids": 1251,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]",
        "test": "assert sequence(2) == 1",
        "num_ids": 1281,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes in the radius of a sphere and returns the surface area of the sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4 * math.pi",
        "num_ids": 1051,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    hexagonal_number = 0\n    while True:\n        hexagonal_number = i*(2*i - 1)\n        if hexagonal_number >= n:\n            break\n        i += 1\n    return hexagonal_number",
        "test": "assert centered_hexagonal_number(1) == 1, \"Failed for n = 1\"",
        "num_ids": 1075,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result",
        "test": "assert merge_dictionaries_three({'a':1},{'b':2},{'c':3}) == {'a':1, 'b':2, 'c':3}, \"Test 1 Failed\"",
        "num_ids": 2262,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import collections\n\ndef freq_count(lst):\n    # create an empty dictionary to store the frequency count\n    freq_dict = {}\n    \n    # iterate through the list and count the frequency of each element\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n            \n    # return the frequency dictionary\n    return freq_dict",
        "test": "assert freq_count([1,2,3,4,5]) == {1:1, 2:1, 3:1, 4:1, 5:1}",
        "num_ids": 1627,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def closest_num(n):\n    # initialize the closest number to infinity\n    closest = float('inf')\n    \n    # loop through all numbers from 1 to n-1\n    for i in range(1, n):\n        # if the current number is closer to n than closest, update closest\n        if abs(i - n) < abs(closest - n):\n            closest = i\n    \n    # return the closest smaller number\n    return closest",
        "test": "assert closest_num(2) == 1, \"The closest smaller number than 2 should be 1.\"",
        "num_ids": 1096,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of strings as input and returns the length of the longest word.\n    '''\n    longest_word_length = 0\n    for word in list1:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length",
        "test": "assert len_log(['apple', 'banana', 'cherry', 'date', 'elderberry']) == 10",
        "num_ids": 1137,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1.startswith(sub_str, i):\n            return True\n    return False",
        "test": "assert find_substring(\"hello world\", \"abc\") == False",
        "num_ids": 971,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Convert the number to a string and check if the number is repeated\n    # or not\n    num_str = str(n)\n    if num_str == num_str[::-1]:\n        return True\n    else:\n        return False",
        "test": "assert is_undulating(12345) == False # odd number",
        "num_ids": 1844,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def power(a,b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    result = a**b\n    return result",
        "test": "assert power(2,3) == 8",
        "num_ids": 679,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert index_minimum([(1,5), (2,3), (3,1), (4,2), (5,3)]) == 3",
        "num_ids": 1363,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len",
        "test": "assert Find_Min_Length([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == 2",
        "num_ids": 1438,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(10) == 4",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict",
        "test": "assert frequency_lists([[1, 2], [3, 4], [5, 6]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}",
        "num_ids": 2323,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result",
        "test": "assert multiply_num([0, 0, 0]) == 0",
        "num_ids": 1013,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function takes a decimal number as input and returns its binary equivalent as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 1102,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        next_palindrome = num + 1\n        while not is_palindrome(next_palindrome):\n            next_palindrome += 1\n        return next_palindrome\n    else:\n        return None",
        "test": "assert next_smallest_palindrome(1) == 2",
        "num_ids": 2293,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return None\n    return arr[k-1]",
        "test": "assert kth_element([1, 3, 2, 5, 6], 5) == 6",
        "num_ids": 1125,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def snake_to_camel(word):\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel('camelCase') == 'camelCase'",
        "num_ids": 874,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    This function finds the Eulerian number a(n, m).\n    \"\"\"\n    # Define variables\n    count = 0\n    product = 1\n    numerator = 1\n    denominator = 1\n    \n    # Calculate the denominator and numerator\n    for i in range(1, n+1):\n        product *= i\n        denominator *= i\n    for i in range(1, m+1):\n        product *= i\n        numerator *= i\n        \n    # Calculate the count of eulerian numbers\n    count = product // (numerator*denominator)\n    \n    # Return the count\n    return count",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 1888,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 1381,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count(lst):   \n  '''\n  Write a python function to count true booleans in the given list.\n  '''\n  count = 0\n  for i in lst:\n    if i:\n      count += 1\n  return count",
        "test": "assert count([False, False, False, False, False]) == 0",
        "num_ids": 761,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the list to a tuple\n    test_tup = tuple(test_list + list(test_tup))\n    \n    return test_tup",
        "test": "assert add_lists([], (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    heap = []\n    heapq.heapify(heap) # initialize heap\n    \n    # add elements to heap\n    for num in num1:\n        heapq.heappush(heap, num)\n    for num in num2:\n        heapq.heappush(heap, num)\n    for num in num3:\n        heapq.heappush(heap, num)\n        \n    # merge elements in sorted order\n    merged_list = []\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n        \n    return merged_list",
        "test": "assert merge_sorted_list([1,2,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 2745,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list of digits\n    digits = [int(d) for d in s]\n    # Rotate the digits n times\n    digits = digits[n:] + digits[:n]\n    # Count the number of odd digits\n    count = sum(1 for d in digits if d % 2!= 0)\n    return count",
        "test": "assert odd_Equivalent('1010', 1) == 2",
        "num_ids": 1666,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common = set(nestedlist[i]) & set(nestedlist[j])\n            if common:\n                common_elements.extend(common)\n    return common_elements",
        "test": "assert common_in_nested_lists([[],[],[]]) == []",
        "num_ids": 1731,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_integer(text):\n    \"\"\"\n    This function checks if the given string represents an integer or not.\n\n    :param text: A string representing an integer\n    :return: True if the string represents an integer, False otherwise\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"1234\") == True",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d!= {}:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 741,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "test": "assert tuple_to_int((1,)) == 1",
        "num_ids": 948,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "test": "assert list_to_float([[1,2,3], [4,5,6], [7,8,9]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]",
        "num_ids": 2573,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    \n    while i < j:\n        mid = (i + j) // 2\n        if arr[mid] > arr[j]:\n            i = mid + 1\n        elif arr[mid] < arr[j]:\n            j = mid\n        else:\n            j -= 1\n    \n    # Find the element that appears only once\n    for k in range(len(arr)):\n        if arr[k] == arr[i]:\n            return arr[k]\n    \n    return -1",
        "test": "assert search([1, 2, 3, 3, 4, 4, 5, 5, 6, 7]) == 1",
        "num_ids": 2346,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]) * abs(list1[j][0]) * abs(list1[i][1]) * abs(list1[j][1])\n            if product > max_product:\n                max_product = product\n                \n    return max_product",
        "test": "assert max_product_tuple([(1, 2), (3, 4), (5, 6)]) == (5, 12) # (5, 12) is the maximum absolute product between numbers in pairs of tuples within the given list.",
        "num_ids": 1625,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Returns the sum of all amicable numbers from 1 to the specified limit.\n    '''\n    amicable_numbers = []\n\n    # Iterate through all numbers from 1 to the limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(num):\n            # Add the amicable number to the list\n            amicable_numbers.append(num)\n\n    # Return the sum of all amicable numbers\n    return sum(amicable_numbers)\n\n\ndef is_amicable(num):\n    '''\n    Checks if a given number is amicable.\n    '''\n    # Get the sum of all divisors of the number\n    divisors_sum = sum(divisor for divisor in range(1, num) if num % divisor == 0)\n\n    # Check if the sum of all divisors is equal to the number itself\n    return divisors_sum == num and divisors_sum!= 1 and divisors_sum!= num - 1\n",
        "test": "assert amicable_numbers_sum(20) == 31, \"Incorrect result for limit=20\"",
        "num_ids": 2454,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)",
        "test": "assert angle_complex(1,0) == 0",
        "num_ids": 1224,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def find_length(string):\n    n = len(string)\n    ans = 0\n    \n    for i in range(n):\n        count = 0\n        for j in range(i, n):\n            count += int(string[j])\n            if count == 0 or count == n - i:\n                ans = max(ans, j - i + 1)\n            elif count > n - i:\n                break\n                \n    return ans",
        "test": "assert find_length('10101') == 1",
        "num_ids": 3804,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #Find the larger number\n    if a>b:\n        larger=a\n        smaller=b\n    else:\n        larger=b\n        smaller=a\n\n    #Find the common divisors of the two numbers\n    divisor=1\n    while divisor<=larger:\n        if larger%divisor==0 and smaller%divisor==0:\n            common_divisor=divisor\n        divisor+=1\n\n    #Find the sum of common divisors\n    sum_of_common_divisors=0\n    divisor=1\n    while divisor<=common_divisor:\n        if common_divisor%divisor==0:\n            sum_of_common_divisors+=divisor\n        divisor+=1\n\n    #Return the sum of common divisors\n    return sum_of_common_divisors",
        "test": "assert sum(2,3) == 1",
        "num_ids": 1802,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n",
        "test": "assert long_words(5, \"The quick brown fox jumps over the lazy dog.\")!= [\"quick\", \"brown\", \"fox\", \"jumps\", \"lazy\", \"dog\"]",
        "num_ids": 1424,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function checks if the given matrix is a magic square or not.\n    A magic square is a square matrix filled with distinct positive integers from 1 to n^2,\n    where n is the size of the square. The sum of the values in each row, column, and diagonal should be the same.\n\n    Args:\n    my_matrix (list): A list of lists representing the matrix.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    '''\n\n    n = len(my_matrix)\n\n    # Check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Check if all elements in the matrix are positive integers from 1 to n^2\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] < 1 or my_matrix[i][j] > n**2:\n                return False\n\n    # Check if the sum of the values in each row, column, and diagonal is the same\n    row_sum = [0] * n\n    col_sum = [0] * n\n    diag_sum1 = 0\n    diag_sum2 = 0\n\n    for i in range(n):\n        for j in range(n):\n            # Check row sum\n            row_sum[i] += my_matrix[i][j]\n            # Check column sum\n            col_sum[j] += my_matrix[i][j]\n            # Check diagonal sum (from top left to bottom right)\n            if i == j:\n                diag_sum1 += my_matrix[i][j]\n            # Check diagonal sum (from top right to bottom left)\n            if i + j == n - 1:\n                diag_sum2 += my_matrix[i][j]\n\n    # Check if the sum of the values in each row, column, and diagonal is the same\n    if row_sum!= col_sum:\n        return False\n    if diag_sum1!= diag_sum2:\n        return False\n\n    # If all checks pass, the matrix is a magic square\n    return True",
        "test": "assert magic_square_test([[28, 13, 22, 4], [11, 10, 16, 27], [26, 15, 19, 7], [6, 23, 8, 25]]) == False",
        "num_ids": 3499,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        frequency[num] += 1\n        if frequency[num] > max_count:\n            max_count = frequency[num]\n            max_item = num\n    \n    return max_item",
        "test": "assert max_occurrences([1, 2, 2, 3, 3, 3]) == 3",
        "num_ids": 1647,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    vowel_indices = [i for i, letter in enumerate(str_list) if letter in vowels]\n    for i in range(len(vowel_indices)//2):\n        j = len(vowel_indices)-i-1\n        str_list[vowel_indices[i]], str_list[vowel_indices[j]] = str_list[vowel_indices[j]], str_list[vowel_indices[i]]\n    return ''.join(str_list)",
        "test": "assert reverse_vowels(\"aeiou\") == \"uoiea\"",
        "num_ids": 2057,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as input and returns a string.\n    \"\"\"\n    return str(tup1)",
        "test": "assert tup_string(\"abc\") == \"abc\"",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    \n    return negative_sum",
        "test": "assert sum_negativenum([-1, -2, -3, -4, -5]) == -15",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function finds the nth hexagonal number.\n\n    Parameters:\n    n (int): The number of the hexagonal number to find.\n\n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    return n*(2*n-1)",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n    return zero_count / len(nums)",
        "test": "assert zero_count(array('i', [1, 2, 3, 4, 5])) == 0.0",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Create a list of all powers of 2 up to the number n\n    powers_of_two = [2 ** i for i in range(int(n**0.5)+1)]\n    # Check if the number n can be represented as a sum of non-zero powers of 2\n    if n in powers_of_two:\n        return True\n    else:\n        return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(0) == False",
        "num_ids": 3055,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 1031,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        if type(sublist) == list:\n            for item in sublist:\n                result.append(item)\n        else:\n            result.append(sublist)\n    return result",
        "test": "assert extract_singly([[], [1, 2, 3], [4, 5, 6], [], [7, 8, 9], []]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}",
        "num_ids": 1698,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort algorithm.\n    \"\"\"\n    # find the length of the list\n    n = len(nums)\n    \n    # perform pancake sort\n    for i in range(n-1, 0, -1):\n        # find the index of the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # flip the maximum element to the beginning of the unsorted part of the list\n        if max_index!= i:\n            nums = flip(nums, max_index, i)\n            nums = flip(nums, 0, i-1)\n    \n    return nums\n    \ndef flip(nums, start, end):\n    \"\"\"\n    Helper function to reverse a portion of the list.\n    \"\"\"\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\n        \n    return nums",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 2343,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[1,2,3],[1,2,3]) == 3",
        "num_ids": 1339,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert find_lists(()) == 0 ",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 4",
        "num_ids": 1500,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        y = n - a * x\n        if y % b == 0:\n            return (x, y // b)\n    return None",
        "test": "assert find_solution(1, 2, 3) == (1, 1)",
        "num_ids": 1669,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Removes all elements from list1 that are also present in list2.\n    \"\"\"\n    for elem in list1[:]: # make a copy of the list to avoid modifying it while iterating\n        if elem in list2:\n            list1.remove(elem)\n    return list1",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 1363,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n // 2 + 1) // 2",
        "test": "assert sum_series(0) == 0",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi / s)\n    return area",
        "test": "assert area_polygon(7, 8) == 201.73319494402465",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i!= n // i:\n                return True\n    return False",
        "test": "assert div_sum(1) == False",
        "num_ids": 1903,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def count_char_position(str1):\n    # create an empty dictionary to store the count of each character\n    char_count = {}\n\n    # loop through each character in the string\n    for i, char in enumerate(str1):\n        # convert the character to lowercase (case insensitive)\n        char = char.lower()\n\n        # check if the character is a letter (a-z or A-Z)\n        if char.isalpha():\n            # add the character and its count to the dictionary\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # loop through the dictionary and count the number of characters that occur at the same position as the English alphabet\n    same_pos_count = 0\n    for i in range(ord('a'), ord('z')+1):\n        if chr(i) in char_count:\n            same_pos_count += 1\n\n    return same_pos_count",
        "test": "assert count_char_position(\"\") == 0",
        "num_ids": 2733,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1,2,3,4,5,6,7]) == 1",
        "num_ids": 1306,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 892,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes two arguments: a list and a number.\n    It returns the number of times the number appears in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5,1,2,3], 1) == 2",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 1426,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "test": "assert perimeter_pentagon(10) == 50",
        "num_ids": 858,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count",
        "test": "assert count_occurance(\"hello std world\") == 1",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True",
        "test": "assert check_type((1, 2, 3)) == True, \"Incorrect data type check for tuple of integers.\"",
        "num_ids": 1088,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if arr[0] == x:\n        return True\n    if arr[n-1] == x:\n        return True\n    if arr[n//2] == x:\n        return True\n    return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 2) == False",
        "num_ids": 2663,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "test": "assert odd_values_string(\"hello world\") == \"hlowrd\"",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three arguments and returns the minimum of them.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(5,2,9) == 2",
        "num_ids": 942,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function checks whether all the bits are set in the given range or not.\n    Input: n (integer), l (integer), r (integer)\n    Output: Boolean value True or False.\n    '''\n    # To check whether all the bits are set or not, we need to check if the difference between the maximum and minimum value is equal to the range itself.\n    if (1 << r) - (1 << l) == (1 << r) - 1:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b1101001,1,3) == False # bits 1,2 and 4 are set in range [1,3]",
        "num_ids": 2039,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def re_arrange_array(arr, n):\n    # get indices of negative and positive elements\n    neg_indices = [i for i in range(n) if arr[i] < 0]\n    pos_indices = [i for i in range(n) if arr[i] >= 0]\n    \n    # sort negative and positive elements separately\n    neg_arr = sorted([arr[i] for i in neg_indices])\n    pos_arr = sorted([arr[i] for i in pos_indices])\n    \n    # combine negative and positive elements in the original order\n    result = [0] * n\n    for i in range(n):\n        if i < len(neg_indices):\n            result[i] = neg_arr[i]\n        else:\n            result[i] = pos_arr[i - len(neg_indices)]\n    \n    return result",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 2730,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces blank spaces in the given string with the given character.\n    '''\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank(\"hello world\", \"*\") == \"hello*world\"",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n] # Create a heap of the first n elements of the list\n    heapq.heapify(heap) # Convert the heap into a max-heap\n\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]: # If the current element is larger than the root of the heap\n            heapq.heappushpop(heap, list1[i]) # Replace the root with the current element and re-heapify\n\n    return sorted(heap, reverse=True) # Return the n largest elements from the heap in descending order",
        "test": "assert larg_nnum([1, 2, 3, 4, 5], 3) == [5, 4, 3]",
        "num_ids": 1797,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    Parameters:\n    r - radius of the cylinder\n    h - height of the cylinder\n    \n    Returns:\n    lateral surface area of the cylinder\n    '''\n    lateral_area = 2 * math.pi * r * h\n    return lateral_area",
        "test": "assert lateralsuface_cylinder(1,2) == 12.566370614359172 # correct",
        "num_ids": 1558,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "test": "assert volume_cube(3) == 27",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    This function takes an integer as input and sets all even bits to 1.\n    \"\"\"\n    even_bits = bin(n & 0xAAAAAAAA)  # get even bits of n using bitwise AND operator with 0xAAAAAAAA\n    return int(even_bits.replace('0b', ''), 2) | n  # set even bits to 1 and return the updated number",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 1342,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    return dict(Counter(test_list))",
        "test": "assert check_occurences([(1, 2), (3, 4), (1, 2), (5, 6)]) == {(1, 2): 2, (3, 4): 1, (5, 6): 1}",
        "num_ids": 1812,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count",
        "test": "assert number_of_substrings('aaa') == 6",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Returns the total number of sequences of length n, such that each element is a positive integer and is\n    greater than or equal to twice the previous element but less than or equal to m.\n\n    Args:\n        m (int): The upper limit of the sequence.\n        n (int): The length of each sequence.\n\n    Returns:\n        int: The total number of possible sequences.\n    \"\"\"\n\n    if n == 1:\n        return m\n\n    count = 0\n    prev_max = m\n    prev_min = m // 2\n    for i in range(2, n + 1):\n        curr_max = prev_max // 2 + 1\n        curr_min = prev_min // 2 + 1\n        count += curr_max - curr_min + 1\n        prev_max, prev_min = curr_max, curr_min\n\n    return count\n",
        "test": "assert get_total_number_of_sequences(5,2) == 2 # 2 possible sequences: [2,2], [3,3]",
        "num_ids": 2287,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check that both lists have at least one element\n    if len(list1) == 0 or len(list2) == 0:\n        raise ValueError('Both lists must have at least one element')\n\n    # remove the last element from list1\n    list1 = list1[:-1]\n\n    # add the elements of list2 to the end of list1\n    list1.extend(list2)\n\n    # return the modified list1\n    return list1",
        "test": "assert replace_list([1,2,3], [4,5]) == [1,2,4,5]",
        "num_ids": 1186,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"hello world\") == 11",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if int(math.sqrt(N))**2 == N:\n        return (int(math.sqrt(N)) + 1)**2\n    else:\n        return (int(math.sqrt(N)) + 1)**2",
        "test": "assert next_Perfect_Square(2) == 4",
        "num_ids": 1340,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def max_sum(arr): \n    n = len(arr)\n    # initialize variables\n    prev = 0\n    curr = arr[0]\n    max_sum = 0\n    \n    # loop through array\n    for i in range(1, n):\n        temp = curr\n        curr = max(prev + arr[i], arr[i])\n        prev = temp\n        max_sum = max(max_sum, curr)\n    \n    return max_sum",
        "test": "assert max_sum([1,2,3,4,5]) == 9",
        "num_ids": 2357,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    This function computes the square root of a number using the Babylonian method.\n    \"\"\"\n    # Initialize the guess variable to the square root of the number\n    guess = number ** 0.5\n    # Initialize the epsilon variable to a very small value (e.g., 0.0001)\n    epsilon = 0.0001\n    # Keep looping until the difference between the guess and the number is smaller than epsilon\n    while abs(guess**2 - number) > epsilon:\n        # Update the guess using the Babylonian formula\n        guess = (guess + number/guess) / 2\n    # Return the computed square root\n    return guess",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 1740,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    maxLength = 1\n    for k in range(2, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n                maxLength = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n                maxLength = max(maxLength, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return maxLength",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 2767,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "test": "assert harmonic_sum(1) == 1.0",
        "num_ids": 965,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create an empty list to store the intersection\n    intersection = []\n    \n    # Loop through the first array\n    for num in array_nums1:\n        # Check if the number is also in the second array\n        if num in array_nums2:\n            # If so, add it to the intersection list\n            intersection.append(num)\n    \n    return intersection",
        "test": "assert intersection_array([1,2,3],[2,3,4]) == [2,3]",
        "num_ids": 1481,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X(('apple', 'banana', 'orange', 'banana', 'pear'), 'banana') == 2, \"The function should return 2 for ('apple', 'banana', 'orange', 'banana', 'pear', 'banana'), 'banana'\"",
        "num_ids": 1162,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def insert_element(lst, ele):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(ele)\n        new_lst.append(i)\n    return new_lst",
        "test": "assert insert_element([1, 2, 3, 4, 5], 0) == [0, 1, 0, 2, 0, 3, 0, 4, 0, 5]",
        "num_ids": 1392,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        print(\"Polar coordinates of\", num, \"are\", cmath.polar(num))",
        "test": "assert convert((3-4j)) == (cmath.polar(3-4j)[0], cmath.polar(3-4j)[1])",
        "num_ids": 1378,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1001,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]",
        "test": "assert combinations_colors(['red', 'green', 'blue'], 2) == [('red','red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')]",
        "num_ids": 2216,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(1) == 0",
        "num_ids": 1476,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(2,3) == (3,2)",
        "num_ids": 782,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 1793,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        p = [2, 3]\n        for i in range(2, n):\n            p.append(p[i-1] + p[i-2])\n        return p[n-1]",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 1884,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result",
        "test": "assert division_elements((2, 4), (1, 2)) == (2, 2)",
        "num_ids": 1557,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Return the two parts as a tuple\n    return (part1, part2)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 1901,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "test": "assert dog_age(5) == 10",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]",
        "test": "assert list_split([], 2) == []",
        "num_ids": 1862,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2",
        "test": "assert lateralsurface_cube(10) == 600",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum to zero\n    sum_of_squares = 0\n    \n    # Loop through the first n odd natural numbers and add their squares to the sum\n    for i in range(1, n*2, 2):\n        sum_of_squares += i**2\n        \n    # Return the sum of squares\n    return sum_of_squares",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1099,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * find_star_num(n-1) + n - 1",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0",
        "num_ids": 1561,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        if count % 2 == 0:\n            sum += count**5\n        count += 1\n    return sum\n",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result",
        "test": "assert rear_extract([(1,2),(3,4),(5,6)]) == [2, 4, 6]",
        "num_ids": 1312,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "test": "assert substract_elements((1,2,3),(0,3,0)) == (1, -1, 3) # subtracts 0 from the first element of the second tuple and 3 from the second element of the second tuple to get (1,-1,3)",
        "num_ids": 1685,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(2) == 2 # if n is 2, the sum of even index binomial coefficients is 2.",
        "num_ids": 1194,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    volume = 3.141592653589793 * r ** 2 * h\n    return volume",
        "test": "assert volume_cylinder(0, 5) == 0, \"volume_cylinder(0, 5) should equal 0\"",
        "num_ids": 1312,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({'a': 2, 'b': 3, 'c': 4}, 3) == {'b': 3, 'c': 4}",
        "num_ids": 1646,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count",
        "test": "assert count_first_elements((1, 2, 3, 2, 1)) == 1",
        "num_ids": 1189,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 10\n        count += 1\n    return num",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1217,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 1636,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True # test case 1",
        "num_ids": 977,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Args:\n        nums1 (list): List of integers.\n        nums2 (list): List of integers.\n\n    Returns:\n        list: A new list containing the element-wise subtraction of nums1 and nums2.\n    \"\"\"\n\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    # Initialize an empty list to store the element-wise subtraction\n    result = []\n\n    # Iterate over the lists and subtract corresponding elements\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result",
        "test": "assert sub_list([0,0,0],[1,1,1]) == [-1,-1,-1]",
        "num_ids": 1333,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def validate(n): \n    if n < 10:\n        return True\n    digits = [int(digit) for digit in str(n)]\n    freq = [digits.count(digit) for digit in range(10)]\n    for digit in freq:\n        if digit > digit:\n            return False\n    return True",
        "test": "assert validate(12345) == True # valid input",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in lst:\n        if item!= elem:\n            return False\n    return True\n",
        "test": "assert check_element([1, 1, 1, 1, 1], 1) == True",
        "num_ids": 1057,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = 'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three('abc') == False",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(k):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 1) == 15",
        "num_ids": 2176,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(0, n*2, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9, 10]]) == [6, 7, 8, 9, 10]",
        "num_ids": 1756,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a 2D list to store the number of ways to paint the fence with k colors\n    dp = [[0 for x in range(k)] for y in range(n)]\n\n    # Base cases: the first row and first column are always painted with one color\n    for i in range(n):\n        dp[i][0] = 1\n    for j in range(k):\n        dp[0][j] = 1\n\n    # Fill the rest of the 2D list using dynamic programming\n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n\n    # The number of ways to paint the fence is the last element in the last row of the 2D list\n    return dp[n-1][k-1]",
        "test": "assert count_no_of_ways(1,1) == 1",
        "num_ids": 2185,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find(n, m):\n    return n // m",
        "test": "assert find(8,2) == 4",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function finds the third side of a right-angled triangle given the two sides.\n    \"\"\"\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 998,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes a heterogeneous list as input and returns the maximum value in the list.\n    \"\"\"\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "test": "assert max_val([1,2,3,4,5]) == 5",
        "num_ids": 1232,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisor = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisor += i\n    return sum_divisor",
        "test": "assert sum_div(1) == 1, \"The sum of divisors of 1 is 1\"",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
        "test": "assert get_Inv_Count([]) == 0",
        "num_ids": 3245,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list structure as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            flattened_list.extend(flatten_list(sublist))\n        else:\n            flattened_list.append(sublist)\n    return flattened_list",
        "test": "assert flatten_list([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 1693,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n    for elem in stdata:\n        freq[elem] += 1\n    \n    # Calculate the maximum aggregate\n    max_agg = 0\n    for elem in stdata:\n        max_agg += elem * freq[elem]\n    return max_agg",
        "test": "assert max_aggregate([(2,3), (4,5), (6,7)]) == 25",
        "num_ids": 2822,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # initialize a list to store the count of each prefix sum\n    prefix_count = [1] * (2 * n + 1)\n\n    # loop through each prefix sum\n    for i in range(1, 2 * n):\n        # loop through each possible value for the last bit\n        for j in range(2):\n            # update the count of the prefix sum\n            prefix_count[i + j] += prefix_count[i - 1]\n\n    # initialize a list to store the count of all binary sequences\n    count = [0] * (2 ** n)\n\n    # loop through each binary sequence of length 2n\n    for i in range(2 ** n):\n        # convert the binary sequence to a list of digits\n        digits = [int(d) for d in bin(i)[2:].zfill(n)]\n        # compute the sum of the first n bits\n        first_sum = sum(digits)\n        # compute the sum of the last n bits\n        last_sum = sum(digits[-n:])\n        # compute the index of the prefix sum in the prefix_count list\n        index = first_sum - last_sum\n        # update the count of the binary sequence\n        count[i] = prefix_count[index]\n\n    # return the total count of binary sequences\n    return sum(count)",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 1661,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    depth = 1\n    for v in d.values():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n    return depth",
        "test": "assert dict_depth({'a': 1}) == 1",
        "num_ids": 1272,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initializing the size of the array\n    n = len(arr)\n    \n    # Performing rotations\n    for i in range(rotations):\n        arr = arr[-1:]+arr[:-1]\n    \n    # Checking if index is within the given range\n    if (index < 0 or index >= n):\n        return \"Index out of range\"\n    \n    # Finding the element at the given index\n    return arr[index]",
        "test": "assert find_Element([1,2,3,4,5,6,7,8,9], 1, 0, 0) == 1",
        "num_ids": 1980,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    This function returns two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n    if len(result) < 2:\n        return 'Not enough words starting with \"p\" found'\n    return result[0], result[1]",
        "test": "assert start_withp(['apple', 'pear', 'peach', 'pineapple']) == ('pear', 'peach')",
        "num_ids": 1458,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0]*n\n    for i in range(n):\n        if i < index:\n            dp[i] = a[i]\n        else:\n            dp[i] = max(dp[j]+a[i] for j in range(i+1))\n    if k > index:\n        return dp[index] + sum(a[index+1:k])\n    else:\n        return dp[index]",
        "test": "assert max_sum_increasing_subseq([3, 4, 5, 1, 2], 5, 2, 4) == 10 # (5, 2)",
        "num_ids": 3025,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Slice the tuple from index m to index n\n    tuplex_copy = tuplex_copy[m:n]\n    \n    return tuplex_copy",
        "test": "assert colon_tuplex((1, 2, 3, 4), 2, 4) == (3, 4)",
        "num_ids": 1457,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: The two lists must have the same length.\"\n\n    products = []\n    for i in range(len(nums1)):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n\n    sorted_products = sorted(products, reverse=True)\n\n    result = []\n    for i in range(N):\n        result.append(sorted_products[i])\n\n    return result",
        "test": "assert large_product([10,2,3,4], [5,20,6,8], 2) == [50, 40]",
        "num_ids": 2434,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(3, 5) == 5",
        "num_ids": 669,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"abc\") == (\"a\", \"b\", \"c\")",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as input and returns the number with the left most unset bit set to 1.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n & ~(n - 1)",
        "test": "assert set_left_most_unset_bit(1) == 1",
        "num_ids": 1194,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function finds the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(1,1) == 1/3*math.pi",
        "num_ids": 1357,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    p = 1\n    while (p * 2) <= n:\n        p *= 2\n    \n    return p",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 1130,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1 \n    else: \n        return find_lucas(n-1) + find_lucas(n-2) ",
        "test": "assert find_lucas(0) == 2 ",
        "num_ids": 1060,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def add_string(lst, fmt):\n    '''\n    This function takes a list and a format string as input. It applies the format string to each element of the list and returns a new list containing the modified elements.\n    '''\n    # Create an empty list to store the modified elements\n    modified_lst = []\n    # Iterate over each element in the input list\n    for elem in lst:\n        # Apply the format string to the element and append it to the modified list\n        modified_lst.append(fmt.format(elem))\n    # Return the modified list\n    return modified_lst",
        "test": "assert add_string([1,2,3], \"Hello\") == ['Hello', 'Hello', 'Hello']",
        "num_ids": 1246,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        if l1[i] not in result:\n            result[l1[i]] = {}\n        if l2[i] not in result[l1[i]]:\n            result[l1[i]][l2[i]] = []\n        result[l1[i]][l2[i]].append(l3[i])\n    return result",
        "test": "assert convert_list_dictionary(['key1', 'key2', 'key3'], [1, 2, 3], ['a', 'b', 'c']) == {",
        "num_ids": 2805,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1692,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 1469,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True",
        "test": "assert check_distinct((1, 2, 3)) == True",
        "num_ids": 946,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
        "test": "assert first_non_repeating_character(\"abcabcde\") == 'd'",
        "num_ids": 1701,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_char('abc') == False",
        "num_ids": 1018,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median",
        "test": "assert median_numbers(4,5,6) == 5",
        "num_ids": 1351,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += sum_digits(num)\n    return sum\n\ndef sum_digits(num):\n    '''\n    Returns the sum of digits of a given number.\n    '''\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num //= 10\n    return sum",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1588,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "test": "assert bitwise_xor((1, 2, 3), (4, 5, 6)) == (5, 7, 5) # (1 ^ 4, 2 ^ 5, 3 ^ 6) = (5, 7, 5)",
        "num_ids": 1540,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "test": "assert add_nested_tuples(((1,2),(3,4)),((5,6),(7,8))) == ((6, 8), (10, 12))",
        "num_ids": 1968,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(5,10) == 5",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex(('apple', 'banana', 'orange'), 'grape') == False",
        "num_ids": 917,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Returns True if the parity of the given number is odd, False otherwise.\n    \"\"\"\n    return x % 2 == 1",
        "test": "assert find_Parity(2) == False",
        "num_ids": 782,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = list(str(n))\n    arr.sort(reverse=True)\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            j = i\n            while j < len(arr) and arr[j] == arr[i]:\n                j += 1\n            arr[i], arr[j-1] = arr[j-1], arr[i]\n            break\n    arr.sort(reverse=True)\n    return int(''.join(arr))\n",
        "test": "assert rearrange_bigger(12) == 21",
        "num_ids": 2494,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n\n    result = []\n    for i in range(k):\n        pair = heapq.heappop(heap)\n        result.append((pair[1], pair[2]))\n\n    return result",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)]",
        "num_ids": 2153,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(10,1),(5,2),(3,4),(7,6),(9,8)]) == (1,8)",
        "num_ids": 1792,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for i in listval:\n        if type(i) == type(min_val):\n            if i < min_val:\n                min_val = i\n        else:\n            if type(i) == type(min_val):\n                min_val = i\n    return min_val",
        "test": "assert min_val([1,2,3,4,5]) == 1",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = words[0]\n    for word in words[1:]:\n        camel_case_word += word.capitalize()\n    return camel_case_word",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 979,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function extracts the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1][1]",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == 4",
        "num_ids": 1299,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if any value in the first list is present in the second list.\n    If no value is found, it returns False.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3],[2,3,4]) == True",
        "num_ids": 1029,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n    elif n == 2:\n        return (max(arr[0], arr[1]), min(arr[0], arr[1]))\n    else:\n        max_product = -float('inf')\n        max_pair = None\n        for i in range(n):\n            for j in range(i+1, n):\n                product = arr[i] * arr[j]\n                if product > max_product:\n                    max_product = product\n                    max_pair = (arr[i], arr[j])\n        return max_pair",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == (4, 5)",
        "num_ids": 1917,
        "indeed": true
    },
    {
        "number": 417,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    for t in Input:\n        if common_first_element is None:\n            common_first_element = t[0]\n        elif common_first_element!= t[0]:\n            return None\n    return common_first_element",
        "test": "assert group_tuples([(1,2,3), (1,2,4), (1,2,5)]) == 1",
        "num_ids": 1731,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem",
        "test": "assert Find_Max(['apple', 'banana', 'cherry']) == 'banana'",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def round_and_sum(list1):\n    '''\n    This function takes a list of numbers as input and rounds each number to the nearest integer and returns the sum of rounded numbers multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "test": "assert round_and_sum([1.234, 2.345, 3.456]) == 10.0",
        "num_ids": 1496,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**3\n        i += 2\n    return sum\n",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def concatenate_tuple(test_tup, delimiter='-'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]  # remove the last delimiter",
        "test": "assert concatenate_tuple(('a',)) == 'a'",
        "num_ids": 1159,
        "indeed": true
    },
    {
        "number": 422,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1, \"Incorrect output for n = 1\"",
        "num_ids": 1128,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function will extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return tuple(rear_list)",
        "test": "assert extract_rear(('orange', 'grape', 'kiwi')) == ('e', 'e', 'i')",
        "num_ids": 1259,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 1) == 0",
        "num_ids": 1147,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1009,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "test": "assert change_date_format('2021-10-01') == '01-10-2021'",
        "num_ids": 1755,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Start with a big gap, then reduce the gap\n    gap = n//2\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap,n):\n            # add a[i] to the elements that have been gap sorted\n            # save a[i] in temp and make a hole at position i\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] >temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap for the next iteration\n        gap //= 2\n    \n    return my_list",
        "test": "assert shell_sort([4, 2, 5, 1, 3]) == [1, 2, 3, 4, 5]",
        "num_ids": 2079,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] and test_tup2[i]),)\n    return result",
        "test": "assert and_tuples((1, 1, 1), (1, 1, 1)) == (1, 1, 1)",
        "num_ids": 1371,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    if d < 0:\n        return None\n    else:\n        x = (-b + d**0.5)/(2*a)\n        return x",
        "test": "assert parabola_directrix(-1, 3, -2) == 1, \"parabola_directrix(-1, 3, -2) should return 1\"",
        "num_ids": 1805,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3], [3, 4, 5]) == True",
        "num_ids": 1102,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median",
        "test": "assert median_trapezium(10,15,20) == 12.5",
        "num_ids": 1325,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 2) == True",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one(\"a\") == False # Should return False",
        "num_ids": 810,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the number.\n    \"\"\"\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        return n % 10",
        "test": "assert last_Digit(123) == 3",
        "num_ids": 705,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def neg_nos(list1):\n    '''\n    This function returns the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([-1,-2,-3,-4,-5,-6]) == [-1,-2,-3,-4,-5,-6]",
        "num_ids": 1135,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if ord(i)%2 == 0:\n            new_str += i\n    return new_str",
        "test": "assert remove_odd('hello') == 'hll'",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 1771,
        "indeed": true
    },
    {
        "number": 439,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result *= 10\n        result += num\n    return result",
        "test": "assert multiple_to_single([1]) == 1",
        "num_ids": 991,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w*ly\\b'  # regex pattern to find adverb ending with 'ly'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
        "test": "assert find_adverb_position(\"The cat in the hat\") == [(4, 'in'), (10, 'hat')]",
        "num_ids": 2679,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function calculates the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area",
        "test": "assert surfacearea_cube(2) == 24, \"Surface area of cube of size 2 should be 24\"",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "test": "assert positive_count(array('i', [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])) == 0",
        "num_ids": 1325,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    \n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n            \n    return largest",
        "test": "assert largest_neg([1, 2, 3, 4, -5]) == -5",
        "num_ids": 1223,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][K:]\n    return test_list",
        "test": "assert trim_tuple([(1,2,3), (4,5,6)], 0) == [(1,2,3), (4,5,6)]",
        "num_ids": 1808,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple, after performing index-wise multiplication of their elements.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 1523,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary containing the count of each element of the list in the tuple.\n    '''\n    count_dict = {}\n    for element in lst:\n        count_dict[element] = tup.count(element)\n    return count_dict",
        "test": "assert count_Occurrence(('apple', 'banana', 'orange', 'apple'), ['apple', 'orange']) == {'apple': 2, 'orange': 1}",
        "num_ids": 1818,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 1154,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and the desired size of the string to be extracted.\n    It returns a list of extracted strings of the specified size.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) >= size:\n            result.append(string[:size])\n    return result",
        "test": "assert extract_string(['apple', 'banana', 'cherry', 'orange'], 3) == ['app', 'ban', 'che', 'ora']",
        "num_ids": 1651,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "test": "assert remove_whitespaces(\"Hello world\") == \"Helloworld\"",
        "num_ids": 929,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Function to calculate loss amount on sale\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0",
        "test": "assert loss_amount(1000,1000) == 0",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # Initialize the sum of factors\n    sum_of_factors = 0\n    \n    # Loop through all numbers from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        # If n is divisible by i, add i to the sum of factors\n        if n % i == 0:\n            sum_of_factors += i\n            \n            # If i is even and less than or equal to the square root of n,\n            # add the other even factor to the sum of factors\n            if i % 2 == 0 and i <= int(math.sqrt(n)):\n                sum_of_factors += int(n/i)\n    \n    return sum_of_factors",
        "test": "assert sumofFactors(1) == 0",
        "num_ids": 1735,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches",
        "test": "assert text_match_wordz('hello world') == []",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if the month has 31 days, False otherwise.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None",
        "test": "assert check_monthnumb_number(4) == True  # April has 30 days",
        "num_ids": 1469,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for string in stringlist:\n        reversed_stringlist.append(string[::-1])\n    return reversed_stringlist",
        "test": "assert reverse_string_list([\"hello\", \"world\"]) == [\"olleh\", \"dlrow\"]",
        "num_ids": 1185,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist",
        "test": "assert Find_Min([[1,2],[3,4,5]]) == [1,2]",
        "num_ids": 1535,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(5,10) == 50",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expression to match all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    # Remove all uppercase substrings from the string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1",
        "test": "assert remove_uppercase(\"Python is awesome\") == \"Pythn s wsm\"",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([[1,2],[3,4,5]]) == [1, 3]",
        "num_ids": 1118,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr('HELLO WORLD') == 10",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result",
        "test": "assert combinations_list([1, 2]) == [(1, 2)]",
        "num_ids": 1569,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Returns the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(arr[i], max(max_ending_here * arr[i], min_ending_here * arr[i]))\n        min_ending_here = min(arr[i], min(temp * arr[i], min_ending_here * arr[i]))\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6, \"Test case 1 failed.\"",
        "num_ids": 2073,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and an integer n as input. It checks if all values in the dictionary are the same.\n    If all values are the same, it returns True. Otherwise, it returns False.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True",
        "num_ids": 1276,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}",
        "test": "assert drop_empty({'a':1, 'b':2, 'c':''}) == {'a':1, 'b':2}",
        "num_ids": 1286,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    max_product = float('-inf')\n    for i in range(len(arr)):\n        # We can form a subsequence of length i+1 from the current index i\n        # by starting with the current element and then adding the next element\n        # that is greater than the current element and multiplying all these elements together\n        # This gives us the maximum product that can be obtained from the subsequence of length i+1\n        for j in range(i+1, len(arr)):\n            if arr[j] > arr[i]:\n                product = arr[i]\n                for k in range(i+1, j+1):\n                    product *= arr[k]\n                if product > max_product:\n                    max_product = product\n    \n    return max_product",
        "test": "assert max_product([-2,0,-1]) == 0 # [-2,-1] and [0] are increasing subsequences with a product of 0",
        "num_ids": 2237,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def add_pairwise(test_tup):\n    '''\n    This function finds the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(sum(pair) for pair in zip(test_tup, test_tup[1:]))",
        "test": "assert add_pairwise((1, 2, 3, 4)) == (3, 5, 7)",
        "num_ids": 1416,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_remainder(arr, n): \n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result",
        "test": "assert find_remainder([1,2,3], 5) == 1",
        "num_ids": 1027,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True",
        "num_ids": 1134,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if t1 == t2:\n                if t1 not in result:\n                    result.append(t1)\n    \n    return result",
        "test": "assert tuple_intersection([(1,2),(3,4),(5,6)],[(7,8),(9,10),(11,12)]) == []",
        "num_ids": 2283,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello world\", \"l\", \"x\") == \"hexxo worxd\"",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict",
        "test": "assert sort_counter({'apple': 3, 'banana': 2, 'orange': 1}) == {'orange': 1, 'apple': 3, 'banana': 2}",
        "num_ids": 1555,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum((max(nums), min(nums)))",
        "test": "assert big_sum([10, -5, 20, -3, 15]) == 25",
        "num_ids": 1042,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def is_lower(string):\n    '''\n    Converts the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"hello world\") == \"hello world\"",
        "num_ids": 607,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'(?<!\\w)[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result",
        "test": "assert remove_lowercase('HELLO WORLD') == 'HELLO WORLD'",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns its first digit.\n    \"\"\"\n    return int(str(n)[0])",
        "test": "assert first_Digit(12345) == 1",
        "num_ids": 951,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and returns a list of odd integers from the list.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1035,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_n\n",
        "test": "assert difference(1) == 0 ",
        "num_ids": 1433,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,3,5,7], 4) == 0",
        "num_ids": 1171,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "test": "assert toggle_string(\"hello world\") == \"HELLO WORLD\"",
        "num_ids": 997,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_diff = abs(n1-n2)\n    digit_sum = 0\n    while digit_diff > 0:\n        digit_sum += digit_diff % 10\n        digit_diff //= 10\n    return digit_sum",
        "test": "assert digit_distance_nums(1, 1) == 0 # (1-1)+(1-1)+(1-1)+(1-1)+(1-1) = 0",
        "num_ids": 2067,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "test": "assert max_sub_array_sum([1,2,3,4,5], 5) == 15",
        "num_ids": 2583,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert tuples to sets to find their union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    \n    # Convert set back to tuple and sort it\n    result_tup = tuple(sorted(union_set))\n    \n    return result_tup",
        "test": "assert union_elements((1,2,3),(2,3,4)) == (1,2,3,4)",
        "num_ids": 1788,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 1438,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'  # pattern to match any text between quotation marks\n    matches = re.findall(pattern, text)  # find all matches of the pattern in the text\n    return matches",
        "test": "assert extract_values('the value is \"42\"') == ['42']",
        "num_ids": 1062,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10",
        "num_ids": 1112,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n = n // 10\n        return sum",
        "test": "assert sum_digits(12345) == 15",
        "num_ids": 1017,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Check whether a list is sorted in ascending order or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i] < list1[i-1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 1026,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"cherry\"], [\"dog\", \"cat\", \"bird\"], [\"orange\", \"grape\", \"pear\"]]) == [['apple', 'banana', 'cherry'], ['bird', 'cat', 'dog'], ['grape', 'orange', 'pear']]",
        "num_ids": 1958,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        if nums[i] not in unique_nums:\n            unique_nums.append(nums[i])\n    return unique_nums",
        "test": "assert two_unique_nums([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 1594,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 1172,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*3.14*r*h + 2*3.14*r**2\n    return surface_area",
        "test": "assert surfacearea_cylinder(2,3) == 50.26548245743669",
        "num_ids": 1576,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    \n    temp_dict = {}\n    for i in range(len(B)):\n        if B[i] not in temp_dict:\n            temp_dict[B[i]] = 1\n        else:\n            temp_dict[B[i]] += 1\n    \n    for i in range(len(A) - len(B) + 1):\n        temp_dict_copy = temp_dict.copy()\n        for j in range(len(B)):\n            if A[i+j] not in temp_dict_copy:\n                break\n            else:\n                temp_dict_copy[A[i+j]] -= 1\n                if temp_dict_copy[A[i+j]] == 0:\n                    del temp_dict_copy[A[i+j]]\n        if not temp_dict_copy:\n            return True\n    \n    return False",
        "test": "assert is_Sub_Array([1,2,3], [1,2,3]), \"The given lists are identical, so they should be sublists.\"",
        "num_ids": 1789,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    \n    fact = 1\n    while n > 0:\n        fact *= n\n        n -= 1\n    \n    return fact % 10",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 1045,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 2026,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "test": "assert find_dissimilar((1, 2, 3), (4, 5, 6)) == (1, 2, 3)",
        "num_ids": 1732,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes a nested tuple and a function as arguments.\n    The function is used to check if an element is even or odd.\n    If an element is even, it is kept in the nested tuple.\n    If an element is odd, it is removed from the nested tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            new_tuple = even_ele(test_tuple[i], even_fnc)\n            result.append(new_tuple)\n        else:\n            if even_fnc(test_tuple[i]):\n                result.append(test_tuple[i])\n    return tuple(result)\n\ndef is_even(num):\n    '''\n    This is a helper function to check if a number is even or odd.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert even_ele(((1, 2), (3, 4), (5, 6)), lambda x: x%2 == 0)!= ((1, 3), (3, 5))",
        "num_ids": 2005,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*b*s + 2*b*b",
        "test": "assert surface_Area(1, 2) == 10",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def my_dict(dict1):\n    '''\n    Check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 794,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += catalan_number(i) * catalan_number(n-i-1)\n        return result",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1377,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    adverbs = []\n    for match in matches:\n        adverbs.append(text[match.start():match.end()])\n    return adverbs",
        "test": "assert find_adverbs(\"The dog barks loudly.\") == ['loudly'], \"Failed\"",
        "num_ids": 1662,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result",
        "test": "assert expensive_items([('apple', 5), ('banana', 3), ('orange', 7), ('pear', 2)], 3) == [('orange', 7), ('banana', 3), ('pear', 2)], 'incorrect result'",
        "num_ids": 2338,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split_Arr(l, n):\n    '''\n    This function takes a list and an integer n as inputs and splits the list at the nth element and adds the first part to the end.\n    '''\n    # split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # add the first part to the end of the list\n    l = second_part + first_part\n    return l",
        "test": "assert split_Arr([1,2,3,4,5,6], 3) == [4,5,6,1,2,3]",
        "num_ids": 1328,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    return max(nums) - min(nums)\n",
        "test": "assert big_diff([10, 2, 8, 1, 12]) == 11",
        "num_ids": 926,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two numbers as input and returns a list of all the perfect squares\n    between the two numbers (inclusive).\n    '''\n    # create an empty list to store the perfect squares\n    squares = []\n    \n    # loop through all the numbers from a to b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        root = int(num**0.5)\n        if root**2 == num:\n            # add the perfect square to the list if it's between a and b\n            squares.append(num)\n    \n    # return the list of perfect squares\n    return squares",
        "test": "assert perfect_squares(1, 100) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
        "num_ids": 1581,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = x + y*1j\n    return z.real, z.imag",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 1277,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1298,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
        "test": "assert binomial_Coeff(5,3) == 10 # correct",
        "num_ids": 1670,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an ip address.\n    \"\"\"\n    # Split the ip address into octets\n    octets = ip.split('.')\n    # Remove leading zeroes from each octet\n    octets = [str(int(octet)) for octet in octets]\n    # Join the octets back together and return the result\n    return '.'.join(octets)",
        "test": "assert removezero_ip(\"1.2.3.4\") == \"1.2.3.4\"",
        "num_ids": 1541,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and the first odd number in the list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in lst:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    return abs(even_num - odd_num)",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1 # first even is 2 and first odd is 1",
        "num_ids": 1875,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def min_Swaps(str1, str2):\n    # Check if the strings are of equal length\n    if len(str1)!= len(str2):\n        print(\"Strings should be of equal length\")\n        return\n\n    # Convert the strings into lists of characters\n    list1 = list(str1)\n    list2 = list(str2)\n\n    # Initialize variables for swaps and the current index\n    swaps = 0\n    i = 0\n\n    # Traverse through the lists and compare characters at corresponding positions\n    while i < len(list1):\n        if list1[i]!= list2[i]:\n            # Swap the characters if they are different\n            temp = list1[i]\n            list1[i] = list2[i]\n            list2[i] = temp\n\n            # Increment the swaps counter\n            swaps += 1\n\n        # Move to the next position\n        i += 1\n\n    # Return the minimum number of swaps required to convert str1 to str2\n    return swaps",
        "test": "assert min_Swaps('1010101', '1110001') == 2",
        "num_ids": 2013,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "test": "assert tuple_size((1, 2)) == sys.getsizeof((1, 2))",
        "num_ids": 1021,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    \n    if k > n + m:\n        return None\n    \n    if k <= n:\n        return arr1[k-1]\n    \n    if k > n and k <= n+m:\n        return arr2[k-n-1]",
        "test": "assert find_kth([1,3,5,7], [2,4,6,8], 3) == 5",
        "num_ids": 2497,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes a number as input and returns True if it is an Armstrong number, False otherwise.\n    '''\n    # Convert the number to a string\n    number_str = str(number)\n    # Calculate the length of the number\n    length = len(number_str)\n    # Calculate the sum of the cube of each digit\n    sum_of_cubes = sum([int(digit)**length for digit in number_str])\n    # Check if the sum is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 1622,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 1041,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None",
        "test": "assert first_repeated_char(\"abcabc\") == 'a'  # first repeated char is 'a'",
        "num_ids": 1032,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while i <= n:\n        # Check if i is a Lucas number\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            ludic.append(i)\n        i += 1\n    return ludic",
        "test": "assert get_ludic(0) == []",
        "num_ids": 1491,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words separated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)",
        "test": "assert reverse_words('1 2 3 4 5') == '5 4 3 2 1'",
        "num_ids": 1246,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and returns True if the number is prime, False otherwise.\n    '''\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes in a degree value and returns the equivalent angle in radians.\n    '''\n    radians = math.radians(degree)\n    return radians",
        "test": "assert radian_degree(90) == math.pi/2",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"abc\", \"a\") == (\"a\", 0, 1)",
        "num_ids": 1413,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum(map(lambda i: bell_Number(i), range(n)))",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]",
        "test": "assert remove_kth_element([1,2,3,4,5], 1) == [2,3,4,5]",
        "num_ids": 1333,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the maximum value of the Nth column.\n    \"\"\"\n    max_val = float('-inf')  # initialize max_val to negative infinity\n    for row in test_list:\n        if len(row) > N:  # make sure there is a value in the Nth column\n            val = row[N]\n            if val > max_val:  # update max_val if the current value is greater\n                max_val = val\n    return max_val",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 0) == 7",
        "num_ids": 1617,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, \n    and returns a list of two lists where the first list has the first element \n    of each sublist and the second one has the second.\n    \"\"\"\n    result = [[], []]\n    for sublist in lst:\n        result[0].append(sublist[0])\n        result[1].append(sublist[1])\n    return result",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 1698,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns a list containing the cumulative sum of all the values in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    cummulative_list = []\n    for element in test_list:\n        total_sum += element[1]\n        cummulative_list.append(total_sum)\n    return cummulative_list",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 1368,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    return avg_list",
        "test": "assert average_tuple(((1,2), (3,4), (5,6))) == [1.5, 3.5, 5.5]",
        "num_ids": 1575,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result",
        "test": "assert tuple_modulo((5, 8, 2), (4, 7, 1)) == (1, 1, 0)",
        "num_ids": 1627,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def min_Jumps(steps, d):\n    dp = [float('inf')] * (d+1)\n    dp[0] = 0\n    for i in range(1, d+1):\n        for j in range(i):\n            if j + steps[j] >= i:\n                dp[i] = min(dp[i], dp[j] + 1)\n    return dp[d] if dp[d]!= float('inf') else -1",
        "test": "assert min_Jumps([1, 3, 5, 2, 1, 1, 4, 2, 1], 3) == 2",
        "num_ids": 2538,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]",
        "test": "assert div_list([1,2,3],[2,3,4]) == [0.5, 0.6666666666666666, 0.75], \"The function is not working as expected!\"",
        "num_ids": 1418,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize two empty lists\n    num_list = []\n    non_num_list = []\n    \n    # iterate through each character in the test string\n    for char in test_str:\n        # if the character is a number, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # if the character is not a number, append it to the non_num_list\n        else:\n            non_num_list.append(char)\n    \n    # join the non_num_list and num_list into a single string\n    result = ''.join(non_num_list) + ''.join(num_list)\n    \n    # return the result string\n    return result",
        "test": "assert move_num(\"123456\") == \"123456\"",
        "num_ids": 1585,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = 2 if a[0] % 2 == 0 and a[1] % 2 == 0 else 1\n    for i in range(2, n):\n        if a[i] % 2 == 0 and dp[i-2] > 0:\n            dp[i] = dp[i-2] + 1\n        else:\n            dp[i] = 1\n    return max(dp)",
        "test": "assert largest_subset([1,2,3,4,5,6]) == 3",
        "num_ids": 2005,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2!= 0:\n        mid = n // 2\n        return (max(arr1[mid-1], arr2[mid-1]) + min(arr1[mid], arr2[mid])) / 2\n    else:\n        mid = n // 2\n        return (max(arr1[mid-1], arr2[mid-1]) + min(arr1[mid], arr2[mid])) / 2",
        "test": "assert get_median([1, 2, 3], [4, 5, 6], 3) == 3",
        "num_ids": 2456,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function computes the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1,2,3,4,5],2) == [1,4,9,16,25]",
        "num_ids": 1165,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper('HELLO') == 'HELLO'",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes a list as input and returns the list with the first and last element swapped.\n    \"\"\"\n    # Check if the input list is not empty\n    if len(newList) > 0:\n        # Get the first and last element of the list\n        first_element = newList[0]\n        last_element = newList[-1]\n        # Replace the first element with the last element and vice versa\n        newList[0] = last_element\n        newList[-1] = first_element\n    # Return the modified list\n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 1293,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = math.pi * r ** 2 / 2\n    return area",
        "test": "assert triangle_area(1) == 1.5707963267948966 # pi/2",
        "num_ids": 1814,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number from the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    # Initialize variables to keep track of the first and second missing numbers\n    first_missing = 0\n    second_missing = 0\n    \n    # Traverse the list and update the missing numbers\n    for i in range(start, end + 1):\n        # If the current number is less than the expected number, then it is the first missing number\n        if array[i] < i + 1:\n            first_missing = i + 1\n        \n        # If the current number is equal to the expected number, then move to the next number\n        elif array[i] == i + 1:\n            continue\n        \n        # If the current number is greater than the expected number, then it is the second missing number\n        else:\n            second_missing = i + 1\n            break\n    \n    # If both missing numbers are present, then there is no missing number in the list\n    if first_missing == 0 and second_missing == 0:\n        return None\n    \n    # If there is only one missing number, then it is the first missing number\n    elif first_missing == 0 and second_missing!= 0:\n        return second_missing\n    \n    # If both missing numbers are present, then the second missing number is the smallest missing number\n    elif first_missing!= 0 and second_missing!= 0:\n        return second_missing\n    \n    # If only the first missing number is present, then it is the smallest missing number\n    else:\n        return first_missing",
        "test": "assert find_First_Missing([0, 1, 2, 3, 4, 5]) == 6",
        "num_ids": 2706,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function replaces all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 848,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 1263,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def adjac(ele, sub = []): \n    '''\n    This function takes two arguments:\n    ele - tuple of integers representing the coordinate\n    sub - a list of tuples, where each tuple represents a sub-coordinate of the given coordinate\n    \n    This function returns a list of tuples, where each tuple represents the adjacent coordinate to the given coordinate.\n    '''\n\n    # Initialize an empty list to store the adjacent coordinates\n    adj = []\n\n    # Check the four adjacent directions of the given coordinate\n    if ele[0]-1 >= 0:\n        adj.append((ele[0]-1, ele[1]))\n    if ele[1]-1 >= 0:\n        adj.append((ele[0], ele[1]-1))\n    if ele[0]+1 < 10:\n        adj.append((ele[0]+1, ele[1]))\n    if ele[1]+1 < 10:\n        adj.append((ele[0], ele[1]+1))\n\n    # Check the given sub-coordinates and append them to the list of adjacent coordinates if they are adjacent to the given coordinate\n    for s in sub:\n        if (s[0] == ele[0]-1 and s[1] == ele[1]) or (s[0] == ele[0] and s[1] == ele[1]-1) or (s[0] == ele[0]+1 and s[1] == ele[1]) or (s[0] == ele[0] and s[1] == ele[1]+1):\n            adj.append(s)\n    \n    # Return the list of adjacent coordinates\n    return adj",
        "test": "assert adjac((0,0)) == [(1,0),(0,1)]",
        "num_ids": 2058,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    if'' in text:\n        # Replace spaces with underscores\n        text = text.replace(' ', '_')\n    elif '_' in text:\n        # Replace underscores with spaces\n        text = text.replace('_','')\n    return text",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num!= 0:\n            non_zeroes.append(num)\n        else:\n            zeroes.append(num)\n    return non_zeroes + zeroes",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1873,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum",
        "test": "assert pair_xor_Sum([1,1,1,1,1],5) == 0 ",
        "num_ids": 2093,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=lambda x: x)",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1413,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given amount has no profit and no loss.\n    '''\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True",
        "test": "assert noprofit_noloss(100,100) == True",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n    v: float, wind velocity in km/h\n    t: float, temperature in celsius\n\n    Returns:\n    int, wind chill index rounded to the next integer\n    \"\"\"\n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n\n    # Round the wind chill index to the next integer\n    wind_chill_index = math.ceil(wind_chill_index)\n\n    return wind_chill_index",
        "test": "assert wind_chill(5,10) == 10",
        "num_ids": 2101,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # initialize a variable to store the total length of names\n    total_length = 0\n\n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, remove it from the list\n            sample_names.remove(name)\n        else:\n            # if it doesn't, add its length to the total_length variable\n            total_length += len(name)\n\n    # return the total_length after removing the lowercase names\n    return total_length",
        "test": "assert sample_nam(['Alice', 'Bob', 'charlie', 'David', 'Eve']) == 11",
        "num_ids": 1801,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)') # pattern to match parenthesis and what is inside them\n    return re.sub(pattern, '', items) # remove the matched pattern from the original string\n",
        "test": "assert remove_parenthesis(\"this is a (test)\") == \"this is a \"",
        "num_ids": 1261,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    num = 1\n    result = 0\n    while count < n:\n        result += num\n        count += 1\n        num += count\n    return result",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\bz\\b'\n    result = re.findall(pattern, text)\n    return len(result) > 0",
        "test": "assert text_match_wordz_middle(\"hello world\") == False",
        "num_ids": 1326,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function reverses an array upto a given position k.\n    '''\n    return input[:k][::-1] + input[k:]",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]",
        "num_ids": 1626,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    result_tup = test_tup + (test_dict,)\n    return result_tup",
        "test": "assert add_dict_to_tuple((1, 2), {\"a\": 3, \"b\": 4}) == (1, 2, {\"a\": 3, \"b\": 4})",
        "num_ids": 1407,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables to keep track of the maximum average and the path with the maximum average\n    max_average = 0\n    max_path = []\n\n    # Traverse through each cell of the matrix and compute the average of the path ending at that cell\n    for i in range(len(cost)):\n        for j in range(len(cost)):\n            # Check if the current cell is not the bottom-right cell\n            if i!= len(cost) - 1 or j!= len(cost) - 1:\n                # Compute the average of the path ending at the current cell\n                path_cost = cost[i][j]\n                path_count = 1\n                if i < len(cost) - 1:\n                    path_cost += cost[i+1][j]\n                    path_count += 1\n                if j < len(cost) - 1:\n                    path_cost += cost[i][j+1]\n                    path_count += 1\n                if i < len(cost) - 1 and j < len(cost) - 1:\n                    path_cost += cost[i+1][j+1]\n                    path_count += 1\n                path_average = path_cost / path_count\n\n                # Update the maximum average and the path with the maximum average if necessary\n                if path_average > max_average:\n                    max_average = path_average\n                    max_path = [(i,j)]\n                elif path_average == max_average:\n                    max_path.append((i,j))\n\n    return max_average, max_path",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]]) == 12.0",
        "num_ids": 4444,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[student] = data\n    return filtered_students",
        "test": "assert filter_data({\"Alice\": (1.7, 60), \"Bob\": (1.8, 50), \"Charlie\": (1.6, 65)}, 1.6, 60) == {\"Alice\": (1.7, 60), \"Charlie\": (1.6, 65)}, \"Alice and Charlie have both height and weight above the minimum.\"",
        "num_ids": 3056,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == 0",
        "num_ids": 1451,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base):\n        total += int(digit) ** power\n    return total",
        "test": "assert power_base_sum(2, 1) == 2, \"power_base_sum(2, 1) should be 2\"",
        "num_ids": 2169,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "test": "assert extract_quotation(\"This is a sample text with no quotation marks.\") == []",
        "num_ids": 1143,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    res_tup = ()\n    for i in range(N):\n        res_tup += (test_tup[i] * test_tup[i+1],)\n    return res_tup",
        "test": "assert multiply_elements((1, 2, 3, 4)) == (2, 6, 12)",
        "num_ids": 1759,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns their element-wise sum.\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "test": "assert sum_list([],[]) == []",
        "num_ids": 1502,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]",
        "test": "assert consecutive_duplicates([1, 1, 2, 2, 3, 3, 3]) == [1, 2, 3]",
        "num_ids": 1607,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes radius r and height h as input and returns the lateral surface area of a cone.\n    '''\n    return math.pi * r * h",
        "test": "assert lateralsurface_cone(0,10) == 0",
        "num_ids": 1520,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'[\\s,.]+') # regex pattern to match any occurrence of spaces, commas, or dots\n    return pattern.sub(':', text) # substitute with a colon\n\ntext = \"This is a sample text with spaces, commas, and dots.\"\nprint(replace_specialchar(text)) # Output: This:is:a:sample:text:with:spaces::commas::and:dots.",
        "test": "assert replace_specialchar(\"hello,world\") == \"hello:world\"",
        "num_ids": 1004,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "test": "assert find_first_occurrence([1,2,2,2,3,3,3,4,4,4,4], 2) == 1",
        "num_ids": 1852,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        # Initialize the variables\n        ans = 0\n        p = 1\n        temp = 1\n        # Traverse the array and calculate the product of the sublist\n        for i in range(n):\n            temp *= arr[i]\n            ans += temp\n            # Update the product of the previous sublist\n            p *= arr[i]\n        # Return the answer\n        return ans - (p ** 2)",
        "test": "assert sum_Of_Subarray_Prod([2,3,4,5]) == 52",
        "num_ids": 1868,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # convert the number to binary\n    binary = bin(n)[2:]\n    # initialize a string to store the modified binary\n    modified_binary = \"\"\n    # loop through each bit in the binary string\n    for bit in binary:\n        # toggle the bit if it's not the first or last bit\n        if bit == \"0\":\n            modified_binary += \"1\"\n        else:\n            modified_binary += \"0\"\n    # convert the modified binary back to an integer and return it\n    return int(modified_binary, 2)",
        "test": "assert set_middle_bits(0b101010) == 0b010101",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 0) == 0",
        "num_ids": 1337,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('apple') == True",
        "num_ids": 1022,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n - 1) * geometric_sum(n - 1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Returns the index of smallest triangular number with n digits.\n    \"\"\"\n    # convert n to integer\n    n = int(n)\n    # calculate the smallest triangular number with n digits\n    triangular_number = n*(n+1)//2\n    # calculate the log10 of the triangular number\n    log10_triangular_number = math.log10(triangular_number)\n    # return the index of the triangular number\n    return math.ceil(log10_triangular_number)",
        "test": "assert find_Index(1) == 0",
        "num_ids": 1376,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and returns a dictionary with adjacent elements as keys and their corresponding values.\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "test": "assert tuple_to_dict((1, 2)) == {1: 2}",
        "num_ids": 1799,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        for i in range(1, len(s)):\n            if s[i]!= s[0]:\n                return False\n        return True",
        "test": "assert all_Characters_Same('hello') == False",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(6) / 4) * (side ** 2)\n    return area\n",
        "test": "assert area_tetrahedron(1) == math.sqrt(6) / 4, \"area_tetrahedron(1) should be 1/4 of the square of the 6th root of 6\"",
        "num_ids": 1234,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function takes a list as input and rotates it by specified number of items to the right direction.\n    '''\n    n = len(lst)\n    # If m is greater than or equal to n, return the list as it is.\n    if m >= n:\n        return lst\n    # If m is negative, return the list in reverse order.\n    elif m < 0:\n        return lst[::-1]\n    # If m is positive, rotate the list to right direction.\n    else:\n        return lst[n-m:] + lst[:n-m]",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1500,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3)) == False",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(i) % x == 0 for i in str(x)), range(startnum, endnum+1)))",
        "test": "assert divisible_by_digits(100, 100) == []",
        "num_ids": 4485,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Calculates the area of a sector with the given radius and angle.\n    If the angle is larger than 360 degrees, returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a / 360)",
        "test": "assert sector_area(5,90)==math.pi*5**2/4",
        "num_ids": 1224,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    # Create a 3D table to store the lengths of LCSs\n    table = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n    \n    # Find the LCS\n    lcs = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] > table[i][j-1][k]:\n            i -= 1\n        elif table[i-1][j][k] > table[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs",
        "test": "assert lcs_of_three(\"abcdef\", \"xyz\", \"uvw\") == \"\"",
        "num_ids": 4099,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r\"(?<=[^A-Z])([A-Z])\", r\" \\1\", str1)\n    return str1",
        "test": "assert capital_words_spaces(\"The quick brown fox jumps over the lazy dog.\") == \"The quick brown fox jumps over the lazy dog.\"",
        "num_ids": 1526,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))",
        "test": "assert sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 1725,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1238,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr) // 2:\n        if arr[2 * i] < arr[i]:\n            return False\n        return check_min_heap_helper(arr, 2 * i) and check_min_heap_helper(arr, 2 * i + 1)\n    return True\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)",
        "test": "assert check_min_heap_helper([4, 2, 7, 1, 3], 2) == True",
        "num_ids": 2398,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1511,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]",
        "test": "assert min_k([(1,2), (3,4), (5,6), (7,8)], 2) == [(1,2), (3,4)]",
        "num_ids": 2052,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n    return common_list",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [4, 5, 6]) == []",
        "num_ids": 1832,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1163,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one('abbb') == True",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] > test_list[j][::-1]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs(['abc', 'def', 'ghi', 'jkl','mno']) == 0",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def unique_sublists(lst):\n    # Convert list to a tuple to make it hashable\n    lst = tuple(lst)\n    count = {}\n    # Iterate through all possible sublists of lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            # Check if sublist is already in count dictionary\n            if sublist not in count:\n                # If not, count the number of occurrences of the sublist\n                count[sublist] = lst.count(sublist)\n    return count",
        "test": "assert unique_sublists(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == {('a', 'b', 'c'): 1, ('b', 'c', 'd'): 1, ('c', 'd', 'e'): 1, ('d', 'e', 'f'): 1, ('e', 'f', 'g'): 1, ('f', 'g', 'h'): 1, ('g', 'h', 'i'): 1, ('h', 'i', 'j'): 1, ('i', 'j', 'k'): 1, ('j', 'k', 'l'): 1, ('k', 'l','m'): 1, ('l','m', 'n'): 1, ('m', 'n', 'o'): 1, ('n', 'o', 'p'): 1, ('o', 'p', 'q'): 1, ('p', 'q', 'r'): 1, ('q', 'r','s'): 1, ('r','s', 't'): 1, ('s', 't', 'u'): 1, ('t', 'u', 'v'): 1, ('u', 'v', 'w'): 1, ('v', 'w', 'x'): 1, ('w', 'x', 'y'): 1, ('x', 'y', 'z'): 1}",
        "num_ids": 2482,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if \".\" not in num:\n        return False\n    nums = num.split(\".\")\n    if len(nums)!= 2:\n        return False\n    if len(nums[0]) > 1 and nums[0][0] == \"0\":\n        return False\n    if len(nums[1]) > 2:\n        return False\n    return True",
        "test": "assert is_decimal(\"3,14\") == False",
        "num_ids": 1123,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # convert the list to set to remove duplicates\n    set_arr = set(arr)\n    # check if the length of the set is 1 or not\n    if len(set_arr) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1,2,3,4,5,5]) == False",
        "num_ids": 1007,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(4) == True # April has 30 days",
        "num_ids": 1662,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def find_min_diff(arr, n): \n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n\n    Args:\n    arr: A list of integers.\n    n: An integer denoting the length of the list.\n\n    Returns:\n    An integer representing the minimum difference between any two elements in the list.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference and result\n    min_diff = float('inf')\n    res = 0\n\n    # Iterate through all pairs of elements and find the minimum difference\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n            res = arr[i]\n\n    return min_diff",
        "test": "assert find_min_diff([4, 5, 1, 3, 2],5) == 1",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"123\") == 3",
        "num_ids": 823,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    i = 1\n    count = 0\n    while count < n:\n        i += 1\n        if is_polite_number(i):\n            count += 1\n    return i\n\ndef is_polite_number(num):\n    \"\"\"\n    Helper function to check if a number is polite or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert is_polite(1) == 2",
        "num_ids": 1820,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 1474,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    arr_len = len(arr)\n    for i in range(arr_len):\n        for j in range(i+1, arr_len):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 6) == 2",
        "num_ids": 1570,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff",
        "test": "assert Diff([1,2,3],[1,2,3]) == []",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the fourth power of current odd natural number to sum\n        sum += i**4\n        \n    # Return the sum of fourth power of first n odd natural numbers\n    return sum",
        "test": "assert odd_num_sum(1) == 1, \"odd_num_sum(1) should be 1\"",
        "num_ids": 1082,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "test": "assert check_expression(\"()\") == True",
        "num_ids": 1455,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = [word for word in words if len(word)!= K]\n    return''.join(new_words)",
        "test": "assert remove_length(\"hello world\", 2) == \"llo wor\"",
        "num_ids": 1421,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        result.append((start, end))\n    if result:\n        return result\n    else:\n        return None",
        "test": "assert occurance_substring(\"hello world\",\"x\") == None",
        "num_ids": 1368,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "test": "assert odd_position([1,2,3,4,6]) == False",
        "num_ids": 1110,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Counts those characters in the given string that have vowels as their neighbors.\n\n    Args:\n        test_str (str): The input string to analyze.\n\n    Returns:\n        int: The number of neighbors with vowels.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1].lower() in vowels:\n            if i < len(test_str) - 1 and test_str[i+1].lower() in vowels:\n                count += 1\n    return count",
        "test": "assert count_vowels(\"hello world\") == 0",
        "num_ids": 1476,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    sum_non_repeated = sum(unique_elements)\n    return sum_non_repeated",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 1492,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Sort the list in ascending order\n    sorted_list = sorted(list1)\n\n    # Create a generator object to group consecutive duplicates\n    grouped_list = groupby(sorted_list)\n\n    # Create a list of sublists with consecutive duplicates packed into sublists\n    packed_list = [list(group) for key, group in grouped_list]\n\n    return packed_list",
        "test": "assert pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5]) == [[1, 1, 1], [2, 2], [3, 3, 3, 3], [4, 4, 4], [5, 5, 5]]",
        "num_ids": 2139,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def unique_sublists(lst):\n    # convert the list to a set of tuples to remove duplicates\n    unique_tuples = set(tuple(sublst) for sublst in lst)\n    \n    # count the occurrences of each tuple\n    count = {t: lst.count(list(t)) for t in unique_tuples}\n    \n    return count",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2061,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for c in combinations(test_list, i):\n            if sum(c) == 0:\n                result.append(c)\n    return result",
        "test": "assert find_combinations([(1,2,3), (4,5,6)]) == [(1,4), (1,5), (1,6), (2,5), (2,6), (3,6)]",
        "num_ids": 4514,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nif count_divisors(5) % 2 == 0:\n    print(\"The count of divisors is even.\")\nelse:\n    print(\"The count of divisors is odd.\")",
        "test": "assert count_divisors(1) == 1",
        "num_ids": 1478,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            total_sum += sum(arr[i:j])\n    return total_sum",
        "test": "assert odd_length_sum([1, 2, 3]) == 12",
        "num_ids": 1888,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 3280,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def mul_even_odd(lst):\n    even_num = 1\n    odd_num = 1\n    even_found = False\n    for num in lst:\n        if num % 2 == 0:\n            even_num *= num\n            even_found = True\n        else:\n            if even_found:\n                break\n            else:\n                odd_num *= num\n    return even_num * odd_num",
        "test": "assert mul_even_odd([1,3,5,7,9]) == 1*3*5*7*9",
        "num_ids": 1881,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes in a string of a tuple and returns the integer tuple.\n    '''\n    # Split the string into a list of strings\n    lst = test_str.strip('()').split(',')\n    \n    # Convert the list of strings to a list of integers\n    int_lst = [int(i.strip()) for i in lst]\n    \n    # Convert the list of integers to a tuple of integers\n    int_tup = tuple(int_lst)\n    \n    return int_tup",
        "test": "assert tuple_str_int(\"1,2,3,4,5\") == (1,2,3,4,5)",
        "num_ids": 1384,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos",
        "test": "assert right_insertion([1, 2, 3], 4) == 3",
        "num_ids": 1139,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_match_three('abc') == False",
        "num_ids": 892,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "test": "assert new_tuple([1, 2, 3], 'abc') == ('abc', [1, 2, 3])",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert even_position([1, 3, 5, 7, 9]) == False # even_position([1, 3, 5, 7, 9]) returns False",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 1455,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "test": "assert count_list([]) == 0",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the index of the last occurrence of the element x in the sorted array arr, or -1 if x is not in arr.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1  # Look for the last occurrence to the right\n        elif arr[mid] < x:\n            left = mid + 1\n        else:  # arr[mid] > x\n            right = mid - 1\n            \n    return result",
        "test": "assert last([1,2,3,4,5],6)==-1",
        "num_ids": 1733,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'  # pattern to match string with 'a' followed by anything and ending in 'b'\n    match = re.search(pattern, text)  # search for pattern in text\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_starta_endb('abcde') == False",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum",
        "test": "assert return_sum({'a':1, 'b':2, 'c':3}) == 6",
        "num_ids": 974,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum",
        "test": "assert sum_odd(10) == 25",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes in an array as an argument and returns the sum of the elements in the array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 723,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert n to binary string\n    binary_str = bin(n)[2:]\n    \n    # Pad the string with zeros to make it 32 bits long\n    padded_str = binary_str.zfill(32)\n    \n    # Convert the string to a list of bits\n    bits = [int(i) for i in padded_str]\n    \n    # Rotate left by d bits\n    rotated_bits = bits[d:] + bits[:d]\n    \n    # Convert the list of bits back to a string\n    rotated_str = ''.join([str(i) for i in rotated_bits])\n    \n    # Convert the string to an integer\n    rotated_n = int(rotated_str, 2)\n    \n    return rotated_n",
        "test": "assert left_rotate(1,1) == 2",
        "num_ids": 2067,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\"",
        "num_ids": 810,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 1314,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    \n    # Find the pivot element\n    pivot = arr[0]\n    start = 1\n    end = n - 1\n    \n    while start <= end:\n        if arr[start] < pivot:\n            start += 1\n        elif arr[end] > pivot:\n            end -= 1\n        else:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n            \n    # After the above loop, pivot is at its correct position\n    # Let's move it to the start of the array\n    arr[0], arr[end] = arr[end], arr[0]\n    \n    # Now, arr[0:end+1] is sorted. \n    # Let's check if arr[end+1:] is sorted or not\n    sorted_flag = True\n    for i in range(end):\n        if arr[i] > arr[i+1]:\n            sorted_flag = False\n            break\n            \n    if sorted_flag:\n        return end\n    else:\n        return end + 1 + count_rotation(arr[end+1:])",
        "test": "assert count_rotation([10, 20, 30, 40, 50]) == 0",
        "num_ids": 1639,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\n\ndef is_perfect_square(n) :\n    '''\n    This function takes a number as input and returns True if the number is a perfect square, else False.\n    '''\n    if math.sqrt(n) == int(math.sqrt(n)):\n        return True\n    else:\n        return False",
        "test": "assert is_perfect_square(25) == True",
        "num_ids": 980,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_product_even(arr):\n    '''\n    Check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "test": "assert is_product_even([1,2,3,4,5]) == True",
        "num_ids": 1018,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return [max_list]",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [[10, 11, 12]]",
        "num_ids": 1917,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function finds the maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    max_count = 0\n    \n    # Loop through the string\n    for i in range(len(test_str)):\n        # Check if current character is uppercase\n        if test_str[i].isupper():\n            # If it is, increment count\n            count += 1\n        else:\n            # If it isn't, check if count is greater than max_count\n            if count > max_count:\n                # If it is, update max_count\n                max_count = count\n            # Reset count to 0\n            count = 0\n    \n    # Check if there is a run of uppercase characters at the end of the string\n    if count > max_count:\n        max_count = count\n    \n    # Return the maximum run of uppercase characters\n    return max_count",
        "test": "assert max_run_uppercase('ABCaBAc') == 3",
        "num_ids": 1732,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1,2,3,4,5,6,7,8,9]) == 1",
        "num_ids": 1048,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "test": "assert check_K([(1,2,3),(4,5,6)], 2) == True",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            result = False\n            break\n    return result",
        "test": "assert check_smaller((1, 2, 3), (3, 2, 1)) == False",
        "num_ids": 1472,
        "indeed": false
    }
]