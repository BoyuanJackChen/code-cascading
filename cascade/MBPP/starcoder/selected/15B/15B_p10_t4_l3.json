[
    {
        "number": 2,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = set(test_tup1) & set(test_tup2)\n    return result",
        "test": "assert similar_elements((1,2,3), (2,3,4)) == {2, 3}",
        "num_ids": 1913,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 38,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "test": "assert is_not_prime(1) == False",
        "num_ids": 1572,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)\n\nnums = [10, 7, 8, 9, 1, 5]\nn = 3\nprint(heap_queue_largest(nums, n))",
        "test": "assert heap_queue_largest([1],1) == [1]",
        "num_ids": 2433,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer x as input and returns True if x is a power of 2, otherwise False.\n    '''\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        while x % 2 == 0:\n            x = x/2\n        if x == 1:\n            return True\n        else:\n            return False",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 1418,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use the re.findall() function to find all words in the string that are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    \n    return words",
        "test": "assert find_char_long('The quick brown fox jumps over the lazy dog') == ['quick', 'brown', 'jumps', 'over', 'lazy']",
        "num_ids": 1925,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_nums(nums):\n    \"\"\"\n    This function finds the squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 1677,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_Rotations(s):\n    if len(s) <= 1:\n        return 0\n\n    s += s\n    n = len(s)\n\n    # Find the longest prefix of s that is also a suffix\n    i = 0\n    j = 1\n    while i < n and j < n:\n        if s[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            break\n\n    # If s is a rotation of itself, it must have length greater than 1\n    if i == n:\n        return n - 1\n\n    # Find the longest suffix of s that is also a prefix\n    i = n - 1\n    j = n - 2\n    while i >= 0 and j >= 0:\n        if s[i] == s[j]:\n            i -= 1\n            j -= 1\n        else:\n            break\n\n    # Find the smallest index k such that s[k+1:n] is a rotation of s[0:n-k]\n    k = n\n    while k > j + 1:\n        mid = (j + k) // 2\n        if s[mid+1:n] < s[0:n-mid]:\n            k = mid\n        else:\n            j = mid\n\n    # The minimum number of rotations required is equal to the length of the longest suffix plus 1 minus the index k\n    return len(s[n-j-1:n]) + 1 - j - 1",
        "test": "assert find_Rotations(\"\") == 0",
        "num_ids": 2221,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_Occ(s, ch):\n    if ch in s:\n        index = s.find(ch)\n        s = s[:index] + s[index+1:]\n        index = s.rfind(ch)\n        s = s[:index] + s[index+1:]\n    return s",
        "test": "assert remove_Occ(\"hello world\",\"l\")!= \"heo wor\"",
        "num_ids": 1803,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sums of each row\n    row_sums = [sum(row) for row in M]\n\n    # sort the rows based on their sums\n    sorted_indices = sorted(range(len(row_sums)), key=lambda i: row_sums[i])\n\n    # create a new matrix with the sorted rows\n    sorted_matrix = []\n    for i in sorted_indices:\n        sorted_matrix.append(M[i])\n\n    return sorted_matrix",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 3449,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as arguments and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume",
        "test": "assert find_Volume(0,0,0)==0, \"The volume of a triangular prism with sides 0, 0, and 0 should be 0\"",
        "num_ids": 1513,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r\"[a-z]+_\")\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 1340,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_perimeter(a):\n    '''\n    This function returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 988,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def str_to_list(string, char_list):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char not in char_list:\n            new_string += char\n    return new_string",
        "test": "assert str_to_list('hello', 'xy') == 'hello'",
        "num_ids": 2306,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 1740,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_woodall(x):\n    '''\n    This function takes a number as input and returns True if it's woodball, otherwise it returns False.\n    '''\n    if x % 4 == 0 and x % 100!= 0 or x % 400 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(25) == False # example 1",
        "num_ids": 1349,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num + int(str(num)[::-1]) == 2 * num",
        "test": "assert rev(12345) == False",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_num = arr[0]\n        temp = 0\n        for i in range(n):\n            temp = temp*10 + arr[i]\n            max_num = max(max_num, temp)\n        return max_num",
        "test": "assert find_Max_Num([0, 0, 0, 0, 0]) == 0",
        "num_ids": 2194,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign and False otherwise.\n    '''\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True",
        "test": "assert opposite_Signs(1, -2) == True",
        "num_ids": 1224,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 37,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    count = 1\n    octagonal_number = 0\n    while count <= n:\n        octagonal_number = count * (2 * count - 1)\n        count += 1\n    return octagonal_number\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1683,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    \n    # dictionary to store the count of digits\n    digit_count = defaultdict(int)\n    \n    for i in range(n):\n        # update the count of digits in the current substring\n        digit_count[int(s[i])] += 1\n        \n        # check if the sum of digits in the current substring equals its length\n        if sum(digit_count.values()) == n:\n            count += 1\n            \n        # if the count of the current digit is greater than 1, we need to remove it\n        # from the dictionary since we can't include it in the next substring\n        elif digit_count[int(s[i])] > 1:\n            digit_count[int(s[i])] -= 1\n            \n        # if the count of the current digit is equal to 1, we can include it in the next substring\n        elif digit_count[int(s[i])] == 1:\n            digit_count[int(s[i])] += 1\n            \n    return count",
        "test": "assert count_Substrings(\"12345\") == 1 # only the substring \"5\" has a sum of digits equal to their length, which is 5",
        "num_ids": 2795,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest",
        "test": "assert smallest_num([5, 3, 9, 1, 7]) == 1",
        "num_ids": 1488,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the list by the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    # Initialize the maximum difference to zero\n    max_diff = 0\n    # Iterate over the sorted list\n    for i in range(len(sorted_list)):\n        for j in range(i+1, len(sorted_list)):\n            # Calculate the difference between the two tuples\n            diff = sorted_list[j][0] - sorted_list[i][0]\n            # Update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n    # Return the maximum difference\n    return max_diff",
        "test": "assert max_difference([(1,2),(3,4),(5,6),(7,8)]) == 6",
        "num_ids": 2388,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def subject_marks(subject_marks):\n    \"\"\"\n    This function takes a list of tuples and sorts them based on the second value of each tuple.\n    \"\"\"\n    subject_marks.sort(key=lambda x: x[1])\n    return subject_marks",
        "test": "assert subject_marks([(30, \"Maths\"), (40, \"Science\"), (20, \"English\")]) == [(20, \"English\"), (30, \"Maths\"), (40, \"Science\")]",
        "num_ids": 3572,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 37,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1985,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1468,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def bell_number(n):\n    \"\"\"\n    Compute the n-th Bell number using dynamic programming.\n    \"\"\"\n    b = [0] * (n + 1)\n    b[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            b[i] += b[j] * b[i - j - 1]\n    return b[n]",
        "test": "assert bell_number(1) == 1",
        "num_ids": 1593,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n < 2:\n        return True\n    is_increasing = True\n    is_decreasing = True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            is_increasing = False\n        if A[i] > A[i-1]:\n            is_decreasing = False\n    return is_increasing or is_decreasing",
        "test": "assert is_Monotonic([1,3,2,4,5]) == False",
        "num_ids": 2292,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether the given sublist s is a sublist of the given list l.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)",
        "test": "assert is_sublist([1, 2, 3, 4], [1, 2, 3]) == True",
        "num_ids": 2195,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True",
        "test": "assert find_equal_tuple([(1,2),(3,4),(5,6)]) == True",
        "num_ids": 1907,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def comb_sort(nums):\n    '''\n    Implementation of the comb sort algorithm for sorting a list of integers.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap/shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n    return nums",
        "test": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2626,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, False otherwise.\n    \"\"\"\n    i = int(n**0.5)\n    return i*i == n\n\ndef dif_Square(n):\n    \"\"\"\n    Returns True if n can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    return is_square(n) or is_square(2*n) or is_square(3*n)",
        "test": "assert dif_Square(4) == True # example 4",
        "num_ids": 1983,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n\n    # Check if the length of colors and patterns are the same\n    if len(colors)!= len(patterns):\n        return False\n\n    # Create a dictionary to store the patterns and their corresponding colors\n    pattern_dict = {}\n\n    # Iterate through the patterns and their corresponding colors\n    for i in range(len(patterns)):\n        pattern = patterns[i]\n        color = colors[i]\n\n        # Check if the pattern is already in the dictionary\n        if pattern in pattern_dict:\n            # Check if the color matches the color of the existing pattern\n            if color!= pattern_dict[pattern]:\n                return False\n        else:\n            # Add the pattern and its corresponding color to the dictionary\n            pattern_dict[pattern] = color\n\n    # If we have iterated through the entire list without returning False,\n    # then it follows the sequence given in the patterns array.\n    return True",
        "test": "assert is_samepatterns(['red', 'blue', 'green', 'yellow'], ['square', 'triangle', 'circle','star', 'cross']) == False",
        "num_ids": 2133,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12)], 3) == [(3, 6, 9)]",
        "num_ids": 3138,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer n as input and returns True if n is divisible by 11, otherwise it returns False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(10) == False # if n is divisible by 11, then n - 10 is divisible by 11",
        "num_ids": 1058,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False",
        "test": "assert word_len(\"cat\") == True",
        "num_ids": 1118,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = n * (n + 1) * (n + 2) // 6  # Calculate the nth tetrahedral number\n    return t",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 1166,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume",
        "test": "assert volume_sphere(1) == 4/3*math.pi",
        "num_ids": 1383,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def get_Char(strr):\n    # initialize an empty string to store the ASCII values of the characters of the string\n    ascii_sum = 0\n    \n    # iterate over the characters in the string and add the ASCII value of each character to the ascii_sum variable\n    for char in strr:\n        ascii_sum += ord(char)\n    \n    # calculate the modulo 26 value of the ascii_sum\n    mod_26_value = ascii_sum % 26\n    \n    # get the character made by adding the modulo 26 value to the ASCII value of 'a' (97)\n    result_char = chr(mod_26_value + 97)\n    \n    return result_char",
        "test": "assert get_Char('coding') == 'e', \"Test case failed\"",
        "num_ids": 1602,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sequence(n):\n    \"\"\"\n    This function returns the nth number in the newman conway sequence.\n\n    Args:\n    n: An integer representing the index of the number in the sequence.\n\n    Returns:\n    An integer representing the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [1, 1]\n        for i in range(2, n):\n            current = sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]]\n            sequence_list.append(current)\n        return sequence_list[n-1]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 1483,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4*math.pi, \"Surface area of a sphere with radius 1 should be 4*pi\"",
        "num_ids": 1434,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [i*(2*i-1) for i in range(1, n+1)]\n    return hexagonal_numbers[n-1]",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}",
        "num_ids": 2849,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict",
        "test": "assert freq_count([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}",
        "num_ids": 2515,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return None\n    else:\n        for i in range(N-1, -1, -1):\n            if i < N:\n                return i",
        "test": "assert closest_num(2) == 1 ",
        "num_ids": 1226,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "test": "assert len_log(['apple', 'banana', 'cherry', 'orange']) == 6",
        "num_ids": 1513,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments, str1 and sub_str. str1 is the main string to be searched and sub_str is the substring to be checked.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring(\"hello world\", \"l\") == True",
        "num_ids": 1250,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer as an argument and returns True if the number is undulating and False otherwise.\n    '''\n    # If the number is less than 1, return False\n    if n < 1:\n        return False\n    \n    # Check if the number is divisible by any digit from 1 to 9\n    for i in range(1, 10):\n        if n % i == 0:\n            return True\n    \n    # If the number is not divisible by any digit from 1 to 9, return False\n    return False",
        "test": "assert is_undulating(2) == True",
        "num_ids": 2149,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "test": "assert power(2,3) == 8",
        "num_ids": 879,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "test": "assert index_minimum([(1, 2), (3, 4), (5, 1), (7, 8), (9, 6)]) == 5",
        "num_ids": 1989,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 2323,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n    count = 0\n    \n    # Iterate from 1 to the square root of n\n    for i in range(1, int(n**0.5)+1):\n        # If i divides n, increment the count\n        if n % i == 0:\n            count += 1\n            \n            # If the other divisor of n (n/i) is also an integer, increment the count\n            if n//i!= i:\n                count += 1\n    \n    return count",
        "test": "assert divisor(1) == 1",
        "num_ids": 1075,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in freq:\n                    freq[sub_item] += 1\n                else:\n                    freq[sub_item] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 3342,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result",
        "test": "assert multiply_num([-1, 0, 1]) == 0",
        "num_ids": 1533,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Initialize a string to store the binary equivalent of n\n    binary = \"\"\n    \n    # Loop through the decimal digits from right to left\n    while n > 0:\n        # Calculate the remainder when n is divided by 2\n        remainder = n % 2\n        \n        # Append the remainder to the binary string\n        binary = str(remainder) + binary\n        \n        # Divide n by 2 to get the next digit\n        n = n // 2\n    \n    # Return the binary string with no leading zeros\n    return binary.lstrip(\"0\") or \"0\"",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 1454,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is palindrome or not.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # If the number is already a palindrome, return the next number\n    if is_palindrome(num):\n        num += 1\n    \n    # Find the next palindrome greater than the current number\n    while not is_palindrome(num):\n        num += 1\n    \n    return num",
        "test": "assert next_smallest_palindrome(1) == 2",
        "num_ids": 3219,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    else:\n        return sorted(arr)[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 1646,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 40,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    total = n * m\n    eulerian_numbers = []\n    \n    for i in range(n):\n        for j in range(m):\n            if i % 2 == 0:\n                eulerian_numbers.append(i + j * m)\n            else:\n                eulerian_numbers.append((n - i - 1) + j * m)\n    \n    return total - len(set(eulerian_numbers)) + 1\n",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 1709,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def sort_sublists(input_list):\n    '''\n    This function sorts each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "test": "assert sort_sublists([[4, 2, 1, 5], [\"apple\", \"banana\", \"cherry\"], [\"dog\", \"cat\", \"rat\"]]) == [[1, 2, 4, 5], [\"apple\", \"banana\", \"cherry\"], [\"cat\", \"dog\", \"rat\"]]",
        "num_ids": 2662,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "test": "assert count([True, True, False, True, False]) == 3",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(test_list + list(test_tup))\n",
        "test": "assert add_lists([], ()) == ()",
        "num_ids": 1484,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 37,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n\n    # Add all elements to heap\n    for lst in [num1, num2, num3]:\n        for num in lst:\n            heapq.heappush(heap, num)\n\n    # Pop all elements from heap and add them to result list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result",
        "test": "assert merge_sorted_list([], [], []) == []",
        "num_ids": 3593,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    This function takes a binary string and a number of rotations as inputs,\n    and returns the number of numbers with an odd value when the binary string\n    is rotated the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    binary_list = [int(i) for i in s]\n    \n    # Rotate the binary list n times\n    rotated_list = binary_list[n:] + binary_list[:n]\n    \n    # Count the number of odd numbers in the rotated list\n    count = sum(1 for i in rotated_list if i % 2!= 0)\n    \n    return count",
        "test": "assert odd_Equivalent('0101', 1) == 2",
        "num_ids": 2078,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list of common elements in all sublists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_sublist = [element for element in nestedlist[i] if element in nestedlist[j]]\n            common_elements.extend(common_sublist)\n    return common_elements",
        "test": "assert common_in_nested_lists([]) == []",
        "num_ids": 2515,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_integer(text):\n    '''\n    This function checks if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"5\") == True",
        "num_ids": 1031,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True",
        "test": "assert empty_dit([{'a': 1}, {}]) == False",
        "num_ids": 1252,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "test": "assert tuple_to_int((0, 0, 0)) == 0",
        "num_ids": 1454,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for sublist in test_list:\n        new_sublist = []\n        for item in sublist:\n            try:\n                new_sublist.append(float(item))\n            except:\n                new_sublist.append(item)\n        result_list.append(new_sublist)\n    return result_list",
        "test": "assert list_to_float([[1, 2, 3], [4, 5.0, \"6.0\"], [7.0, \"8.0\", 9]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]",
        "num_ids": 3498,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 1295,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def search(arr):\n    # Initialize a dictionary to keep track of counts\n    counts = {}\n    # Iterate over the array and count the occurrences of each element\n    for num in arr:\n        counts[num] = counts.get(num, 0) + 1\n    # Iterate over the dictionary and find the element that appears only once\n    for num, count in counts.items():\n        if count == 1:\n            return num\n    # If no element appears only once, return None\n    return None",
        "test": "assert search([1, 1, 1, 2, 2, 2]) == None",
        "num_ids": 2412,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 380,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(1,2), (-3,4), (-5,6)]) == 16  # (1*6, 2*4, 3*5)",
        "num_ids": 2676,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Returns True if num is amicable, False otherwise.\n    \"\"\"\n    sum_divisors = sum(i for i in range(1, num) if num % i == 0)\n    return sum_divisors!= num and sum(i for i in range(1, sum_divisors) if sum_divisors % i == 0) == num\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to limit.\n    \"\"\"\n    return sum(num for num in range(2, limit) if is_amicable(num))",
        "test": "assert amicable_numbers_sum(10000) == 31626",
        "num_ids": 2795,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a+1j*b)",
        "test": "assert angle_complex(2,0) == cmath.phase(2)",
        "num_ids": 1642,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n\n    # iterate over all possible substrings of length 2 or greater\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # compute the difference between the number of 0s and number of 1s in the substring\n            diff = sum(1 for c in string[i:j] if c == '0') - sum(1 for c in string[i:j] if c == '1')\n            # update the maximum difference seen so far\n            max_diff = max(max_diff, diff)\n\n    return max_diff",
        "test": "assert find_length(\"0000\") == 4",
        "num_ids": 3629,
        "indeed": true
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def sum(a,b): \n    '''\n    This function finds the sum of common divisors of two given numbers a and b.\n    '''\n    # Find the smaller number between a and b\n    small = a if a < b else b\n\n    # Find the sum of common divisors\n    sum = 0\n    for i in range(1, small+1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n\n    return sum",
        "test": "assert sum(15, 21) == 4 # 3 + 5",
        "num_ids": 2078,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def long_words(n, str):\n    '''\n    This function takes in two arguments: n, the maximum length of words to be considered,\n    and str, a list of words. The function returns a list of words that are longer than n characters.\n    '''\n\n    long_words = []\n\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words",
        "test": "assert long_words(100, \"The quick brown fox jumps over the lazy dog\") == []",
        "num_ids": 2288,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes a matrix as input and returns True if it is a magic square,\n    and False otherwise. A magic square is a 2D square grid of numbers where each\n    row, column, and diagonal adds up to the same value.\n    '''\n\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if the sum of each row and column is the same as the sum of the diagonal\n    if sum(row_sums)!= sum(col_sums):\n        return False\n\n    # Check if the sum of the main diagonal is equal to the sum of the anti-diagonal\n    main_diag = [my_matrix[i][i] for i in range(len(my_matrix))]\n    anti_diag = [my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))]\n    if sum(main_diag)!= sum(anti_diag):\n        return False\n\n    # If all the checks pass, then the matrix is a magic square\n    return True",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [8, 9, 1]]) == False",
        "num_ids": 4565,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    \n    max_freq = 0\n    max_num = None\n    for num, freq in count.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    \n    return max_num",
        "test": "assert max_occurrences([1, 2, 3, 4, 5])!= 2",
        "num_ids": 1861,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    vowel_indices.reverse()\n    new_str = list(str1)\n    for i in vowel_indices:\n        new_str[i] = str1[i]\n    return \"\".join(new_str)",
        "test": "assert reverse_vowels(\"AEIOU\") == \"AEIOU\" # example 4",
        "num_ids": 2162,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 27,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function converts a tuple to a string.\n    \"\"\"\n    return str(tup1)",
        "test": "assert tup_string((1,2,3)) == \"(1, 2, 3)\"",
        "num_ids": 1291,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_negativenum(nums):\n    '''\n    This function takes a list of numbers as input and returns the sum of all negative numbers in the list.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum",
        "test": "assert sum_negativenum([-5, -4, -3, -2, -1]) == -15",
        "num_ids": 1653,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_num = n * (2 * n - 1)\n    return hexagonal_num",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 1281,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n\n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n\n    return count_zeroes / count_non_zeroes",
        "test": "assert zero_count(array('i', [1, 2, 3, 0, 4, 0, 5])) == 0.4",
        "num_ids": 2316,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n\n    while n % 2 == 0:\n        n //= 2\n\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n        i += 2\n\n    return n == 1 or n == 0",
        "test": "assert is_Sum_Of_Powers_Of_Two(17) == False",
        "num_ids": 2187,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r",
        "test": "assert circle_circumference(0) == 0, \"The circumference of a circle with radius 0 is incorrect\"",
        "num_ids": 1745,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flat_list += extract_singly(sublist)\n        else:\n            flat_list.append(sublist)\n    return flat_list",
        "test": "assert extract_singly([[1,2], [3], [4,5,6]]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 2245,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pancake_sort(nums):\n    '''\n    Sorts a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Start from the last element and move towards the first element\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # If the maximum element is not at the beginning, flip it to the beginning\n        if max_index!= i:\n            nums[max_index], nums[i] = nums[i], nums[max_index]\n            # Now, flip the entire list up to the index of the maximum element\n            for j in range(max_index, 0, -1):\n                nums[j], nums[j-1] = nums[j-1], nums[j]\n    return nums",
        "test": "assert pancake_sort([1]) == [1]",
        "num_ids": 2833,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[4,5,6],[1,2,3]) == 0",
        "num_ids": 2030,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "test": "assert find_lists((1,2,3)) == 0",
        "num_ids": 1283,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(arr) - min(arr)",
        "test": "assert max_Abs_Diff([-10, -2, -3, -8, -4]) == 8",
        "num_ids": 2039,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if a*i + b*j == n:\n                return (i, j)\n    return None",
        "test": "assert find_solution(2, 3, 1) == None",
        "num_ids": 1920,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]",
        "test": "assert remove_elements([1,2,3,4,5], [2,4]) == [1,3,5]",
        "num_ids": 1904,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum of the series (n-2i) for i from 0 to n/2.\n    \"\"\"\n    if n % 2!= 0:\n        n -= 1\n        \n    total = 0\n    i = 0\n    \n    while i <= n // 2:\n        total += n - 2*i\n        i += 1\n        \n    return total",
        "test": "assert sum_series(0) == 0 # 0 + (-1) + (-2) + (-3) + (-4) = 0",
        "num_ids": 2080,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    This function calculates the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l) / tan(pi / s)\n    return area",
        "test": "assert area_polygon(5, 6) == 54.73054281847274",
        "num_ids": 1633,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum1 = 0\n    div_sum2 = 0\n    \n    # Finding divisors for first integer\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            div_sum1 += i\n            if n//i!= i:\n                div_sum1 += n//i\n    \n    # Finding divisors for second integer\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            div_sum2 += i\n            if n//i!= i:\n                div_sum2 += n//i\n    \n    # Comparing the sum of divisors of two integers\n    if div_sum1 == div_sum2:\n        return True\n    else:\n        return False",
        "test": "assert div_sum(1) == True",
        "num_ids": 2172,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def count_char_position(str1):\n    '''\n    This function takes a string as input and returns a dictionary containing the number of characters that occur at the same position as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count_dict = {}\n\n    for char in str1.lower():\n        if char in alphabet:\n            if char in count_dict:\n                count_dict[char] += 1\n            else:\n                count_dict[char] = 1\n\n    return count_dict",
        "test": "assert count_char_position(\"\") == {}",
        "num_ids": 3274,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1,2,3,4]) == 2",
        "num_ids": 1812,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 37,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "test": "assert next_power_of_2(3) == 4",
        "num_ids": 1256,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5],6) == 0",
        "num_ids": 1821,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 2, 4) == 12 # test case 1",
        "num_ids": 2282,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a",
        "test": "assert perimeter_pentagon(3) == 15, \"perimeter_pentagon(3) should return 15\"",
        "num_ids": 1161,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count",
        "test": "assert count_occurance('hello std world') == 1",
        "num_ids": 1328,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "test": "assert check_type((1,2,3)) == True",
        "num_ids": 1541,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[0] == x:\n        return True\n    if arr[n-1] == x:\n        return True\n    if arr[n//2] == x:\n        return True\n    return False",
        "test": "assert is_majority([1,2,3,4,5,5,5,5,5], 9, 6) == False",
        "num_ids": 2788,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and returns a new string with all characters at odd index positions removed.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:  # checking if index is even\n            new_str += str[i]\n    return new_str",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 1334,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(2,4,1) == 1",
        "num_ids": 1400,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1<<r) - (1<<l)\n    if n & mask == 0:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b1111,0,3) == False",
        "num_ids": 2413,
        "indeed": true
    },
    {
        "number": 229,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes an array and an integer n as input.\n    It re-arranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    \n    # Separating negative and positive elements into two lists\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n            \n    # Sorting the negative list in ascending order\n    negative.sort()\n    \n    # Re-arranging the original array with negative elements first and then positive elements\n    for i in range(n):\n        if i < len(negative):\n            arr[i] = negative[i]\n        else:\n            arr[i] = positive[i - len(negative)]\n            \n    return arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5, 6], 6) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 3996,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces all blank spaces in the given string with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank(\"hello world\",\"*\")==\"hello*world\"",
        "num_ids": 1234,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    \n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    \n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([1, 2, 3, 4, 5], 1) == [5]",
        "num_ids": 2677,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as arguments\n    and returns the lateral surface area of the cylinder.\n    '''\n    lateralsurface = 2 * 3.14159 * r * h\n    return lateralsurface",
        "test": "assert lateralsuface_cylinder(0,5) == 0",
        "num_ids": 2281,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "test": "assert volume_cube(1) == 1, \"incorrect volume\"",
        "num_ids": 840,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes a number as input and returns a number with all even bits set.\n    \"\"\"\n    # Iterate through all bits of the number\n    for i in range(32):\n        # Check if the bit is even\n        if n & (1 << i):\n            # If the bit is even, set it in the result\n            n |= (1 << i)\n    # Return the result\n    return n",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 2265,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "test": "assert check_occurences([(1,2), (3,4), (1,2), (3,4), (1,2)]) == {(1, 2): 3, (3, 4): 2}",
        "num_ids": 2647,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if i == j:\n                continue\n            count += 1\n    return count",
        "test": "assert number_of_substrings('') == 0",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        prev_seq = get_total_number_of_sequences(m, n-1)\n        current_seq = (m-prev_seq+1)*prev_seq\n        return current_seq",
        "test": "assert get_total_number_of_sequences(5,2) == 5",
        "num_ids": 3024,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) >= len(list2):\n        for i in range(len(list2)):\n            list1[-i-1] = list2[i]\n    else:\n        print(\"The second list cannot be longer than the first list.\")\n    return list1",
        "test": "assert replace_list([1,2,3], [4]) == [1,2,4]",
        "num_ids": 1914,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac('hello') == 5",
        "num_ids": 975,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 29,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    num = int(math.sqrt(N))+1 # find the square root of N and add 1 to get the next perfect square\n    return num*num   # return the next perfect square",
        "test": "assert next_Perfect_Square(2) == 4",
        "num_ids": 1425,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    n = len(arr)\n    \n    # Create an auxiliary array to store the maximum sum ending at each index\n    dp = [0] * n\n    \n    # Initialize the first element of the auxiliary array as the first element of the array\n    dp[0] = arr[0]\n    \n    # Initialize the maximum sum of the bitonic subsequence as the first element of the array\n    max_sum = dp[0]\n    \n    # Traverse the array from the second element to the last element\n    for i in range(1, n):\n        \n        # Check if the current element is greater than the previous element\n        if arr[i] > arr[i-1]:\n            \n            # If it is, then add it to the maximum sum of the bitonic subsequence ending at the previous element\n            dp[i] = arr[i] + dp[i-1]\n            \n        # If the current element is not greater than the previous element, then it forms a new sequence, so update the maximum sum accordingly\n        else:\n            dp[i] = arr[i]\n            \n        # Update the maximum sum of the bitonic subsequence if the current sum is greater than the current maximum sum\n        max_sum = max(max_sum, dp[i])\n        \n    return max_sum",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 3771,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes the square root of a number using the Babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number.\")\n    else:\n        guess = number / 2.0\n        while abs(guess**2 - number) > 0.00001:\n            guess = (guess + number / guess) / 2.0\n        return round(guess, 4)",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 1855,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store lengths of palindromic subsequences\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    for k in range(2, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                # If the length of the substring is 2, it is a palindrome\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                # If the length of the substring is greater than 2, check the substrings of length k-2 around the diagonal\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                # If the characters at the two ends don't match, take the maximum of the palindromic substrings around the diagonal and the substrings around them\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n - 1]",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 2990,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n-1)",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 1392,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    for num in array_nums1:\n        if num in array_nums2:\n            if num not in intersection_list:\n                intersection_list.append(num)\n    return intersection_list",
        "test": "assert intersection_array([1,2,3],[2,4,6]) == [2]",
        "num_ids": 1796,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X((1,2,3,2,1), 1) == 2",
        "num_ids": 1626,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Insert an element before each element in a list and return the resulting list.\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        new_lst.append(elem)\n        new_lst.append(i)\n    return new_lst",
        "test": "assert insert_element([],0) == []",
        "num_ids": 2021,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes in a list of complex numbers as input and returns a list of tuples containing the magnitude and angle of each complex number in polar coordinates.\n    \"\"\"\n    polar_coords = []\n    for num in numbers:\n        mag = abs(num)\n        angle = cmath.phase(num)\n        polar_coords.append((mag, angle))\n    return polar_coords",
        "test": "assert convert([1+2j, 3-4j]) == [(cmath.polar(1+2j)[0], cmath.polar(1+2j)[1]), (cmath.polar(3-4j)[0], cmath.polar(3-4j)[1])]  ",
        "num_ids": 2309,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as an input and returns the number of integer elements present in the list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1,2,3,4,5]) == 5",
        "num_ids": 1521,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    This function takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]",
        "test": "assert combinations_colors(['a', 'b', 'c'], 1) == [('a',), ('b',), ('c',)]",
        "num_ids": 5852,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 1831,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)",
        "test": "assert swap_numbers(1, 2) == (2, 1)",
        "num_ids": 1195,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the maximum value of the first tuple\n    max_val1 = max(test_tup1)\n    \n    # Find the maximum value of the second tuple\n    max_val2 = max(test_tup2)\n    \n    # Compare the two maximum values and return the tuple with the maximum value\n    if max_val1 > max_val2:\n        return test_tup1\n    else:\n        return test_tup2",
        "test": "assert maximize_elements((1,2,3), (4,5,6)) == (4,5,6)",
        "num_ids": 2646,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n        return prime_list[n-1]",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 2763,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Create an empty list to store the result of division operation\n    result_list = []\n\n    # Loop through the two tuples\n    for i in range(len(test_tup1)):\n        result = test_tup1[i] / test_tup2[i]  # Perform division operation\n        result_list.append(result)  # Append the result to the result list\n\n    # Convert the result list to a tuple and return it\n    return tuple(result_list)",
        "test": "assert division_elements((1, 2, 3), (4, 5, 6)) == (0.25, 0.4, 0.5)",
        "num_ids": 2468,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 2752,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age / 7",
        "test": "assert dog_age(0) == 0.0, 'Test case 3 failed'",
        "num_ids": 1190,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 2643,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 1192,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_numbers = []\n    for i in range(1, 2*n+1, 2):\n        odd_numbers.append(i)\n    squares = [x**2 for x in odd_numbers[:n]]\n    return sum(squares)",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1223,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the first two star numbers\n    first = 1\n    second = 3\n\n    # Check if the input is valid\n    if n <= 0:\n        return \"Invalid input. n must be greater than 0.\"\n    elif n == 1:\n        return first\n    elif n == 2:\n        return second\n    else:\n        # Iterate through the remaining star numbers\n        for i in range(3, n+1):\n            # Calculate the next star number\n            third = 2*second + first\n            # Update the variables\n            first = second\n            second = third\n        # Return the nth star number\n        return third",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 1288,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 805,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "test": "assert sum_even_and_even_index([0,1,2,3,4]) == 6 # 0 + 2 + 4 = 6",
        "num_ids": 2226,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**5\n    return total",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 1579,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 1967,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Takes two tuples of equal length and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must be of equal length\")\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 2555,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    # Initialize sum to zero\n    sum = 0\n    \n    # Iterate over even indices from 0 to n-2\n    for i in range(0, n-2, 2):\n        # Calculate binomial coefficient using math.comb() function\n        binomial_coeff = math.comb(n, i)\n        # Add binomial coefficient to sum if it is even\n        if binomial_coeff % 2 == 0:\n            sum += binomial_coeff\n    \n    # Return the sum of even index binomial coefficients\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1662,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (math.pi * r ** 2) * h\n    return volume",
        "test": "assert volume_cylinder(0, 1) == 0.0",
        "num_ids": 1845,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}",
        "test": "assert dict_filter({'a': 10, 'b': 20, 'c': 30}, 20) == {'b': 20, 'c': 30}",
        "num_ids": 2301,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count",
        "test": "assert count_first_elements(()) == 0",
        "num_ids": 1700,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    i = 1\n    decagonal_number = 0\n    while count < n:\n        decagonal_number += i\n        count += 1\n        i += 1\n    return decagonal_number",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1618,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 2109,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)",
        "test": "assert all_unique([1,2,3,4,5]) == True",
        "num_ids": 1409,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[1,1,1]) == [0,1,2]",
        "num_ids": 1778,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True",
        "test": "assert validate(123) == True",
        "num_ids": 1834,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check whether all elements in a list are equal to a given element\n    \"\"\"\n    for i in lst:\n        if i!= elem:\n            return False\n    return True",
        "test": "assert check_element([1,1,1,1,1], 1) == True",
        "num_ids": 1393,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three('abc') == False # 'a' followed by 1 or 2 'b' characters",
        "num_ids": 1273,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # find the sum of first subarray\n    max_sum = sum(a[:k])\n    \n    # find the maximum sum of the modified array\n    current_sum = max_sum\n    for i in range(k, n):\n        current_sum = max(current_sum + a[i], a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1,2,3,4,5], 5, 1) == 15",
        "num_ids": 2909,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    # initialize sum to 0\n    sum = 0\n    # loop through first n even natural numbers\n    for i in range(2, n*2, 2):\n        # add square of each even natural number to sum\n        sum += i**2\n    # return sum of squares of first n even natural numbers\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 2700,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize dp table\n    dp = [[0 for j in range(k)] for i in range(n)]\n    \n    # Base case\n    dp[0][0] = 1\n    \n    # Iterate through all colors and posts\n    for i in range(1, n):\n        for j in range(k):\n            # Iterate through all previous colors\n            for prev_color in range(k):\n                # If the previous color is the same as the current color, we can reuse the previous color\n                if prev_color == j:\n                    dp[i][j] += dp[i-1][prev_color]\n                # If the previous color is different from the current color, we can choose a new color\n                else:\n                    dp[i][j] += dp[i-1][prev_color]\n    \n    # Return the count of ways to paint the fence\n    return dp[n-1][k-1]",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 2491,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    else:\n        return n // m",
        "test": "assert find(4,2) == 2",
        "num_ids": 1037,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 1343,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function finds the maximum value in a given list of numbers, strings or mixed.\n    \"\"\"\n    if not lst:\n        return None\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1694,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    # Initialize a variable to store the sum\n    total = 0\n    \n    # Check if the number is less than 2\n    if number < 2:\n        return 0\n    \n    # Loop through all numbers from 1 to the number itself\n    for i in range(1, number+1):\n        # Check if the number is a divisor of the given number\n        if number % i == 0:\n            # Add the divisor to the total\n            total += i\n    \n    # Return the total\n    return total",
        "test": "assert sum_div(10) == 18 # 1 + 2 + 5 + 10 = 18",
        "num_ids": 1616,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 28,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0",
        "num_ids": 3457,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert flatten_list([1,2,[3,4,[5,6]],7]) == [1,2,3,4,5,6,7]",
        "num_ids": 2312,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Iterate over the list of tuples and update the frequency dictionary\n    for item, price in stdata:\n        freq[item] += price\n\n    # Initialize a variable to store the maximum aggregate\n    max_agg = 0\n\n    # Iterate over the frequency dictionary and update the maximum aggregate\n    for item, price in freq.items():\n        max_agg += price\n\n    return max_agg",
        "test": "assert max_aggregate([(0, 0), (0, 0), (0, 0)]) == 0",
        "num_ids": 2879,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def count_binary_seq(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        # count all binary sequences of length n-1 that end with 0\n        count_0 = count_binary_seq(n-1)\n        # count all binary sequences of length n-1 that end with 1\n        count_1 = count_binary_seq(n-1)\n        # count all binary sequences of length n that start with 0\n        count_00 = count_binary_seq(n-1)\n        # count all binary sequences of length n that start with 1\n        count_01 = count_binary_seq(n-1)\n        # add up all counts\n        return count_0 + count_1 + count_00 + count_01",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 2481,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    depth = 1\n    for v in d.values():\n        depth = max(depth, dict_depth(v) + 1)\n    return depth",
        "test": "assert dict_depth({'a': 1, 'b': {'c': 2, 'd': {'e': 3}}}) == 3, \"Wrong depth for nested dictionary\"",
        "num_ids": 1691,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 22,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def find_Element(arr,ranges,rotations,index) : \n    '''\n    This function takes an array, range of the array to consider and the number of rotations required to be performed on the array. It then returns the element at the given index after the number of rotations.\n    '''\n    n = len(arr)\n    # Calculate the index of the first element after the given index after number of rotations\n    k = (index + rotations) % n\n    # Return the element at the calculated index\n    return arr[k]",
        "test": "assert find_Element([1,2,3,4,5],[(0,4)],0,0) == 1",
        "num_ids": 2591,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    This function takes a list of words as input and returns two words from the list \n    starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'p\\w*\\b')\n    p_words = []\n    \n    for word in words:\n        if pattern.match(word):\n            p_words.append(word)\n    \n    return p_words[:2]",
        "test": "assert start_withp(['apple', 'pear', 'peach', 'pineapple', 'plum']) == ['pear', 'peach']",
        "num_ids": 2052,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # initialize variables\n    i = index\n    j = k\n    sum_1 = 0\n    sum_2 = 0\n    ans = float('-inf')\n    \n    # loop through the array until we reach the end of prefix\n    while i >= 0:\n        \n        # check if current element is greater than the previous element\n        if a[i] < a[j]:\n            \n            # add the current element to the sum\n            sum_1 += a[i]\n            \n            # update the answer if the sum is greater than current answer\n            if sum_1 > ans:\n                ans = sum_1\n            \n            # move to the previous element\n            i -= 1\n            \n        # if current element is not greater than the previous element\n        else:\n            \n            # add the current element to the sum\n            sum_2 += a[i]\n            \n            # update the answer if the sum is greater than current answer\n            if sum_2 > ans:\n                ans = sum_2\n            \n            # move to the previous element\n            i -= 1\n            \n    return ans",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 201",
        "num_ids": 4055,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    if not isinstance(tuplex, tuple):\n        raise TypeError('tuplex must be a tuple')\n\n    start = max(0, m)\n    end = min(len(tuplex), n)\n    return deepcopy(tuplex[start:end])",
        "test": "assert colon_tuplex((1,2,3,4,5),0,0) == ()",
        "num_ids": 2209,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 360,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum and minimum values for each list\n    max_nums1 = max(nums1)\n    max_nums2 = max(nums2)\n    min_nums1 = min(nums1)\n    min_nums2 = min(nums2)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the largest N elements from both lists\n    for i in range(N):\n        # Initialize the maximum and minimum factors for this iteration\n        max_factor = 0\n        min_factor = 1\n\n        # Find the largest factor for nums1[i]\n        for j in range(nums1[i], max_nums1+1):\n            if j % nums2[i] == 0:\n                if j > max_factor:\n                    max_factor = j\n\n        # Find the smallest factor for nums2[i]\n        for j in range(nums2[i], min_nums2-1, -1):\n            if nums1[i] % j == 0:\n                if j < min_factor:\n                    min_factor = j\n\n        # Append the product of the largest and smallest factors to the result list\n        result.append(max_factor * min_factor)\n\n    return result",
        "test": "assert large_product([1,2,3],[4,5,6],5) == [(6,6,6,6,6), (6,6,6,6,6), (4,5,6,5,4), (4,5,6,5,4), (4,4,5,6,3)]",
        "num_ids": 4036,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Returns the maximum of two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of a and b.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(3,5) == 5",
        "num_ids": 1040,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n\n    Args:\n    n (int): An integer representing the number whose left most unset bit is to be set.\n\n    Returns:\n    int: An integer representing the number with the left most unset bit set.\n    \"\"\"\n    # Check if n is 0, in which case there are no unset bits.\n    if n == 0:\n        return 1\n    \n    # Set the left most unset bit\n    n |= (n & -n)\n    \n    return n",
        "test": "assert set_left_most_unset_bit(1) == 1",
        "num_ids": 1985,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone and returns its volume.\n    \"\"\"\n    volume = (1/3)*math.pi*r**2*h\n    return volume",
        "test": "assert volume_cone(1,3) == 3.141592653589793",
        "num_ids": 1630,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 40,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function returns the highest power of 2 that is less than or equal to n.\n    '''\n    # Set a variable to hold the power of 2\n    power = 1\n    # Check if n is a power of 2\n    while power <= n:\n        # If n is a power of 2, return the power\n        if n == power:\n            return power\n        # If not, increase the power of 2 by 1\n        power <<= 1\n    # If n is not a power of 2, return the previous power\n    return power >> 1",
        "test": "assert highest_Power_of_2(0) == 0",
        "num_ids": 1384,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 1337,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "test": "assert add_string([\"apple\", \"banana\", \"orange\"], \"hello, {}\") == [\"hello, apple\", \"hello, banana\", \"hello, orange\"]",
        "num_ids": 2001,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    my_dict = {}\n    for i in range(len(l1)):\n        my_dict[l1[i]] = {l2[i]: l3[i]}\n    return my_dict",
        "test": "assert convert_list_dictionary([], ['a', 'b', 'c'], [True, False, True]) == {}",
        "num_ids": 2999,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_max_sum(n):\n    if n < 2:\n        return n\n    else:\n        max_sum = n\n        for i in range(2, n+1):\n            max_sum = max((max_sum, i + (max_sum // i)))\n        return max_sum",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1923,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list of lists as input and returns the list with maximum length.\n    If there are multiple lists with the same maximum length, it will return the first one.\n    '''\n    max_length = 0\n    result_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            result_list = lst\n    return result_list",
        "test": "assert max_length_list([[], [1], [1, 2], [1, 2, 3], [1, 2, 3, 4]]) == [1, 2, 3, 4]",
        "num_ids": 2322,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_distinct(test_tup):\n    '''\n    Check if a tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "test": "assert check_distinct((1,2,3)) == True",
        "num_ids": 1225,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # Create an empty dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    # Iterate through the string and update the frequency of each character\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    # Iterate through the string again to find the first non-repeating character\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    # If all characters are repeating, return None\n    return None",
        "test": "assert first_non_repeating_character('abcabcdef') == 'd'",
        "num_ids": 1878,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_char('abc') == False",
        "num_ids": 1131,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes in three numbers as arguments and returns their median value.\n    \"\"\"\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # find the median\n    if len(set(sorted_numbers)) == 1:\n        # if all numbers are the same, the median is the same as all three numbers\n        median = sorted_numbers[0]\n    elif len(set(sorted_numbers)) == 2:\n        # if there are only two unique numbers, the median is their average\n        median = (sorted_numbers[0] + sorted_numbers[1]) / 2\n    else:\n        # if there are more than two unique numbers, the median is the middle number\n        median = sorted_numbers[1]\n    return median",
        "test": "assert median_numbers(5,5,5) == 5",
        "num_ids": 1637,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        while num > 0:\n            digit = num % 10\n            sum_of_digits += digit\n            num = num // 10\n    return sum_of_digits",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 2471,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    This function performs the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    \n    # Check if the tuples are of equal length\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] ^ test_tup2[i],)\n    else:\n        print(\"Error: Tuples are not of equal length.\")\n        \n    return result_tup",
        "test": "assert bitwise_xor((1, 2, 3), (4, 5, 6)) == (5, 7, 5)",
        "num_ids": 2376,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)",
        "test": "assert extract_freq([('a', 1), ('b', 2), ('c', 1), ('d', 2), ('e', 1), ('f', 2)]) == 6",
        "num_ids": 1933,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)",
        "test": "assert add_nested_tuples(((1,2),(3,4)),((5,6),(7,8))) == ((6,8),(10,12))",
        "num_ids": 2922,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2,3) == 2",
        "num_ids": 871,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes in two arguments: a tuple and an element to check if it exists within the tuple.\n    It returns True if the element exists in the tuple, and False otherwise.\n    '''\n    if tuple1 in tuplex: \n        return True\n    else: \n        return False",
        "test": "assert check_tuplex((1,2,3),(4,5)) == False",
        "num_ids": 1432,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 28,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer as an input and returns True if the parity of the number is odd, False otherwise.\n    \"\"\"\n    if x % 2 == 1:\n        return True\n    else:\n        return False",
        "test": "assert find_Parity(10) == False",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len-1):\n        for j in range(i+1, n_len):\n            if int(n_str[i]) < int(n_str[j]):\n                temp = n_str[i]\n                n_str = n_str[:i] + n_str[j] + n_str[i+1:j] + temp + n_str[j+1:]\n                return int(n_str)\n    return -1",
        "test": "assert rearrange_bigger(1) == -1",
        "num_ids": 2901,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n\n    # Create a max heap of all possible pairs\n    for i in nums1:\n        for j in nums2:\n            heapq.heappush(heap, (i + j, i, j))\n\n    # Extract k pairs from the heap\n    for i in range(k):\n        pair = heapq.heappop(heap)\n        pairs.append((pair[1], pair[2]))\n\n    return pairs",
        "test": "assert k_smallest_pairs([1,3,2,4], [5,6,7,8], 1) == [(1,5)]",
        "num_ids": 3851,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1,2),(3,4),(5,6),(7,8)]) == 24",
        "num_ids": 2545,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_val(listval):\n    '''\n    This function takes a heterogeneous list and returns the minimum value in the list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val",
        "test": "assert min_val([1,2,3,4,5]) == 1",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 35,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 1392,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and removes all the odd numbers from the list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]",
        "test": "assert remove_odd([1,2,3,4,5]) == [2,4]",
        "num_ids": 1479,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extract the nth element from a list of tuples.\n    '''\n    return lst[n-1][1]",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == 4",
        "num_ids": 1834,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks whether any value in a sequence exists in another sequence or not.\n    '''\n\n    # Iterate through each element in the first list\n    for elem in list1:\n        # Check if the element exists in the second list\n        if elem in list2:\n            # If it does, return True\n            return True\n    # If no element is found in the second list, return False\n    return False",
        "test": "assert overlapping([1,2,3],[2,3,4]) == True",
        "num_ids": 1422,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def max_Product(arr):\n    max_num = max(arr)\n    max_product = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] > 0 and arr[i] > max_num:\n            max_num = arr[i]\n            max_product = arr[i] * max_product\n        elif arr[i] < 0 and arr[i] > max_product:\n            max_product = arr[i] * max_product\n        else:\n            continue\n    return max_product",
        "test": "assert max_Product([-2, 0, -1]) == 0 # Testcase2",
        "num_ids": 2423,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if common_element is None:\n            common_element = i[0]\n        else:\n            if i[0]!= common_element:\n                return None\n    return common_element",
        "test": "assert group_tuples([]) == None",
        "num_ids": 2343,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list with maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    \n    return max_element",
        "test": "assert Find_Max([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == \"elderberry\"",
        "num_ids": 1708,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 380,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    print(total_sum * len(list1))",
        "test": "assert round_and_sum([1.2, 3.4, 5.6, 7.8, 9.0, 10.2, 11.4, 12.6]) == 12 # expected output: 12 (5.6 rounded to 1)",
        "num_ids": 2382,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        sum += i ** 3\n        i += 2\n    return sum",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 1373,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def concatenate_tuple(test_tup, delimiter=','):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for i in range(len(test_tup)):\n        concatenated_string += str(test_tup[i]) + delimiter\n    return concatenated_string[:-1] #remove the last delimiter",
        "test": "assert concatenate_tuple(('a',)) == 'a'",
        "num_ids": 1664,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum / n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1718,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[len(string)-1],)\n    return rear_tuple",
        "test": "assert extract_rear(('hello', 'world')) == ('o', 'd')",
        "num_ids": 1636,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    This function takes a list and an element as inputs and returns the number of sublists in the list that contain the element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([[], [0], [], [], [1]], 0) == 1",
        "num_ids": 1836,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert filter_oddnumbers([]) == []",
        "num_ids": 1640,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression to match the date pattern\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    \n    # Match the date pattern in the input string and get the groups\n    match = pattern.search(dt)\n    if match:\n        year, month, day = match.groups()\n        # Return the date in the desired format\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "test": "assert change_date_format(\"2022-01-11\") == \"11-01-2022\"",
        "num_ids": 2438,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while  j >= gap and my_list[j-gap] >temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "test": "assert shell_sort([]) == []",
        "num_ids": 2418,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] & test_tup2[i],)\n    return result_tup",
        "test": "assert and_tuples((True, True, False), (True, False, True)) == (True, False, False)",
        "num_ids": 1999,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"The equation is not a parabola\"\n    else:\n        x = -b/(2*a)\n        return x",
        "test": "assert parabola_directrix(1, 0, 0) == 0",
        "num_ids": 2084,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3], [2, 3, 4]) == True",
        "num_ids": 1682,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the longer base\n    if base1 >= base2:\n        longer_base = base1\n        shorter_base = base2\n    else:\n        longer_base = base2\n        shorter_base = base1\n        \n    # Calculate the median length\n    median_length = (longer_base + shorter_base) / 2\n    \n    # Calculate the area of the trapezium\n    area = ((longer_base + shorter_base) / 2) * height\n    \n    # Calculate the median height\n    median_height = area / median_length\n    \n    # Return the median height\n    return median_height",
        "test": "assert median_trapezium(10,20,15) == 15",
        "num_ids": 1899,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "test": "assert check_greater([1,2,3], 3) == False",
        "num_ids": 1481,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one('abb') == True",
        "num_ids": 1058,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last_Digit(n):\n    return n % 10",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 994,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result",
        "test": "assert neg_nos([1, 2, -3, 4, -5]) == [-3, -5]",
        "num_ids": 1719,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def count_bidirectional(test_list):\n    '''\n    This function takes a list of tuples as input and returns the number of bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(1,1), (2,2), (3,3), (4,4), (5,5), (6,6), (7,7), (8,8), (9,9), (10,10)]) == 0",
        "num_ids": 3808,
        "indeed": true
    },
    {
        "number": 439,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return int(''.join(str(x) for x in L))",
        "test": "assert multiple_to_single([0, 0, 0]) == 0",
        "num_ids": 1580,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Finds the first adverb and their positions in a given sentence.\n\n    Parameters:\n        text (str): The input sentence.\n\n    Returns:\n        list: A list containing the first adverb and its positions in the sentence.\n    \"\"\"\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n\n    # If there are no adverbs, return None\n    if not adverbs:\n        return None\n\n    # Find the positions of the first adverb in the sentence\n    positions = [m.start() for m in re.finditer(adverbs[0], text)]\n\n    # Return the adverb and its positions as a list\n    return [adverbs[0], positions]",
        "test": "assert find_adverb_position(\"The cat slept under the bed.\") == None, \"There is no adverb in the sentence\"",
        "num_ids": 3237,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a length of a cube as an input and returns its surface area.\n    '''\n    area = 6 * (l ** 2)\n    return area",
        "test": "assert surfacearea_cube(1) == 6 ",
        "num_ids": 1060,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from array import array\n\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "test": "assert positive_count(array('i', [-1, 0, 1, 2, 3])) == 3/5",
        "num_ids": 2140,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest",
        "test": "assert largest_neg([-1, -2, -3, -4, -5]) == -1",
        "num_ids": 1753,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "test": "assert trim_tuple([(1,2,3,4,5), (6,7,8,9,10)], 5) == [(1,2,3,4,5), (6,7,8,9,10)]",
        "num_ids": 3196,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == (4,10,18)",
        "num_ids": 2323,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary where the keys are the elements of the list and the values are the count of the occurrence of the elements in the tuple.\n    '''\n    count_dict = {}\n    for elem in lst:\n        count_dict[elem] = tup.count(elem)\n    return count_dict",
        "test": "assert count_Occurrence((), []) == {}",
        "num_ids": 3209,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 1678,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n",
        "test": "assert cal_sum(0) == 0, \"Test case 4 failed\"",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size as input and returns a list of substrings of the specified size.\n    '''\n    result_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            result_list.append(str_list[i][:size])\n    return result_list",
        "test": "assert extract_string('abc', 1) == ['a', 'b', 'c']",
        "num_ids": 1740,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "test": "assert remove_whitespaces(\"This is a test string\") == \"Thisisateststring\"",
        "num_ids": 1395,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the loss amount on a sale if the given sale amount is less than the actual cost.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0",
        "test": "assert loss_amount(50,50) == 0",
        "num_ids": 1558,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of all even factors of that number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum",
        "test": "assert sumofFactors(1) == 0",
        "num_ids": 2124,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z' in the given text.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz('Hello world') == False",
        "num_ids": 1718,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 25,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        print(\"Invalid month number. Please enter a valid month number.\")",
        "test": "assert check_monthnumb_number(12) == True, 'Month number 12 should have 31 days'",
        "num_ids": 1726,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for string in stringlist:\n        newlist.append(string[::-1])\n    return newlist",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 1652,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist having minimum length.\n    '''\n\n    min_len = len(lst[0])  # initializing minimum length as length of first sublist\n    min_lst = lst[0]      # initializing minimum sublist as first sublist\n\n    for sublist in lst:   # iterating over all sublists\n        if len(sublist) < min_len:  # checking if length of current sublist is less than minimum length\n            min_len = len(sublist)  # updating minimum length if current sublist is shorter\n            min_lst = sublist        # updating minimum sublist if current sublist is shorter\n\n    return min_lst  # returning minimum sublist",
        "test": "assert Find_Min([[1],[2],[3]]) == [1]",
        "num_ids": 2168,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def rectangle_area(l,b):\n    '''\n    This function takes two parameters, l and b, which represent the length and the breadth of the rectangle respectively. \n    It returns the area of the rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(4,5) == 20",
        "num_ids": 1019,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Remove all uppercase substrings from a given string.\n    \"\"\"\n    # Find all uppercase substrings using regex\n    uppercase_substrings = re.findall('[A-Z]+', str1)\n    \n    # Remove all uppercase substrings from the original string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1",
        "test": "assert remove_uppercase('') == ''",
        "num_ids": 1569,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def Extract(lst):\n    \"\"\"\n    Returns a new list with the first element of each sublist in the input list.\n\n    Parameters:\n    lst (list): The input list to extract the elements from.\n\n    Returns:\n    list: The new list with the first element of each sublist.\n    \"\"\"\n    return [sub[0] for sub in lst]",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7]",
        "num_ids": 1744,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def upper_ctr(string):\n    '''\n    This function will count the number of upper case letters in a given string.\n    '''\n    count = 0\n    for letter in string:\n        if letter.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"Hello World!\") == 2",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result",
        "test": "assert combinations_list([]) == [], \"Error in combinations_list function\"",
        "num_ids": 4080,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n        else:\n            temp = max_ending_here\n            max_ending_here = max(arr[i], min_ending_here * arr[i])\n            min_ending_here = min(temp * arr[i], arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6",
        "num_ids": 2431,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_value(dictionary, n):\n    \"\"\"\n    This function checks if all the values in a dictionary are the same.\n    :param dictionary: the dictionary to be checked\n    :param n: the value to be checked against\n    :return: True if all values are the same, False otherwise\n    \"\"\"\n    for value in dictionary.values():\n        if value!= n:\n            return False\n    return True",
        "test": "assert check_value({1:2, 3:4, 5:6}, 5) == False",
        "num_ids": 1908,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def drop_empty(dict1):\n    '''\n    This function removes empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 1986,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    max_product_ending_here = arr[0]\n    min_product_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i], min_product_ending_here * arr[i])\n        min_product_ending_here = min(arr[i], max_product_ending_here * arr[i], min_product_ending_here * arr[i])\n        max_product = max(max_product, max_product_ending_here)\n        min_product = min(min_product, min_product_ending_here)\n    \n    return max(max_product, min_product)",
        "test": "assert max_product([-2,0,-1]) == 0 ",
        "num_ids": 2613,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(sum(pair) for pair in zip(test_tup[:-1], test_tup[1:]))",
        "test": "assert add_pairwise((10,20,30,40)) == (30, 50, 70)",
        "num_ids": 2083,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result",
        "test": "assert find_remainder([1, 2, 3], 5) == 1 ",
        "num_ids": 1384,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False",
        "test": "assert check_Consecutive([1, 3, 5, 7]) == False",
        "num_ids": 1525,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two lists of tuples and returns a new list with tuples that are present in both lists irrespective of their order.\n    '''\n    result = []\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if set(t1) == set(t2):\n                result.append(t1)\n    return result",
        "test": "assert tuple_intersection([(1,2), (2,3), (3,4)], [(2,3), (3,4), (4,5)]) == [(2,3), (3,4)]",
        "num_ids": 3071,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace a character in a string with a new character.\n\n    Parameters:\n    str1 (str): The string to replace characters in.\n    ch (str): The character to replace.\n    newch (str): The new character to replace the old character with.\n\n    Returns:\n    str: The string with the character replaced.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "test": "assert replace_char('abc', 'b', 'o') == 'aoc'",
        "num_ids": 1505,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and returns a sorted list of tuples in descending order of their values.\n    '''\n    # Creating a Counter object from the input dictionary\n    counter = Counter(dict1)\n    # Sorting the counter object by values in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return sorted_counter",
        "test": "assert sort_counter({'hello': 3, 'world': 2, 'python': 4}) == [('python', 4), ('hello', 3), ('world', 2)]",
        "num_ids": 2236,
        "indeed": true
    },
    {
        "number": 476,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])",
        "test": "assert big_sum([0, 0, 0, 0, 0]) == 0",
        "num_ids": 1728,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 40,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def is_lower(string):\n    '''\n    Convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"hello\") == \"hello\"",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    This function removes lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)",
        "test": "assert remove_lowercase(\"abcdefghijklmnopqrstuvwxyz\") == \"\"",
        "num_ids": 1545,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 39,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    return n // 10**(len(str(n))-1)",
        "test": "assert first_Digit(1234) == 1",
        "num_ids": 1065,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 32,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in list:\n        if i%2!= 0:\n            result.append(i)\n    return result",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 1484,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
        "test": "assert difference(1) == 0",
        "num_ids": 1725,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2!= 0:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,1,1,1,1,1,1,1],8)==0",
        "num_ids": 1773,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "test": "assert toggle_string(\"\") == \"\"",
        "num_ids": 1319,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n\n    if len(n1)!= len(n2):\n        return \"Error: Numbers must have the same length.\"\n\n    sum_diff = 0\n    for i in range(len(n1)):\n        sum_diff += abs(int(n1[i]) - int(n2[i]))\n\n    return sum_diff",
        "test": "assert digit_distance_nums(12345, 54321) == 12, \"test case 2 failed\"",
        "num_ids": 2675,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function takes a list and its size as input and returns the sum of the largest contiguous sublist.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far",
        "test": "assert max_sub_array_sum([1, -2, 3, 4, -1, 2, 1, -5, 4], 9) == 9",
        "num_ids": 2510,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 30,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_union = sorted(union_set)\n    return sorted_union",
        "test": "assert union_elements((1,2,3), (3,4,5)) == [1, 2, 3, 4, 5]",
        "num_ids": 2488,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    \n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n                \n    return max_len",
        "test": "assert Find_Max_Length([1,2,3,4,5]) == 5",
        "num_ids": 2278,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values('The price of the product is \"12.99\" dollars.') == ['12.99']",
        "num_ids": 1731,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3], 3) == 3",
        "num_ids": 1645,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and splits it into characters.\n    '''\n    return [char for char in word]",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n//10)",
        "test": "assert sum_digits(1234) == 10",
        "num_ids": 1393,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 1433,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list",
        "test": "assert empty_list(0) == []",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"cherry\"], [\"dog\", \"cat\", \"bird\"], [\"zebra\", \"lion\", \"tiger\"]]) == [[\"apple\", \"banana\", \"cherry\"], [\"bird\", \"cat\", \"dog\"], [\"lion\", \"tiger\", \"zebra\"]]",
        "num_ids": 2775,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def two_unique_nums(*nums):\n    '''\n    This function takes in an arbitrary number of lists and removes any duplicates.\n    Returns a new list with only unique numbers.\n    '''\n\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n\n    # Loop through each list in the input\n    for lst in nums:\n        # Loop through each number in the list\n        for num in lst:\n            # Add the number to the set if it is not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)",
        "test": "assert two_unique_nums([]) == []",
        "num_ids": 2283,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 1614,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area",
        "test": "assert surfacearea_cylinder(0,5) == 0, \"surfacearea_cylinder(0,5) should be 0\"",
        "num_ids": 2189,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B == []:\n        return True\n    if A == []:\n        return False\n    if A[0] == B[0]:\n        return is_Sub_Array(A[1:], B[1:])\n    return is_Sub_Array(A[1:], B)",
        "test": "assert is_Sub_Array([1,2,3,4],[1,2,3,4]) == True",
        "num_ids": 1990,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    \n    else:\n        factorial = 1\n        \n        for i in range(1,n+1):\n            factorial = factorial * i\n        \n        return factorial % 10",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 1323,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 2713,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set of common elements between the two tuples\n    common_elements = set(test_tup1).intersection(set(test_tup2))\n    \n    # Create a set of all elements in the two tuples\n    all_elements = set(test_tup1).union(set(test_tup2))\n    \n    # Calculate the set difference between the two sets\n    dissimilar_elements = all_elements.difference(common_elements)\n    \n    # Convert the set to a list and sort it alphabetically\n    dissimilar_elements = sorted(list(dissimilar_elements))\n    \n    return dissimilar_elements",
        "test": "assert find_dissimilar((1, 2, 3), (2, 3, 4)) == find_dissimilar((1, 2, 3), (2, 3, 4))",
        "num_ids": 2577,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def even_ele(test_tuple, even_fnc): \n    \"\"\"\n    A function to remove uneven elements in a nested mixed tuple.\n    \"\"\"\n    result = []\n    for item in test_tuple:\n        if isinstance(item, (int, float)):\n            if even_fnc(item):\n                result.append(item)\n        else:\n            sub_result = even_ele(item, even_fnc)\n            if sub_result:\n                result.append(sub_result)\n    return tuple(result)\n\ndef is_even(num):\n    \"\"\"\n    A helper function to check if a number is even.\n    \"\"\"\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert even_ele((1,2,3), lambda x: x%2==0) == (2,)",
        "num_ids": 3099,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 6 * (b * s)\n    return area",
        "test": "assert surface_Area(1,2) == 12, \"Surface area for base edge 1 and height 2 is incorrect.\"",
        "num_ids": 1851,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function checks if a dictionary is empty.\n    \"\"\"\n    if dict1:\n        return False\n    else:\n        return True",
        "test": "assert not my_dict(\"not a dictionary\"), \"A string is not a dictionary\"",
        "num_ids": 1075,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - i - 1)\n        return result",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 1492,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f'Adverb: {match.group()}, Position: {match.start()}')",
        "test": "assert find_adverbs(\"I am not feeling well.\") == None, \"Failed test case 4\"",
        "num_ids": 2505,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "test": "assert expensive_items([(\"apple\", 5), (\"banana\", 3), (\"orange\", 7), (\"pear\", 2), (\"grape\", 4)], 0) == []",
        "num_ids": 3019,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5], \"Incorrect split at 5\"",
        "num_ids": 2144,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as an input and returns a tuple.\n    \"\"\"\n    return tuple(lst)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 1159,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num",
        "test": "assert big_diff([1,2,3,4,5]) == 4",
        "num_ids": 1446,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function finds all the perfect squares between two given numbers.\n\n    Args:\n    a (int): the first number\n    b (int): the second number\n\n    Returns:\n    A list of all the perfect squares between a and b.\n    \"\"\"\n\n    # Initialize an empty list to store the perfect squares\n    squares = []\n\n    # Loop through all the numbers between a and b (inclusive)\n    for num in range(a, b+1):\n\n        # Check if the number is a perfect square\n        root = int(num**0.5)\n        if root**2 == num:\n            squares.append(num)\n\n    # Return the list of perfect squares\n    return squares",
        "test": "assert perfect_squares(2, 5) == [4], 'Function is not working correctly'",
        "num_ids": 2339,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    z = x + y * 1j\n    return (float(z.real), float(z.imag))\n",
        "test": "assert polar_rect(2,0) == (2,0)",
        "num_ids": 1824,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an input and swaps the first and last elements of the list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1669,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 30,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    res = 1\n    for i in range(k):\n        res = res * (n-i) / (i+1)\n    return res",
        "test": "assert binomial_Coeff(5,2) == 10",
        "num_ids": 2001,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove any non-numeric characters from the ip address\n    ip = re.sub(r'[^\\d\\.]', '', ip)\n    \n    # split the ip address into a list of octets\n    octets = ip.split('.')\n    \n    # remove any leading zeroes from each octet\n    octets = [str(int(octet)) if octet!= '0' else '0' for octet in octets]\n    \n    # join the octets back together and return the result\n    return '.'.join(octets)",
        "test": "assert removezero_ip('255.255.255.255') == '255.255.255.255'",
        "num_ids": 2226,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and returns the difference between the first even and first odd number.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += 1\n            if even == 1:\n                first_even = i\n        else:\n            odd += 1\n            if odd == 1:\n                first_odd = i\n    return first_even - first_odd",
        "test": "assert diff_even_odd([1, 4, 7, 10]) == 3",
        "num_ids": 2333,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert one binary number to the other.\n    '''\n    if len(str1)!= len(str2):\n        return \"Length of both strings should be equal\"\n    \n    # Convert the binary strings to integer lists\n    num1 = [int(d) for d in str1]\n    num2 = [int(d) for d in str2]\n    \n    # Initialize a list to store the positions of digits in num2\n    positions = [-1] * 10\n    \n    # Traverse through num2 and store the positions of digits in num2\n    for i in range(len(num2)):\n        positions[num2[i]] = i\n    \n    # Initialize variables to store the minimum number of swaps required to convert one binary number to the other\n    min_swaps = 0\n    temp = 0\n    \n    # Traverse through num1 and count the minimum number of swaps required to convert one binary number to the other\n    for i in range(len(num1)):\n        if num1[i]!= num2[i]:\n            # If the digits do not match, swap the digits and update the positions list accordingly\n            temp = positions[num1[i]]\n            positions[num1[i]] = i\n            positions[num2[i]] = temp\n            min_swaps += 1\n    \n    return min_swaps",
        "test": "assert min_Swaps('1111111111111111111111111111111111111111111111111111111111111111', '1111111111111111111111111111111111111111111111111111111111111111') == 0  # should return 0",
        "num_ids": 3296,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = sys.getsizeof(tuple_list)\n    return size",
        "test": "assert tuple_size(()) == sys.getsizeof(())",
        "num_ids": 1846,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while True:\n        if i >= len(arr1):\n            return arr2[k-1]\n        if j >= len(arr2):\n            return arr1[k-1]\n        if k == 1:\n            return min(arr1[i], arr2[j])\n        new_i = min(i+k//2-1, len(arr1)-1)\n        new_j = min(j+k//2-1, len(arr2)-1)\n        pivot_i = partition(arr1, i, new_i)\n        pivot_j = partition(arr2, j, new_j)\n        if pivot_i == k-1:\n            return arr1[pivot_i]\n        elif pivot_j == k-1:\n            return arr2[pivot_j]\n        elif pivot_i < k-1:\n            i = pivot_i + 1\n        else:\n            j = pivot_j + 1\n\ndef partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[right] = arr[right], arr[i+1]\n    return i+1\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [6, 7, 8, 9, 10]\nk = 5\nprint(find_kth(arr1, arr2, k)) # Output: 5",
        "test": "assert find_kth([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 1) == 1",
        "num_ids": 3869,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** len(str(number))\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 1994,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_average(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of first n natural numbers\n    and the average of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    return sum, average",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 1465,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is even, otherwise False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None",
        "test": "assert first_repeated_char('abca') == 'a'",
        "num_ids": 1370,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_ludic(n):\n    \"\"\"\n    This function returns a list of all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for num in range(2, n+1):\n        is_lucid = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(num)\n    return lucid_numbers",
        "test": "assert get_ludic(0) == []",
        "num_ids": 2073,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Reverse the order of the words in the list\n    reversed_words = words[::-1]\n    \n    # Join the words back into a string with spaces\n    reversed_string =''.join(reversed_words)\n    \n    return reversed_string",
        "test": "assert reverse_words(\"a\") == \"a\"",
        "num_ids": 1494,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and checks if it is a prime number or not.\n    Returns True if it is a prime number, False otherwise.\n    '''\n    # Firstly, we check if the number is less than 2, since 1 and numbers less than 1 are not prime\n    if num < 2:\n        return False\n    \n    # Next, we check if the number is 2, which is the only even prime number\n    if num == 2:\n        return True\n    \n    # We check if the number is divisible by any number less than itself\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    # If the loop completes without returning False, it means the number is prime\n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 1503,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    \"\"\"\n    radian = degree * math.pi / 180\n    return radian",
        "test": "assert radian_degree(360) == 2*math.pi",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    else:\n        return None",
        "test": "assert find_literals('abc', r'a') == ('a', 0, 1)",
        "num_ids": 2050,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def bell_Number(n):\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers))\n    return bell_numbers[n]",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 1485,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1.pop(k-1)\n    return list1",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4]",
        "num_ids": 2127,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    \"\"\"\n    max_value = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value",
        "test": "assert max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 1) == 7",
        "num_ids": 2352,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    return [list(i) for i in zip(*lst)]",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1,3,5],[2,4,6]]",
        "num_ids": 2152,
        "indeed": true
    },
    {
        "number": 614,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a list of tuples as input and returns a list of the cumulative sum of all the values that are present in the tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        total = 0\n        for j in range(len(test_list[i])):\n            total += test_list[i][j]\n        result.append(total)\n    return result",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 2225,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result",
        "test": "assert average_tuple(((1, 2), (3, 4))) == [1.5, 3.5]",
        "num_ids": 2494,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must be of the same length.\")\n    else:\n        mod_tup = ()\n        for i in range(len(test_tup1)):\n            mod_tup += (test_tup1[i] % test_tup2[i],)\n        return mod_tup",
        "test": "assert tuple_modulo((5, 10, 20), (3, 5, 7)) == (2, 0, 6)",
        "num_ids": 2469,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def min_Jumps(steps, d): \n    n = len(steps) \n    dp = [[0 for j in range(n)] for i in range(n)] \n  \n    # Initialize first column as 1 (only one way to reach) \n    for i in range(n): \n        dp[i][0] = 1\n  \n    # Fill the table in bottom-up manner \n    for i in range(1, n): \n        for j in range(1, n): \n            if (j >= steps[i-1]): \n                dp[i][j] = max(dp[i][j], dp[i-1][j-steps[i-1]] + 1) \n  \n    # The bottom-right corner will have the result \n    return dp[n-1][d] \n",
        "test": "assert min_Jumps([1,2,3,4,5,6,7,8,9,10], 9) == 2",
        "num_ids": 3216,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([1,2,3],[4,5,6]) == [0.25,0.4,0.5]",
        "num_ids": 2111,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = \"\"\n    letters = \"\"\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n        else:\n            letters += char\n    return letters + numbers",
        "test": "assert move_num(\"abc123\") == \"abc123\"",
        "num_ids": 2281,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def largest_subset(a):\n    # Initialize variables to keep track of the current and largest subsets found\n    current = []\n    largest = []\n    \n    # Loop through the list of numbers\n    for num in a:\n        # If the current subset is empty or the current number is divisible by the last number in the current subset, add it to the current subset\n        if not current or num % current[-1] == 0:\n            current.append(num)\n        # If the current number is not divisible by the last number in the current subset, start a new subset with the current number\n        else:\n            # If the current subset is larger than the previous largest subset, update the largest subset\n            if len(current) > len(largest):\n                largest = current\n            # Start a new subset with the current number\n            current = [num]\n    \n    # Add the final subset to the largest subset if it is larger than the current largest subset\n    if len(current) > len(largest):\n        largest = current\n    \n    # Return the size of the largest subset\n    return len(largest)",
        "test": "assert largest_subset([1, 2, 3, 4, 7]) == 2",
        "num_ids": 2768,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays\n    merged = arr1 + arr2\n    \n    # Find the median\n    median = 0\n    if n % 2 == 0:\n        # If the length of merged array is even, median is the average of middle two elements\n        median = (merged[n//2 - 1] + merged[n//2]) / 2\n    else:\n        # If the length of merged array is odd, median is the middle element\n        median = merged[n//2]\n    \n    return median",
        "test": "assert get_median([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5) == 5",
        "num_ids": 2953,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as inputs. \n    It computes the n-th power of each number in the list and returns the result as a new list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1,2,3,4,5],1) == [1,2,3,4,5]",
        "num_ids": 1952,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 36,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def is_upper(string):\n    '''\n    Converts a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"HELLO\") == \"HELLO\"",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1655,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle\n    area = math.pi * r * r / 2\n    return area",
        "test": "assert triangle_area(1) == 1.5707963267948966, \"The function is not working correctly\"",
        "num_ids": 2360,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 31,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function will find the smallest missing number from a sorted list of natural numbers.\n    :param array: A list of natural numbers sorted in ascending order.\n    :param start: The starting index of the array (default is 0).\n    :param end: The ending index of the array (default is the last index of the array).\n    :return: The smallest missing number.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    # Find the missing number\n    missing = 1\n    for i in range(start, end + 1):\n        if array[i] == missing:\n            missing += 1\n\n    return missing",
        "test": "assert find_First_Missing([0,2,3,4,5,6,7,9]) == 1",
        "num_ids": 3115,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 1406,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 30,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers from the list.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 1946,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    rows, cols = len(ele), len(ele[0])\n    adj_coord = []\n\n    # For each element in the given list, we can check for the adjacent elements\n    for i in range(rows):\n        for j in range(cols):\n            if ele[i][j] == 1:\n                # Check for the left element\n                if j > 0 and ele[i][j-1]!= 0:\n                    adj_coord.append((i, j-1))\n\n                # Check for the right element\n                if j < cols-1 and ele[i][j+1]!= 0:\n                    adj_coord.append((i, j+1))\n\n                # Check for the top element\n                if i > 0 and ele[i-1][j]!= 0:\n                    adj_coord.append((i-1, j))\n\n                # Check for the bottom element\n                if i < rows-1 and ele[i+1][j]!= 0:\n                    adj_coord.append((i+1, j))\n\n    # If a sublist is given, we can only return the coordinates that are in the sublist\n    if sub:\n        return [(i, j) for i, j in adj_coord if (i, j) in sub]\n\n    # Otherwise, we can return all the adjacent coordinates\n    return adj_coord",
        "test": "assert adjac((0,0), [(2,0), (1,1)]) == [(1,0), (0,1)]",
        "num_ids": 2972,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    if'' in text:\n        # Replace whitespaces with underscores\n        text = text.replace(' ', '_')\n        print(f\"Original string: '{text}'\")\n    else:\n        # Replace underscores with whitespaces\n        text = text.replace('_','')\n        print(f\"Original string: '{text}'\")\n    return text",
        "test": "assert replace_spaces('hello') == 'hello'",
        "num_ids": 1458,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    # Create two lists, one for non-zero elements and another for zeroes.\n    non_zeroes = []\n    zeroes = []\n    # Iterate over the input list and add non-zero elements to the non_zeroes list and zeroes to the zeroes list.\n    for num in num_list:\n        if num!= 0:\n            non_zeroes.append(num)\n        else:\n            zeroes.append(num)\n    # Concatenate the non-zeroes and zeroes lists and return the result.\n    return non_zeroes + zeroes",
        "test": "assert move_zero([]) == []",
        "num_ids": 2754,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum = sum + arr[i] ^ arr[j]\n    return sum",
        "test": "assert pair_xor_Sum([2,2,2,2,2],5) == 0 # (2^2)+(2^2)+(2^2)+(2^2)+(2^2) = 0",
        "num_ids": 2258,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts a list using heap sort algorithm.\n    '''\n    # Convert the list to a max heap\n    heap = iterable[::]\n    hq.heapify(heap)\n\n    # Extract elements from the heap one by one and append to the result list\n    result = []\n    for i in range(len(heap)-1, -1, -1):\n        result.append(hq.heappop(heap))\n\n    return result",
        "test": "assert heap_sort([3, 2, 1, 5, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 2119,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 31,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(100,100) == True",
        "num_ids": 1622,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert the velocity from km/h to m/s\n    v_ms = v / 3.6\n    \n    # Calculate the wind chill index\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t * math.pow(v_ms, 0.16)\n    \n    # Round the wind chill index to the next integer\n    wci_rounded = round(wci)\n    \n    return wci_rounded",
        "test": "assert wind_chill(5, 10) == 12",
        "num_ids": 2881,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            length_sum += len(name)\n    return length_sum",
        "test": "assert sample_nam([]) == 0",
        "num_ids": 2034,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # use regular expression to find all occurrences of parenthesis and what's inside them\n    pattern = r'\\([^()]*\\)'\n    matches = re.findall(pattern, items)\n    # replace each match with an empty string\n    for match in matches:\n        items = items.replace(match, '')\n    return items",
        "test": "assert remove_parenthesis(\"This is a test string.\") == \"This is a test string.\"",
        "num_ids": 1679,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth nonagonal number.\n    \"\"\"\n    return n * (3*n - 1) // 2",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 1235,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[^z]*z[^z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle(\"hello world\") == False",
        "num_ids": 1660,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # Base case\n    if k == 0 or k >= len(input): \n        return input \n    # Recursive case\n    else: \n        # Swap the first element with the kth element\n        input[0], input[k] = input[k], input[0] \n        # Recursively call the function for the remaining array\n        return [input[i] for i in range(k, -1, -1)] + input[k+1:]",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 1) == [1, 2, 3, 4, 5]",
        "num_ids": 2607,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple(('apple', 'banana', 'cherry'), {'orange': 10,'mango': 20}) == ('apple', 'banana', 'cherry', {'orange': 10,'mango': 20})",
        "num_ids": 2607,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and \n    ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is \n    computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # Calculate the maximum path sum for a single cell\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average path sum over all possible paths\n    max_avg = -float('inf')\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            else:\n                curr_avg = dp[i][j]/(i+j)\n                if curr_avg > max_avg:\n                    max_avg = curr_avg\n\n    return max_avg",
        "test": "assert maxAverageOfPath([[1],[2],[3]]) == 1",
        "num_ids": 5799,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, details in students.items():\n        if details[0] >= h and details[1] >= w:\n            filtered_students[student] = details\n    return filtered_students",
        "test": "assert filter_data({'John':(1.8,60), 'Alice':(1.7,50), 'David':(1.6,40)}, 1.7, 55) == {'John':(1.8,60)}",
        "num_ids": 4090,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 1, 1, 1], [2, 2, 2, 2]) == 0",
        "num_ids": 2217,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base):\n        result += int(digit)**power\n    return result",
        "test": "assert power_base_sum(2, 1) == 2",
        "num_ids": 1890,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "test": "assert extract_quotation(\"He said, \\\"Let's go to the park!\\\"\") == ['Let\\'s go to the park!']",
        "num_ids": 1848,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result_tup",
        "test": "assert multiply_elements((1,)) == (), \"Test case 3 failed\"",
        "num_ids": 2201,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]",
        "test": "assert sum_list([], []) == []",
        "num_ids": 2023,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        group_list = list(group)\n        if len(group_list) > 1:\n            result.append(group_list[0])\n        else:\n            result.append(group_list[0])\n    return result",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 2348,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * r * h\n    A = math.pi * r**2\n    L = 2 * A\n    return L",
        "test": "assert lateralsurface_cone(1,2)==math.pi*1*2, \"Test failed. Expected value is pi*1*2\"",
        "num_ids": 1893,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]+'\n    return re.sub(pattern, ':', text)\n",
        "test": "assert replace_specialchar('hello,world') == 'hello:world'",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1",
        "test": "assert find_first_occurrence([1, 2, 2, 2, 3, 4, 5], 2) == 1",
        "num_ids": 2517,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes an input list and returns the sum of products of all possible sublists of the input list.\n    \"\"\"\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        res += i * arr[i]\n    for i in range(1, n):\n        temp = 0\n        for j in range(i):\n            temp *= arr[j]\n        res += temp\n    return res",
        "test": "assert sum_Of_Subarray_Prod([0, 0, 0]) == 0 # Example 2",
        "num_ids": 3753,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def set_middle_bits(n):\n    '''\n    This function will toggle all the bits except the first and last bits of a given number.\n    '''\n    # Convert the given number to binary and split it into a list of bits\n    bits = list(bin(n)[2:])\n\n    # Reverse the list of bits and toggle all the bits except the first and last bits\n    for i in range(1, len(bits)-1):\n        bits[i] = '1' if bits[i] == '0' else '0'\n\n    # Convert the list of bits back to an integer\n    result = int(''.join(bits), 2)\n\n    return result",
        "test": "assert set_middle_bits(0) == 0",
        "num_ids": 1849,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i",
        "test": "assert left_insertion([1,2,3,4,5], 0) == 0",
        "num_ids": 1706,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 29,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('Eagle') == True",
        "num_ids": 1283,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1)*geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 1254,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef find_Index(n):\n    count = 0\n    while True:\n        triangular_num = int(math.pow(10, n) * (count + 1) / (count + 2))\n        count += 1\n        if len(str(triangular_num)) == n:\n            return count",
        "test": "assert find_Index(1) == 1",
        "num_ids": 1630,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)-1):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "test": "assert tuple_to_dict(('hello', 'world')) == {'hello': 'world'}",
        "num_ids": 2681,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string s as input and checks whether all the characters are the same or not.\n    If all the characters are the same, it returns True, otherwise it returns False.\n    '''\n    if len(s) == 0:\n        return True\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    return True",
        "test": "assert all_Characters_Same('a') == True",
        "num_ids": 1186,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron with the given side length.\n    '''\n    area = (3 ** 0.5) / (4 * math.tan(math.pi / 6)) * side ** 2\n    return area",
        "test": "assert area_tetrahedron(4) == 12",
        "num_ids": 1784,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rotate_right(lst, k):\n    \"\"\"\n    Rotate a list to the right by a specified number of items.\n    \"\"\"\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 2146,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3)) == False",
        "num_ids": 1115,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum+1)))",
        "test": "assert divisible_by_digits(123, 456) == []",
        "num_ids": 8571,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360*math.pi",
        "test": "assert sector_area(2, 720) == None, 'Area for sector with angle larger than 360 degrees should be None'",
        "num_ids": 1879,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 32,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # To find the longest common subsequence between two strings, we can use dynamic programming. \n    # We create a 2D array with dimensions (m+1) x (n+1), where m and n are the lengths of the two strings. \n    # The element at arr[i][j] will store the length of the longest common subsequence of the substrings from X[0:i-1] and Y[0:j-1].\n    # We fill the array using the following recurrence relation:\n    # arr[i][j] = max(arr[i-1][j], arr[i][j-1], arr[i-1][j-1] + 1), if X[i-1] == Y[j-1]\n    # arr[i][j] = max(arr[i-1][j], arr[i][j-1]), otherwise\n    arr = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Fill the array using the above recurrence relation\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                arr[i][j] = arr[i-1][j-1] + 1\n            else:\n                arr[i][j] = max(arr[i-1][j], arr[i][j-1])\n\n    # We can now use the array to backtrack and find the longest common subsequence between the three strings\n    lcs = \"\"\n    i, j = len(X), len(Y)\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif arr[i-1][j] > arr[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs",
        "test": "assert lcs_of_three(\"abcd\", \"efgh\", \"ijkl\") == \"\" # Test Case 2",
        "num_ids": 5343,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 37,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # regex pattern to match capital letters followed by lowercase letters\n    pattern = re.compile(r'(?<=[A-Z])(?=[a-z])')\n    # split the string into words using regex pattern\n    words = re.split(pattern, str1)\n    # join the words with spaces between them\n    result =''.join(words)\n    return result",
        "test": "assert capital_words_spaces('the quick brown fox') == 'the quick brown fox'",
        "num_ids": 2109,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a list of strings of numbers numerically.\n    \"\"\"\n    return sorted(nums_str, key=lambda x: float(x))",
        "test": "assert sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 2535,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 34,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list += test_tup\n    return test_list",
        "test": "assert add_tuple([1,2,3], (4,5)) == [1,2,3,4,5]",
        "num_ids": 1646,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_min_heap_helper(arr, i):\n    # base case\n    if i >= len(arr):\n        return True\n    \n    # left child exists and is less than parent\n    if 2*i+1 < len(arr) and arr[2*i+1] < arr[i]:\n        return False\n    \n    # right child exists and is less than parent\n    if 2*i+2 < len(arr) and arr[2*i+2] < arr[i]:\n        return False\n    \n    # recursively check left and right subtree\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    # check if the given array represents a min heap or not\n    return check_min_heap_helper(arr, 0)",
        "test": "assert check_min_heap_helper([4, 2, 6, 1, 3, 5], 1) == False",
        "num_ids": 3223,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1477,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the list based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    # return the first k elements of the sorted list\n    return test_list[:K]",
        "test": "assert min_k([(1, 'apple'), (2, 'banana'), (3, 'cherry'), (4, 'date'), (5, 'elderberry')], 0) == []",
        "num_ids": 2851,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list(['apple', 'banana', 'cherry'], ['orange', 'banana', 'kiwi'], ['apple', 'banana', 'grape']) == ['banana']",
        "num_ids": 2720,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1677,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one('abbb') == True",
        "num_ids": 1322,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    This function takes a list of strings as input and returns the count of pairs of strings that are reverse of each other.\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs(['a', 'b', 'c']) == 0",
        "num_ids": 2500,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            sub_list = tuple(list1[i:j+1])\n            if sub_list in dict:\n                dict[sub_list] += 1\n            else:\n                dict[sub_list] = 1\n    return dict",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 3796,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Check if a given string is a decimal number with a precision of 2.\n\n    Parameters:\n        num (str): The string to be checked.\n\n    Returns:\n        bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return round(float_num, 2) == float_num\n    except ValueError:\n        return False",
        "test": "assert is_decimal('1.23') == True",
        "num_ids": 1396,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1",
        "test": "assert unique_Element([1,2,3,4,5]) == False",
        "num_ids": 1283,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False",
        "test": "assert check_monthnumber_number(2) == True # February has 28 days in a leap year and 29 days in a non-leap year",
        "num_ids": 1760,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    :param arr: list of integers\n    :param n: length of the list\n    :return: minimum difference between any two elements in the array\n    \"\"\"\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize the minimum difference to be infinity\n    min_diff = float('inf')\n\n    # iterate through the array\n    for i in range(n-1):\n        # calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n\n        # if the difference is smaller than the current minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff",
        "test": "assert find_min_diff([1,2,3,4,5],5) == 1",
        "num_ids": 2974,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr('12345') == 5",
        "num_ids": 1137,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n == 1:\n        return 1\n    \n    prev_polite = 1\n    curr_polite = 2\n    \n    for i in range(2, n+1):\n        while True:\n            next_polite = prev_polite + curr_polite\n            if is_polite_number(next_polite):\n                prev_polite = curr_polite\n                curr_polite = next_polite\n                break\n            else:\n                prev_polite = curr_polite\n                curr_polite = next_polite\n    \n    return curr_polite\n\ndef is_polite_number(num):\n    \"\"\"\n    Helper function to check whether a number is polite or not\n    \"\"\"\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert is_polite(2) == 3",
        "num_ids": 2220,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 1601,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum.\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 5) == 2",
        "num_ids": 2159,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns a new list containing the elements that are only in li1.\n\n    Parameters:\n        li1 (list): The first list.\n        li2 (list): The second list.\n\n    Returns:\n        list: The difference between li1 and li2.\n    \"\"\"\n    return [elem for elem in li1 if elem not in li2]",
        "test": "assert Diff([1,2,3], [1,2,3]) == [], \"Test case 1 failed\"",
        "num_ids": 1811,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "test": "assert odd_num_sum(1) == 1",
        "num_ids": 1808,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "test": "assert check_expression(\"((()))\") == True",
        "num_ids": 2109,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    return \" \".join(word for word in words if len(word)!= K)\n",
        "test": "assert remove_length(\"apple banana cherry date elderberry\", 7) == \"apple banana cherry date elderberry\"",
        "num_ids": 1679,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not isinstance(text, str) or not isinstance(pattern, str):\n        return None\n\n    occurrences = []\n    for match in re.finditer(pattern, text):\n        start = match.start()\n        end = match.end()\n        occurrences.append((start, end))\n\n    if len(occurrences) > 0:\n        return occurrences\n    else:\n        return None",
        "test": "assert occurance_substring(\"hello world\",\"z\") == None",
        "num_ids": 2084,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 3, 5, 7, 9]) == True",
        "num_ids": 1537,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i].lower() in vowels and test_str[i-1].lower() in vowels:\n            count += 1\n        elif i < len(test_str)-1 and test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels('hello') == 0",
        "num_ids": 1825,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as an argument and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    # iterate through the list and update the frequency of each element in the dictionary\n    for i in arr:\n        freq[i] = freq.get(i, 0) + 1\n    # create an empty list to store the unique elements\n    unique_elements = []\n    # iterate through the dictionary and append each unique element to the list\n    for key in freq:\n        if freq[key] == 1:\n            unique_elements.append(key)\n    # calculate the sum of the unique elements and return it\n    return sum(unique_elements)",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 2331,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Takes a list as input and returns a list where consecutive duplicates of the list elements are packed into sublists.\n    '''\n    # Group the list elements by consecutive duplicates\n    groups = groupby(lst)\n\n    # Create a list of sublists where each sublist contains consecutive duplicates\n    packed_lst = [list(group[1]) for group in groups]\n\n    return packed_lst",
        "test": "assert pack_consecutive_duplicates([1,1,1,1,1]) == [[1,1,1,1,1]]",
        "num_ids": 2966,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def unique_sublists(list1):\n    counts = {}\n    for sublist in list1:\n        tup = tuple(sublist)\n        if tup in counts:\n            counts[tup] += 1\n        else:\n            counts[tup] = 1\n    return counts",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2929,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list of tuples\n    containing all possible combinations of sums with tuples in the given tuple list.\n\n    :param test_list: a list of tuples\n    :return: a list of tuples containing all possible combinations of sums with tuples\n             in the given tuple list.\n    \"\"\"\n    result = []\n    for i in range(2, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            total_sum = sum(sum(item) for item in combo)\n            if total_sum == i:\n                result.append(combo)\n    return result",
        "test": "assert find_combinations([(1,),(2,),(3,),(4,)]) == []",
        "num_ids": 7734,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count",
        "test": "assert count_divisors(10) == 4, \"There are 4 divisors of 10\"",
        "num_ids": 2188,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    sum_arr = [0] * (n+1)\n    sum_arr[0] = 0\n    sum_arr[1] = arr[0]\n    for i in range(2, n+1):\n        if i%2!= 0:\n            sum_arr[i] = sum_arr[i-1] + arr[i-1]\n        else:\n            sum_arr[i] = sum_arr[i-2]\n    return sum_arr[n]",
        "test": "assert odd_length_sum([2, 4, 6, 8]) == 0",
        "num_ids": 2360,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0)",
        "num_ids": 3776,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n\n    for num in lst:\n        if num % 2 == 1:\n            odd_num = num\n            break\n\n    return even_num * odd_num",
        "test": "assert mul_even_odd([0,1,2,3,4,5,6,7,8,9]) == 0 # there is no even numbers",
        "num_ids": 2559,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function converts a tuple string to a tuple of integers.\n    \"\"\"\n    return tuple(map(int, test_str[1:-1].split(',')))",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 1714,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "test": "assert right_insertion([1,3,5,7], 0) == 0",
        "num_ids": 1476,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    return re.search(pattern, text) is not None",
        "test": "assert text_match_three(\"ababa\") == False",
        "num_ids": 1155,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    This function creates a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple",
        "test": "assert new_tuple([1,2,3], \"test\") == (1,2,3,\"test\")",
        "num_ids": 1442,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert even_position([2,4,6,8,10]) == True",
        "num_ids": 1459,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if not isinstance(i, tuple):\n            result.append(i)\n        else:\n            result += remove_nested(i)\n    return tuple(result)",
        "test": "assert remove_nested((1, 2, 3)) == (1, 2, 3)",
        "num_ids": 2762,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([[]]) == 1",
        "num_ids": 1206,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last(arr, x):\n    '''\n    Returns the last position of x in arr. If x is not found, returns -1.\n    '''\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result",
        "test": "assert last([1,2,3,3,3,4,5],1) == 0",
        "num_ids": 2454,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_starta_endb('aa') is None",
        "num_ids": 1356,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())",
        "test": "assert return_sum({'a':1, 'b':2, 'c':3}) == 6",
        "num_ids": 1619,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def sum_odd(n):\n    '''\n    This function takes an integer 'n' as input and returns the sum of all odd natural numbers within the range 1 to n.\n    '''\n    # Initialize the sum of odd numbers to 0\n    sum_odd_num = 0\n    \n    # Loop through the range 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is odd\n        if i % 2!= 0:\n            # Add the odd number to the sum\n            sum_odd_num += i\n    \n    # Return the sum of odd numbers\n    return sum_odd_num",
        "test": "assert sum_odd(3) == 4",
        "num_ids": 1678,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)",
        "test": "assert _sum([1, 2, 3]) == 6",
        "num_ids": 1227,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function takes two arguments - n and d - and rotates the bits of the number n by d bits to the left.\n    We assume that the number is 32 bit.\n    \"\"\"\n    # Convert n to binary string and remove the prefix '0b'\n    binary_n = bin(n)[2:]\n\n    # Pad the binary string with leading zeros to make it 32 bits long\n    binary_n = binary_n.zfill(32)\n\n    # Split the binary string into two parts - the first d bits and the rest of the bits\n    first_d_bits = binary_n[:d]\n    rest_of_bits = binary_n[d:]\n\n    # Concatenate the rest of the bits with the rotated first d bits\n    rotated_bits = rest_of_bits + first_d_bits\n\n    # Convert the rotated bits back to an integer\n    rotated_n = int(rotated_bits, 2)\n\n    return rotated_n",
        "test": "assert left_rotate(0, 5) == 0",
        "num_ids": 2554,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as an argument and removes all whitespaces from it.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces('hello world') == 'helloworld'",
        "num_ids": 1289,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    if x == y and y == z:\n        count += 3\n    elif x == y or y == z or z == x:\n        count += 2\n    elif x == z:\n        count += 1\n        \n    return count",
        "test": "assert test_three_equal(1,2,3)!=2",
        "num_ids": 1421,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    low, high = 0, n-1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return low",
        "test": "assert count_rotation([1, 2, 3, 4, 5, 6, 7]) == 0",
        "num_ids": 2329,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    root = int(math.sqrt(n))\n    return root * root == n",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 1341,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([1, 2, 3, 4, 5]) == True",
        "num_ids": 1526,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_lists = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_lists = [lst]\n        elif lst_sum == max_sum:\n            max_lists.append(lst)\n    return max_lists",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [[10, 11, 12]]",
        "num_ids": 3465,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    max_count = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 0\n        i += 1\n    if count > max_count:\n        max_count = count\n    return max_count",
        "test": "assert max_run_uppercase(\"H e l l o W o r l d\") == max_run_uppercase(\"Hello World\")",
        "num_ids": 1840,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1455,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 35,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple and a value K and returns True if the tuple contains K, and False otherwise.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K([(1,2,3), (4,5,6), (7,8,9)], 5) == False",
        "num_ids": 1370,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 2, 3), (2, 2, 3)) == False",
        "num_ids": 1900,
        "indeed": false
    }
]