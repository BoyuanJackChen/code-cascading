[
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of common elements.\n    \"\"\"\n    # create a set from the first tuple and check if each element is in the second tuple\n    result = [elem for elem in test_tup1 if elem in set(test_tup2)]\n    return result",
        "test": "assert similar_elements((1,2,3), (2,3,4)) == [2,3]",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False",
        "test": "assert is_not_prime(2) == False # True",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "test": "assert heap_queue_largest([1,2,3,4,5],5) == [5,4,3,2,1]",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x % 2 == 0:\n        x = x // 2\n    if x == 1:\n        return True\n    return False",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "test": "assert find_char_long(\"Python is an awesome programming language\") == [\"awesome\"]",
        "num_ids": 326,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    while(count < n):\n        if str[count:] + str[:count] == str:\n            break\n        else:\n            count += 1\n    return count",
        "test": "assert find_Rotations('abcde') == 0",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_Occ(s,ch): \n    '''\n    This function takes a string s and a character ch as input and removes the first and last occurrence of ch from s.\n    '''\n    if s.count(ch) >= 2:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', -1)\n    elif s.count(ch) == 1:\n        if s.find(ch) == 0:\n            s = s[1:]\n        else:\n            s = s[:-1]\n    else:\n        print(\"The character does not exist in the string.\")\n    return s",
        "test": "assert remove_Occ(\"hello\",\"l\")==\"heo\"",
        "num_ids": 465,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(i+1, rows):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M",
        "test": "assert sort_matrix([[5,1],[3,2]]) == [[3, 2], [5, 1]]",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    l (float): Length of the base.\n    b (float): Width of the base.\n    h (float): Height of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    return 0.5 * l * b * h",
        "test": "assert find_Volume(5,6,7) == 105",
        "num_ids": 286,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    This function returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore('abc_def') == True",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(2) == 8",
        "num_ids": 190,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def str_to_list(string, string2):\n    '''\n    This function takes two strings as input, the first string is the original string and the second string is the string\n    which contains the characters that need to be removed from the first string.\n    '''\n    # create a boolean array of size NO_OF_CHARS, all initialized to True\n    present = [True] * NO_OF_CHARS\n    \n    # mark all characters in string2 as False in present\n    for i in string2:\n        present[ord(i)] = False\n    \n    # create an empty list to store the result\n    result = []\n    \n    # iterate over the characters in the string and add the characters that are not present in the present array\n    for i in string:\n        if present[ord(i)]:\n            result.append(i)\n    \n    # return the result list\n    return result",
        "test": "assert str_to_list('hello', 'he') == 'llo'",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # using set to remove duplicates and then checking if length of set is less than length of array\n    return len(arraynums)!= len(set(arraynums))",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(1) == False  # first test case",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rev(num):\n    '''\n    This function takes a number as input and returns True if the given number is one less than twice its reverse.\n    '''\n    if str(num) == str(num)[::-1]:\n        return True\n    else:\n        return False",
        "test": "assert rev(124) == False",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num",
        "test": "assert find_Max_Num([1, 2, 3]) == 3",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(10, -5) == True",
        "num_ids": 255,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    octagonal_numbers = [i*(3*i-1)//2 for i in range(1, n+1)]\n    return octagonal_numbers[n-1]",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    counts = defaultdict(int)\n    count = 0\n\n    # Count the frequency of each digit\n    for digit in s:\n        counts[digit] += 1\n\n    # Check if the length of the substring has a digit frequency of 1\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count += 1\n\n    return count",
        "test": "assert count_Substrings('1234') == 1",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 288,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff",
        "test": "assert max_difference([(1,2),(3,4),(5,6),(7,8)]) == 6",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "test": "assert subject_marks([(50, 'Maths'), (60, 'Science'), (70, 'English'), (80, 'History')]) == [('English', 80), ('History', 80), ('Maths', 50), ('Science', 60)]",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "test": "assert recursive_list_sum([1]) == 1",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10",
        "num_ids": 324,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_number(n):\n    bell = [0] * (n + 1)  # initialize the bell numbers array\n    bell[0] = 1  # base case\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n\n    return bell[n]\n\nprint(bell_number(5))  # 55",
        "test": "assert bell_number(1) == 1",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    # check if the array is sorted in ascending order or descending order\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    This function checks whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)",
        "test": "assert is_sublist([1, 2, 3], [2, 3]) == True",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length and False otherwise.\n    '''\n    length_set = set(len(tup) for tup in Input)\n    if len(length_set) == 1:\n        return True\n    else:\n        return False",
        "test": "assert find_equal_tuple((('apple', 'banana'), ('cherry', 'date'))) == True",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "test": "assert comb_sort([3, 2, 1]) == [1, 2, 3]",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dif_Square(n): \n    '''\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i*i <= n: \n        if n % i == 0 and n // i!= i: \n            return True\n        i += 1\n    return False",
        "test": "assert dif_Square(1) == False",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True",
        "test": "assert is_samepatterns(['red', 'green', 'blue','red', 'green'], ['red', 'green', 'blue','red', 'green']) == True",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result",
        "test": "assert find_tuples([(1,2,3), (4,5,6), (7,8,9)], 2) == [(4,5,6), (7,8,9)]",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as an input and returns True if the number is divisible by 11. Otherwise, it returns False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(44) == True",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"Length of the word is even.\"\n    else:\n        return \"Length of the word is odd.\"",
        "test": "assert word_len(\"world\") == False",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n * (n + 1) * (n + 2) / 6)",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Returns the volume of a sphere with radius r.\n    '''\n    return (4/3) * math.pi * r**3",
        "test": "assert volume_sphere(1) == 4/3 * math.pi, \"volume_sphere(1) should be 4/3 * pi\"",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):\n    # Initializing the result variable\n    result = 0\n    \n    # Loop through the string and add the ASCII values of each character\n    for char in strr:\n        result += ord(char)\n        \n    # Take the result modulo 26 to get the final character\n    return chr((result % 26) + 65)",
        "test": "assert get_Char(\"world\") == 'f' # w + o + r + l + d = 119 + 111 + 114 + 108 + 100 = 544 % 26 = 15, so the character made by adding the ASCII values is 'f'",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def newman_conway(n):\n    if n == 0:\n        return \"Error: n must be a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]\n\nn = int(input(\"Enter a positive integer: \"))\nprint(f\"The {n}th number in the Newman Conway sequence is {newman_conway(n)}\")",
        "test": "assert sequence(1) == 1",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4 * math.pi",
        "num_ids": 255,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Finds the nth centered hexagonal number.\n    \"\"\"\n    count = 1\n    hex_num = 1\n    \n    while count < n:\n        hex_num += 6 * count\n        count += 1\n        \n    return hex_num",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({'a':1, 'b':2}, {'b':3, 'c':4}, {'d':5, 'c':6}) == {'a':1, 'b':3, 'c':6, 'd':5}",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict",
        "test": "assert freq_count([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == {1: 1, 2: 2, 3: 3, 4: 4}",
        "num_ids": 558,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    i = N - 1\n    while i > 0:\n        if i < N:\n            return i\n        i -= 1\n    return None",
        "test": "assert closest_num(2) == 1",
        "num_ids": 250,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of strings and returns the length of the longest word in the list.\n    '''\n    max_len = 0\n    \n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            \n    return max_len",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6",
        "num_ids": 326,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False",
        "test": "assert find_substring(['apple', 'banana', 'orange', 'pear'], 'appl') == True",
        "num_ids": 284,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether the given number is undulating or not.\n\n    Args:\n    n: int, the number to check\n\n    Returns:\n    bool, True if the number is undulating, False otherwise\n    \"\"\"\n\n    # Convert the number to a string to check if it has repeated digits\n    s = str(n)\n    if s.find(s[0]) == len(s) - 1:\n        # If all digits are the same, it's not undulating\n        return False\n\n    # Check if the digits repeat in a cycle of length 2\n    for i in range(len(s)):\n        if s[i] == s[(i+2) % len(s)]:\n            return True\n\n    return False",
        "test": "assert is_undulating(1) == False",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,3) == 8",
        "num_ids": 250,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]\n",
        "test": "assert index_minimum([(1,2),(3,4),(5,6),(7,8)]) == 1",
        "num_ids": 361,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5], [6]]) == 1",
        "num_ids": 453,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(1) == 1",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def flatten(lst):\n    \"\"\"\n    This function flattens a list of lists.\n    \"\"\"\n    flat_list = []\n    for sublist in lst:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n\ndef frequency_lists(lst):\n    \"\"\"\n    This function finds the frequency of each element in a flattened list of lists.\n    \"\"\"\n    freq_dict = {}\n    flat_list = flatten(lst)\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "test": "assert frequency_lists([1,2,3,[4,5],6,1,2,3,4,5]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 1}",
        "num_ids": 755,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "test": "assert multiply_num([2, 3, 4]) == 24/3  # assert function checks if the output of the function is equal to the expected output",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if num == 1:\n        return 2\n    \n    # Get the reverse of the number\n    reverse_num = 0\n    while num > 0:\n        reverse_num = (reverse_num * 10) + num % 10\n        num //= 10\n        \n    # Check if the number is a palindrome\n    if reverse_num == reverse_num // 10:\n        return reverse_num + 1\n    \n    # If the number is not a palindrome, find the next smallest palindrome by adding 1 to the largest odd digit\n    reverse_num += 1\n    while True:\n        is_palindrome = True\n        for i in range(len(str(reverse_num)) // 2):\n            if str(reverse_num)[i]!= str(reverse_num)[-i-1]:\n                is_palindrome = False\n                break\n        if is_palindrome:\n            return reverse_num\n        \n        reverse_num += 2\n        \nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print('Usage: python next_smallest_palindrome.py <integer>')\n    else:\n        try:\n            num = int(sys.argv[1])\n            if num < 1:\n                print('Error: Input must be a positive integer')\n            else:\n                next_palindrome = next_smallest_palindrome(num)\n                print(f'The next smallest palindrome of {num} is {next_palindrome}')\n        except ValueError:\n            print('Error: Input must be a positive integer')",
        "test": "assert next_smallest_palindrome(131) == 141, \"next smallest palindrome of 131 should be 141\"",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Invalid input\"\n    else:\n        arr.sort()\n        return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function takes a snake_case string and returns a CamelCase string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0 or m < 0:\n        return \"Invalid input\"\n    else:\n        a = n ** 2 * m + n ** 2 * m ** 2\n        return a",
        "test": "assert eulerian_num(2, 3) == 8",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['dog', 'cat', 'fish']]) == [['apple', 'banana', 'cherry'], ['cat', 'dog', 'fish']]",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "test": "assert count([True, False, False, True, True, True]) == 4",
        "num_ids": 258,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "test": "assert add_lists([4, 5, 6], (1, 2, 3)) == [4, 5, 6, 1, 2, 3]",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n\n    heap = []\n\n    # Push all the elements of the first list into the heap\n    for i in num1:\n        heapq.heappush(heap, i)\n\n    # Push all the elements of the second list into the heap\n    for i in num2:\n        heapq.heappush(heap, i)\n\n    # Push all the elements of the third list into the heap\n    for i in num3:\n        heapq.heappush(heap, i)\n\n    # Pop the elements from the heap one by one and append to the result list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result",
        "test": "assert merge_sorted_list([1,3,5],[2,4,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9] # test case 1",
        "num_ids": 1092,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    # Iterate through the string\n    for i in range(n):\n        # Convert the string to a list of integers\n        num_list = list(map(int, s))\n        # Rotate the list by n positions\n        num_list = num_list[n:] + num_list[:n]\n        # Iterate through the rotated list and count the number of odd values\n        for j in num_list:\n            if j % 2!= 0:\n                count += 1\n    return count",
        "test": "assert odd_Equivalent('1011',3) == 4 # rotate 1011 three times and get 1110, 0111, 1101 and 0011, so there are 4 numbers with odd values",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_elements = [x for x in nestedlist[i] if x in nestedlist[j]]\n            if common_elements:\n                common.extend(common_elements)\n    return common",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer('123') == True",
        "num_ids": 165,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Check if all dictionaries in a list are empty.\n\n    Args:\n        list1 (list): A list of dictionaries.\n\n    Returns:\n        bool: True if all dictionaries are empty, False otherwise.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 221,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            list_to_float(test_list[i])\n        else:\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                pass\n    return test_list",
        "test": "assert list_to_float([[1, 2, 3], [\"4\", \"5\", \"6\"], [\"7.8\", \"9.10\", \"11.12\"], [13, 14]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.8, 9.1, 11.12], [13.0, 14.0]]",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string):\n    \"\"\"\n    This function takes a string as input and returns a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 254,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def search(arr):\n    # Initialize two pointers: left and right\n    left = 0\n    right = len(arr) - 1\n    \n    # Loop until the pointers meet\n    while left < right:\n        # If the left pointer points to an even number, move it to the right\n        if arr[left] % 2 == 0:\n            left += 1\n        # If the right pointer points to an odd number, move it to the left\n        elif arr[right] % 2 == 1:\n            right -= 1\n        # If both pointers point to odd numbers, the element must be in the middle\n        else:\n            return arr[right]\n    \n    # If the loop terminates without finding the element, it doesn't exist\n    return None",
        "test": "assert search([1, 2, 3, 4, 4]) == 4 # returns 4 as 4 only appears once in the array",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[i][1]) > abs(list1[j][0]*list1[j][1]):\n                max_product = list1[i][0]*list1[i][1]\n            else:\n                max_product = list1[j][0]*list1[j][1]\n    \n    return max_product",
        "test": "assert max_product_tuple([(1,2), (3,4), (5,6)]) == 30",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    # loop through all numbers from 1 to limit\n    for i in range(1, limit+1):\n        \n        # check if i is amicable\n        div_sum = sum(div for div in range(1, i) if i % div == 0)\n        if div_sum > i and i!= div_sum and i == sum(div for div in range(1, div_sum) if div_sum % div == 0):\n            amicable_sum += i\n    \n    return amicable_sum",
        "test": "assert amicable_numbers_sum(100) == 5050",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # Calculate the absolute value of the complex number\n    abs_a = abs(a)\n    abs_b = abs(b)\n\n    # Calculate the argument of the complex number\n    arg_a = cmath.phase(a)\n    arg_b = cmath.phase(b)\n\n    # Calculate the angle in radians\n    angle = abs(arg_a - arg_b)\n\n    # Convert the angle in radians to degrees\n    angle_degrees = angle * 180 / cmath.pi\n\n    return angle_degrees",
        "test": "assert angle_complex(1,0) == 0",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            count_0s = sub_string.count('0')\n            count_1s = sub_string.count('1')\n            diff = abs(count_0s - count_1s)\n            if diff > max_length:\n                max_length = diff\n    return max_length",
        "test": "assert find_length(\"10110\") == 2",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum(a,b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of common divisors of the two numbers.\n    \"\"\"\n    divisor_sum = 0\n    # Find all common divisors of a and b\n    for i in range(1,min(a,b)+1):\n        if(a%i == 0) and (b%i == 0):\n            divisor_sum += i\n    return divisor_sum",
        "test": "assert sum(5,15) == 10",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 168,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "test": "assert long_words(8, \"The quick brown fox jumps over the lazy dog\") == [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"lazy\"]",
        "num_ids": 383,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    \n    # Check if the sum of each row and column is the same\n    if row_sums!= col_sums:\n        return False\n    \n    # Calculate the sum of the diagonals\n    diag_sum_1 = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    diag_sum_2 = sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])\n    \n    # Check if the sum of the diagonals is the same\n    if diag_sum_1!= diag_sum_2:\n        return False\n    \n    # If all three conditions are satisfied, then the matrix is a magic square\n    return True",
        "test": "assert magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) == True",
        "num_ids": 1033,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item",
        "test": "assert max_occurrences([1, 1, 1, 1]) == 1",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_indices = []\n    str1_list = list(str1)\n    \n    # Find the indices of the vowels in the string\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_indices.append(i)\n    \n    # Reverse the vowels in the string\n    for i in range(len(vowels_indices)//2):\n        j = len(vowels_indices) - 1 - i\n        str1_list[vowels_indices[i]], str1_list[vowels_indices[j]] = str1_list[vowels_indices[j]], str1_list[vowels_indices[i]]\n        \n    # Join the reversed vowels with the other characters of the string\n    result = ''\n    for i in range(len(str1)):\n        if i not in vowels_indices:\n            result += str1_list[i]\n            \n    return result",
        "test": "assert reverse_vowels('hello world') == 'hll wrld'",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as input and returns a string.\n    \"\"\"\n    # Convert the tuple to a string and return it.\n    return str(tup1)",
        "test": "assert tup_string((1,2,3)) == '(1, 2, 3)'",
        "num_ids": 238,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "test": "assert sum_negativenum([]) == 0",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n * (2 * n - 1)\n    return num\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 210,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the ratio of zeroes to non-zeroes in the array.\n    \"\"\"\n    # Initialize variables to keep track of the count of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    \n    # Iterate through the array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    # Calculate and return the ratio of zeroes to non-zeroes\n    return zero_count / non_zero_count",
        "test": "assert zero_count(array('i', [1, 2, 3, 4, 5])) == 0",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_set = set()\n    for i in range(32):\n        power_set.add(2**i)\n    if n in power_set:\n        return True\n    else:\n        return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(16) == True ",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "test": "assert circle_circumference(4) == 50.26548245743669",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flattened_list.extend(extract_singly(sublist))\n        else:\n            flattened_list.append(sublist)\n    return flattened_list",
        "test": "assert extract_singly([[1],[2,3,[4,5]],6]) == {1,2,3,4,5,6}",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Pancake Sort algorithm.\n    \"\"\"\n    def flip(nums, k):\n        \"\"\"\n        Flip the first k elements of the list.\n        \"\"\"\n        for i in range(k // 2):\n            nums[i], nums[k - i - 1] = nums[k - i - 1], nums[i]\n    \n    # Start sorting the list from the largest to smallest.\n    for size in range(len(nums), 1, -1):\n        # Find the index of the maximum element in the unsorted part of the list.\n        max_index = nums.index(max(nums[:size]))\n        \n        # If the maximum element is not at the beginning of the list, flip it to the beginning.\n        if max_index!= 0:\n            flip(nums, max_index + 1)\n        \n        # Flip the entire list to sort it in descending order.\n        flip(nums, size)\n    \n    return nums",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Count number of items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[1,2,3],[2,2,3]) == 2",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    \n    for item in Input:\n        if type(item) == list:\n            count += 1\n    \n    return count",
        "test": "assert find_lists(()) == 0 # empty tuple",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if x*a % n == 0:\n            for y in range(n+1):\n                if x*a % n == y*b % n:\n                    return (x, y)\n    return None",
        "test": "assert find_solution(4, 5, 11) == (1, 6)",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(n//2+1))*(n//2) + sum(range(n//2))*((n//2)*2 - 1)",
        "test": "assert sum_series(0) == 0",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.5 * s * l) / tan(pi / s)\n    return area",
        "test": "assert area_polygon(5, 6) == 15.58845726811989",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of two integers are the same, else it returns False.\n    '''\n    div1 = []\n    div2 = []\n    for i in range(1, n+1): \n        if n % i == 0: \n            div1.append(i)\n    for i in range(1, n+1): \n        if n % i == 0: \n            div2.append(i)\n    if sum(div1) == sum(div2): \n        return True\n    else: \n        return False",
        "test": "assert div_sum(1) == True",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha_str = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alpha_str:\n            count += 1\n    return count",
        "test": "assert count_char_position('HELLO') == {'h': 1, 'e': 1, 'l': 3, 'o': 2}",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5, 6]) == 2",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "test": "assert next_power_of_2(3) == 4",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9,10], 5) == 1",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "test": "assert sum_range_list([1,2,3,4,5], 0, 4) == 15",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "test": "assert perimeter_pentagon(10) == 50.0",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "test": "assert count_occurance('hello') == 0",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function checks if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(test_tuple) == 0:\n        return False\n    first_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= first_type:\n            return False\n    return True",
        "test": "assert check_type((1,2,3)) == True",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x > arr[n-1]:\n        return False\n    if x == arr[n-1]:\n        count = 1\n        for i in range(n-2, -1, -1):\n            if arr[i] == x:\n                count += 1\n            else:\n                break\n        if count > n/2:\n            return True\n        else:\n            return False\n    else:\n        count = 0\n        for i in range(n-1):\n            if arr[i] == x:\n                count += 1\n            else:\n                break\n        if count > n/2:\n            return True\n        else:\n            return False",
        "test": "assert is_majority([1,2,3,4,5], 5, 2) == False",
        "num_ids": 673,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            continue\n        new_str += str[i]\n    return new_str",
        "test": "assert odd_values_string('123456') == '135'",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c: \n        return a \n    elif b<=a and b<=c: \n        return b \n    else: \n        return c ",
        "test": "assert min_of_three(2,5,3) == 2",
        "num_ids": 285,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments:\n    1. n: an integer denoting the number of bits.\n    2. l: an integer denoting the leftmost position of the range.\n    3. r: an integer denoting the rightmost position of the range.\n    It returns True if all the bits in the range [l, r] are set, False otherwise.\n    \"\"\"\n    # Calculate the mask for the given range\n    mask = 0\n    for i in range(l, r+1):\n        mask |= (1 << i)\n    \n    # Check if all bits in the given range are set\n    if mask & n == mask:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(2,1,3) == False, \"all_Bits_Set_In_The_Given_Range function is not correct\"",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    neg = []\n    pos = []\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    neg.sort(reverse=True)\n    pos.sort()\n    return neg + pos[:n-len(neg)]",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5] # test case 2",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank('hello world','*') == 'hello*world'",
        "num_ids": 324,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(list(heap), reverse=True)",
        "test": "assert larg_nnum([1, 5, 3, 8, 2, 7, 4, 6], 1) == [8]",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    Returns:\n    float: lateral surface area of the cylinder\n    '''\n    lateralsurface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return lateralsurface_area",
        "test": "assert lateralsuface_cylinder(1,3)==11.309733552923254",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "test": "assert volume_cube(3) == 27",
        "num_ids": 178,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function takes a number as input and sets all even bits of that number.\n    '''\n    # Convert the number to binary and split it into a list of bits\n    bits = list(bin(n)[2:])\n    \n    # Iterate over the bits and set the even bits to 1\n    for i in range(0, len(bits)):\n        if i % 2 == 0:\n            bits[i] = '1'\n    \n    # Convert the list of bits back to an integer and return the result\n    result = int(''.join(bits), 2)\n    return result",
        "test": "assert even_bit_set_number(1) == 1",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count",
        "test": "assert check_occurences([(1,2), (2,3), (1,2), (3,4)]) == {(1, 2): 2, (2, 3): 1, (3, 4): 1}",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"a\") == 1",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    elif n == 2:\n        return m * (m-1) // 2\n    else:\n        count = 0\n        for i in range(1, m):\n            count += get_total_number_of_sequences(m-i, n-1)\n        return count\n",
        "test": "assert get_total_number_of_sequences(5,2) == 10",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def replace_list(list1,list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1",
        "test": "assert replace_list([1,2,3],[4]) == [1,2,4]",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)",
        "test": "assert count_charac(\"Hello World!\") == 12",
        "num_ids": 233,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = N + 1\n    while math.sqrt(i)!= int(math.sqrt(i)):\n        i += 1\n    return int(math.sqrt(i))**2",
        "test": "assert next_Perfect_Square(5) == 9",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    return max(dp)",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.000001:\n        guess = (guess + number/guess) / 2\n    return guess",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    max_len = 1\n    for k in range(2, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n                max_len = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                max_len = max(max_len, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return max_len",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 817,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "test": "assert harmonic_sum(1) == 1.0",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "test": "assert intersection_array([1,2,3,4,5],[2,4,6,8]) == [2, 4]",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X((1,2,3,4,5), 3) == 1",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list",
        "test": "assert insert_element([1,2,3,4,5], 0) == [0,1,0,2,0,3,0,4,0,5]",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of polar coordinates\n    of the complex numbers.\n    '''\n    polar_coords = []\n    for num in numbers:\n        r = abs(num)   # calculates the magnitude of the complex number\n        theta = cmath.phase(num)   # calculates the phase angle of the complex number\n        polar_coords.append((r, theta))   # appends the polar coordinates as a tuple to the list\n    return polar_coords",
        "test": "assert convert((1+2j)).imag == 1.1071487177940904 ",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    This function takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = list(combinations_with_replacement(l, n))\n    return comb",
        "test": "assert combinations_colors(['red', 'green', 'blue'], 2) == [('red','red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')]",
        "num_ids": 1022,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4 ",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b,a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 244,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple with the maximum values from both tuples.\n    \"\"\"\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        max_tup += (max(test_tup1[i], test_tup2[i]),)\n    return max_tup",
        "test": "assert maximize_elements((2,4,6),(1,2,3)) == (2,4,6)",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        raise ValueError('n must be greater than 0')\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a = 2\n        b = 3\n        for i in range(3, n + 1):\n            c = (2 * b * b - a) // (b - 1)\n            if is_prime(c):\n                a, b = b, c\n            else:\n                c = (b * b + b + a) // (2 * b - 1)\n                if is_prime(c):\n                    a, b = b, c\n                else:\n                    c = (b * b + 3 * b + 2 * a) // (3 * b - 2)\n                    if is_prime(c):\n                        a, b = b, c\n                    else:\n                        raise ValueError('nth prime not found')\n        return b\n\n\ndef is_prime(n):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert newman_prime(2) == 3, \"newman_prime(2) should return 3\"",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "test": "assert division_elements((2, 4, 6), (1, 2, 3)) == (2, 2, 2)",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"Error: L should be less than or equal to the length of the list.\"\n    else:\n        return (list1[:L], list1[L:])",
        "test": "assert split_two_parts([1, 2, 3, 4, 5, 6, 7], 4) == ([1, 2, 3, 4], [5, 6, 7])",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Conversion factor between human years and dog years\n    conv_factor = 7\n\n    # Calculate dog's age in dog's years\n    d_age = h_age / conv_factor\n\n    # Return the dog's age in dog's years\n    return d_age",
        "test": "assert dog_age(5) == 15, \"Incorrect age conversion for dog\"",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element,\n    returning a list of the resulting lists.\n    \"\"\"\n    n = step\n    splits = []\n    for i in range(0, len(S), n):\n        splits.append(S[i:i+n])\n    return splits",
        "test": "assert list_split([], 1) == []",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes a single argument, l, which represents the length of a cube.\n    It returns the lateral surface area of the cube.\n    '''\n    lateralsurface = 6 * l ** 2\n    return lateralsurface",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    while True:\n        num = 1\n        for i in range(n):\n            num *= count\n        if num == 1:\n            return count\n        else:\n            count += 1",
        "test": "assert find_star_num(1) == 1, \"find_star_num(1) should be 1\"",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 165,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Given a list of numbers, return the sum of even numbers at even positions.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "test": "assert sum_even_and_even_index([2, 4, 6, 8, 10]) == 18",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count**5\n            count += 1\n        else:\n            count += 1\n    return sum",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "test": "assert substract_elements((0,0,0),(1,2,3)) == (-1,-2,-3)",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total_sum = 0\n    for i in range(2, n+1, 2):\n        total_sum += math.comb(n, i)\n    return total_sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cylinder(2, 4) == 50.26548245743669",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict",
        "test": "assert dict_filter({'a': 5, 'b': 2, 'c': 7}, 4) == {'a': 5, 'c': 7}",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count",
        "test": "assert count_first_elements((1,1,2,3,4)) == 1",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    count = 0\n    i = 1\n    decagonal = 0\n    while count < n:\n        decagonal += i\n        count += 1\n        i *= 10\n    return decagonal",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n\n    return (False, -1)",
        "test": "assert sequential_search([1,2,3,4,5], 3) == (True, 2)",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)",
        "test": "assert all_unique(['a', 'b', 'c']) == True",
        "num_ids": 275,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[1,2,3]) == [0,0,0]",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]  # split the integer into its digits\n    freq = {}  # create a dictionary to keep track of the frequency of each digit\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False  # return False if a digit has a frequency greater than the digit itself\n    return True  # return True if all digits have a frequency less than or equal to the digit itself",
        "test": "assert validate(12345) == True",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n\n    Args:\n        lst (list): List of items to check.\n        elem (any): Element to check against.\n\n    Returns:\n        bool: True if all items in the list are equal to the element, False otherwise.\n    '''\n    return all(elem == x for x in lst)",
        "test": "assert check_element([1,1,1,1,1],1) == True",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three(\"aba\") == False",
        "num_ids": 289,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = float('-inf') \n    for i in range(k): \n        curr_sum = 0 \n        for j in range(n): \n            curr_sum += a[j] \n            if i == k - 1: \n                max_sum = max(max_sum, curr_sum) \n            elif curr_sum > max_sum: \n                max_sum = curr_sum \n    return max_sum ",
        "test": "assert max_sub_array_sum_repeated([2, 1, 5, 8, 4], 5, 4) == 19",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += (i ** 2)\n        i += 2\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "test": "assert max_length([[], [1], [1, 2], [1, 2, 3], [1, 2, 3, 4]]) == [1, 2, 3, 4]",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0]*k for _ in range(n)]\n    dp[0][0], dp[0][1] = 1, 1\n    for i in range(1, n):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j]\n            if j >= 1 and dp[i-1][j-1] > 0:\n                dp[i][j] += dp[i-1][j-1]\n            if j >= 2 and dp[i-1][j-2] > 0:\n                dp[i][j] += dp[i-1][j-2]\n    return dp[n-1][k-1]",
        "test": "assert count_no_of_ways(1, 2) == 1",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n, m):\n    \"\"\"\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n\n    :param n: The first number\n    :param m: The second number\n    :return: The quotient of n and m (rounded down to the nearest integer)\n    \"\"\"\n    return n // m",
        "test": "assert find(10,3) == 3",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        print(\"The given sides form a right angled triangle\")\n    else:\n        print(\"The given sides do not form a right angled triangle\")\n    c = math.sqrt(w**2 + h**2)\n    print(\"The third side of the triangle is:\", c)",
        "test": "assert otherside_rightangle(6,8) == 10",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val",
        "test": "assert max_val([1,2,3,4,5]) == 5",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function returns the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "test": "assert sum_div(2) == 1",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count",
        "test": "assert get_Inv_Count([1,2,3]) == 0",
        "num_ids": 705,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert flatten_list([1, 2, 3, [4, 5, [6, 7], 8], 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(int)\n    max_agg = 0\n    \n    for t in stdata:\n        data[t[0]] += t[1]\n        data[t[1]] += t[0]\n        \n        if data[t[0]] - data[t[1]] > max_agg:\n            max_agg = data[t[0]] - data[t[1]]\n    \n    return max_agg",
        "test": "assert max_aggregate([(1,2,3), (4,5,6), (7,8,9), (10,11,12)]) == 66",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if bits.count('1') == n and bits == bits[::-1]:\n            count += 1\n    return count",
        "test": "assert count_binary_seq(1) == 1",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
        "test": "assert dict_depth({1:2, 3:4}) == 1",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    This function takes an array and two integers as input and returns the element at the given index after rotating the array by a certain number of times.\n    '''\n    # Define a function to perform the rotation\n    def rotate_Array(arr, rotations):\n        return arr[-rotations:] + arr[:-rotations]\n\n    # Rotate the array by the required number of times\n    rotated_Array = rotate_Array(arr, rotations)\n\n    # Return the element at the given index\n    return rotated_Array[index]",
        "test": "assert find_Element([1,2,3,4,5,6,7,8,9,10], [[0,4]], 0, 0) == 1",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = r\"p\\w+\"\n    matches = re.findall(pattern, \" \".join(words))\n    return matches[0], matches[1]",
        "test": "assert start_withp(['pumpkin', 'pineapple', 'peach', 'pear']) == ('pumpkin', 'pineapple')",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n-1:\n        return a[index]\n    \n    max_sum = 0\n    for i in range(index+1, n):\n        if a[i] > a[index]:\n            if k > i:\n                max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[index])\n            else:\n                max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, i+1) + a[index])\n                \n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 3, 2) == 9",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    colon = colon[m-1:n]\n    return colon",
        "test": "assert colon_tuplex((1,2,3,4,5),1,5) == (1,2,3,4,5)",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # create a dictionary to store the products and their indices\n    products = {}\n    \n    # iterate through the first list and calculate products with each element of the second list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = nums1[i] * nums2[j]\n            if product in products:\n                products[product].append((i,j))\n            else:\n                products[product] = [(i,j)]\n    \n    # sort the products in descending order\n    sorted_products = sorted(products.keys(), reverse=True)\n    \n    # select the top N products\n    top_N_products = sorted_products[:N]\n    \n    # create a list to store the final result\n    result = []\n    \n    # iterate through the top N products and add their indices to the result list\n    for product in top_N_products:\n        indices = products[product]\n        for i in range(len(indices)):\n            result.append(indices[i])\n    \n    return result",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 3) == [6, 12, 18]",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2,3)==3",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = n & (n-1)\n    return n | mask + 1",
        "test": "assert set_left_most_unset_bit(0b00000000) == 0b00000001",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone with base radius r and height h.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(1,2) == 2*math.pi*1*1/3",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    \n    while power_of_2 <= n:\n        power_of_2 *= 2\n        \n    return power_of_2 // 2\n",
        "test": "assert highest_Power_of_2(25) == 16",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 289,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "test": "assert add_string([1, 2, 3], 'The number is {}') == ['The number is 1', 'The number is 2', 'The number is 3']",
        "num_ids": 395,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    This function takes three lists as input and converts them to a nested dictionary.\n    '''\n    result_dict = {}\n\n    # create a dictionary for each list\n    dict1 = dict(zip(l1, l2))\n    dict2 = dict(zip(l1, l3))\n\n    # combine the dictionaries into a nested dictionary\n    for key, value in dict1.items():\n        if key in result_dict:\n            if type(result_dict[key]) is list:\n                result_dict[key].append(value)\n            else:\n                result_dict[key] = [result_dict[key], value]\n        else:\n            result_dict[key] = value\n\n    for key, value in dict2.items():\n        if key in result_dict:\n            if type(result_dict[key]) is list:\n                result_dict[key].append(value)\n            else:\n                result_dict[key] = [result_dict[key], value]\n        else:\n            result_dict[key] = value\n\n    return result_dict",
        "test": "assert convert_list_dictionary([{'a':1, 'b':2}, {'a':3, 'b':4}], ['x', 'y'], [2, 4]) == [{'a':1, 'b':2, 'x':2, 'y':4}, {'a':3, 'b':4, 'x':2, 'y':4}]<|im_sep|>",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([]) == []",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n    \n    # Loop through each element in the tuple\n    for elem in test_tup:\n        # If the element is already in the set, return False\n        if elem in unique_set:\n            return False\n        else:\n            # Otherwise, add the element to the set\n            unique_set.add(elem)\n    \n    # If all elements are unique, return True\n    return True",
        "test": "assert check_distinct((1, 2, 3)) == True",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_non_repeating_character(s):\n    \"\"\"\n    Returns the first character in s that is not repeated. If all characters are repeated, returns None.\n    \"\"\"\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n    for c in s:\n        if freq[c] == 1:\n            return c\n    return None",
        "test": "assert first_non_repeating_character(\"hello world\") == \"h\"",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_char('aab') == False",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers\n    nums = sorted([a, b, c])\n\n    # Find the median\n    if len(nums) % 2 == 0:\n        median = (nums[len(nums)//2 - 1] + nums[len(nums)//2]) / 2\n    else:\n        median = nums[len(nums)//2]\n\n    return median",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of digits of each number.\n    \"\"\"\n    sum_of_digits = []\n    for num in nums:\n        # convert the number to a string to iterate over its digits\n        num_str = str(num)\n        digit_sum = 0\n        for digit in num_str:\n            digit_sum += int(digit)\n        sum_of_digits.append(digit_sum)\n    return sum_of_digits",
        "test": "assert sum_of_digits([10, 15, 20]) == 45",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "test": "assert bitwise_xor((1, 0, 1), (0, 1, 1)) == (1, 1, 0) # tuple of bits",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tuple in test_list:\n        if tuple not in unique_tuples:\n            unique_tuples.add(tuple)\n    return len(unique_tuples)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_result = []\n        for j in range(len(test_tup1[i])):\n            inner_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(inner_result))\n    return tuple(result)",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((10, 20), (30, 40))) == ((11, 22), (33, 44))",
        "num_ids": 622,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function returns the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(10,20) == 10",
        "num_ids": 189,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two tuples as input, tuplex and tuple1. \n    It returns True if the element in tuple1 is present in tuplex and False otherwise.\n    '''\n    if tuple1[0] in tuplex:\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex((1,2,3),(4,5)) == False",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "test": "assert find_Parity(10) == False",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    # Convert the given number into a string\n    digits = [int(d) for d in n]\n    # Convert each digit in the number into an integer\n    max_num = -1\n    # Initialize the maximum number to -1\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if digits[j] > digits[i]:\n                # Swap the digits if the next digit is greater than the current one\n                digits[i], digits[j] = digits[j], digits[i]\n                # Check if the new number is greater than the maximum number found so far\n                num = int(''.join([str(d) for d in digits]))\n                if num > max_num:\n                    max_num = num\n                # Swap the digits back to restore the original order\n                digits[i], digits[j] = digits[j], digits[i]\n    # Return the maximum number found\n    return max_num",
        "test": "assert rearrange_bigger(12) == 21",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n\n    while heap and k > 0:\n        _, num1, num2 = heapq.heappop(heap)\n        pairs.append((num1, num2))\n        k -= 1\n\n    return pairs",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)]",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(lst):\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1,3), (2,4), (5,6)]) == 6",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for val in listval[1:]:\n            if val < min_val:\n                min_val = val\n        return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function takes a string in snake case and returns the same string in camel case.\n    '''\n    # Splitting the string into words\n    words = word.split('_')\n    \n    # Capitalizing the first letter of each word except the first word\n    for i in range(1, len(words)):\n        words[i] = words[i].capitalize()\n        \n    # Joining the words back to string\n    camel_case = ''.join(words)\n    \n    return camel_case",
        "test": "assert snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function removes all odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n    '''\n    # create a list of tuples from the given list\n    tuples_list = [(i[0], i[1]) for i in list1]\n\n    # extract the nth element from the list of tuples\n    nth_element = tuples_list[n-1][1]\n\n    return nth_element",
        "test": "assert extract_nth_element([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')], 2) == 'b'",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1, list2):\n    '''\n    Returns True if any value in list1 exists in list2, or False otherwise.\n    '''\n    return any(elem in list2 for elem in list1)",
        "test": "assert overlapping([1,2,3,4],[3,4,5,6])==True",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    second_max_product = float('-inf')\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                second_max_product = max_product\n                max_product = product\n            elif product > second_max_product and product!= max_product:\n                second_max_product = product\n\n    return max_product, second_max_product",
        "test": "assert max_Product([-10,-10,5,2]) == 50",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary to store common elements\n    common_elements = {}\n    \n    # loop through each tuple in the input list\n    for tuple in Input:\n        # check if the first element of the tuple is already in the dictionary\n        if tuple[0] in common_elements:\n            # if it is, add the tuple to the list of tuples associated with that element\n            common_elements[tuple[0]].append(tuple)\n        else:\n            # if it isn't, add the first element to the dictionary and create a new list to store tuples with that element\n            common_elements[tuple[0]] = [tuple]\n    \n    # loop through the dictionary and print each element and its associated tuples\n    for key in common_elements:\n        print(f'{key}: {common_elements[key]}')",
        "test": "assert group_tuples([(1,2,3),(4,5,6),(7,8,9)]) == None",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    max_elements = [element for element in lst if len(element) == max_len]\n    return max_elements",
        "test": "assert Find_Max([1, 2, 3, 4, 5]) == 5",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "test": "assert round_and_sum([0.123, 0.456, 0.789]) == (0.9, 10.0)",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize the sum of cubes to 0\n    sum_of_cubes = 0\n    \n    # Loop through first n even natural numbers and add their cubes to sum_of_cubes\n    for i in range(2, n*2, 2):\n        sum_of_cubes += i**3\n        \n    return sum_of_cubes",
        "test": "assert cube_Sum(1) == 0",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return''.join(test_tup)",
        "test": "assert concatenate_tuple(('a', 'b', 'c')) == 'abc'",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and finds the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 369,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0])-1\n    result_tuple = tuple([test_tuple[0][rear_index]])\n    for i in range(1, len(test_tuple)):\n        result_tuple += (test_tuple[i][rear_index],)\n    return result_tuple",
        "test": "assert extract_rear(('apple', 'banana', 'cherry')) == ('e', 'a', 'r')",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function takes a list and a particular element as input and returns the number of sublists in the list that contain the element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([[1,2,3], [4,5,6], [7,8,9]], 5) == 1",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        return 'Invalid date format. Please enter in yyyy-mm-dd format.'",
        "test": "assert change_date_format('2021-10-25') == '25-10-2021'",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given list using the shell sort algorithm.\n\n    :param my_list: the list to be sorted\n    :return: the sorted list\n    \"\"\"\n\n    # define the gap between adjacent elements to be sorted\n    gap = len(my_list) // 2\n\n    # iterate over the gap until it becomes 1\n    while gap > 0:\n        # iterate over the list using the gap\n        for i in range(gap, len(my_list)):\n            # define the current element and the previous one\n            current_element = my_list[i]\n            previous_element = my_list[i - gap]\n\n            # compare the current element with the previous one\n            while current_element < previous_element and i >= gap:\n                # swap the elements if necessary\n                my_list[i] = previous_element\n                i -= gap\n                previous_element = my_list[i - gap]\n\n            # insert the current element at the correct position\n            my_list[i] = current_element\n\n        # reduce the gap for the next iteration\n        gap = gap // 2\n\n    return my_list",
        "test": "assert shell_sort([5, 2, 4, 6, 1, 3]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 676,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] and test_tup2[i]),)\n    return result_tup",
        "test": "assert and_tuples((True, True, False), (True, True, True)) == (True, True, False)",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return (x1, x2)\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return x\n    else:\n        print(\"No real roots.\")",
        "test": "assert parabola_directrix(1, -2, 1) == 1",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1).intersection(set(list2))) > 0:\n        return True\n    else:\n        return False",
        "test": "assert common_element([1, 2, 3], [3, 4, 5]) == True",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the median length of the trapezium\n    median = (base1 + base2) / 2\n    \n    # return the result\n    return median",
        "test": "assert median_trapezium(1,3,2) == 2",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3, 4], 0) == False",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_match_one(\"ab\") == \"ab\"",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 191,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a new list containing only the negative numbers from the input list.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num < 0:\n            result.append(num)\n    return result",
        "test": "assert neg_nos([1, 2, -3, 4, -5]) == [-3, -5]",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    This function removes all odd characters from a given string.\n    '''\n    # converting the string to a list of characters\n    str1 = list(str1)\n\n    # iterating through the list and removing odd characters\n    for i in range(len(str1)-1, -1, -1):\n        if ord(str1[i]) % 2 == 1:\n            str1.pop(i)\n\n    # joining the list of characters to form the final string\n    return ''.join(str1)",
        "test": "assert remove_odd(\"hello\") == \"hll\"",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == tuple(reversed(test_list[j])):\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(1,2),(3,4),(5,6)]) == 0",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n\n    Parameters:\n    L (list of int): A list of integers to join.\n\n    Returns:\n    int: The single integer obtained by joining the elements of the list.\n    \"\"\"\n    return int(''.join(map(str, L)))",
        "test": "assert multiple_to_single([1, 2, 3, 4, 5]) == 12345",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all adverbs in the text using regular expressions\n    adverbs = re.findall(r'\\b(very|extremely|really|quite|generally|fairly|rather|probably|generously|relatively|honestly|certainly|nearly|surely|definitely|surely|unfortunately|probably|seriously|exactly|enough|entirely|fully|actually|perhaps|definitely|largely|finally|obviously|somewhat|fairly|constantly|pretty|probably|relatively|certainly|seriously|fairly|generally|nearly|exactly|rather|probably|quite|actually|generally|relatively|fairly|certainly|mostly|approximately|extremely|relatively|obviously|rather|probably|quite|generally|relatively|actually|fairly|mostly|very|extremely|really|quite|generally|fairly|rather|probably|generously|relatively|honestly|certainly|nearly|surely|definitely|surely|unfortunately|probably|seriously|exactly|enough|entirely|fully|perhaps|definitely|largely|finally|obviously|somewhat|fairly|constantly|pretty|probably|relatively|certainly|seriously|fairly|generally|nearly|exactly|rather|probably|quite|actually|generally|relatively|fairly|certainly|mostly|approximately|extremely|relatively|obviously|rather|probably|quite|generally|relatively|actually|fairly|mostly|very|extremely|really|quite|generally|fairly|rather|probably|generously|relatively|honestly|certainly|nearly|surely|definitely|surely|unfortunately|probably|seriously|exactly|enough|entirely|fully|actually|perhaps|definitely|largely|finally|obviously|somewhat|fairly|constantly|pretty|probably|relatively|certainly|seriously|fairly|generally|nearly|exactly|rather|probably|quite|actually|generally|relatively|fairly|certainly|mostly|approximately|extremely|relatively|obviously|rather|probably|quite|generally|relatively|actually|fairly|mostly|very|extremely|really|quite|generally|fairly|rather|probably|generously|relatively|honestly|certainly|nearly|surely|definitely|surely|unfortunately|probably|seriously|exactly|enough|entirely|fully|perhaps|definitely|largely|finally|obviously|somewhat|fairly|constantly|pretty|probably|relatively|certainly|seriously|fairly|generally|nearly|exactly|rather|probably|quite|actually|generally|relatively|fairly|certainly|mostly|approximately|extremely|relatively|obviously|rather|probably|quite|generally|relatively|actually|fairly|mostly|very|extremely|really|quite|generally|fairly|rather|probably|generously|relatively|honestly|certainly|nearly|surely|definitely|surely|unfortunately|probably|seriously|exactly|enough|entirely|fully|actually|perhaps|definitely|largely|finally|obviously|somewhat|fairly|constantly|pretty|probably|relatively|certainly|seriously|fairly|generally|nearly|exactly|rather|probably|quite|actually|generally|relatively|fairly|certainly|mostly|approximately)\\b', text, flags=re.IGNORECASE)\n    \n    # If there are no adverbs, return None\n    if not adverbs:\n        return None\n    \n    # Find the position of the first adverb in",
        "test": "assert find_adverb_position(\"The quick brown fox jumps over the lazy dog, running away from a bear.\") == (17, 22)",
        "num_ids": 1541,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a size of a cube as input and returns its surface area.\n    '''\n    surface_area = 6 * l**2\n    return surface_area",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
        "test": "assert positive_count([0, -1, -2, -3, -4]) == 0/5",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg",
        "test": "assert largest_neg([-1, -2, -3, -4, -5]) == -1",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tpl in test_list:\n        trimmed_tpl = tuple(tpl[K:])\n        result.append(trimmed_tpl)\n    return result",
        "test": "assert trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [(2, 3), (5, 6), (8, 9)]",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the result of multiplication of corresponding tuple elements.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "test": "assert index_multiplication((1,2,3), (2,3,4)) == (2, 6, 12)",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    res = {}\n    for i in tup:\n        if i in count:\n            res[i] = count[i]\n        else:\n            res[i] = 0\n    return res",
        "test": "assert count_Occurrence((1, 2, 3, 4), [1, 2, 3, 4]) == Counter({1: 1, 2: 1, 3: 1, 4: 1})",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n < 1:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    else:\n        return n + cal_sum(n-1)\n",
        "test": "assert cal_sum(1) == 1",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]",
        "test": "assert extract_string(\"abcde\", 3) == ['abc', 'de']",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "test": "assert remove_whitespaces('hello world') == 'helloworld'",
        "num_ids": 270,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculates the loss amount on a sale if the given sale amount is less than the actual cost.\n    If the sale amount is greater than or equal to the actual cost, returns 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(100,75) == 25",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n            if i!= n/i:\n                sum += n/i\n    return sum",
        "test": "assert sumofFactors(10) == 18 # 1 + 2 + 4 + 5 + 10 = 18",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function matches a word containing 'z'.\n    \"\"\"\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches",
        "test": "assert text_match_wordz('I do not like to code in Python.') == []",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function checks whether the given month number contains 31 days or not.\n\n    Parameters:\n    monthnum (int): The month number for which the function is to be executed.\n\n    Returns:\n    bool: True if the month number contains 31 days, False otherwise.\n    '''\n\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False",
        "test": "assert check_monthnumb_number(2) == True",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Reverses each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist",
        "test": "assert Find_Min([[1,2],[3],[4,5,6]]) == [3]",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rectangle_area(length, breadth):\n    \"\"\"\n    This function takes the length and breadth of a rectangle as input and returns its area.\n    \"\"\"\n    area = length * breadth\n    return area",
        "test": "assert rectangle_area(2,3) == 6",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regex to find all uppercase substrings\n    uppercase_substrings = re.findall(r'[A-Z][a-z]*', str1)\n    # Replace uppercase substrings with empty strings\n    str1 = re.sub(r'[A-Z][a-z]*', '', str1)\n    # Join the remaining lowercase substrings back together\n    return ''.join(str1.split())",
        "test": "assert remove_uppercase('AbCdEfG') == 'bcdfg'",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6], [7, 8, 9, 10]]) == [1, 3, 6, 7]",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"HELLO WORLD\") == 10",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    comb_list = []\n    \n    for i in range(1, n+1):\n        for comb in itertools.combinations(list1, i):\n            comb_list.append(comb)\n    \n    return comb_list",
        "test": "assert combinations_list(['a', 'b', 'c', 'd']) == [('a',), ('b',), ('c',), ('d',), ('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'c', 'd'), ('b', 'c', 'd'), ('a', 'b', 'c', 'd')]",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here * arr[i], min_ending_here * arr[i], arr[i])\n        min_ending_here = min(temp * arr[i], min_ending_here * arr[i], arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6, \"Test case 1 failed\"",
        "num_ids": 567,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({'a': 1, 'b': None}) == {'a': 1}",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    \n    # Initialize the maximum product and minimum product\n    max_prod = arr[0]\n    min_prod = arr[0]\n    \n    # Initialize the maximum product ending at the current index and minimum product ending at the current index\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    # Traverse the array from the second element to the last element\n    for i in range(1, n):\n        # Update the maximum product ending at the current index\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        \n        # Update the minimum product ending at the current index\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        \n        # Update the maximum product seen so far\n        max_prod = max(max_prod, max_ending_here)\n    \n    return max_prod",
        "test": "assert max_product([-2, 0, -1]) == 0, \"Testcase Failed\"",
        "num_ids": 879,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = []\n    for i in range(n-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result",
        "test": "assert add_pairwise((4,5,6,7)) == (8,10,12)",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    return product",
        "test": "assert find_remainder([1, 2, 3, 4], 2) == 0",
        "num_ids": 338,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            return True\n    return False",
        "test": "assert check_Consecutive([1,2,3,4,6]) == True",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1 & set2\n    return sorted(list(intersection))",
        "test": "assert tuple_intersection([(1,2), (2,3), (1,2)], [(2,3), (1,2), (4,5)]) == [(1,2), (2,3)]",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n\n    :param str1: The input string.\n    :param ch: The character to be replaced.\n    :param newch: The new character to replace the old character.\n    :return: The modified string with the character replaced.\n    \"\"\"\n    modified_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            modified_str += newch\n        else:\n            modified_str += str1[i]\n    return modified_str",
        "test": "assert replace_char('hello world','o','*') == 'hell* w*rld'",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "test": "assert sort_counter(Counter({'apple':3, 'banana':2, 'orange':1})) == [('orange', 1), ('apple', 3), ('banana', 2)]",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-1:]) + sum(sorted(nums)[:1])",
        "test": "assert big_sum([-10,-5,0,5,10]) == 0",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"HELLO WORLD\") == \"hello world\"",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    pattern = r'(?<!\\w)[a-z]+'\n    return re.sub(pattern, '', str1)",
        "test": "assert remove_lowercase(\"AbcDefG\") == \"AbcDefG\" # no lowercase substrings",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns its first digit.\n    '''\n    if n < 0:\n        n = abs(n)\n        return -first_Digit(n)\n    elif n < 10:\n        return n\n    else:\n        return first_Digit(n // 10)",
        "test": "assert first_Digit(1234) == 1, \"Incorrect output for 1234\"",
        "num_ids": 285,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for num in lst:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 318,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
        "test": "assert difference(1) == 0",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    This function counts the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,3,5,7,9], 5) == 0",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string",
        "test": "assert toggle_string(\"hello\") == \"HELLO\"",
        "num_ids": 346,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n\n    if n1_len > n2_len:\n        n2_str = \"0\" * (n1_len - n2_len) + n2_str\n    elif n2_len > n1_len:\n        n1_str = \"0\" * (n2_len - n1_len) + n1_str\n\n    n1_digits = [int(d) for d in n1_str]\n    n2_digits = [int(d) for d in n2_str]\n\n    digit_diff_sum = sum([abs(n1_digits[i] - n2_digits[i]) for i in range(n1_len)])\n\n    return digit_diff_sum",
        "test": "assert digit_distance_nums(1234, 5678) == 16",
        "num_ids": 715,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum",
        "test": "assert max_sub_array_sum([1, 2, 3, -4, 5], 5) == 7 # [3, -4, 5]",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the union of their elements, sorted in ascending order.\n    '''\n    # converting the tuples to sets to find the union of their elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union = set1.union(set2)\n    # converting the union set back to tuple and sorting it in ascending order\n    sorted_union = tuple(sorted(union))\n    return sorted_union",
        "test": "assert union_elements((1,2,3), (2,3,4)) == (1,2,3,4)",
        "num_ids": 540,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len",
        "test": "assert Find_Max_Length([1, 2, 3, 4, 5]) == 5",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    # Use regular expression to find all the values between quotation marks\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    \n    # Return the matches as a list\n    return matches",
        "test": "assert extract_values('She told me, \"I love programming.\"') == ['I love programming.']",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5], 4) == 6",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word):\n    '''\n    This function takes a string as an argument and returns a list of characters\n    '''\n    return list(word)",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError(\"Number should be non-negative.\")\n    \n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n        \n    return sum",
        "test": "assert sum_digits(12345) == 15",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check if a list is sorted.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))",
        "test": "assert issort_list([1,2,3,4,5]) == True",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 184,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input and removes duplicate numbers from each list.\n    It returns a new list of lists with unique numbers only.\n    '''\n\n    # Create an empty list to store the unique lists of numbers\n    unique_lists = []\n\n    # Iterate over each list in the input list\n    for lst in nums:\n        # Create a set from the current list to remove duplicate numbers\n        unique_set = set(lst)\n        # Convert the set back to a list and append it to the unique_lists list\n        unique_lists.append(list(unique_set))\n\n    # Return the list of unique lists of numbers\n    return unique_lists",
        "test": "assert two_unique_nums([1,2,2,3,4,4]) == [1,2,3,4]",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data) # create a set of unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number # multiply all the unique numbers\n    return product",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area",
        "test": "assert surfacearea_cylinder(2,3) == 50.2654824574367",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    This function takes two lists as input and returns True if the first list is a sublist of the second list, otherwise it returns False.\n    '''\n    if set(A).issubset(B):\n        return True\n    else:\n        return False",
        "test": "assert is_Sub_Array([1,2,3,4],[1,2,3,4]) == True",
        "num_ids": 533,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit in the factorial of n.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 1\n    \n    # Calculate the factorial of n\n    for i in range(2, n+1):\n        result *= i\n    \n    # Return the last digit of the result\n    return result % 10",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 570,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar",
        "test": "assert find_dissimilar((1, 2, 3), (3, 2, 1)) == (1, 2, 3)",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if type(i) == int:\n            result.append(i)\n        else:\n            sub_tuple = []\n            for j in i:\n                if even_fnc(j):\n                    sub_tuple.append(j)\n            if len(sub_tuple) > 0:\n                result.append(sub_tuple)\n    return tuple(result)",
        "test": "assert even_ele((('a', 'b'), ('c', 'd', 'e')), lambda x: len(x) % 2!= 0) == (('a', 'b'), ('c', 'd', 'e'))",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 2 * (b * s) + 2 * (b * b)\n    return surface_area",
        "test": "assert surface_Area(5,4)==210",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function checks if a dictionary is empty.\n\n    Parameters:\n    dict1 (dict): A dictionary to be checked for emptyness.\n\n    Returns:\n    bool: True if the dictionary is empty, False otherwise.\n    \"\"\"\n\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True # empty dictionary",
        "num_ids": 245,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    else:\n        catalan_num = 0\n        for i in range(n):\n            catalan_num += catalan_number(i) * catalan_number(n-i-1)\n        return catalan_num",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function finds the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    if adverbs:\n        for adverb in adverbs:\n            start_pos = text.find(adverb)\n            end_pos = start_pos + len(adverb)\n            print(f\"Adverb: {adverb}\\nStart position: {start_pos}\\nEnd position: {end_pos}\\n\")\n    else:\n        print(\"No adverbs found!\")",
        "test": "assert find_adverbs(\"I am always looking for a new adventure\") == (['looking', 'adventure'], [(10, 17), (29, 37)])",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, item)\n\n    result = []\n\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result",
        "test": "assert expensive_items([('apples', 2.5), ('bananas', 1.2), ('oranges', 3.4), ('grapes', 1.9), ('pears', 2.2)], 5) == [('bananas', 1.2), ('oranges', 3.4), ('apples', 2.5), ('grapes', 1.9), ('pears', 2.2)]",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    new_list = second_part + first_part\n    return new_list",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 3) == [1, 2, 3, 1, 2, 3, 4, 5]",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1,2,3]) == (1,2,3)",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 289,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        sqrt_num = int(num**0.5)\n        if sqrt_num**2 == num:\n            squares.append(num)\n    return squares",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9], \"Incorrect output for perfect_squares(1, 10)\"",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import cmath\n\ndef polar_rect(rho,theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n        rho (float): the distance from the origin\n        theta (float): the angle from the positive x-axis\n\n    Returns:\n        (float, float): the rectangular coordinates (x, y)\n    '''\n    return (rho * cmath.cos(theta), rho * cmath.sin(theta))",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an argument and returns the list with the first and last elements swapped.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] #swapping the elements\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def binomial_Coeff(n,k): \n    if k > n: \n        return 0\n    if k == 0 or k == n: \n        return 1\n    return int(binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))",
        "test": "assert binomial_Coeff(4,2) == 6 # assert binomial_Coeff(4,2) == 6",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip",
        "test": "assert removezero_ip(\"172.16.254.1\") == \"172.16.254.1\"",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        if even == 1 and odd == 1:\n            break\n    return abs(list1[0] - list1[even-1])",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes in two binary strings as arguments and returns the minimum number of swaps required to convert str1 to str2.\n    \"\"\"\n    # Convert the strings to lists of integers\n    lst1 = [int(i) for i in str1]\n    lst2 = [int(i) for i in str2]\n    \n    # Initialize variables\n    n = len(lst1)\n    count = 0\n    \n    # Traverse both lists simultaneously and count the number of swaps required\n    for i in range(n):\n        if lst1[i]!= lst2[i]:\n            j = i + 1\n            while j < n and lst1[j]!= lst2[i]:\n                j += 1\n            if j < n:\n                lst1[i], lst1[j] = lst1[j], lst1[i]\n                count += 1\n            else:\n                return -1\n    \n    return count",
        "test": "assert min_Swaps('0011','1111') == 0",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "test": "assert tuple_size((1, 2, 3, 4)) == sys.getsizeof((1, 2, 3, 4))",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # initialize two pointers, one for each array\n    i = 0\n    j = 0\n    \n    # loop until either i reaches the end of array 1 or j reaches the end of array 2\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        \n        # if the length of the combined array is equal to k, return the value of the kth element\n        if i + j == k - 1:\n            if arr1[i] == arr2[j]:\n                return arr1[i]\n            else:\n                return min(arr1[i], arr2[j])\n    \n    # if k is greater than the length of the combined array, k is out of range\n    return None",
        "test": "assert find_kth([1, 2, 3, 4, 5], [6, 7, 8, 9], 5) == 5",
        "num_ids": 1155,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    return sum, average",
        "test": "assert sum_average(1) == (1,1)",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer n as input and checks whether the given number is even or not.\n\n    :param n: integer\n    :return: True if the given number is even, otherwise False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n\n    Args:\n    - str1: A string\n\n    Returns:\n    - A string containing the first repeated character or an empty string if there are no repeated characters.\n    \"\"\"\n    # Convert the string to a set to automatically remove duplicates\n    unique_chars = set(str1)\n    # Check if there are any repeated characters\n    if len(unique_chars) == len(str1):\n        return ''\n    # Loop through the set of unique characters and return the first repeated character\n    for char in unique_chars:\n        if str1.count(char) > 1:\n            return char\n    # This line should never be reached\n    return ''",
        "test": "assert first_repeated_char(\"abca\") == \"a\"",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic.append(i)\n    return ludic",
        "test": "assert get_ludic(0) == []",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    reversed_words = [word[::-1] for word in words]  # reverse each word\n    return''.join(reversed_words)  # join the reversed words back into a string with spaces between them",
        "test": "assert reverse_words('a b c d') == 'd c b a'",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes in a degree value and returns the corresponding value in radians.\n    '''\n    return math.radians(degree)",
        "test": "assert radian_degree(90) == math.pi/2",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"hello world\", r\"\\b\\w+\\b\") == ('hello', 0, 5)",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum(range(n+1))",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5]",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    # Get then'th column as a list\n    column_list = [row[N-1] for row in test_list]\n    # Return the max of then'th column\n    return max(column_list)",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 8",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[],[]]\n    for sublist in lst:\n        result[0].append(sublist[0])\n        result[1].append(sublist[1])\n    return result",
        "test": "assert merge([ [1,2], [3,4], [5,6] ]) == [[1,3,5],[2,4,6]]",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n        sum_list.append(cum_sum)\n    return sum_list",
        "test": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [(2.0, 3.0, 4.0), (5.0, 6.0, 7.0), (8.0, 9.0, 10.0)]",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    else:\n        print(\"Error: Tuples are not of the same length.\")",
        "test": "assert tuple_modulo((5, 10, 20), (3, 4, 5)) == (2, 2, 0)",
        "num_ids": 492,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d): \n    # create a list to store the number of jumps for each position\n    jumps = [0] * (d+1)\n    jumps[0] = 0\n    \n    # iterate through each position up to the target\n    for i in range(1, d+1): \n        # check if it is possible to reach the target from this position\n        if i < steps[0]: \n            jumps[i] = float('inf')\n        else: \n            jumps[i] = min(jumps[i], jumps[i-steps[0]]+1)\n        \n        # check if it is possible to reach the target from this position\n        if i < steps[1]: \n            jumps[i] = float('inf')\n        else: \n            jumps[i] = min(jumps[i], jumps[i-steps[1]]+1)\n        \n    # check if it is possible to reach the target from the origin\n    if jumps[d] == float('inf'): \n        return -1\n    else: \n        return jumps[d]",
        "test": "assert min_Jumps([2,1,0,1,2], 2) == 0",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([1,2,3],[2,4,6]) == [0.5,0.5,0.5]",
        "num_ids": 398,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    # split the string into words\n    words = test_str.split()\n    \n    # create two lists, one for the words with numbers and one for the words without numbers\n    nums = []\n    others = []\n    for word in words:\n        if word.isdigit():\n            nums.append(word)\n        else:\n            others.append(word)\n    \n    # join the words with numbers and the words without numbers to get the final string\n    return''.join(others + nums)",
        "test": "assert move_num('12345') == '12345'",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)",
        "test": "assert largest_subset([2, 3, 4, 6, 8, 10]) == 3",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n//2] + arr1[n//2-1]) / 2\n    else:\n        return arr1[n//2]",
        "test": "assert get_median([1, 3, 5, 7], [2, 4, 6, 8], 4) == 4",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function computes the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([2,3,4,5],3) == [8, 27, 64, 125]",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Converts a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper('PYTHON') == 'PYTHON'",
        "num_ids": 149,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # The radius of the semicircle is half of the given radius.\n    radius = r / 2\n    \n    # The length of the hypotenuse of the largest triangle is the radius of the semicircle.\n    hypotenuse = radius\n    \n    # The length of the other sides is the cosine of 60 degrees.\n    angle = math.radians(60)\n    side1 = radius * math.cos(angle)\n    side2 = radius * math.sin(angle)\n    \n    # The area of the largest triangle is the product of its sides.\n    area = 0.5 * side1 * side2\n    \n    return area",
        "test": "assert triangle_area(2) == 2*math.pi",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    '''\n    if end is None:\n        end = len(array) - 1\n        \n    for i in range(start, end+1):\n        if array[i] > 0:\n            break\n    else:\n        return 1\n        \n    for i in range(i, end+1):\n        j = array[i] - 1\n        if array[j]!= array[i] and array[j] > 0:\n            array[i], array[j] = array[j], array[i]\n            \n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1\n        \n    return end+2",
        "test": "assert find_First_Missing([1,2,3,4,6,7,8,9]) == 5",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 275,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    moves = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    adj_coords = []\n    for move in moves:\n        if move in sub:\n            continue\n        adj_coords.append(move)\n    return adj_coords",
        "test": "assert adjac((2,3)) == [(2,4),(3,3),(3,2),(4,3),(2,2),(3,4),(2,1),(3,2),(4,2),(1,3),(2,4),(1,4),(0,3),(1,2),(2,1),(3,0),(4,1),(3,-1),(2,-1),(3,0),(4,1),(3,-1),(2,-1),(3,0),(4,1),(2,0),(1,1),(2,2),(3,3),(4,4),(3,5),(2,4),(1,3),(0,2)]",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes in a list to the end of the list.\n    \"\"\"\n    # create two lists, one for non-zero elements and another for zeroes\n    non_zero_list = []\n    zero_list = []\n\n    # iterate through the given list and add non-zero elements to non_zero_list, and zero elements to zero_list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n        else:\n            zero_list.append(num)\n\n    # concatenate the non-zero list and zero list to get the final list with zeroes moved to the end\n    final_list = non_zero_list + zero_list\n\n    # return the final list\n    return final_list",
        "test": "assert move_zero([1, 0, 3, 0, 5]) == [1, 3, 5, 0, 0]",
        "num_ids": 636,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum",
        "test": "assert pair_xor_Sum([0,1,2,3,4],5) == 6",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heap sort algorithm.\n    '''\n    heap = iterable[:]\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "test": "assert heap_sort([3, 2, 1]) == [1, 2, 3]",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two arguments - actual_cost and sale_amount - and checks whether the sale has no profit and no loss.\n    :param actual_cost: actual cost of the item\n    :param sale_amount: amount earned by selling the item\n    :return: True if sale has no profit and no loss, False otherwise.\n    \"\"\"\n    if sale_amount > actual_cost:\n        print(\"No profit, no loss!\")\n        return False\n    else:\n        print(\"Sale has profit or loss!\")\n        return True",
        "test": "assert noprofit_noloss(100,100) == True",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert the temperature from celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # Calculate the wind chill index using the Magnus formula\n    wci = 13.12 + 0.6215 * t_f - 11.37 * math.pow(v, 0.16) + 0.3965 * t_f * math.pow(v, 0.16)\n    \n    # Round the wind chill index to the next integer\n    wci = round(wci)\n    \n    return wci",
        "test": "assert wind_chill(5,20) == 5",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the valid names\n    valid_names = []\n    \n    # loop through each name in the list\n    for name in sample_names:\n        # check if the first letter of the name is uppercase\n        if name[0].isupper():\n            # add the name to the valid_names list if it's valid\n            valid_names.append(name)\n    \n    # calculate the total length of the valid names\n    total_length = sum(len(name) for name in valid_names)\n    \n    return total_length",
        "test": "assert sample_nam(['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank']) == 21 # test case 2",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    result = re.sub(pattern, '', items)\n    return result",
        "test": "assert remove_parenthesis(\"hello (world)\") == \"hello \"",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_nonagonal(n):\n    '''\n    This function finds the nth nonagonal number.\n    '''\n    nonagonals = []\n    for i in range(1, n + 1):\n        nonagonals.append(i * (3 * i - 1) // 2)\n    return nonagonals[-1]",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regular expressions to match words with 'z' in the middle\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    \n    # Check if a match was found\n    if match:\n        # Return True if 'z' is found at the start or end of a word, but not in the middle\n        return not re.search(r'\\b\\w*z\\w*\\b', text)\n    else:\n        return False",
        "test": "assert text_match_wordz_middle('hello world') == False",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Initialize variables\n    n = len(input)\n    start = 0\n    end = k - 1\n\n    # Reverse the subarray from start to end\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    return input",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 453,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple(('a', 'b', 'c'), {'d': 1, 'e': 2}) == ('a', 'b', 'c', {'d': 1, 'e': 2})",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down \n    and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. \n    Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize the table to store the maximum average path\n    max_avg = 0\n    \n    # Iterate over all possible paths\n    for i in range(1, len(cost)):\n        for j in range(1, len(cost)):\n            # Compute the total cost of the path\n            total_cost = cost[i][j]\n            \n            # Compute the number of cells visited in the path\n            num_cells = 1\n            \n            # Check if the current cell is a part of the path\n            if i > 1:\n                total_cost += max_avg[i-1][j]\n                num_cells += 1\n            if j > 1:\n                total_cost += max_avg[i][j-1]\n                num_cells += 1\n            \n            # Update the maximum average path if necessary\n            max_avg[i][j] = total_cost / num_cells\n    \n    # Return the maximum average path\n    return max_avg[len(cost)-1][len(cost)-1]",
        "test": "assert maxAverageOfPath([[1,3,1],[1,5,1],[4,2,1]]) == 7",
        "num_ids": 1223,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student, values in students.items():\n        if values[0] > h and values[1] > w:\n            filtered_students[student] = values\n    return filtered_students",
        "test": "assert filter_data({'Alice': (1.7, 5.5), 'Bob': (1.6, 6.0), 'Charlie': (1.8, 5.9), 'David': (1.5, 5.8)}, 1.6, 5.6) == {'Alice': (1.7, 5.5), 'Bob': (1.6, 6.0)}, \"filter_data failed\"",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1,2,3], [2,2,3]) == [(1,2),(2,2)]",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    for digit in str(base):\n        sum_of_digits += int(digit) ** power\n    return sum_of_digits",
        "test": "assert power_base_sum(2, 0) == 1",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result",
        "test": "assert extract_quotation('The quick brown fox \"jumped over the lazy dog\"') == ['jumped over the lazy dog']",
        "num_ids": 346,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result = ()\n    for i in range(n):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result",
        "test": "assert multiply_elements((1,2,3)) == (2, 6), \"multiply_elements is not working correctly\"",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns their element-wise sum.\n\n    Args:\n    lst1 (list): A list of integers.\n    lst2 (list): A list of integers.\n\n    Returns:\n    list: A list of integers that are the element-wise sum of lst1 and lst2.\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group[0])\n        else:\n            result.extend(group)\n    return result",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 549,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n    '''\n    slant_height = math.sqrt(r**2 + h**2)\n    lsa = math.pi * r * slant_height\n    return lsa",
        "test": "assert lateralsurface_cone(2, 3) == math.pi * 18, \"lateralsurface_cone(2, 3) should be pi * 18\"",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)",
        "test": "assert replace_specialchar('This is a sentence.') == 'This:is:a:sentence.'",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1  # element not found in array",
        "test": "assert find_first_occurrence([1, 2, 3, 3, 4, 4, 4, 5, 5, 5], 3) == 2",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    # Iterate over all possible sublists of arr\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Calculate the product of sublist and add it to res\n            res += arr[i-1]*arr[i-1]*arr[i-1]\n    return res",
        "test": "assert sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 65 # Expected Output",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    mask = (1 << n.bit_length()-2) - 1\n    # -2 because we want to toggle all bits except the first and last bit\n    return (n & mask) ^ (n & ~mask)",
        "test": "assert set_middle_bits(10) == 15",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)",
        "test": "assert left_insertion([1, 3, 5, 7], 2) == 1",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"apple\") == True",
        "num_ids": 326,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    '''\n    Calculates the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1)*geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1.0",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.log10(math.factorial(n*2))) + 1",
        "test": "assert find_Index(1) == 1",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)-1):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "test": "assert tuple_to_dict(('apple', 'banana', 'orange')) == {'apple': 'banana', 'banana': 'orange'}",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    return len(set(s)) == 1",
        "test": "assert all_Characters_Same(\"a\") == True",
        "num_ids": 227,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side * 3) / 2\n    \n    # Calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(s * (s - side) * (s - side) * (s - side))\n    \n    return area",
        "test": "assert area_tetrahedron(4) == 12.0",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list to the right direction by m items.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    else:\n        return list[n-m:] + list[:n-m]",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none((1,2,3)) == False",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result",
        "test": "assert divisible_by_digits(100, 1000) == [(i, j) for i in range(100, 1000) for j in range(100, 1000) if i % 10 == 0 and j % 10 == 0 and i // 100 == j // 100 and i // 10 % 10 == j // 10 % 10 and i % 100 == j % 100]",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * a / 360 * math.pi",
        "test": "assert sector_area(6,360)==math.pi*36, \"The area of the whole circle is not correct\"",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D table to store lengths of LCS of subsequence X[0...m-1], Y[0...n-1] and Z[0...o-1]\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the LCS table using dynamic programming\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Print the length of LCS of subsequence X[0...m-1], Y[0...n-1] and Z[0...o-1]\n    print(\"Length of LCS is \", L[m][n][o])\n\n    # To store the LCS of subsequence X[0...m-1], Y[0...n-1] and Z[0...o-1]\n    lcs = [\"\"] * (L[m][n][o]+1)\n    lcs[L[m][n][o]] = \"\"\n\n    # Find the LCS of subsequence X[0...m-1], Y[0...n-1] and Z[0...o-1]\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs[L[i][j][k]] = X[i-1] + lcs[L[i][j][k]]\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Print the LCS of subsequence X[0...m-1], Y[0...n-1] and Z[0...o-1]\n    print(\"LCS is \", \"\".join(lcs[1:]))",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GXTXAYB\") == \"GTAB\" # test case 2",
        "num_ids": 1918,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<=[A-Z])[A-Z](?=[a-z])')\n    return pattern.sub(' ', str1)",
        "test": "assert capital_words_spaces('The Quick Brown Fox Jumps Over The Lazy Dog') == 'The Quick Brown Fox Jumps Over The Lazy Dog'",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str = sorted(nums_str, key=lambda x: [int(c) for c in x.split()])\n    return nums_str",
        "test": "assert sort_numeric_strings(['10', '2', '3', '4', '5']) == ['2', '3', '4', '5', '10']",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += test_tup\n    return test_list",
        "test": "assert add_tuple([1, 2, 3], (4, 5)) == [1, 2, 3, 4, 5]",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function takes an array and an index as input.\n    It returns True if the array represents a min heap,\n    and False otherwise.\n    '''\n\n    left_child_index = 2*i + 1\n    right_child_index = 2*i + 2\n    smallest_index = i\n\n    # If left child exists and is greater than root\n    if left_child_index < len(arr) and arr[left_child_index] < arr[smallest_index]:\n        smallest_index = left_child_index\n\n    # If right child exists and is greater than root\n    if right_child_index < len(arr) and arr[right_child_index] < arr[smallest_index]:\n        smallest_index = right_child_index\n\n    # If smallest index is not root\n    if smallest_index!= i:\n\n        # Swap the root with the smallest child\n        arr[i], arr[smallest_index] = arr[smallest_index], arr[i]\n\n        # Recursively check for the min heap property\n        check_min_heap_helper(arr, smallest_index)\n\n    # If smallest index is root, return True\n    else:\n        return True",
        "test": "assert check_min_heap_helper([4, 2, 1, 3], 1) == True",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2) ",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and returns the minimum k tuples based on the first element of each tuple.\n    '''\n    # Sort the list of tuples based on the first element of each tuple\n    test_list = sorted(test_list, key=lambda x: x[0])\n\n    # Return the first k tuples from the sorted list\n    return test_list[:K]",
        "test": "assert min_k([(1,2), (3,4), (5,6), (7,8), (9,10)], 3) == [(1,2), (3,4), (5,6)]",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([1,2,3], [2,3,4], [3,4,5]) == [3]",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second smallest number\n    return numbers[1]",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"abba\") == True",
        "num_ids": 234,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n                \n    return count",
        "test": "assert count_reverse_pairs([\"abcd\", \"bacd\", \"abcd\", \"bcda\", \"bcad\", \"cbda\", \"dbca\"]) == 7 # test case 2",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = []\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            sublist = tuple(list1[i:j+1])\n            if sublist not in unique_list:\n                unique_list.append(sublist)\n                count_dict[sublist] = list1.count(sublist)\n    return count_dict",
        "test": "assert unique_sublists([1, 2, 3, 2, 1]) == {(1, 2): 2, (2, 3): 1}",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        if abs(float_num - round(float_num, 2)) <= 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "test": "assert is_decimal(\"123.45\") == True",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1,2,3,4,4]) == False",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return \"Invalid month number. Please enter a number between 1 and 12.\"",
        "test": "assert check_monthnumber_number(2) == True # February has 28 or 29 days based on leap years",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([4, 2, 1, 3], 4) == 1",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr('hello world') == 0 # should pass",
        "num_ids": 254,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    \n    count = 2\n    num = 3\n    while count < n:\n        num += 2\n        for i in range(3, int(math.sqrt(num))+1, 2):\n            if num % i == 0:\n                break\n        else:\n            count += 1\n            \n    return num",
        "test": "assert is_polite(1) == 2",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers as input and returns the number of pairs whose sum is equal to'sum'.\n    \"\"\"\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 6) == 2",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff = list(set(li1) - set(li2))\n    return diff",
        "test": "assert Diff([1,2,3],[1,2,3]) == [], \"Diff([1,2,3],[1,2,3]) should return []\"",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function finds the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "test": "assert odd_num_sum(10) == 2152205, \"Incorrect sum for first 10 odd natural numbers.\"",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. \n    '''\n    # create an empty stack\n    stack = deque()\n    \n    # iterate over each character in the expression\n    for char in exp:\n        # if the character is an opening bracket, push it onto the stack\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        # if the character is a closing bracket, pop the stack and check if the opening bracket matches the closing bracket\n        elif char in [')', '}', ']']:\n            # if the stack is empty, the expression is not balanced\n            if not stack:\n                return False\n            \n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                # if the opening and closing brackets don't match, the expression is not balanced\n                return False\n    \n    # if the stack is empty, the expression is balanced\n    return not stack",
        "test": "assert check_expression(\"(()())\") == True",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()  # split the string into a list of words\n    result = [word for word in words if len(word)!= K]  # remove words with length K\n    return''.join(result)  # join the remaining words into a string with space separator",
        "test": "assert remove_length(\"apple banana cherry apple dog\", 4) == \"apple banana apple dog\"",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    positions = []\n    for match in matches:\n        positions.append((match.start(), match.end()))\n    if positions:\n        return positions\n    else:\n        return None",
        "test": "assert occurance_substring(\"hello world\", \"o\") == [(4, 5), (7, 8)]",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 2, 3, 4, 5]) == False",
        "num_ids": 320,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"python\") == 0",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_of_non_repeated_elements = sum(unique_elements)\n    return sum_of_non_repeated_elements",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 412,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [[k for k, g in group] for key, group in groupby(lst)]\n\nlst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nprint(pack_consecutive_duplicates(lst))",
        "test": "assert pack_consecutive_duplicates([1,2,2,3,4,4,4,5,5,5]) == [[1], [2, 2], [3], [4, 4, 4], [5, 5, 5]]<|im_sep|>",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list and counts the number of unique sublists it contains.\n    It returns a dictionary where every sublist is converted to a tuple and the value is the number of occurrences.\n    \"\"\"\n    # Initialize an empty dictionary\n    sublist_count = {}\n    \n    # Loop through each element of the list\n    for i in range(len(lst)):\n        # Convert the current element to a tuple\n        current_sublist = tuple(lst[i:i+3])\n        # Check if the current tuple already exists in the dictionary\n        if current_sublist in sublist_count:\n            # If it does, increment its count by 1\n            sublist_count[current_sublist] += 1\n        else:\n            # If it doesn't, add the tuple to the dictionary with a count of 1\n            sublist_count[current_sublist] = 1\n    \n    # Return the dictionary\n    return sublist_count",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    sums = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                sums.append((test_list[i], test_list[j]))\n    return sums",
        "test": "assert find_combinations([(1, 2, 3), (4, 5), (6,)], 4) == [((1, 2, 3), (4, 5)), ((1, 2, 3), (6,)), ((4, 5), (6,)), ((1, 2, 3),)]",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nprint(count_divisors(12)) # Output: 6\nprint(count_divisors(28)) # Output: 12",
        "test": "assert count_divisors(10) == 4, \"Test Case 1 Failed\"",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function finds the sum of all odd length subarrays of a given array.\n    \"\"\"\n    n = len(arr)\n    # Initialize sum of all odd length subarrays\n    odd_sum = 0\n    # Traverse each array element\n    for i in range(n):\n        # Traverse the array elements for the current element index\n        for j in range(i, n, 2):\n            # Calculate the length of the current subarray\n            length = j - i + 1\n            # Check if the length of the subarray is odd\n            if length % 2 == 1:\n                # Calculate the sum of the current subarray\n                subarray_sum = sum(arr[i:j+1])\n                # Add the sum to the total sum of odd length subarrays\n                odd_sum += subarray_sum\n    # Return the total sum of odd length subarrays\n    return odd_sum",
        "test": "assert odd_length_sum([2,3,5]) == 9",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    \n    if cmax == cmin:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / diff) % 6\n    elif cmax == g:\n        hue = (b - r) / diff + 2\n    else:\n        hue = (r - g) / diff + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else diff / cmax\n    \n    value = cmax\n    \n    return hue, saturation, value",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0)",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num = i\n        else:\n            odd_num = i\n    return even_num * odd_num",
        "test": "assert mul_even_odd([2,3,4,5,6]) == 30",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Remove parenthesis and split the string\n    parts = test_str.replace('(', '').replace(')', '').split(',')\n    # Convert each part to integer and create a new tuple\n    return tuple(int(part) for part in parts)",
        "test": "assert tuple_str_int('(1,2,3)') == (1,2,3)",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index",
        "test": "assert right_insertion([1, 3, 5, 7], 0) == 0",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = 'ab{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three('accc') == False",
        "num_ids": 249,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple",
        "test": "assert new_tuple([], '') == ()",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every even index contains an even number, otherwise False.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert even_position([1, 3, 5]) == False",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function removes tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            for sub_item in item:\n                result.append(sub_item)\n    return tuple(result)",
        "test": "assert remove_nested(((1, 2), 3)) == (1, 2, 3)",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([]) == 0",
        "num_ids": 199,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid + 1 <= right and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1",
        "test": "assert last([1,2,3,4,5],6) == -1",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_starta_endb(\"hello world\") == None, \"Incorrect output for 'hello world'\"",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum",
        "test": "assert sum_odd(2) == 1",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of the array elements.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total",
        "test": "assert _sum([1,2,3]) == 6",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def left_rotate(n, d):\n    # Convert n and d to binary strings\n    n = bin(n)[2:].zfill(32)\n    d = bin(d)[2:].zfill(5)\n    # Rotate left d bits\n    rotated_n = n[d:] + n[:d]\n    # Convert rotated_n back to decimal\n    return int(rotated_n, 2)",
        "test": "assert left_rotate(11101110, 2) == 111010110000",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces(\"This is a    test string\") == \"Thisisateststring\"",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    return count",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 327,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] < arr[right]:\n            right = mid - 1\n        elif arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right -= 1\n    \n    return right + 1",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return math.sqrt(n) == int(math.sqrt(n))",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list as input and returns True if the product of all the numbers in the list is even, False otherwise.\n    '''\n    \n    product = 1\n    for i in arr:\n        product *= i\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2,4,6,8]) == True",
        "num_ids": 320,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_lists = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_lists = [l]\n        elif sum(l) == max_sum:\n            max_lists.append(l)\n    return max_lists",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [7,8,9]]) == [[7,8,9]]",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
        "test": "assert max_run_uppercase(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\") == 3",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # no odd number found in the list",
        "test": "assert first_odd([1,2,3,4,5]) == 1",
        "num_ids": 275,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K((1,2,3), 2) == True",
        "num_ids": 324,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "test": "assert check_smaller((2, 4, 6), (1, 3, 5)) == True",
        "num_ids": 434,
        "indeed": true
    }
]