[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # initialize an empty set to store the shared elements\n    shared_elements = set()\n    \n    # iterate over the first tuple\n    for elem in test_tup1:\n        # check if the element is present in the second tuple\n        if elem in test_tup2:\n            # if yes, add it to the set of shared elements\n            shared_elements.add(elem)\n    \n    # return the set of shared elements\n    return shared_elements",
        "test": "assert similar_elements({1,2,3}, {2,3,4}) == {2,3}",
        "num_ids": 1983,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "test": "assert is_not_prime(1) == False",
        "num_ids": 1481,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap with the first n elements\n    hq.heapify(nums)\n    largest = hq.nlargest(n, nums)\n    return largest",
        "test": "assert heap_queue_largest([1,1,1,1,1],1) == [1]",
        "num_ids": 2282,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Power_Of_Two(x):\n    # if x is a power of 2, then it has only one bit set to 1\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert find_char_long(\"This is a test\") == ['This', 'test']",
        "num_ids": 1732,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([1, 2, 3]) == [1, 4, 9]",
        "num_ids": 1743,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_Rotations(s):\n    # Check if the string is already a palindrome\n    if s == s[::-1]:\n        return 0\n\n    # Initialize variables\n    n = len(s)\n    count = 0\n\n    # Check for all possible rotations\n    for i in range(n):\n        if s[i:] == s[i:][::-1]:\n            return n - i\n    \n    # If no rotation is found, return -1\n    return -1",
        "test": "assert find_Rotations(\"\") == 0",
        "num_ids": 1841,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_Occ(s, ch):\n    # Check if the character exists in the string\n    if ch in s:\n        # Find the index of the first occurrence of the character\n        first_index = s.index(ch)\n        # Find the index of the last occurrence of the character\n        last_index = s.rindex(ch)\n        # Check if the character is both the first and last occurrence\n        if first_index == last_index:\n            # Remove the character from the string\n            s = s.replace(ch, '', 1)\n        else:\n            # Remove the first occurrence of the character from the string\n            s = s[:first_index] + s[first_index+1:]\n            # Remove the last occurrence of the character from the string\n            s = s[:last_index-1] + s[last_index:]\n    return s",
        "test": "assert remove_Occ(\"hello\",\"l\")!=\"helo\"",
        "num_ids": 2000,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M_sorted = sorted(M, key=lambda x: sum(x))\n    return M_sorted",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 3803,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth and height of a triangular prism as inputs and returns its volume.\n    \"\"\"\n    return 0.5 * l * b * h",
        "test": "assert find_Volume(0,5,7) == 0",
        "num_ids": 1171,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    This function takes a string input and returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    \"\"\"\n    pattern = r\"(?i)[a-z]+_[a-z]+\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 999,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 26,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the second string to a set for faster lookup\n    remove_set = set(remove_chars)\n    # Create an empty list to store the filtered characters\n    filtered_list = []\n    # Iterate over the characters in the first string\n    for char in string:\n        # If the character is not in the set of characters to remove, add it to the filtered list\n        if char not in remove_set:\n            filtered_list.append(char)\n    # Convert the filtered list to a string and return it\n    return ''.join(filtered_list)",
        "test": "assert str_to_list(\"hello world\", \"xyz\") == \"hello world\"",
        "num_ids": 2108,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty dictionary to store the frequency of each element in the array\n    freq_dict = {}\n\n    # loop through each element in the array\n    for num in arraynums:\n        # check if the element already exists in the dictionary\n        if num in freq_dict:\n            # if it does, increment its frequency by 1\n            freq_dict[num] += 1\n        else:\n            # if it doesn't, add it to the dictionary with a frequency of 1\n            freq_dict[num] = 1\n\n    # loop through the dictionary and check if any frequency is greater than 1\n    for freq in freq_dict.values():\n        if freq > 1:\n            # if there is a frequency greater than 1, return True\n            return True\n\n    # if no frequency is greater than 1, return False\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 1811,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is a woodball, False otherwise.\n    A number is considered to be a woodball if it is divisible by 4 and not divisible by 10.\n    \"\"\"\n    if x % 4 == 0 and x % 10!= 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(21) == False ",
        "num_ids": 1517,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it\n    reverse_num = int(str(num)[::-1])\n    \n    # Check if the number is one less than twice the reverse\n    if num == reverse_num + 1:\n        return True\n    else:\n        return False",
        "test": "assert rev(123) == False",
        "num_ids": 1519,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort() # sort the list in ascending order\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] * (10 ** i) # form the number by multiplying each digit with 10 raised to the power of its position in the list\n    return max_num",
        "test": "assert find_Max_Num([0, 0, 0, 0, 0]) == 0",
        "num_ids": 2074,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Args:\n        x: an integer\n        y: an integer\n\n    Returns:\n        True if x and y have opposite sign, False otherwise\n    \"\"\"\n    return (x < 0)!= (y < 0)",
        "test": "assert opposite_Signs(0,0) == False",
        "num_ids": 1220,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    while True:\n        num = i * (2*i - 1)\n        if num >= n:\n            return num\n        i += 1",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1490,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count += 1\n    return count",
        "test": "assert count_Substrings(\"123\") == 1 # example",
        "num_ids": 2025,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest",
        "test": "assert smallest_num([5,2,3,7,1]) == 1",
        "num_ids": 1464,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i][0] - test_list[j][0]) > max_diff:\n                max_diff = abs(test_list[i][0] - test_list[j][0])\n            if abs(test_list[i][1] - test_list[j][1]) > max_diff:\n                max_diff = abs(test_list[i][1] - test_list[j][1])\n    \n    return max_diff",
        "test": "assert max_difference([(1,2),(4,5),(7,8)]) == 6 # Test Case 1",
        "num_ids": 2356,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjectmarks",
        "test": "assert subject_marks([(30, 80), (70, 60), (40, 70), (90, 40)]) == [(90, 40), (70, 60), (40, 70), (30, 80)] # 2nd test case",
        "num_ids": 3323,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not isinstance(data_list, list):\n        return data_list\n    \n    total_sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n            \n    return total_sum",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1880,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pos_count(list):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n\n    :param list: The input list\n    :return: The number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10",
        "num_ids": 1503,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bell = [1]\n        for i in range(1, n+1):\n            bell.append(sum(bell))\n        return bell[n]",
        "test": "assert bell_number(1) == 1",
        "num_ids": 1487,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 2:\n        return True\n\n    inc = A[1] > A[0]\n    dec = A[1] < A[0]\n\n    for i in range(2, n):\n        if A[i] == A[i-1]:\n            continue\n\n        if (inc and A[i] < A[i-1]) or (dec and A[i] > A[i-1]):\n            return False\n\n        if A[i] > A[i-1]:\n            inc = True\n            dec = False\n        elif A[i] < A[i-1]:\n            inc = False\n            dec = True\n\n    return True",
        "test": "assert is_Monotonic([1,3,2,4,5]) == False",
        "num_ids": 2090,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks whether the given list contains the given sublist or not.\n\n    :param l: the original list\n    :param s: the sublist to be checked\n    :return: True if the original list contains the sublist, False otherwise\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "test": "assert is_sublist([1, 2, 3], [2, 3]), \"is_sublist([1, 2, 3], [2, 3]) should be True\"",
        "num_ids": 2208,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True",
        "test": "assert find_equal_tuple([(1,2,3), (4,5,6), (7,8,9)]) == True",
        "num_ids": 1820,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Implementation of the Comb Sort algorithm in Python.\n    \"\"\"\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums",
        "test": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2622,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_square(num):\n    \"\"\"\n    Check if a given number is a perfect square or not.\n    \"\"\"\n    root = int(num**0.5)\n    return root**2 == num\n\ndef dif_Square(n):\n    \"\"\"\n    Check if a given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        for i in range(int(n**0.5)+1):\n            if is_square(n-i**2) and is_square(i):\n                return True\n        return False",
        "test": "assert dif_Square(750) == False",
        "num_ids": 2008,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n\n    :param colors: A list of colors.\n    :param patterns: A list of patterns to follow.\n    :return: True if the list follows the sequence, False otherwise.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == \"R\":\n            if colors[i]!= \"Red\":\n                return False\n        elif patterns[i] == \"G\":\n            if colors[i]!= \"Green\":\n                return False\n        elif patterns[i] == \"B\":\n            if colors[i]!= \"Blue\":\n                return False\n    return True",
        "test": "assert is_samepatterns(['red', 'green', 'blue'], ['red', 'green', 'blue']) == True",
        "num_ids": 2410,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and returns all the tuples that have all elements divisible by K.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(2,3,4), (5,6,7), (8,9,10)], 2) == []",
        "num_ids": 2918,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(5) == False",
        "num_ids": 984,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert word_len('python') == True",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n+1) * (n+2)) // 6",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 1180,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere\n    with a given radius.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume",
        "test": "assert volume_sphere(1) == 4/3 * math.pi",
        "num_ids": 1414,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr(sum_ascii % 26 + ord('a'))",
        "test": "assert get_Char(\"defg\") == \"q\"",
        "num_ids": 1531,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]",
        "test": "assert sequence(1) == 1",
        "num_ids": 1477,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4*math.pi, 'Surface area of a sphere should be 4*pi when radius is 1'",
        "num_ids": 1462,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 1\n    hex_num = 1\n    while count < n:\n        hex_num += 6 * count\n        count += 1\n    return hex_num",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 1408,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merges three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({'a':1}, {'b':2}, {'c':3}) == {'a':1, 'b':2, 'c':3} # single dictionary",
        "num_ids": 2992,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for elem in lst:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq",
        "test": "assert freq_count([1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 2512,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i < N:\n            return i",
        "test": "assert closest_num(2) == 1",
        "num_ids": 1211,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n\n    Args:\n    list1: a list of strings\n\n    Returns:\n    The length of the longest word in the list.\n    \"\"\"\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length",
        "test": "assert len_log([\"hello\", \"world\", \"python\"]) == 6",
        "num_ids": 1522,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:].startswith(sub_str):\n            return True\n    return False",
        "test": "assert find_substring(\"hello world\", \"worlds\") == False",
        "num_ids": 1311,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 28,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether a given number n is undulating or not.\n\n    Args:\n        n (int): a positive integer\n\n    Returns:\n        bool: True if n is undulating, False otherwise\n    \"\"\"\n    # Base case: if n is 1, it is not undulating\n    if n == 1:\n        return False\n    \n    # Check if the number is divisible by 2, 3, or 5 (i.e., has a factor of 2, 3, or 5)\n    has_factor = False\n    for i in [2, 3, 5]:\n        if n % i == 0:\n            has_factor = True\n            break\n    \n    # If the number has a factor of 2, 3, or 5, it is undulating\n    if has_factor:\n        return True\n    \n    # Recursively check if the number is divisible by 2, 3, or 5 after subtracting 1, 2, or 3, respectively\n    return is_undulating(n-1) or is_undulating(n-2) or is_undulating(n-3)",
        "test": "assert is_undulating(2) == True # 2 is a simple example of an undulating number",
        "num_ids": 1979,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "test": "assert power(2,0) == 1",
        "num_ids": 877,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "test": "assert index_minimum([(1, 2), (3, 1), (5, 8), (4, 7), (2, 3)]) == 3",
        "num_ids": 2010,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "test": "assert Find_Min_Length([[1,2,3], [4,5,6], [7,8,9]]) == 3",
        "num_ids": 1999,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(10) == 4",
        "num_ids": 1108,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for element in flatten_list(list1):\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        else:\n            freq_dict[element] += 1\n    return freq_dict\n\ndef flatten_list(list1):\n    '''\n    Helper function to flatten a list of lists.\n    '''\n    result = []\n    for sublist in list1:\n        if type(sublist) == list:\n            result += flatten_list(sublist)\n        else:\n            result.append(sublist)\n    return result",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 3171,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)",
        "test": "assert multiply_num([2, 4, 6]) == 48/3",
        "num_ids": 1341,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def decimal_to_binary(n): \n    '''\n    This function takes a decimal number as input and returns its binary equivalent as a string with no leading zeros.\n    '''\n    binary = bin(n)[2:]  # using bin() function to convert decimal to binary\n    return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 1449,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num",
        "test": "assert next_smallest_palindrome(1) == 2",
        "num_ids": 2776,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 1907,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function takes a snake case string as input and converts it to camel case string.\n    \"\"\"\n    words = word.split(\"_\")\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel(\"snake\") == \"snake\"",
        "num_ids": 1519,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def eulerian_num(n, m): \n    '''\n    This function returns the Eulerian number a(n, m).\n    '''\n\n    # Check if n is even or odd\n    if n % 2 == 0:\n        # n is even\n        a = (m*(m+1)) // 2\n        return a\n    else:\n        # n is odd\n        a = m*m\n        return a",
        "test": "assert eulerian_num(1,1) == 1",
        "num_ids": 1603,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "test": "assert sort_sublists([['c', 'b', 'a'], ['d', 'e'], ['f']]) == [['a', 'b', 'c'], ['d', 'e'], ['f']]",
        "num_ids": 3014,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count(lst):\n    \"\"\"\n    Counts the number of True values in the given list.\n    \"\"\"\n    count = 0\n    for value in lst:\n        if value:\n            count += 1\n    return count",
        "test": "assert count([True, True, False]) == 2",
        "num_ids": 1102,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function takes a list and a tuple as input and returns a new tuple with the elements of the list appended to the tuple.\n    '''\n    return tuple(test_list + list(test_tup))",
        "test": "assert add_lists([], ()) == ()",
        "num_ids": 1585,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 or num2 or num3:\n        if num1 and num2 and num3:\n            if num1[0] < num2[0] and num1[0] < num3[0]:\n                merged_list.append(num1[0])\n                heapq.heappop(num1)\n            elif num2[0] < num1[0] and num2[0] < num3[0]:\n                merged_list.append(num2[0])\n                heapq.heappop(num2)\n            else:\n                merged_list.append(num3[0])\n                heapq.heappop(num3)\n        elif num1 and num2:\n            if num1[0] < num2[0]:\n                merged_list.append(num1[0])\n                heapq.heappop(num1)\n            else:\n                merged_list.append(num2[0])\n                heapq.heappop(num2)\n        elif num1 and num3:\n            if num1[0] < num3[0]:\n                merged_list.append(num1[0])\n                heapq.heappop(num1)\n            else:\n                merged_list.append(num3[0])\n                heapq.heappop(num3)\n        elif num2 and num3:\n            if num2[0] < num3[0]:\n                merged_list.append(num2[0])\n                heapq.heappop(num2)\n            else:\n                merged_list.append(num3[0])\n                heapq.heappop(num3)\n        elif num1:\n            merged_list.append(num1[0])\n            heapq.heappop(num1)\n        elif num2:\n            merged_list.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            merged_list.append(num3[0])\n            heapq.heappop(num3)\n        \n    return merged_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 4100,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Returns the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the input string to a list of integers\n    s = [int(d) for d in s]\n    \n    # Rotate the list of integers n times\n    s = s[n:] + s[:n]\n    \n    # Count the number of odd numbers\n    count = sum(1 for d in s if d % 2 == 1)\n    \n    return count",
        "test": "assert odd_Equivalent('0000',4) == 0",
        "num_ids": 1729,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in result and nestedlist[i][j] in nestedlist[i+1:]:\n                result.append(nestedlist[i][j])\n    return result",
        "test": "assert common_in_nested_lists([]) == []",
        "num_ids": 2630,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"42\") == True",
        "num_ids": 1023,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 33,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True",
        "test": "assert empty_dit([{}]) == True",
        "num_ids": 1286,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for i in nums:\n        res = res * 10 + i\n    return res",
        "test": "assert tuple_to_int((10,)) == 10",
        "num_ids": 1366,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 31,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list",
        "test": "assert list_to_float([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]",
        "num_ids": 3433,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == ['hello', 'world']",
        "num_ids": 1284,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def search(arr):\n    # initialize a dictionary to keep track of the frequency of each element\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    # iterate over the dictionary to find the element that appears only once\n    for i in freq:\n        if freq[i] == 1:\n            return i\n    # if no such element is found, return None\n    return None",
        "test": "assert search([1,2,2,3,3,4,4,5,5]) == 1",
        "num_ids": 2747,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(0, 4), (4, 0), (0, -4)]) == 0",
        "num_ids": 2510,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit+1):\n        sum += i\n    return sum",
        "test": "assert amicable_numbers_sum(200) == 6370",
        "num_ids": 2734,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)\n\nprint(angle_complex(2+3j, 4+5j))",
        "test": "assert angle_complex(1,0) == 0",
        "num_ids": 1514,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_length = 0\n    \n    # iterate over all possible sub-strings\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # compute the length of the current sub-string\n            length = j - i\n            \n            # count the number of 0s and 1s in the current sub-string\n            num_zeros = string[i:j].count('0')\n            num_ones = length - num_zeros\n            \n            # update the maximum length if necessary\n            max_length = max(max_length, num_zeros - num_ones)\n    \n    return max_length",
        "test": "assert find_length('00001111') == 4",
        "num_ids": 2777,
        "indeed": true
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor_sum = 0\n    # loop through all the numbers from 1 to the smaller number\n    for i in range(1, min(a, b)+1):\n        # check if both numbers have a common divisor\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n    return divisor_sum",
        "test": "assert sum(12,24) == 28",
        "num_ids": 2202,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply_int(x: int, y: int) -> int:\n    \"\"\"\n    This function multiplies two integers together and returns the result.\n\n    Args:\n    x: An integer\n    y: An integer\n\n    Returns:\n    An integer that is the product of x and y.\n    \"\"\"\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 924,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list",
        "test": "assert long_words(5, \"hello world\") == []",
        "num_ids": 1888,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Get the number of rows and columns in the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(rows)) for i in range(cols)]\n\n    # Check if the sum of each row and column is equal to the sum of the magic constant\n    magic_constant = (rows * (rows * rows + 1)) // 2\n    return row_sums == col_sums == [magic_constant] * cols",
        "test": "assert magic_square_test([[1, 2, 3], [8, 9, 4], [7, 6, 5]]) == False",
        "num_ids": 4528,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    return max_item",
        "test": "assert max_occurrences([1,2,3,2,1,4,3,2,1]) == 1",
        "num_ids": 2013,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_in_str = [char for char in str1 if char.lower() in vowels]\n    vowels_in_str.reverse()\n    vowels_not_in_str = [char for char in str1 if char.lower() not in vowels]\n    reversed_str = ''.join(vowels_in_str) + ''.join(vowels_not_in_str)\n    return reversed_str",
        "test": "assert reverse_vowels(\"\") == \"\"",
        "num_ids": 2085,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 28,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def tup_string(tup1):\n    '''\n    Convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string((1,2,3,4)) == '(1, 2, 3, 4)'",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1656,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 34,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = 1\n    count = 0\n    while count < n:\n        hex_num = i*(2*i - 1)\n        if count == n-1:\n            return hex_num\n        i += 1\n        count += 1",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 1162,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    \n    return zero_count / len(nums)\n\nnums = array('i', [1, 2, 3, 0, 4, 0, 5])\nratio = zero_count(nums)\nprint(\"Ratio of zeroes to non-zeroes:\", ratio)",
        "test": "assert zero_count(array('i', [1, 2, 3, 4, 5])) == 0.0",
        "num_ids": 2315,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 32,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer n as input and checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Convert n to binary and split it into a list of digits.\n    binary_list = list(bin(n)[2:])\n\n    # Initialize a variable to store the sum of powers of 2.\n    sum_of_powers_of_two = 0\n\n    # Loop through each digit in the binary list and calculate the corresponding power of 2 and add it to the sum_of_powers_of_two variable.\n    for digit in binary_list:\n        if digit == '1':\n            sum_of_powers_of_two += 2 ** (len(binary_list) - binary_list.index(digit) - 1)\n\n    # Check if the sum of powers of 2 is equal to n.\n    if sum_of_powers_of_two == n:\n        return True\n    else:\n        return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 2393,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 1560,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 24,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty set to store the flattened numbers\n    flattened_nums = set()\n    \n    # Loop through the list of lists\n    for sub_list in test_list:\n        # Loop through the sub-list and add each number to the set of flattened numbers\n        for num in sub_list:\n            flattened_nums.add(num)\n    \n    # Return the set of flattened numbers\n    return flattened_nums",
        "test": "assert extract_singly([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}",
        "num_ids": 2783,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    # One pass to sort elements from 0 to n-1\n    for i in range(n):\n        # Find index of the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Move the maximum element to the beginning of the list\n        nums = [nums[max_index]] + nums[:max_index] + nums[max_index+1:]\n    return nums",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 2978,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n\n    :param list1: the first list\n    :param list2: the second list\n    :param list3: the third list\n    :return: the number of identical items in the same position\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[2,3,4],[3,4,5]) == 0",
        "num_ids": 2068,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "test": "assert find_lists((1,2,[3,4],[5,6],7)) == 2",
        "num_ids": 1436,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(arr[i] - arr[j]) for i in range(len(arr)) for j in range(i+1, len(arr)))",
        "test": "assert max_Abs_Diff([0,0,0,0,0]) == 0",
        "num_ids": 2051,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if (a*x)%b == n:\n            y = (n - a*x)//b\n            return (x, y)\n    return None",
        "test": "assert find_solution(1, 1, 0) == (0, 0)",
        "num_ids": 1721,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and removes all elements from list1 that are present in list2.\n    '''\n    # create a new list to store the elements that are not in list2\n    result = []\n    \n    # loop through each element in list1\n    for element in list1:\n        # if the element is not in list2, append it to the result list\n        if element not in list2:\n            result.append(element)\n    \n    # return the result list\n    return result",
        "test": "assert remove_elements([1,2,3,4,5],[3,5]) == [1,2,4]",
        "num_ids": 1870,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total",
        "test": "assert sum_series(0) == 0",
        "num_ids": 2110,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.5 * s * l) / tan(pi / s)",
        "test": "assert area_polygon(6, 5) == 25.98076211353316",
        "num_ids": 1687,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 27,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i!= n//i:\n                return True\n            elif i == n//i and i!= 1:\n                return True\n    return False",
        "test": "assert div_sum(28) == True",
        "num_ids": 1781,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a list of characters in the English alphabet in upper case\n    alphabet = [chr(i) for i in range(65,91)]\n    \n    # convert the string to lower case\n    str1 = str1.lower()\n    \n    # count the number of characters in the string that occur at the same position in the alphabet list\n    count = 0\n    for char in str1:\n        if char in alphabet:\n            count += 1\n            \n    return count",
        "test": "assert count_char_position(\"\") == 0 # an empty string has no characters at the same position as in the English alphabet",
        "num_ids": 4290,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([2, 4, 6, 8, 10]) == 0 # 2^4 = 6, 4^6 = 2, 6^8 = 0, 8^10 = 0. So no pair of integers in the list xor to an even number.",
        "num_ids": 2113,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2",
        "test": "assert next_power_of_2(3) == 4",
        "num_ids": 1184,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,2,1,2,3,4,5], 2) == 3",
        "num_ids": 1813,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9",
        "num_ids": 2216,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "test": "assert perimeter_pentagon(10) == 50  # test case 2",
        "num_ids": 1235,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.lower().count('std')\n    return count",
        "test": "assert count_occurance('The quick brown fox jumps over the lazy dog. std std std') == 3",
        "num_ids": 1379,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "test": "assert check_type((1,2,3,4)) == True",
        "num_ids": 1523,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        return is_majority(arr, n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n-n//2-1, x)",
        "test": "assert is_majority([1, 2, 3, 4, 4, 4, 5, 5, 5, 5], 10, 6) == False",
        "num_ids": 3305,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 1106,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "test": "assert odd_values_string(\"hello\") == \"hlo\"",
        "num_ids": 1308,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(3,5,2) == 2",
        "num_ids": 1457,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # initialize a mask to the right shift of 1 and subtract 1\n    mask = (1 << r) - (1 << l)\n\n    # check if all the bits in the range are unset or not\n    if (n & mask) == 0:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b111111111,1,16) == False # 0b111111111 -> all bits are set in the range 1 to 16",
        "num_ids": 2731,
        "indeed": true
    },
    {
        "number": 229,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize two pointers for negative and positive elements respectively\n    neg_ptr = 0\n    pos_ptr = n\n    \n    # Traverse the array and swap negative and positive elements at their positions\n    for i in range(n, len(arr)):\n        if arr[i] >= 0:\n            arr[pos_ptr] = arr[i]\n            pos_ptr += 1\n        else:\n            arr[neg_ptr] = arr[i]\n            neg_ptr += 1\n            \n    return arr[:n]",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 3583,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces blank spaces in the string with the character.\n    '''\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank('hello world', '-') == 'hello-world'",
        "num_ids": 1322,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 38,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "test": "assert larg_nnum([1,3,5,7,9,2,4,6,8],1) == [9]",
        "num_ids": 2466,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    This function takes in the radius of the cylinder and its height as parameters\n    and returns the lateral surface area of the cylinder.\n    '''\n    # Calculate the lateral surface area\n    lateral_area = 2 * math.pi * r * h\n    return lateral_area",
        "test": "assert lateralsuface_cylinder(0,5) == 0",
        "num_ids": 2246,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "test": "assert volume_cube(2) == 8",
        "num_ids": 920,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 25,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function sets all even bits of a given number to 1 and returns the modified number.\n    '''\n    # convert the number to binary string\n    binary_string = bin(n)[2:]\n    # initialize an empty string to store the modified binary string\n    modified_binary_string = \"\"\n    # iterate through the binary string and set the even bits to 1\n    for bit in binary_string:\n        if int(bit) == 0:\n            modified_binary_string += \"0\"\n        else:\n            modified_binary_string += \"1\"\n    # convert the modified binary string back to an integer and return it\n    modified_number = int(modified_binary_string, 2)\n    return modified_number",
        "test": "assert even_bit_set_number(2) == 2",
        "num_ids": 2194,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict",
        "test": "assert check_occurences([(1,2),(2,3),(2,3),(3,4),(4,5)]) == {(1, 2): 1, (2, 3): 2, (3, 4): 1, (4, 5): 1}",
        "num_ids": 3292,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 1447,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the first sequence as [1]\n    seq = [1]\n    # Initialize the count of sequences to 1\n    count = 1\n    # Loop through the remaining length of the sequence\n    for i in range(n-1):\n        # Initialize the current sequence as the previous sequence\n        curr_seq = seq\n        # Initialize the next element to be 2 times the previous element plus 1\n        next_elem = curr_seq[-1] * 2 + 1\n        # Initialize a flag to keep track of whether the next element is valid\n        valid_next_elem = True\n        # Loop through the current sequence to check if the next element is valid\n        for elem in curr_seq:\n            if elem * 2 + 1 > m or elem * 2 + 1 == next_elem:\n                valid_next_elem = False\n                break\n        # If the next element is valid, append it to the sequence and increment the count of sequences\n        if valid_next_elem:\n            seq.append(next_elem)\n            count += 1\n    return count",
        "test": "assert get_total_number_of_sequences(1, 1) == 1",
        "num_ids": 2519,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes two lists as input and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if list2 is empty\n    if len(list2) == 0:\n        print(\"List 2 is empty.\")\n        return list1\n    \n    # check if list1 is empty\n    if len(list1) == 0:\n        print(\"List 1 is empty.\")\n        return list2\n    \n    # replace the last element of list1 with the elements of list2\n    list1[-1] = list2\n    \n    return list1",
        "test": "assert replace_list([], [1,2,3]) == [1,2,3] # test case 4: replace an empty list with a list of length 3",
        "num_ids": 1578,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"hello world\") == 11",
        "num_ids": 1021,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 37,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer N as an argument and returns the next perfect square greater than N.\n    '''\n    if N <= 0:\n        return 1\n    sqrt_N = int(math.sqrt(N))\n    next_square = sqrt_N + 1\n    while True:\n        if next_square**2 - 1 > N:\n            return next_square**2\n        next_square += 1",
        "test": "assert next_Perfect_Square(10) == 16",
        "num_ids": 1567,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # Initialize first row as max values from left\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    # Fill rest of the matrix in bottom-up manner\n    for i in range(n-2,-1,-1):\n        for j in range(i+1, n):\n            dp[i][j] = max(arr[i] + dp[i+1][j], arr[j] + dp[i][j-1])\n\n    return dp[0][n-1]",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 3248,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute square root of a number using the Babylonian method.\n    \"\"\"\n    # Set the initial guess to be the number itself\n    guess = number\n    \n    # Set the number of iterations to be the square root of the number\n    iterations = number ** 0.5\n    \n    # Loop through the number of iterations\n    for i in range(int(iterations)):\n        # Use the babylonian formula to update the guess\n        guess = (guess + number / guess) / 2\n    \n    # Return the computed square root\n    return guess",
        "test": "assert babylonian_squareroot(10000) == 100.0",
        "num_ids": 2009,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if str[i] == str[j] and l == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 3054,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "test": "assert harmonic_sum(1) == 1.0",
        "num_ids": 1521,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 35,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))",
        "test": "assert intersection_array([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]",
        "num_ids": 1823,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 2, 1, 4, 1), 2) == 2",
        "num_ids": 1714,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element as input, and returns a new list with the element inserted before each element in the original list.\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(elem)\n        new_lst.append(lst[i])\n    return new_lst",
        "test": "assert insert_element([],'a') == []",
        "num_ids": 1906,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result",
        "test": "assert convert(7-8j) == (cmath.polar(7-8j)[0], cmath.polar(7-8j)[1])",
        "num_ids": 2072,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_integer(lst):\n    '''\n    Returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1405,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "test": "assert combinations_colors(['a', 'b', 'c'], 2) == [('a', 'a'), ('a', 'b'), ('a', 'c'), ('b', 'b'), ('b', 'c'), ('c', 'c')]",
        "num_ids": 4569,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Main function to count the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 1949,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if sum(test_tup1) > sum(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2",
        "test": "assert maximize_elements((2, 3, 4), (5, 6, 7)) == (5, 6, 7)",
        "num_ids": 2487,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman-shanks-williams prime number.\n    \"\"\"\n    count = 0\n    num = 2\n    \n    while count < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n    \n    return num - 1",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 2365,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i], )\n    return result_tup",
        "test": "assert division_elements((2, 4, 6), (1, 2, 3)) == (2, 2.0, 2.0)",
        "num_ids": 2412,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5]), \"Test Case 1: Failed\"",
        "num_ids": 2503,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    \n    return dog_years",
        "test": "assert dog_age(0) == 0, \"Error: dog_age(0) should be 0\"",
        "num_ids": 1643,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 2791,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "test": "assert lateralsurface_cube(1) == 6 ",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1446,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 35,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 12\n    elif n == 4:\n        return 22\n    elif n == 5:\n        return 35\n    elif n == 6:\n        return 51\n    elif n == 7:\n        return 70\n    elif n == 8:\n        return 92\n    elif n == 9:\n        return 117\n    elif n == 10:\n        return 145",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 1463,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function returns the sum of even numbers at even positions of a list.\n\n    Parameters:\n    arr (list): A list of integers\n\n    Returns:\n    int: Sum of even numbers at even positions of the list.\n\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0",
        "num_ids": 2177,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def even_Power_Sum(n):\n    # Initialize a variable to store the sum of the even numbers raised to the fifth power\n    sum = 0\n    \n    # Loop through the first n even numbers\n    for i in range(2, n*2, 2):\n        # Raise each even number to the fifth power and add it to the sum\n        sum += i**5\n        \n    # Return the sum of the even numbers raised to the fifth power\n    return sum",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 1729,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list",
        "test": "assert rear_extract([(1,2), (3,4), (5,6)]) == [2, 4, 6]",
        "num_ids": 1998,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "test": "assert substract_elements((10,20,30),(2,4,6)) == (8,16,24)",
        "num_ids": 2267,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        sum = 0\n        for i in range(0, n, 2):\n            sum += math.comb(n, i)\n        return sum",
        "test": "assert even_binomial_Coeff_Sum(3) == 4",
        "num_ids": 1680,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume",
        "test": "assert volume_cylinder(0,3) == 0, \"Radius should be greater than zero\"",
        "num_ids": 1612,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def dict_filter(dict,n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict",
        "test": "assert dict_filter({1: 2, 3: 4, 5: 6}, 3) == {3: 4, 5: 6}",
        "num_ids": 2165,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count",
        "test": "assert count_first_elements((1,2,2,3,4,5,2)) == 1",
        "num_ids": 1819,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    decagonal = 0\n    while i <= n:\n        decagonal += i\n        i += 1\n    return decagonal",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 2560,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sequential_search(dlist, item):\n    found = False\n    position = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            position = i\n            break\n    \n    return found, position",
        "test": "assert sequential_search([1,2,3,4,5], 3) == (True, 2)",
        "num_ids": 2131,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 1553,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3, -3, -3]",
        "num_ids": 2060,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert the integer to a string\n    n_str = str(n)\n    # create an empty dictionary to store the frequency of each digit\n    freq = {}\n    # loop through each digit in the string and update the frequency dictionary\n    for digit in n_str:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    # loop through the frequency dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > int(digit):\n            return False\n    return True",
        "test": "assert validate(1234) == True",
        "num_ids": 1605,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True",
        "test": "assert check_element([1,1,1,1,1],1) == True",
        "num_ids": 1456,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three(\"abc\") == False",
        "num_ids": 1265,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n\n    # Calculate the sum of the first array\n    max_sum = sum(a)\n\n    # Loop through the remaining arrays\n    for i in range(1, k):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[j]\n            # Update the maximum sum if the current sum is greater than the previous maximum sum\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3], 3, 2) == 6",
        "num_ids": 3079,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n*2, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 1350,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def max_length(lst):\n    \"\"\"\n    Returns the list with maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    max_lst = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_lst = sublist\n    return max_lst",
        "test": "assert max_length([[1,2,3], [4,5], [6,7,8,9]]) == [6,7,8,9]",
        "num_ids": 2821,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for x in range(k+1)] for y in range(n+1)]\n\n    # For a fence with 1 post, there is only one way to paint it\n    for i in range(k+1):\n        dp[1][i] = 1\n\n    # For a fence with 2 posts, there are k ways to paint it, if k>1, otherwise only one way\n    for i in range(2, n+1):\n        for j in range(k+1):\n            if j == 1:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-2][j-1]\n\n    return dp[n][k]",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 2572,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of n and m, rounded down to the nearest integer.\n    \"\"\"\n    if m == 0:\n        return \"Error: Division by zero\"\n    else:\n        return n // m",
        "test": "assert find(4, 2) == 2",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function takes the length of two sides of a right-angled triangle and returns the length of the third side.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 1422,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_val(lst):\n    \"\"\"\n    Returns the maximum value in a heterogeneous list.\n    \"\"\"\n    if not lst:\n        return None\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1575,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "test": "assert sum_div(10) == 18 # 1 + 2 + 5 + 10",
        "num_ids": 1535,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    Inversion count is the number of pairs of elements in the array such that the first element is greater than the second element.\n    \"\"\"\n\n    n = len(arr)\n    inv_count = 0\n\n    # Loop through the array\n    for i in range(n-1):\n        # Loop through the remaining array starting from i+1\n        for j in range(i+1, n):\n            # Check if the current pair of elements is an inversion\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0",
        "num_ids": 3015,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert flatten_list([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1953,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the count of each student\n    count_dict = defaultdict(int)\n\n    # Create a dictionary to store the aggregate of each student\n    aggregate_dict = defaultdict(int)\n\n    # Iterate through the list of tuples and update the count and aggregate dictionaries\n    for student, grade, weight in stdata:\n        count_dict[student] += weight\n        aggregate_dict[student] += weight*grade\n\n    # Find the maximum aggregate from the aggregate dictionary\n    max_aggregate = max(aggregate_dict.values())\n\n    return max_aggregate",
        "test": "assert max_aggregate([(1,2,3),(2,3,4),(3,4,5),(4,5,6),(5,6,7),(6,7,8),(7,8,9)]) == 72",
        "num_ids": 3147,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    \n    for i in range(2**n):\n        binary = bin(i)[2:] # convert decimal to binary\n        if len(binary) < n:\n            binary = '0'*(n-len(binary)) + binary\n        if sum(map(int, binary[:n])) == sum(map(int, binary[-n:])):\n            count += 1\n            \n    return count",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 1986,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 29,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Returns the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    if not d:\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values())",
        "test": "assert dict_depth({'a': 1, 'b': {'c': {'d': 2}}}) == 3",
        "num_ids": 2038,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # First we need to calculate the new index after rotations.\n    new_index = (index + rotations) % len(arr)\n    # Then we need to find the element at the new index.\n    element = arr[new_index]\n    # Finally, we need to return the element.\n    return element",
        "test": "assert find_Element([1, 2, 3, 4, 5],[[1, 5]],0,0) == 1",
        "num_ids": 2647,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p\\w*\\s\\w*')\n    for word in words:\n        if pattern.match(word):\n            return word.split()\n    return None",
        "test": "assert start_withp(['grape', 'kiwi','mango', 'banana']) == None",
        "num_ids": 1939,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Base case: If kth element is smaller than ith element, then it cannot be included in increasing subsequence.\n    if a[k] <= a[index]:\n        return 0\n    \n    # Initialize maximum sum to be the sum of ith element and kth element.\n    max_sum = a[index] + a[k]\n    \n    # Traverse the array from index+1 to n-1.\n    for i in range(index+1, n):\n        # If kth element is smaller than the current element, then it cannot be included in increasing subsequence.\n        if a[k] <= a[i]:\n            break\n        \n        # Compute the sum of increasing subsequence ending at index i and including a[k].\n        temp_sum = max_sum + a[i]\n        \n        # Update the maximum sum if necessary.\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    \n    return max_sum",
        "test": "assert max_sum_increasing_subseq([2, 4, 6, 8, 10], 5, 0, 2) == 12",
        "num_ids": 4290,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 35,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Make a copy of the original tuple\n    newtuplex = deepcopy(tuplex)\n    \n    # Get the slice of the tuple from m to n (exclusive)\n    newtuplex = newtuplex[m:n]\n    \n    # Return the colon of the tuple\n    return newtuplex",
        "test": "assert colon_tuplex((1,2,3,4,5),0,5) == (1,2,3,4,5)",
        "num_ids": 2118,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    result = []\n    for i in range(N):\n        max1 = max(nums1)\n        max2 = max(nums2)\n        result.append(max1 * max2)\n        nums1.remove(max1)\n        nums2.remove(max2)\n    return result",
        "test": "assert large_product([0, 0, 0], [0, 0, 0], 2) == [0, 0]",
        "num_ids": 4092,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2,3) == 3",
        "num_ids": 895,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"\") == ()",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def set_left_most_unset_bit(n):\n    # Find the rightmost 0 bit\n    while (n & 1) == 1:\n        n >>= 1\n    # Set the rightmost 0 bit to 1\n    n |= 1\n    return n",
        "test": "assert set_left_most_unset_bit(0b0000) == 0b0001",
        "num_ids": 1842,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Function to calculate the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(0,4) == 0",
        "num_ids": 1752,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 33,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 1:\n        return n\n    else:\n        power = 1\n        while 2**power <= n:\n            power += 1\n        return 2**(power-1)",
        "test": "assert highest_Power_of_2(3) == 2",
        "num_ids": 1321,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_lucas = 2\n        curr_lucas = 1\n        for i in range(2, n+1):\n            temp = curr_lucas\n            curr_lucas = prev_lucas + curr_lucas\n            prev_lucas = temp\n        return curr_lucas",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 1304,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "test": "assert add_string([\"apple\", \"banana\", \"cherry\"], \"I like {}.\") == [\"I like apple.\", \"I like banana.\", \"I like cherry.\"]",
        "num_ids": 2080,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "test": "assert convert_list_dictionary(['A', 'B', 'C'], ['1', '2', '3'], [True, False, True]) == {'A': {'1': True}, 'B': {'2': False}, 'C': {'3': True}}",
        "num_ids": 2579,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    max_sum = 1\n    for i in range(2, n+1):\n        curr_sum = max((get_max_sum(i//2) + get_max_sum(i//3) + get_max_sum(i//4) + get_max_sum(i//5)), i)\n        max_sum = max(max_sum, curr_sum)\n        \n    return max_sum",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 2214,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)",
        "test": "assert check_distinct((1,2,3)) == True",
        "num_ids": 1149,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n\n    # Iterate over each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate over each character in the string again to find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None",
        "test": "assert first_non_repeating_character(\"hello world\") == \"h\"",
        "num_ids": 2111,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if len(string) == 1:\n        return True\n    pattern = re.compile(r\"^([a-z]).*\\1$\")\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_char('abca') == True",
        "num_ids": 1221,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Returns the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    # find the middle index\n    middle_index = len(sorted_nums) // 2\n    # if the length of the list is even, take the average of the two middle numbers\n    if len(sorted_nums) % 2 == 0:\n        return (sorted_nums[middle_index - 1] + sorted_nums[middle_index]) / 2\n    # if the length of the list is odd, return the middle number\n    else:\n        return sorted_nums[middle_index]",
        "test": "assert median_numbers(-1,0,1) == 0",
        "num_ids": 1754,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 2036,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "test": "assert bitwise_xor((1, 2, 3), (4, 5, 6)) == (5, 7, 5)",
        "num_ids": 2488,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as an input and returns the number of unique tuples in the list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    return len(freq_dict)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 2362,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing index-wise sum of the elements of the input tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (tuple(a+b for a,b in zip(test_tup1[i], test_tup2[i])),)\n    return new_tup",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))",
        "num_ids": 3037,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2,3) == 2",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex((1,2,3),(1,2)) == False",
        "num_ids": 1406,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes in a number as input and checks if the parity of that number is odd or even.\n    If the parity is odd, the function returns True. Otherwise, it returns False.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert find_Parity(-3) == True  # the parity of -3 is odd",
        "num_ids": 1092,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a list of digits\n    digits = list(map(int, str(n)))\n\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Check if the sorted digits are greater than the original number\n    if digits > list(map(int, str(n))):\n        # Return the original number with the digits sorted in descending order\n        return int(\"\".join(map(str, digits)))\n    else:\n        # Return None if the digits are not greater than the original number\n        return None",
        "test": "assert rearrange_bigger(12) == 21",
        "num_ids": 2678,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a list of tuples, where each tuple contains a number from nums1 and a corresponding number from nums2\n    pairs = [(nums1[i], nums2[j]) for i in range(len(nums1)) for j in range(len(nums2))]\n    # Use the heapq module to get the k smallest pairs\n    smallest_pairs = heapq.nsmallest(k, pairs)\n    return smallest_pairs",
        "test": "assert k_smallest_pairs([1, 2, 3], [4, 5, 6], 0) == []",
        "num_ids": 2931,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    \n    for tup1 in list1:\n        for tup2 in list1:\n            if tup1!= tup2:\n                product = tup1[0] * tup1[1] * tup2[1]\n                if product < min_product:\n                    min_product = product\n    \n    return min_product",
        "test": "assert min_product_tuple([(2,4), (1,5), (6,8)]) == 20",
        "num_ids": 2651,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min_val = listval[0]\n        for val in listval:\n            if val < min_val:\n                min_val = val\n        return min_val",
        "test": "assert min_val([1, 2, 3]) == 1",
        "num_ids": 1593,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 39,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the snake case string into words\n    words = word.split('_')\n    # Initialize an empty string to store the camel case string\n    camel_case = ''\n    # Loop through each word and capitalize the first letter\n    for i, word in enumerate(words):\n        if i == 0:\n            camel_case += word.lower()\n        else:\n            camel_case += word.capitalize()\n    # Return the camel case string\n    return camel_case",
        "test": "assert snake_to_camel('snake_case') =='snakeCase'",
        "num_ids": 1441,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Removes odd numbers from a list of integers.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]",
        "test": "assert remove_odd([1,2,3,4,5]) == [2, 4]",
        "num_ids": 1462,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 23,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]",
        "test": "assert extract_nth_element([(1,2), (3,4), (5,6), (7,8)], 2) == 4",
        "num_ids": 1789,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3], [2,3,4]) == True",
        "num_ids": 1484,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = max(arr)\n    second_max_num = sorted(arr)[-2]\n    return max_num * second_max_num",
        "test": "assert max_Product([0, 0, 0, 0, 0]) == 0",
        "num_ids": 2246,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def group_tuples(Input):\n    '''\n    This function finds common first element in given list of tuple.\n    '''\n    common_element = ''\n    for tup in Input:\n        if not common_element:\n            common_element = tup[0]\n        elif tup[0]!= common_element:\n            return common_element\n    return common_element",
        "test": "assert group_tuples([(1, 2), (1, 3), (2, 4), (2, 5)])!= 2",
        "num_ids": 2570,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem",
        "test": "assert Find_Max([\"apple\",\"banana\",\"cherry\"]) == \"banana\"",
        "num_ids": 1578,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))",
        "test": "assert round_and_sum([1.2, 2.4, 3.6, 4.8, 6.0]) == 30.0 # 12 + 24 + 36 + 48 + 60 = 210, 210 * 5 = 1050",
        "num_ids": 2610,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize sum to zero\n    sum = 0\n    # loop through the first n even natural numbers and add their cubes to the sum\n    for i in range(2, n*2, 2):\n        sum += i**3\n    # return the sum\n    return sum",
        "test": "assert cube_Sum(1) == 0",
        "num_ids": 1106,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]",
        "test": "assert concatenate_tuple(()) == \"\"",
        "num_ids": 1621,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / n\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1446,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for word in test_tuple:\n        rear_tuple += (word[-1],)\n    return rear_tuple",
        "test": "assert extract_rear((('apple', 'banana', 'orange'), ('pear', 'plum', 'grape'))) == ('orange', 'grape')",
        "num_ids": 1996,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == list:\n            if x in list1[i]:\n                count += 1\n    return count",
        "test": "assert count_element_in_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == 0",
        "num_ids": 1862,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([]) == []",
        "num_ids": 1478,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 40,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match(r'^\\d{4}-\\d{2}-\\d{2}$', dt):\n        date = dt.split('-')\n        return date[2] + '-' + date[1] + '-' + date[0]\n    else:\n        return 'Invalid Date Format'",
        "test": "assert change_date_format('2021-08-15') == '15-08-2021'",
        "num_ids": 2615,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list",
        "test": "assert shell_sort([]) == []",
        "num_ids": 2474,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple where each element is the logical AND of the corresponding elements of the input tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] and test_tup2[i],)\n    return result",
        "test": "assert and_tuples((True, True, True), (True, True, True)) == (True, True, True)",
        "num_ids": 1947,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = -b / (2 * a)\n    return x1",
        "test": "assert parabola_directrix(2, 0, 0) == 0, \"Should return 0\"",
        "num_ids": 2192,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Convert lists to sets to improve lookup time\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if any element of set1 is also in set2\n    if set1.intersection(set2):\n        return True\n    else:\n        return False",
        "test": "assert common_element([1, 2, 3], [3, 4, 5]) == True",
        "num_ids": 1717,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median",
        "test": "assert median_trapezium(1,1,1) == 1",
        "num_ids": 1844,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 1592,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one('ab') == True",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last_Digit(n):\n    '''\n    Returns the last digit of the given number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 990,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]",
        "test": "assert neg_nos([1,2,3,-4,-5]) == [-4,-5]",
        "num_ids": 1615,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    new_str = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 2702,
        "indeed": true
    },
    {
        "number": 439,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result",
        "test": "assert multiple_to_single([0, 0, 0, 0, 0]) == 0",
        "num_ids": 1681,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start()\n    else:\n        return None, None",
        "test": "assert find_adverb_position(\"She went to the mall to buy clothes.\") == (None, None)",
        "num_ids": 3184,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "test": "assert surfacearea_cube(2) == 24, \"surfacearea_cube(2) should be 24\"",
        "num_ids": 1176,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive/total",
        "test": "assert positive_count(array('i', [1, 2, 3, 4, 5, 6])) == 1.0",
        "num_ids": 1885,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = None\n    for num in list1:\n        if num < 0 and (largest_neg_num is None or num > largest_neg_num):\n            largest_neg_num = num\n    return largest_neg_num",
        "test": "assert largest_neg([-1, -2, -3, -4, -5]) == -1",
        "num_ids": 1795,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "test": "assert trim_tuple([(1,2,3),(4,5,6),(7,8,9)], 0) == [(1,2,3),(4,5,6),(7,8,9)]",
        "num_ids": 2407,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 2176,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 22,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Create a counter object to count the occurrence of elements in the tuple\n    count_obj = Counter(tup)\n\n    # Create an empty dictionary to store the count of each element in the list\n    result_dict = {}\n\n    # Iterate over the list and count the occurrence of each element in the tuple\n    for element in lst:\n        result_dict[element] = count_obj[element]\n\n    return result_dict",
        "test": "assert count_Occurrence((1,2,3,4,5),(1,2,3,4,5)) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1} ",
        "num_ids": 2946,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a list containing cubes of individual elements in the input list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num*num*num)\n    return cube_list",
        "test": "assert cube_nums([1,2,3]) == [1, 8, 27]",
        "num_ids": 1725,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 1336,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n\n    Parameters:\n    str_list (list): A list of string values.\n    size (int): The size of the string to extract.\n\n    Returns:\n    A list of string values.\n    \"\"\"\n    return [string[:size] for string in str_list]",
        "test": "assert extract_string([], 5) == [], \"The function extract_string is not correct.\"",
        "num_ids": 2400,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"",
        "num_ids": 1355,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate loss amount on a sale based on actual cost and sale amount.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(1000,1000) == 0",
        "num_ids": 1535,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes an integer as input and returns the sum of even factors of that number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        sum = 0\n        i = 2\n        while i <= math.sqrt(n):\n            if n % i == 0:\n                if i % 2 == 0:\n                    sum += i\n                if (n // i) % 2 == 0:\n                    sum += n // i\n            i += 1\n        if n % 2 == 0:\n            sum += n\n        return sum",
        "test": "assert sumofFactors(1) == 0",
        "num_ids": 2161,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz(\"This is a test string.\") == False",
        "num_ids": 1824,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if it contains 31 days or False otherwise.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True",
        "test": "assert check_monthnumb_number(4) == True",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    This function takes in a list of strings as an argument and returns a new list where each string has been reversed.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 1679,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_lst = []\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n            min_lst = sub_lst\n    return min_lst",
        "test": "assert Find_Min([[1,2], [3,4]]) == [1,2]",
        "num_ids": 2115,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def rectangle_area(length, width):\n    '''\n    Calculate the area of a rectangle.\n    '''\n    area = length * width\n    return area",
        "test": "assert rectangle_area(3,4) == 12",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and removes any uppercase substrings from it.\n    '''\n    # Use regular expression to match all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    # Replace each uppercase substring with an empty string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    # Return the modified string\n    return str1",
        "test": "assert remove_uppercase('UPPERCASE') == ''",
        "num_ids": 1554,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as an input and returns a new list with the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]",
        "test": "assert Extract([]) == []",
        "num_ids": 1646,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the count of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"THIS IS A TEST\") == 11",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    n = len(list1)\n    for r in range(1, n+1):\n        for i in range(n-r+1):\n            res.append(list1[i:i+r])\n    return res",
        "test": "assert combinations_list([]) == []",
        "num_ids": 2772,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n\n    for i in range(len(arr)):\n        curr_product *= arr[i]\n        max_product = max(max_product, curr_product)\n        if curr_product == 0:\n            curr_product = 1\n\n    return max_product",
        "test": "assert max_subarray_product([-2, 0, -1]) == 0 # [-1]",
        "num_ids": 2557,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values in a dictionary are the same.\n    '''\n    values = list(dict.values())\n    if len(values) == 0:\n        return True\n    for i in range(1, len(values)):\n        if values[i]!= values[0]:\n            return False\n    return True",
        "test": "assert check_value({'a':1, 'b':1, 'c':1}, 3) == True, \"All values are same in the dictionary.\"",
        "num_ids": 2060,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 2152,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if not arr:\n        return None\n    \n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for num in arr[1:]:\n        max_ending_here = max(num, max_ending_here * num, min_so_far * num)\n        min_so_far = min(num, max_ending_here * num, min_so_far * num)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far",
        "test": "assert max_product([-2,0,-1]) == 0",
        "num_ids": 2712,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 21,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_addition = ()\n    for i in range(len(test_tup)-1):\n        pairwise_addition += (test_tup[i] + test_tup[i+1],)\n    return pairwise_addition",
        "test": "assert add_pairwise((1,2,3)) == (3, 5)",
        "num_ids": 1801,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)): \n        result = (result * arr[i]) % n\n    return result",
        "test": "assert find_remainder([1,2,3,4,5], 8) == 0 ",
        "num_ids": 1660,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False",
        "test": "assert check_Consecutive([1,2,3,4,6]) == True",
        "num_ids": 1523,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection_set = set1 & set2\n    result_list = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple(tuple1) == tuple(tuple2):\n                if tuple1 not in result_list:\n                    result_list.append(tuple1)\n    return result_list",
        "test": "assert tuple_intersection([(1, 2), (2, 3), (3, 4)], [(4, 5), (5, 6), (6, 7)]) == []",
        "num_ids": 2896,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello\",\"l\",\"k\") == \"hekko\"",
        "num_ids": 1449,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return Counter(dict1).most_common()",
        "test": "assert sort_counter({'a': 4, 'b': 2, 'c': 1, 'd': 3}) == [('a', 4), ('d', 3), ('b', 2), ('c', 1)]",
        "num_ids": 2482,
        "indeed": true
    },
    {
        "number": 476,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes in an array of integers and returns the sum of the largest and smallest values in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    sorted_nums = sorted(nums)\n\n    # Return the sum of the first and last elements in the sorted array\n    return sorted_nums[0] + sorted_nums[-1]",
        "test": "assert big_sum([100,-100]) == 0",
        "num_ids": 1701,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 36,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower('hello') == 'hello'",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_regex = re.compile(r'\\b[a-z]{3,}\\b')\n    return lowercase_regex.sub('', str1)\n",
        "test": "assert remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\"",
        "num_ids": 1523,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 37,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    else:\n        return n // 10**(len(str(n))-1)\n",
        "test": "assert first_Digit(0) == 0",
        "num_ids": 1104,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1495,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_n - sum_of_cubes",
        "test": "assert difference(1) == 0 ",
        "num_ids": 1495,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1, 3, 5, 7, 9], 5) == 0",
        "num_ids": 1873,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "test": "assert toggle_string('Hello World') == 'hELLO wORLD'",
        "num_ids": 1243,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Returns the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Get the absolute difference between the two numbers\n    diff = abs(n1 - n2)\n\n    # Convert the difference to a string\n    diff_str = str(diff)\n\n    # Initialize the sum of the per-digit differences to zero\n    sum_diff = 0\n\n    # Iterate over each digit in the string representation of the difference\n    for digit in diff_str:\n        # Convert the digit back to an integer and add it to the sum of differences\n        sum_diff += int(digit)\n\n    # Return the total sum of per-digit differences\n    return sum_diff",
        "test": "assert digit_distance_nums(12, 34) == 4",
        "num_ids": 2565,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = 0\n    curr_sum = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n\n        if curr_sum < 0:\n            curr_sum = 0\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum",
        "test": "assert max_sub_array_sum([0, 0, 0], 3) == 0",
        "num_ids": 2801,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    sorted_union = sorted(list(union_set))\n    return sorted_union",
        "test": "assert union_elements((1,2,3), (2,4,6)) == [1,2,3,4,6] # Test case 1",
        "num_ids": 2382,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            length = len(sublist)\n            if length > max_length:\n                max_length = length\n    \n    return max_length",
        "test": "assert Find_Max_Length([]) == 0  # base case 1",
        "num_ids": 2186,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values('This is a string with \"double quotes\".') == ['double quotes']",
        "num_ids": 1793,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5],4) == 6",
        "num_ids": 2180,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into characters.\n    \"\"\"\n    return list(word)",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 1157,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function will take a non-negative integer as input and return the sum of its digits.\n    \"\"\"\n    if n < 0:\n        return \"Input should be a non-negative integer\"\n    else:\n        sum = 0\n        while n > 0:\n            digit = n % 10\n            sum += digit\n            n //= 10\n        return sum",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 1501,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Check if a given list is sorted in ascending order.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 1516,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "test": "assert sort_sublists([['apple', 'banana', 'orange'], ['dog', 'cat', 'fish']]) == [['apple', 'banana', 'orange'], ['cat', 'dog', 'fish']]",
        "num_ids": 2496,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 36,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function removes duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "test": "assert two_unique_nums([[1,2,3],[4,5,6]]) == [[1,2,3],[4,5,6]]",
        "num_ids": 2688,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list as input and calculates the product of the unique numbers in the list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 1660,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 2*3.14*r**2",
        "test": "assert surfacearea_cylinder(0,5) == 0, 'Incorrect surface area calculation for cylinder with radius 0 and height 5.'",
        "num_ids": 2300,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False",
        "test": "assert is_Sub_Array([1,2,3,4,5],[1,2,3,4,5]) == True # Test Case 1",
        "num_ids": 1913,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact%10",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 1284,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "test": "assert interleave_lists([1],[2],[3]) == [1,2,3]",
        "num_ids": 2930,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 3)) == []",
        "num_ids": 2287,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return tuple(result)",
        "test": "assert even_ele((1,2,3,4),(lambda x: x%2 == 0)) == (2,4)",
        "num_ids": 3309,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes base_edge and height as input and returns the surface area of a square pyramid.\n    '''\n    # calculate the area of each square\n    square_area = base_edge ** 2\n    \n    # calculate the area of each triangle face\n    triangle_area = (base_edge * height) / 2\n    \n    # calculate the total surface area\n    total_area = 4 * square_area + 4 * triangle_area\n    \n    return total_area",
        "test": "assert surface_Area(1,1) == 6 # base edge = 1, height = 1, surface area = 4 + 4 + 2 = 10 ",
        "num_ids": 1898,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True  # checking if an empty dictionary is empty",
        "num_ids": 955,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def catalan_number(num):\n    if num <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - i - 1)\n        return result",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1453,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b' # pattern to match adverbs ending with \"ly\"\n    matches = re.finditer(pattern, text) # find all the matches in the text\n    for match in matches:\n        print(match.group(), match.start(), match.end()) # print the matched text, start position, and end position\n        break # we only need to print the first match",
        "test": "assert find_adverbs(\"The cat is sleeping\") == None",
        "num_ids": 2126,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "test": "assert expensive_items([(\"apple\",2),(\"banana\",3),(\"orange\",5),(\"grape\",7),(\"kiwi\",1)],1) == [(\"orange\", 5)]",
        "num_ids": 3341,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    return first_part + last_part",
        "test": "assert split_Arr([1,2,3,4,5], 6) == [1, 2, 3, 4, 5]",
        "num_ids": 2008,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def list_tuple(listx):\n    '''\n    This function converts a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1406,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two integers a and b as input, and returns a list of perfect squares between a and b (inclusive).\n    \"\"\"\n    squares = []\n    for num in range(a, b+1):\n        square_root = num ** 0.5\n        if square_root == int(square_root):\n            squares.append(num)\n    return squares",
        "test": "assert perfect_squares(1, 2) == [1]",
        "num_ids": 4417,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    return round(rho * cmath.exp(complex(0, theta)).real, 2), round(rho * cmath.exp(complex(0, theta)).imag, 2)",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 1740,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 29,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 1646,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments, n and k.\n    It finds the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
        "test": "assert binomial_Coeff(1,1)==1 #1",
        "num_ids": 1688,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0+(\\d+)', r'\\1', ip)",
        "test": "assert removezero_ip('255.255.255.255') == '255.255.255.255'",
        "num_ids": 1972,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as an argument and finds the difference of the first even and first odd number of the list.\n    \"\"\"\n    if len(list1) < 2:\n        return \"List should have at least 2 elements\"\n    even = odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even = i\n        else:\n            odd = i\n            break\n    return abs(even - odd)",
        "test": "assert diff_even_odd([1,2,3,4,5]) == 1",
        "num_ids": 2219,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert the first string to the second string.\n    '''\n    n = len(str1)\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][i] = 0\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l\n            if str1[i:j] == str2[i:j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = dp[i+1][j-1] + 1\n    return dp[0][n]",
        "test": "assert min_Swaps(\"1111\",\"1111\") == 0 # \"1111\" -> \"1111\" requires no swaps.",
        "num_ids": 3753,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size",
        "test": "assert tuple_size((1,2)) == sys.getsizeof((1,2))",
        "num_ids": 1595,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    len1 = len(arr1)\n    len2 = len(arr2)\n\n    # Edge cases\n    if k > len1 + len2:\n        return None\n\n    if k <= len1:\n        return find_kth_helper(arr1, arr2, k)\n    else:\n        return find_kth_helper(arr2, arr1, k - len1)\n\n\ndef find_kth_helper(arr1, arr2, k):\n    \"\"\"\n    Helper function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if not arr1:\n        return arr2[k - 1]\n\n    if not arr2:\n        return arr1[k - 1]\n\n    # Divide the search space in half\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    # Check if the kth element is in the first half of arr1\n    if mid1 + 1 > k:\n        return find_kth_helper(arr1[:mid1], arr2, k)\n    # Check if the kth element is in the second half of arr1\n    elif mid1 + 1 < k <= len(arr1):\n        return find_kth_helper(arr1[mid1:], arr2, k - mid1 - 1)\n    # Check if the kth element is in the first half of arr2\n    elif mid2 + 1 > k:\n        return find_kth_helper(arr1, arr2[:mid2], k)\n    # Check if the kth element is in the second half of arr2\n    else:\n        return find_kth_helper(arr1, arr2[mid2:], k - mid2 - 1)\n",
        "test": "assert find_kth([1,2,3], [4,5,6], 1) == 4",
        "num_ids": 3760,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string to simplify the following calculations\n    number_str = str(number)\n    # Calculate the number of digits in the number\n    num_digits = len(number_str)\n    # Calculate the sum of the nth power of each digit\n    sum_of_powers = sum(int(digit) ** num_digits for digit in number_str)\n    # Check if the sum of the powers is equal to the original number\n    return sum_of_powers == number",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 1650,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    return total, average",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 1285,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if it is even, False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None",
        "test": "assert first_repeated_char('aaabbbccc') == 'a'",
        "num_ids": 1599,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, i)):\n            ludic.append(i)\n    return ludic",
        "test": "assert get_ludic(0) == []",
        "num_ids": 3394,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words =''.join(words[::-1])\n    return reversed_words",
        "test": "assert reverse_words(\"\") == \"\"",
        "num_ids": 1591,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and returns True if it's a prime number, otherwise False.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 1451,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 1131,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Search a string for a regex pattern and return the matching substring, start index, and end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals('hello', 'l') == ('l', 2, 3)",
        "num_ids": 1885,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def bell_Number(n): \n    '''\n    This function takes an integer n as input and returns the nth bell number.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]",
        "test": "assert bell_Number(1) == 1, \"Incorrect output for bell_Number(1)\"",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 30,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function takes a list and a value k, and removes the k-th element from the list.\n    \"\"\"\n    return lst[:k] + lst[k+1:]",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 4, 5]",
        "num_ids": 2138,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Given a matrix represented as a list of lists, returns the maximum value of the Nth column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N-1:\n            max_val = max(max_val, row[N-1])\n    return max_val",
        "test": "assert max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 1) == 7",
        "num_ids": 2273,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def merge(lst):\n    # create two empty lists\n    first_lst = []\n    second_lst = []\n\n    # iterate through each sublist in the original list\n    for sublist in lst:\n        # append the first element to the first list and the second to the second list\n        first_lst.append(sublist[0])\n        second_lst.append(sublist[1])\n\n    # return a list of two lists with the first and second elements of each sublist\n    return [first_lst, second_lst]",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1,3,5],[2,4,6]]",
        "num_ids": 2161,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    sum = 0\n    for i in test_list:\n        sum += i[1]\n        result.append(sum)\n    return result",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 2449,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        result.append(avg)\n    return result",
        "test": "assert average_tuple(((1, 2), (3, 4))) == [1.5, 3.5]",
        "num_ids": 2384,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: tuples are not of the same length\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i], )\n        \n    return result_tup",
        "test": "assert tuple_modulo((0, 0, 0), (1, 1, 1)) == (0, 0, 0)",
        "num_ids": 2451,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 380,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    visited = [[False for j in range(d+1)] for i in range(steps+1)]\n    jumps = [[0 for j in range(d+1)] for i in range(steps+1)]\n    \n    # Initialize first row and column\n    for i in range(d+1):\n        jumps[0][i] = float('inf')\n    for i in range(steps+1):\n        jumps[i][0] = 0\n    \n    # Fill the table\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            if i == j:\n                jumps[i][j] = 1\n            else:\n                if jumps[i-1][j-1]!= float('inf') and jumps[i-1][j-1] + 1 < jumps[i][j]:\n                    jumps[i][j] = jumps[i-1][j-1] + 1\n                if jumps[i][j-1]!= float('inf') and jumps[i][j-1] + 1 < jumps[i][j]:\n                    jumps[i][j] = jumps[i][j-1] + 1\n                    \n    # Return the answer\n    return jumps[steps][d]",
        "test": "assert min_Jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 10) == 2",
        "num_ids": 3172,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i]!= 0:\n            result.append(nums1[i] / nums2[i])\n        else:\n            result.append(None)\n    return result",
        "test": "assert div_list([1, 2, 3], [2, 4, 6]) == [0.5, 0.5, 0.5]",
        "num_ids": 2399,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            result += char\n    for num in num_list:\n        result += num\n    return result",
        "test": "assert move_num('123456') == '123456'",
        "num_ids": 2392,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [False] * n\n    dp[0] = True\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j])\n        dp[i] = dp[i] or (a[i] == a[i-1] and dp[i-1])\n    return sum(dp)",
        "test": "assert largest_subset([2, 4, 6, 8, 10]) == 5",
        "num_ids": 2291,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 21,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import random\n\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return i + 1\n\ndef quickselect(arr, k):\n    low = 0\n    high = len(arr) - 1\n    while True:\n        pivot_index = random.randint(low, high)\n        pivot_index = partition(arr, low, high)\n        if pivot_index == k - 1:\n            return arr[pivot_index]\n        elif pivot_index > k - 1:\n            high = pivot_index - 1\n        else:\n            low = pivot_index + 1\n\ndef get_median(arr1, arr2, n):\n    combined = arr1 + arr2\n    median = quickselect(combined, n)\n    return median",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 3) == 3",
        "num_ids": 2909,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and returns a new list with the n-th power of each number.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1,2,3,4,5], 2) == [1,4,9,16,25]",
        "num_ids": 1907,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_upper(string):\n    return string.upper()",
        "test": "assert is_upper(\"HELLO\") == \"HELLO\"",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 31,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1661,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Finds the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Args:\n        r (float): The radius of the semicircle.\n\n    Returns:\n        float: The area of the largest triangle that can be inscribed in the semicircle.\n    \"\"\"\n    # Calculate the diameter of the semicircle\n    d = r * 2\n    \n    # Calculate the length of the hypotenuse of the triangle\n    h = math.sqrt(d ** 2 - r ** 2)\n    \n    # Calculate the area of the triangle\n    area = 0.5 * d * h\n    \n    return area",
        "test": "assert triangle_area(20) == 1583.9397205820577",
        "num_ids": 3115,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 27,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    # Set the end index to the length of the array if not provided\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize the previous_num to the first element of the array\n    previous_num = array[start]\n\n    # Iterate through the array from the start index to the end index\n    for i in range(start + 1, end + 1):\n        # If the current element is not equal to the previous element + 1, return the previous element + 1\n        if array[i]!= previous_num + 1:\n            return previous_num + 1\n\n        # Otherwise, update the previous element to the current element\n        previous_num = array[i]\n\n    # If the end index is reached without finding a missing number, return the end index + 1 as the missing number\n    return end + 1",
        "test": "assert find_First_Missing([0, 1, 2, 3, 4]) == 5",
        "num_ids": 3279,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 1399,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list",
        "test": "assert Split([1,2,3,4,5,6,7,8,9]) == [2,4,6,8]",
        "num_ids": 1627,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple as input and returns a list of all adjacent coordinates.\n    '''\n    rows, cols = ele\n    adj = []\n    if rows > 0:\n        adj.append((rows-1, cols))\n    if rows < 7:\n        adj.append((rows+1, cols))\n    if cols > 0:\n        adj.append((rows, cols-1))\n    if cols < 7:\n        adj.append((rows, cols+1))\n    return adj",
        "test": "assert adjac((0,0)) == [(1,0), (0,1)]",
        "num_ids": 2441,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        new_text = text.replace(' ', '_')\n        return new_text\n    else:\n        new_text = text.replace('_','')\n        return new_text",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 1256,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    \n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    \n    return non_zeroes + zeroes",
        "test": "assert move_zero([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]",
        "num_ids": 2751,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ (arr[i] & arr[j])\n    return sum",
        "test": "assert pair_xor_Sum([0,0,0,0],4) == 0 # 0^0 = 0",
        "num_ids": 1999,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1837,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two arguments:\n    actual_cost: actual cost of the item.\n    sale_amount: amount of the item sold.\n\n    It checks whether the given amount has no profit and no loss.\n    Returns True if there is no profit and no loss, otherwise False.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True",
        "test": "assert noprofit_noloss(100,150) == False",
        "num_ids": 1679,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index (WCI) rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert velocity from km/h to m/s\n    v *= 0.277778\n\n    # Calculate the wind chill index\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n\n    return wci",
        "test": "assert wind_chill(20,10) == 10",
        "num_ids": 2593,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            total_length += len(name)\n    return total_length",
        "test": "assert sample_nam(['John', 'Sarah', 'JANE', 'Mary', 'Sam']) == 13",
        "num_ids": 2047,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = re.compile('\\([^()]*\\)|\\[[^\\[\\]]*\\]|\\{[^{}]*\\}')\n    return pattern.sub('', items)",
        "test": "assert remove_parenthesis('One more test string (with an unmatched parenthesis at the end.') == 'One more test string (with an unmatched parenthesis at the end.'",
        "num_ids": 1969,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (3*n - 1) // 2",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\bz\\w*?\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle(\"hello world\") == False",
        "num_ids": 1612,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # initialize two pointers\n    i = 0\n    j = k\n\n    # swap elements until j is less than or equal to the end of the array\n    while j < len(input):\n        input[i], input[j] = input[j], input[i]\n        i += 1\n        j += 1\n\n    return input",
        "test": "assert reverse_Array_Upto_K([], 0) == []",
        "num_ids": 2314,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 36,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 4, 'b': 5}) == ((1, 2, 3), {'a': 4, 'b': 5})",
        "num_ids": 2399,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    # Initialize first row and column\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    # Fill in the rest of the matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    # Calculate the average for each path from top-left to bottom-right\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            # Calculate the number of cells visited in the path\n            if i == 0 and j == 0:\n                count = 1\n            elif i == 0:\n                count = j\n            elif j == 0:\n                count = i\n            else:\n                count = i + j\n            # Calculate the average for this path\n            avg = dp[i][j] / count\n            # Update the maximum average if needed\n            if avg > max_avg:\n                max_avg = avg\n    return max_avg",
        "test": "assert maxAverageOfPath([[1,2],[3,4]]) == 3.5",
        "num_ids": 5292,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "test": "assert filter_data({'Alice':(1.65,50), 'Bob':(1.8,60), 'Charlie':(1.75,55), 'David':(1.8,65)}, 1.7, 50) == {'Bob':(1.8,60), 'Charlie':(1.75,55), 'David':(1.8,65)}",
        "num_ids": 4329,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1,2,3],[1,2,3]) == 3",
        "num_ids": 2346,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to string and calculate the sum of its digits to the specified power.\n    base_str = str(base)\n    base_sum = sum(int(digit) ** power for digit in base_str)\n    return base_sum",
        "test": "assert power_base_sum(9, 1) == 9 # Example 4",
        "num_ids": 2039,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    matches = pattern.findall(text)\n    return matches",
        "test": "assert extract_quotation(\"He said, \\\"I love you.\\\"\" ) == [\"I love you.\"]",
        "num_ids": 1684,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)",
        "test": "assert multiply_elements((1, 2, 3)) == (2, 6)",
        "num_ids": 2395,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 1885,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        group = list(group)\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.append(group[-1])\n    return result",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 2265,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface = math.pi * r * h\n    return lateralsurface",
        "test": "assert lateralsurface_cone(3,4) == math.pi*12, \"Incorrect lateral surface area for a cone with radius 3 and height 4\"",
        "num_ids": 2044,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub(r'[\\s,\\.]+', ':', text)\n    return new_text",
        "test": "assert replace_specialchar('hello.world') == 'hello:world'",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 3, 3, 4, 5], 3) == 2",
        "num_ids": 2822,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_product = [1]*n\n    suffix_product = [1]*n\n    total_sum = 0\n    \n    # prefix product\n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i-1] * arr[i-1]\n        \n    # suffix product\n    for i in range(n-2, -1, -1):\n        suffix_product[i] = suffix_product[i+1] * arr[i+1]\n        \n    # sum of products of all sublists\n    for i in range(n):\n        total_sum += (prefix_product[i]*suffix_product[i])\n        \n    return total_sum",
        "test": "assert sum_Of_Subarray_Prod([0, 0, 0, 0, 0]) == 0",
        "num_ids": 3400,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def set_middle_bits(n):\n    # convert number to binary string\n    binary = bin(n)[2:]\n    # length of the binary string\n    length = len(binary)\n    # toggle bits of the string except the first and the last bit\n    for i in range(1, length-1):\n        if binary[i] == '1':\n            binary = binary[:i] + '0' + binary[i+1:]\n        else:\n            binary = binary[:i] + '1' + binary[i+1:]\n    # convert binary string to integer\n    toggled_n = int(binary, 2)\n    return toggled_n",
        "test": "assert set_middle_bits(7) == 5",
        "num_ids": 2268,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 1691,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    This function takes a string as input and returns True if the string is starting with a vowel and False otherwise.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('apple') == True",
        "num_ids": 1177,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import math \n\ndef find_Index(n): \n    index = n * (n+1) // 2\n    return index",
        "test": "assert find_Index(1) == 1",
        "num_ids": 1608,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and converts it into a key-value dictionary using adjacent elements.\n    '''\n    key_value_dict = {}\n    for i in range(len(test_tup)-1):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 2570,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    for char in s:\n        if char!= s[0]:\n            return False\n    return True",
        "test": "assert all_Characters_Same(\"abca\") == False",
        "num_ids": 1070,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3 * (math.sqrt(6) * side ** 2)) / 12\n    return area",
        "test": "assert area_tetrahedron(1)==math.sqrt(6)/4",
        "num_ids": 1688,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate the list to the right by n positions\n    \"\"\"\n    return lst[-n:] + lst[:-n]",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 2035,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "test": "assert check_none((1,2,3)) == False",
        "num_ids": 1136,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [n for n in range(startnum, endnum+1) if all(int(digit) % n == 0 for digit in str(n))]",
        "test": "assert divisible_by_digits(9876, 5432) == []",
        "num_ids": 5118,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (r**2)*(a/360)*(2*math.pi)",
        "test": "assert sector_area(8,720) == None, \"sector_area function is not correct\"",
        "num_ids": 2011,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D table to store lengths of longest common subsequence of substrings X[0...m-1], Y[0...n-1], and Z[0...o-1]\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table in bottom-up fashion\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    lcs[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] == Z[k-1]):\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # Find the length of the longest common subsequence\n    length = lcs[m][n][o]\n\n    # Create a character array to store the longest common subsequence\n    lcs_str = [''for k in range(length)]\n    lcs_str[length-1] = None\n\n    # Start from the bottom-right corner of the table and move backwards\n    i = m\n    j = n\n    k = o\n    while (i > 0 and j > 0 and k > 0):\n        if (X[i-1] == Y[j-1] == Z[k-1]):\n            lcs_str[length-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            length -= 1\n        elif (lcs[i-1][j][k] >= lcs[i][j-1][k] and lcs[i-1][j][k] >= lcs[i][j][k-1]):\n            i -= 1\n        elif (lcs[i][j-1][k] >= lcs[i-1][j][k] and lcs[i][j-1][k] >= lcs[i][j][k-1]):\n            j -= 1\n        else:\n            k -= 1\n\n    # Convert the character array to a string\n    lcs_str = ''.join(lcs_str)\n\n    return lcs_str",
        "test": "assert lcs_of_three(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"",
        "num_ids": 5623,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 34,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<=[^\\s0-9])[A-Z][a-z]+')\n    result = re.sub(pattern, r' \\g<0>', str1)\n    return result",
        "test": "assert capital_words_spaces('Hello World') == 'Hello World'",
        "num_ids": 1848,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str = sorted(nums_str, key=lambda x: float(x))\n    return nums_str",
        "test": "assert sort_numeric_strings(['1', '2', '10', '5', '3']) == ['1', '2', '3', '5', '10']",
        "num_ids": 2720,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 35,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += test_tup\n    return test_list",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1813,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_min_heap_helper(arr, i):\n    # Base case\n    if i >= len(arr) // 2:\n        return True\n\n    # Check if left child of root exists and is smaller than root\n    if i * 2 + 1 < len(arr) and arr[i] > arr[i * 2 + 1]:\n        return False\n\n    # Check if right child of root exists and is smaller than root\n    if i * 2 + 2 < len(arr) and arr[i] > arr[i * 2 + 2]:\n        return False\n\n    # Recursively check left and right subtrees\n    return check_min_heap_helper(arr, i * 2 + 1) and check_min_heap_helper(arr, i * 2 + 2)",
        "test": "assert check_min_heap_helper([1, 2, 0, 3], 0) == False",
        "num_ids": 3183,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1836,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    test_list.sort()\n    return test_list[:K]",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 3) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 3056,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([], [2, 3, 4], [5, 4, 3]) == []",
        "num_ids": 2410,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None  # not enough numbers to find a second smallest\n    smallest = second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest",
        "test": "assert second_smallest([1, 2, 2, 3, 4]) == 2",
        "num_ids": 1761,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a[b]+?\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"ab\") == True",
        "num_ids": 1148,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    This function takes a list of strings as input and returns the count of pairs of reverse strings in the list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs([\"abc\", \"def\", \"ghi\"]) == 0",
        "num_ids": 2302,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary where every unique sublist is converted to a tuple and the value of such tuple is the number of its occurrences in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in count_dict:\n                count_dict[sublist] = 1\n            else:\n                count_dict[sublist] += 1\n    return count_dict",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 3246,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.') > 1:  # more than one decimal point\n        return False\n    if num.count('.') == 1:  # one decimal point\n        decimal_index = num.index('.')\n        if decimal_index == 0 or decimal_index == len(num)-1:  # decimal point at beginning or end of string\n            return False\n        decimal_part = num[decimal_index+1:]\n        if not decimal_part.isdigit():  # decimal part contains non-digit characters\n            return False\n        if len(decimal_part) > 2:  # decimal part has more than 2 digits\n            return False\n        return True\n    else:  # no decimal point\n        if not num.isdigit():  # string contains non-digit characters\n            return False\n        if len(num) > 1 and num.startswith('0') and num!= '0':  # string starts with a non-zero digit\n            return False\n        if len(num) > 2:  # string has more than 2 digits\n            return False\n        return True",
        "test": "assert is_decimal(\"3.14\") == True",
        "num_ids": 1497,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 28,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1,2,3,4,4]) == False",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    else:\n        return None",
        "test": "assert check_monthnumber_number(3) == True # March has 31 days",
        "num_ids": 2029,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([4, 6, 10],3) == 2 # 6 and 4 have the minimum difference",
        "num_ids": 2307,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 1126,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    count = 1\n    i = 2\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return i - 1\n    \ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_polite(1) == 1",
        "num_ids": 2294,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in the given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 1575,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 5) == 2",
        "num_ids": 2470,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists and returns the difference between them.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff",
        "test": "assert Diff([1,2,3],[1,2,3]) == []",
        "num_ids": 1747,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function finds the sum of fourth power of first n odd natural numbers.\n\n    :param n: An integer representing the number of odd natural numbers.\n    :return: An integer representing the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    sum = 0\n    count = 1\n\n    while count <= n:\n        sum += count ** 4\n        count += 2\n\n    return sum",
        "test": "assert odd_num_sum(1) == 1",
        "num_ids": 2010,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "test": "assert check_expression(\"((()))\") == True",
        "num_ids": 2079,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)",
        "test": "assert remove_length(\"Hello world\", 6) == \"Hello world\"",
        "num_ids": 1668,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    positions = []\n    for match in matches:\n        positions.append((match.start(), match.end()))\n    return positions if positions else None",
        "test": "assert occurance_substring(\"This is a test string\",\"xyz\") == None",
        "num_ids": 1974,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function checks whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 3, 5, 7, 9, 2, 4, 6, 8]) == False",
        "num_ids": 1560,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n        elif i < len(test_str) - 1 and test_str[i+1] in vowels and test_str[i] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"xyz\") == 0",
        "num_ids": 1924,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    sum_non_repeated = 0\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            sum_non_repeated += num\n            seen.add(num)\n    return sum_non_repeated",
        "test": "assert find_sum([1]) == 1",
        "num_ids": 2135,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 2684,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def unique_sublists(list1):\n    unique_lists = {}\n    for sublist in list1:\n        unique_lists[tuple(sublist)] = list1.count(sublist)\n    return unique_lists",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 4112,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    \"\"\"\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                result.append(j)\n    return result",
        "test": "assert find_combinations([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]) == [(1, 2, 3, 4, 5, 6, 7), (1, 2, 3, 4, 5, 7, 8), (1, 2, 3, 4, 6, 7, 8), (1, 2, 3, 5, 6, 7, 8), (1, 2, 4, 5, 6, 7, 8), (1, 3, 4, 5, 6, 7, 8), (2, 3, 4, 5, 6, 7, 8)]",
        "num_ids": 8759,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            count += 1\n    return count \n\ndef is_even(n) : \n    if count_divisors(n) % 2 == 0 : \n        return True \n    else : \n        return False \n\nprint(is_even(10)) # True \nprint(is_even(7)) # False ",
        "test": "assert count_divisors(28) == 6, \"The count of divisors of 28 should be 6.\"",
        "num_ids": 1960,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            subarr = arr[i:j]\n            if len(subarr) % 2!= 0:\n                result += sum(subarr)\n    return result",
        "test": "assert odd_length_sum([1,2,3,4]) == 25",
        "num_ids": 2223,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value",
        "test": "assert rgb_to_hsv(0,0,0) == (0,0,0) # black",
        "num_ids": 4063,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the first even and odd number in the list.\n    \"\"\"\n    even = odd = 0\n    \n    # Find the first even and odd numbers in the list\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n            break\n    \n    for num in lst:\n        if num % 2!= 0:\n            odd = num\n            break\n    \n    # Return the product of the even and odd numbers\n    return even * odd",
        "test": "assert mul_even_odd([0,1,2,3,4,5]) == 0",
        "num_ids": 2294,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function will convert tuple string to integer tuple.\n    '''\n    # convert string to list\n    test_list = test_str.strip('()').split(',')\n    # convert list of strings to list of integers\n    int_list = [int(i) for i in test_list]\n    # convert list of integers to tuple\n    int_tuple = tuple(int_list)\n    # return tuple of integers\n    return int_tuple",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 1748,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i\n",
        "test": "assert right_insertion([1, 3, 5, 7], 6) == 3",
        "num_ids": 1542,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b.*b.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three('abc') == False",
        "num_ids": 1094,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + tuple(test_str)",
        "test": "assert new_tuple([1], \"a\") == (1, 'a')",
        "num_ids": 1518,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert even_position([2,4,6,8,10]) == True",
        "num_ids": 1554,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def remove_nested(test_tup):\n    new_tup = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            new_tup += remove_nested(i)\n        else:\n            new_tup += (i,)\n    return new_tup",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 2253,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list as input and returns the number of sub-lists in the given list.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([]) == 0",
        "num_ids": 1540,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last(arr, x):\n    '''\n    Find the last position of an element in a sorted array.\n\n    Args:\n        arr: A sorted list of integers.\n        x: The integer to search for.\n\n    Returns:\n        The last position of the element in the array, or -1 if it is not found.\n    '''\n\n    # Initialize variables\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    # Binary search loop\n    while low <= high:\n        mid = (low + high) // 2\n\n        # Check if the middle element is the target\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1  # Search the right half\n        elif arr[mid] < x:\n            low = mid + 1  # Search the right half\n        else:\n            high = mid - 1  # Search the left half\n\n    return result",
        "test": "assert last([1,2,3,4,5,6],1)==0",
        "num_ids": 2341,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))",
        "test": "assert text_starta_endb(\"a\") == False",
        "num_ids": 1391,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all items in the dictionary.\n    \"\"\"\n    sum = 0\n    for key in dictionary:\n        sum += dictionary[key]\n    return sum",
        "test": "assert return_sum({1:2, 3:4, 5:6}) == 12",
        "num_ids": 1543,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum",
        "test": "assert sum_odd(1) == 1, \"Sum of odd numbers from 1 to 1 is incorrect\"",
        "num_ids": 1677,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 35,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)",
        "test": "assert _sum([1,2,3]) == 6, \"Should be 6\"",
        "num_ids": 2134,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def left_rotate(n, d):\n    '''\n    This function takes two arguments: n (the number to be rotated), and d (the number of bits to be rotated).\n    It returns the left-rotated value of n by d bits.\n    '''\n    # Convert n to binary string\n    n_bin = bin(n)[2:].zfill(32)\n    \n    # Rotate the bits\n    rotated_bin = n_bin[-d:] + n_bin[:-d]\n    \n    # Convert the rotated binary string back to an integer\n    rotated_num = int(rotated_bin, 2)\n    \n    return rotated_num",
        "test": "assert left_rotate(0b11111111111111111111111111111111, 0) == 0b11111111111111111111111111111111",
        "num_ids": 2679,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n\ntext = \"This is  a  sample text with    multiple  spaces.\"\nprint(remove_all_spaces(text))",
        "test": "assert remove_all_spaces('hello world') == 'helloworld'",
        "num_ids": 1257,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the count of equal numbers in the three integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    else:\n        count = 0\n    return count",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 1557,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def count_rotation(arr):\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return left",
        "test": "assert count_rotation([1,1,1,1,1]) == 0 # testcase 4",
        "num_ids": 3712,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    This function returns True if the given number is a perfect square, otherwise, False.\n    '''\n    root = math.sqrt(n)\n    return int(root + 0.5) ** 2 == n",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "test": "assert is_product_even([1, 2, 3, 4, 5]) == True",
        "num_ids": 1549,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = [lst]\n        elif sum_lst == max_sum:\n            max_list.append(lst)\n    return max_list",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 8, 9]]",
        "num_ids": 3349,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Find maximum run of uppercase characters in the given string.\n\n    :param test_str: string to analyze\n    :return: maximum length of consecutive uppercase characters\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
        "test": "assert max_run_uppercase(\"ABCDabcDE\") == 4",
        "num_ids": 1914,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num",
        "test": "assert first_odd([1,2,3,4,5,6,7,8,9]) == 1",
        "num_ids": 1447,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if K in test_tup else False",
        "test": "assert check_K([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 15) == False",
        "num_ids": 1646,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1,2,3),(3,2,1)) == False",
        "num_ids": 1811,
        "indeed": false
    }
]