[
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of common elements.\n    \"\"\"\n    # create a set from the first tuple and check if each element is in the second tuple\n    result = [elem for elem in test_tup1 if elem in set(test_tup2)]\n    return result",
        "test": "assert similar_elements((1,2,3), (2,3,4)) == [2,3]",
        "num_ids": 2034,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 37,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert is_not_prime(1) == False",
        "num_ids": 1503,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "test": "assert heap_queue_largest([1,2,3,4,5],5) == [5,4,3,2,1]",
        "num_ids": 2290,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x % 2 == 0:\n        x = x // 2\n    if x == 1:\n        return True\n    return False",
        "test": "assert is_Power_Of_Two(3) == False",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "test": "assert find_char_long(\"This is a test\") == [\"This\", \"test\"]",
        "num_ids": 1800,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 1686,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_Rotations(str):\n    '''\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    '''\n\n    # concatenate the string with itself\n    new_str = str + str\n\n    # check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n\n    # find the midpoint of the concatenated string\n    mid = len(new_str) // 2\n\n    # initialize variables\n    left = right = mid\n\n    # loop until the left and right pointers meet\n    while left < right:\n        # check if the left substring is a palindrome\n        if new_str[left:right] == new_str[left:right][::-1]:\n            return right - left\n\n        # move the left pointer to the right\n        left += 1\n\n        # check if the right substring is a palindrome\n        if new_str[left:right] == new_str[left:right][::-1]:\n            return right - left\n\n        # move the right pointer to the left\n        right -= 1\n\n    return 1",
        "test": "assert find_Rotations('bcdeaabc') == 1",
        "num_ids": 2432,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        if s.count(ch) == 2:\n            s = s.replace(ch, '', 1)\n            s = s.replace(ch, '', -1)\n            return s\n        else:\n            return s.replace(ch, '')",
        "test": "assert remove_Occ(\"hello\",\"o\")==\"hell\"",
        "num_ids": 1975,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n\n    # Create a list of tuples where the first element is the sum of the row and the second element is the index of the row\n    row_sums = [(sum(M[i]), i) for i in range(rows)]\n\n    # Sort the list of tuples in ascending order of the sums of the rows\n    row_sums.sort()\n\n    # Create a list of lists to store the sorted matrix\n    sorted_matrix = [[0 for j in range(cols)] for i in range(rows)]\n\n    # Fill the sorted matrix with the elements of the original matrix, sorted by the sum of their rows\n    for i in range(rows):\n        sorted_matrix[row_sums[i][1]] = M[row_sums[i][1]]\n\n    return sorted_matrix",
        "test": "assert sort_matrix([[1,2],[3,4],[5,6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 3879,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    l (float): Length of the base.\n    b (float): Width of the base.\n    h (float): Height of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    return 0.5 * l * b * h",
        "test": "assert find_Volume(0,0,0) == 0, \"Error: Incorrect volume for given dimensions\"",
        "num_ids": 1450,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    This function returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore('helloWorld') == False",
        "num_ids": 1357,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(2) == 8",
        "num_ids": 975,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def str_to_list(string): \n    '''\n    This function takes in a string and returns a list of characters present in the string.\n    '''\n    unique_chars = []\n    for char in string:\n        if char not in unique_chars:\n            unique_chars.append(char)\n    return unique_chars",
        "test": "assert str_to_list(\"\") == [] ",
        "num_ids": 2301,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # using set to remove duplicates and then checking if length of set is less than length of array\n    return len(arraynums)!= len(set(arraynums))",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 1721,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(1) == False  # first test case",
        "num_ids": 1410,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def rev(num):\n    '''\n    This function takes a number as input and returns True if the given number is one less than twice its reverse.\n    '''\n    if str(num) == str(num)[::-1]:\n        return True\n    else:\n        return False",
        "test": "assert rev(124) == False",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as an input and returns the largest number that can be formed with the digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max_num * 10 + arr[i]\n    return max_num",
        "test": "assert find_Max_Num([0,0,0,0,0]) == 0",
        "num_ids": 1995,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    '''\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True",
        "test": "assert opposite_Signs(-2,3)==True",
        "num_ids": 1162,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_number = 0\n    i = 1\n    while i <= n:\n        octagonal_number = i * (2 * i - 1)\n        i += 1\n    return octagonal_number",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1350,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    counts = defaultdict(int)\n    count = 0\n\n    # Count the frequency of each digit\n    for digit in s:\n        counts[digit] += 1\n\n    # Check if the length of the substring has a digit frequency of 1\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count += 1\n\n    return count",
        "test": "assert count_Substrings('1234') == 1",
        "num_ids": 2325,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1345,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff",
        "test": "assert max_difference([(1,2),(3,4),(5,6),(7,8)]) == 6",
        "num_ids": 2350,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "test": "assert subject_marks([(3, 75), (2, 80), (1, 90), (4, 60)]) == sorted([(3, 75), (2, 80), (1, 90), (4, 60)], key=lambda x: x[1]) # testing using sorted() function.",
        "num_ids": 2998,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "test": "assert recursive_list_sum([1]) == 1",
        "num_ids": 2077,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10",
        "num_ids": 1504,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 38,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def bell_number(n):\n    bell = [0] * (n + 1)  # initialize the bell numbers array\n    bell[0] = 1  # base case\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n\n    return bell[n]\n\nprint(bell_number(5))  # 55",
        "test": "assert bell_number(0) == 1",
        "num_ids": 1504,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Monotonic(A):\n    # check if the array is sorted in ascending order or descending order\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False",
        "test": "assert is_Monotonic([1,1,1,1,1]) == True",
        "num_ids": 2105,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sublist(l, s):\n    '''\n    This function checks whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)",
        "test": "assert is_sublist([1, 2, 3], [2, 3]) == True",
        "num_ids": 2343,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = [len(t) for t in Input]\n    return all(l == lengths[0] for l in lengths)",
        "test": "assert find_equal_tuple((('apple', 'banana'), ('cherry', 'date'))) == True",
        "num_ids": 1803,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "test": "assert comb_sort([3, 2, 1]) == [1, 2, 3]",
        "num_ids": 2629,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def is_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square, else False.\n    \"\"\"\n    root = int(n ** 0.5)\n    return root * root == n\n\ndef dif_Square(n):\n    \"\"\"\n    Returns True if the given number can be represented as the difference of two squares, else False.\n    \"\"\"\n    if is_square(n):\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if is_square(n-i**2) and is_square(n+i**2):\n            return True\n    return False\n",
        "test": "assert dif_Square(3) == False",
        "num_ids": 1831,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'R' and colors[i]!= 'Red':\n            return False\n        elif patterns[i] == 'G' and colors[i]!= 'Green':\n            return False\n        elif patterns[i] == 'B' and colors[i]!= 'Blue':\n            return False\n        elif patterns[i] == 'Y' and colors[i]!= 'Yellow':\n            return False\n        elif patterns[i] == 'P' and colors[i]!= 'Purple':\n            return False\n        elif patterns[i] == 'C' and colors[i]!= 'Cyan':\n            return False\n        elif patterns[i] == 'W' and colors[i]!= 'White':\n            return False\n        elif patterns[i] == 'O' and colors[i]!= 'Orange':\n            return False\n        elif patterns[i] == 'L' and colors[i]!= 'Lime':\n            return False\n        elif patterns[i] == 'A' and colors[i]!= 'Aqua':\n            return False\n        elif patterns[i] == 'T' and colors[i]!= 'Teal':\n            return False\n        elif patterns[i] == 'M' and colors[i]!= 'Magenta':\n            return False\n        elif patterns[i] == 'N' and colors[i]!= 'Navy':\n            return False\n        elif patterns[i] == 'K' and colors[i]!= 'Black':\n            return False\n    return True",
        "test": "assert is_samepatterns(['red', 'green', 'blue', 'yellow'], ['shape', 'color', 'pattern']) == False",
        "num_ids": 2506,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 7) == [], \"Test 4: Incorrect result\"",
        "num_ids": 2932,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as an input and returns True if the number is divisible by 11. Otherwise, it returns False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(44) == True",
        "num_ids": 1016,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert word_len('pear') == False",
        "num_ids": 1046,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n * (n + 1) * (n + 2) / 6)",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 1246,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Returns the volume of a sphere with radius r.\n    '''\n    return (4/3) * math.pi * r**3",
        "test": "assert volume_sphere(1) == 4/3 * math.pi, \"volume_sphere(1) should be 4/3 * pi\"",
        "num_ids": 1588,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initializing the ASCII value of the character 'a'\n    ascii_value = ord('a')\n    # Initializing the sum of ASCII values of all characters in the string\n    sum_ascii = 0\n    # Iterating through each character in the string\n    for char in strr:\n        # Adding the ASCII value of each character to the sum\n        sum_ascii += ord(char)\n    # Finding the character made by adding the ASCII value of all characters modulo 26\n    char_made = chr(ascii_value + (sum_ascii % 26))\n    return char_made",
        "test": "assert get_Char(\"xyz\") == 'z'",
        "num_ids": 1838,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def sequence(n):\n    '''\n    This function finds the nth number in the Newman Conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [1, 1]\n        for i in range(2, n):\n            next_num = sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]]\n            sequence_list.append(next_num)\n        return sequence_list[n-1]",
        "test": "assert sequence(2) == 1",
        "num_ids": 1561,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4 * math.pi",
        "num_ids": 1377,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Finds the nth centered hexagonal number.\n    \"\"\"\n    count = 1\n    hex_num = 1\n    \n    while count < n:\n        hex_num += 6 * count\n        count += 1\n        \n    return hex_num",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 1427,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6} # test case 1",
        "num_ids": 3188,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict",
        "test": "assert freq_count([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == {1: 1, 2: 2, 3: 3, 4: 4}",
        "num_ids": 2441,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        return N - 1",
        "test": "assert closest_num(2) == 1",
        "num_ids": 1363,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of strings and returns the length of the longest word in the list.\n    '''\n    max_len = 0\n    \n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            \n    return max_len",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6",
        "num_ids": 1642,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False",
        "test": "assert find_substring(\"hello world\", \"l\") == True",
        "num_ids": 1239,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether a given number is undulating or not.\n\n    Args:\n        n (int): An integer number.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    # Initialize variables\n    previous = 0\n    current = 1\n    is_undulating = True\n    \n    # Check if the number is odd\n    if n % 2 == 0:\n        is_undulating = False\n    \n    # Check if the number is 2 or 3\n    elif n == 2 or n == 3:\n        is_undulating = False\n    \n    # Check if the number is an even power of 2\n    elif n == 4 or n == 8:\n        is_undulating = True\n    \n    # Check if the number is a prime\n    elif n < 2:\n        is_undulating = False\n    \n    else:\n        # Check if the number is undulating\n        for i in range(3, n, 2):\n            if i % 5 == 0:\n                is_undulating = True\n                break\n            \n            previous = current\n            current = (previous + current) % i\n        \n        # Check if the number is not undulating\n        if current == 0:\n            is_undulating = False\n    \n    return is_undulating",
        "test": "assert is_undulating(1) == False",
        "num_ids": 3020,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments 'a' and 'b' and returns the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "test": "assert power(2,3) == 8",
        "num_ids": 927,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]\n",
        "test": "assert index_minimum([(1, 5), (2, 3), (4, 2), (3, 1), (5, 4)]) == 3",
        "num_ids": 2061,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5], [6]]) == 1",
        "num_ids": 2243,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(1) == 1",
        "num_ids": 1223,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def flatten_list(lst):\n    '''\n    Recursive function to flatten a list of lists.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result += flatten_list(sublist)\n        else:\n            result.append(sublist)\n    return result\n\ndef frequency_lists(lst):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_lst = flatten_list(lst)\n    freq = {}\n    for item in flat_lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 3120,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "test": "assert multiply_num([2, 3, 4]) == 24/3  # assert function checks if the output of the function is equal to the expected output",
        "num_ids": 1355,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 1387,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 25,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import sys\n\ndef is_palindrome(n):\n    \"\"\"\n    Returns True if the given integer is a palindrome, False otherwise.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of the given integer as an integer.\n    \"\"\"\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num",
        "test": "assert next_smallest_palindrome(123) == 131",
        "num_ids": 3246,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Invalid input\"\n    else:\n        arr.sort()\n        return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 1670,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 39,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function takes a snake_case string and returns a CamelCase string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 1407,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % 2 == 0 and m % 2 == 0:\n        return (n/2) * (m/2)\n    elif n % 2 == 0 and m % 2!= 0:\n        return (n/2) * m\n    elif n % 2!= 0 and m % 2 == 0:\n        return n * (m/2)\n    elif n % 2!= 0 and m % 2!= 0:\n        return n * m",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 1835,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['dog', 'cat', 'fish']]) == [['apple', 'banana', 'cherry'], ['cat', 'dog', 'fish']]",
        "num_ids": 3109,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "test": "assert count([False, False, False, False]) == 0",
        "num_ids": 1133,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + test_list",
        "test": "assert add_lists([1, 2, 3], []) == [1, 2, 3]",
        "num_ids": 1785,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 37,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n\n    heap = []\n\n    # Push all the elements of the first list into the heap\n    for i in num1:\n        heapq.heappush(heap, i)\n\n    # Push all the elements of the second list into the heap\n    for i in num2:\n        heapq.heappush(heap, i)\n\n    # Push all the elements of the third list into the heap\n    for i in num3:\n        heapq.heappush(heap, i)\n\n    # Pop the elements from the heap one by one and append to the result list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result",
        "test": "assert merge_sorted_list([],[],[]) == [] # test case 3",
        "num_ids": 4272,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Returns the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    s = [int(c) for c in s]\n    \n    # Initialize the count of odd numbers\n    count = 0\n    \n    # Rotate the string n times\n    for i in range(n):\n        # Get the last digit and append it to the beginning of the list\n        digit = s.pop()\n        s.insert(0, digit)\n        \n        # Check if the digit is odd\n        if digit % 2 == 1:\n            count += 1\n    \n    # Return the count of odd numbers\n    return count",
        "test": "assert odd_Equivalent('1011',4) == 3",
        "num_ids": 2089,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_elements = [x for x in nestedlist[i] if x in nestedlist[j]]\n            if common_elements:\n                common.extend(common_elements)\n    return common",
        "test": "assert common_in_nested_lists([[], [], []]) == []",
        "num_ids": 2747,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer('123') == True",
        "num_ids": 884,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Check if all dictionaries in a list are empty.\n\n    Args:\n        list1 (list): A list of dictionaries.\n\n    Returns:\n        bool: True if all dictionaries are empty, False otherwise.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 1093,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "test": "assert tuple_to_int((10,)) == 10",
        "num_ids": 1506,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            list_to_float(test_list[i])\n        else:\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                pass\n    return test_list",
        "test": "assert list_to_float([[\"1\", 2], [3.0, 4], [\"5\", \"6\"]]) == [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]",
        "num_ids": 3801,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_to_list(string):\n    \"\"\"\n    This function takes a string as input and returns a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 1310,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables for loop\n    i = 0\n    j = len(arr) - 1\n    \n    # Check for the element that appears only once\n    while i < j:\n        # Check if the sum of the two elements is equal to the total sum of the array\n        if arr[i] + arr[j] == sum(arr):\n            # If yes, return the element that appears only once\n            return arr[i]\n        # If the sum is less than the total sum, move to the right\n        elif arr[i] + arr[j] < sum(arr):\n            i += 1\n        # If the sum is greater than the total sum, move to the left\n        else:\n            j -= 1",
        "test": "assert search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == None # returns None as there is no element that appears only once",
        "num_ids": 2700,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[i][1]) > abs(list1[j][0]*list1[j][1]):\n                max_product = list1[i][0]*list1[i][1]\n            else:\n                max_product = list1[j][0]*list1[j][1]\n    \n    return max_product",
        "test": "assert max_product_tuple([(1,2), (3,4), (5,6)]) == 30",
        "num_ids": 2518,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            total += num\n    return total\n\ndef is_amicable(num):\n    '''\n    Check if a given number is amicable or not.\n    '''\n    divisor_sum = divisor_sum_of(num)\n    if num == divisor_sum_of(divisor_sum):\n        return True\n    return False\n\ndef divisor_sum_of(num):\n    '''\n    Calculate the sum of all divisors of a given number.\n    '''\n    total = 0\n    for i in range(1, num//2+1):\n        if num % i == 0:\n            total += i\n    return total",
        "test": "assert amicable_numbers_sum(5000000) == 2969629 # super large example input and output",
        "num_ids": 3035,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))",
        "test": "assert angle_complex(1,0) == 0",
        "num_ids": 1686,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_length = 0\n    count = 0\n    for i in range(n):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        max_length = max(max_length, count)\n    return max_length",
        "test": "assert find_length('010101') == 1",
        "num_ids": 5239,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of their common divisors.\n    \"\"\"\n    # find the smaller number\n    if a > b:\n        small = b\n    else:\n        small = a\n\n    # initialize sum to zero\n    sum = 0\n\n    # loop through from 1 to the smaller number\n    for i in range(1, small + 1):\n        # check if both numbers are divisible by i\n        if a % i == 0 and b % i == 0:\n            sum += i\n\n    return sum",
        "test": "assert sum(12,24) == 28, \"Sum of common divisors is not correct\"",
        "num_ids": 2291,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "test": "assert long_words(10, \"hello world\") == []",
        "num_ids": 1929,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    \n    # Check if the sum of each row and column is the same\n    if row_sums!= col_sums:\n        return False\n    \n    # Calculate the sum of the diagonals\n    diag_sum_1 = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    diag_sum_2 = sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])\n    \n    # Check if the sum of the diagonals is the same\n    if diag_sum_1!= diag_sum_2:\n        return False\n    \n    # If all three conditions are satisfied, then the matrix is a magic square\n    return True",
        "test": "assert magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) == True",
        "num_ids": 4706,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item",
        "test": "assert max_occurrences([1, 1, 1, 1]) == 1",
        "num_ids": 1949,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_indices = [i for i, char in enumerate(str1) if char.lower() in vowels]\n    \n    for i in range(len(vowel_indices)//2):\n        left = vowel_indices[i]\n        right = vowel_indices[-i-1]\n        str1 = str1[:left] + str1[right] + str1[left+1:right] + str1[left] + str1[right+1:]\n    \n    return str1",
        "test": "assert reverse_vowels(\"aeiou\") == \"uoiea\"",
        "num_ids": 2360,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 28,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as input and returns a string.\n    \"\"\"\n    # Convert the tuple to a string and return it.\n    return str(tup1)",
        "test": "assert tup_string((1,2,3)) == '(1, 2, 3)'",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "test": "assert sum_negativenum([-1, -2, -3, -4, -5]) == -15",
        "num_ids": 1660,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n * (2 * n - 1)\n    return num\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 1080,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    ratio = count / len(nums)\n    return ratio",
        "test": "assert zero_count(array('i', [1, 2, 3, 4, 5])) == 0",
        "num_ids": 2400,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_set = set()\n    for i in range(32):\n        power_set.add(2**i)\n    if n in power_set:\n        return True\n    else:\n        return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(5) == False",
        "num_ids": 2368,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference",
        "test": "assert circle_circumference(0) == 0, \"Incorrect circumference for radius 0\"",
        "num_ids": 1787,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for element in test_list:\n        if isinstance(element, list):\n            result.extend(extract_singly(element))\n        else:\n            result.append(element)\n    return result",
        "test": "assert extract_singly([[1,2,3],[4,5,6],[7,8,9]]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 2288,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Pancake Sort algorithm.\n    \"\"\"\n    def flip(nums, k):\n        \"\"\"\n        Flip the first k elements of the list.\n        \"\"\"\n        for i in range(k // 2):\n            nums[i], nums[k - i - 1] = nums[k - i - 1], nums[i]\n    \n    # Start sorting the list from the largest to smallest.\n    for size in range(len(nums), 1, -1):\n        # Find the index of the maximum element in the unsorted part of the list.\n        max_index = nums.index(max(nums[:size]))\n        \n        # If the maximum element is not at the beginning of the list, flip it to the beginning.\n        if max_index!= 0:\n            flip(nums, max_index + 1)\n        \n        # Flip the entire list to sort it in descending order.\n        flip(nums, size)\n    \n    return nums",
        "test": "assert pancake_sort([1]) == [1]",
        "num_ids": 3226,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Count number of items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[1,2,3],[2,2,3]) == 2",
        "num_ids": 2133,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    \n    for item in Input:\n        if type(item) == list:\n            count += 1\n    \n    return count",
        "test": "assert find_lists(()) == 0 # empty tuple",
        "num_ids": 1609,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "test": "assert max_Abs_Diff([1,1,1,1,1]) == 0",
        "num_ids": 2006,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        if a == 0:\n            return None\n        else:\n            return (n, 0)\n    else:\n        x = n // b\n        y = n - b * x\n        if a * x + b * y == n:\n            return (x, y)\n        else:\n            return None",
        "test": "assert find_solution(4, 5, 7) == None",
        "num_ids": 2234,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 1903,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def sum_series(n):\n    '''\n    This function calculates the sum of the series (n - 2*i) from i=0 to n // 2.\n    '''\n    if n % 2 == 0:\n        return (n // 2) * (n // 2 + 1)\n    else:\n        return ((n // 2) * (n // 2 + 1)) + ((n // 2) * (n // 2 + 1) + (n // 2))\n",
        "test": "assert sum_series(0) == 0",
        "num_ids": 1698,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * l**2 * tan(pi / s)) / s\n    return area",
        "test": "assert area_polygon(10, 3) == 9.424777960769379",
        "num_ids": 1725,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of two integers are the same, else it returns False.\n    '''\n    div1 = []\n    div2 = []\n    for i in range(1, n+1): \n        if n % i == 0: \n            div1.append(i)\n    for i in range(1, n+1): \n        if n % i == 0: \n            div2.append(i)\n    if sum(div1) == sum(div2): \n        return True\n    else: \n        return False",
        "test": "assert div_sum(1) == True",
        "num_ids": 1748,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Parameters:\n    str1 (str): the input string\n    \n    Returns:\n    int: the number of characters that occur at the same position as in the English alphabet\n    \"\"\"\n\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n\n    # Initialize the dictionary to store the character counts\n    char_counts = {}\n\n    # Iterate over the characters in the input string\n    for i, char in enumerate(str1):\n        # Check if the current character is in the English alphabet\n        if 'a' <= char <= 'z':\n            # If it is, check if it's the same position as in the English alphabet\n            if ord(char) - ord('a') == i:\n                # If it is, update the character count in the dictionary\n                if char in char_counts:\n                    char_counts[char] += 1\n                else:\n                    char_counts[char] = 1\n\n    # Return the total number of character counts in the dictionary\n    return sum(char_counts.values())",
        "test": "assert count_char_position(\"1234567890\") == 0",
        "num_ids": 4368,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([0,0,0,0,0]) == 10",
        "num_ids": 1904,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 39,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 1268,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9,10], 5) == 1",
        "num_ids": 1621,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])",
        "test": "assert sum_range_list([1,2,3,4,5], 0, 4) == 15",
        "num_ids": 2561,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "test": "assert perimeter_pentagon(10) == 50.0",
        "num_ids": 1220,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "test": "assert count_occurance('hello') == 0",
        "num_ids": 1396,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function checks if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(test_tuple) == 0:\n        return False\n    first_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= first_type:\n            return False\n    return True",
        "test": "assert check_type((1,2,3)) == True",
        "num_ids": 1518,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1, 2, 3, 4, 4, 4, 5, 5, 5, 5], 10, 6) == False",
        "num_ids": 2647,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 1064,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            continue\n        new_str += str[i]\n    return new_str",
        "test": "assert odd_values_string('123456') == '135'",
        "num_ids": 1379,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c: \n        return a \n    elif b<=a and b<=c: \n        return b \n    else: \n        return c ",
        "test": "assert min_of_three(2,5,3) == 2",
        "num_ids": 1436,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments:\n    1. n: an integer denoting the number of bits.\n    2. l: an integer denoting the leftmost position of the range.\n    3. r: an integer denoting the rightmost position of the range.\n    It returns True if all the bits in the range [l, r] are set, False otherwise.\n    \"\"\"\n    # Calculate the mask for the given range\n    mask = 0\n    for i in range(l, r+1):\n        mask |= (1 << i)\n    \n    # Check if all bits in the given range are set\n    if mask & n == mask:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,1,3)==False #Example",
        "num_ids": 2644,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def re_arrange_array(arr, n):\n    # Separate positive and negative elements\n    pos_arr = []\n    neg_arr = []\n    for i in range(n):\n        if arr[i] >= 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n    \n    # Re-arrange the array so that negative elements appear first\n    arr = neg_arr + pos_arr\n    \n    return arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5] # test case 2",
        "num_ids": 3147,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank('hello world','*') == 'hello*world'",
        "num_ids": 1325,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(list(heap), reverse=True)",
        "test": "assert larg_nnum([1, 5, 2, 9, 8, 10, 3, 7, 6], 1) == [10]",
        "num_ids": 2481,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * 3.14159 * r * h\n    return lateral_area",
        "test": "assert lateralsuface_cylinder(0,5) == 0, \"Function is not correct\"",
        "num_ids": 2252,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "test": "assert volume_cube(3) == 27",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n    \"\"\"\n    mask = 1 << 1  # left shift 1 bit to the left\n    result = 0\n    for i in range(32):  # iterate over 32 bits\n        if n & mask:\n            result |= mask\n        mask <<= 1  # shift the mask to the left by 1 bit\n    return result",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 1628,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count",
        "test": "assert check_occurences([(1,2), (2,3), (1,2), (3,4)]) == {(1, 2): 2, (2, 3): 1, (3, 4): 1}",
        "num_ids": 2900,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"a\") == 1",
        "num_ids": 1480,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    elif n == 2:\n        return m * (m-1) // 2\n    else:\n        count = 0\n        for i in range(1, m):\n            count += get_total_number_of_sequences(m-i, n-1)\n        return count\n",
        "test": "assert get_total_number_of_sequences(2,2) == 1",
        "num_ids": 2089,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if the second list is not empty\n    if len(list2) > 0:\n        # replace the last element of the first list with the elements of the second list\n        list1[-1] = list2\n    return list1",
        "test": "assert replace_list([],[]) == []",
        "num_ids": 1576,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)",
        "test": "assert count_charac(\"Hello World!\") == 12",
        "num_ids": 1037,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = N + 1\n    while math.sqrt(i)!= int(math.sqrt(i)):\n        i += 1\n    return int(math.sqrt(i))**2",
        "test": "assert next_Perfect_Square(5) == 9",
        "num_ids": 1504,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    return max(dp)",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 3006,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.000001:\n        guess = (guess + number/guess) / 2\n    return guess",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 1846,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    max_len = 1\n    for k in range(2, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n                max_len = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                max_len = max(max_len, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return max_len",
        "test": "assert lps(\"abb\") == 2",
        "num_ids": 3018,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 29,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "test": "assert harmonic_sum(1) == 1.0",
        "num_ids": 1425,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "test": "assert intersection_array([1,2,3,4,5],[2,4,6,8]) == [2, 4]",
        "num_ids": 1831,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X((1,2,3,4,5), 3) == 1",
        "num_ids": 1553,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list",
        "test": "assert insert_element([1,2,3,4,5],[10,20,30])!= [1, 2, 3, 4, 5, 10, 20, 30]",
        "num_ids": 1986,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of tuples containing the polar coordinates of the complex numbers.\n    '''\n    polar_coords = []\n    for num in numbers:\n        polar_coords.append((cmath.polar(num)[0], cmath.polar(num)[1]))\n    return polar_coords",
        "test": "assert convert(-4j) == (cmath.phase(-4j), 3.141592653589793)",
        "num_ids": 2060,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1494,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    This function takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = list(combinations_with_replacement(l, n))\n    return comb",
        "test": "assert combinations_colors(['red', 'green', 'blue'], 1) == [('red',), ('green',), ('blue',)]",
        "num_ids": 5576,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4 ",
        "num_ids": 2198,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b,a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 1161,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple with the two elements that are the highest in value.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup2[0] > test_tup1[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2",
        "test": "assert maximize_elements((1,2,3),(2,3,1)) == maximize_elements((1,2,3),(2,3,1))",
        "num_ids": 2503,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime or not\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    '''\n    Function to find the nth newman-shanks-williams prime number\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    p = 5\n    count = 1\n    while count < n:\n        p += 2\n        count += 1\n        if is_prime(p) and is_prime(p-2) and is_prime(p-4):\n            count += 1\n        else:\n            p -= 4\n            count -= 1\n    return p",
        "test": "assert newman_prime(1) == 2, \"newman_prime(1) should return 2\"",
        "num_ids": 2812,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "test": "assert division_elements((2, 4, 6), (1, 2, 3)) == (2, 2, 2)",
        "num_ids": 2415,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"Error: L should be less than or equal to the length of the list.\"\n    else:\n        return (list1[:L], list1[L:])",
        "test": "assert split_two_parts([1, 2, 3, 4, 5, 6, 7], 4) == ([1, 2, 3, 4], [5, 6, 7])",
        "num_ids": 2703,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7",
        "test": "assert dog_age(0) == 0",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element,\n    returning a list of the resulting lists.\n    \"\"\"\n    n = step\n    splits = []\n    for i in range(0, len(S), n):\n        splits.append(S[i:i+n])\n    return splits",
        "test": "assert list_split([], 1) == []",
        "num_ids": 3145,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes a single argument, l, which represents the length of a cube.\n    It returns the lateral surface area of the cube.\n    '''\n    lateralsurface = 6 * l ** 2\n    return lateralsurface",
        "test": "assert lateralsurface_cube(10) == 600",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1294,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    \n    # calculate previous star number\n    prev_num = find_star_num(n-1)\n    \n    # calculate current star number\n    current_num = (prev_num * (n-1)) + n\n    \n    return current_num",
        "test": "assert find_star_num(1) == 1, \"find_star_num(1) should be 1\"",
        "num_ids": 1360,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 858,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    # Initialize sum to zero\n    even_sum = 0\n    \n    # Loop through the list, starting from the second element (index 1)\n    for i in range(1, len(arr), 2):\n        # If the current element is even, add it to the sum\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    \n    # Return the sum\n    return even_sum",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0",
        "num_ids": 2400,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count**5\n            count += 1\n        else:\n            count += 1\n    return sum",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 2323,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 1851,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "test": "assert substract_elements((0,0,0),(1,2,3)) == (-1,-2,-3)",
        "num_ids": 2345,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total_sum = 0\n    for i in range(2, n+1, 2):\n        total_sum += math.comb(n, i)\n    return total_sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1681,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cylinder(0,5) == 0",
        "num_ids": 1829,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict",
        "test": "assert dict_filter({'a': 5, 'b': 2, 'c': 7}, 4) == {'a': 5, 'c': 7}",
        "num_ids": 2317,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == test_tup.index(test_tup[i]):\n            break\n        count += 1\n    return count",
        "test": "assert count_first_elements((1, 1, 1, 1, 1, 1)) == 0",
        "num_ids": 1762,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    count = 0\n    i = 1\n    decagonal = 0\n    while count < n:\n        decagonal += i\n        count += 1\n        i *= 10\n    return decagonal",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1539,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n\n    return (False, -1)",
        "test": "assert sequential_search([1,2,3,4,5], 3) == (True, 2)",
        "num_ids": 2034,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)",
        "test": "assert all_unique(['a', 'b', 'c']) == True",
        "num_ids": 1357,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[1,2,3]) == [0,0,0]",
        "num_ids": 1892,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]  # split the integer into its digits\n    freq = {}  # create a dictionary to keep track of the frequency of each digit\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False  # return False if a digit has a frequency greater than the digit itself\n    return True  # return True if all digits have a frequency less than or equal to the digit itself",
        "test": "assert validate(12345) == True",
        "num_ids": 1415,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n\n    Args:\n        lst (list): List of items to check.\n        elem (any): Element to check against.\n\n    Returns:\n        bool: True if all items in the list are equal to the element, False otherwise.\n    '''\n    return all(elem == x for x in lst)",
        "test": "assert check_element([1,1,1,1,1],1) == True",
        "num_ids": 1569,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three(\"aba\") == False",
        "num_ids": 1311,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = float('-inf') \n    for i in range(k): \n        curr_sum = 0 \n        for j in range(n): \n            curr_sum += a[j] \n            if curr_sum > max_sum: \n                max_sum = curr_sum \n    return max_sum ",
        "test": "assert max_sub_array_sum_repeated([1,2,3,4,5], 5, 1) == 15",
        "num_ids": 3253,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum variable to zero\n    sum = 0\n    # loop through first n even numbers\n    for i in range(2, n*2, 2):\n        # add the square of current even number to the sum variable\n        sum += i**2\n    # return the sum of squares\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "test": "assert max_length([[], [1], [1, 2], [1, 2, 3], [1, 2, 3, 4]]) == [1, 2, 3, 4]",
        "num_ids": 2589,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n\n    # Base case for 1 post\n    for i in range(k+1):\n        dp[1][i] = 1\n\n    # Fill the DP table in bottom-up manner\n    for i in range(2, n+1):\n        for j in range(k+1):\n            dp[i][j] = dp[i-1][j]  # If we don't paint the last post\n\n            # If we paint the last post with a different color\n            if j > 1:\n                dp[i][j] += dp[i-2][j-2]  # We can reuse the same color for the two adjacent posts\n\n            # If we paint the last post with the same color\n            if j == 1:\n                dp[i][j] += dp[i-2][j]  # We can reuse the same color for the two adjacent posts\n\n    return dp[n][k]",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 2525,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find(n, m):\n    \"\"\"\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n\n    :param n: The first number\n    :param m: The second number\n    :return: The quotient of n and m (rounded down to the nearest integer)\n    \"\"\"\n    return n // m",
        "test": "assert find(10,3) == 3",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 1444,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val",
        "test": "assert max_val([1,2,3,4,5]) == 5",
        "num_ids": 1670,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes an integer as input and returns the sum of all its divisors.\n    \"\"\"\n    div_sum = 0  # Initialize the sum of divisors to zero\n    for i in range(1, number + 1):  # Loop through all numbers from 1 to the input number\n        if number % i == 0:  # Check if the number is a divisor\n            div_sum += i  # Add the divisor to the sum of divisors\n    return div_sum  # Return the sum of divisors",
        "test": "assert sum_div(10) == 18 #1+2+5+10",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count",
        "test": "assert get_Inv_Count([]) == 0",
        "num_ids": 2992,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert flatten_list([1, 2, 3, [4, 5, [6, 7], 8], 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 2070,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(int)\n    max_agg = 0\n    \n    for t in stdata:\n        data[t[0]] += t[1]\n        data[t[1]] += t[0]\n        \n        if data[t[0]] - data[t[1]] > max_agg:\n            max_agg = data[t[0]] - data[t[1]]\n    \n    return max_agg",
        "test": "assert max_aggregate([(1, 2), (-3, 4), (5, -6)]) == 7",
        "num_ids": 3123,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2 ** n):\n        first_sum = 0\n        last_sum = 0\n        bin_num = bin(i)[2:]\n        bin_num = '0' * (n - len(bin_num)) + bin_num\n        for j in range(n):\n            first_sum += int(bin_num[j])\n            last_sum += int(bin_num[-j - 1])\n        if first_sum == last_sum:\n            count += 1\n    return count",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 2549,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
        "test": "assert dict_depth({1:2, 3:4}) == 1",
        "num_ids": 1535,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    This function takes an array and two integers as input and returns the element at the given index after rotating the array by a certain number of times.\n    '''\n    # Define a function to perform the rotation\n    def rotate_Array(arr, rotations):\n        return arr[-rotations:] + arr[:-rotations]\n\n    # Rotate the array by the required number of times\n    rotated_Array = rotate_Array(arr, rotations)\n\n    # Return the element at the given index\n    return rotated_Array[index]",
        "test": "assert find_Element([1,2,3,4,5,6,7,8,9,10], [[0,4]], 0, 0) == 1",
        "num_ids": 3069,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = [word for word in words if re.match(r\"^p\\w\", word.lower())]\n    if len(p_words) < 2:\n        return None\n    return p_words[0], p_words[1]",
        "test": "assert start_withp(['pumpkin', 'pineapple', 'peach', 'pear']) == ('pumpkin', 'pineapple')",
        "num_ids": 2321,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n-1:\n        return a[index]\n    \n    max_sum = 0\n    for i in range(index+1, n):\n        if a[i] > a[index]:\n            if k > i:\n                max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[index])\n            else:\n                max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, i+1) + a[index])\n                \n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 0",
        "num_ids": 4353,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    colon = colon[m-1:n]\n    return colon",
        "test": "assert colon_tuplex((1,2,3,4),3,1) == ()",
        "num_ids": 2100,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 380,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    \n    products.sort(reverse=True)\n    return products[:N]",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 4) == [48, 48, 48, 54]",
        "num_ids": 3714,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2,3)==3",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 1285,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = n & (n-1)\n    return n | mask + 1",
        "test": "assert set_left_most_unset_bit(0b00000000) == 0b00000001",
        "num_ids": 1800,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone with base radius r and height h.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(1,2) == 2*math.pi*1*1/3",
        "num_ids": 1525,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 39,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    \n    while power_of_2 <= n:\n        power_of_2 *= 2\n        \n    return power_of_2 // 2\n",
        "test": "assert highest_Power_of_2(3)==2",
        "num_ids": 1287,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 28,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(2) == 3",
        "num_ids": 1354,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "test": "assert add_string([1, 2, 3], 'The number is {}') == ['The number is 1', 'The number is 2', 'The number is 3']",
        "num_ids": 2192,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result",
        "test": "assert convert_list_dictionary([1,2,3], ['a', 'b', 'c'], ['x', 'y', 'z']) == {1: {'a': 'x'}, 2: {'b': 'y'}, 3: {'c': 'z'}}",
        "num_ids": 3187,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 2196,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[], [1], [1, 2], [1, 2, 3]]) == [1, 2, 3]",
        "num_ids": 2233,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n    \n    # Loop through each element in the tuple\n    for elem in test_tup:\n        # If the element is already in the set, return False\n        if elem in unique_set:\n            return False\n        else:\n            # Otherwise, add the element to the set\n            unique_set.add(elem)\n    \n    # If all elements are unique, return True\n    return True",
        "test": "assert check_distinct((1, 2, 3)) == True",
        "num_ids": 1261,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_non_repeating_character(s):\n    \"\"\"\n    Returns the first character in s that is not repeated. If all characters are repeated, returns None.\n    \"\"\"\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n    for c in s:\n        if freq[c] == 1:\n            return c\n    return None",
        "test": "assert first_non_repeating_character('leetcode') == 'l'",
        "num_ids": 2148,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_char('aab') == False",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers\n    nums = sorted([a, b, c])\n\n    # Find the median\n    if len(nums) % 2 == 0:\n        median = (nums[len(nums)//2 - 1] + nums[len(nums)//2]) / 2\n    else:\n        median = nums[len(nums)//2]\n\n    return median",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 1843,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        while num > 0:\n            digit = num % 10\n            sum += digit\n            num = num // 10\n    return sum",
        "test": "assert sum_of_digits([0, 0, 0]) == 0",
        "num_ids": 1909,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "test": "assert bitwise_xor((1, 0, 1), (0, 1, 1)) == (1, 1, 0) # tuple of bits",
        "num_ids": 2272,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tuple in test_list:\n        if tuple not in unique_tuples:\n            unique_tuples.add(tuple)\n    return len(unique_tuples)",
        "test": "assert extract_freq(['apple', 'banana', 'cherry', 'apple']) == 3 # testing with list of repeated strings",
        "num_ids": 1891,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_result = []\n        for j in range(len(test_tup1[i])):\n            inner_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(inner_result))\n    return tuple(result)",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((10, 20), (30, 40))) == ((11, 22), (33, 44))",
        "num_ids": 2894,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function returns the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(10,20) == 10",
        "num_ids": 940,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    :param tuplex: The tuple to search in.\n    :type tuplex: tuple\n    :param tuple1: The element to search for.\n    :type tuple1: Any type\n\n    :return: True if the element exists, False otherwise.\n    :rtype: bool\n    \"\"\"\n    return tuple1 in tuplex",
        "test": "assert check_tuplex((1,2,3),(4,5)) == False",
        "num_ids": 1638,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer as input and returns True if the parity of the number is odd, otherwise it returns False.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert find_Parity(3) == True",
        "num_ids": 1024,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_str = str(n)\n    n_list = list(n_str)\n\n    # Find the rightmost digit to be swapped\n    i = len(n_list) - 1\n    while i > 0 and n_list[i] >= n_list[i-1]:\n        i -= 1\n\n    # If no digit is found, return -1\n    if i == 0:\n        return -1\n\n    # Find the digit on its right that is greater than the digit to be swapped\n    j = len(n_list) - 1\n    while j >= i and n_list[j] <= n_list[i-1]:\n        j -= 1\n\n    # Swap the digits\n    n_list[i-1], n_list[j] = n_list[j], n_list[i-1]\n\n    # Rearrange the digits to the right of the swapped digit\n    n_list[i:] = sorted(n_list[i:])\n\n    # Convert the list back to a number and return it\n    return int(''.join(n_list))",
        "test": "assert rearrange_bigger(12) == -1",
        "num_ids": 3195,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # create a max-heap of pairs (num1, num2)\n    heap = [(nums1[i], nums2[j], i, j) for i in range(len(nums1)) for j in range(len(nums2))]\n    heapq.heapify(heap)\n    \n    # extract the k smallest pairs from the heap\n    result = []\n    for i in range(k):\n        pair = heapq.heappop(heap)\n        result.append((pair[0], pair[1]))\n    \n    return result",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)]",
        "num_ids": 3171,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1,2), (3,4), (5,6), (7,8)]) == 24",
        "num_ids": 2701,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for val in listval[1:]:\n            if val < min_val:\n                min_val = val\n        return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1694,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function takes a string in snake case and returns the same string in camel case.\n    '''\n    # Splitting the string into words\n    words = word.split('_')\n    \n    # Capitalizing the first letter of each word except the first word\n    for i in range(1, len(words)):\n        words[i] = words[i].capitalize()\n        \n    # Joining the words back to string\n    camel_case = ''.join(words)\n    \n    return camel_case",
        "test": "assert snake_to_camel('') == ''",
        "num_ids": 1590,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function removes all odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 1414,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n    '''\n    # create a list of tuples from the given list\n    tuples_list = [(i[0], i[1]) for i in list1]\n\n    # extract the nth element from the list of tuples\n    nth_element = tuples_list[n-1][1]\n\n    return nth_element",
        "test": "assert extract_nth_element([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')], 1) == 'a'",
        "num_ids": 1830,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def overlapping(list1, list2):\n    '''\n    Returns True if any value in list1 exists in list2, or False otherwise.\n    '''\n    return any(elem in list2 for elem in list1)",
        "test": "assert overlapping([1,2,3,4],[3,4,5,6])==True",
        "num_ids": 1402,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair",
        "test": "assert max_Product([1,2,3,4,5]) == (4,5)",
        "num_ids": 2371,
        "indeed": true
    },
    {
        "number": 417,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif common_element!= tup[0]:\n            return None\n    return common_element",
        "test": "assert group_tuples([(1,2,3),(4,5,6),(7,8,9)]) == None",
        "num_ids": 3077,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    \n    for ele in lst:\n        if len(str(ele)) > max_len:\n            max_len = len(str(ele))\n            max_ele = ele\n    \n    return max_ele",
        "test": "assert Find_Max(['apple', 'banana', 'cherry', 'date', 'elderberry']) == 'elderberry'",
        "num_ids": 1720,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "test": "assert round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5]) == 2.5 * 5",
        "num_ids": 2320,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize the sum of cubes to 0\n    sum_of_cubes = 0\n    \n    # Loop through first n even natural numbers and add their cubes to sum_of_cubes\n    for i in range(2, n*2, 2):\n        sum_of_cubes += i**3\n        \n    return sum_of_cubes",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 1199,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def concatenate_tuple(test_tup, delimiter='-'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-1]",
        "test": "assert concatenate_tuple(('apple',)) == 'apple'",
        "num_ids": 1465,
        "indeed": true
    },
    {
        "number": 422,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and finds the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1473,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function extracts only the rear index element of each string in the given tuple.\n    '''\n    result_tuple = ()\n    for string in test_tuple:\n        rear_index = len(string) - 1\n        result_tuple = result_tuple + (string[rear_index],)\n    return result_tuple",
        "test": "assert extract_rear(tuple()) == tuple()",
        "num_ids": 1694,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function takes a list and a particular element as input and returns the number of sublists in the list that contain the element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([[1,2,3], [4,5,6], [7,8,9]], 5) == 1",
        "num_ids": 2037,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "test": "assert filter_oddnumbers([]) == []",
        "num_ids": 1664,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        return 'Invalid date format. Please enter in yyyy-mm-dd format.'",
        "test": "assert change_date_format('2021-10-25') == '25-10-2021'",
        "num_ids": 2528,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 38,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given list using the shell sort algorithm.\n\n    :param my_list: the list to be sorted\n    :return: the sorted list\n    \"\"\"\n\n    # define the gap between adjacent elements to be sorted\n    gap = len(my_list) // 2\n\n    # iterate over the gap until it becomes 1\n    while gap > 0:\n        # iterate over the list using the gap\n        for i in range(gap, len(my_list)):\n            # define the current element and the previous one\n            current_element = my_list[i]\n            previous_element = my_list[i - gap]\n\n            # compare the current element with the previous one\n            while current_element < previous_element and i >= gap:\n                # swap the elements if necessary\n                my_list[i] = previous_element\n                i -= gap\n                previous_element = my_list[i - gap]\n\n            # insert the current element at the correct position\n            my_list[i] = current_element\n\n        # reduce the gap for the next iteration\n        gap = gap // 2\n\n    return my_list",
        "test": "assert shell_sort([5, 2, 4, 6, 1, 3]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 2663,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup",
        "test": "assert and_tuples((True, True), (True, True)) == (True, True)",
        "num_ids": 1827,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is greater than zero\n    if discriminant > 0:\n        # Calculate the two roots of the equation\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n\n        # Return the root with the positive imaginary part\n        if root1.imag > 0:\n            return root1\n        else:\n            return root2\n    else:\n        # If the discriminant is less than or equal to zero, the parabola has no directrix\n        return None",
        "test": "assert parabola_directrix(1, 0, -1) == -1, \"parabola_directrix(1, 0, -1) should be -1\"",
        "num_ids": 2902,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1).intersection(set(list2))) > 0:\n        return True\n    else:\n        return False",
        "test": "assert common_element([1, 2, 3], [3, 4, 5]) == True",
        "num_ids": 1593,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the median length of the trapezium\n    median = (base1 + base2) / 2\n    \n    # return the result\n    return median",
        "test": "assert median_trapezium(0,0,0) == 0",
        "num_ids": 1659,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 1, 1, 1, 1], 1) == False",
        "num_ids": 1573,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\Sb+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one(\"a\") == False",
        "num_ids": 1138,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a new list containing only the negative numbers from the input list.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num < 0:\n            result.append(num)\n    return result",
        "test": "assert neg_nos([1, 2, -3, 4, -5]) == [-3, -5]",
        "num_ids": 1687,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def remove_odd(str1):\n    '''\n    This function removes all odd characters from a given string.\n    '''\n    # converting the string to a list of characters\n    str1 = list(str1)\n\n    # iterating through the list and removing odd characters\n    for i in range(len(str1)-1, -1, -1):\n        if ord(str1[i]) % 2 == 1:\n            str1.pop(i)\n\n    # joining the list of characters to form the final string\n    return ''.join(str1)",
        "test": "assert remove_odd(\"hello\") == \"hll\"",
        "num_ids": 1336,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_bidirectional(test_list):\n    '''\n    This function takes a list of tuples as input and returns the number of bidirectional tuples in the list.\n    A bidirectional tuple pair is a pair of tuples where the first element in one tuple is equal to the second element in the other tuple.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(1,2),(3,4),(5,6)]) == 0",
        "num_ids": 2648,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result",
        "test": "assert multiple_to_single([0, 0, 0, 0, 0]) == 0",
        "num_ids": 1676,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence using regular expressions\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n\n    # If there are no adverbs in the sentence, return None\n    if not adverbs:\n        return None\n\n    # Find the position of the first adverb in the sentence\n    first_adverb = adverbs[0]\n    first_position = text.find(first_adverb)\n\n    # Return a tuple containing the first adverb and its position\n    return (first_adverb, first_position)",
        "test": "assert find_adverb_position(\"The cat is sleeping.\") == None",
        "num_ids": 3172,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a size of a cube as input and returns its surface area.\n    '''\n    surface_area = 6 * l**2\n    return surface_area",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 1186,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
        "test": "assert positive_count([0, -1, -2, -3, -4]) == 0/5",
        "num_ids": 1805,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1: \n        if num < 0: \n            if largest is None or num > largest: \n                largest = num\n    return largest",
        "test": "assert largest_neg([-1, -2, -3, -4, -5]) == -1",
        "num_ids": 1781,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tpl in test_list:\n        trimmed_tpl = tuple(tpl[K:])\n        result.append(trimmed_tpl)\n    return result",
        "test": "assert trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 0) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]",
        "num_ids": 2512,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the result of multiplication of corresponding tuple elements.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "test": "assert index_multiplication((1,2,3), (2,3,4)) == (2, 6, 12)",
        "num_ids": 2128,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes in a tuple and a list as inputs and returns a dictionary containing the count of each element in the list that is present in the tuple.\n    '''\n    count_dict = Counter(lst)\n    result_dict = {}\n    for item in tup:\n        if item in count_dict:\n            result_dict[item] = count_dict[item]\n    return result_dict",
        "test": "assert count_Occurrence((1, 2, 3, 4), [1, 2, 3, 4]) == Counter({1: 1, 2: 1, 3: 1, 4: 1})",
        "num_ids": 2384,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 1834,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n < 1:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    else:\n        return n + cal_sum(n-1)\n",
        "test": "assert cal_sum(1) == 1",
        "num_ids": 1453,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def extract_string(str_list, n):\n    '''\n    This function takes a list of string values and extracts a specified number of\n    strings from the list. The function returns a list of extracted strings.\n    '''\n    # Initialize an empty list to store extracted strings\n    extracted_strings = []\n\n    # Loop through each string in the list\n    for string in str_list:\n        # Check if the length of the string is greater than or equal to the specified size\n        if len(string) >= n:\n            # If yes, append the string to the extracted_strings list\n            extracted_strings.append(string[:n])\n\n    # Return the extracted_strings list\n    return extracted_strings",
        "test": "assert extract_string(\"abcde\", 1) == ['a', 'b', 'c', 'd', 'e']",
        "num_ids": 2106,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "test": "assert remove_whitespaces('hello world') == 'helloworld'",
        "num_ids": 1414,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculates the loss amount on a sale if the given sale amount is less than the actual cost.\n    If the sale amount is greater than or equal to the actual cost, returns 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(100,100) == 0",
        "num_ids": 1393,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum \n\nprint(\"Sum of even factors of\", 24, \"is:\", sumofFactors(24)) \nprint(\"Sum of even factors of\", 12, \"is:\", sumofFactors(12)) ",
        "test": "assert sumofFactors(2) == 2, \"Test 1 failed\"",
        "num_ids": 3309,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog.\")!= [\"fox\", \"jumps\", \"dog\"]",
        "num_ids": 1632,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False",
        "test": "assert check_monthnumb_number(3) == False",
        "num_ids": 1884,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Reverses each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 1698,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist",
        "test": "assert Find_Min([[1,2],[3],[4,5,6]]) == [3]",
        "num_ids": 2239,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rectangle_area(length, breadth):\n    \"\"\"\n    This function takes the length and breadth of a rectangle as input and returns its area.\n    \"\"\"\n    area = length * breadth\n    return area",
        "test": "assert rectangle_area(2,3) == 6",
        "num_ids": 1215,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n    \"\"\"\n    # Use regular expression to match uppercase substrings\n    pattern = r'[A-Z]+'\n    matches = re.findall(pattern, str1)\n    \n    # Remove uppercase substrings from the original string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    return str1",
        "test": "assert remove_uppercase(\"hello, world!\") == \"hello, world!\"",
        "num_ids": 1603,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def Extract(lst):\n    \"\"\"\n    Extracts the first element of each sublist in the input list and returns a new list.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n        else:\n            result.append(None)\n    return result",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6], [7, 8, 9, 10]]) == [1, 3, 6, 7]",
        "num_ids": 1538,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"HELLO WORLD\") == 10",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n    \"\"\"\n    n = len(lst)\n    comb_list = []\n    for i in range(n):\n        for j in range(i+1, n):\n            comb_list.append(lst[i] + lst[j])\n    return comb_list",
        "test": "assert combinations_list([]) == []",
        "num_ids": 3186,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here * arr[i], min_ending_here * arr[i], arr[i])\n        min_ending_here = min(temp * arr[i], min_ending_here * arr[i], arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far",
        "test": "assert max_subarray_product([1]) == 1",
        "num_ids": 2550,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 36,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert check_value({'a': 5, 'b': 10, 'c': 5}, 5) == False",
        "num_ids": 1913,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 1804,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    \n    # Initialize the maximum product and minimum product\n    max_prod = arr[0]\n    min_prod = arr[0]\n    \n    # Initialize the maximum product ending at the current index and minimum product ending at the current index\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    # Traverse the array from the second element to the last element\n    for i in range(1, n):\n        # Update the maximum product ending at the current index\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        \n        # Update the minimum product ending at the current index\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        \n        # Update the maximum product seen so far\n        max_prod = max(max_prod, max_ending_here)\n    \n    return max_prod",
        "test": "assert max_product([0,0,0,0,0]) == 0",
        "num_ids": 2885,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "test": "assert add_pairwise((3, 6, 9)) == (6, 10, 12)",
        "num_ids": 1913,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    return product",
        "test": "assert find_remainder([2, 4, 6, 8, 10], 5) == 0",
        "num_ids": 1595,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if the list contains consecutive numbers, otherwise False.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False",
        "test": "assert check_Consecutive([1,3,5,7,9]) == False",
        "num_ids": 1453,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1 & set2\n    return sorted(list(intersection))",
        "test": "assert tuple_intersection([(1,2),(3,4),(5,6)], []) == []",
        "num_ids": 2871,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n\n    :param str1: The input string.\n    :param ch: The character to be replaced.\n    :param newch: The new character to replace the old character.\n    :return: The modified string with the character replaced.\n    \"\"\"\n    modified_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            modified_str += newch\n        else:\n            modified_str += str1[i]\n    return modified_str",
        "test": "assert replace_char('hello world','o','*') == 'hell* w*rld'",
        "num_ids": 1575,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return Counter(dict1).most_common()",
        "test": "assert sort_counter({'e':1, 'd':1, 'c':1, 'b':1, 'a':1}) == [('e', 1), ('d', 1), ('c', 1), ('b', 1), ('a', 1)]",
        "num_ids": 2528,
        "indeed": true
    },
    {
        "number": 476,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-1:]) + sum(sorted(nums)[:1])",
        "test": "assert big_sum([0, 0, 0, 0, 0]) == 0",
        "num_ids": 1687,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"HELLO WORLD\") == \"hello world\"",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    pattern = r'(?<!\\w)[a-z]+'\n    return re.sub(pattern, '', str1)",
        "test": "assert remove_lowercase('12345') == '12345'",
        "num_ids": 1609,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns its first digit.\n    '''\n    if n < 0:\n        n = abs(n)\n        return -first_Digit(n)\n    elif n < 10:\n        return n\n    else:\n        return first_Digit(n // 10)",
        "test": "assert first_Digit(1234) == 1, \"Incorrect output for 1234\"",
        "num_ids": 1200,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for num in lst:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1530,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
        "test": "assert difference(1) == 0",
        "num_ids": 1677,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    This function counts the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,3,5,7,9], 5) == 0",
        "num_ids": 1733,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string",
        "test": "assert toggle_string(\"hello\") == \"HELLO\"",
        "num_ids": 1328,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n\n    if n1_len > n2_len:\n        n2_str = \"0\" * (n1_len - n2_len) + n2_str\n    elif n2_len > n1_len:\n        n1_str = \"0\" * (n2_len - n1_len) + n1_str\n\n    n1_digits = [int(d) for d in n1_str]\n    n2_digits = [int(d) for d in n2_str]\n\n    digit_diff_sum = sum([abs(n1_digits[i] - n2_digits[i]) for i in range(n1_len)])\n\n    return digit_diff_sum",
        "test": "assert digit_distance_nums(1234, 5678) == 16",
        "num_ids": 2743,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
        "num_ids": 2535,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the union of their elements, sorted in ascending order.\n    '''\n    # converting the tuples to sets to find the union of their elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union = set1.union(set2)\n    # converting the union set back to tuple and sorting it in ascending order\n    sorted_union = tuple(sorted(union))\n    return sorted_union",
        "test": "assert union_elements((1,2,3), (2,3,4)) == (1,2,3,4)",
        "num_ids": 2333,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 2263,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef extract_values(text):\n    # Use regular expression to find all the values between quotation marks\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    \n    # Return the matches as a list\n    return matches",
        "test": "assert extract_values('She told me, \"I love programming.\"') == ['I love programming.']",
        "num_ids": 1567,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5], 4) == 6",
        "num_ids": 1721,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split(word):\n    '''\n    This function takes a string as an argument and returns a list of characters\n    '''\n    return list(word)",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 1296,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError(\"Number should be non-negative.\")\n    \n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n        \n    return sum",
        "test": "assert sum_digits(12345) == 15",
        "num_ids": 1437,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check if a list is sorted.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))",
        "test": "assert issort_list([1,2,3,4,5]) == True",
        "num_ids": 1433,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 915,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"cherry\"], [\"dog\", \"cat\", \"fish\"], [\"zebra\", \"elephant\", \"lion\"]])!= [[\"apple\", \"banana\", \"cherry\"], [\"cat\", \"dog\", \"fish\"], [\"elephant\", \"zebra\", \"lion\"]]",
        "num_ids": 2810,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # Initialize an empty set to keep track of unique numbers\n    unique_nums = set()\n\n    # Loop through each list in the input\n    for lst in nums:\n\n        # Loop through each number in the list\n        for num in lst:\n\n            # Add the number to the set of unique numbers\n            unique_nums.add(num)\n\n    # Convert the set of unique numbers back to a list and return the first two elements\n    return list(unique_nums)[:2]",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2350,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data) # create a set of unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number # multiply all the unique numbers\n    return product",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 1704,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns its surface area.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area",
        "test": "assert surfacearea_cylinder(0,3) == 0,'surface area of a cylinder with radius 0 and height 3 should be 0'",
        "num_ids": 2328,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    This function takes two lists as input and returns True if the first list is a sublist of the second list, otherwise it returns False.\n    '''\n    if set(A).issubset(B):\n        return True\n    else:\n        return False",
        "test": "assert is_Sub_Array([1,2,3,4],[1,2,3,4]) == True",
        "num_ids": 2141,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit in the factorial of n.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 1\n    \n    # Calculate the factorial of n\n    for i in range(2, n+1):\n        result *= i\n    \n    # Return the last digit of the result\n    return result % 10",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 1714,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 2786,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Using set() to get unique elements of the tuples\n    unique_tup1 = set(test_tup1)\n    unique_tup2 = set(test_tup2)\n\n    # Finding dissimilar elements by subtracting unique elements of the first tuple from the second tuple\n    dissimilar = unique_tup2.symmetric_difference(unique_tup1)\n\n    return dissimilar",
        "test": "assert find_dissimilar((1, 2, 3), (2, 1, 3)) == (1, 2, 3)",
        "num_ids": 2195,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            sub_result = even_ele(item, even_fnc)\n            if sub_result:\n                result.append(sub_result)\n        elif even_fnc(item):\n            result.append(item)\n    return tuple(result)",
        "test": "assert even_ele(((1,2,3),(4,5,6)), lambda x: True) == ((1,2,3),(4,5,6))",
        "num_ids": 2822,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 2 * (b * s) + 2 * (b * b)\n    return surface_area",
        "test": "assert surface_Area(4,3) == 56",
        "num_ids": 1720,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 28,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function checks if a dictionary is empty.\n\n    Parameters:\n    dict1 (dict): A dictionary to be checked for emptyness.\n\n    Returns:\n    bool: True if the dictionary is empty, False otherwise.\n    \"\"\"\n\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True # empty dictionary",
        "num_ids": 1150,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    else:\n        catalan_num = 0\n        for i in range(n):\n            catalan_num += catalan_number(i) * catalan_number(n-i-1)\n        return catalan_num",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1653,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "import re\n\ndef find_adverbs(text):\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n    positions = [m.start() for m in re.finditer(r'\\b\\w*ly\\b', text)]\n    return adverbs, positions",
        "test": "assert find_adverbs(\"There is no adverb in this sentence.\") == ([], [])",
        "num_ids": 2000,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, item)\n\n    result = []\n\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result",
        "test": "assert expensive_items([('apples', 2.5), ('bananas', 1.2), ('oranges', 3.4), ('grapes', 1.9), ('pears', 2.2)], 0) == []",
        "num_ids": 2258,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    This function takes a list and an integer n as input and splits the list at the nth element and adds the first part to the end.\n    \"\"\"\n    return l[n:] + l[:n]",
        "test": "assert split_Arr([], 2) == []",
        "num_ids": 2083,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1,2,3]) == (1,2,3)",
        "num_ids": 1213,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1495,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        sqrt_num = int(num**0.5)\n        if sqrt_num**2 == num:\n            squares.append(num)\n    return squares",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9], \"Incorrect output for perfect_squares(1, 10)\"",
        "num_ids": 2432,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import cmath\n\ndef polar_rect(rho,theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n        rho (float): the distance from the origin\n        theta (float): the angle from the positive x-axis\n\n    Returns:\n        (float, float): the rectangular coordinates (x, y)\n    '''\n    return (rho * cmath.cos(theta), rho * cmath.sin(theta))",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 1877,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1733,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 28,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def binomial_Coeff(n,k): \n    if k > n: \n        return 0\n    if k == 0 or k == n: \n        return 1\n    return int(binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))",
        "test": "assert binomial_Coeff(4,2) == 6 # assert binomial_Coeff(4,2) == 6",
        "num_ids": 1883,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # split the ip address into octets\n    octets = ip.split('.')\n    \n    # remove leading zeroes from each octet\n    octets = [str(int(octet)) if int(octet) > 0 else octet for octet in octets]\n    \n    # join the octets back into an ip address\n    new_ip = '.'.join(octets)\n    \n    return new_ip",
        "test": "assert removezero_ip(\"172.16.254.1\") == \"172.16.254.1\"",
        "num_ids": 2026,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd = num\n            break\n    return even - odd",
        "test": "assert diff_even_odd([1, 2, 4, 7, 8]) == 1",
        "num_ids": 2282,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_Swaps(str1, str2):\n    n1, n2 = len(str1), len(str2)\n    if n1!= n2:\n        return \"Both strings should have the same length\"\n    count = 0\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            count += 1\n    return count",
        "test": "assert min_Swaps('11111', '11111') == 0",
        "num_ids": 2971,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "test": "assert tuple_size((1,2)) == sys.getsizeof((1,2)) ",
        "num_ids": 1617,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Get the length of both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize variables for indices of both arrays and result array\n    i = 0\n    j = 0\n    res = []\n\n    # Iterate through both arrays until kth element is found\n    while k > 0:\n        # If the current element in array 1 is smaller, add it to result array\n        if i < n1 and (j >= n2 or arr1[i] < arr2[j]):\n            res.append(arr1[i])\n            i += 1\n        # If the current element in array 2 is smaller or both arrays have same length, add it to result array\n        elif j < n2:\n            res.append(arr2[j])\n            j += 1\n        # If both arrays have been fully traversed, kth element cannot be found\n        else:\n            return None\n        \n        k -= 1\n    \n    # Return kth element\n    return res[-1]",
        "test": "assert find_kth([1,2,3,4,5], [6,7,8,9,10], 5) == 5",
        "num_ids": 4153,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 31,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.\n    \"\"\"\n    # Convert the given number to a string\n    num = str(number)\n    \n    # Calculate the length of the number\n    length = len(num)\n    \n    # Calculate the sum of the cubes of each digit\n    sum_of_cubes = sum(int(digit)**length for digit in num)\n    \n    # Check if the sum of cubes is equal to the given number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 1868,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def sum_average(n):\n    \"\"\"\n    Returns the sum and average of the first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        return (0, 0)\n    else:\n        # Compute the sum and average of the first n natural numbers\n        sum = (n * (n + 1)) // 2\n        average = sum / n\n        return (sum, average)",
        "test": "assert sum_average(1) == (1,1)",
        "num_ids": 1480,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 28,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer n as input and checks whether the given number is even or not.\n\n    :param n: integer\n    :return: True if the given number is even, otherwise False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 955,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def first_repeated_char(str1):\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None",
        "test": "assert first_repeated_char(\"abca\") == \"a\"",
        "num_ids": 1539,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic.append(i)\n    return ludic",
        "test": "assert get_ludic(0) == []",
        "num_ids": 2175,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)",
        "test": "assert reverse_words('') == ''",
        "num_ids": 1691,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 1253,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes in a degree value and returns the corresponding value in radians.\n    '''\n    return math.radians(degree)",
        "test": "assert radian_degree(90) == math.pi/2",
        "num_ids": 1079,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"hello world\", r\"\\b\\w+\\b\") == ('hello', 0, 5)",
        "num_ids": 1920,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        bell = [1]\n        for i in range(1, n+1):\n            bell.append(sum(bell))\n        return bell[-1]",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]",
        "test": "assert remove_kth_element([1,2,3,4,5], 5) == [1,2,3,4]",
        "num_ids": 2211,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def max_of_nth(test_list, N):\n    # Get then'th column as a list\n    column_list = [row[N-1] for row in test_list]\n    # Return the max of then'th column\n    return max(column_list)",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 3) == 9",
        "num_ids": 2431,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[],[]]\n    for sublist in lst:\n        result[0].append(sublist[0])\n        result[1].append(sublist[1])\n    return result",
        "test": "assert merge([ [1,2], [3,4], [5,6] ]) == [[1,3,5],[2,4,6]]",
        "num_ids": 2649,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n        sum_list.append(cum_sum)\n    return sum_list",
        "test": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]",
        "num_ids": 2253,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for tup in nums:\n        sum_tup = sum(tup)\n        avg_tup = sum_tup / len(tup)\n        average_list.append(avg_tup)\n    return average_list",
        "test": "assert average_tuple(((1,2,3),(4,5,6),(7,8,9))) == [2.0, 5.0, 8.0]",
        "num_ids": 2648,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    else:\n        print(\"Error: Tuples are not of the same length.\")",
        "test": "assert tuple_modulo((5, 10, 20), (3, 4, 5)) == (2, 2, 0)",
        "num_ids": 2306,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    This function calculates the minimum number of jumps required to reach the position (d, 0) from the origin in a 2D plane.\n\n    :param steps: A list of steps taken by the player.\n    :param d: The length of the first jump.\n    :return: The minimum number of jumps required.\n    \"\"\"\n\n    # Initialize the variables\n    n = len(steps)\n    count = 0\n    jump = 0\n    next_jump = d\n\n    # Traverse the list of steps\n    for i in range(n):\n\n        # If the current step is less than the next jump,\n        # then increment the jump count and update the next jump\n        if steps[i] <= next_jump:\n            jump += steps[i]\n            next_jump = d\n        \n        # Otherwise, make a new jump and subtract the remaining distance\n        else:\n            jump = d + steps[i] - next_jump\n            next_jump = steps[i]\n\n        # If the player reaches the destination, update the count\n        if jump >= d:\n            count += 1\n            jump = 0\n            next_jump = d\n\n    return count",
        "test": "assert min_Jumps([2, 3, 1, 1, 4], 5) == 2",
        "num_ids": 3515,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([1,2,3],[2,4,6]) == [0.5,0.5,0.5]",
        "num_ids": 2050,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as input and moves all the numbers to the end of the string.\n    \"\"\"\n    # creating two empty lists to store the numbers and non-numbers\n    nums = []\n    non_nums = []\n    \n    # iterating over each character of the string\n    for char in test_str:\n        # checking if the character is a number\n        if char.isdigit():\n            nums.append(char)\n        else:\n            non_nums.append(char)\n    \n    # concatenating the non-numbers and numbers list to form the final string\n    result_str = ''.join(non_nums) + ''.join(nums)\n    \n    return result_str",
        "test": "assert move_num(\"abcdefg\") == \"abcdefg\"",
        "num_ids": 2353,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = 2 if a[0] % a[1] == 0 else 1\n    \n    for i in range(2, n):\n        dp[i] = dp[i-1] + 1 if a[i] % a[i-1] == 0 else 1\n        \n        for j in range(1, i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j])\n    \n    return dp[-1]",
        "test": "assert largest_subset([2,3,4,6,7,8,14]) == 1",
        "num_ids": 2465,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n//2] + arr1[n//2-1]) / 2\n    else:\n        return arr1[n//2]",
        "test": "assert get_median([1, 3, 5, 7], [2, 4, 6, 8], 4) == 4",
        "num_ids": 2681,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function computes the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([2,3,4,5],3) == [8, 27, 64, 125]",
        "num_ids": 1785,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_upper(string):\n    '''\n    Converts a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper('PYTHON') == 'PYTHON'",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def swap_List(newList):\n    '''\n    Interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1834,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    # calculate the diameter of the semicircle\n    d = r * 2\n    # calculate the length of the hypotenuse of the largest triangle\n    h = math.sqrt(r**2 - (d/2)**2)\n    # calculate the area of the triangle using the formula A = (1/2)bh\n    area = (1/2) * h * r\n    return area",
        "test": "assert triangle_area(1) == 0.0",
        "num_ids": 2468,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n        \n    for i in range(start, end+1):\n        # if the current element is not equal to its index plus start\n        # then it is the first missing number\n        if array[i]!= i+start:\n            return i+start\n    \n    # if all the numbers are in order then the last element plus 1 is the missing number\n    return end+1",
        "test": "assert find_First_Missing([0,2,3,4,5,6,7,8,9,10]) == 1",
        "num_ids": 2950,
        "indeed": true
    },
    {
        "number": 628,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 1157,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 37,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 1593,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y), (x, y-1), (x+1, y), (x, y+1)]\n    if sub:\n        adj = [a for a in adj if a not in sub]\n    return adj",
        "test": "assert adjac((2,2)) == [(1,2), (2,1), (3,2), (2,3)]",
        "num_ids": 3982,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes in a list to the end of the list.\n    \"\"\"\n    # create two lists, one for non-zero elements and another for zeroes\n    non_zero_list = []\n    zero_list = []\n\n    # iterate through the given list and add non-zero elements to non_zero_list, and zero elements to zero_list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n        else:\n            zero_list.append(num)\n\n    # concatenate the non-zero list and zero list to get the final list with zeroes moved to the end\n    final_list = non_zero_list + zero_list\n\n    # return the final list\n    return final_list",
        "test": "assert move_zero([]) == []",
        "num_ids": 2788,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum",
        "test": "assert pair_xor_Sum([1,2,3,4,5],1) == 0",
        "num_ids": 2680,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heap sort algorithm.\n    '''\n    heap = iterable[:]\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1973,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 33,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two arguments - actual_cost and sale_amount - and checks whether the sale has no profit and no loss.\n    :param actual_cost: actual cost of the item\n    :param sale_amount: amount earned by selling the item\n    :return: True if sale has no profit and no loss, False otherwise.\n    \"\"\"\n    if sale_amount > actual_cost:\n        print(\"No profit, no loss!\")\n        return False\n    else:\n        print(\"Sale has profit or loss!\")\n        return True",
        "test": "assert noprofit_noloss(100,100) == True",
        "num_ids": 1689,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert velocity from km/h to m/s\n    v = v / 3.6\n    \n    # Calculate the wind chill index\n    wind_chill = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # Round the wind chill index to the next integer\n    wind_chill = round(wind_chill)\n    \n    return wind_chill",
        "test": "assert wind_chill(20,0)==-2, \"Wind chill should be -2 degrees Celsius when wind speed is 20 km/h and temperature is 0 degrees Celsius\"",
        "num_ids": 2637,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length",
        "test": "assert sample_nam(['austin', 'Brian', 'Charlie']) == 12, \"Function is not working properly\"",
        "num_ids": 2754,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    result = re.sub(pattern, '', items)\n    return result",
        "test": "assert remove_parenthesis(\"This is a test string.\") == \"This is a test string.\"",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))//2\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"\\b(?!.*\\b(z))(?=.*z)(?=.*\\w.*)(?!.*\\b(z)).*\\w.*z.*\\w.*\\b\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle('hello world') == False",
        "num_ids": 1662,
        "indeed": true
    },
    {
        "number": 644,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes two arguments, input and k. \n    Input is the array that needs to be reversed.\n    K is the position upto which the array needs to be reversed. \n    It returns the reversed array.\n    '''\n    reversed_array = []\n    for i in range(k):\n        reversed_array.append(input[i])\n    for j in range(k, len(input)):\n        reversed_array.append(input[j])\n    return reversed_array",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 2451,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple(('a', 'b', 'c'), {'d': 1, 'e': 2}) == ('a', 'b', 'c', {'d': 1, 'e': 2})",
        "num_ids": 2113,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]  # dynamic programming table\n    \n    # base case: only one cell in the matrix\n    if n == 1:\n        return cost[0][0]\n    \n    # base case: two cells in the matrix\n    if n == 2:\n        return max(cost[0][0], cost[0][1], cost[1][0], cost[1][1])\n    \n    # fill the table with the maximum cost of a path ending at each cell\n    dp[0][0] = cost[0][0]\n    dp[0][1] = max(dp[0][0], cost[0][1])\n    dp[1][0] = max(dp[0][0], cost[1][0])\n    for i in range(2, n):\n        dp[i][0] = max(dp[i-1][0], dp[i-2][0]) + cost[i][0]\n        dp[0][i] = max(dp[0][i-1], dp[0][i-2]) + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # find the maximum average over all paths\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:  # ignore the top-left cell\n                continue\n            if i == 0 and j == 1:  # ignore the top-right cell\n                continue\n            if i == 1 and j == 0:  # ignore the bottom-left cell\n                continue\n            avg = dp[i][j] / (2 + i + j - 2)  # average of the path ending at (i,j)\n            max_avg = max(max_avg, avg)\n    \n    return max_avg",
        "test": "assert maxAverageOfPath([[1]]) == 1, \"Test case 4 failed\"",
        "num_ids": 4636,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, details in students.items():\n        if details[0] > h and details[1] > w:\n            filtered_students[name] = details\n    return filtered_students",
        "test": "assert filter_data({\"Alice\": (1.6, 5.2), \"Bob\": (1.8, 5.5), \"Charlie\": (1.5, 5.0)}, 1.5, 5) == {\"Alice\": (1.6, 5.2), \"Bob\": (1.8, 5.5)}",
        "num_ids": 3551,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 1, 1, 1, 1], [1, 1, 1, 1, 1]) == 5",
        "num_ids": 2552,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    for digit in str(base):\n        sum_of_digits += int(digit) ** power\n    return sum_of_digits",
        "test": "assert power_base_sum(2, 1) == 2",
        "num_ids": 1879,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result",
        "test": "assert extract_quotation('The quick brown fox \"jumped over the lazy dog\"') == ['jumped over the lazy dog']",
        "num_ids": 1733,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result = ()\n    for i in range(n):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result",
        "test": "assert multiply_elements((1,)) == ()",
        "num_ids": 2275,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns their element-wise sum.\n\n    Args:\n    lst1 (list): A list of integers.\n    lst2 (list): A list of integers.\n\n    Returns:\n    list: A list of integers that are the element-wise sum of lst1 and lst2.\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 1966,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group[0])\n        else:\n            result.extend(group)\n    return result",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 2538,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function finds the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface = math.pi * r * h + 2 * math.pi * r\n    return lateralsurface",
        "test": "assert lateralsurface_cone(0,10) == 0 # radius 0, height 10",
        "num_ids": 2133,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon in a given text.\n    '''\n    return re.sub(r'[\\s,.]+', ':', text)",
        "test": "assert replace_specialchar(\"Python is awesome\") == \"Python:is:awesome\"",
        "num_ids": 1586,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1  # element not found in array",
        "test": "assert find_first_occurrence([1, 2, 3, 3, 4, 4, 4, 5, 5, 5], 3) == 2",
        "num_ids": 2793,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize sum variable to 0\n    sum_product = 0\n    \n    # Initialize the product variable to 1\n    product = 1\n    \n    # Traverse through all sublists and multiply their elements\n    for i in range(n):\n        # Multiply all elements in the current sublist\n        product *= arr[i]\n        \n        # Add the product to the sum of products of all sublists\n        sum_product += product\n        \n        # Reset the product variable to 1 to find products of subsequent sublists\n        product = 1\n    \n    # Return the sum of products of all sublists\n    return sum_product",
        "test": "assert sum_Of_Subarray_Prod([0,0,0]) == 0 # output: 0",
        "num_ids": 4238,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def set_middle_bits(n):\n    # To toggle bits of the number except the first and the last bit, we can use bitwise XOR (^) operation.\n    # XOR operation will set all bits to 1 if both bits are 1, otherwise it will set all bits to 0.\n    # To toggle all bits except the first and last bit, we need to set all bits to 1 except the first and last bit.\n    # For example, if the number is 1101, to toggle all bits except the first and last bit, we need to set the first and last bit to 1.\n    # We can do this by using the bitwise NOT (~) operator to invert all bits, and then XOR the result with the original number.\n    # In this case, if the original number is 1101, the inverted number is 0010, and the result of XOR operation is 1111.\n    # Therefore, the function will toggle all bits except the first and last bit.\n    inverted_num = ~n\n    result = inverted_num ^ (inverted_num >> 1)\n    return result",
        "test": "assert set_middle_bits(0) == 0",
        "num_ids": 2204,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)",
        "test": "assert left_insertion([1, 3, 5, 7], 8) == 4",
        "num_ids": 1734,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"apple\") == True",
        "num_ids": 1280,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def geometric_sum(n):\n    '''\n    Calculates the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1)*geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1.0",
        "num_ids": 1493,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    triangular_num = math.comb(n+1, 2)\n    index = int(math.log10(triangular_num))+1\n    return index",
        "test": "assert find_Index(1) == 1",
        "num_ids": 2183,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)-1):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "test": "assert tuple_to_dict(('hello', 'world')) == {'hello': 'world'}",
        "num_ids": 2561,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_Characters_Same(s):\n    return len(set(s)) == 1",
        "test": "assert all_Characters_Same(\"a\") == True",
        "num_ids": 1009,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side * 3) / 2\n    \n    # Calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(s * (s - side) * (s - side) * (s - side))\n    \n    return area",
        "test": "assert area_tetrahedron(1) == math.sqrt(6/2)*1**2/4  # 0.5773502691896257",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rotate_right(lst, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    return lst[-m:] + lst[:-m]",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 2036,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none((1,2,3)) == False",
        "num_ids": 1149,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(d) % x == 0 for d in str(x)), range(startnum, endnum+1)))",
        "test": "assert divisible_by_digits(10000, 11000) == []",
        "num_ids": 6750,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 0.5*math.pi*r**2*a/360",
        "test": "assert sector_area(8,0)==0, \"The area of the sector should be 0\"",
        "num_ids": 2088,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 2D array to store lengths of longest common suffixes\n    L = [[0 for k in range(o+1)] for j in range(n+1)]\n\n    # To store the actual lcs string\n    lcs = \"\"\n\n    # Fill the LCS table in bottom-up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[j][k] = L[j-1][k-1] + 1\n                    lcs = lcs + X[i-1]\n                elif L[j-1][k] >= L[j][k-1]:\n                    L[j][k] = L[j-1][k]\n                else:\n                    L[j][k] = L[j][k-1]\n\n    return lcs",
        "test": "assert lcs_of_three(\"abcdefg\", \"hijklmn\", \"opqrstu\") == \"\"",
        "num_ids": 5660,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 35,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all capitalized words in the string\n    capitalized_words = re.findall(r'[A-Z][a-z]*', str1)\n\n    # Replace each capitalized word with its capitalized version with spaces between words\n    for i in range(len(capitalized_words)):\n        capitalized_words[i] = capitalized_words[i].title()\n\n    # Replace all capitalized words in the string with their capitalized version with spaces between words\n    for i in range(len(capitalized_words)):\n        str1 = str1.replace(capitalized_words[i], capitalized_words[i].title())\n\n    return str1",
        "test": "assert capital_words_spaces('The Quick Brown Fox Jumps Over The Lazy Dog') == 'The Quick Brown Fox Jumps Over The Lazy Dog'",
        "num_ids": 2233,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = sorted(nums_str, key=lambda x: float(x))\n    return nums",
        "test": "assert sort_numeric_strings(['100', '20', '50', '10'])!= ['100', '20', '50', '10']",
        "num_ids": 2707,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 28,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += test_tup\n    return test_list",
        "test": "assert add_tuple([1, 2, 3], (4, 5)) == [1, 2, 3, 4, 5]",
        "num_ids": 1543,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2*i + 1\n    right = 2*i + 2\n\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n\n    return True\n\ndef check_min_heap(arr):\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True",
        "test": "assert check_min_heap_helper([4, 2, 1, 3], 2) == True",
        "num_ids": 3330,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2) ",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 1481,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 34,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and returns the minimum k tuples based on the first element of each tuple.\n    '''\n    # Sort the list of tuples based on the first element of each tuple\n    test_list = sorted(test_list, key=lambda x: x[0])\n\n    # Return the first k tuples from the sorted list\n    return test_list[:K]",
        "test": "assert min_k([(1,2), (3,4), (5,6), (7,8), (9,10)], 3) == [(1,2), (3,4), (5,6)]",
        "num_ids": 3370,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [4, 5, 6]) == []",
        "num_ids": 2533,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1560,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"abba\") == True",
        "num_ids": 1140,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs([\"abc\", \"def\", \"ghi\"]) == 0 # test case 3",
        "num_ids": 2518,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def unique_sublists(list1):\n    counts = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in counts:\n                counts[sublist] += 1\n            else:\n                counts[sublist] = 1\n    return counts",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 4079,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    \"\"\"\n    This function takes a string as input and returns True if it is a decimal number with a precision of 2.\n    \"\"\"\n    if \".\" in num and num.count(\".\") == 1:\n        num_str = num.split(\".\")[1]\n        if len(num_str) <= 2:\n            return True\n    return False",
        "test": "assert is_decimal(\"123.45\") == True",
        "num_ids": 1575,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1,2,3,4,4]) == False",
        "num_ids": 1214,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return \"Invalid month number. Please enter a number between 1 and 12.\"",
        "test": "assert check_monthnumber_number(4) == True",
        "num_ids": 1901,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array `arr` and its size `n` as input and returns\n    the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sorting the array in ascending order\n    \n    min_diff = float('inf')  # Initializing the minimum difference to infinity\n    \n    for i in range(n-1):\n        # Using binary search to find the minimum difference between any two elements\n        # between arr[i] and arr[j]\n        low, high = i+1, n-1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] - arr[i] < min_diff:\n                min_diff = arr[mid] - arr[i]\n                low = mid + 1\n            else:\n                high = mid - 1\n    \n    return min_diff\n",
        "test": "assert find_min_diff([4, 2, 1, 3], 4) == 1",
        "num_ids": 2378,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr('hello world') == 0 # should pass",
        "num_ids": 1178,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1 \n    elif n == 2: \n        return 2 \n    else: \n        prev_polite = 1 \n        curr_polite = 2 \n        count = 2 \n        while count < n: \n            next_polite = curr_polite + prev_polite \n            if is_prime(next_polite): \n                prev_polite = curr_polite \n                curr_polite = next_polite \n                count += 1 \n            else: \n                curr_polite += 1 \n        return curr_polite \n\ndef is_prime(num): \n    if num < 2: \n        return False \n    for i in range(2, int(math.sqrt(num)) + 1): \n        if num % i == 0: \n            return False \n    return True ",
        "test": "assert is_polite(1) == 1",
        "num_ids": 3358,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 1688,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers as input and returns the number of pairs whose sum is equal to'sum'.\n    \"\"\"\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 11) == 0",
        "num_ids": 2089,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff = list(set(li1) - set(li2))\n    return diff",
        "test": "assert Diff([1,2,3],[1,2,3]) == [], \"Diff([1,2,3],[1,2,3]) should return []\"",
        "num_ids": 1881,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count**4\n        count += 2\n    return sum",
        "test": "assert odd_num_sum(1) == 1    ",
        "num_ids": 1762,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. \n    '''\n    # create an empty stack\n    stack = deque()\n    \n    # iterate over each character in the expression\n    for char in exp:\n        # if the character is an opening bracket, push it onto the stack\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        # if the character is a closing bracket, pop the stack and check if the opening bracket matches the closing bracket\n        elif char in [')', '}', ']']:\n            # if the stack is empty, the expression is not balanced\n            if not stack:\n                return False\n            \n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                # if the opening and closing brackets don't match, the expression is not balanced\n                return False\n    \n    # if the stack is empty, the expression is balanced\n    return not stack",
        "test": "assert check_expression(\"(()())\") == True",
        "num_ids": 1960,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def remove_length(test_str, K):\n    # Split the string into a list of words\n    words = test_str.split()\n    \n    # Create an empty list to store the words with length K\n    new_words = []\n    \n    # Iterate through the list of words\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # Add the word to the new list of words\n            new_words.append(word)\n    \n    # Join the new list of words into a string\n    new_str = \" \".join(new_words)\n    \n    # Return the new string\n    return new_str",
        "test": "assert remove_length(\"apple pie cherry\", 3) == \"apple cherry\"",
        "num_ids": 1907,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    positions = []\n    for match in matches:\n        positions.append((match.start(), match.end()))\n    if positions:\n        return positions\n    else:\n        return None",
        "test": "assert occurance_substring(\"hello world\", \"z\") == None",
        "num_ids": 1980,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "test": "assert odd_position([2, 3, 5, 7, 11, 14, 17]) == False",
        "num_ids": 1590,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"abstemious\") == 2  # \"eu\" and \"st\" are neighbors and both have vowels",
        "num_ids": 1748,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_of_non_repeated_elements = sum(unique_elements)\n    return sum_of_non_repeated_elements",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 1950,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list, returns a new list where consecutive duplicates are packed into sublists.\n    \"\"\"\n    result = []\n    for key, group in groupby(lst):\n        if key!= None:\n            result.append([key] * len(list(group)))\n    return result",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 2862,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublists[tuple(sublist)] = sublists.get(tuple(sublist), 0) + 1\n    return sublists",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 3104,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples as input and returns the combinations of sums of each tuple.\n    '''\n    # Convert the list of tuples to a list of integers\n    list_of_integers = [sum(i) for i in test_list]\n    # Find all the possible combinations of sums of each tuple\n    combinations_of_sums = combinations(list_of_integers, 2)\n    # Return the combinations as a list\n    return [list(i) for i in combinations_of_sums]",
        "test": "assert find_combinations([]) == []",
        "num_ids": 7468,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nprint(count_divisors(12)) # Output: 6\nprint(count_divisors(28)) # Output: 12",
        "test": "assert count_divisors(1) == 1",
        "num_ids": 1658,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    # initialize the sum to 0\n    total_sum = 0\n    # iterate over the array\n    for i in range(n):\n        # calculate the length of the current subarray\n        length = 1\n        while i + length < n and arr[i:i+length+1] == arr[i:i+length+1][::-1]:\n            length += 2\n        # add the sum of the current subarray to the total sum\n        total_sum += sum(arr[i:i+length])\n    return total_sum",
        "test": "assert odd_length_sum([1]) == 1",
        "num_ids": 2180,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    \n    if cmax == cmin:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / diff) % 6\n    elif cmax == g:\n        hue = (b - r) / diff + 2\n    else:\n        hue = (r - g) / diff + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else diff / cmax\n    \n    value = cmax\n    \n    return hue, saturation, value",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0)",
        "num_ids": 3865,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                odd_num = num\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                even_num = num\n                break\n    return even_num * odd_num",
        "test": "assert mul_even_odd([0,1,2,3,4,5,6,7,8,9]) == 0",
        "num_ids": 2558,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Remove parenthesis and split the string\n    parts = test_str.replace('(', '').replace(')', '').split(',')\n    # Convert each part to integer and create a new tuple\n    return tuple(int(part) for part in parts)",
        "test": "assert tuple_str_int(\"1, 2, 3\") == (1, 2, 3)",
        "num_ids": 1728,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index",
        "test": "assert right_insertion([1, 3, 5, 7], 0) == 0",
        "num_ids": 1482,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}.*')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three('aabbaa') == False",
        "num_ids": 1172,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "test": "assert new_tuple(['apple', 'banana', 'cherry'], 'hello') == ('hello', ['apple', 'banana', 'cherry'])",
        "num_ids": 1676,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every even index contains an even number, otherwise False.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert even_position([1, 3, 5]) == False",
        "num_ids": 1509,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 2277,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 30,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([]) == 0",
        "num_ids": 1267,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid + 1 <= right and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1",
        "test": "assert last([1,2,3,4,5],6) == -1",
        "num_ids": 2383,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "test": "assert text_starta_endb('a') == False # 'a' not followed by anything",
        "num_ids": 1351,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 1398,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum",
        "test": "assert sum_odd(3) == 4",
        "num_ids": 1386,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of the array elements.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total",
        "test": "assert _sum([1,2,3]) == 6",
        "num_ids": 1243,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left n bits by d bits.\n    '''\n    mask = 2**d - 1  # mask to get the d leftmost bits\n    shifted = (n << d) & 0xffffffff  # shift n by d bits to the left and mask the result to 32 bits\n    rotated = (shifted | (n >> (32 - d))) & 0xffffffff  # shift n by the remaining bits to the right and or it with the shifted bits\n    return rotated",
        "test": "assert left_rotate(0, 1) == 0",
        "num_ids": 2815,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces(\"This is a    test string\") == \"Thisisateststring\"",
        "num_ids": 1234,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    return count",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 1565,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    count = 0\n\n    # If array is not rotated, return 0\n    if arr == sorted(arr):\n        return 0\n\n    # Find the point where array is rotated\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            break\n    low = i\n\n    # Find the point where the reversed array becomes sorted\n    for i in range(n-1, low, -1):\n        if arr[i] < arr[i-1]:\n            break\n    high = i\n\n    # Calculate the number of rotations required\n    count = (n - low + high) // 2\n\n    return count",
        "test": "assert count_rotation([1,3,2]) == 2 ",
        "num_ids": 2339,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return math.sqrt(n) == int(math.sqrt(n))",
        "test": "assert is_perfect_square(14) == False",
        "num_ids": 1338,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list as input and returns True if the product of all the numbers in the list is even, False otherwise.\n    '''\n    \n    product = 1\n    for i in arr:\n        product *= i\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2,4,6,8]) == True",
        "num_ids": 1451,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_lists = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_lists = [l]\n        elif sum(l) == max_sum:\n            max_lists.append(l)\n    return max_lists",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [7,8,9]]) == [[7,8,9]]",
        "num_ids": 3673,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    \n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run",
        "test": "assert max_run_uppercase(\"aaaaaaaA\") == 1",
        "num_ids": 2099,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # no odd number found in the list",
        "test": "assert first_odd([1,2,3,4,5]) == 1",
        "num_ids": 1458,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K([(1,2),(3,4),(5,6),(7,8)], 9) == False # testing negative case",
        "num_ids": 1578,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "test": "assert check_smaller((2, 4, 6), (1, 3, 5)) == True",
        "num_ids": 1807,
        "indeed": true
    }
]