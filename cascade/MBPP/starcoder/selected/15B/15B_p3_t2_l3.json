[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = set(test_tup1) & set(test_tup2)\n    return result",
        "test": "assert similar_elements((1,2,3), (2,3,4)) == {2, 3}",
        "num_ids": 347
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "test": "assert is_not_prime(4) == False # 4 is a prime number",
        "num_ids": 355
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # create a max heap of size n\n    heap = []\n    for i in range(n):\n        hq.heappush(heap, nums[i])\n\n    # iterate through the remaining elements of nums\n    for i in range(n, len(nums)):\n        # if the current element is larger than the smallest element in the heap,\n        # remove the smallest element and add the current element to the heap\n        if nums[i] > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, nums[i])\n\n    # return the n largest elements in descending order\n    return sorted(heap, reverse=True)",
        "test": "assert heap_queue_largest([1,2,3,4,5],3) == [5,4,3]",
        "num_ids": 522
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer x as input and returns True if x is a power of 2, otherwise False.\n    '''\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        while x % 2 == 0:\n            x = x/2\n        if x == 1:\n            return True\n        else:\n            return False",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 335
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use the re.findall() function to find all words in the string that are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    \n    return words",
        "test": "assert find_char_long('The quick brown fox jumps over the lazy dog') == ['quick', 'brown', 'jumps', 'over', 'lazy']",
        "num_ids": 340
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    \"\"\"\n    This function finds the squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 360
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Rotations(s):\n    if len(s) <= 1:\n        return 0\n\n    s += s\n    n = len(s)\n\n    # Find the longest prefix of s that is also a suffix\n    i = 0\n    j = 1\n    while i < n and j < n:\n        if s[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            break\n\n    # If s is a rotation of itself, it must have length greater than 1\n    if i == n:\n        return n - 1\n\n    # Find the longest suffix of s that is also a prefix\n    i = n - 1\n    j = n - 2\n    while i >= 0 and j >= 0:\n        if s[i] == s[j]:\n            i -= 1\n            j -= 1\n        else:\n            break\n\n    # Find the smallest index k such that s[k+1:n] is a rotation of s[0:n-k]\n    k = n\n    while k > j + 1:\n        mid = (j + k) // 2\n        if s[mid+1:n] < s[0:n-mid]:\n            k = mid\n        else:\n            j = mid\n\n    # The minimum number of rotations required is equal to the length of the longest suffix plus 1 minus the index k\n    return len(s[n-j-1:n]) + 1 - j - 1",
        "test": "assert find_Rotations('abcde') == 1",
        "num_ids": 802
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_Occ(s, ch):\n    if ch in s:\n        index = s.find(ch)\n        s = s[:index] + s[index+1:]\n        index = s.rfind(ch)\n        s = s[:index] + s[index+1:]\n    return s",
        "test": "assert remove_Occ(\"hello world\",\"l\")!= \"heo wor\"",
        "num_ids": 380
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sums of each row\n    row_sums = [sum(row) for row in M]\n\n    # sort the rows based on their sums\n    sorted_indices = sorted(range(len(row_sums)), key=lambda i: row_sums[i])\n\n    # create a new matrix with the sorted rows\n    sorted_matrix = []\n    for i in sorted_indices:\n        sorted_matrix.append(M[i])\n\n    return sorted_matrix",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 610
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function finds the volume of a triangular prism.\n    '''\n    return (l * b * h) / 3",
        "test": "assert find_Volume(5,5,5) == 125",
        "num_ids": 317
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 296
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    '''\n    This function returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 191
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a boolean array \"char_present\" to mark characters present in the second string\n    char_present = [False] * NO_OF_CHARS\n    for char in string:\n        char_present[ord(char)] = True\n    \n    # Create a new string without the characters present in the second string\n    new_string = \"\"\n    for char in string:\n        if not char_present[ord(char)]:\n            new_string += char\n    \n    return new_string",
        "test": "assert str_to_list(\"abcde\") == ['a', 'b', 'c', 'd', 'e']",
        "num_ids": 628
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 434
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 1:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True",
        "test": "assert is_woodall(25) == False # example 1",
        "num_ids": 382
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Args:\n    num: An integer.\n\n    Returns:\n    True if num is one less than twice its reverse, False otherwise.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    rev_str = str(num)[::-1]\n    # Convert the reversed string back to an integer and add it to num\n    if int(rev_str) + num == 2 * num - 1:\n        return True\n    else:\n        return False",
        "test": "assert rev(1) == False",
        "num_ids": 362
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_num = arr[0]\n        temp = 0\n        for i in range(n):\n            temp = temp*10 + arr[i]\n            max_num = max(max_num, temp)\n        return max_num",
        "test": "assert find_Max_Num([5, 4, 3, 2, 1]) == 54321",
        "num_ids": 549
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign,\n    otherwise, it returns False.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(1, -2) == True",
        "num_ids": 307
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    count = 1\n    octagonal_number = 0\n    while count <= n:\n        octagonal_number = count * (2 * count - 1)\n        count += 1\n    return octagonal_number\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 434
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    \n    # dictionary to store the count of digits\n    digit_count = defaultdict(int)\n    \n    for i in range(n):\n        # update the count of digits in the current substring\n        digit_count[int(s[i])] += 1\n        \n        # check if the sum of digits in the current substring equals its length\n        if sum(digit_count.values()) == n:\n            count += 1\n            \n        # if the count of the current digit is greater than 1, we need to remove it\n        # from the dictionary since we can't include it in the next substring\n        elif digit_count[int(s[i])] > 1:\n            digit_count[int(s[i])] -= 1\n            \n        # if the count of the current digit is equal to 1, we can include it in the next substring\n        elif digit_count[int(s[i])] == 1:\n            digit_count[int(s[i])] += 1\n            \n    return count",
        "test": "assert count_Substrings(\"1234\") == 0 # no substring with a sum of digits equal to their length",
        "num_ids": 714
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest",
        "test": "assert smallest_num([5, 3, 9, 1, 7]) == 1",
        "num_ids": 280
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([(1, 2, 3), (2, 4, 6), (3, 6, 9), (4, 8, 12)]) == 11",
        "num_ids": 481
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def subject_marks(subject_marks):\n    \"\"\"\n    This function takes a list of tuples and sorts them based on the second value of each tuple.\n    \"\"\"\n    subject_marks.sort(key=lambda x: x[1])\n    return subject_marks",
        "test": "assert subject_marks([(30, \"Maths\"), (40, \"Science\"), (20, \"English\")]) == [(20, \"English\"), (30, \"Maths\"), (40, \"Science\")]",
        "num_ids": 788
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 390
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 283
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        b = [0] * (n + 1)\n        b[0] = 1\n        b[1] = 1\n        for i in range(2, n + 1):\n            b[i] = b[i-1] + b[i-2]\n        return b[n]",
        "test": "assert bell_number(1) == 1",
        "num_ids": 511
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n\n    # If length of array is 1 or less, it is monotonic\n    if n <= 1:\n        return True\n\n    # If all elements are equal, it is monotonic\n    if A[0] == A[1] == A[2] ==... == A[n-1]:\n        return True\n\n    # Check for increasing sequence\n    if A[0] < A[1] and A[1] < A[2] and A[2] < A[3] and... and A[n-2] < A[n-1]:\n        return True\n\n    # Check for decreasing sequence\n    if A[0] > A[1] and A[1] > A[2] and A[2] > A[3] and... and A[n-2] > A[n-1]:\n        return True\n\n    # If none of the above conditions are satisfied, it is not monotonic\n    return False",
        "test": "assert is_Monotonic([1,2,3,4,5]) == True",
        "num_ids": 669
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two arguments, a list and a sublist.\n    It returns True if the sublist is present in the list, otherwise False.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "test": "assert is_sublist([1, 2, 3, 4], [1, 2, 3]) == True",
        "num_ids": 411
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True",
        "test": "assert find_equal_tuple([(1,2),(3,4),(5,6)]) == True",
        "num_ids": 350
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    '''\n    Implementation of the comb sort algorithm for sorting a list of integers.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap/shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n    return nums",
        "test": "assert comb_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]",
        "num_ids": 634
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, False otherwise.\n    \"\"\"\n    i = int(n**0.5)\n    return i*i == n\n\ndef dif_Square(n):\n    \"\"\"\n    Returns True if n can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    return is_square(n) or is_square(2*n) or is_square(3*n)",
        "test": "assert dif_Square(1) == True # 1 can be represented as the difference of two squares",
        "num_ids": 450
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n\n    # Check if the length of colors and patterns are the same\n    if len(colors)!= len(patterns):\n        return False\n\n    # Create a dictionary to store the patterns and their corresponding colors\n    pattern_dict = {}\n\n    # Iterate through the patterns and their corresponding colors\n    for i in range(len(patterns)):\n        pattern = patterns[i]\n        color = colors[i]\n\n        # Check if the pattern is already in the dictionary\n        if pattern in pattern_dict:\n            # Check if the color matches the color of the existing pattern\n            if color!= pattern_dict[pattern]:\n                return False\n        else:\n            # Add the pattern and its corresponding color to the dictionary\n            pattern_dict[pattern] = color\n\n    # If we have iterated through the entire list without returning False,\n    # then it follows the sequence given in the patterns array.\n    return True",
        "test": "assert is_samepatterns(['red', 'yellow', 'blue'], ['red', 'yellow', 'blue'])",
        "num_ids": 545
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12)], 3) == [(3, 6, 9)]",
        "num_ids": 622
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer n as input and returns True if n is divisible by 11, otherwise it returns False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(10) == False # if n is divisible by 11, then n - 10 is divisible by 11",
        "num_ids": 260
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        print(f\"{s} has an odd length\")\n    else:\n        print(f\"{s} has an even length\")",
        "test": "assert word_len(\"cat\") == True",
        "num_ids": 276
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = n * (n + 1) * (n + 2) // 6  # Calculate the nth tetrahedral number\n    return t",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 266
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume",
        "test": "assert volume_sphere(1) == 4/3*math.pi",
        "num_ids": 286
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char) - 64  # subtracting 64 to convert the ASCII value of 'A' to 0\n    return chr(char_sum % 26 + 65)  # adding 65 to convert the ASCII value of 'A' to 0",
        "test": "assert get_Char(\"world\") == 'q', \"Incorrect output for input 'world'\"",
        "num_ids": 481
    },
    {
        "number": 84,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequence(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        for i in range(3, n+1):\n            curr = prev_prev + prev\n            prev_prev = prev\n            prev = curr\n        return curr",
        "test": "assert sequence(1) == 1",
        "num_ids": 415
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4*math.pi, \"Surface area of a sphere with radius 1 should be 4*pi\"",
        "num_ids": 318
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 1\n    i = 1\n    while count < n:\n        i += 1\n        count += i\n    return count - n + 1\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 328
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}",
        "num_ids": 638
    },
    {
        "number": 88,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict",
        "test": "assert freq_count([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}",
        "num_ids": 554
    },
    {
        "number": 89,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return None\n    else:\n        for i in range(N-1, -1, -1):\n            if i < N:\n                return i",
        "test": "assert closest_num(10) == 9",
        "num_ids": 266
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "test": "assert len_log(['apple', 'banana', 'cherry', 'orange']) == 6",
        "num_ids": 308
    },
    {
        "number": 91,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
        "test": "assert find_substring(\"hello world\", \"l\") == True",
        "num_ids": 269
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes an integer 'n' as an argument and returns True if 'n' is an undulating number, else False.\n    An undulating number is a positive integer whose digits alternate in a way such that all adjacent digits are at most one apart.\n\n    Example:\n    >>> is_undulating(12345)\n    True\n    >>> is_undulating(12325)\n    True\n    >>> is_undulating(12335)\n    False\n    >>> is_undulating(1234)\n    True\n    >>> is_undulating(1232)\n    True\n    >>> is_undulating(1233)\n    False\n\n    \"\"\"\n    # Convert n to a string and split it into digits.\n    digits = [int(d) for d in str(n)]\n    # Initialize a boolean variable to keep track of whether the digits are undulating or not.\n    undulating = True\n    # Iterate over the digits and compare adjacent digits.\n    for i in range(len(digits) - 1):\n        if abs(digits[i] - digits[i+1]) > 1:\n            undulating = False\n            break\n    return undulating",
        "test": "assert is_undulating(5) == True",
        "num_ids": 535
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "test": "assert power(2,3) == 8",
        "num_ids": 189
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "test": "assert index_minimum([(1, 2), (3, 4), (5, 1), (7, 8), (9, 6)]) == 5",
        "num_ids": 408
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 453
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n    count = 0\n    \n    # Iterate from 1 to the square root of n\n    for i in range(1, int(n**0.5)+1):\n        # If i divides n, increment the count\n        if n % i == 0:\n            count += 1\n            \n            # If the other divisor of n (n/i) is also an integer, increment the count\n            if n//i!= i:\n                count += 1\n    \n    return count",
        "test": "assert divisor(1) == 1",
        "num_ids": 286
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in freq:\n                    freq[sub_item] += 1\n                else:\n                    freq[sub_item] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq",
        "test": "assert frequency_lists([[1, 2], [3, 4], [1, 2, 3, 4]]) == {1: 2, 2: 2, 3: 2, 4: 2}",
        "num_ids": 592
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result",
        "test": "assert multiply_num([-1, 0, 1]) == 0",
        "num_ids": 379
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Initialize a string to store the binary equivalent of n\n    binary = \"\"\n    \n    # Loop through the decimal digits from right to left\n    while n > 0:\n        # Calculate the remainder when n is divided by 2\n        remainder = n % 2\n        \n        # Append the remainder to the binary string\n        binary = str(remainder) + binary\n        \n        # Divide n by 2 to get the next digit\n        n = n // 2\n    \n    # Return the binary string with no leading zeros\n    return binary.lstrip(\"0\") or \"0\"",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 406
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # First, check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        # If the number is already a palindrome, return the next largest integer\n        next_num = num + 1\n        return next_num\n    else:\n        # If the number is not a palindrome, find the next smallest palindrome\n        # by adding 1 to the largest integer that is less than or equal to the square root of the input number\n        square_root = int(num**0.5)\n        next_palindrome = num\n        while next_palindrome <= square_root:\n            next_palindrome = int(''.join(reversed(str(next_palindrome))))\n            if next_palindrome > num:\n                return next_palindrome\n            next_palindrome += 1",
        "test": "assert next_smallest_palindrome(124563) == 125311, \"Failed test for next_smallest_palindrome(124563)\"",
        "num_ids": 767
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 284
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 240
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    total = n * m\n    eulerian_numbers = []\n    \n    for i in range(n):\n        for j in range(m):\n            if i % 2 == 0:\n                eulerian_numbers.append(i + j * m)\n            else:\n                eulerian_numbers.append((n - i - 1) + j * m)\n    \n    return total - len(set(eulerian_numbers)) + 1\n",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 426
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def sort_sublists(input_list):\n    '''\n    This function sorts each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "test": "assert sort_sublists([[4, 2, 1, 5], [\"apple\", \"banana\", \"cherry\"], [\"dog\", \"cat\", \"rat\"]]) == [[1, 2, 4, 5], [\"apple\", \"banana\", \"cherry\"], [\"cat\", \"dog\", \"rat\"]]",
        "num_ids": 584
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "test": "assert count([True, True, False, True, False]) == 3",
        "num_ids": 219
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(test_list + list(test_tup))\n",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 295
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n\n    # Add all elements to heap\n    for lst in [num1, num2, num3]:\n        for num in lst:\n            heapq.heappush(heap, num)\n\n    # Pop all elements from heap and add them to result list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result",
        "test": "assert merge_sorted_list([1,3,5],[2,4,6],[7,8,9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 864
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Returns the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the string to a list of digits\n    digits = [int(c) for c in s]\n    # Rotate the digits the given number of times\n    for i in range(n):\n        digits.append(digits.pop(0))\n    # Count the number of odd digits\n    count = 0\n    for digit in digits:\n        if digit % 2 == 1:\n            count += 1\n    return count",
        "test": "assert odd_Equivalent(\"10011011\", 2) == 3",
        "num_ids": 545
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            set1 = set(nestedlist[i])\n            set2 = set(nestedlist[j])\n            common_elements += list(set1.intersection(set2))\n    return common_elements",
        "test": "assert common_in_nested_lists([]) == []",
        "num_ids": 516
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    This function checks if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"5\") == True",
        "num_ids": 228
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True",
        "test": "assert empty_dit([{}, {}]) == True",
        "num_ids": 224
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "test": "assert tuple_to_int((1,2,3)) == 123",
        "num_ids": 287
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "test": "assert list_to_float([[1, 2, 3], [4, 5.0, \"6.0\"], [7.0, \"8.0\", 9]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]",
        "num_ids": 711
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 265
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def search(arr):\n    # Initialize a dictionary to keep track of counts\n    counts = {}\n    # Iterate over the array and count the occurrences of each element\n    for num in arr:\n        counts[num] = counts.get(num, 0) + 1\n    # Iterate over the dictionary and find the element that appears only once\n    for num, count in counts.items():\n        if count == 1:\n            return num\n    # If no element appears only once, return None\n    return None",
        "test": "assert search([1, 2, 3, 4, 5]) == 1",
        "num_ids": 379
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0]) * abs(list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(1,2),(3,4),(5,6),(7,8)]) == (40, 240), \"Test 2 failed\"",
        "num_ids": 620
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function computes the sum of all amicable numbers from 1 to a specified limit.\n    \"\"\"\n    # Create a list of all numbers from 1 to the limit\n    numbers = list(range(1, limit+1))\n\n    # Initialize a dictionary to keep track of pairs of numbers\n    pairs = {}\n\n    # Loop through all numbers from 1 to the limit\n    for num in numbers:\n        # Check if the current number is already in the pairs dictionary\n        if num in pairs:\n            # If it is, add the corresponding value (i.e. the sum of the two numbers) to the total sum\n            total_sum += pairs[num]\n        else:\n            # If it is not, compute the sum of the factors of the current number and store it in the pairs dictionary\n            sum_factors = sum(get_factors(num))\n            pairs[num] = sum_factors\n            # If the sum of factors is also a key in the pairs dictionary, add the current number to the corresponding value\n            if sum_factors in pairs:\n                pairs[sum_factors].append(num)\n            else:\n                pairs[sum_factors] = [num]\n\n    # Return the total sum\n    return total_sum",
        "test": "assert amicable_numbers_sum(200) == 31626",
        "num_ids": 704
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a+1j*b)",
        "test": "assert angle_complex(1,1) == cmath.pi/4",
        "num_ids": 291
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_length(string):\n    \"\"\"\n    This function takes a binary string as input and returns the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_length = 0\n    \n    # consider all substrings\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # count number of 0s and 1s in current substring\n            count_0 = string[i:j].count('0')\n            count_1 = string[i:j].count('1')\n            \n            # update max_length if current substring has more 0s than 1s\n            if count_0 > count_1:\n                max_length = max(max_length, j-i)\n    \n    return max_length",
        "test": "assert find_length(\"1011\") == 1",
        "num_ids": 625
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum(a,b): \n    '''\n    This function finds the sum of common divisors of two given numbers a and b.\n    '''\n    # Find the smaller number between a and b\n    small = a if a < b else b\n\n    # Find the sum of common divisors\n    sum = 0\n    for i in range(1, small+1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n\n    return sum",
        "test": "assert sum(15, 21) == 4 # 3 + 5",
        "num_ids": 486
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 166
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def long_words(n, str):\n    '''\n    This function takes in two arguments: n, the maximum length of words to be considered,\n    and str, a list of words. The function returns a list of words that are longer than n characters.\n    '''\n\n    long_words = []\n\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words",
        "test": "assert long_words(5, \"apple orange banana cherry peach pear\") == [\"orange\", \"peach\", \"pear\"]<|im_sep|>",
        "num_ids": 470
    },
    {
        "number": 129,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    sum_diag = sum(my_matrix[i][i] for i in range(size))\n    sum_antidiag = sum(my_matrix[i][size-1-i] for i in range(size))\n    if sum_diag!= sum_antidiag:\n        return False\n    for i in range(size):\n        row_sum = sum(my_matrix[i][j] for j in range(size))\n        if row_sum!= sum_diag:\n            return False\n        col_sum = sum(my_matrix[j][i] for j in range(size))\n        if col_sum!= sum_diag:\n            return False\n    return True",
        "test": "assert magic_square_test([[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]) == True # example 1",
        "num_ids": 884
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    \n    max_freq = 0\n    max_num = None\n    for num, freq in count.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    \n    return max_num",
        "test": "assert max_occurrences([1,2,3,2,1,3,2]) == 2",
        "num_ids": 450
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    vowel_indices.reverse()\n    new_str = list(str1)\n    for i in vowel_indices:\n        new_str[i] = str1[i]\n    return \"\".join(new_str)",
        "test": "assert reverse_vowels(\"aeiou\") == \"\"",
        "num_ids": 493
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function converts a tuple to a string.\n    \"\"\"\n    return str(tup1)",
        "test": "assert tup_string((1,2,3)) == \"(1, 2, 3)\"",
        "num_ids": 241
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    This function takes a list of numbers as input and returns the sum of all negative numbers in the list.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 328
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    count = 0\n    i = 1\n    while True:\n        hex_num = i * (2 * i - 1)\n        if hex_num > n:\n            break\n        count += 1\n        i += 1\n    return hex_num",
        "test": "assert hexagonal_num(2) == 6",
        "num_ids": 263
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count",
        "test": "assert zero_count(array('i', [1, 2, 3, 4, 5, 6, 7, 8, 9])) == (0/9)",
        "num_ids": 568
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_of_two = 0\n    while (n >> power_of_two):\n        if ((n >> power_of_two) & 1):\n            if (power_of_two == 0):\n                return False\n            else:\n                return True\n        power_of_two += 1\n    return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == False",
        "num_ids": 462
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r",
        "test": "assert circle_circumference(0) == 0, \"The circumference of a circle with radius 0 is incorrect\"",
        "num_ids": 315
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return flat_list",
        "test": "assert extract_singly([[1],[2],[3],[4],[5],[6],[7],[8],[9]]) == {1,2,3,4,5,6,7,8,9}",
        "num_ids": 442
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Sorts a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Start from the last element and move towards the first element\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # If the maximum element is not at the beginning, flip it to the beginning\n        if max_index!= i:\n            nums[max_index], nums[i] = nums[i], nums[max_index]\n            # Now, flip the entire list up to the index of the maximum element\n            for j in range(max_index, 0, -1):\n                nums[j], nums[j-1] = nums[j-1], nums[j]\n    return nums",
        "test": "assert pancake_sort([1]) == [1]",
        "num_ids": 649
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[3,2,1],[2,2,2]) == 1",
        "num_ids": 372
    },
    {
        "number": 143,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "test": "assert find_lists((1,2,3)) == 0",
        "num_ids": 282
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(arr) - min(arr)",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 4",
        "num_ids": 381
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None",
        "test": "assert find_solution(2, 3, 1) == None",
        "num_ids": 380
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]",
        "test": "assert remove_elements([1,2,3,4,5], [2,4]) == [1,3,5]",
        "num_ids": 379
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize the sum to zero\n    s = 0\n    # iterate over the range from 0 to n//2\n    for i in range(n//2 + 1):\n        # add the current term to the sum\n        s += n - 2*i\n    return s",
        "test": "assert sum_series(5) == 5 + 3 + 1 # the sum of the series from i=0 to 5//2 is 5 + 3 + 1 = 9",
        "num_ids": 509
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l / tan(pi / s)",
        "test": "assert area_polygon(6, 4) == 36",
        "num_ids": 308
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, n): \n        if n % i == 0: \n            div_list.append(i)\n\n    return sum(div_list) == n ",
        "test": "assert div_sum(15) == False",
        "num_ids": 448
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_char_position(str1):\n    # Initialize a dictionary to store the count of each character at each position\n    char_count = {}\n\n    # Convert the string to lowercase to make it case-insensitive\n    str1 = str1.lower()\n\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character is a letter, add it to the dictionary with the corresponding position as the key\n        if str1[i].isalpha():\n            if i not in char_count:\n                char_count[i] = {}\n            char_count[i][str1[i]] = char_count[i].get(str1[i], 0) + 1\n\n    # Initialize a variable to store the count of characters at the same position as in the English alphabet\n    same_position_count = 0\n\n    # Loop through each position in the dictionary\n    for position in char_count:\n        # If the position is the same as the alphabet position, add the count of characters to the same_position_count variable\n        if position == ord(str1[position]) - 96:\n            for char in char_count[position]:\n                if char.isalpha():\n                    same_position_count += char_count[position][char]\n\n    # Return the count of characters at the same position as in the English alphabet\n    return same_position_count",
        "test": "assert count_char_position('hello world') == 0, \"Incorrect result for 'hello world'\"",
        "num_ids": 825
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1,3,5]) == 0 # even number",
        "num_ids": 377
    },
    {
        "number": 167,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 252
    },
    {
        "number": 168,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5],6) == 0",
        "num_ids": 344
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 2, 4) == 12 # test case 1",
        "num_ids": 430
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a",
        "test": "assert perimeter_pentagon(3) == 15, \"perimeter_pentagon(3) should return 15\"",
        "num_ids": 263
    },
    {
        "number": 172,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count",
        "test": "assert count_occurance('hello std world') == 1",
        "num_ids": 274
    },
    {
        "number": 222,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "test": "assert check_type((1,2,3)) == True",
        "num_ids": 322
    },
    {
        "number": 223,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1,2,3,4,5,5,5,5,5], 9, 6) == False",
        "num_ids": 578
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 229
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and returns a new string with all characters at odd index positions removed.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:  # checking if index is even\n            new_str += str[i]\n    return new_str",
        "test": "assert odd_values_string(\"hello\") == \"hlo\"",
        "num_ids": 284
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(2,4,1) == 1",
        "num_ids": 291
    },
    {
        "number": 228,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1<<r) - (1<<l)\n    if n & mask == 0:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b1111,0,3) == False",
        "num_ids": 514
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    negative.sort()\n    positive.sort()\n    result = negative + positive\n    return result[:n]",
        "test": "assert re_arrange_array([1, -2, 3, 4, -5, 6, -7, 8, 9], 5) == [-5, -7, -2, -1, 3, 4, 6, 8, 9, 1]",
        "num_ids": 961
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces all blank spaces in the given string with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank(\"hello world\",\"*\")==\"hello*world\"",
        "num_ids": 259
    },
    {
        "number": 232,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap[::-1]",
        "test": "assert larg_nnum([1, 2, 3, 4, 5], 1) == [5]",
        "num_ids": 494
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2*3.14*r*h + 2*3.14*r**2\n    return lateralsurface",
        "test": "assert lateralsuface_cylinder(2,3) == 50.26548245743669",
        "num_ids": 428
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "test": "assert volume_cube(1) == 1, \"incorrect volume\"",
        "num_ids": 183
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes a number as input and returns a number with all even bits set.\n\n    :param n: An integer number\n    :return: An integer number with all even bits set\n    \"\"\"\n    # initialize the result variable to 0\n    result = 0\n\n    # iterate through all bits of the input number\n    for i in range(32):\n        # check if the current bit is even\n        if (n & (1 << i))!= 0:\n            # if it is, set the corresponding bit in the result variable\n            result |= (1 << (2*i))\n\n    # return the result variable\n    return result",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 558
    },
    {
        "number": 237,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "test": "assert check_occurences([(1,2), (3,4), (1,2), (3,4), (1,2)]) == {(1, 2): 3, (3, 4): 2}",
        "num_ids": 562
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if i == j:\n                continue\n            count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 264
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize a list of 1s, since the first element can be any positive integer\n    sequence = [1] * n\n    \n    # Initialize a counter for the total number of sequences\n    total_sequences = 0\n    \n    # Initialize a variable for the last number of the sequence\n    last_num = 1\n    \n    # Loop through the sequence and generate all possible sequences\n    for i in range(n):\n        # Loop through the remaining numbers in the sequence\n        for j in range(i+1, n):\n            # If the current number can be generated by adding the last number to the previous number, add it to the sequence\n            if sequence[j] == last_num + sequence[j-1]:\n                sequence[j] = last_num + sequence[j-1]\n            \n            # If the current number is less than or equal to m, add it to the total number of sequences\n            if sequence[j] <= m:\n                total_sequences += 1\n            \n            # If the current number is greater than m, break out of the inner loop and move on to the next number in the sequence\n            else:\n                break\n        \n        # Update the last number of the sequence\n        last_num = sequence[i]\n        \n    # Return the total number of sequences\n    return total_sequences",
        "test": "assert get_total_number_of_sequences(6,2) == 8",
        "num_ids": 892
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2",
        "test": "assert replace_list([], [5,6]) == [5,6]",
        "num_ids": 391
    },
    {
        "number": 242,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac('hello') == 5",
        "num_ids": 224
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    next_square = sqrt_N + 1\n    while True:\n        next_square += 1\n        if int(math.sqrt(next_square))**2 == next_square:\n            return next_square",
        "test": "assert next_Perfect_Square(2) == 4",
        "num_ids": 345
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    n = len(arr)\n    \n    # Create an auxiliary array to store the maximum sum ending at each index\n    dp = [0] * n\n    \n    # Initialize the first element of the auxiliary array as the first element of the array\n    dp[0] = arr[0]\n    \n    # Initialize the maximum sum of the bitonic subsequence as the first element of the array\n    max_sum = dp[0]\n    \n    # Traverse the array from the second element to the last element\n    for i in range(1, n):\n        \n        # Check if the current element is greater than the previous element\n        if arr[i] > arr[i-1]:\n            \n            # If it is, then add it to the maximum sum of the bitonic subsequence ending at the previous element\n            dp[i] = arr[i] + dp[i-1]\n            \n        # If the current element is not greater than the previous element, then it forms a new sequence, so update the maximum sum accordingly\n        else:\n            dp[i] = arr[i]\n            \n        # Update the maximum sum of the bitonic subsequence if the current sum is greater than the current maximum sum\n        max_sum = max(max_sum, dp[i])\n        \n    return max_sum",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1018
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2 # initial guess\n    epsilon = 0.0001 # desired accuracy\n    while abs(guess**2 - number) > epsilon:\n        guess = (guess + number / guess) / 2 # improve the guess\n    return guess",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 398
    },
    {
        "number": 247,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store lengths of palindromic subsequences\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    for k in range(2, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                # If the length of the substring is 2, it is a palindrome\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                # If the length of the substring is greater than 2, check the substrings of length k-2 around the diagonal\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                # If the characters at the two ends don't match, take the maximum of the palindromic substrings around the diagonal and the substrings around them\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n - 1]",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 887
    },
    {
        "number": 248,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n-1)",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 264
    },
    {
        "number": 249,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    for num in array_nums1:\n        if num in array_nums2:\n            if num not in intersection_list:\n                intersection_list.append(num)\n    return intersection_list",
        "test": "assert intersection_array([1,2,3],[2,4,6]) == [2]",
        "num_ids": 374
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X((1,2,3,2,1), 1) == 2",
        "num_ids": 332
    },
    {
        "number": 251,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Insert an element before each element in a list and return the resulting list.\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        new_lst.append(elem)\n        new_lst.append(i)\n    return new_lst",
        "test": "assert insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]",
        "num_ids": 414
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        polar_coords.append(polar)\n    return polar_coords",
        "test": "assert convert(2-3j) == (cmath.polar(2-3j)[0], cmath.polar(2-3j)[1])",
        "num_ids": 550
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as an input and returns the number of integer elements present in the list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1,2,3,4,5]) == 5",
        "num_ids": 300
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    This function takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]",
        "test": "assert combinations_colors(['a', 'b', 'c'], 2) == [('a', 'a'), ('a', 'b'), ('a', 'c'), ('b', 'b'), ('b', 'c'), ('c', 'c')]",
        "num_ids": 1003
    },
    {
        "number": 256,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 502
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)",
        "test": "assert swap_numbers(1, 2) == (2, 1)",
        "num_ids": 247
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tupples must have the same length\")\n\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n\n    return max_tup",
        "test": "assert maximize_elements((1,2,3), (4,5,6)) == (4,5,6)",
        "num_ids": 557
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n        return prime_list[n-1]",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 1210
    },
    {
        "number": 261,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Create an empty list to store the result of division operation\n    result_list = []\n\n    # Loop through the two tuples\n    for i in range(len(test_tup1)):\n        result = test_tup1[i] / test_tup2[i]  # Perform division operation\n        result_list.append(result)  # Append the result to the result list\n\n    # Convert the result list to a tuple and return it\n    return tuple(result_list)",
        "test": "assert division_elements((1, 2, 3), (4, 5, 6)) == (0.25, 0.4, 0.5)",
        "num_ids": 530
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 564
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "test": "assert dog_age(10) == 63.0, 'Test case 2 failed'",
        "num_ids": 246
    },
    {
        "number": 265,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 458
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface_area = 6 * l ** 2\n    return lateralsurface_area",
        "test": "assert lateralsurface_cube(3) == 36",
        "num_ids": 222
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_numbers = []\n    for i in range(1, 2*n+1, 2):\n        odd_numbers.append(i)\n    squares = [x**2 for x in odd_numbers[:n]]\n    return sum(squares)",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 307
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer 'n' and returns then'th star number.\n    \"\"\"\n    count = 1\n    num = 1\n    while count < n:\n        num += 2\n        count += 1\n    return num",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 300
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 167
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "test": "assert sum_even_and_even_index([2, 4, 6, 8, 10]) == 0",
        "num_ids": 447
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**5\n    return total",
        "test": "assert even_Power_Sum(2) == 10",
        "num_ids": 278
    },
    {
        "number": 272,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 409
    },
    {
        "number": 273,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Takes two tuples of equal length and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must be of equal length\")\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 507
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    total_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total_sum += math.comb(n, i)\n    return total_sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 385
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Calculates the volume of a cylinder given its radius and height.\n    \"\"\"\n    return 3.14 * r ** 2 * h",
        "test": "assert volume_cylinder(3, 4) == 523.60",
        "num_ids": 319
    },
    {
        "number": 277,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}",
        "test": "assert dict_filter({'a': 10, 'b': 20, 'c': 30}, 20) == {'b': 20, 'c': 30}",
        "num_ids": 407
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count",
        "test": "assert count_first_elements((1, 1, 2, 2, 3)) == 2",
        "num_ids": 352
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    i = 1\n    decagonal_number = 0\n    while count < n:\n        decagonal_number += i\n        count += 1\n        i += 1\n    return decagonal_number",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 348
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 465
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)",
        "test": "assert all_unique([1,2,3,4,5]) == True",
        "num_ids": 259
    },
    {
        "number": 282,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[1,2,3]) == [0,0,0]",
        "num_ids": 358
    },
    {
        "number": 283,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10\n    while n:\n        freq[n % 10] += 1\n        n //= 10\n    for i in freq:\n        if i > i:\n            return False\n    return True\n",
        "test": "assert validate(123) == True",
        "num_ids": 395
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check if all elements in a list are equal to a given element.\n\n    Args:\n    lst: a list of elements\n    elem: the element to check for\n\n    Returns:\n    True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n\n    if len(lst) == 0:\n        return False\n\n    for i in range(1, len(lst)):\n        if lst[i]!= elem:\n            return False\n\n    return True",
        "test": "assert check_element([1,1,1,1,1], 1) == True",
        "num_ids": 334
    },
    {
        "number": 285,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three('abc') == False # 'a' followed by 1 or 2 'b' characters",
        "num_ids": 280
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_array = [0]*(n*k)\n    for i in range(k):\n        for j in range(n):\n            sum_array[i*n+j] = a[j]\n    max_sum = sum_array[0]\n    curr_sum = sum_array[0]\n    for i in range(1, n*k):\n        curr_sum = max(curr_sum+sum_array[i], sum_array[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1,2,3,4,5], 5, 1) == 15",
        "num_ids": 778
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    # initialize sum to 0\n    sum = 0\n    # loop through first n even natural numbers\n    for i in range(2, n*2, 2):\n        # add square of each even natural number to sum\n        sum += i**2\n    # return sum of squares of first n even natural numbers\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 300
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 499
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k):\n    # initialize the dp table with 0 values\n    dp = [[0 for i in range(k)] for j in range(n)]\n    \n    # initialize the base cases\n    for j in range(k):\n        dp[0][j] = 1\n    \n    # fill the dp table in bottom-up manner\n    for i in range(1, n):\n        for j in range(k):\n            dp[i][j] = sum(dp[i-1][:j]) + sum(dp[i-1][j+1:])\n    \n    # return the result\n    return dp[n-1][k-1]",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 676
    },
    {
        "number": 292,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    else:\n        return n // m",
        "test": "assert find(4,2) == 2",
        "num_ids": 241
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 279
    },
    {
        "number": 294,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    This function finds the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 363
    },
    {
        "number": 295,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize sum to zero\n    sum = 0\n    \n    # iterate over all numbers from 1 to number // 2\n    for i in range(1, number // 2 + 1):\n        \n        # check if i is a divisor of number\n        if number % i == 0:\n            # add i to sum\n            sum += i\n            \n    # return the sum\n    return sum",
        "test": "assert sum_div(1) == 0",
        "num_ids": 414
    },
    {
        "number": 296,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    An inversion is defined as a pair of elements (i,j) where i < j and arr[i] > arr[j].\n    \"\"\"\n    # Initialize variables\n    n = len(arr)\n    inv_count = 0\n    \n    # Use merge sort to sort the array\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n            merge_sort(left_half)\n            merge_sort(right_half)\n            \n            # Merge the sorted halves\n            i = j = k = 0\n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] <= right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    arr[k] = right_half[j]\n                    j += 1\n                    inv_count += len(left_half) - i\n                k += 1\n            \n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n            \n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n            \n    # Call merge sort\n    merge_sort(arr)\n    \n    return inv_count",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0",
        "num_ids": 1006
    },
    {
        "number": 297,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert flatten_list([1,2,[3,4,[5,6]],7]) == [1,2,3,4,5,6,7]",
        "num_ids": 407
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n    for element in stdata:\n        freq[element] += 1\n    \n    # Create a dictionary to store the prefix sums of the frequencies\n    prefix_sum = defaultdict(int)\n    for element, count in freq.items():\n        prefix_sum[element] += count\n        \n    # Find the maximum aggregate\n    max_agg = 0\n    for i in range(len(stdata)):\n        if i == 0:\n            max_agg = prefix_sum[stdata[i]]\n        else:\n            max_agg = max(max_agg, prefix_sum[stdata[i]] - prefix_sum[stdata[i-1]])\n            \n    return max_agg",
        "test": "assert max_aggregate([(1,3), (2,4), (3,5), (4,6)]) == 20 # test case 2",
        "num_ids": 604
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_binary_seq(n): \n    \"\"\"\n    This function takes an integer n as input and returns the count of all binary sequences of length 2n \n    such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n\n    # initialize a counter variable\n    count = 0\n\n    # loop through all binary strings of length 2n\n    for i in range(2**n):\n        # convert the integer i to its binary representation\n        binary_str = bin(i)[2:].zfill(n)\n\n        # get the sum of first n bits\n        first_n_bits_sum = sum(map(int, binary_str[:n]))\n\n        # get the sum of last n bits\n        last_n_bits_sum = sum(map(int, binary_str[n:]))\n\n        # if the sum of first n bits is same as sum of last n bits, increment the counter\n        if first_n_bits_sum == last_n_bits_sum:\n            count += 1\n\n    # return the count of binary sequences\n    return count",
        "test": "assert count_binary_seq(1) == 1",
        "num_ids": 615
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n",
        "test": "assert dict_depth({'a': 1, 'b': {'c': 2, 'd': {'e': 3}}}) == 3, \"Wrong depth for nested dictionary\"",
        "num_ids": 362
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Element(arr,ranges,rotations,index) : \n    '''\n    This function takes an array, range of the array to consider and the number of rotations required to be performed on the array. It then returns the element at the given index after the number of rotations.\n    '''\n    n = len(arr)\n    # Calculate the index of the first element after the given index after number of rotations\n    k = (index + rotations) % n\n    # Return the element at the calculated index\n    return arr[k]",
        "test": "assert find_Element([1,2,3,4,5],[(0,4)],0,0) == 1",
        "num_ids": 627
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'p\\w+', word):\n            p_words.append(word)\n    if len(p_words) >= 2:\n        return p_words[:2]\n    else:\n        return []",
        "test": "assert start_withp(['apple', 'pear', 'peach', 'pineapple', 'plum', 'pumpkin', 'grape']) == ('peach', 'pineapple')",
        "num_ids": 457
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [[0] * n for _ in range(n)]  # dp[i][j] stores the maximum sum of increasing subsequence of a[i:j+1]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if j < n-1 and a[j+1] > a[j]:\n                dp[i][j] = dp[i][j-1] + a[j+1]\n            else:\n                dp[i][j] = dp[i][j-1]\n    max_sum = float('-inf')\n    for i in range(index):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, dp[i][index-1])\n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1,2,3,4,5], 5, 2, 3) == 12",
        "num_ids": 1096
    },
    {
        "number": 307,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    if not isinstance(tuplex, tuple):\n        raise TypeError('tuplex must be a tuple')\n\n    start = max(0, m)\n    end = min(len(tuplex), n)\n    return deepcopy(tuplex[start:end])",
        "test": "assert colon_tuplex((1,2,3,4,5),2,4) == (3,4), \"Error: colon_tuplex((1,2,3,4,5),2,4) is not (3,4).\"",
        "num_ids": 462
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = []\n    for i in range(N):\n        product1 = nums1[i]\n        product2 = nums2[i]\n        max_product.append(product1 * product2)\n    \n    max_product.sort(reverse=True)\n    return max_product[:N]",
        "test": "assert large_product([4, 5, 6], [1, 2, 3], 2) == [(6, 5), (3, 4)], \"The function is not returning the expected result.\"",
        "num_ids": 849
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Returns the maximum of two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of a and b.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(3,5) == 5",
        "num_ids": 227
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 233
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in the binary representation of a number.\n    '''\n    # convert the number to binary and remove the '0b' prefix\n    binary = bin(n)[2:]\n    \n    # iterate over the binary representation from right to left\n    for i in range(len(binary)-1, -1, -1):\n        # if the current bit is set, continue to the next bit\n        if binary[i] == '1':\n            continue\n        # if the current bit is not set, set it and return the resulting number\n        else:\n            binary = binary[:i] + '1' + binary[i+1:]\n            return int(binary, 2)\n            \n    # if all bits are already set, return the original number\n    return n",
        "test": "assert set_left_most_unset_bit(0b00100000) == 0b00100001",
        "num_ids": 495
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone and returns its volume.\n    \"\"\"\n    volume = (1/3)*math.pi*r**2*h\n    return volume",
        "test": "assert volume_cone(1,3) == 3.141592653589793",
        "num_ids": 393
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 256
    },
    {
        "number": 389,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 314
    },
    {
        "number": 390,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "test": "assert add_string([\"apple\", \"banana\", \"orange\"], \"hello, {}\") == [\"hello, apple\", \"hello, banana\", \"hello, orange\"]",
        "num_ids": 320
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    my_dict = {}\n    for i in range(len(l1)):\n        my_dict[l1[i]] = {l2[i]: l3[i]}\n    return my_dict",
        "test": "assert convert_list_dictionary(['a', 'b', 'c'], ['x', 'y', 'z'], ['1', '2', '3']) == {'a': {'x': '1'}, 'b': {'y': '2'}, 'c': {'z': '3'}}",
        "num_ids": 601
    },
    {
        "number": 392,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n\n    if n == 1:\n        return 1\n\n    max_sum = n\n\n    for i in range(2, n+1):\n        sum = max(int(i/2) + int(i/3) + int(i/4) + int(i/5), i)\n        if sum > max_sum:\n            max_sum = sum\n\n    return max_sum",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 453
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list of lists as input and returns the list with maximum length.\n    If there are multiple lists with the same maximum length, it will return the first one.\n    '''\n    max_length = 0\n    result_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            result_list = lst\n    return result_list",
        "test": "assert max_length_list([[], [1], [1, 2], [1, 2, 3], [1, 2, 3, 4]]) == [1, 2, 3, 4]",
        "num_ids": 467
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Check if a tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "test": "assert check_distinct((1,2,3)) == True",
        "num_ids": 212
    },
    {
        "number": 395,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # Create an empty dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    # Iterate through the string and update the frequency of each character\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    # Iterate through the string again to find the first non-repeating character\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    # If all characters are repeating, return None\n    return None",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 419
    },
    {
        "number": 396,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_char('abc') == False",
        "num_ids": 291
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes in three numbers as arguments and returns their median value.\n    \"\"\"\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # find the median\n    if len(set(sorted_numbers)) == 1:\n        # if all numbers are the same, the median is the same as all three numbers\n        median = sorted_numbers[0]\n    elif len(set(sorted_numbers)) == 2:\n        # if there are only two unique numbers, the median is their average\n        median = (sorted_numbers[0] + sorted_numbers[1]) / 2\n    else:\n        # if there are more than two unique numbers, the median is the middle number\n        median = sorted_numbers[1]\n    return median",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 452
    },
    {
        "number": 398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        sum_digits = 0\n        for digit in str(num):\n            sum_digits += int(digit)\n        result.append(sum_digits)\n    return result",
        "test": "assert sum_of_digits([987, 654, 321]) == 18",
        "num_ids": 524
    },
    {
        "number": 399,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    This function performs the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    \n    # Check if the tuples are of equal length\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] ^ test_tup2[i],)\n    else:\n        print(\"Error: Tuples are not of equal length.\")\n        \n    return result_tup",
        "test": "assert bitwise_xor((1, 2, 3), (4, 5, 6)) == (5, 7, 5)",
        "num_ids": 537
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)",
        "test": "assert extract_freq([('a', 1), ('b', 2), ('c', 1), ('d', 2), ('e', 1), ('f', 2)]) == 6",
        "num_ids": 404
    },
    {
        "number": 401,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)",
        "test": "assert add_nested_tuples(((1,2),(3,4)),((5,6),(7,8))) == ((6,8),(10,12))",
        "num_ids": 568
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2,3) == 2",
        "num_ids": 192
    },
    {
        "number": 405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if any(tuplex in subtuple for subtuple in tuple1):\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex((1,2,3),4) == False",
        "num_ids": 271
    },
    {
        "number": 406,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a number as input and returns True if the number is even and False if it is odd.\n    '''\n    if x % 2 == 0: # If the remainder of the number divided by 2 is 0, the number is even.\n        return True\n    else:\n        return False",
        "test": "assert find_Parity(5) == False",
        "num_ids": 226
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number into a list of digits\n    num_list = [int(digit) for digit in str(n)]\n    \n    # Find the first digit from the end that can be rearranged\n    i = len(num_list) - 1\n    while i > 0:\n        if num_list[i-1] < num_list[i]:\n            break\n        i -= 1\n    \n    # If no such digit is found, return None\n    if i == 0:\n        return None\n    \n    # Find the smallest digit in the remaining part of the list that is greater than num_list[i-1]\n    j = len(num_list) - 1\n    while j > i:\n        if num_list[j] > num_list[i-1]:\n            break\n        j -= 1\n    \n    # Swap the digits at positions i-1 and j\n    num_list[i-1], num_list[j] = num_list[j], num_list[i-1]\n    \n    # Sort the remaining part of the list in descending order\n    num_list[i:] = sorted(num_list[i:], reverse=True)\n    \n    # Convert the list of digits back to an integer and return it\n    return int(''.join(str(digit) for digit in num_list))",
        "test": "assert rearrange_bigger(12) == 21",
        "num_ids": 750
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1 + num2, num1, num2))\n\n    heapq.heapify(pairs)\n    return [heapq.heappop(pairs) for _ in range(k)]",
        "test": "assert k_smallest_pairs([1, 1, 2], [1, 2, 3], 2) == [(1, 1), (1, 1)]",
        "num_ids": 667
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0] * list1[i][1]) < (list1[j][0] * list1[j][1]):\n                minimum_product = min(minimum_product, list1[i][0] * list1[i][1])\n            else:\n                minimum_product = min(minimum_product, list1[j][0] * list1[j][1])\n    return minimum_product",
        "test": "assert min_product_tuple([(1,2),(3,4),(5,6),(2,4)]) == 8",
        "num_ids": 676
    },
    {
        "number": 410,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(lst):\n    '''\n    This function takes a list of heterogeneous values as input and returns the minimum value from the list.\n    '''\n    min_val = lst[0]\n    for val in lst:\n        if val < min_val:\n            min_val = val\n    return min_val",
        "test": "assert min_val([1,2,3,4,5]) == 1",
        "num_ids": 349
    },
    {
        "number": 411,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 285
    },
    {
        "number": 412,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and removes all the odd numbers from the list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]",
        "test": "assert remove_odd([1,2,3,4,5]) == [2,4]",
        "num_ids": 275
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extract the nth element from a list of tuples.\n    '''\n    return lst[n-1][1]",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == 4",
        "num_ids": 313
    },
    {
        "number": 414,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks whether any value in a sequence exists in another sequence or not.\n    '''\n\n    # Iterate through each element in the first list\n    for elem in list1:\n        # Check if the element exists in the second list\n        if elem in list2:\n            # If it does, return True\n            return True\n    # If no element is found in the second list, return False\n    return False",
        "test": "assert overlapping([1,2,3],[2,3,4]) == True",
        "num_ids": 338
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            product = arr[i] * arr[j]\n            if product > max_product: \n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == (4, 5)",
        "num_ids": 593
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if common_element is None:\n            common_element = i[0]\n        else:\n            if i[0]!= common_element:\n                return None\n    return common_element",
        "test": "assert group_tuples([('a', 1), ('b', 2), ('a', 3), ('c', 4), ('d', 5)]) == []",
        "num_ids": 526
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        length = len(element)\n        \n        if length > max_length:\n            max_length = length\n            max_element = element\n    \n    return max_element",
        "test": "assert Find_Max([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == \"elderberry\"",
        "num_ids": 323
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "test": "assert round_and_sum([2, 4, 6, 8]) == 32.0",
        "num_ids": 440
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        sum += i ** 3\n        i += 2\n    return sum",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 266
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup, delimiter=','):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for i in range(len(test_tup)):\n        concatenated_string += str(test_tup[i]) + delimiter\n    return concatenated_string[:-1] #remove the last delimiter",
        "test": "assert concatenate_tuple(('apple', 'banana', 'cherry')) == 'apple,banana,cherry'",
        "num_ids": 363
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum / n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 401
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "test": "assert extract_rear(('apple', 'banana', 'cherry', '')) == ('apple', 'banana', 'cherry', '')",
        "num_ids": 341
    },
    {
        "number": 425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, 4, 5, 6], 7) == 0",
        "num_ids": 359
    },
    {
        "number": 426,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 331
    },
    {
        "number": 427,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression to match the date pattern\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    \n    # Match the date pattern in the input string and get the groups\n    match = pattern.search(dt)\n    if match:\n        year, month, day = match.groups()\n        # Return the date in the desired format\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "test": "assert change_date_format(\"2022-01-11\") == \"11-01-2022\"",
        "num_ids": 569
    },
    {
        "number": 428,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while  j >= gap and my_list[j-gap] >temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "test": "assert shell_sort([]) == []",
        "num_ids": 478
    },
    {
        "number": 429,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] & test_tup2[i],)\n    return result_tup",
        "test": "assert and_tuples((True, True, False), (True, False, True)) == (True, False, False)",
        "num_ids": 434
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"The equation is not a parabola\"\n    else:\n        x = -b/(2*a)\n        return x",
        "test": "assert parabola_directrix(1, 2, 3) == -1",
        "num_ids": 435
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3], [2, 3, 4]) == True",
        "num_ids": 313
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    median_height = height / 2\n    area = (base1 + base2) / 2 * median_height\n    return area",
        "test": "assert median_trapezium(5,4,3) == 4",
        "num_ids": 379
    },
    {
        "number": 433,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "test": "assert check_greater([1,2,3,4,5], 4) == True",
        "num_ids": 287
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    return re.search(pattern, text)\n\ntext = \"There are abababa and abb\"\nif text_match_one(text):\n    print(\"Match found\")\nelse:\n    print(\"Match not found\")",
        "test": "assert text_match_one('a') == None",
        "num_ids": 259
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit(n):\n    return n % 10",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 204
    },
    {
        "number": 436,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result",
        "test": "assert neg_nos([1, 2, -3, 4, -5]) == [-3, -5]",
        "num_ids": 367
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove all characters from a string that have an odd index (starting from 0).\n    \"\"\"\n    return ''.join(str1[i] for i in range(len(str1)) if i % 2 == 0)",
        "test": "assert remove_odd(\"world\") == \"wrd\"",
        "num_ids": 248
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    This function takes a list of tuples as input and returns the number of bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(1,2),(3,4),(5,6),(2,1),(4,3),(6,5)]) == 3",
        "num_ids": 498
    },
    {
        "number": 439,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_int = 0\n    for i in L:\n        single_int *= 10\n        single_int += i\n    return single_int",
        "test": "assert multiple_to_single([1, 2, 3]) == 123",
        "num_ids": 284
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(?:an?|the|my|his|her|our|their|this|that|these|those)\\b'\n    match = re.search(pattern, text.lower())\n    if match:\n        return match.start(), match.end()\n    else:\n        return None, None",
        "test": "assert find_adverb_position(\"The patient was admitted to the hospital.\") == (25, \"patiently\")",
        "num_ids": 609
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a length of a cube as an input and returns its surface area.\n    '''\n    area = 6 * (l ** 2)\n    return area",
        "test": "assert surfacearea_cube(1) == 6 ",
        "num_ids": 203
    },
    {
        "number": 442,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "test": "assert positive_count(array('i', [-1, 0, 1, 2, 3])) == 3/5",
        "num_ids": 393
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest",
        "test": "assert largest_neg([-1, -2, -3, -4, -5]) == -1",
        "num_ids": 347
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple([tup[i] for i in range(K)])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "test": "assert trim_tuple([(1,2,3),(4,5,6),(7,8,9)], 2) == [(3),(6),(9)]",
        "num_ids": 594
    },
    {
        "number": 445,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == (4,10,18)",
        "num_ids": 458
    },
    {
        "number": 446,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary where the keys are the elements of the list and the values are the count of the occurrence of the elements in the tuple.\n    '''\n    count_dict = {}\n    for elem in lst:\n        count_dict[elem] = tup.count(elem)\n    return count_dict",
        "test": "assert count_Occurrence((1,2,2,3,3,3), [1,2,3]) == {1: 1, 2: 2, 3: 3}",
        "num_ids": 720
    },
    {
        "number": 447,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 334
    },
    {
        "number": 448,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    for i in range(n):\n        sum += p\n        p += p\n    return sum\n\nprint(cal_sum(10))",
        "test": "assert cal_sum(1) == 1",
        "num_ids": 274
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size as input and returns a list of substrings of the specified size.\n    '''\n    result_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            result_list.append(str_list[i][:size])\n    return result_list",
        "test": "assert extract_string([\"hello\", \"world\", \"python\", \"programming\"], 4) == [\"hell\", \"worl\", \"pyth\", \"prog\"]",
        "num_ids": 408
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "test": "assert remove_whitespaces(\"This is a test string\") == \"Thisisateststring\"",
        "num_ids": 279
    },
    {
        "number": 452,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the loss amount on a sale if the given sale amount is less than the actual cost.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0",
        "test": "assert loss_amount(100,80) == 20",
        "num_ids": 310
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes an integer 'n' as input and returns the sum of even factors of 'n'.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n//i) % 2 == 0:\n                sum += n//i\n    return sum",
        "test": "assert sumofFactors(1) == 0",
        "num_ids": 500
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z' in the given text.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz('Hello world') == False",
        "num_ids": 334
    },
    {
        "number": 455,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number. Please enter a valid month number (1-12).\"",
        "test": "assert check_monthnumb_number(4) == False",
        "num_ids": 421
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for string in stringlist:\n        newlist.append(string[::-1])\n    return newlist",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 345
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    sublist = lst[0]\n    \n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            sublist = i\n            \n    return sublist",
        "test": "assert Find_Min([[1, 2, 3], [4, 5], [6, 7]]) == [1, 2, 3]",
        "num_ids": 533
    },
    {
        "number": 458,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def rectangle_area(l,b):\n    '''\n    This function takes two parameters, l and b, which represent the length and the breadth of the rectangle respectively. \n    It returns the area of the rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(4,5) == 20",
        "num_ids": 207
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    This function takes a string as input and returns a string with all uppercase substrings removed.\n    \"\"\"\n    # Use regular expression to match all uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Use findall() method to find all matches in the string and store in a list\n    matches = pattern.findall(str1)\n    # Use join() method to join the matches list back into a string\n    result = ''.join(matches)\n    return result",
        "test": "assert remove_uppercase('A B C D E F') == 'ABCDEF'",
        "num_ids": 395
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Extract(lst):\n    \"\"\"\n    Returns a new list with the first element of each sublist in the input list.\n\n    Parameters:\n    lst (list): The input list to extract the elements from.\n\n    Returns:\n    list: The new list with the first element of each sublist.\n    \"\"\"\n    return [sub[0] for sub in lst]",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7]",
        "num_ids": 341
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def upper_ctr(string):\n    '''\n    This function will count the number of upper case letters in a given string.\n    '''\n    count = 0\n    for letter in string:\n        if letter.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"Hello World!\") == 2",
        "num_ids": 241
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        result += [list(x) for x in itertools.combinations(list1, i)]\n    return result",
        "test": "assert combinations_list([1,2,3,4]) == [(1,2,3), (1,2,4), (1,3,4), (2,3,4)], \"Error in combinations_list function\"",
        "num_ids": 639
    },
    {
        "number": 463,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n        else:\n            temp = max_ending_here\n            max_ending_here = max(arr[i], min_ending_here * arr[i])\n            min_ending_here = min(temp * arr[i], arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6",
        "num_ids": 626
    },
    {
        "number": 464,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert check_value({1:2, 3:4, 5:6}, 5) == False",
        "num_ids": 339
    },
    {
        "number": 465,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v!= ''}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 357
    },
    {
        "number": 468,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return arr[0]\n\n    # Initialize the maximum product and the maximum subsequence ending at index 0\n    max_product = arr[0]\n    max_ending_here = arr[0]\n\n    # Traverse through the array and update the maximum product and maximum subsequence ending at each index\n    for i in range(1, n):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max_ending_here * arr[i]\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n    return max_product",
        "test": "assert max_product([-2,0,-1]) == 0 ",
        "num_ids": 527
    },
    {
        "number": 470,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0]+test_tup[1], test_tup[1]+test_tup[2], test_tup[-2]+test_tup[-1])",
        "test": "assert add_pairwise((10,20,30,40)) == (30, 50, 70)",
        "num_ids": 421
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result",
        "test": "assert find_remainder([1, 2, 3], 5) == 1 ",
        "num_ids": 264
    },
    {
        "number": 472,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Check whether a given list contains consecutive numbers or not.\n\n    Args:\n        l: A list of integers.\n\n    Returns:\n        A boolean value indicating whether the list contains consecutive numbers or not.\n    \"\"\"\n\n    for i in range(len(l)-1):\n        if abs(l[i+1] - l[i]) == 1:\n            return True\n    return False",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True",
        "num_ids": 340
    },
    {
        "number": 473,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two lists of tuples and returns a new list with tuples that are present in both lists irrespective of their order.\n    '''\n    result = []\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if set(t1) == set(t2):\n                result.append(t1)\n    return result",
        "test": "assert tuple_intersection([(1,2), (2,3), (3,4)], [(2,3), (3,4), (4,5)]) == [(2,3), (3,4)]",
        "num_ids": 578
    },
    {
        "number": 474,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace a character in a string with a new character.\n\n    Parameters:\n    str1 (str): The string to replace characters in.\n    ch (str): The character to replace.\n    newch (str): The new character to replace the old character with.\n\n    Returns:\n    str: The string with the character replaced.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "test": "assert replace_char('hello world', 'l', 'L') == 'heLLo worLd'",
        "num_ids": 312
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "test": "assert sort_counter({'d':10,'b':20,'a':30,'c':5}) == [('d',10),('b',20),('a',30),('c',5)]",
        "num_ids": 490
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest",
        "test": "assert big_sum([-1, -2, -3, -4, -5]) == -15",
        "num_ids": 356
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"hello\") == \"hello\"",
        "num_ids": 148
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1, flags=re.IGNORECASE)",
        "test": "assert remove_lowercase(\"HELLO WORLD\") == \"Helo Wrd\"",
        "num_ids": 285
    },
    {
        "number": 479,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    return n // 10**(len(str(n))-1)",
        "test": "assert first_Digit(1234) == 1",
        "num_ids": 268
    },
    {
        "number": 554,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in list:\n        if i%2!= 0:\n            result.append(i)\n    return result",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 322
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
        "test": "assert difference(1) == 0",
        "num_ids": 474
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,3,5,7,9],5)==1",
        "num_ids": 340
    },
    {
        "number": 557,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "test": "assert toggle_string(\"\") == \"\"",
        "num_ids": 230
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1_list = [int(i) for i in str(n1)]\n    num2_list = [int(i) for i in str(n2)]\n    digit_distance = 0\n    for i in range(len(num1_list)):\n        digit_distance += abs(num1_list[i] - num2_list[i])\n    return digit_distance",
        "test": "assert digit_distance_nums(12, 34) == 5",
        "num_ids": 567
    },
    {
        "number": 559,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function takes a list and its size as input and returns the sum of the largest contiguous sublist.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far",
        "test": "assert max_sub_array_sum([1, -2, 3, 4, -1, 2, 1, -5, 4], 9) == 9",
        "num_ids": 538
    },
    {
        "number": 560,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_union = sorted(union_set)\n    return sorted_union",
        "test": "assert union_elements((1,2,3), (3,4,5)) == [1, 2, 3, 4, 5]",
        "num_ids": 521
    },
    {
        "number": 562,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    \n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n                \n    return max_len",
        "test": "assert Find_Max_Length([1,2,3,4,5]) == 5",
        "num_ids": 454
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values('The price of the product is \"12.99\" dollars.') == ['12.99']",
        "num_ids": 319
    },
    {
        "number": 564,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3], 3) == 3",
        "num_ids": 280
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and splits it into characters.\n    '''\n    return [char for char in word]",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 231
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n//10)",
        "test": "assert sum_digits(1234) == 10",
        "num_ids": 314
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 339
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list",
        "test": "assert empty_list(0) == []",
        "num_ids": 207
    },
    {
        "number": 569,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"cherry\"], [\"dog\", \"cat\", \"bird\"], [\"zebra\", \"lion\", \"tiger\"]]) == [[\"apple\", \"banana\", \"cherry\"], [\"bird\", \"cat\", \"dog\"], [\"lion\", \"tiger\", \"zebra\"]]",
        "num_ids": 582
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as an input. Each sub-list contains a set of unique numbers.\n    The function returns two unique numbers from each sub-list.\n    '''\n    result = []\n    for sub_list in nums:\n        for num in sub_list:\n            if sub_list.count(num) == 1:\n                result.append(num)\n                if len(result) == 2:\n                    return result\n    return result",
        "test": "assert two_unique_nums([1,2,2,3]) == [1,2,3]",
        "num_ids": 479
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 335
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Function to find the surface area of a cylinder.\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    Returns:\n    surface area (float): surface area of the cylinder\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r**2\n    return surface_area",
        "test": "assert surfacearea_cylinder(1,3) == 18.849555921538759, \"surfacearea_cylinder(1,3) should be 18.849555921538759\"",
        "num_ids": 527
    },
    {
        "number": 576,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists as input, A and B, and checks whether A is a sublist of B or not.\n    \"\"\"\n    if A == []:\n        return True\n    else:\n        if A[0] == B[0]:\n            return is_Sub_Array(A[1:], B[1:])\n        else:\n            return is_Sub_Array(A, B[1:])",
        "test": "assert is_Sub_Array([1,2,3,4],[1,2,3,4]) == True",
        "num_ids": 476
    },
    {
        "number": 577,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    \n    else:\n        factorial = 1\n        \n        for i in range(1,n+1):\n            factorial = factorial * i\n        \n        return factorial % 10",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 302
    },
    {
        "number": 578,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 573
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty list to store the dissimilar elements\n    dissimilar_elements = []\n    \n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element is not equal to the corresponding element in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # If not, append it to the dissimilar_elements list\n            dissimilar_elements.append(test_tup1[i])\n            \n    # Return the list of dissimilar elements\n    return dissimilar_elements",
        "test": "assert find_dissimilar((1, 2, 3), (2, 3, 4)) == find_dissimilar((1, 2, 3), (2, 3, 4))",
        "num_ids": 649
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def even_ele(test_tuple, even_fnc): \n    \"\"\"\n    A function to remove uneven elements in a nested mixed tuple.\n    \"\"\"\n    result = []\n    for item in test_tuple:\n        if isinstance(item, (int, float)):\n            if even_fnc(item):\n                result.append(item)\n        else:\n            sub_result = even_ele(item, even_fnc)\n            if sub_result:\n                result.append(sub_result)\n    return tuple(result)\n\ndef is_even(num):\n    \"\"\"\n    A helper function to check if a number is even.\n    \"\"\"\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert even_ele(((1, 2), (3, 4)), lambda x: x % 2 == 0) == ((2,), (4,))",
        "num_ids": 548
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surface_Area(b, s):\n    '''\n    Calculates the surface area of a square pyramid with given base edge and height.\n    '''\n    # calculate the area of the base\n    base_area = 4 * b * b\n    # calculate the area of the triangle at the apex\n    apex_area = (b * b) / 2\n    # calculate the area of the square at the bottom\n    bottom_area = 4 * b * s\n    # calculate the total surface area\n    total_area = base_area + apex_area + bottom_area\n    # return the result\n    return total_area",
        "test": "assert surface_Area(7, 4) == 44 # Base edge of square pyramid = 7, Height = 4",
        "num_ids": 488
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function checks if a dictionary is empty.\n    \"\"\"\n    if dict1:\n        return False\n    else:\n        return True",
        "test": "assert my_dict({}) == True  # empty dictionary returns True",
        "num_ids": 224
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - i - 1)\n        return result",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 314
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n\n    # find all occurrences of adverbs ending with \"ly\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n\n    # if there are no adverbs ending with \"ly\", return None\n    if len(adverbs) == 0:\n        return None\n\n    # else, return the first adverb and its positions in the original string\n    else:\n        first_adverb = adverbs[0]\n        first_index = text.index(first_adverb)\n        return first_adverb, first_index",
        "test": "assert find_adverbs('I often go to the gym every day. The gym is always packed with athletes.') == [('gym', 10)]",
        "num_ids": 655
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Finds the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    return result",
        "test": "assert expensive_items([('apples', 2), ('bananas', 1), ('oranges', 3), ('grapes', 4)], 3) == [('oranges', 3), ('apples', 2), ('grapes', 4)]",
        "num_ids": 627
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 4) == [1, 2, 3, 4], \"Incorrect split at 4\"",
        "num_ids": 399
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as an input and returns a tuple.\n    \"\"\"\n    return tuple(lst)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 227
    },
    {
        "number": 588,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num",
        "test": "assert big_diff([1,2,3,4,5]) == 4",
        "num_ids": 285
    },
    {
        "number": 589,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function finds all the perfect squares between two given numbers.\n\n    Args:\n    a (int): the first number\n    b (int): the second number\n\n    Returns:\n    A list of all the perfect squares between a and b.\n    \"\"\"\n\n    # Initialize an empty list to store the perfect squares\n    squares = []\n\n    # Loop through all the numbers between a and b (inclusive)\n    for num in range(a, b+1):\n\n        # Check if the number is a perfect square\n        root = int(num**0.5)\n        if root**2 == num:\n            squares.append(num)\n\n    # Return the list of perfect squares\n    return squares",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 545
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x, y)",
        "test": "assert polar_rect(2,cmath.pi/3) == (2.0,1.4142135623730951)",
        "num_ids": 362
    },
    {
        "number": 591,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 404
    },
    {
        "number": 592,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    res = 1\n    for i in range(k):\n        res = res * (n-i) / (i+1)\n    return res",
        "test": "assert binomial_Coeff(5,2) == 10",
        "num_ids": 337
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0+(\\d)', r'\\1', ip)",
        "test": "assert removezero_ip('255.255.255.0') == '255.255.255.0'",
        "num_ids": 350
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and returns the difference between the first even and first odd number.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += 1\n            if even == 1:\n                first_even = i\n        else:\n            odd += 1\n            if odd == 1:\n                first_odd = i\n    return first_even - first_odd",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 482
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert one binary number to the other.\n    '''\n    if len(str1)!= len(str2):\n        return \"Length of both strings should be equal\"\n    \n    # Convert the binary strings to integer lists\n    num1 = [int(d) for d in str1]\n    num2 = [int(d) for d in str2]\n    \n    # Initialize a list to store the positions of digits in num2\n    positions = [-1] * 10\n    \n    # Traverse through num2 and store the positions of digits in num2\n    for i in range(len(num2)):\n        positions[num2[i]] = i\n    \n    # Initialize variables to store the minimum number of swaps required to convert one binary number to the other\n    min_swaps = 0\n    temp = 0\n    \n    # Traverse through num1 and count the minimum number of swaps required to convert one binary number to the other\n    for i in range(len(num1)):\n        if num1[i]!= num2[i]:\n            # If the digits do not match, swap the digits and update the positions list accordingly\n            temp = positions[num1[i]]\n            positions[num1[i]] = i\n            positions[num2[i]] = temp\n            min_swaps += 1\n    \n    return min_swaps",
        "test": "assert min_Swaps('1010', '1100') == 2  # should return 2",
        "num_ids": 985
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = sys.getsizeof(tuple_list)\n    return size",
        "test": "assert tuple_size((1, 2, 3)) == sys.getsizeof((1, 2, 3))",
        "num_ids": 402
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while True:\n        if i >= len(arr1):\n            return arr2[k-1]\n        if j >= len(arr2):\n            return arr1[k-1]\n        if k == 1:\n            return min(arr1[i], arr2[j])\n        new_i = min(i+k//2-1, len(arr1)-1)\n        new_j = min(j+k//2-1, len(arr2)-1)\n        pivot_i = partition(arr1, i, new_i)\n        pivot_j = partition(arr2, j, new_j)\n        if pivot_i == k-1:\n            return arr1[pivot_i]\n        elif pivot_j == k-1:\n            return arr2[pivot_j]\n        elif pivot_i < k-1:\n            i = pivot_i + 1\n        else:\n            j = pivot_j + 1\n\ndef partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[right] = arr[right], arr[i+1]\n    return i+1\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [6, 7, 8, 9, 10]\nk = 5\nprint(find_kth(arr1, arr2, k)) # Output: 5",
        "test": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8], 3) == 5",
        "num_ids": 994
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** len(str(number))\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 492
    },
    {
        "number": 599,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_average(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of first n natural numbers\n    and the average of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    return sum, average",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 285
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is even, otherwise False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 204
    },
    {
        "number": 602,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None",
        "test": "assert first_repeated_char('abca') == 'a'",
        "num_ids": 303
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    \"\"\"\n    This function returns a list of all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for num in range(2, n+1):\n        is_lucid = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(num)\n    return lucid_numbers",
        "test": "assert get_ludic(1) == []",
        "num_ids": 433
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # Split the string into words using whitespace as the delimiter\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1] # Reverse the word\n        reversed_words.append(reversed_word)\n    reversed_sentence =''.join(reversed_words) # Join the reversed words with a space in between\n    return reversed_sentence",
        "test": "assert reverse_words(\"a b c d e\") == \"e d c b a\"",
        "num_ids": 353
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and checks if it is a prime number or not.\n    Returns True if it is a prime number, False otherwise.\n    '''\n    # Firstly, we check if the number is less than 2, since 1 and numbers less than 1 are not prime\n    if num < 2:\n        return False\n    \n    # Next, we check if the number is 2, which is the only even prime number\n    if num == 2:\n        return True\n    \n    # We check if the number is divisible by any number less than itself\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    # If the loop completes without returning False, it means the number is prime\n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 424
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    \"\"\"\n    radian = degree * math.pi / 180\n    return radian",
        "test": "assert radian_degree(360) == 2*math.pi",
        "num_ids": 220
    },
    {
        "number": 607,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals('abc', r'a') == ('a', 0, 1)",
        "num_ids": 397
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers))\n    return bell_numbers[n]",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 320
    },
    {
        "number": 610,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Removes the k-th element from a list and returns the modified list.\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        raise ValueError(\"Invalid k value\")\n    return lst[:k] + lst[k+1:]",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 4, 5]",
        "num_ids": 426
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    \"\"\"\n    max_value = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value",
        "test": "assert max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 1) == 7",
        "num_ids": 485
    },
    {
        "number": 612,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    return [list(i) for i in zip(*lst)]",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1,3,5],[2,4,6]]",
        "num_ids": 439
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the cumulative sum of all the values that are present in the tuples.\n    \"\"\"\n    sum_list = []\n    for i in test_list:\n        for j in i:\n            sum_list.append(j)\n    return sum(sum_list)",
        "test": "assert cummulative_sum([(1,2,3),(4,5,6),(7,8,9)]) == [6, 15, 24]",
        "num_ids": 447
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result",
        "test": "assert average_tuple(((1, 2), (3, 4))) == [1.5, 3.5]",
        "num_ids": 392
    },
    {
        "number": 616,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must be of the same length.\")\n    else:\n        mod_tup = ()\n        for i in range(len(test_tup1)):\n            mod_tup += (test_tup1[i] % test_tup2[i],)\n        return mod_tup",
        "test": "assert tuple_modulo((5, 10, 20), (3, 5, 7)) == (2, 0, 6)",
        "num_ids": 512
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize the list to store the jumps for each point\n    jumps = [float('inf')] * d\n    \n    # initialize the starting point\n    jumps[0] = 0\n    \n    # loop through all the points from 1 to d-1\n    for i in range(1, d):\n        # loop through all the steps available to reach the point\n        for j in range(1, steps+1):\n            # if the jump is possible from the current point, update the minimum number of jumps to reach the point\n            if i + j < d and jumps[i+j] > jumps[i] + 1:\n                jumps[i+j] = jumps[i] + 1\n    \n    # return the minimum number of jumps required to reach the point (d, 0)\n    return jumps[d-1]",
        "test": "assert min_Jumps([3, 2, 1, 1, 4], 2) == 0",
        "num_ids": 788
    },
    {
        "number": 618,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([1,2,3],[4,5,6]) == [0.25,0.4,0.5]",
        "num_ids": 456
    },
    {
        "number": 619,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create two empty lists, one for numbers and one for non-numbers\n    nums = []\n    non_nums = []\n    \n    # Iterate over the words and separate numbers and non-numbers\n    for word in words:\n        if word.isdigit():\n            nums.append(word)\n        else:\n            non_nums.append(word)\n    \n    # Join the non-number words and the number words in the original order\n    new_str = \" \".join(non_nums + nums)\n    \n    return new_str",
        "test": "assert move_num(\"a1b2c3d4e\") == \"a1b2c3d4e\"",
        "num_ids": 591
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    '''\n    This function takes a list of numbers as input and returns the size of the largest subset of numbers so that every pair is divisible.\n    '''\n    \n    a = sorted(a) # sort the list of numbers\n    n = len(a) # get the length of the list\n    dp = [0]*n # create a list to store the size of the largest subset for every index of the list\n\n    # initialize the first element\n    dp[0] = 1\n\n    # for all elements from 1 to n-1\n    for i in range(1, n):\n        # if the current element is divisible by the previous element, then add 1 to the size of the largest subset\n        if a[i] % a[i-1] == 0:\n            dp[i] = dp[i-1] + 1\n        # if the current element is not divisible by the previous element, then use the largest subset of the previous element\n        else:\n            dp[i] = dp[i-1]\n    \n    # return the size of the largest subset\n    return dp[-1]",
        "test": "assert largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 4",
        "num_ids": 759
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i == n:\n        return arr2[j-1]\n    else:\n        return arr1[i-1]",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 3) == 3",
        "num_ids": 684
    },
    {
        "number": 623,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as inputs. \n    It computes the n-th power of each number in the list and returns the result as a new list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1,2,3,4,5],1) == [1,2,3,4,5]",
        "num_ids": 362
    },
    {
        "number": 624,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Converts a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"HELLO\") == \"HELLO\"",
        "num_ids": 212
    },
    {
        "number": 625,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 376
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Finds the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the diameter of the semicircle\n    d = 2 * r\n    \n    # Calculate the length of the hypotenuse of the largest triangle\n    h = math.sqrt(d**2 - (r/2)**2)\n    \n    # Calculate the area of the triangle\n    area = 0.5 * h * r\n    \n    return area",
        "test": "assert triangle_area(4) == 16.588457268119896",
        "num_ids": 473
    },
    {
        "number": 627,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function will find the smallest missing number from a sorted list of natural numbers.\n    :param array: A list of natural numbers sorted in ascending order.\n    :param start: The starting index of the array (default is 0).\n    :param end: The ending index of the array (default is the last index of the array).\n    :return: The smallest missing number.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    # Find the missing number\n    missing = 1\n    for i in range(start, end + 1):\n        if array[i] == missing:\n            missing += 1\n\n    return missing",
        "test": "assert find_First_Missing([0,1,2,3,5,6,7]) == 4",
        "num_ids": 984
    },
    {
        "number": 628,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 237
    },
    {
        "number": 629,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers from the list.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 368
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(coord, sub=[]):\n    \"\"\"\n    Extract all adjacent coordinates of the given coordinate tuple.\n\n    Parameters:\n    coord (tuple): A tuple of integers representing the x and y coordinates of a point.\n    sub (list, optional): A list of tuples representing coordinates that have already been visited. Defaults to an empty list.\n\n    Returns:\n    list: A list of tuples representing all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n\n    # Initialize variables\n    x, y = coord\n    adj = []\n\n    # Check if the current coordinate is within the boundaries of the grid\n    if x > 0 and y > 0:\n        # Add the coordinates to the list of adjacent coordinates\n        adj.append((x-1, y))\n        adj.append((x+1, y))\n        adj.append((x, y-1))\n        adj.append((x, y+1))\n\n    # Check if the current coordinate is on the edge of the grid\n    if x == 0:\n        # Add the coordinates to the list of adjacent coordinates\n        adj.append((x, y-1))\n        adj.append((x, y+1))\n    elif x == n:\n        # Add the coordinates to the list of adjacent coordinates\n        adj.append((x, y-1))\n        adj.append((x, y+1))\n    elif y == 0:\n        # Add the coordinates to the list of adjacent coordinates\n        adj.append((x-1, y))\n        adj.append((x+1, y))\n    elif y == m:\n        # Add the coordinates to the list of adjacent coordinates\n        adj.append((x-1, y))\n        adj.append((x+1, y))\n\n    # Remove any coordinates that have already been visited\n    adj = [c for c in adj if c not in sub]\n\n    return adj",
        "test": "assert adjac((1,1)) == [(0,1), (1,0), (1,2), (2,1)]",
        "num_ids": 902
    },
    {
        "number": 631,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    if'' in text:\n        # Replace whitespaces with underscores\n        text = text.replace(' ', '_')\n        print(f\"Original string: '{text}'\")\n    else:\n        # Replace underscores with whitespaces\n        text = text.replace('_','')\n        print(f\"Original string: '{text}'\")\n    return text",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 376
    },
    {
        "number": 632,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    # Create two lists, one for non-zero elements and another for zeroes.\n    non_zeroes = []\n    zeroes = []\n    # Iterate over the input list and add non-zero elements to the non_zeroes list and zeroes to the zeroes list.\n    for num in num_list:\n        if num!= 0:\n            non_zeroes.append(num)\n        else:\n            zeroes.append(num)\n    # Concatenate the non-zeroes and zeroes lists and return the result.\n    return non_zeroes + zeroes",
        "test": "assert move_zero([1, 0, 2, 3, 0, 4, 5, 0]) == [1, 2, 3, 4, 5, 0, 0, 0]",
        "num_ids": 644
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers as input and returns the sum of the XOR of all pairs of integers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i]^arr[j]\n    return sum",
        "test": "assert pair_xor_Sum([2,2,2,2,2],5) == 0 # (2^2)+(2^2)+(2^2)+(2^2)+(2^2) = 0",
        "num_ids": 571
    },
    {
        "number": 635,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts a list using heap sort algorithm.\n    '''\n    # Convert the list to a max heap\n    heap = iterable[::]\n    hq.heapify(heap)\n\n    # Extract elements from the heap one by one and append to the result list\n    result = []\n    for i in range(len(heap)-1, -1, -1):\n        result.append(hq.heappop(heap))\n\n    return result",
        "test": "assert heap_sort([3, 2, 1, 5, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 478
    },
    {
        "number": 637,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    :param actual_cost: the actual cost of the item\n    :param sale_amount: the amount sold for the item\n    :return: True if there is no profit or loss, False otherwise\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        print(\"There is profit!\")\n        return False\n    elif profit < 0:\n        print(\"There is loss!\")\n        return False\n    else:\n        print(\"There is no profit or loss.\")\n        return True",
        "test": "assert noprofit_noloss(100,100) == True",
        "num_ids": 448
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Function to calculate wind chill index rounded to the next integer.\n    :param v: Wind velocity in km/h.\n    :param t: Temperature in Celsius.\n    :return: Wind chill index rounded to the next integer.\n    '''\n    # Calculate the wind chill index using the formula: WCI = 13.12 + 0.6215*T - 11.37*v^0.16 + 0.3965*T*v^0.16\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    # Round the wind chill index to the next integer using the math.ceil() function\n    return math.ceil(wci)",
        "test": "assert wind_chill(10, 10) == 10",
        "num_ids": 706
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the filtered names\n    filtered_names = []\n    # Iterate through each name in the input list\n    for name in sample_names:\n        # Check if the first letter of the name is lowercase\n        if name[0].islower():\n            # If it is, skip the name and move on to the next one\n            continue\n        else:\n            # If it's not, add the name to the filtered_names list\n            filtered_names.append(name)\n    # Sum the length of the filtered names and return the result\n    return sum([len(name) for name in filtered_names])",
        "test": "assert sample_nam(['ALICE', 'Bob', 'Charlie', 'david', 'Emily']) == 24",
        "num_ids": 491
    },
    {
        "number": 640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^()]*\\)') # matches any string inside parentheses\n    new_items = []\n    for item in items:\n        new_item = re.sub(pattern, '', item) # removes any string inside parentheses\n        new_items.append(new_item)\n    return new_items",
        "test": "assert remove_parenthesis('(hello) world') =='world'",
        "num_ids": 393
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth nonagonal number.\n    \"\"\"\n    return n * (3*n - 1) // 2",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 299
    },
    {
        "number": 643,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*(?:^|\\W)z(?!$|\\W)|\\W.*z.*\\b)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle(\"hello world\") == True",
        "num_ids": 336
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and a position k as input and returns the reverse of the array up to the given position k.\n    \"\"\"\n    # Reverse the array up to the given position k\n    for i in range(k//2):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n        \n    # Return the reversed array\n    return input",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 1) == [1, 2, 3, 4, 5]",
        "num_ids": 539
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "test": "assert add_dict_to_tuple(('hello',), {'d': 4}) == (('hello',), {'d': 4})",
        "num_ids": 387
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. \n    We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # create a 2D table to store the maximum average of a path ending at each cell\n    # initialize the table with -1, indicating that we haven't computed the maximum average for that cell yet\n    table = [[-1 for j in range(n)] for i in range(n)]\n    \n    # initialize the maximum average found so far to 0\n    max_avg = 0\n    \n    # compute the maximum average for each cell\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                # the maximum average for the top-left cell is simply the cost of that cell\n                table[i][j] = cost[i][j]\n            elif i == 0:\n                # the maximum average for the first row is the maximum average of the cell to the left\n                table[i][j] = table[i][j-1] + cost[i][j]\n            elif j == 0:\n                # the maximum average for the first column is the maximum average of the cell above\n                table[i][j] = table[i-1][j] + cost[i][j]\n            else:\n                # the maximum average for any other cell is the maximum average of the cell above and to the left, plus the cost of the current cell\n                table[i][j] = max(table[i-1][j], table[i][j-1]) + cost[i][j]\n            \n            # update the maximum average found so far\n            max_avg = max(max_avg, table[i][j])\n    \n    # return the maximum average found\n    return max_avg",
        "test": "assert maxAverageOfPath([",
        "num_ids": 1092
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, details in students.items():\n        if details[0] >= h and details[1] >= w:\n            filtered_students[student] = details\n    return filtered_students",
        "test": "assert filter_data({\"Alice\":(1.7,5.2), \"Bob\":(1.8,5.1), \"Charlie\":(1.6,5.3), \"David\":(1.9,5.0)},1.7,5.2)=={\"Alice\":(1.7,5.2)}",
        "num_ids": 779
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3], [2, 3, 3]) == [(0, 1), (1, 2)]",
        "num_ids": 431
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    base = abs(base)\n    while power > 0:\n        result += base % 10\n        base //= 10\n        power -= 1\n    return result",
        "test": "assert power_base_sum(3, 5) == 243, \"power_base_sum(3, 5) should be 243\"",
        "num_ids": 393
    },
    {
        "number": 725,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "test": "assert extract_quotation(\"He said, \\\"Let's go to the park!\\\"\") == ['Let\\'s go to the park!']",
        "num_ids": 358
    },
    {
        "number": 726,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result_tup",
        "test": "assert multiply_elements((1, 2, 3, 4)) == (2, 6, 12), \"Test case 1 failed\"",
        "num_ids": 485
    },
    {
        "number": 728,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]",
        "test": "assert sum_list([], []) == []",
        "num_ids": 390
    },
    {
        "number": 730,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        group = list(group)\n        if len(group) > 1:\n            result.extend(group[:-1])\n        else:\n            result.append(group[0])\n    return result",
        "test": "assert consecutive_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3]",
        "num_ids": 588
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return surface_area",
        "test": "assert lateralsurface_cone(2,3) == 15.707963267948966",
        "num_ids": 384
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[\\s,\\.]', ':', text)\n\ntext = \"Hello, world! This is a test.\"\nnew_text = replace_specialchar(text)\nprint(new_text)  # Output: \"Hello:world:This:is:a:test.\"",
        "test": "assert replace_specialchar(\"hello world\") == \"hello:world\"",
        "num_ids": 323
    },
    {
        "number": 733,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1",
        "test": "assert find_first_occurrence([1, 2, 2, 2, 3, 4, 5], 2) == 1",
        "num_ids": 582
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sublist = arr[i:j]\n            res += reduce(lambda x, y: x * y, sublist, 1)\n    return res",
        "test": "assert sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6]) == 85",
        "num_ids": 708
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def set_middle_bits(n):\n    '''\n    This function will toggle all the bits except the first and last bits of a given number.\n    '''\n    # Convert the given number to binary and split it into a list of bits\n    bits = list(bin(n)[2:])\n\n    # Reverse the list of bits and toggle all the bits except the first and last bits\n    for i in range(1, len(bits)-1):\n        bits[i] = '1' if bits[i] == '0' else '0'\n\n    # Convert the list of bits back to an integer\n    result = int(''.join(bits), 2)\n\n    return result",
        "test": "assert set_middle_bits(0b1100) == 0b1010  # expected output: 1010",
        "num_ids": 498
    },
    {
        "number": 736,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i",
        "test": "assert left_insertion([1,2,3,4,5], 0) == 0",
        "num_ids": 432
    },
    {
        "number": 737,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('Eagle') == True",
        "num_ids": 295
    },
    {
        "number": 738,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 255
    },
    {
        "number": 739,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return math.floor(n * (math.sqrt(8 * n + 1) - 1) / 2)",
        "test": "assert find_Index(1) == 1",
        "num_ids": 394
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        if i+1 < len(test_tup):\n            result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "test": "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}",
        "num_ids": 514
    },
    {
        "number": 741,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same, else False.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert all_Characters_Same('a') == True",
        "num_ids": 256
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (6 * (math.sqrt(2) + 1)) / 12 * side ** 2\n    return area\n",
        "test": "assert area_tetrahedron(6) == 12, \"Incorrect area for side 6\"",
        "num_ids": 361
    },
    {
        "number": 743,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rotate_right(lst, k):\n    \"\"\"\n    Rotate a list to the right by a specified number of items.\n    \"\"\"\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 370
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3)) == False",
        "num_ids": 243
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum+1)))",
        "test": "assert divisible_by_digits(100, 1000) == [100, 120, 123, 126, 129, 132, 135, 138, 141, 144, 147, 150, 153, 156, 159, 162, 165, 168, 171, 174, 177, 180, 183, 186, 189, 192, 195, 198, 201, 204, 207, 210, 213, 216, 219, 222, 225, 228, 231, 234, 237, 240, 243, 246, 249, 252, 255, 258, 261, 264, 267, 270, 273, 276, 279, 282, 285, 288, 291, 294, 297, 300, 303, 306, 309, 312, 315, 318, 321, 324, 327, 330, 333, 336, 339, 342, 345, 348, 351, 354, 357, 360, 363, 366, 369, 372, 375, 378, 381, 384, 387, 390, 393, 396, 399, 402, 405, 408, 411, 414, 417, 420, 423, 426, 429, 432, 435, 438, 441, 444, 447, 450, 453, 456, 459, 462, 465, 468, 471, 474, 477, 480, 483, 486, 489, 492, 495, 498, 501, 504, 507, 510, 513, 516, 519, 522, 525, 528, 531, 534, 537, 540, 543, 546, 549, 552, 555, 558, 561, 564, 567, 570, 573, 576, 579, 582, 585, 588, 591, 594, 597, 600, 603, 606, 609, 612, 615, 618, 621, 624, 627, 630, 633, 636, 639, 642, 645, 648, 651, 654, 657, 660, 663, 666, 669, 672, 675, 678, 681, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 714, 717, 720, 7",
        "num_ids": 1721
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (0.5*math.pi*r**2)*a/360\n",
        "test": "assert sector_area(10, 90) == math.pi * 10 * 10 / 2, 'Wrong area for sector with radius 10 and angle 90'",
        "num_ids": 466
    },
    {
        "number": 747,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # To find the longest common subsequence between two strings, we can use dynamic programming. \n    # We create a 2D array with dimensions (m+1) x (n+1), where m and n are the lengths of the two strings. \n    # The element at arr[i][j] will store the length of the longest common subsequence of the substrings from X[0:i-1] and Y[0:j-1].\n    # We fill the array using the following recurrence relation:\n    # arr[i][j] = max(arr[i-1][j], arr[i][j-1], arr[i-1][j-1] + 1), if X[i-1] == Y[j-1]\n    # arr[i][j] = max(arr[i-1][j], arr[i][j-1]), otherwise\n    arr = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Fill the array using the above recurrence relation\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                arr[i][j] = arr[i-1][j-1] + 1\n            else:\n                arr[i][j] = max(arr[i-1][j], arr[i][j-1])\n\n    # We can now use the array to backtrack and find the longest common subsequence between the three strings\n    lcs = \"\"\n    i, j = len(X), len(Y)\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif arr[i-1][j] > arr[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs",
        "test": "assert lcs_of_three('AGGTAB', 'GXTXAYB', 'GTAB') == 'GTAB'",
        "num_ids": 1463
    },
    {
        "number": 748,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # regex pattern to match capital letters followed by lowercase letters\n    pattern = re.compile(r'(?<=[A-Z])(?=[a-z])')\n    # split the string into words using regex pattern\n    words = re.split(pattern, str1)\n    # join the words with spaces between them\n    result =''.join(words)\n    return result",
        "test": "assert capital_words_spaces('The Quick Brown Fox') == 'The Quick Brown Fox'",
        "num_ids": 496
    },
    {
        "number": 749,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a list of strings of numbers numerically.\n    \"\"\"\n    return sorted(nums_str, key=lambda x: float(x))",
        "test": "assert sort_numeric_strings([\"10\", \"5\", \"15\", \"2\", \"1\"]) == [\"1\", \"2\", \"5\", \"10\", \"15\"]",
        "num_ids": 481
    },
    {
        "number": 750,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function adds the given tuple to the given list.\n    \"\"\"\n    return test_list + list(test_tup)",
        "test": "assert add_tuple([1,2,3], (4,5)) == [1,2,3,4,5]",
        "num_ids": 315
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    # base case\n    if i >= len(arr):\n        return True\n    \n    # left child exists and is less than parent\n    if 2*i+1 < len(arr) and arr[2*i+1] < arr[i]:\n        return False\n    \n    # right child exists and is less than parent\n    if 2*i+2 < len(arr) and arr[2*i+2] < arr[i]:\n        return False\n    \n    # recursively check left and right subtree\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    # check if the given array represents a min heap or not\n    return check_min_heap_helper(arr, 0)",
        "test": "assert check_min_heap_helper([4, 2, 6, 1, 3, 5], 1) == False",
        "num_ids": 947
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 326
    },
    {
        "number": 753,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # create a list of tuples with id and value\n    test_list = [(record[0], record[1]) for record in test_list]\n\n    # sort the list of tuples by value in ascending order\n    test_list = sorted(test_list, key=lambda x: x[1])\n\n    # return the first k records from the sorted list\n    return test_list[:K]",
        "test": "assert min_k([(1, 'apple'), (2, 'banana'), (3, 'cherry'), (4, 'date'), (5, 'elderberry')], 5) == [(1, 'apple'), (2, 'banana'), (3, 'cherry'), (4, 'date'), (5, 'elderberry')]",
        "num_ids": 596
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [5, 6, 7]) == []",
        "num_ids": 624
    },
    {
        "number": 755,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    numbers = sorted(numbers)\n    return numbers[1]",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 366
    },
    {
        "number": 756,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one('abbb') == True",
        "num_ids": 297
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    This function takes a list of strings as input and returns the count of pairs of strings that are reverse of each other.\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs([\"bat\", \"tab\", \"cat\"]) == 1",
        "num_ids": 541
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            sub_list = tuple(list1[i:j+1])\n            if sub_list in dict:\n                dict[sub_list] += 1\n            else:\n                dict[sub_list] = 1\n    return dict",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 733
    },
    {
        "number": 759,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n\n    whole, decimal = num.split('.')\n    if len(decimal) > 2:\n        return False\n\n    return True",
        "test": "assert is_decimal('1.23') == True",
        "num_ids": 325
    },
    {
        "number": 760,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1",
        "test": "assert unique_Element([1,2,3,4,5]) == False",
        "num_ids": 264
    },
    {
        "number": 762,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False",
        "test": "assert check_monthnumber_number(2) == True # February has 28 days in a leap year and 29 days in a non-leap year",
        "num_ids": 432
    },
    {
        "number": 763,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    :param arr: list of integers\n    :param n: length of the list\n    :return: minimum difference between any two elements in the array\n    \"\"\"\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize the minimum difference to be infinity\n    min_diff = float('inf')\n\n    # iterate through the array\n    for i in range(n-1):\n        # calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n\n        # if the difference is smaller than the current minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff",
        "test": "assert find_min_diff([1,2,3,4,5],5) == 1",
        "num_ids": 620
    },
    {
        "number": 764,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr('12345') == 5",
        "num_ids": 265
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        is_polite = True\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n        i += 1\n    return i - 1",
        "test": "assert is_polite(1) == 1",
        "num_ids": 656
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 432
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum.\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 5) == 2",
        "num_ids": 510
    },
    {
        "number": 769,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns a new list containing the elements that are only in li1.\n\n    Parameters:\n        li1 (list): The first list.\n        li2 (list): The second list.\n\n    Returns:\n        list: The difference between li1 and li2.\n    \"\"\"\n    return [elem for elem in li1 if elem not in li2]",
        "test": "assert Diff([1,2,3], [1,2,3]) == [], \"Test case 1 failed\"",
        "num_ids": 471
    },
    {
        "number": 770,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "test": "assert odd_num_sum(1) == 1",
        "num_ids": 345
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "test": "assert check_expression(\"((()))\") == True",
        "num_ids": 409
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)",
        "test": "assert remove_length(\"apple banana cherry date elderberry\", 6) == \"apple banana cherry date elderberry\"",
        "num_ids": 440
    },
    {
        "number": 773,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.finditer(pattern, text)\n    if match:\n        return [(m.start(), m.end()) for m in match]\n    else:\n        return None",
        "test": "assert occurance_substring(\"hello world\",\"l\") == [(2, 3), (3, 4), (9, 10)]",
        "num_ids": 465
    },
    {
        "number": 775,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 2, 3, 4, 5]) == False",
        "num_ids": 320
    },
    {
        "number": 776,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    This function takes a string as input and returns the number of characters in the string that have vowels as their neighbors.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels('hello') == 0",
        "num_ids": 447
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as an argument and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    # iterate through the list and update the frequency of each element in the dictionary\n    for i in arr:\n        freq[i] = freq.get(i, 0) + 1\n    # create an empty list to store the unique elements\n    unique_elements = []\n    # iterate through the dictionary and append each unique element to the list\n    for key in freq:\n        if freq[key] == 1:\n            unique_elements.append(key)\n    # calculate the sum of the unique elements and return it\n    return sum(unique_elements)",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 632
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], g))\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result",
        "test": "assert pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4]) == [[1, 1, 1], [2, 2], [3, 3, 3], [4, 4, 4]]",
        "num_ids": 661
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 636
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    for r in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, r):\n            if sum(comb) == 0:\n                print(comb)",
        "test": "assert find_combinations([(1,2,3),(2,3,4),(1,3,4),(5,6,7)]) == [(1, 2, 3), (1, 3, 4), (2, 3, 4)]",
        "num_ids": 1634
    },
    {
        "number": 781,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count",
        "test": "assert count_divisors(10) == 4, \"There are 4 divisors of 10\"",
        "num_ids": 422
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if j - i + 1 % 2!= 0:\n                sum += sum_subarray(arr, i, j)\n    return sum\n\ndef sum_subarray(arr, i, j):\n    '''\n    Helper function to calculate the sum of a subarray.\n    '''\n    return sum(arr[i:j+1])",
        "test": "assert odd_length_sum([1,2,3,4,5,6]) == 66",
        "num_ids": 544
    },
    {
        "number": 783,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in three color components (r, g, b) in the range [0, 255],\n    and returns the corresponding hue, saturation, and value (h, s, v) components in the range [0, 1].\n    \"\"\"\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue /= 6\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n\n    value = cmax\n\n    return (hue, saturation, value)\n",
        "test": "assert rgb_to_hsv(255, 255, 255) == (0.0, 0.0, 1.0)",
        "num_ids": 986
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return even_num * num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return odd_num * num\n    return even_num * odd_num",
        "test": "assert mul_even_odd([1, 3, 5, 7, 9]) == 3",
        "num_ids": 530
    },
    {
        "number": 785,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function converts a tuple string to a tuple of integers.\n    \"\"\"\n    return tuple(map(int, test_str[1:-1].split(',')))",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 373
    },
    {
        "number": 786,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "test": "assert right_insertion([1, 3, 5, 7], 0) == 0",
        "num_ids": 294
    },
    {
        "number": 787,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    return re.search(pattern, text) is not None",
        "test": "assert text_match_three('aababb') == True",
        "num_ids": 235
    },
    {
        "number": 788,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    This function creates a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple",
        "test": "assert new_tuple([1,2,3], \"test\") == (1,2,3,\"test\")",
        "num_ids": 252
    },
    {
        "number": 790,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert even_position([2,4,6,8,10]) == True",
        "num_ids": 302
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if not isinstance(i, tuple):\n            result.append(i)\n        else:\n            result += remove_nested(i)\n    return tuple(result)",
        "test": "assert remove_nested((1, 2, 3, (4, 5, 6))) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 492
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([[]]) == 1",
        "num_ids": 242
    },
    {
        "number": 793,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last(arr, x):\n    '''\n    Returns the last position of x in arr. If x is not found, returns -1.\n    '''\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result",
        "test": "assert last([1,2,3,3,3,4,5],1) == 0",
        "num_ids": 685
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_starta_endb('an apple in the hand') == 'an apple in the hand'",
        "num_ids": 299
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())",
        "test": "assert return_sum({'a':1, 'b':2, 'c':3}) == 6",
        "num_ids": 312
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_odd(n):\n    '''\n    This function takes an integer 'n' as input and returns the sum of all odd natural numbers within the range 1 to n.\n    '''\n    # Initialize the sum of odd numbers to 0\n    sum_odd_num = 0\n    \n    # Loop through the range 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is odd\n        if i % 2!= 0:\n            # Add the odd number to the sum\n            sum_odd_num += i\n    \n    # Return the sum of odd numbers\n    return sum_odd_num",
        "test": "assert sum_odd(2) == 1",
        "num_ids": 456
    },
    {
        "number": 798,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)",
        "test": "assert _sum([1, 2, 3]) == 6",
        "num_ids": 242
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function takes two arguments - n and d - and rotates the bits of the number n by d bits to the left.\n    We assume that the number is 32 bit.\n    \"\"\"\n    # Convert n to binary string and remove the prefix '0b'\n    binary_n = bin(n)[2:]\n\n    # Pad the binary string with leading zeros to make it 32 bits long\n    binary_n = binary_n.zfill(32)\n\n    # Split the binary string into two parts - the first d bits and the rest of the bits\n    first_d_bits = binary_n[:d]\n    rest_of_bits = binary_n[d:]\n\n    # Concatenate the rest of the bits with the rotated first d bits\n    rotated_bits = rest_of_bits + first_d_bits\n\n    # Convert the rotated bits back to an integer\n    rotated_n = int(rotated_bits, 2)\n\n    return rotated_n",
        "test": "assert left_rotate(0b00001111, 4) == 0b11110000",
        "num_ids": 587
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as an argument and removes all whitespaces from it.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces('hello world') == 'helloworld'",
        "num_ids": 239
    },
    {
        "number": 801,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    if x == y and y == z:\n        count += 3\n    elif x == y or y == z or z == x:\n        count += 2\n    elif x == z:\n        count += 1\n        \n    return count",
        "test": "assert test_three_equal(1,1,1)==3",
        "num_ids": 317
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    # Find the mid-point of the array\n    mid = n // 2\n    # Initialize variables for left and right subarrays\n    left = arr[:mid]\n    right = arr[mid:]\n    # Base case: if mid is 0, the array is already sorted\n    if mid == 0:\n        return 0\n    # Recursive case: count the number of rotations in the left and right subarrays\n    left_rotations = count_rotation(left)\n    right_rotations = count_rotation(right)\n    # Combine the counts and return the total count\n    return left_rotations + right_rotations + (left[-1] > right[0])",
        "test": "assert count_rotation([1, 2, 3, 4, 5, 6, 7]) == 0",
        "num_ids": 538
    },
    {
        "number": 803,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    root = int(math.sqrt(n))\n    return root * root == n",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 397
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([1, 2, 3, 4, 5]) == True",
        "num_ids": 291
    },
    {
        "number": 805,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_lists = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_lists = [lst]\n        elif lst_sum == max_sum:\n            max_lists.append(lst)\n    return max_lists",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [[10, 11, 12]]",
        "num_ids": 562
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    max_count = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 0\n        i += 1\n    if count > max_count:\n        max_count = count\n    return max_count",
        "test": "assert max_run_uppercase(\"ABCDdefg\") == 4",
        "num_ids": 459
    },
    {
        "number": 807,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 283
    },
    {
        "number": 808,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple and a value K and returns True if the tuple contains K, and False otherwise.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K((1,2,3,4), 2) == True",
        "num_ids": 313
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 2, 3), (1, 3, 2)) == False",
        "num_ids": 389
    }
]