[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    \n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    \n    return shared_elements",
        "test": "assert similar_elements((1,2,3),(1,2,3,4)) == (1,2,3)",
        "num_ids": 894,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "test": "assert is_not_prime(1) == False",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap and add the first n elements of the list\n    min_heap = nums[:n]\n    hq.heapify(min_heap)\n\n    # Iterate over the remaining elements of the list and add them to the heap if they are larger than the smallest element in the heap\n    for i in range(n, len(nums)):\n        if nums[i] > min_heap[0]:\n            hq.heappushpop(min_heap, nums[i])\n\n    # Return the n largest integers in descending order\n    return sorted(min_heap, reverse=True)",
        "test": "assert heap_queue_largest([1,1,1,1,1],1) == [1]",
        "num_ids": 1270,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Power_Of_Two(x):\n    # checking if x is power of 2\n    if (x & (x-1)) == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(3) == False",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'  # match words that are at least 4 characters long\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert find_char_long('hello world') == ['hello', 'world']",
        "num_ids": 928,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 974,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        # Check if the string is already a palindrome\n        if str == str[::-1]:\n            return 0\n        \n        # Find the longest palindrome in the string\n        longest_palindrome = \"\"\n        for i in range(n):\n            for j in range(i+1, n+1):\n                if str[i:j] == str[i:j][::-1]:\n                    if len(str[i:j]) > len(longest_palindrome):\n                        longest_palindrome = str[i:j]\n        \n        # Check if the longest palindrome is already a substring of the original string\n        if longest_palindrome in str:\n            return str.count(longest_palindrome)\n        \n        # Find the minimum number of rotations required to get the same string\n        min_rotations = n\n        for i in range(1, n):\n            if str == str[i:n] + str[:i]:\n                min_rotations = min(min_rotations, n - i)\n        \n        return min_rotations",
        "test": "assert find_Rotations(\"\") == 0",
        "num_ids": 1240,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Removes first and last occurrence of a given character from the string.\n\n    :param s: the string to process\n    :param ch: the character to remove\n    :return: the modified string\n    \"\"\"\n    if len(s) < 2 or ch not in s:\n        return s\n\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence+1:]\n    else:\n        return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]",
        "test": "assert remove_Occ(\"abcdef\", \"g\") == \"abcdef\"",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sort_matrix(M):\n    # create a list of tuples, where each tuple contains the sum of a row and the row itself\n    row_sums = [(sum(row), row) for row in M]\n\n    # sort the list of tuples by the sum of the rows in ascending order\n    row_sums.sort()\n\n    # extract the sorted rows from the list of tuples and return them as a matrix\n    sorted_rows = [row for sum, row in row_sums]\n    return sorted_rows",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1817,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism as inputs and returns its volume.\n    '''\n    volume = (l*b*h)/3\n    return volume\n",
        "test": "assert find_Volume(0,0,0) == 0",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'(?=.*_[a-z]*[a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore('abc_def') == True",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a",
        "test": "assert square_perimeter(2) == 8",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = ''\n    for char in string:\n        if char not in remove_chars:\n            new_string += char\n    return new_string",
        "test": "assert str_to_list(\"Hello World\", \"aeiouAEIOU\") == \"Hll Wrld\"",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes an array of integers as input and returns True if the array contains any duplicate element, False otherwise.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element in the array\n    freq = {}\n    # iterate over each element in the array\n    for num in arraynums:\n        # if the element is already present in the dictionary, return True\n        if num in freq:\n            return True\n        # if the element is not present in the dictionary, add it with a frequency of 1\n        else:\n            freq[num] = 1\n    # if no duplicate element is found, return False\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 1092,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_woodall(x):\n    '''\n    This function takes an integer as input and returns True if it is woodball,\n    otherwise it returns False.\n    '''\n    if x <= 2:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        for i in range(3, x, 2):\n            if x % i == 0:\n                return False\n        return True",
        "test": "assert is_woodall(10) == False",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the given number and add one to get the result\n    result = int(str(num)[::-1]) + 1\n    \n    # Check if the result is twice the given number\n    if result == 2*num:\n        return True\n    else:\n        return False",
        "test": "assert rev(123456788) == False",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed by concatenating the list of digits.\n    \"\"\"\n    # Convert the list to a string to concatenate the digits.\n    num = ''.join(str(digit) for digit in arr)\n    # Convert the concatenated string to an integer and return it as the largest number.\n    return int(num)",
        "test": "assert find_Max_Num([0,0,0,0,0]) == 0",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(5, -10) == True",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonals = [i*(3*i-1)//2 for i in range(1, 2000)]\n    return octagonals[n-1]",
        "test": "assert is_octagonal(1) == 1 # 1",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            sum_digits = sum(int(digit) for digit in sub)\n            if sum_digits == len(sub):\n                count += 1\n    return count",
        "test": "assert count_Substrings(\"12345\") == 1",
        "num_ids": 1611,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 752,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "test": "assert max_difference([(1,2),(3,4),(5,6)]) == 4",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([(80, 'Maths'), (90, 'Science'), (70, 'English'), (60, 'Hindi'), (75, 'Social Studies')]) == [('English', 70), ('Hindi', 60), ('Maths', 80), ('Science', 90), ('Social Studies', 75)]<|im_sep|>",
        "num_ids": 1383,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list: # base case: empty list\n        return 0\n    elif isinstance(data_list[0], list): # recursive case: nested list\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else: # recursive case: flat list\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "test": "assert recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 945,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an input and returns the number of positive numbers in it.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(i) * bell_number(n-i-1) for i in range(n))",
        "test": "assert bell_number(0) == 1",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            decreasing = False\n        elif A[i] < A[i-1]:\n            increasing = False\n    \n    return increasing or decreasing",
        "test": "assert is_Monotonic([1, 3, 2, 4, 5]) == False",
        "num_ids": 984,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sublist(l, s):\n    '''\n    This function checks whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "test": "assert is_sublist([1, 2, 3], [1, 2]) == True",
        "num_ids": 1051,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if length!= len(Input[i]):\n            return False\n    return True",
        "test": "assert find_equal_tuple([(1,2,3),(4,5,6)]) == True",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n\n    # Initialize gap size\n    gap = n\n\n    # Initialize swaps flag\n    swapped = True\n\n    # Keep iterating until no swaps are needed\n    while gap!= 1 or swapped:\n\n        # Update gap size\n        gap = max(1, int(gap/1.3))\n\n        # Set swaps flag to False before iterating\n        swapped = False\n\n        # Compare elements and swap if necessary\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n    return nums",
        "test": "assert comb_sort([]) == []",
        "num_ids": 1459,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def dif_Square(n): \n    \"\"\"\n    This function checks whether a given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 1\n    return False",
        "test": "assert dif_Square(1) == True",
        "num_ids": 865,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if patterns[i] == \"R\" and colors[i]!= \"red\":\n            return False\n        elif patterns[i] == \"Y\" and colors[i]!= \"yellow\":\n            return False\n        elif patterns[i] == \"G\" and colors[i]!= \"green\":\n            return False\n        elif patterns[i] == \"B\" and colors[i]!= \"blue\":\n            return False\n        elif patterns[i] == \"W\" and colors[i]!= \"white\":\n            return False\n    \n    return True",
        "test": "assert is_samepatterns(['red', 'green', 'blue', 'yellow', 'orange'], ['R-G-B-Y-O', 'Y-O-G-R-B', 'B-Y-O-G-R', 'G-R-B-Y-O', 'R-B-Y-O-G', 'O-G-R-B-Y']) == False",
        "num_ids": 1502,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1,2,3), (4,5,6), (7,8,9)], 2) == [], \"Incorrect output for test case 2\"",
        "num_ids": 1313,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(22) == True",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False",
        "test": "assert word_len('apple') == True",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 618,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    return 4/3 * math.pi * r**3",
        "test": "assert volume_sphere(1) == (4/3)*math.pi",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char) - ord('a') + 1\n    return chr((sum_ascii % 26) + ord('a') - 1)",
        "test": "assert get_Char('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 70, \"Test Failed!\" # Test Case 4: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev1, prev2 = 1, 1\n        for i in range(3, n+1):\n            current = prev1 + prev2\n            prev2 = prev1\n            prev1 = current\n        return current",
        "test": "assert sequence(1) == 1",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes in the radius of a sphere and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4 * math.pi",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [i*(2*i - 1) for i in range(1, 1000)]\n    return hexagonal_numbers[n - 1]",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2},{'c': 3, 'd': 4}, {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}",
        "num_ids": 1322,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict",
        "test": "assert freq_count([1,2,3,2,1,4,4,5]) == {1:2, 2:2, 3:1, 4:2, 5:1}",
        "num_ids": 1008,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    for num in range(N-1, 0, -1):\n        if num < N:\n            closest = num\n            break\n    if closest is None:\n        return \"There is no smaller number than \" + str(N)\n    else:\n        return closest",
        "test": "assert closest_num(10) == 9",
        "num_ids": 676,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "test": "assert len_log(['apple', 'banana', 'orange', 'grape','mango']) == 6, \"Wrong length for longest word\"",
        "num_ids": 787,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str in str1[i:]:\n            return True\n    return False",
        "test": "assert find_substring('hello world', 'goodbye') == False",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 1:\n        return False\n    \n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n        \n    return True",
        "test": "assert is_undulating(12321) == False # example test case",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power(a,b):\n    \"\"\"\n    This function takes two arguments, 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    \"\"\"\n    result = a ** b\n    return result",
        "test": "assert power(2,3)==8, \"The value of 2 to the power of 3 should be 8.\"",
        "num_ids": 564,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1)) # sort the list by the second element of each tuple\n    return sorted_list[0][0] # return the first value of the first tuple (which has the smallest second value)",
        "test": "assert index_minimum([(1, 2), (3, 4), (5, 1), (7, 9), (2, 3)]) == 5",
        "num_ids": 1244,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    return min_len",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) == 3",
        "num_ids": 1217,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(1) == 1",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def flatten(lst):\n    '''\n    This function takes a list of lists as input and returns a flattened list.\n    '''\n    flat_list = []\n    for sublist in lst:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n\ndef frequency_lists(lst):\n    '''\n    This function takes a list of lists as input and returns a dictionary with frequency of each element in the flattened list.\n    '''\n    flat_list = flatten(lst)\n    freq = {}\n    for item in flat_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq",
        "test": "assert frequency_lists([[1,2,3], [4,5,6], [7,8,9]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}",
        "num_ids": 1713,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns their product divided by the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
        "test": "assert multiply_num([2, 3, 4]) == 24/3, \"Test Failed!\"",
        "num_ids": 758,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def decimal_to_binary(n):\n    binary = bin(n)[2:] # use bin() to convert to binary, then slice off the '0b' prefix\n    return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        # If it is a palindrome, find the next smallest palindrome by adding 1 to the number\n        return num + 1\n    else:\n        # If it is not a palindrome, find the next smallest palindrome by checking all numbers between num+1 and num*2\n        for i in range(num+1, num*2+1):\n            # Check if the number is a palindrome\n            if str(i) == str(i)[::-1]:\n                # If it is a palindrome, return the number as the next smallest palindrome\n                return i",
        "test": "assert next_smallest_palindrome(1) == 2",
        "num_ids": 1235,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n\n    arr.sort()\n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    words = word.split('_')\n    for i in range(len(words)):\n        if i == 0:\n            camel_case += words[i]\n        else:\n            camel_case += words[i].capitalize()\n    return camel_case",
        "test": "assert snake_to_camel(\"snake\") == \"snake\"",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    euler_num = 1\n    for i in range(n):\n        euler_num *= m\n    return euler_num",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 832,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "test": "assert sort_sublists([[\"apple\", \"banana\"], [\"cherry\", \"date\", \"fig\"]]) == [[\"apple\", \"banana\"], [\"cherry\", \"date\", \"fig\"]]",
        "num_ids": 1322,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count",
        "test": "assert count([True, True, False, True]) == 3",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "test": "assert add_lists([], (4,5,6)) == (4,5,6)",
        "num_ids": 957,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)  # Convert num1 into a heap to make it a min heap\n    heapq.heapify(num2)  # Convert num2 into a heap to make it a min heap\n    heapq.heapify(num3)  # Convert num3 into a heap to make it a min heap\n\n    # Merge the three heaps and append the minimum element to merged_list\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            merged_list.append(num3[0])\n            heapq.heappop(num3)\n\n    # Append any remaining elements in num1, num2, and num3 to merged_list\n    while len(num1) > 0:\n        merged_list.append(num1[0])\n        heapq.heappop(num1)\n    while len(num2) > 0:\n        merged_list.append(num2[0])\n        heapq.heappop(num2)\n    while len(num3) > 0:\n        merged_list.append(num3[0])\n        heapq.heappop(num3)\n\n    return merged_list",
        "test": "assert merge_sorted_list([1],[2],[3]) == [1,2,3]",
        "num_ids": 2025,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n    # Initialize a counter for the number of odd numbers\n    odd_count = 0\n    # Rotate the string n times and count the number of odd numbers\n    for i in range(n):\n        s.insert(0, s.pop())\n        if s[0] % 2!= 0:\n            odd_count += 1\n    return odd_count",
        "test": "assert odd_Equivalent('1100', 4) == 2",
        "num_ids": 1148,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]) & set(nestedlist[j]):\n                common_list.extend(list(set(nestedlist[i]) & set(nestedlist[j])))\n    return common_list",
        "test": "assert common_in_nested_lists([ [1,2,3], [4,5,6], [7,8,9] ]) == []",
        "num_ids": 1197,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer('123') == True",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 737,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            list_to_float(test_list[i])\n        else:\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                pass\n    return test_list",
        "test": "assert list_to_float([[1,2,3],[4,5,6.0],[7,'8',9]]) == [[1.0,2.0,3.0],[4.0,5.0,6.0],[7.0,8.0,9.0]]",
        "num_ids": 1949,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list('hello world') == ['hello', 'world']",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def search(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n        elif arr[i] == arr[i-1]:\n            return arr[i]\n    return -1\n\narr = [1, 2, 2, 3, 4, 4, 5]\nprint(search(arr))",
        "test": "assert search([1,1,2,2,3,3]) == 1 # Expected 1 since 1 appears only once in this array",
        "num_ids": 1335,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(1, 2), (-3, 2), (-4, 1), (5, 6), (-7, -8)]) == 30",
        "num_ids": 1452,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit+1):\n        sum_of_divisors = sum(list(set(j for j in range(1, i//2+1) if i % j == 0)))\n        if sum_of_divisors == i:\n            sum_of_divisors = sum(list(set(j for j in range(i+1, limit+1) if i % j == 0)))\n            if sum_of_divisors == i:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)",
        "test": "assert amicable_numbers_sum(1000) == 31626 # should pass",
        "num_ids": 1739,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a, b))\n    return angle",
        "test": "assert angle_complex(1,0) == 0",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_length(string):\n    n = len(string)\n    max_len = 0\n    curr_len = 0\n    curr_zero = 0\n    curr_one = 0\n    \n    for i in range(n):\n        if string[i] == '0':\n            curr_zero += 1\n            curr_one = 0\n        else:\n            curr_one += 1\n            curr_zero = 0\n        \n        curr_len = max(curr_zero, curr_one)\n        if curr_len > max_len:\n            max_len = curr_len\n            \n    return max_len",
        "test": "assert find_length('1010101010100110') == 2",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and finds the sum of common divisors of the two numbers.\n    \"\"\"\n    # Finding the smaller number and storing it in num1\n    if a > b:\n        num1 = b\n    else:\n        num1 = a\n\n    # Finding the larger number and storing it in num2\n    if a > b:\n        num2 = a\n    else:\n        num2 = b\n\n    # Creating an empty list to store common divisors\n    divisors = []\n\n    # Looping through the range of num1 to num2\n    for i in range(1, num2+1):\n        # If both numbers are divisible by i\n        if a % i == 0 and b % i == 0:\n            # Adding i to the list of common divisors\n            divisors.append(i)\n\n    # Summing up the common divisors in the list and returning the result\n    return sum(divisors)",
        "test": "assert sum(14,21) == 49 # 1, 7, 14",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def long_words(n, str):\n    \"\"\"\n    This function takes two arguments, n and str, where n is the maximum number of characters a word can have and str is a list of words.\n    The function returns a list of words that are longer than n characters.\n    \"\"\"\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "test": "assert long_words(8, ['apple', 'banana', 'orange', 'kiwi', 'grape','mango']) == []",
        "num_ids": 1046,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the first row\n    sum_first_row = sum(my_matrix[0])\n\n    # Calculate the sum of the diagonal elements\n    sum_diagonal = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n\n    # Calculate the sum of the anti-diagonal elements\n    sum_antidiagonal = sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])\n\n    # Calculate the sum of the elements of the second row in reverse order\n    sum_second_row = sum(my_matrix[1][::-1])\n\n    # Check if all the sums are equal\n    if sum_first_row == sum_diagonal == sum_antidiagonal == sum_second_row:\n        return True\n    else:\n        return False",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 2162,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)  # initialize a defaultdict with default value 0\n    for num in nums:\n        freq[num] += 1  # increment the frequency of each item in the list\n    \n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    \n    return max_num",
        "test": "assert max_occurrences([1, 2, 3, 2, 1, 3, 2, 3, 3]) == 3",
        "num_ids": 1127,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_indices = [i for i, char in enumerate(str1) if char.lower() in vowels]\n    reverse_str = list(str1)\n    \n    for i in range(len(vowel_indices)):\n        j = vowel_indices[i]\n        reverse_str[j] = str1[vowel_indices[-i-1]].lower()\n    \n    return ''.join(reverse_str)",
        "test": "assert reverse_vowels('Python') == 'Python'",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string((1, 2, 3)) == \"(1, 2, 3)\"",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth hexagonal number.\n    \"\"\"\n    h = n * ((2 * n) - 1)\n    return h",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    if non_zeroes == 0:\n        return 0\n    else:\n        return zeroes / non_zeroes",
        "test": "assert zero_count(array('i', [1, 1, 1, 1, 1])) == (0/5)",
        "num_ids": 1264,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        while n % 2 == 0:\n            n /= 2\n        for i in range(3, int(n**0.5) + 1, 2):\n            while n % i == 0:\n                n /= i\n        return n == 1",
        "test": "assert is_Sum_Of_Powers_Of_Two(0) == True",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 994,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    This function takes a list of lists as input and returns a set of all the numbers\n    found in the list.\n    \"\"\"\n    flattened_list = []\n    for sub_list in test_list:\n        for num in sub_list:\n            flattened_list.append(num)\n    return set(flattened_list)",
        "test": "assert extract_singly([[1,2,3], [4,5,6]]) == {1, 2, 3, 4, 5, 6}",
        "num_ids": 1152,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    while n > 1:\n        # Find the index of the maximum element in the unsorted part of the list\n        mi = nums.index(max(nums[:n]))\n        \n        # Reverse the maximum element to its correct position\n        nums[:mi+1] = nums[:mi+1][::-1]\n        \n        # Reverse the entire list to sort it in descending order\n        nums = nums[::-1]\n        \n        # Update the length of the unsorted part of the list\n        n -= mi + 1\n        \n    return nums",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 1309,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[2,3,4],[3,4,5]) == 0",
        "num_ids": 1019,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert find_lists((1,2,3)) == 0",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to store minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[-1]\n\n    # Find the absolute difference between the minimum and maximum values\n    abs_diff = abs(max_val - min_val)\n\n    return abs_diff",
        "test": "assert max_Abs_Diff([5, 5, 5, 5, 5]) == 0",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None",
        "test": "assert find_solution(4, 6, 18) == (2, 3)",
        "num_ids": 1024,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 that are present in list2.\n    '''\n    return list(set(list1) - set(list2))",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 881,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total",
        "test": "assert sum_series(0) == 0",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi/s)",
        "test": "assert area_polygon(10, 4) == 40.0",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # initialize the sum of divisors of n\n    div_sum = 0\n    \n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if i is a divisor of n\n        if n % i == 0:\n            # add i to the sum of divisors\n            div_sum += i\n    \n    # check if the sum of divisors of n is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False",
        "test": "assert div_sum(17) == False",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialize a dictionary to store the count of characters at each position\n    char_count = {}\n    # Convert the string to lowercase to make it case-insensitive\n    str1 = str1.lower()\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character is a letter in the alphabet, add 1 to its count in the dictionary\n        if str1[i].isalpha():\n            # Check if the character is already in the dictionary\n            if str1[i] in char_count:\n                # If the character is already in the dictionary, increment its count by 1\n                char_count[str1[i]] += 1\n            else:\n                # If the character is not already in the dictionary, add it with a count of 1\n                char_count[str1[i]] = 1\n    # Initialize a variable to store the count of characters at the same position as in the English alphabet\n    count = 0\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character is a letter in the alphabet and its count in the dictionary matches its position in the English alphabet, increment the count of characters at the same position\n        if str1[i].isalpha() and char_count[str1[i]] == ord(str1[i]) - 96:\n            count += 1\n    # Return the count of characters at the same position as in the English alphabet\n    return count",
        "test": "assert count_char_position(\"\") == 0",
        "num_ids": 2939,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([0, 2, 4, 6, 8]) == 1",
        "num_ids": 1048,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    \n    while power < n:\n        power <<= 1\n    \n    return power",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9], 5) == 1",
        "num_ids": 1085,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Returns the sum of the elements of lst within the range [m, n].\n    \"\"\"\n    return sum(lst[m:n+1])",
        "test": "assert sum_range_list([1,2,3,4,5], 1, 3) == 9",
        "num_ids": 976,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p",
        "test": "assert perimeter_pentagon(1) == 5",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"Hello, my name is John.\") == 0",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 759,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_majority(arr, n, x):\n    if n == 1:\n        return arr[0] == x\n    \n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] < x:\n        return is_majority(arr[n//2+1:], n-(n//2+1), x)\n    else:\n        return is_majority(arr[:n//2], n//2, x)",
        "test": "assert is_majority([1, 2, 3, 4, 4, 4, 5, 5, 5, 5], 10, 6) == False # there is no majority element in the array",
        "num_ids": 1382,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(1) == 1",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "test": "assert odd_values_string('abcdef') == 'ace'",
        "num_ids": 646,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_of_three(a,b,c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(3,4,5)==3, \"min_of_three(3,4,5) should return 3\"",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Check whether all the bits are set in the given range or not.\n\n    Parameters:\n    n: int, the number to be checked.\n    l: int, the lower limit of the range.\n    r: int, the upper limit of the range.\n\n    Returns:\n    True if all the bits are set in the given range, False otherwise.\n    \"\"\"\n    # check if l and r are in range\n    if l < 0 or r >= 32 or l > r:\n        return False\n\n    # check if all bits are set\n    mask = (1 << (r - l + 1)) - 1\n    return (n & mask) == mask",
        "test": "assert all_Bits_Set_In_The_Given_Range(6,2,5) == False",
        "num_ids": 1188,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    neg.sort()\n    pos.sort()\n    result = neg + pos\n    for i in range(n):\n        arr[i] = result[i]\n    return arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1635,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank(\"hello world\", \"*\") == \"hello*world\"",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapq.nlargest() to get the n largest items from the list\n    largest_n = heapq.nlargest(n, list1)\n    \n    return largest_n",
        "test": "assert larg_nnum([1,2,3,4,5], 1) == [5]",
        "num_ids": 1249,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2*math.pi*r*h + 2*math.pi*r**2\n    return lateralsurface",
        "test": "assert lateralsuface_cylinder(5,10)== 78.53981633974483, \"The lateral surface area of a cylinder with radius 5 and height 10 is not correct.\"",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "test": "assert volume_cube(1) == 1",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes an integer as input and sets all even bits of the number to 1.\n    '''\n    mask = 0xAAAAAAAA  # 0b10101010101010101010101010101010\n    return (n & mask) | ((n >> 1) & mask)",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)",
        "test": "assert check_occurences([]) == {} # empty list",
        "num_ids": 1431,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        total_sequences = 0\n        for i in range(1, m+1):\n            if i >= 2*total_sequences:\n                total_sequences += get_total_number_of_sequences(m, n-1)\n        return total_sequences",
        "test": "assert get_total_number_of_sequences(1,1) == 1",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2",
        "test": "assert replace_list([1,2,3,4],[5]) == [1,2,5]",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_charac(str1):\n    \"\"\"\n    This function counts the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac('hello world') == 11",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    num = int(math.sqrt(N)) + 1\n    while True:\n        if num*num > N:\n            return num*num\n        num += 1",
        "test": "assert next_Perfect_Square(1) == 4",
        "num_ids": 678,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n <= 2:\n        return sum(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[-1]",
        "test": "assert max_sum([5, 4, 3, 2, 1]) == 9",
        "num_ids": 2029,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of negative number.\")\n    guess = number / 2\n    while abs(guess**2 - number) > 1e-10:\n        guess = (guess + number / guess) / 2\n    return guess",
        "test": "assert babylonian_squareroot(10000) == 100",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for i in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j] and length == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n - 1]",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 1633,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n <= 0:\n        return None\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "test": "assert harmonic_sum(1) == 1.0",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "test": "assert intersection_array([1,2,3],[2,3,4]) == [2,3]",
        "num_ids": 978,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    This function takes a tuple and an element and counts the number of times the element appears in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X((1,2,3,4,5), 1) == 1",
        "num_ids": 820,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts the element before each element in the list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result",
        "test": "assert insert_element([], 0) == []",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        result.append((r, theta))\n    return result",
        "test": "assert convert(7-8j) == (cmath.polar(7-8j)[0], cmath.polar(7-8j)[1]) # test if 7-8j is converted to (9.219544457292887, 0.6536436208636119)",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 'a', 'b', 'c']) == 3",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]",
        "test": "assert combinations_colors(['red', 'green', 'blue'], 2) == [('red','red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')]",
        "num_ids": 1984,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    \n    for i in range(2, n):\n        is_prime = True\n        \n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        \n        if is_prime:\n            count += 1\n    \n    return count",
        "test": "assert count_Primes_nums(0) == 0",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)",
        "test": "assert swap_numbers(3,4) == (4,3)",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 1204,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    count = 0\n    num = 2\n    \n    while count < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        \n        if is_prime:\n            count += 1\n        \n        num += 1\n    \n    return num - 1",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 1888,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup",
        "test": "assert division_elements((2, 4, 6), (1, 2, 3)) == (2.0, 2.0, 2.0)",
        "num_ids": 1270,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 1199,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in dog's years\n    dog_age_in_dogs_years = h_age * 7\n    \n    # Return the dog's age in dog's years\n    return dog_age_in_dogs_years",
        "test": "assert dog_age(0) == 0, \"Error: dog_age(0) should be 0, but it is not.\"",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == [[1], [2], [3], [4], [5], [6], [7], [8], [9]]",
        "num_ids": 1614,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l**2)",
        "test": "assert lateralsurface_cube(10) == 600",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize a list to store the star numbers\n    star_nums = [1]\n    # Initialize a variable to keep track of the previous number in the sequence\n    prev_num = 1\n    # Loop through the numbers from 2 to n\n    for i in range(2, n+1):\n        # Calculate the next number in the sequence by adding the previous two numbers in the sequence\n        next_num = prev_num + star_nums[-1]\n        # Append the next number to the list of star numbers\n        star_nums.append(next_num)\n        # Update the previous number for the next iteration\n        prev_num = star_nums[-2]\n    # Return then'th star number in the sequence\n    return star_nums[n-1]",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    total_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total_sum += arr[i]\n    return total_sum",
        "test": "assert sum_even_and_even_index([1,3,5,7,9]) == 0",
        "num_ids": 999,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Returns the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 795,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Extracts the rear element of each tuple in a list of tuples.\n\n    :param test_list: List of tuples\n    :return: List of rear elements\n    \"\"\"\n    return [t[-1] for t in test_list]",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 1122,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "test": "assert substract_elements((1, 2, 3), (3, 2, 1)) == (-2, 0, 2)",
        "num_ids": 1205,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    result = 0\n    for k in range(0, n+1, 2):\n        result += math.comb(n, k)\n    return result",
        "test": "assert even_binomial_Coeff_Sum(2) == 2 ",
        "num_ids": 720,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume",
        "test": "assert volume_cylinder(0,2) == 0, \"The volume of a cylinder with radius 0 and height 2 is incorrect.\"",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({'a': 10, 'b': 5, 'c': 20}, 15) == {'c': 20}",
        "num_ids": 1139,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i < test_tup.index(test_tup[i]):\n            count += 1\n    return count",
        "test": "assert count_first_elements((1, 1, 1, 1, 1)) == 0",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_number = 1\n    count = 1\n    while count <= n:\n        decagonal_number += 10 * (count - 1)\n        count += 1\n    return decagonal_number",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 786,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 5) == (True, 4)",
        "num_ids": 1051,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))",
        "test": "assert all_unique([1,2,3]) == True",
        "num_ids": 741,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([10,20,30],[5,10,15]) == [5,10,15]",
        "num_ids": 895,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    counts = [digits.count(d) for d in digits]\n    return all(c <= d for c, d in zip(counts, digits))",
        "test": "assert validate(98765) == True",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check if all elements in a list are equal to a given element.\n\n    Args:\n    lst (list): A list of elements.\n    elem (any): An element to check for equality.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n\n    for item in lst:\n        if item!= elem:\n            return False\n    \n    return True",
        "test": "assert check_element([1,1,1,1,1],1) == True",
        "num_ids": 817,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three('aba') == False",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            sub_array_sum = 0\n            for p in range(k):\n                sub_array_sum += a[(i+p*n)%n]\n            if sub_array_sum > max_sum:\n                max_sum = sub_array_sum\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 1) == 5",
        "num_ids": 1552,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_list",
        "test": "assert max_length([ [1,2,3], [4,5], [6,7,8,9], [10,11,12,13,14] ]) == [10,11,12,13,14]",
        "num_ids": 1589,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    for i in range(n+1):\n        dp[i][0] = 1\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n\n    return dp[n][k]\n",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m",
        "test": "assert find(10,3)==3",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "test": "assert otherside_rightangle(3,4) == 5.0",
        "num_ids": 618,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_val(lst):\n    \"\"\"\n    Returns the maximum value in a list of heterogeneous values.\n    \n    :param lst: list of values\n    :return: maximum value\n    \"\"\"\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisor = 0\n    for i in range(1, number+1):\n        if number%i == 0:\n            sum_divisor += i\n    return sum_divisor",
        "test": "assert sum_div(10) == 18 # 1+2+5+10 = 18",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    \n    return count",
        "test": "assert get_Inv_Count([1, 2, 3]) == 0",
        "num_ids": 1801,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert flatten_list([]) == []",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n    for elem, agg in stdata:\n        freq[elem] += agg\n    \n    # Calculate the maximum aggregate by taking the maximum frequency among all elements\n    max_agg = max(freq.values())\n    \n    return max_agg",
        "test": "assert max_aggregate([(1, 2), (2, 3), (3, -4)]) == 3",
        "num_ids": 1417,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def count_binary_seq(n):\n    '''\n    This function takes an integer n as input and returns the count of all binary sequences of length 2n such that the sum of the first n bits is equal to the sum of the last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_num = bin(i)[2:].zfill(n) # convert decimal to binary and pad with leading zeros to have length n\n        if sum(map(int, binary_num[:n])) == sum(map(int, binary_num[n:])): # check if sum of first n bits is equal to sum of last n bits\n            count += 1\n    return count",
        "test": "assert count_binary_seq(2) == 1, \"Test case 1 failed\"",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n\n    depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n\n    return depth",
        "test": "assert dict_depth({'a': 1}) == 1",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # find the maximum value in the array\n    max_value = max(arr)\n    # find the sum of all values in the array\n    total_sum = sum(arr)\n    # calculate the gap between the maximum and the sum of all values in the array\n    gap = max_value - total_sum\n    # calculate the range of the rotations\n    rotation_range = sum(ranges) - (ranges[0] + ranges[1])\n    # calculate the gap after rotations\n    gap_after_rotations = (gap * rotations) % rotation_range\n    # calculate the position of the element after rotations\n    position_after_rotations = (index - ranges[0]) % len(arr)\n    # calculate the new index of the element after rotations\n    new_index = (position_after_rotations + gap_after_rotations) % len(arr)\n    # return the element at the new index\n    return arr[new_index]",
        "test": "assert find_Element([1,2,3,4,5], [(1,5)], 2, 3) == 1",
        "num_ids": 1401,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    words = [word.lower() for word in words]\n    words = [word for word in words if re.match(r'^p', word)]\n    if len(words) >= 2:\n        return words[:2]\n    else:\n        return None",
        "test": "assert start_withp(['dog', 'cat', 'fish', 'bird', 'horse']) == None",
        "num_ids": 973,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == n - 1:\n        return a[index]\n\n    # Include the element at index in the subsequence\n    include = a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # Exclude the element at index from the subsequence\n    exclude = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # Return the maximum of the two\n    return max(include, exclude)",
        "test": "assert max_sum_increasing_subseq([2, 4, 6, 2, 5], 5, 2, 4) == 13",
        "num_ids": 1878,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m:n+1]",
        "test": "assert colon_tuplex((1,2,3,4,5),0,5) == (1,2,3,4,5)",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    sorted_products = sorted(products, reverse=True)\n    return sorted_products[:N]",
        "test": "assert large_product([0, 0, 0, 0], [0, 0, 0, 0], 1) == [0]",
        "num_ids": 1537,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2,3) == 3",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and converts it to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"\") == ()",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    # Set the left most unset bit using bitwise AND operator\n    # with a number with all bits set to 1 except the left most bit\n    return n & ~(n-1) << 1\n",
        "test": "assert set_left_most_unset_bit(0) == 1",
        "num_ids": 1744,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(1,2) == math.pi * 1**2 * 2/3, \"The volume of a cone with radius 1 and height 2 is incorrect.\"",
        "num_ids": 976,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function returns the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 2**(int(n).bit_length()-1)",
        "test": "assert highest_Power_of_2(3) == 2",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "test": "assert add_string(['apple', 'banana', 'cherry'], 'fruit: {}') == ['fruit: apple', 'fruit: banana', 'fruit: cherry']",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {}\n        result_dict[l1[i]][l2[i]] = l3[i]\n    return result_dict",
        "test": "assert convert_list_dictionary([1,2,3], ['a','b','c'], [True, False, True]) == {1: {'a': True}, 2: {'b': False}, 3: {'c': True}}",
        "num_ids": 1690,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n % 2 == 0:\n        return max(n // 2 + get_max_sum(n // 2), n)\n    elif n % 3 == 0:\n        return max(n // 3 + get_max_sum(n // 3), n)\n    elif n % 4 == 0:\n        return max(n // 4 + get_max_sum(n // 4), n)\n    elif n % 5 == 0:\n        return max(n // 5 + get_max_sum(n // 5), n)\n    else:\n        return n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n\n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 1452,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # converting tuple to set and then back to list to remove duplicates\n    if len(list(set(test_tup))) == len(test_tup):\n        return True\n    else:\n        return False",
        "test": "assert check_distinct((1,2,3)) == True",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n\n    # Count the occurrence of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If all characters are repeated, return None\n    return None",
        "test": "assert first_non_repeating_character(\"hello world\") == 'h'",
        "num_ids": 1010,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char('aba') == True ",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    mid_index = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid_index - 1] + numbers[mid_index]) / 2\n    else:\n        return numbers[mid_index]",
        "test": "assert median_numbers(2, 2, 2) == 2",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def sum_of_digits(nums):\n    '''\n    This function takes a list of numbers as input and returns the sum of digits of each number.\n    '''\n    total_sum = 0\n    for num in nums:\n        # Calculate the sum of digits of each number\n        sum_of_digits = sum(int(digit) for digit in str(num))\n        total_sum += sum_of_digits\n    return total_sum",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1094,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i], )\n    return result",
        "test": "assert bitwise_xor((1, 2, 3), (4, 5, 6)) == (5, 7, 5)",
        "num_ids": 1215,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = freq_dict.get(tup, 0) + 1\n    return len(freq_dict)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        row_sum = []\n        for j in range(len(test_tup1[i])):\n            row_sum.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row_sum))\n    return tuple(result)",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))",
        "num_ids": 1406,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2,3) == 2, \"minimum of 2 and 3 should be 2\"",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False",
        "test": "assert check_tuplex(('apple', 'banana', 'cherry', 'date', 'elderberry'), 'berry') == False",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True\n    else: \n        return False",
        "test": "assert find_Parity(10) == True",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i-1]:\n        i -= 1\n    if i == 0:\n        return -1\n    else:\n        j = len(digits) - 1\n        while digits[j] <= digits[i-1]:\n            j -= 1\n        digits[i-1], digits[j] = digits[j], digits[i-1]\n        digits[i:] = sorted(digits[i:])\n        return int(''.join(digits))",
        "test": "assert rearrange_bigger(100000) == -1",
        "num_ids": 1356,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2))\n    heapq.heapify(pairs)\n    return [heapq.heappop(pairs) for _ in range(k)]",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)], \"Test Case 1 failed\"",
        "num_ids": 1382,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1,2),(3,4),(5,6),(7,8)]) == 24",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for i in listval:\n        if isinstance(i, (int, float)):\n            if min_val == None or i < min_val:\n                min_val = i\n    return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 829,
        "indeed": true
    },
    {
        "number": 411,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_([a-z])', lambda match: match.group(1).upper(), word)",
        "test": "assert snake_to_camel(\"snake\") == \"snake\"",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]",
        "test": "assert remove_odd([1,2,3,4,5,6]) == [2,4,6]",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n    '''\n    return lst[n-1][n-1]",
        "test": "assert extract_nth_element([(1,2), (3,4), (5,6)], 2) == 4",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3], [2,4,6]) == True ",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function returns the pair with highest product from a given array of integers.\n    \"\"\"\n    # initialize the maximum product to be negative infinity\n    max_product = float('-inf')\n    # initialize the pair to be None\n    max_pair = None\n    # loop through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # calculate the product of the current pair\n            product = arr[i] * arr[j]\n            # if the product is greater than the current maximum, update the maximum and the pair\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    # return the pair with the highest product\n    return max_pair",
        "test": "assert max_Product([0, 0, 0, 0, 0]) == (0, 0)",
        "num_ids": 1366,
        "indeed": true
    },
    {
        "number": 417,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = None\n    for i in Input:\n        if common is None:\n            common = i[0]\n        else:\n            if i[0]!= common:\n                return None\n    return common",
        "test": "assert group_tuples([(1, 2), (3, 4), (1, 2), (5, 6)]) == None",
        "num_ids": 1204,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element",
        "test": "assert Find_Max(['pear', 'plum', 'apricot']) == 'apricot'",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))",
        "test": "assert round_and_sum([1.23, 4.56, 7.89]) == 3*round(1.23 + 4.56 + 7.89, 0)",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return ((2*n)**3 + 2*((n-1)**3) + (2*n-1)**3) // 2",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)",
        "test": "assert concatenate_tuple(('apple', 'banana', 'cherry')) == 'apple_banana_cherry'",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[len(string)-1])\n    return tuple(rear_list)",
        "test": "assert extract_rear(('hello', 'world')) == ('o', 'd')",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 2) == 0",
        "num_ids": 968,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Returns a list of all odd numbers in the input list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 1]",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 841,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        # Using regular expression to match the date format\n        pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n        match = pattern.match(dt)\n        \n        # Extracting year, month and date from the match\n        year, month, date = match.groups()\n        \n        # Reversing the order of year, month and date\n        new_dt = f\"{date}-{month}-{year}\"\n        return new_dt\n        \n    except AttributeError:\n        print(\"Invalid date format. Please enter date in yyyy-mm-dd format.\")",
        "test": "assert change_date_format('2022-01-15') == '15-01-2022'",
        "num_ids": 1240,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
        "test": "assert shell_sort([]) == []",
        "num_ids": 1163,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] and test_tup2[i]))\n    return tuple(result)",
        "test": "assert and_tuples((True, False), (False, True)) == (False, False)",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    if a == 0:\n        print(\"The equation is not a parabola.\")\n        return None\n    else:\n        x = -b/(2*a)\n        return x",
        "test": "assert parabola_directrix(3, 0, 1) == 0",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    common = set1.intersection(set2)\n    if len(common) > 0:\n        return True\n    else:\n        return False",
        "test": "assert common_element([1, 2, 3], [2, 4, 6]) == True # Example 1",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function finds the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    area = 0.5 * (base1 + base2) * height\n    return area / median",
        "test": "assert median_trapezium(1,1,1) == 1",
        "num_ids": 874,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 6) == False",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_match_one(\"ab\") == True",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def last_Digit(n):\n    # Return the last digit of the number\n    return n % 10",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 1423,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result",
        "test": "assert neg_nos([-1, -2, -3, -4]) == [-1, -2, -3, -4]",
        "num_ids": 840,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    return ''.join(filter(lambda x: ord(x) % 2 == 0, str1))",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                count += 1\n                \n    return count",
        "test": "assert count_bidirectional([(1, 2), (3, 4), (5, 6)]) == 0, \"Test 3\"",
        "num_ids": 1366,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiple_to_single(L):\n    '''\n    This function takes a list of integers as input and returns the single integer obtained by joining all the integers in the list.\n    '''\n    single_int = 0\n    for num in L:\n        single_int = single_int * 10 + num\n    return single_int",
        "test": "assert multiple_to_single([9]) == 9",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(really|very|extremely|quite|rather|most|actually|approximately|approximatively)\\b'\n    # Find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    # Iterate over the matches and return the first one\n    for match in matches:\n        return match.start(), match.group()",
        "test": "assert find_adverb_position(\"I was standing in the sun with a big smile\") == [(14, 'big')]<|im_sep|>",
        "num_ids": 991,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2",
        "test": "assert surfacearea_cube(3) == 54.0",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "test": "assert positive_count(array('i', [1, -2, 3, 0, 4, -5])) == (3/6)",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    This function takes a list of numbers as input and returns the largest negative number.\n    \"\"\"\n    largest = list1[0]\n    for i in list1:\n        if i < largest and i < 0:\n            largest = i\n    return largest",
        "test": "assert largest_neg([-2, -2, -2, -2, -2]) == -2",
        "num_ids": 820,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        result.append(trimmed_tup)\n    return result",
        "test": "assert trim_tuple([(1,2,3), (4,5,6), (7,8,9,10)], 0) == [(1,2,3), (4,5,6), (7,8,9,10)]",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "test": "assert index_multiplication((2, 3, 4), (5, 6, 7)) == (10, 18, 28)",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Count the occurrences of all elements of lst in tup.\n    '''\n    count = Counter(tup)\n    result = {}\n    for elem in lst:\n        if elem in count:\n            result[elem] = count[elem]\n        else:\n            result[elem] = 0\n    return result",
        "test": "assert count_Occurrence((1,2,2,3), []) == {}",
        "num_ids": 1506,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) >= size:\n            result.append(string[:size])\n    return result",
        "test": "assert extract_string(['hello', 'world', 'python'], 5) == ['hello', 'world', 'pytho']",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "test": "assert remove_whitespaces(\"12345\") == \"12345\"",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes two arguments: actual_cost and sale_amount.\n    It calculates the loss amount if the sale_amount is less than the actual_cost,\n    else it returns 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(100,100) == 0",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if n%i == 0 : \n            if i%2 == 0 : \n                sum += i \n    return sum",
        "test": "assert sumofFactors(10) == 12 # 2 + 8 = 10, 2 + 4 = 6",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz(\"goodbye world\") == False",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if the month contains 31 days and False otherwise.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(2) == True",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for string in stringlist:\n        result.append(string[::-1])\n    return result",
        "test": "assert reverse_string_list(['hello', 'world', 'python']) == ['olleh', 'dlrow', 'nohtyp']",
        "num_ids": 840,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf') # initialize minimum length to infinity\n    min_sublist = [] # initialize minimum sublist to an empty list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j] # create a sublist\n            if len(sublist) < min_len: # if length of sublist is less than minimum length\n                min_len = len(sublist) # update minimum length\n                min_sublist = sublist # update minimum sublist\n    return min_sublist",
        "test": "assert Find_Min([]) == []",
        "num_ids": 1154,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and width of a rectangle as input and returns its area.\n    '''\n    return l * b",
        "test": "assert rectangle_area(3, 4) == 12",
        "num_ids": 645,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)",
        "test": "assert remove_uppercase(\"12345\") == \"12345\"",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([[1,2,3], [4,5,6], [7,8,9]]) == [1, 4, 7]",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr('HELLO WORLD') == 10",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result",
        "test": "assert combinations_list([]) == []",
        "num_ids": 1244,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here * arr[i], min_ending_here * arr[i], arr[i])\n        min_ending_here = min(temp * arr[i], min_ending_here * arr[i], arr[i])\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n    return max_product",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6 # [2, 3]",
        "num_ids": 1174,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_value(d, n):\n    \"\"\"\n    This function checks if all values in a dictionary are the same.\n\n    Parameters:\n    d (dictionary): A dictionary to check for values\n    n (int): The value to compare all values in the dictionary to\n\n    Returns:\n    True if all values in the dictionary are the same, False otherwise\n\n    \"\"\"\n    values = list(d.values())\n    return all(values[0] == value for value in values)\n",
        "test": "assert check_value({1: 2, 3: 4, 5: 6}, 5) == False",
        "num_ids": 961,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 894,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, n):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here * arr[i], min_ending_here * arr[i], arr[i])\n        min_ending_here = min(temp * arr[i], min_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "test": "assert max_product([0,-2]) == 0",
        "num_ids": 1395,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    if n <= 1:\n        return None\n    else:\n        return tuple(test_tup[i] + test_tup[i+1] for i in range(n-1))",
        "test": "assert add_pairwise((1, 2, 3, 4)) == (3, 5, 7)",
        "num_ids": 931,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_remainder(arr, n):\n    result = 1\n    for i in arr:\n        result *= i\n        result %= n\n    return result",
        "test": "assert find_remainder([1, 2, 3, 4], 2) == 0",
        "num_ids": 715,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False",
        "test": "assert check_Consecutive([1,2,3,4,6]) == True",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))",
        "test": "assert tuple_intersection([(1,2),(3,4),(5,6)], [(4,3),(5,6),(2,1)]) == [(5,6)]",
        "num_ids": 1713,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = str1.replace(ch,newch)\n    return new_str",
        "test": "assert replace_char(\"hello\",\"l\",\"L\")==\"heLLo\"",
        "num_ids": 636,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "test": "assert sort_counter({'a': 2, 'b': 1, 'c': 3, 'd': 4, 'e': 1}) == [('c', 3), ('d', 4), ('a', 2), ('b', 1), ('e', 1)]",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of the largest and smallest value in the array.\n    \"\"\"\n    return max(nums) + min(nums)",
        "test": "assert big_sum([-10,-5,0,5,10]) == 0",
        "num_ids": 770,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)",
        "test": "assert remove_lowercase(\"abcdefghijklmnopqrstuvwxyz\") == \"\"",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    return n // 10**(len(str(n))-1)",
        "test": "assert first_Digit(1234) == 1",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers from the original list.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_numbers)",
        "test": "assert difference(1) == 0, \"difference(1) should be 0\"",
        "num_ids": 772,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1, 3, 5, 7], 4) == 0, \"Test case 2 failed\"",
        "num_ids": 885,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string",
        "test": "assert toggle_string(\"Hello World\") == \"hELLO wORLD\"",
        "num_ids": 707,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digit_distance_nums(n1, n2):\n    # calculate the absolute difference between the two numbers\n    diff = abs(n1 - n2)\n    \n    # initialize a sum variable\n    digit_sum = 0\n    \n    # iterate over each digit in the difference\n    for digit in str(diff):\n        # convert the digit to an integer and add it to the sum\n        digit_sum += int(digit)\n    \n    return digit_sum",
        "test": "assert digit_distance_nums(123, 123) == 0",
        "num_ids": 1211,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7) == 7",
        "num_ids": 1454,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert both tuples to sets to find the union of their elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    \n    # Convert the set back to a tuple and sort it in ascending order\n    union_tup = tuple(sorted(union_set))\n    \n    # Return the sorted tuple of union elements\n    return union_tup",
        "test": "assert union_elements((1, 2, 3), (3, 4, 5)) == (1, 2, 3, 4, 5)",
        "num_ids": 1325,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            length = j - i + 1\n            if length > max_length:\n                max_length = length\n    return max_length",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values(\"The value of pi is 3.14159.\") == []",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10",
        "num_ids": 776,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as an input and returns the sum of its digits.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False",
        "test": "assert issort_list([]) == True, \"empty list should be sorted\"",
        "num_ids": 736,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst",
        "test": "assert empty_list(0) == []",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "test": "assert sort_sublists([['abc', 'def', 'ghi'], ['jkl','mno', 'pqr'], ['stu', 'vwx', 'yz']]) == [['abc', 'def', 'ghi'], ['jkl','mno', 'pqr'], ['stu', 'vwx', 'yz']]",
        "num_ids": 1387,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "test": "assert two_unique_nums([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 1435,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_product(list_data):\n    '''\n    This function calculates the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 887,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r ** 2",
        "test": "assert surfacearea_cylinder(0,5) == 0",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i,j = 0,0\n    while i < len(A) and j < len(B): \n        if A[i] == B[j]: \n            i += 1\n            j += 1\n        else: \n            i = i-j+1\n            j = 0\n    if j == len(B): \n        return True\n    else: \n        return False",
        "test": "assert is_Sub_Array([1,2,3],[4,5,6]) == False ",
        "num_ids": 1096,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a number as input and returns the last digit in factorial of that number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    return fact % 10",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 661,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 1411,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    \n    return dissimilar_elements",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 3)) == []",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, int) and even_fnc(i):\n            new_tuple.append(i)\n        elif isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n    return tuple(new_tuple)\n",
        "test": "assert even_ele(((1,2,3),(4,5,6),(7,8,9)), lambda x: True) == ((1,2,3),(4,5,6),(7,8,9))",
        "num_ids": 1441,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the square base\n    area_base = b * b\n    \n    # Calculate the area of the square face\n    area_face = 2 * b * s\n    \n    # Calculate the area of the square top\n    area_top = area_base / 2\n    \n    # Calculate the total surface area\n    total_area = area_base + area_face + area_top\n    \n    return total_area",
        "test": "assert surface_Area(2,3) == 18",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function takes a dictionary as an input and checks if it is empty.\n    If it is empty, the function returns True, otherwise, it returns False.\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def catalan_number(num):\n    '''\n    This function returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        catalan = [0]*(num+1)\n        catalan[0] = 1\n        for i in range(1, num+1):\n            catalan[i] = 0\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i-j-1]\n        return catalan[num]",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 808,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'  # pattern to match adverbs ending with \"ly\"\n    matches = re.findall(pattern, text)\n    if matches:\n        adverb = matches[0]\n        positions = [m.start() for m in re.finditer(pattern, text)]\n        return adverb, positions\n    else:\n        return None, None",
        "test": "assert find_adverbs('The dog ran away.') == ([], [])",
        "num_ids": 1381,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap",
        "test": "assert expensive_items([('apple', 10), ('banana', 5), ('orange', 20)], 2) == [('banana', 5), ('orange', 20)]",
        "num_ids": 1584,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "test": "assert split_Arr([1,2,3,4,5], 5) == [1,2,3,4,5]",
        "num_ids": 1045,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([]) == ()",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 690,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num > 0 and num**0.5 == int(num**0.5):\n            squares.append(num)\n    return squares",
        "test": "assert perfect_squares(10, 1) == []",
        "num_ids": 1101,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = complex(x, y)\n    return z.real, z.imag",
        "test": "assert polar_rect(1,0) == (1.0, 0.0)",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def swap_List(newList):\n    '''\n    This function swaps the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 719,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments - n and k - and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
        "test": "assert binomial_Coeff(0,0) == 1",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0+(\\d)', r'\\1', ip)\n\nprint(removezero_ip('192.000.1.1')) # output: 192.0.1.1\nprint(removezero_ip('10.0.0.001')) # output: 10.0.0.1\nprint(removezero_ip('255.255.255.255')) # output: 255.255.255.255",
        "test": "assert removezero_ip('127.0.0.1') == '127.0.0.1'",
        "num_ids": 1338,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 == 1 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            return abs(even - odd)",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1210,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n    if len(str1)!= len(str2):\n        print(\"Strings should have the same length.\")\n        return None\n\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            count += 1\n\n    return count",
        "test": "assert min_Swaps(\"1111\",\"0101\") == 2 ",
        "num_ids": 1520,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "test": "assert tuple_size((1, 2, 3)) == sys.getsizeof((1, 2, 3))",
        "num_ids": 807,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    len1 = len(arr1)\n    len2 = len(arr2)\n    \n    # Merge the two arrays\n    merged_arr = arr1 + arr2\n    \n    # Sort the merged array\n    merged_arr.sort()\n    \n    # Return the kth element of the merged array\n    return merged_arr[k-1]",
        "test": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8], 8) == 8",
        "num_ids": 1631,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # convert the number to a string\n    number_str = str(number)\n    # get the length of the number\n    length = len(number_str)\n    # initialize the sum variable\n    sum = 0\n    # iterate over each digit in the number and add it to the sum\n    for digit in number_str:\n        sum += int(digit) ** length\n    # check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 877,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average",
        "test": "assert sum_average(5) == (15, 3.0)",
        "num_ids": 661,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 415,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    repeated_char = None\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            repeated_char = str1[i]\n            break\n    return repeated_char",
        "test": "assert first_repeated_char(\"hello world\") == 'l'",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            ludic.append(i)\n    return ludic",
        "test": "assert get_ludic(1) == [1], 'Expected [1]'",
        "num_ids": 1423,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def reverse_words(s):\n    \"\"\"\n    This function takes a string as input and returns the string with the words in reverse order.\n    \"\"\"\n    # Splitting the string into words using split() function\n    words = s.split()\n    \n    # Reversing the order of words in the list\n    words.reverse()\n    \n    # Joining the words in the list using join() function and returning the reversed string\n    return \" \".join(words)",
        "test": "assert reverse_words(\"a\") == \"a\"",
        "num_ids": 783,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians",
        "test": "assert radian_degree(180) == math.pi, \"Incorrect conversion from degrees to radians\"",
        "num_ids": 558,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"The quick brown fox jumps over the lazy dog\", r'\\b\\w{5}\\b') == ('quick', 4, 9)",
        "num_ids": 1180,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        sum = 0\n        for i in range(n):\n            sum += bell_Number(i)\n        return sum",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Returns a new list with the same elements as the input list, but with the k'th element removed.\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        return \"Error: k is out of range.\"\n    else:\n        return lst[:k] + lst[k+1:]",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 4, 5]",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes a list of lists and returns the maximum element of the Nth column.\n    '''\n    max_val = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 9",
        "num_ids": 1134,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists where each sublist has two elements and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    # Initialize empty lists for the two output lists\n    first = []\n    second = []\n\n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Add the first element of the sublist to the first output list\n        first.append(sublist[0])\n        # Add the second element of the sublist to the second output list\n        second.append(sublist[1])\n\n    # Return a list of the two output lists\n    return [first, second]",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1,3,5],[2,4,6]]",
        "num_ids": 1307,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i]\n        test_list[i] = total\n    return test_list",
        "test": "assert cummulative_sum([1, 2, 3]) == [1, 3, 6]",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        result.append(total/len(nums[i]))\n    return result",
        "test": "assert average_tuple(((1,2,3),(4,5,6),(7,8,9))) == [2.0, 5.0, 8.0]",
        "num_ids": 1247,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "test": "assert tuple_modulo((10,20,30), (5,10,15)) == (0,0,0)",
        "num_ids": 1225,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_step = 0\n    \n    while current_step < len(steps):\n        if current_step + steps[current_step] >= d:\n            jumps += 1\n            current_step += steps[current_step]\n        else:\n            current_step += 1\n            \n    return jumps",
        "test": "assert min_Jumps([3, 2, 5, 3, 4, 2, 3, 4, 2], 4) == 2",
        "num_ids": 1594,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([1, 2, 3], [2, 4, 6]) == [0.5, 0.5, 0.5]",
        "num_ids": 1129,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    non_num_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            non_num_str += char\n    return non_num_str + num_str",
        "test": "assert move_num(\"abc\") == \"abc\"",
        "num_ids": 1197,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n                \n    return max(dp)",
        "test": "assert largest_subset([2,4,6,7,8,10]) == 3 # [2,4,6], [10]",
        "num_ids": 1428,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = n//2  # integer division to find the middle index\n\n    # If both lists have equal number of elements, the median is the average of middle elements of both lists.\n    if arr1[i-1] == arr1[i] and arr2[i-1] == arr2[i]:\n        return (arr1[i-1] + arr2[i-1]) / 2\n\n    # If one of the lists has more elements than the other, the median is the middle element of that list.\n    elif arr1[i-1] == arr1[i]:\n        return arr1[i-1]\n\n    elif arr2[i-1] == arr2[i]:\n        return arr2[i-1]\n\n    # If the middle elements of both lists are different, the median is the average of those elements.\n    else:\n        return (max(arr1[i-1], arr2[i-1]) + min(arr1[i], arr2[i])) / 2",
        "test": "assert get_median([1,2,3,4],[5,6,7,8],4) == 4.5",
        "num_ids": 1415,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]",
        "test": "assert nth_nums([1,2,3,4,5],1) == [1,2,3,4,5]",
        "num_ids": 968,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"THIS IS A TEST STRING\") == \"THIS IS A TEST STRING\".upper()",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 819,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef triangle_area(r):\n    # calculate the circumference of the semicircle\n    c = 2 * math.pi * r\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = 0.5 * c * r\n    \n    return area",
        "test": "assert triangle_area(0) == 0 # test case 4",
        "num_ids": 1340,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] - i - 1 >= 0 and array[i] - i - 1!= array[array[i] - i - 1]:\n            array[i], array[array[i] - i - 1] = array[array[i] - i - 1], array[i]\n\n    for i in range(start, end + 1):\n        if i!= array[i] - start - 1:\n            return i\n\n    return end + 1",
        "test": "assert find_First_Missing([1,2,3,4,5,6,7,8,9,10]) == 1",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a list of even numbers from the list.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == 0:\n        if ele[1] == 0:\n            sub.append((0,1))\n            sub.append((1,0))\n        elif ele[1] == 1:\n            sub.append((0,0))\n            sub.append((1,1))\n        else:\n            sub.append((0,1))\n            sub.append((1,0))\n            sub.append((0,2))\n    elif ele[0] == 1:\n        if ele[1] == 0:\n            sub.append((0,0))\n            sub.append((1,1))\n        elif ele[1] == 1:\n            sub.append((0,1))\n            sub.append((1,2))\n        else:\n            sub.append((0,2))\n            sub.append((1,1))\n    else:\n        if ele[1] == 0:\n            sub.append((1,0))\n            sub.append((2,1))\n        elif ele[1] == 1:\n            sub.append((1,1))\n            sub.append((2,2))\n        else:\n            sub.append((1,2))\n            sub.append((2,1))\n    return sub",
        "test": "assert adjac((0,0)) == [(0,1),(1,0)]",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if \" \" in text:\n        return text.replace(\" \", \"_\")\n    else:\n        return text.replace(\"_\", \" \")",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list as an input and moves all the zeroes to the end of the list.\n    '''\n    # create two empty lists to store the zeroes and non-zeroes\n    zeroes = []\n    non_zeroes = []\n    \n    # loop through the input list\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n            \n    # concatenate the non-zeroes and zeroes lists and return it\n    return non_zeroes + zeroes",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1397,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            sum = sum ^ arr[i] ^ arr[j]\n    \n    return sum\n",
        "test": "assert pair_xor_Sum([2,2,2,2,2],5) == 0",
        "num_ids": 1006,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]",
        "test": "assert heap_sort([]) == []",
        "num_ids": 824,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    if sale_amount >= actual_cost:\n        print(\"No profit and no loss\")\n    else:\n        print(\"Profit and loss\")",
        "test": "assert noprofit_noloss(100,0) == True",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert velocity from km/h to m/s\n    v = v * 0.277778\n\n    # Calculate the wind chill index\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # Round the wind chill index to the next integer\n    wc = round(wc)\n\n    return wc",
        "test": "assert wind_chill(15, 10) == 10",
        "num_ids": 2258,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum_length += len(name)\n    return sum_length",
        "test": "assert sample_nam([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"]) == 0",
        "num_ids": 903,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)",
        "test": "assert remove_parenthesis('This is a (test) string.') == 'This is a  string.'",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (3*n-1)) / 2",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle('This is a test') == False",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 4) == [4, 3, 2, 1, 5]",
        "num_ids": 1434,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple(('a', 'b', 'c'), {'d': 1, 'e': 2, 'f': 3}) == ('a', 'b', 'c', {'d': 1, 'e': 2, 'f': 3})",
        "num_ids": 1190,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    n = len(cost)\n    max_avg = float('-inf')\n    visited = [[0] * n for _ in range(n)]\n    \n    # Recursive function to compute average of a path\n    def compute_avg(i, j, path_cost, path_size):\n        nonlocal max_avg\n        \n        # Base case: we reached the bottom right cell\n        if i == n - 1 and j == n - 1:\n            avg = path_cost / path_size\n            max_avg = max(max_avg, avg)\n            return\n        \n        # Check if we already visited this cell\n        if visited[i][j] == 1:\n            return\n        \n        # Mark this cell as visited and explore right and down paths\n        visited[i][j] = 1\n        compute_avg(i + 1, j, path_cost + cost[i + 1][j], path_size + 1)\n        compute_avg(i, j + 1, path_cost + cost[i][j + 1], path_size + 1)\n        visited[i][j] = 0\n        \n    # Call the recursive function for each starting cell\n    for i in range(n):\n        for j in range(n):\n            compute_avg(i, j, cost[i][j], 1)\n            \n    return max_avg",
        "test": "assert maxAverageOfPath([",
        "num_ids": 2906,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, details in students.items():\n        if details[0] > h and details[1] > w:\n            filtered_students[student] = details\n    return filtered_students",
        "test": "assert filter_data({'Alice':(1.75,5.25), 'Bob':(1.85,5.5), 'Charlie':(1.65,4.9), 'David':(1.75,5.1)}, 1.7, 5) == {'Alice':(1.75,5.25), 'Bob':(1.85,5.5), 'David':(1.75,5.1)}",
        "num_ids": 2286,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 1, 1], [1, 1, 1]) == [(0, 1), (1, 2), (0, 1), (1, 2), (0, 1), (1, 2)]",
        "num_ids": 1064,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_power = base ** power\n    base_sum = sum(int(digit) for digit in str(base_power))\n    return base_sum",
        "test": "assert power_base_sum(10, 3) == 1 + 0 + 0 == 1",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Find all occurrences of quotation marks\n    quotations = re.findall(r'\"(.*?)\"', text1)\n    return quotations",
        "test": "assert extract_quotation('I said, \"Hello!\"') == ['Hello!']",
        "num_ids": 772,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = tuple(test_tup[i] * test_tup[i+1] for i in range(n))\n    return result_tup",
        "test": "assert multiply_elements((1, 2, 3, 4)) == (2, 6, 12)",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 984,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]",
        "test": "assert consecutive_duplicates([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 1110,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculate the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    '''\n\n    # Calculate the slant height of the cone\n    s = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area of the cone using the formula\n    A = math.pi * r * s\n\n    return A",
        "test": "assert lateralsurface_cone(0,5) == 0",
        "num_ids": 977,
        "indeed": true
    },
    {
        "number": 732,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    return re.sub(r\"[\\s,\\.]+\", \":\", text)",
        "test": "assert replace_specialchar('1,2,3,4,5') == '1:2:3:4:5'",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in two arguments:\n    A: a sorted list of integers\n    x: an integer to search for in A\n    \n    It returns the index of the first occurrence of x in A.\n    If x is not found in A, it returns -1.\n    \"\"\"\n    # Initialize the index variable to -1\n    index = -1\n    \n    # Loop through the list A and check if x is found\n    for i in range(len(A)):\n        if A[i] == x:\n            # If x is found, update the index variable to the current index\n            index = i\n            # Stop the loop\n            break\n    \n    # Return the index of the first occurrence of x in A\n    return index",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 1350,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes in a list of integers and returns the sum of products of all possible sublists of the list.\n    \"\"\"\n\n    # Initialize variables to keep track of sum and product of sublists\n    sublist_sum = 0\n    product = 1\n\n    # Loop through all possible sublists\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sublist = arr[i:j+1]\n            sublist_sum += sum(sublist)\n            product *= sublist_sum\n\n    return product",
        "test": "assert sum_Of_Subarray_Prod([1]) == 1",
        "num_ids": 2259,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    mask = (1 << len(bin(n)) - 2) - 1  # get the mask of all but the first and the last bits\n\n    # toggle the bits of n except the first and the last bit\n    return n ^ mask",
        "test": "assert set_middle_bits(0b00000010) == 0b00000001  # 2 -> 1",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_left(a, x)\n    return pos",
        "test": "assert left_insertion([1, 3, 5, 7], 2) == 1",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r'^[aeiouAEIOU][A-Za-z0-9_]*')\n    if pattern.match(string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('Hello123') == False # contains digits",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function returns the geometric sum of n-1.\n\n    Args:\n        n (int): The number of terms.\n\n    Returns:\n        float: The geometric sum.\n    \"\"\"\n    if n == 1:\n        return 1.0\n    else:\n        return 1.0 / (n - 1) + geometric_sum(n - 1)",
        "test": "assert geometric_sum(1) == 1.0",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Find the number of digits of triangular number with n digits\n    num_digits = n * (n + 1) // 2\n\n    # Find the index of smallest triangular number with n digits\n    index = (2 * num_digits) // 3 + 1\n\n    return index",
        "test": "assert find_Index(1) == 1",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function will take a tuple as input and will convert it into a dictionary.\n    The keys of the dictionary will be the elements of the input tuple.\n    The values of the dictionary will be the next elements in the tuple.\n    '''\n    my_dict = {}\n    for i in range(len(test_tup)-1):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict",
        "test": "assert tuple_to_dict(('hello', 'world')) == {'hello': 'world'}",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    return True",
        "test": "assert all_Characters_Same(\"a\") == True",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3**0.5)*math.pow(side, 2)/4\n    return area\n\nprint(\"Area of a tetrahedron with side length 5 is:\", area_tetrahedron(5))",
        "test": "assert area_tetrahedron(5) == 10.825317547305483, \"Incorrect calculation for area of tetrahedron with side = 5\"",
        "num_ids": 1139,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    if m >= n:\n        m = m % n\n    return list[n-m:] + list[:n-m]",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 1116,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False",
        "test": "assert check_none((1,2,3)) == False",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    This function finds all the numbers within a given range (startnum to endnum) where every number is divisible by every digit it contains.\n    '''\n    # define the lambda function to check if a number is divisible by every digit in it\n    is_divisible = lambda num: all(int(digit)!= 0 and num % int(digit) == 0 for digit in str(num))\n    \n    # use the filter function to return only the numbers that pass the lambda function test\n    divisible_numbers = filter(is_divisible, range(startnum, endnum + 1))\n    \n    # return the list of divisible numbers\n    return list(divisible_numbers)",
        "test": "assert divisible_by_digits(100, 1000) == [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 207, 208, 210, 212, 213, 215, 216, 218, 220, 221, 223, 224, 226, 227, 229, 230, 232, 233, 235, 237, 238, 240, 241, 243, 244, 246, 247, 249, 250, 252, 253, 255, 257, 258, 260, 262, 263, 265, 266, 268, 270, 271, 273, 274, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 298, 299, 301, 302, 304, 306, 307, 309, 310, 312, 313, 315, 317, 318, 320, 321, 323, 325, 326, 328, 329, 331, 332, 334, 335, 337, 339, 340, 342, 343, 345, 346, 348, 350, 351, 353, 354, 356, 357, 359, 3",
        "num_ids": 3975,
        "indeed": true
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 0.5*math.pi*r**2*a/360",
        "test": "assert sector_area(0, 360) == None # radius should be positive",
        "num_ids": 1073,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a 2D array to store the length of LCS of the subsequences ending at X[i-1], Y[j-1] and Z[k-1]\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # Fill the LCS table in bottom-up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    # Find the LCS of the three sequences\n    i = m\n    j = n\n    k = o\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] >= L[i][j-1][k] and L[i-1][j][k] >= L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] >= L[i-1][j][k] and L[i][j-1][k] >= L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GXTXAYB\") == \"GTAB\"",
        "num_ids": 2967,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all capitalized words in the string\n    capitalized_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Replace each capitalized word with a space followed by the same word but with spaces between letters\n    for word in capitalized_words:\n        str1 = str1.replace(word,'' + word)\n        \n    return str1",
        "test": "assert capital_words_spaces(\"This Is A Test\") == \"This Is A Test\"",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n    \"\"\"\n    def extract_num(s):\n        \"\"\"\n        Extracts the numeric value from a string.\n        \"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return float(s)\n    \n    # sort the list using the custom key function\n    return sorted(nums_str, key=extract_num)",
        "test": "assert sort_numeric_strings(['1', '5', '3', '2', '4']) == ['1', '2', '3', '4', '5']",
        "num_ids": 1389,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "test": "assert add_tuple([1,2,3], (4,5,6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 874,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr) // 2:\n        if arr[i] > arr[2*i+1] or arr[i] > arr[2*i+2]:\n            return False\n        return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n    return True\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)",
        "test": "assert check_min_heap_helper([4, 2, 5, 1, 3], 1) == False",
        "num_ids": 1449,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # Sort the list in ascending order based on the second element of each tuple (i.e., the value)\n    test_list.sort(key=lambda x: x[1])\n    \n    # Return the first k tuples\n    return test_list[:K]",
        "test": "assert min_k([(1, 2), (4, 5), (1, 3), (6, 7), (8, 9)], 0) == []",
        "num_ids": 1522,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([1,2,3], [2,3,4], [3,4,5,6]) == []",
        "num_ids": 1094,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        raise ValueError('There is no second smallest number')\n    return second_smallest",
        "test": "assert second_smallest([3, 2, 1, 5, 4]) == 2",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one('ab') == True",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs(['abc', 'def', 'ghi', 'jkl','mno']) == 0",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Given a list of lists, this function returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Convert the list to a set of tuples for faster lookup\n    lst_set = set(tuple(x) for x in lst)\n    # Count the number of occurrences of each unique tuple in the original list\n    result = {}\n    for x in lst_set:\n        result[x] = lst.count(list(x))\n    return result",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2441,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    \"\"\"\n    This function takes a string as input and returns True if it is a decimal number with a precision of 2, otherwise False.\n    \"\"\"\n    try:\n        float_num = float(num)\n        int_num = int(float_num * 100)\n        return int_num / 100 == float_num\n    except ValueError:\n        return False",
        "test": "assert is_decimal(\"1.00\") == True",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as an input and returns True if the list contains only one distinct element.\n    Otherwise, it returns False.\n    '''\n    return len(set(arr)) == 1",
        "test": "assert unique_Element([1, 2, 3, 4, 5]) == False",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return (monthnum3 % 2 == 0)\n",
        "test": "assert check_monthnumber_number(3) == False",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array of integers as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort() # sort the array in ascending order\n    min_diff = float('inf') # initialize minimum difference with a large value\n    for i in range(n-1): # iterate over all pairs of elements in the array\n        diff = arr[i+1] - arr[i] # compute the difference between the current pair of elements\n        if diff < min_diff: # if the difference is smaller than the current minimum difference\n            min_diff = diff # update the minimum difference\n    return min_diff # return the minimum difference",
        "test": "assert find_min_diff([4, 5, 1, 2, 3],5) == 1",
        "num_ids": 1295,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the count of numbers present in it.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return i-1\n    \ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_polite(1) == 2",
        "num_ids": 1994,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([]) == []",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 7) == 2, \"Test case 2 failed\"",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function will return the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for num in li1:\n        if num not in li2:\n            diff_list.append(num)\n    return diff_list",
        "test": "assert Diff([1,2,3],[1,3,4]) == [2]",
        "num_ids": 961,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**4\n        i += 2\n    return sum",
        "test": "assert odd_num_sum(1) == 1 # 1^2 = 1",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "test": "assert check_expression(\"({[()]}){}\") == True",
        "num_ids": 1156,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return''.join(result)",
        "test": "assert remove_length(\"hello world\", 3) == \"lo world\"",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two arguments, text and pattern, and returns the occurrence and position of the substrings within a string.\n    If there is no match, it returns None.\n    '''\n    \n    # Find all the occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Create an empty list to store the matches\n    result = []\n    \n    # Iterate over the matches and store them in the result list\n    for match in matches:\n        result.append((match.start(), match.end()))\n    \n    # If there are no matches, return None\n    if len(result) == 0:\n        return None\n    \n    # Otherwise, return the list of matches\n    return result",
        "test": "assert occurance_substring(\"hello world\", \"z\") == None",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 2, 3, 4, 5]) == True",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_vowels(test_str):\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u']:\n            if i == 0:\n                if test_str[i+1] in ['a', 'e', 'i', 'o', 'u']:\n                    count += 1\n            elif i == len(test_str)-1:\n                if test_str[i-1] in ['a', 'e', 'i', 'o', 'u']:\n                    count += 1\n            else:\n                if test_str[i-1] in ['a', 'e', 'i', 'o', 'u'] or test_str[i+1] in ['a', 'e', 'i', 'o', 'u']:\n                    count += 1\n    return count",
        "test": "assert count_vowels('python') == 0 # no vowels",
        "num_ids": 971,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_sum(arr): \n    \"\"\"\n    This function takes a list of integers as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create an empty dictionary to store non-repeated elements\n    non_repeated_dict = {}\n    \n    # Loop through the input list and add non-repeated elements to the dictionary\n    for num in arr:\n        if num not in non_repeated_dict:\n            non_repeated_dict[num] = 1\n    \n    # Calculate the sum of non-repeated elements in the dictionary\n    sum_non_repeated = sum(non_repeated_dict.keys())\n    \n    return sum_non_repeated",
        "test": "assert find_sum([1,1,2,3,4,5]) == 15",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [list(g) for k, g in groupby(lst)]",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 1877,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Returns a dictionary where every sublist is a key and its frequency is the value.\n    \"\"\"\n    counts = {}\n    for sublist in sublists(lst):\n        key = tuple(sublist)\n        counts[key] = counts.get(key, 0) + 1\n    return counts\n\n\ndef sublists(lst):\n    \"\"\"\n    Returns a list of all sublists of lst.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1521,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            total_sum = sum(combo)\n            if total_sum == i:\n                result.append(combo)\n    return result",
        "test": "assert find_combinations([(1, 2, 3), (4, 5, 6), (7, 8)]) == [(1, 2, 3, 4, 5, 6, 7, 8)], \"Test Failed\"",
        "num_ids": 3224,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count",
        "test": "assert count_divisors(10) == 4",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            sum += sum(arr[i:j+1])\n    return sum",
        "test": "assert odd_length_sum([1,2,3,4,5,6,7,8,9,10]) == 45 # [1,2], [3,4], [5,6], [7,8], [9,10]",
        "num_ids": 1123,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else delta / cmax\n\n    value = cmax\n\n    return hue, saturation, value",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1869,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    return even_num * odd_num",
        "test": "assert mul_even_odd([0]) == 0",
        "num_ids": 1155,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.strip('()').split(',')\n\n    # Convert the string elements to integers\n    int_list = [int(i) for i in str_list]\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple",
        "test": "assert tuple_str_int('(1, 2, 3)') == (1, 2, 3)",
        "num_ids": 964,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "test": "assert right_insertion([1,3,5,7,9], 2) == 1",
        "num_ids": 708,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b{3}\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_match_three(\"abcabcc\") == False  # has 'b' after 'a' but only two 'b'",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str,) + tuple(test_list)\n    return new_tuple",
        "test": "assert new_tuple([], '') == ()",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert even_position([2,4,6,8,10]) == True #Testcase 1",
        "num_ids": 807,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list as input and returns the number of lists present in the input list.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count",
        "test": "assert count_list([[1, 2], [3, 4], [5, 6]]) == 3",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function returns the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            while mid < len(arr) - 1 and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        \n        elif arr[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1",
        "test": "assert last([1,2,3,4,5], 5) == 4",
        "num_ids": 1075,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b$')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_starta_endb('banana') == None",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as an argument and returns the sum of all its items.\n    \"\"\"\n    total_sum = 0\n    for value in dictionary.values():\n        total_sum += value\n    return total_sum",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 800,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(1, n+1, 2))",
        "test": "assert sum_odd(0) == 0 ",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n\n    :param arr: a list of numbers\n    :return: the sum of the numbers in the array\n    \"\"\"\n    return sum(arr)",
        "test": "assert _sum([1,2,3,4,5]) == 15",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits by d bits a given number n. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1  # mask to get the required number of bits to be shifted\n    shifted_bits = n >> (32 - d)  # get the required number of bits to be shifted\n    return (n << d) & 0xffffffff | shifted_bits  # left shift the bits and combine with the shifted bits to get the result",
        "test": "assert left_rotate(0b1111111111111111111111111111111, 0) == 0b1111111111111111111111111111111",
        "num_ids": 1476,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)",
        "test": "assert remove_all_spaces(\"  Spaces before and after the text.   \") == \"Spacesbeforeandafterthetext.\"",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    if x == y and y == z:\n        return 3\n    elif x == y or y == z or z == x:\n        return 2\n    elif x == z:\n        return 1\n    else:\n        return 0",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 752,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] >= arr[0]:\n            break\n    else:\n        return 0\n    if arr[i] == arr[0]:\n        return 0\n    left = i\n    right = n-1\n    count = 0\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] >= arr[0]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    count += (n - right - 1)\n    return count",
        "test": "assert count_rotation([1,2,3,4,5]) == 0",
        "num_ids": 1197,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if math.sqrt(n) == int(math.sqrt(n)):\n        return True\n    else:\n        return False",
        "test": "assert is_perfect_square(16)==True",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2, 4, 6]) == True",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return [max_list]",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [7,8,9]]) == [[7,8,9]]",
        "num_ids": 1522,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
        "test": "assert max_run_uppercase(\"ABCDabcd\") == 4",
        "num_ids": 929,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1,2,3,4,5,6]) == 1",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple and a value K as input and returns True if the given tuples contain the K value, else False.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "test": "assert check_K([(1,2,3), (4,5,6), (7,8,9)], 3) == True",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 3)) == False",
        "num_ids": 918,
        "indeed": true
    }
]