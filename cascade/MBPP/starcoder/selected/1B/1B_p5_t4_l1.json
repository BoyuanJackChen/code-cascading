[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return shared_elements",
        "test": "assert similar_elements((1, 2, 3, 4, 5, 6), (4, 5, 6, 7, 8, 9)) == ((1, 4), (2, 5), (3, 6), (4, 7), (5, 8), (6, 9))",
        "num_ids": 983,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(2) == False # correct",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq_nums = []\n    for num in nums:\n        heapq.heappush(hq_nums, num)\n        if len(hq_nums) > n:\n            heapq.heappop(hq_nums)\n    return hq_nums",
        "test": "assert heap_queue_largest([], 5) == []",
        "num_ids": 1342,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Check whether two numbers differ at one bit position only or not.\n\n    :param x: The first number to compare.\n    :return: A boolean indicating whether the numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0",
        "test": "assert is_Power_Of_Two(10) == False # Testing with 10 as the input",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function finds all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to match all words with at least 4 characters\n    matches = re.findall(r'\\b\\w{3,}\\b', text)\n    # Return the list of matches\n    return matches\n\ntext = \"This is a sample text for testing the function.\"\nmatches = find_char_long(text)\nprint(matches)",
        "test": "assert find_char_long(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 1003,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    for i in range(n):\n        count += 1\n        # Check if the first character is repeated or not\n        for j in range(i, n):\n            if str[i] == str[j]:\n                count -= 1\n                if count == 0:\n                    return count\n    return count",
        "test": "assert find_Rotations('abc') == 0 # case1",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence of given character\n    s = s.replace(ch, '', 1)\n\n    # Remove last occurrence of given character\n    s = s.replace(ch, '', -1)\n\n    return s",
        "test": "assert remove_Occ(\"Hello, World!\", \"x\") == \"Hello, World!\"",
        "num_ids": 777,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sort_matrix(M):\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols-1):\n            if M[i][j] + M[i][j+1] > M[i][j+1] + M[i][j]:\n                M[i], M[i+1] = M[i+1], M[i]\n    return M",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1386,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a Python function to find the volume of a triangular prism.\n\n    Parameters:\n    l: float, length of the base of the prism\n    b: float, length of the top of the prism\n    h: float, height of the prism\n\n    Returns:\n    float, the volume of the prism\n    \"\"\"\n    volume = l * b * h\n    return volume",
        "test": "assert find_Volume(1,2,3) == 6",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function takes a string as input and returns True if the input string contains sequences of lowercase letters joined with an underscore, and False otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z]+_[a-z]+(?![a-z])'\n    return bool(re.search(pattern, text))",
        "test": "assert text_lowercase_underscore(\"Hello World\") is False",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def square_perimeter(a):\n    '''\n    Returns the perimeter of a square given its side length.\n    '''\n    return a*4",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 513,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def str_to_list(string):\n    # create a list to store the integer values of the characters from the string\n    list_of_ints = []\n\n    # loop through the string and add each character to the list\n    for char in string:\n        list_of_ints.append(ord(char))\n\n    return list_of_ints",
        "test": "assert str_to_list(\"012\") == [48, 49, 50]",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the count of each element in the array\n    count_dict = {}\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Check if any element has a count of 2\n    for num in count_dict:\n        if count_dict[num] > 1:\n            return True\n    \n    return False",
        "test": "assert test_duplicate([1, 2, 3, 2, 4]) == True  # array does not contain duplicate element",
        "num_ids": 1011,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 or x % 3 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(12345) == True",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = num\n    while reversed_num > 0:\n        reversed_num = reversed_num // 10\n    return num == reversed_num\n",
        "test": "assert rev(123456789) is False, \"123456789 is not one less than twice its reverse.\"",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_Max_Num(arr):\n    # Define a function to find the maximum number\n    def max_number(lst):\n        max_num = lst[0]\n        for i in range(1, len(lst)):\n            if lst[i] > max_num:\n                max_num = lst[i]\n        return max_num\n\n    # Call the max_number function to find the maximum number\n    max_num = max_number(arr)\n    return max_num",
        "test": "assert find_Max_Num([1,2,3,4,5]) == 5",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def opposite_Signs(x, y):\n    if x > y:\n        if x < 0:\n            return True\n        else:\n            return False\n    elif x < y:\n        if y < 0:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert opposite_Signs(10, 5) == False",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_octagonal(n):\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_octagonal(n-1) + is_octagonal(n-2)",
        "test": "assert is_octagonal(1) == True",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    total = 0\n    for i in range(len(s)):\n        if len(str(i)) == len(s):\n            for j in range(len(str(s))):\n                substrings[str(i) + str(j)] += 1\n            total += len(str(i))\n    return total",
        "test": "assert count_Substrings('banana') == 0, \"count_Substrings('banana') should return 0\"",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)",
        "test": "assert smallest_num([1, 2, 3]) == 1",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def max_difference(test_list):\n    max_diff = float('-inf')  # initialize max_diff with negative infinity\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1266,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "test": "assert subject_marks([(90, \"Math\"), (85, \"English\"), (92, \"Science\")]) == [(85, \"English\"), (90, \"Math\"), (92, \"Science\")]",
        "num_ids": 1326,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def recursive_list_sum(data_list):\n    # base case: if the list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n\n    # if the first element in the list is an integer, add it to the sum\n    if type(data_list[0]) == int:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \n    # recursively add the elements of the remaining list\n    return data_list[0] + recursive_list_sum(data_list[1:])",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        ways = 0\n        for i in range(2, n+1):\n            for j in range(n-i+1):\n                ways += (n-i)*((2*j)/(j+2))\n        return ways",
        "test": "assert bell_number(1) == 1, \"The function is returning an incorrect result for 1.\"",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        return A[0] >= A[1]\n    else:\n        for i in range(1, n-1):\n            if A[i] >= A[i-1] and A[i] >= A[i+1]:\n                return False\n        return True",
        "test": "assert is_Monotonic([5,5,5,4,3]) == False",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True",
        "test": "assert is_sublist([1, 2, 3], [1, 2, 4]) == False",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # create an empty set\n    set_of_tuples = set()\n\n    # iterate through each tuple in the input\n    for tuple_ in Input:\n        # add the tuple to the set of tuples\n        set_of_tuples.add(tuple_)\n\n    # check if all the tuples in the set of tuples have equal length or not\n    if len(set_of_tuples) == len(set(set_of_tuples)):\n        # if all the tuples have equal length, return True\n        return True\n    else:\n        # if not all the tuples have equal length, return False\n        return False\n",
        "test": "assert find_equal_tuple([1, 2, 3, 4, 5]) == True",
        "num_ids": 1166,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(1, n):\n        max_idx = i - 1\n        for j in range(i):\n            if nums[j] > nums[i]:\n                max_idx = j\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums",
        "test": "assert comb_sort([10, 3, 5, 7, 9]) == [3, 5, 7, 9, 10]",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def dif_Square(n):\n    # check if n is even or odd\n    if n % 2 == 0:\n        # if n is even\n        if n < 100:\n            # if n is less than 100, check if it can be represented as the difference of two squares\n            return True\n        else:\n            # if n is greater than or equal to 100, it cannot be represented as the difference of two squares\n            return False\n    else:\n        # if n is odd\n        if n < 100:\n            # if n is less than 100, check if it can be represented as the difference of two squares\n            return True\n        else:\n            # if n is greater than or equal to 100, it cannot be represented as the difference of two squares\n            return False",
        "test": "assert dif_Square(1) is True",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def is_samepatterns(colors, patterns):\n    for pattern in patterns:\n        if not colors.count(pattern):\n            return False\n    return True",
        "test": "assert is_samepatterns([0,0,0], [[0,1], [0,1]]) == False",
        "num_ids": 879,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    tuples_set = set(test_list)\n\n    result = []\n\n    for tuple in test_list:\n        if all(i % tuple[i] == 0 for i in range(len(tuple))):\n            result.append(tuple)\n\n    return result",
        "test": "assert find_tuples([], 3) == []",
        "num_ids": 1058,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(11) == True, \"The number 11 is not divisible by 11.\"",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    if len(words) == 1:\n        return len(s)\n    else:\n        return (len(words)-1) * 2",
        "test": "assert word_len(\"Apple\") == 5",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        a = n - 1\n        b = n - 2\n        c = n - 3\n        d = n - 4\n        return (tetrahedral_number(a) + tetrahedral_number(b) + tetrahedral_number(c) + tetrahedral_number(d)) % 1000000007",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = math.pi * r**3\n    return volume",
        "test": "assert volume_sphere(0) == 0, \"The volume of a sphere with radius 0 should be equal to 0.\"",
        "num_ids": 991,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    for i in strr:\n        ascii_value = ord(i)\n        if ascii_value % 26 == 0:\n            return i\n    return \"No Character Found\"",
        "test": "assert get_Char(\"Pyth\") == \"H\"",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def sequence(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]",
        "test": "assert sequence(2) == 1  # 1",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2",
        "test": "assert surfacearea_sphere(4) == 23.14, \"The surface area of sphere with radius 4 is incorrect. It should be 23.14\"",
        "num_ids": 696,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 1:\n        hexagon_number = n // 2\n        hexagon_number_plus_two = hexagon_number * 2\n        return (hexagon_number + hexagon_number_plus_two) / 2\n    else:\n        hexagon_number = n // 2\n        hexagon_number_plus_one = hexagon_number * 2 - 1\n        return (hexagon_number + hexagon_number_plus_one) / 2",
        "test": "assert centered_hexagonal_number(2) == 1",
        "num_ids": 1303,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy() # create a copy of the first dictionary\n    merged_dict.update(dict2) # update the merged_dict with the second dictionary\n    merged_dict.update(dict3) # update the merged_dict with the third dictionary\n    return merged_dict",
        "test": "assert merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 1541,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = collections.Counter(lst)\n    return freq_dict",
        "test": "assert freq_count([\"apple\", \"banana\", \"cherry\"]) == {\"apple\": 1, \"banana\": 1, \"cherry\": 1}",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for i in range(2, int(N**0.5)+1):\n        if abs(N-i) < abs(closest-i):\n            closest = i\n    return closest",
        "test": "assert closest_num(10) == 10",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "test": "assert len_log(['apple', 'banana', 'cherry', 'grape']) == 6",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two string values as inputs and returns True if the input string is a substring of the input list of string values.\n    '''\n    return any(sub_str in s for s in str1.split())",
        "test": "assert find_substring(\"hello world\", \"llo\") == True",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_undulating(n):\n    # Check if n is divisible by any number from 2 to the square root of n\n    divisible = True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisible = False\n            break\n    if divisible:\n        return True\n    else:\n        return False",
        "test": "assert is_undulating(0) is True",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power(a, b):\n    return a ** b\n",
        "test": "assert power(2, 2) == 4",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = None\n    for i, tup in enumerate(test_list):\n        if tup[1] < minimum or (tup[1] == minimum and tup[0] < minimum[0]):\n            minimum = tup\n    return minimum[0] if minimum is not None else None",
        "test": "assert index_minimum([(3,2), (5,1), (1,4), (2,6), (4,8)]) == (1, 4)",
        "num_ids": 1218,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = len(lst[0]) # Initialize the minimum length as the first list's length\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i) # Update the minimum length if the current list is shorter than the previous one\n\n    return min_length",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 1109,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    # Check if n is a positive integer\n    if n > 0:\n        # Initialize a variable to store the largest divisor\n        divisor = n\n        # Loop through all numbers from 1 to the square root of n\n        for i in range(1, int(n**0.5)+1):\n            # Check if n is divisible by i\n            if n % i == 0:\n                # If yes, decrement the divisor and increment the divisors count\n                divisor = i\n                divisors += 1\n                # Check if the divisor is greater than the current divisor\n                if divisor > divisor:\n                    # If yes, update the divisor variable to be the new divisor\n                    divisor = divisor\n    return divisors",
        "test": "assert divisor(1) == 1",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through the flattened list and add each element to the dictionary with its frequency\n    for element in flattened_list:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    \n    return freq_dict",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 1688,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for i in numbers:\n        product *= i\n    return product/len(numbers)",
        "test": "assert multiply_num([100]) == 100",
        "num_ids": 744,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n!= 0: \n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def next_smallest_palindrome(num):\n    # Initialize the smallest palindrome to the input number\n    smallest_palindrome = num\n\n    # Loop through all integers from 1 to the smallest palindrome\n    for i in range(2, int(num**0.5) + 1):\n        # Check if the input number is a palindrome and is smaller than the current palindrome\n        if str(num) == str(i) and i >= smallest_palindrome:\n            smallest_palindrome = i\n\n    return smallest_palindrome",
        "test": "assert next_smallest_palindrome(5) == 5",
        "num_ids": 1236,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n\n    Example:\n    >>> snake_to_camel('my_string')\n   'myString'\n    >>> snake_to_camel('my_string_with_underscores')\n   'myStringWithUnderscores'\n    '''\n    words = word.split('_')\n    return ''.join([word.capitalize() if i else word.lower() for i, word in enumerate(words)])",
        "test": "assert snake_to_camel('snake_case_word') =='snakeCaseWord'",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Check if n and m are integers\n    if not all(isinstance(i, int) for i in [n, m]):\n        raise ValueError(\"n and m must be integers\")\n    \n    # Check if n and m are less than or equal to 1000\n    if n > 1000 or m > 1000 or n <= 0 or m <= 0:\n        raise ValueError(\"n and m must be greater than 0 and less than or equal to 1000\")\n    \n    # Find the gcd of n and m\n    gcd = 1\n    while m % gcd!= 0:\n        gcd = gcd(gcd, m % gcd)\n    \n    # Find the lcm of n and m\n    lcm = n * m // gcd\n    \n    # Return the Eulerian number\n    return lcm",
        "test": "assert eulerian_num(2, 3) == 6",
        "num_ids": 2248,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "test": "assert sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]) == [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def count(lst):\n    true_count = 0\n    for item in lst:\n        if item:\n            true_count += 1\n    return true_count",
        "test": "assert count([True, False, True, False, True]) == 3 # correct output",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + test_list\n    return test_tup",
        "test": "assert add_lists([], []) == []",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n\n    Parameters:\n    num1 (list): List of numbers.\n    num2 (list): List of numbers.\n    num3 (list): List of numbers.\n\n    Returns:\n    list: A single sorted list of numbers.\n    \"\"\"\n    # Merge the three lists\n    merged_list = []\n    i = j = k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    # Append any remaining elements from the three lists\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n\n    # Convert the merged list to a sorted list\n    merged_list = sorted(merged_list)\n\n    return merged_list",
        "test": "assert merge_sorted_list([1, 3, 5], [2, 4, 6], [7, 9, 11]) == [1, 2, 3, 4, 5, 6, 7, 9, 11]",
        "num_ids": 2005,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the given string to a binary string\n    binary_string = bin(int(s, 2))[2:].zfill(len(s))\n\n    # Initialize the count to 0\n    count = 0\n\n    # Loop through each bit of the binary string\n    for i in range(len(binary_string)):\n        # If the bit is 1, increment the count\n        if binary_string[i] == '1':\n            count += 1\n\n    return count",
        "test": "assert odd_Equivalent(\"0101\", 2) == 2 # expected output: 2",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def flatten(lst):\n        return [item for sublist in lst for item in sublist]\n\n    def get_common_elements(list1, list2):\n        # create two sets of elements in both lists\n        set1 = set(flatten(list1))\n        set2 = set(flatten(list2))\n\n        # find the intersection of the two sets\n        common_elements = set1.intersection(set2)\n\n        # convert the set back to a list and return it\n        return list(common_elements)\n\n    # if there is only one list, return it as common\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n\n    # find the common elements in all the lists\n    common_elements = []\n    for lst in nestedlist:\n        common_elements.extend(get_common_elements(lst, common_elements))\n\n    # return the first common element\n    return common_elements[0]",
        "test": "assert common_in_nested_lists([[]]) == []",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Check if all dictionaries in list1 are empty\n    if all(not dict(d).values() for d in list1):\n        return True\n    else:\n        return False",
        "test": "assert empty_dit([]) == True",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result",
        "test": "assert tuple_to_int((1, 2, 3)) == 6",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for i in test_list:\n        for j in i:\n            float_list.append(float(j))\n    return float_list",
        "test": "assert list_to_float([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]",
        "num_ids": 1063,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"apple orange banana\") == ['apple', 'orange', 'banana']",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize an empty list to store unique elements\n    unique_list = []\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the element is not in the list, append it to the list and add it to the unique_list\n        if arr[i] not in unique_list:\n            unique_list.append(arr[i])\n    # If the list is empty, return None\n    if len(unique_list) == 0:\n        return None\n    # If the list has only one element, return it\n    if len(unique_list) == 1:\n        return unique_list[0]\n    # If the list has more than one element, return None\n    return None",
        "test": "assert search([]) == None",
        "num_ids": 1195,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    max_tuple = (0, 0)\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n\n            if product > max_product:\n                max_product = product\n                max_tuple = (list1[i][0], list1[j][1])\n\n    return max_tuple\n\n\nlist1 = [(1, 2), (3, 4), (5, 6)]\nprint(max_product_tuple(list1))  # Output: (6, 8)",
        "test": "assert max_product_tuple([]) == (0, 0)",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    # Initialize a list to store the sum of all the amicable numbers\n    amicable_numbers_sum = []\n    \n    # Iterate through all the numbers from 1 to the limit\n    for i in range(1, limit+1):\n        \n        # Check if the current number is a perfect square\n        if i**0.5**2 == int(i**0.5**2):\n            \n            # If it is, add it to the list of amicable numbers and continue\n            amicable_numbers_sum.append(i)\n            continue\n        \n        # If the current number is not a perfect square, check if it is divisible by any number from 2 to the square root of the current number\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                break\n        else:\n            # If it is not divisible by any number from 2 to the square root of the current number, it is a valid amicable number\n            amicable_numbers_sum.append(i)\n    \n    # Return the sum of all the amicable numbers found\n    return sum(amicable_numbers_sum)",
        "test": "assert amicable_numbers_sum(10000) == 1367841",
        "num_ids": 1278,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Returns the angle of the complex number a + bi.\n\n    Parameters:\n    a (float) : real part of the complex number.\n    b (float) : imaginary part of the complex number.\n\n    Returns:\n    The angle of the complex number a + bi in radians.\n    '''\n\n    # Compute the angle in radians\n    angle = cmath.phase(a + b)\n\n    return angle",
        "test": "assert angle_complex(0,0) == 0.0",
        "num_ids": 744,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    # Initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    # Iterate through the string and count the number of 0s and 1s\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        elif string[i] == '1':\n            count_1 += 1\n\n    # Calculate the maximum difference between the number of 0s and number of 1s in the sub-string\n    for i in range(len(string)):\n        if string[i] == '0':\n            max_diff = max(max_diff, i - count_0)\n        elif string[i] == '1':\n            max_diff = max(max_diff, count_1 - i)\n\n    # Return the maximum difference\n    return max_diff",
        "test": "assert find_length(b\"1111111111111111111111111111111\") == 0",
        "num_ids": 3287,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # initialize two variables\n    sum_of_common_divisors = 0\n    # loop through the numbers from 1 to a\n    for i in range(1, a+1):\n        # check if i is a factor of b\n        if i % b == 0:\n            # if yes, add it to sum_of_common_divisors\n            sum_of_common_divisors += i\n    # return the sum of common divisors\n    return sum_of_common_divisors",
        "test": "assert sum(100, 50) == 100 + 50",
        "num_ids": 1210,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def long_words(n, str):\n    '''\n    Find words in a string that are longer than n characters long.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "test": "assert long_words(0, \"\") == []",
        "num_ids": 2329,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= 4:\n        return False\n    \n    # Check each row\n    for row in my_matrix:\n        if len(row)!= 4:\n            return False\n        for num in row:\n            if not (num >= 1 and num <= 9):\n                return False\n    \n    # Check each column\n    for i in range(4):\n        for j in range(4):\n            if not my_matrix[i][j] == my_matrix[i][3-j-1]:\n                return False\n    \n    # Check each 3x3 submatrix\n    for i in range(1, 4):\n        for j in range(1, 4):\n            if not all(my_matrix[i][k] == my_matrix[k][j] == my_matrix[i-1][j-1] for k in range(i)):\n                return False\n    \n    # Check each 4x4 submatrix\n    for i in range(2, 4):\n        for j in range(2, 4):\n            if not all(my_matrix[k][j] == my_matrix[k-1][j] == my_matrix[k-2][j-1] for k in range(i)):\n                return False\n    \n    # Check each 5x5 submatrix\n    for i in range(3, 5):\n        for j in range(3, 5):\n            if not all(my_matrix[k][j] == my_matrix[k][j-1] == my_matrix[k][j-2] == my_matrix[k][j-3] for k in range(i)):\n                return False\n    \n    # Check each 6x6 submatrix\n    for i in range(4, 6):\n        for j in range(4, 6):\n            if not all(my_matrix[k][j] == my_matrix[k-1][j] == my_matrix[k-2][j] == my_matrix[k-3][j-1] == my_matrix[k-4][j-2] for k in range(i)):\n                return False\n    \n    # Check each 7x7 submatrix\n    for i in range(5, 7):\n        for j in range(5, 7):\n            if not all(my_matrix[k][j] == my_matrix[k-1][j] == my_matrix[k-2][j] == my_matrix[k-3][j] == my_matrix[k-4][j-1] == my_matrix[k-5][j-2] for k in range(i)):\n                return False\n    \n    return True",
        "test": "assert magic_square_test([[1, 4, 7], [2, 5, 8], [3, 6, 9], [1, 4, 3], [2, 5, 6], [3, 6, 9]]) == False",
        "num_ids": 2053,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with maximum frequency.\n    '''\n\n    # create a dictionary to keep track of the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # iterate through the list of integers and increment its frequency in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # iterate through the dictionary and find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    # return the item with maximum frequency\n    return max_item",
        "test": "assert max_occurrences([1,2,2,3,3,3,3,3,3]) == 3",
        "num_ids": 964,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str += char\n    return reversed_str",
        "test": "assert reverse_vowels(\"hello\") == \"olleh\"",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string((1, 2, 3)) == '(1, 2, 3)'",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def sum_negativenum(nums):\n    '''\n    Given a list of numbers, calculate the sum of the negative numbers.\n    '''\n    # initialize the sum to zero\n    total = 0\n    \n    # loop over the numbers in the list\n    for num in nums:\n        # if the number is negative, add it to the total\n        if num < 0:\n            total += num\n    \n    # return the total sum\n    return total",
        "test": "assert sum_negativenum([-1, -2, -3, -4, -5]) == -15",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = n % 6  # if n is odd, the last digit should be odd, so we need to add 1 to n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 13\n    else:\n        return hexagonal_num(n-2) + 4",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize variables\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate through the array of integers\n    for num in nums:\n        # If the number is zero, increment the zero_count variable\n        if num == 0:\n            zero_count += 1\n        # If the number is non-zero, increment the non_zero_count variable\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = (zero_count / non_zero_count) * 100\n\n    return ratio",
        "test": "assert zero_count([1, 2, 3, 4]) == 0.0",
        "num_ids": 1363,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a Python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize a variable to store the sum of non-zero powers of 2\n    sum_of_powers_of_two = 0\n\n    # Initialize a variable to store the number of non-zero powers of 2\n    count_non_zero_powers_of_two = 0\n\n    # Check if the given number is a power of 2\n    if n == 1:\n        return True\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        # If the given number is a power of 2, check if it can be represented as sum of non-zero powers of 2\n        while n % 2 == 0:\n            sum_of_powers_of_two += 1\n            count_non_zero_powers_of_two += 1\n            n //= 2\n        return True\n    else:\n        # If the given number is not a power of 2, check if it can be represented as sum of non-zero powers of 2\n        while n > 1:\n            if n % 2 == 0:\n                sum_of_powers_of_two += 1\n                count_non_zero_powers_of_two += 1\n                n //= 2\n            else:\n                sum_of_powers_of_two += 1\n                count_non_zero_powers_of_two += 1\n                n += 1\n        return True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(4) == True",
        "num_ids": 1737,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Create an empty set to hold the numbers\n    numbers_set = set()\n\n    # Iterate over the list of lists\n    for inner_list in test_list:\n        # Iterate over the elements of the inner list\n        for element in inner_list:\n            # Add each element to the set\n            numbers_set.add(element)\n\n    # Return the set of numbers\n    return numbers_set",
        "test": "assert extract_singly([]) == set()",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def pancake_sort(nums):\n    # Initialize three variables: left, right, and pivot\n    left = 0\n    right = len(nums) - 1\n    pivot = len(nums) // 2\n\n    # Swap pivot with the last element in the list\n    nums[pivot], nums[right] = nums[right], nums[pivot]\n\n    # Use a while loop to compare the elements to the left and right\n    # boundaries of the list\n    while left < right:\n        # If the element to the left of the pivot is smaller, swap it with the\n        # element to the left of the pivot and continue to the next element\n        if nums[left] > nums[pivot]:\n            nums[left], nums[left + 1] = nums[left + 1], nums[left]\n            left += 1\n        # If the element to the right of the pivot is smaller, swap it with the\n        # element to the right of the pivot and continue to the next element\n        elif nums[right] < nums[pivot]:\n            nums[right], nums[right - 1] = nums[right - 1], nums[right]\n            right -= 1\n        # If the element to the left of the pivot is equal to the pivot,\n        # continue to the next element\n        else:\n            left += 1\n            right -= 1\n\n    return nums",
        "test": "assert pancake_sort([1, 3, 5, 2, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 1645,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([],[],[]) == 0",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def find_lists(Input):\n    return len(set(Input))",
        "test": "assert find_lists(()) == 0",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([2,3,4]) == 2 # Check if the function returns the correct result when given the array [2, 3, 4]",
        "num_ids": 979,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def find_solution(a, b, n):\n    if a * b == n:\n        x = (n // a) * b\n        y = (a * n // b) + b\n        return (x, y)\n    else:\n        return None",
        "test": "assert find_solution(5, -10, 25) is None",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))",
        "test": "assert remove_elements([], []) == []",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while i * 2 <= n:\n        sum += (n-i*2)\n        i += 1\n    return sum",
        "test": "assert sum_series(10) == 30",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = pi * s * s / 4\n    return area",
        "test": "assert area_polygon(0, 0) == 0 # correct calculation",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Function to calculate the sum of divisors of a given number\n    def div_sum_helper(num, div_sum=0):\n        if num == 1:\n            return div_sum\n\n        # Check if the number is divisible by the number itself\n        if num % num == 0:\n            return div_sum_helper(num // num, div_sum + num)\n\n        # Check if the number is not divisible by the number itself\n        else:\n            return div_sum_helper(num - 1, div_sum)\n\n    # Calculate the sum of divisors of n\n    return div_sum_helper(n)",
        "test": "assert div_sum(36) == 36",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert str1 to lowercase to make it case insensitive\n    str1 = str1.lower()\n\n    # initialize counter\n    counter = 0\n\n    # iterate through each character in str1\n    for char in str1:\n\n        # if the character is in the English alphabet (a-z), increment the counter\n        if char.isalpha():\n            counter += 1\n\n    return counter",
        "test": "assert count_char_position(\"\") == 0",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2, \"The function should return 2 for the given input\"",
        "num_ids": 731,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the smallest power of 2 to n\n    smallest_power_of_2 = n\n\n    # Loop until the smallest power of 2 is greater than or equal to n\n    while smallest_power_of_2 < n:\n        # Increment the smallest power of 2 by 2\n        smallest_power_of_2 *= 2\n\n    return smallest_power_of_2",
        "test": "assert next_power_of_2(65536) == 1 << 16",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n\n    return count\n\na = [1, 2, 3, 2, 4, 5, 6, 2, 7, 8, 9, 5]\nx = 2\n\nprint(frequency(a,x)) # Output: 2",
        "test": "assert frequency(\"grape\", [\"apple\", \"banana\", \"apple\", \"orange\", \"apple\"]) == 0",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum",
        "test": "assert sum_range_list([1,2,3,4,5], 2, 0) == 0",
        "num_ids": 1105,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 3 * a",
        "test": "assert perimeter_pentagon(4) == 12.0",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"hello world\") == 0",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    same_data_types = True\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            same_data_types = False\n            break\n    return same_data_types\n",
        "test": "assert check_type((1, 2, 3)) == True, \"Tuple has one element\"",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    count_x = 0\n\n    # Count the number of occurrences of each element in the array\n    for num in arr:\n        if num == x:\n            count_x += 1\n        else:\n            count += 1\n\n    # If the count is greater than or equal to the majority element count, return True\n    if count >= n/2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1, 1, 1, 2, 2, 2], 3, 1) == True",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        n = n & (n - 1)  # get the rightmost set bit (if any)\n        count += 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 721,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i, char in enumerate(str):\n        if i % 2!= 0:\n            result += char\n    return result",
        "test": "assert odd_values_string(\"1234\") == \"1234\"",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return r == n",
        "test": "assert all_Bits_Set_In_The_Given_Range(3, 1, 4) == False # checks for all bits to be set",
        "num_ids": 1158,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a dictionary to store the count of each element\n    count = {}\n    # iterate through the array and count the occurrence of each element\n    for i in arr:\n        if i < 0:\n            # if the current element is negative, increment the count of the previous positive element\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        else:\n            # if the current element is positive, add it to the dictionary with a count of 1\n            count[i] = 1\n    # sort the dictionary by key (negative elements) and value (positive elements)\n    sorted_count = dict(sorted(count.items(), key=lambda x: (x[0], -x[1])))\n    # create a new array with the negative elements first\n    neg_elements = []\n    pos_elements = []\n    for i in sorted_count.keys():\n        if i >= 0:\n            neg_elements.append(i)\n        else:\n            pos_elements.append(i)\n    # concatenate the two arrays\n    result = neg_elements + pos_elements\n    # return the new array\n    return result",
        "test": "assert re_arrange_array([], 0) == []",
        "num_ids": 1820,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_blank(str1, char):\n    '''\n    Replace blank spaces in the string with the character.\n    '''\n    return str1.replace(' ', char)",
        "test": "assert replace_blank(\"\", \" \") == \"\"",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    if n > len(list1):\n        return []\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([1, 2, 3, 4, 5], 0) == []",
        "num_ids": 1054,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h",
        "test": "assert lateralsuface_cylinder(3,1) == 6.0, \"The function should return the correct value for lateralsurface_cylinder(3,1).\"",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "test": "assert volume_cube(5) == 125",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def even_bit_set_number(n):\n    # iterate from 0 to n-1\n    for i in range(0, n-1, 2):\n        # if the i-th bit is not 0, then set it to 1\n        if n & (1<<i)!= 0:\n            n |= (1<<i)\n\n    return n",
        "test": "assert even_bit_set_number(10) == 10 # Test 1: Set all even bits to 1 in the number 10",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "test": "assert check_occurences([\"apple\", \"banana\", \"apple\", \"orange\", \"apple\"]) == {\"apple\": 3, \"banana\": 1, \"orange\": 1}",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count",
        "test": "assert number_of_substrings('') == 0",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # base case: if n is greater than or equal to m, then there is only one sequence of length n\n    if n >= m:\n        return 1\n\n    # calculate the maximum number of elements that can be in any sequence of length n\n    max_elements = 1000000000\n\n    # iterate through the possible lengths of n\n    for i in range(1, n + 1):\n        # initialize the current sequence to an empty list\n        current_sequence = []\n\n        # iterate through the possible starting elements\n        for j in range(m, i + 1):\n            # if the current element is greater than or equal to twice the previous element but less than or equal to m, then add it to the current sequence\n            if j >= 2 * (j - 1) and j <= m:\n                current_sequence.append(j)\n\n        # if there is still a sequence of length n that satisfies the constraint, return the number of sequences\n        if current_sequence:\n            return len(current_sequence) * get_total_number_of_sequences(m, n - i)\n\n    # if no sequence satisfies the constraint, return 0\n    return 0",
        "test": "assert get_total_number_of_sequences(1,1) == 1",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def replace_list(list1, list2):\n    # Loop through each element in the list1\n    for i in range(len(list1)-1, -1, -1):\n        # If the element is at the end of list1, replace it with the last element in list2\n        if i == len(list1)-1:\n            list1[i] = list2[-1]\n            list2 = list2[:-1]\n        # If the element is not at the end of list1, replace it with the next element in list2\n        else:\n            list1[i] = list2[i+1]\n    return list1",
        "test": "assert replace_list([],[]) == []",
        "num_ids": 1047,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_charac(str1):\n    '''\n    This function counts the total number of characters in a string.\n    '''\n    return len(str1)",
        "test": "assert count_charac(\"hello world\") == 11",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # base case: if N is 1, return itself\n    if N == 1:\n        return N\n\n    # iterate through all possible squares greater than N and return the one that is closest to N\n    for i in range(int(math.sqrt(N))+1):\n        if N - i*i > 0:\n            return N - i*i\n\n    # if no perfect square was found, return None\n    return None\n",
        "test": "assert next_Perfect_Square(100) == 100",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_sum(arr):\n    '''\n    Find the maximum sum of a bitonic subsequence in a given array.\n    '''\n\n    # Initialize variables\n    max_so_far = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array\n    for num in arr:\n        # Calculate the bitonic sum\n        current_sum = (current_sum + num) % 1000000007\n\n        # Update the maximum sum if necessary\n        if current_sum > max_so_far:\n            max_so_far = current_sum\n\n    return max_so_far\n",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n\n    guess = (number + 1) // 2\n    difference = abs(number - guess ** 2)\n\n    while difference > 1e-6:\n        guess = (guess + number // guess) // 2\n        difference = abs(number - guess ** 2)\n\n    return guess",
        "test": "assert babylonian_squareroot(0) == 0.0",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\n    # Initialize the maximum length of a palindromic substring to zero\n    max_len = 0\n\n    # Loop through all possible substrings of the string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # Check if the substring is a palindrome\n            if str[i:j] == str[i:j][::-1]:\n                # If it is a palindrome, update the maximum length if necessary\n                if j-i+1 > max_len:\n                    max_len = j-i+1\n\n    # Return the maximum length of a palindromic substring found\n    return max_len",
        "test": "assert lps('pwwkew') == 3",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "test": "assert harmonic_sum(1) == 1, \"The harmonic sum of 1 is incorrect\"",
        "num_ids": 861,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Find the intersection of two arrays.\n    '''\n\n    # Create a set of the elements of array_nums1\n    set1 = set(array_nums1)\n\n    # Create a set of the elements of array_nums2 that are in set1\n    intersection = set1.intersection(array_nums2)\n\n    # Return a list of the intersection elements\n    return list(intersection)",
        "test": "assert intersection_array([1,2,3,4,5],[6,7,8,9,10]) == []",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((\"apple\", \"banana\", \"cherry\"), \"apple\") == 1",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    # Loop through each element in the list\n    for i in range(len(list)):\n        # Check if the element is greater than the current element\n        if list[i] > element:\n            # Insert the element before the current element\n            list.insert(i,element)\n            return list\n    # If the loop completes without finding an element, return the original list\n    return list",
        "test": "assert insert_element([],4) == []",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = numbers[0]\n    b = numbers[1]\n    c = cmath.sqrt(a**2 + b**2)\n    theta = cmath.acos(b/c)\n    r = cmath.sqrt(a**2 + b**2 - c**2)\n    phi = cmath.degrees(theta)\n    return r, phi",
        "test": "assert convert(4j) == (4.0, 0.0)",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list(filter(lambda x: isinstance(x, int), list1)))",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]",
        "test": "assert combinations_colors([], 2) == []",
        "num_ids": 2263,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(0) == 0, \"count_Primes_nums(0) should return 0\"",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)",
        "test": "assert swap_numbers(3,5) == (5,3)",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup2) > len(test_tup1):\n        return test_tup2\n    else:\n        return test_tup1",
        "test": "assert maximize_elements((2, 4), (1, 3)) == (2, 4)",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def newman_prime(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    \n    # Find the smallest prime factor of n\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    \n    # Check if n is odd\n    if n!= 1:\n        return n\n    \n    # Check if n is prime\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return n\n    \n    return n + 1",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 1292,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # Check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples have different number of elements\"\n    \n    # Initialize a list to store the result\n    result_list = []\n    \n    # Perform division operation element-wise\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    \n    # Return the result list\n    return result_list",
        "test": "assert division_elements((1, 2, 3), ()) == (1, 2, 3)",
        "num_ids": 1549,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) >= L:\n        # split list1 into two parts with length L\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)\n    else:\n        # return original list1 as a single part\n        return (list1,)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 1754,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 0:\n        return h_age\n    else:\n        return None",
        "test": "assert dog_age(0) == 0",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # convert S to a list\n    S = list(S)\n    # initialize result list\n    result = []\n    # loop through each element in S\n    for i in range(0, len(S), step):\n        # create a new list containing the elements in S between the current index and the next index\n        sublist = S[i:i+step]\n        # append the sublist to the result list\n        result.append(sublist)\n    # return the result list\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = l * l * l\n    return surface",
        "test": "assert lateralsurface_cube(5) == 125",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return 4 * (find_star_num(n-1) + find_star_num(n-2))",
        "test": "assert find_star_num(1) == 1, \"The function should return the correct value for n=1.\"",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 1550,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n    return even_sum, even_index",
        "test": "assert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7]) == 60",
        "num_ids": 1059,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0  # Initialize a variable to store the sum\n    count = 0  # Initialize a variable to store the count\n    \n    # Iterate through all the even natural numbers from 2 to n\n    for i in range(2, n+1, 2):\n        total += i**5  # Calculate the nth even power number\n        count += 1  # Increment the count\n        \n    return total, count",
        "test": "assert even_Power_Sum(5) == 243 // 5",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result",
        "test": "assert rear_extract([('apple', 2), ('banana', 3), ('orange', 1), ('grape', 5), ('kiwi', 4), ('pear', 6), ('plum', 7)]) == [('banana', 3), ('grape', 5), ('kiwi', 4), ('pear', 6), ('plum', 7)]",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i, element1 in enumerate(test_tup1):\n        if i in test_tup2:\n            element2 = test_tup2[i]\n            result_tup += (element1 - element2)\n        else:\n            result_tup += (element1,)\n    return result_tup",
        "test": "assert substract_elements(tuple([1, 2, 3]), tuple([4, 5, 6])) == tuple([1, 2, 3])",
        "num_ids": 1511,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_coeff_sum = 0\n    for i in range(1, n+1): \n        if i % 2 == 0: \n            even_coeff_sum += (i - 1) * math.factorial(i-1)\n    return even_coeff_sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r * r * h",
        "test": "assert volume_cylinder(5,10) == 91.55172413790528",
        "num_ids": 760,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n\n    # create a new dictionary to store the filtered entries\n    filtered_dict = {}\n\n    # iterate through the original dictionary and filter out entries with values less than or equal to n\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n\n    # return the filtered dictionary\n    return filtered_dict",
        "test": "assert dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 4) == {}",
        "num_ids": 949,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count",
        "test": "assert count_first_elements((1,2,3,4,5,6,7)) == 0",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_num_decagonal(n):\n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        # check if the square root of n is an integer\n        sqrt_n = int(n**0.5)\n        if n == sqrt_n**2:\n            # if sqrt_n is a multiple of n, it's a decagonal number\n            return True\n        else:\n            # otherwise, it's not a decagonal number\n            return False",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (-1, -1)",
        "test": "assert sequential_search([1], 1) == (True, 0)",
        "num_ids": 1019,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_set = set(test_list)\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 861,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists are not of equal length.\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]-nums2[i])\n        return result",
        "test": "assert sub_list([1,2,3],[1,2,3]) == [0,0,0]",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    count = 0\n    # Check if the integer is a positive integer\n    if n <= 0:\n        return False\n    # Check if the integer is a negative integer\n    elif n >= 0:\n        return True\n    else:\n        # Convert the integer to a string and loop through each character\n        for char in str(n):\n            # Check if the current character is a digit\n            if char.isdigit():\n                # Check if the frequency of the current digit is less than or equal to the current digit itself\n                count += int(char)\n        # Check if the count is less than or equal to the length of the integer in base 10\n        if count <= len(str(n)) or count > 10:\n            return False\n        else:\n            return True",
        "test": "assert validate(123) == True, \"validate should return True for integers that are divisible by 10 and greater than or equal to 10.\"",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False",
        "test": "assert check_element([1,2,3,4,5],6)==False",
        "num_ids": 648,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search(r'a.*b.*b.*b.*', text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three('abc') is False",
        "num_ids": 1728,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max(a)\n    if n == 1:\n        return a[0]\n    if k > n:\n        return max_sub_array_sum_repeated(a[1:], n-1, k)\n    else:\n        return max(a[0]+a[1]+a[2:], max_sub_array_sum_repeated(a[1:], n-1, k-1))",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 1) == 5",
        "num_ids": 2727,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "test": "assert square_Sum(2) == 4, \"The sum of squares of 2 is incorrect.\"",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def max_length(list1):\n    '''\n    Function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if len(list1[i][j]) > max_length:\n                max_length = len(list1[i][j])\n    return max_length",
        "test": "assert max_length([1, 2]) == 2, \"The maximum length of the list is not 2\"",
        "num_ids": 1377,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def count_no_of_ways(n, k):\n    # Function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    # returns the count of the number of ways\n    ways = 0\n    # loop through all the colors in the given fence\n    for i in range(k):\n        # check if adjacent posts are of the same color\n        for j in range(2, n):\n            # check if adjacent posts have the same color\n            if (i!= j and n % 2 == 0) or (i!= j and n % 2!= 0):\n                ways += 1\n                # remove adjacent posts of the same color from the fence\n                n -= 1\n    return ways",
        "test": "assert count_no_of_ways(3, 1) == 1  # Test Case 3",
        "num_ids": 1414,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a Python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient",
        "test": "assert find(12, 3) == 4, \"Incorrect result for find(12, 3).\"",
        "num_ids": 743,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    area = (w * h) / 2\n    return area",
        "test": "assert otherside_rightangle(6,3)==9, \"The function should return 9 for the given values.\"",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]  # assuming the first element is the max value\n    for val in listval:  # loop through the remaining elements\n        if val > max_val:  # if the current element is greater than the max value\n            max_val = val  # update the max value\n    return max_val  # return the max value",
        "test": "assert max_val([1,2,3,4,5]) == 5 # Test 1: The function should return the maximum value in the list.",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "test": "assert sum_div(4) == 16 # correct",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            inv_count += arr[i] > arr[j]\n    return inv_count",
        "test": "assert get_Inv_Count([]) == 0",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            flat_list.extend(flatten_list(list1[i]))\n        else:\n            flat_list.append(list1[i])\n    return flat_list\n",
        "test": "assert flatten_list([1, [2, 3], 4]) == [1, 2, 3, 4]",
        "num_ids": 760,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = -float('inf')\n    for num, agg in stdata:\n        if agg > max_val:\n            max_val = agg\n    return max_val",
        "test": "assert max_aggregate([('a', 1), ('b', 2), ('c', 3)]) == 3",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # initialize variables\n    count = 0\n    seq = [0] * n\n\n    # iterate over all binary sequences of length n\n    for i in range(n):\n        # set the current bit as 1\n        seq[i] = 1\n        # iterate over all subsequent bits of the current sequence\n        for j in range(i+1, n):\n            # set the current bit to 0\n            seq[j] = 0\n        # add the current sequence to the count\n        count += 1\n\n    return count",
        "test": "assert count_binary_seq(1) == 1, \"count_binary_seq(1) should return 1\"",
        "num_ids": 1758,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            count += 1\n        else:\n            return count + 1\n\n    return count + 1",
        "test": "assert dict_depth({\"a\": 1, \"b\": 2, \"c\": 3}) == 1, \"Incorrect value returned for depth of dict with one nested dictionary\"",
        "num_ids": 961,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    # Loop through each rotation and check if the element at the current index is present in the array.\n    for i in range(rotations):\n        # Check if the element is present in the array.\n        if index >= ranges[i]:\n            return arr[index - ranges[i]]",
        "test": "assert find_Element([1,2,3,4,5],[0,3,6,9],2,1)==2",
        "num_ids": 1480,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0].lower() == 'p':\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return None",
        "test": "assert start_withp(['apple', 'banana', 'orange', 'kiwi']) == ['apple', 'orange']",
        "num_ids": 911,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # initialize variables\n    max_sum = float('-inf')\n    prefix_sum = [float('-inf') for _ in range(k+1)]\n\n    # loop through the prefix from i to n\n    for i in range(k, index+1):\n        # calculate the sum of current prefix and the element at index\n        current_sum = prefix_sum[i-k] + a[i]\n\n        # update the maximum sum if it is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # update the prefix sum\n        prefix_sum[i] = max(prefix_sum[i], current_sum)\n\n    return max_sum",
        "test": "assert max_sum_increasing_subseq(a=[1, 2, 3, 4, 5], n=5, index=2, k=3) == 12",
        "num_ids": 1527,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = tuple([tuplex[i][m] for i in range(n)])\n    return colon",
        "test": "assert colon_tuplex((1,2,3,4,5),6,7) == (5, 6, 7)",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        nums1 (list): A list of numbers.\n        nums2 (list): A list of numbers.\n        N (int): The number of largest products to find.\n\n    Returns:\n        A list of the selected N largest products.\n    \"\"\"\n\n    # Calculate the product of the first N elements of nums1\n    prod1 = 1\n    for i in range(1, N+1):\n        prod1 *= nums1[i-1]\n\n    # Calculate the product of the first N elements of nums2\n    prod2 = 1\n    for i in range(1, N+1):\n        prod2 *= nums2[i-1]\n\n    # Calculate the sum of the products of the first N elements of nums1 and nums2\n    prod_sum = prod1 * prod2\n\n    # Create an empty list to store the selected N largest products\n    selected_products = []\n\n    # Loop through each product in the sum of the products\n    for i in range(prod_sum, 0, -1):\n        # Check if the current product is in the selected products\n        if i in selected_products:\n            # If it is, decrement the product count and continue\n            selected_products.remove(i)\n            prod_sum -= i\n        # If the current product is not in the selected products, add it to the list\n        else:\n            selected_products.append(i)\n            if len(selected_products) == N:\n                return selected_products\n\n    return []",
        "test": "assert large_product([1,2,3,4,5],[2,3,4,5,6], 3) == 720",
        "num_ids": 1878,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(5,8) == 8",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the count of set bits to 0\n    count = 0\n\n    # Iterate through the binary representation of n\n    while n!= 0: \n        # If the current bit is set, increment the count\n        if n & 1: \n            count += 1\n\n        # Shift the binary representation of n to the left by 1 bit\n        n = n >> 1\n\n    # Return the count of set bits\n    return count",
        "test": "assert set_left_most_unset_bit(0) == 0, \"set_left_most_unset_bit(0) should return 0\"",
        "num_ids": 1065,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi * r ** 2 * h\n    return vol",
        "test": "assert volume_cone(1,10) == 3.8, \"The volume of a cone with radius 1 and height 10 is incorrect\"",
        "num_ids": 898,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        power = 2\n        while power * 2 <= n:\n            power *= 2\n        return power\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 1626,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n\n    return [string.format(x) for x in list_]",
        "test": "assert add_string([], \"\") == []",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for item in l1:\n        for subitem in item:\n            if subitem in l2:\n                result.setdefault(subitem, []).append(item)\n            elif subitem not in result:\n                result[subitem] = []\n                result[subitem].append(item)\n    for item in l3:\n        if item not in result:\n            result[item] = []\n            result[item].append(item)\n    return result",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 1377,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def get_max_sum(n):\n    max_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            max_sum = max(max_sum, (i * (i//2) + i * (i//3) + i * (i//4) + i * (i//5)))\n        else:\n            max_sum = max(max_sum, (i * (i//2) + i * (i//3) + i * (i//4) + i * (i//5) + i))\n    return max_sum",
        "test": "assert get_max_sum(10000) == 1537171391, \"Test failed for get_max_sum(10000).\"",
        "num_ids": 1954,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n\n    # Initialize the length and maximum length to 0\n    length = 0\n    max_length = 0\n\n    # Loop through each element in the input list\n    for element in input_list:\n\n        # If the current element is longer than the previous maximum, update the length and maximum length\n        if len(element) > max_length:\n            length = 1\n            max_length = len(element)\n        # If the current element is the same length as the previous maximum, increment the length by 1\n        elif len(element) == max_length:\n            length += 1\n\n    # Return the list with the maximum length\n    return input_list[:max_length]\n",
        "test": "assert max_length_list([]) == []",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert tuple to set to remove duplicates\n    test_set = set(test_tup)\n    # check if set is empty or has only one element\n    if test_set == set() or len(test_set) == 1:\n        return True\n    else:\n        return False",
        "test": "assert check_distinct((1, 2, 3, 4, 5, 5)) == False",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    If no non-repeating characters are found, it returns None.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Iterate through the dictionary and return the first key in which the value is 1\n    for key in freq:\n        if freq[key] == 1:\n            return key\n\n    # If no non-repeating characters are found, return None\n    return None",
        "test": "assert first_non_repeating_character('abcd') == 'a'",
        "num_ids": 1032,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_char(\"a1b\") == False",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # take the three numbers and sort them in ascending order\n    sorted_list = [a, b, c]\n    sorted_list.sort()\n\n    # if the list has an odd number of elements, return the middle number\n    if len(sorted_list) % 2 == 1:\n        return sorted_list[len(sorted_list)//2]\n\n    # if the list has an even number of elements, return the average of the two middle numbers\n    else:\n        return (sorted_list[len(sorted_list)//2 - 1] + sorted_list[len(sorted_list)//2]) / 2",
        "test": "assert median_numbers(1, 2, 3) == 2.0",
        "num_ids": 1146,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum\n",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    # XOR the elements of the tuples and return the result\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))",
        "test": "assert bitwise_xor((1, 2, 3), (4, 5, 7), (8, 9, 11)) == (1, 5, 4)",
        "num_ids": 1194,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n",
        "test": "assert extract_freq([('apple', 'banana'), ('banana', 'apple'), ('banana', 'orange'), ('orange', 'apple'), ('orange', 'banana'), ('banana', 'orange'), ('apple', 'orange'), ('apple', 'banana'), ('banana', 'orange')]) == 6",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # Initialize a dictionary to store the result\n    result = {}\n    \n    # Loop through each tuple in the two nested tuples\n    for tup in test_tup1, test_tup2:\n        # Loop through each element in the tuple\n        for i in tup:\n            # If the element is not already present in the dictionary, add it with a value of 1\n            if i not in result:\n                result[i] = 1\n            # If the element is already present, increment its value by 1\n            else:\n                result[i] += 1\n    \n    # Return the result as a dictionary\n    return result",
        "test": "assert add_nested_tuples((1, 2, 3, 4), (5, 6, 7)) == (5, 7, 9, 11, 13)",
        "num_ids": 1204,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(5, 7) == 5",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    for element in tuplex: \n        if element in tuple1: \n            return True \n    return False",
        "test": "assert check_tuplex('abcd', 'abcd') == True",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns True if it is odd, False otherwise.\n    '''\n    return x % 2!= 0",
        "test": "assert find_Parity(10) == False",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def rearrange_bigger(n):\n    '''\n    Create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the number to a list of its digits\n    digits = list(str(n))\n\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n\n    # Join the sorted digits into a single string\n    big_num = ''.join(sorted_digits)\n\n    # Convert the sorted string back to an integer\n    big_int = int(big_num)\n\n    return big_int",
        "test": "assert rearrange_bigger(123456) == 654321",
        "num_ids": 1431,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # Sort the given lists in ascending order\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    \n    # Initialize a dictionary to store the number of elements in each list\n    element_count = {}\n    \n    # Count the number of elements in each list\n    for num in nums1 + nums2:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Initialize an empty list to store the indices of the smallest k pairs\n    result = []\n    \n    # Iterate through the elements of the first list and find k-1 smallest pairs\n    for i, num1 in enumerate(nums1):\n        if i < k - 1:\n            min_num = heapq.heappop(nums1)\n            for j, num2 in enumerate(nums2):\n                if j < k - 1:\n                    min_num2 = heapq.heappop(nums2)\n                    if min_num < min_num2:\n                        heapq.heappush(nums2, min_num2)\n                        heapq.heappush(nums1, min_num)\n                        heapq.heappush(result, (num1, num2))\n                        min_num2 = min_num\n                        min_num = min_num2\n                \n    # Iterate through the elements of the second list and find k-1 smallest pairs\n    for i, num2 in enumerate(nums2):\n        if i < k - 1:\n            min_num = heapq.heappop(nums2)\n            for j, num1 in enumerate(nums1):\n                if j < k - 1:\n                    min_num2 = heapq.heappop(nums1)\n                    if min_num < min_num2:\n                        heapq.heappush(nums1, min_num2)\n                        heapq.heappush(nums2, min_num)\n                        heapq.heappush(result, (num1, num2))\n                        min_num2 = min_num\n                        min_num = min_num2\n                \n    return result",
        "test": "assert k_smallest_pairs([1, 1, 1], [1, 1, 1], 2) == []",
        "num_ids": 2206,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def min_product_tuple(list1):\n    '''\n    Given a list of tuples, finds the minimum product among the pairs of tuples.\n    Returns the minimum product if there is one, otherwise returns None.\n    '''\n\n    # check if the list is empty\n    if len(list1) == 0:\n        return None\n\n    # initialize variables\n    min_product = float('inf')\n    current_product = 1\n    current_min_product = 1\n\n    # loop through the list of tuples\n    for i in range(len(list1)):\n        if i > 0 and list1[i][0] == list1[i-1][0]:\n            # if the current tuple is part of the previous pair, update the current product\n            current_product *= list1[i][1]\n        else:\n            # if the current tuple is not part of the previous pair, update the current minimum product\n            current_min_product = min(current_min_product, current_product)\n            current_product = 1\n\n    # update the current minimum product with the last tuple\n    current_min_product = min(current_min_product, current_product)\n\n    # return the minimum product\n    return current_min_product",
        "test": "assert min_product_tuple([1, 2, 3, 4, 5]) == (15, 5)",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to be the first element of the list\n    min_val = listval[0]\n\n    # loop through each element of the list\n    for elem in listval:\n        # if the current element is smaller than the minimum value\n        if elem < min_val:\n            # update the minimum value to be the current element\n            min_val = elem\n\n    return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case_word = re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n\n    # Remove any leading or trailing underscores\n    camel_case_word = camel_case_word.lstrip('_').rstrip('_')\n\n    return camel_case_word",
        "test": "assert snake_to_camel('snake_case_string') =='snakeCaseString'",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def remove_odd(l):\n    '''\n    Remove odd numbers from a given list.\n    '''\n    odd_list = [num for num in l if num % 2!= 0]\n    return odd_list",
        "test": "assert remove_odd([]) == []",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < len(list1):\n        return list1[n]\n    else:\n        return None",
        "test": "assert extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 2) == ('c', 3)",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert overlapping([1, 2, 3], [2, 3, 4]) == True",
        "num_ids": 940,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    arr.sort()  # sort array in ascending order\n    max_product = 1  # initialize max_product to 1\n    current_product = 1  # initialize current_product to 1\n    for i in range(len(arr)):\n        current_product = 1  # reset current_product for each iteration\n        for j in range(i+1, len(arr)):\n            current_product = max(current_product*arr[j], arr[j])  # update current_product\n        if current_product > max_product:\n            max_product = current_product  # update max_product if current_product is greater than max_product\n    return max_product",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    # Group all the tuples with the same first element\n    grouped_tuples = {tuple(t[0]): t for t in Input}\n    # Find the first element in each group and return the common one\n    return min(grouped_tuples, key=lambda x: x[0])[0]",
        "test": "assert group_tuples([(1, 2, 3), (4, 5, 6)]) == ()",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def Find_Max(lst):\n    # Initialize max_elem with the first element of the list\n    max_elem = lst[0]\n\n    # Iterate over the remaining elements in the list\n    for elem in lst[1:]:\n        # If the current element is greater than max_elem, update max_elem\n        if elem > max_elem:\n            max_elem = elem\n\n    # Return the max_elem\n    return max_elem",
        "test": "assert Find_Max([1]) == 1",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list of numbers as input and returns the total sum of numbers that are rounded to 2 decimal places.\n    '''\n    total_sum = 0\n    for num in lst:\n        rounded_num = round(num, 2)\n        total_sum += rounded_num\n    return total_sum",
        "test": "assert round_and_sum([1,2,3,4,5]) == 15",
        "num_ids": 1962,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def cube_Sum(n):\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    return cube_sum",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Initialize an empty string to store the concatenated string\n    result = ''\n\n    # Loop through each element of the tuple\n    for element in test_tup:\n        # Check if the element is a string\n        if type(element) == str:\n            # If it is, concatenate it to the result string\n            result += element\n        else:\n            # If it is not a string, raise an exception\n            raise TypeError('All elements of the tuple must be strings.')\n\n    # Return the concatenated string\n    return result",
        "test": "assert concatenate_tuple(('a', 'b', 'c')) == 'abc'",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0  \n    count = 0  \n    for i in range(1, n+1):  \n        sum_of_cubes += (i**3)  \n        count += 1  \n\n    average = sum_of_cubes/count  \n    return average  ",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 837,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def extract_rear(test_tuple):\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]",
        "test": "assert extract_rear( (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\") ) == (\"g\", \"h\")",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 425,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if list1[i] == x:\n                count += 1\n    return count",
        "test": "assert count_element_in_list([], 3) == 0",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Filter odd numbers from a list of numbers.\n    '''\n\n    # Create a new list to hold the even numbers\n    even_nums = []\n\n    # Loop through the numbers in the list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # Add the number to the even_nums list\n            even_nums.append(num)\n\n    # Return the even_nums list\n    return even_nums",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 701,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Get the date parts and format them as strings\n    year, month, day = map(int, dt.split('-'))\n\n    # Construct the date string in the desired format\n    date_str = '{0:02d}-{1:02d}-{2:02d}'.format(day, month, year)\n\n    # Return the modified date string\n    return date_str",
        "test": "assert change_date_format(\"2022-12-31\") == \"31-12-2022\"",
        "num_ids": 1319,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n\n    for gap in range(n//2):\n        for i in range(gap, n):\n            min_index = i\n            for j in range(i+gap, n):\n                if my_list[j] < my_list[min_index]:\n                    min_index = j\n\n            if min_index!= i:\n                my_list[i], my_list[min_index] = my_list[min_index], my_list[i]\n\n    return my_list",
        "test": "assert shell_sort([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1] # passing",
        "num_ids": 1437,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Extract the elementwise and tuples from the two tuples\n    elementwise_and_tuples = (test_tup1 & test_tup2)\n\n    # Print the elementwise and tuples\n    print(\"Elementwise and tuples:\")\n    print(elementwise_and_tuples)",
        "test": "assert and_tuples((1, 2, 3, 4, 5), 4) == (1, 2, 3, 4, 5)",
        "num_ids": 1181,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -b / (2*a)\n    return directrix",
        "test": "assert parabola_directrix(1, 0, 0) == 0",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    if len(set(list1) & set(list2)) > 0:\n        return True\n    else:\n        return False",
        "test": "assert common_element([], []) == False",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    if (base1 + base2) % 2 == 0:\n        return (base1 + base2) // 2\n    else:\n        return (base1 + base2 + height) // 2",
        "test": "assert median_trapezium(0, 0, 0) == 0 # should return 0 for base1 = 0, base2 = 0, height = 0",
        "num_ids": 1076,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number in arr:\n        return True\n    else:\n        return False",
        "test": "assert check_greater([1,2,3,4,5], 1) == True   # True",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba\\b'\n    return re.search(pattern, text)\n\ntext = \"abcde\"\nmatch = text_match_one(text)\nif match:\n    print(\"Found match!\")\nelse:\n    print(\"No match found!\")",
        "test": "assert text_match_one(\"aaabbbcccddddeef\") == \"aaabbbcccdddde\"",
        "num_ids": 2698,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def last_Digit(n):\n    last_digit = n % 10\n    return last_digit",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 409,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def neg_nos(list1):\n    '''\n    Returns a list of negative numbers from a list of integers.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result",
        "test": "assert neg_nos([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_char = 0\n    for char in str1:\n        if char % 2!= 0:\n            odd_char += 1\n    return str1[:-odd_char]",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Counts the number of bidirectional tuple pairs in a list of tuples.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count",
        "test": "assert count_bidirectional([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 25",
        "num_ids": 1832,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_int = 0\n    for i in L:\n        single_int += i\n    return single_int",
        "test": "assert multiple_to_single([1]) == 1",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input and returns a tuple containing the first adverb and its position.\n\n    Args:\n        text (str): The sentence that contains an adverb.\n\n    Returns:\n        tuple: A tuple containing the first adverb and its position in the sentence.\n    '''\n\n    # Define a regex pattern to match an adverb\n    pattern = r'\\b(a|an|the)\\b'\n\n    # Find all matches of the pattern in the sentence\n    matches = re.findall(pattern, text)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # Find the first adverb and its position\n    first_adverb = matches[0]\n    position = text.index(first_adverb)\n\n    # Return the tuple containing the first adverb and its position\n    return (first_adverb, position)",
        "test": "assert find_adverb_position(\"This is the third adverb in the sentence.\") == (52, 77)",
        "num_ids": 1836,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area",
        "test": "assert surfacearea_cube(0) == 0.0",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums) if count > 0 else 0",
        "test": "assert positive_count([1]) == 1/1",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def largest_neg(lst):\n    '''\n    Find the largest negative number in a list.\n    '''\n    max_neg = float('-inf')\n    for num in lst:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n    return max_neg",
        "test": "assert largest_neg([-3, -2, -1, 0]) == -1, \"largest_neg([-3, -2, -1, 0]) should return -1\"",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            test_list[i] = (test_list[i][0], test_list[i][1])\n            del test_list[i][0]\n            del test_list[i][1]\n    return test_list",
        "test": "assert trim_tuple([1, 2, 3, 4], 2) == (1, 2, 3, 4)",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n    test_tup1 (tuple): A tuple of elements to multiply.\n    test_tup2 (tuple): A tuple of elements to multiply with the first element of test_tup1.\n\n    Returns:\n    tuple: A tuple of the elements of test_tup2 multiplied with the corresponding elements of test_tup1.\n    '''\n    return tuple(test_tup2[i]*test_tup1[i] for i in range(len(test_tup2)))",
        "test": "assert index_multiplication((1,2,3), (4,5,6)) == (4, 10, 18)",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # initialize Counter object to store count of elements\n    counter = Counter()\n\n    # loop through the list and increment count of each element in the tuple\n    for item in lst:\n        counter[item] += 1\n\n    # return count of elements in the tuple\n    return counter",
        "test": "assert count_Occurrence((1, 2, 2, 3, 3), [1, 2, 2, 3, 4]) == 0",
        "num_ids": 919,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 916,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def cal_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(l):\n        result.append(str[i])\n    return result",
        "test": "assert extract_string(\"Hello, world!\", [1, 2, 3, 4, 5, 6]) == ['Hello', 'world!']",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "test": "assert remove_whitespaces(\"    hello    world     \") == \"helloworld\"",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount > 0:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(500, 500) == 0 # loss 0, if the actual_cost is greater than or equal to the sale_amount",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return sum(2**i * n // (2**i) for i in range(1, int(math.log2(n)) + 1) if n % (2**i) == 0)\n",
        "test": "assert sumofFactors(20) == 40",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n\n    # define the pattern to match the word 'z'\n    pattern = re.compile(r'\\b(z)(.*?)\\b')\n\n    # find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # if there are any matches, return True\n    if matches:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz(\"apple\") == False",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2: # February\n        if monthnum2 % 4 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11: # April, June, September, or November\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(3) == False",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist) // 2):\n        stringlist[i], stringlist[len(stringlist) - i - 1] = stringlist[len(stringlist) - i - 1], stringlist[i]\n\n    return stringlist",
        "test": "assert reverse_string_list([]) == []",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist",
        "test": "assert Find_Min([1]) == 1",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b",
        "test": "assert rectangle_area(5, 10) == 50, \"Incorrect value for rectangle area.\"",
        "num_ids": 487,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove all uppercase substrings from a given string.\n    '''\n    return re.sub('([A-Z])', '', str1)",
        "test": "assert remove_uppercase('hello world') == 'hello world'",
        "num_ids": 570,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([]) == []",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"abcdefg\") == 6",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def combinations_list(lst):\n    '''\n    Returns all possible combinations of elements in a list.\n\n    Parameters:\n    - lst: a list of any type.\n\n    Returns:\n    A list of all possible combinations of the elements in lst.\n    '''\n\n    # Base case: if the list has only one element, return a list containing that element\n    if len(lst) == 1:\n        return [lst]\n\n    # Recursive case: find all possible combinations of the first element and all elements after that\n    # by iterating over the rest of the list and recursively calling the same function with the rest of the list.\n    # Since all combinations have length 1, we only need to generate all combinations that have length 2 or 3.\n    combs = []\n    for i in range(1, len(lst)):\n        sub_lst = lst[:i] + lst[i:]\n        combs.extend(combinations_list(sub_lst))\n\n    return combs",
        "test": "assert combinations_list([]) == []",
        "num_ids": 2392,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def max_subarray_product(arr):\n    max_product = arr[0]\n    start = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            start = i\n            max_product = max(max_product * arr[i], arr[i])\n        else:\n            max_product = max(max_product * arr[i], 0)\n\n        max_product = max(max_product, 0)\n\n    return max_product\n",
        "test": "assert max_subarray_product([1]) == 1",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n\n    for value in dict:\n        if value!= dict[value]:\n            return False\n\n    return True",
        "test": "assert check_value({\"a\": 1, \"b\": 2, \"c\": 3}, 10) == False",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 999,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_product(arr):\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Define the function as a generator function\n    def pairwise(iterable):\n        '''\n        A generator function that yields the pairwise combinations of elements in the iterable.\n        '''\n        a, b = tee(iterable)\n        next(b, None)\n        return zip(a, b)\n\n    # Convert the iterable to a list\n    test_list = list(test_tup)\n\n    # Apply the pairwise function to the list of tuples\n    for pair in pairwise(test_list):\n        # Print the pair of elements\n        print(pair)\n\n    # Return None to indicate successful execution of the function\n    return None",
        "test": "assert add_pairwise((1, 2, 3, 4)) == (2, 3, 4, 5)",
        "num_ids": 2160,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product",
        "test": "assert find_remainder([1], 5) == 1",
        "num_ids": 848,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list of integers as input and returns True if the list contains consecutive numbers or False otherwise.\n\n    Example usage:\n    >>> check_Consecutive([1, 2, 3, 4, 5])\n    True\n    >>> check_Consecutive([1, 2, 3, 4, 5, 1])\n    False\n    '''\n    for i in range(1, len(l)):\n        if l[i] - l[i-1]!= 1:\n            return False\n    return True",
        "test": "assert check_Consecutive([1,2,3,2,4,5]) is False",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set(test_list1) & set(test_list2)\n    return intersection",
        "test": "assert tuple_intersection([], []) == set()",
        "num_ids": 1027,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def replace_char(str1, ch, new_ch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # Convert both the string and character to lists\n    str1_list = list(str1)\n    ch_list = list(ch)\n    new_ch_list = list(new_ch)\n\n    # Iterate over each character in the string\n    for i in range(len(str1_list)):\n        # If the character is found, replace it with the new character\n        if str1_list[i] == ch_list[0]:\n            str1_list[i] = new_ch_list[0]\n        # If the character is not found, leave it as it is\n        else:\n            continue\n\n    # Convert the list back to a string\n    new_str1 = ''.join(new_ch_list)\n\n    # Return the modified string\n    return new_str1",
        "test": "assert replace_char(\"hello world\", \"l\", \"x\") == \"helo xdlr\"",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 475,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict1.copy()\n    sorted_dict = dict(sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n",
        "test": "assert sort_counter({'apple': 2, 'banana': 3, 'cherry': 1}) == {'apple': 2, 'banana': 3, 'cherry': 1}",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables for the largest and smallest values\n    max_val = nums[0]\n    min_val = nums[0]\n\n    # Iterate over the array and update the maximum and minimum values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n\n    # Calculate and return the sum of the largest and smallest values\n    return max_val + min_val",
        "test": "assert big_sum([-10, 0, 10, -5]) == 0",
        "num_ids": 1031,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"hello world\") == \"hello world\"",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)",
        "test": "assert remove_lowercase(\"aBC\") == \"BC\"",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def first_Digit(n):\n    return n % 10",
        "test": "assert first_Digit(789) == 9",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def Split(lst):\n    # create an empty list to store odd numbers\n    odd_numbers = []\n\n    # loop through the list\n    for num in lst:\n        # check if the number is odd\n        if num % 2 == 1:\n            # add the odd number to the list of odd numbers\n            odd_numbers.append(num)\n\n    # return the list of odd numbers\n    return odd_numbers\n",
        "test": "assert Split([1,2,3,4,5]) == [1, 3, 5]",
        "num_ids": 743,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def difference(n):\n    # initialize variables\n    a = 0\n    b = 0\n    # loop through the first n natural numbers\n    for i in range(n):\n        a += i ** 3   # sum of cubes of the first i natural numbers\n        b += i      # sum of the first i natural numbers\n    # calculate the difference between the sums\n    diff = abs(a - b)\n    return diff",
        "test": "assert difference(30) == 2288672950400",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pairs = 0\n    xor_val = 0\n    for i in range(N):\n        xor_val ^= A[i]\n        if xor_val & 1:\n            odd_pairs += 1\n    return odd_pairs",
        "test": "assert find_Odd_Pair([1,2,3,4,5], 0) == 0",
        "num_ids": 1139,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert string to lowercase to make the case conversion case-insensitive\n    string = string.lower()\n    # Use list comprehension to iterate over each character in the string and toggle its case\n    new_string = ''.join(char.upper() for char in string)\n    return new_string",
        "test": "assert toggle_string(\"hello world\") == \"HELLO WORLD\"",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings to get the per-digit differences\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_diff = [int(i) for i in n1_str]\n    n2_diff = [int(i) for i in n2_str]\n    # Find the sum of the per-digit differences\n    digit_diff = []\n    for i in range(len(n1_diff)):\n        digit_diff.append(n1_diff[i] - n2_diff[i])\n    return sum(digit_diff)\n",
        "test": "assert digit_distance_nums(123, 123) == 0",
        "num_ids": 1104,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def max_sub_array_sum(a, size):\n    # Initialize sum of current subarray to zero\n    curr_sum = 0\n    # Initialize maximum subarray sum to zero\n    max_sum = float('-inf')\n    # Initialize maximum subarray start index to -1\n    max_start_index = -1\n    # Loop through the array\n    for i in range(size):\n        # Update the current sum by adding the current element and updating max_sum and max_start_index if necessary\n        curr_sum = max(a[i], curr_sum + a[i])\n        # If the current sum becomes greater than max_sum, update max_sum and max_start_index\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_start_index = i\n    # Return the max_sum if it exists, otherwise return 0\n    return max_sum if max_sum!= float('-inf') else 0",
        "test": "assert max_sub_array_sum([1, 2, 3, 4, 5], 5) == 15",
        "num_ids": 1395,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Create a set from both tuples to remove duplicates\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the set back to a sorted list and return it\n    return sorted(list(union_set))",
        "test": "assert union_elements([1,2],[3,4]) == [1,2,3,4]",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    current_length = 1\n\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n\n    if current_length > max_length:\n        max_length = current_length\n\n    return max_length\n",
        "test": "assert Find_Max_Length([]), \"Empty list should return 0.\"",
        "num_ids": 993,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Extract all values between quotation marks using regular expression\n    matches = re.findall(r'\"([^\"]*)\"', text)\n    return matches",
        "test": "assert extract_values('I like \"programming\" and I also like \"sports\"!') == ['programming','sports']",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def count_Pairs(arr, n):\n    pairs_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs_count += 1\n    return pairs_count\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(count_Pairs(arr, n)) # Output: 2",
        "test": "assert count_Pairs([1,2,3,4,5],2) == 1, \"count_Pairs([1,2,3,4,5],2) == 1\"",
        "num_ids": 925,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split(\"\") == []",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and reverse it\n    digits_str = str(n)[::-1]\n    # Initialize the sum to 0\n    sum_ = 0\n    # Loop through each digit of the reversed string\n    for digit in digits_str:\n        # Add the digit to the sum\n        sum_ += int(digit)\n    # Return the sum\n    return sum_",
        "test": "assert sum_digits(1234) == 1 + 2 + 3 + 4",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n\n    # Check if the list is sorted or not\n    if list1[0] < list1[1]:\n        return True\n\n    # Traverse through the list and check if the first element is greater than or equal to the next element\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n\n    return True",
        "test": "assert issort_list([5, 3, 2, 1, 4]) == False",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n\n    return [{} for i in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Check if list1 is an empty list\n    if len(list1) == 0:\n        return []\n\n    # Create a new empty list to store the sorted sublists\n    sorted_sublists = []\n\n    # Loop through each sublist in list1\n    for sublist in list1:\n\n        # Check if the sublist is empty\n        if len(sublist) == 0:\n            continue\n\n        # Sort the sublist in ascending order\n        sorted_sublist = sorted(sublist)\n\n        # Append the sorted sublist to the sorted_sublists list\n        sorted_sublists.append(sorted_sublist)\n\n    # Return the sorted_sublists list\n    return sorted_sublists",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 1291,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # initialize two lists to store unique numbers\n    unique_nums = []\n    unique_nums_set = set()\n    # loop through all the lists\n    for num in nums:\n        # if the number is not already in the set\n        if num not in unique_nums_set:\n            # add the number to the set\n            unique_nums_set.add(num)\n            # add the number to the list\n            unique_nums.append(num)\n    # return the unique list\n    return unique_nums",
        "test": "assert two_unique_nums([1, 2, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1063,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for i in range(1, len(unique_list)):\n        product *= unique_list[i]\n    return product",
        "test": "assert unique_product([]) == 1",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2*h",
        "test": "assert surfacearea_cylinder(0, 5) == 0 # positive test case",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n\n    Parameters:\n    A (list): A list to be checked.\n    B (list): The list to be checked against A.\n\n    Returns:\n    True if A is a sublist of B, else False.\n    \"\"\"\n\n    # Check if B is a subset of A\n    if len(B) > len(A):\n        return False\n\n    # If B is a subset of A, check if there are any common elements\n    for i in range(len(B)):\n        if A[i] not in B:\n            return False\n\n    return True",
        "test": "assert is_Sub_Array([1,2,3,4,5], [1,2,3,5]) == False",
        "num_ids": 1161,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Number must be non-negative\")\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + last_Digit_Factorial(n // 10)",
        "test": "assert last_Digit_Factorial(0) == 0, \"The last digit of factorial of 0 is not 0.\"",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "test": "assert interleave_lists([], [], []) == []",
        "num_ids": 1235,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for tup1 in test_tup1:\n        if tup1 not in test_tup2:\n            dissimilar_elements.append(tup1)\n    return dissimilar_elements",
        "test": "assert find_dissimilar((1,2),(1,2)) == []",
        "num_ids": 1008,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each nested tuple\n    for nested_tuple in test_tuple:\n        # Check if the nested tuple contains an even number of elements\n        if len(nested_tuple) % 2 == 0:\n            # Check if the even number of elements is less than 5\n            if len(nested_tuple) < 5:\n                # Remove the uneven elements from the nested tuple\n                result.append(even_fnc(nested_tuple))\n\n    return result",
        "test": "assert even_ele((1, 2, 3, 4, 5, 6), lambda x: x % 2!= 0) == (1, 3, 5, 7)",
        "num_ids": 1446,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2*b*s\n    return area",
        "test": "assert surface_Area(1, 2) == 4",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict([]) == True",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth Catalan number.\n    '''\n    catalan = 0\n    for i in range(1, num+1):\n        catalan += (1/i)*((num-i)**2)\n    return catalan",
        "test": "assert catalan_number(0) == 0",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # create a regular expression pattern to find all the adverbs ending with ly\n    pattern = r'\\bly\\b'\n    # use the re.finditer function to search for the pattern in the text\n    matches = re.finditer(pattern, text)\n    # loop through each match and extract the adverb and its positions\n    adverbs = []\n    for match in matches:\n        # extract the adverb from the match\n        adverb = match.group()\n        # split the adverb at the first space to get the parts\n        parts = adverb.split()\n        # loop through each part and check if it ends with ly\n        for part in parts:\n            if part.endswith('ly'):\n                # create a tuple of the start and end indices of the adverb\n                start, end = match.start(), match.end()\n                # create a tuple of the start and end indices of the part\n                part_start, part_end = match.start(), match.end()\n                # check if the start and end indices of the adverb and the part overlap\n                if start < part_start and end > part_end:\n                    # add the adverb and its positions to the list of adverbs\n                    adverbs.append((adverb, start, end))\n    # return the list of adverbs\n    return adverbs",
        "test": "assert find_adverbs(\"This is a test string without any adverbs.\") == []",
        "num_ids": 1473,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    max_heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -heapq.heappop(heap))\n    return [x for x in max_heap]",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 1104,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def split_Arr(l, n):\n    # split list into n elements\n    first_part = l[:n]\n    # add the first part to the end\n    new_list = first_part + l[n:]\n    return new_list",
        "test": "assert split_Arr([1,2,3,4,5], 5) == ([1,2,3,4,5])",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n\n    # Find the smallest and largest numbers in the list\n    smallest = min(nums)\n    largest = max(nums)\n\n    # Find the difference between the two numbers\n    diff = largest - smallest\n\n    # Return the difference as an integer\n    return int(diff)",
        "test": "assert big_diff([1, 1, 1, 1, 1, 1]) == 0",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        squares.append(i*i)\n    return squares",
        "test": "assert perfect_squares(1, 1) == [1]",
        "num_ids": 1188,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates (x, y) to rectangular coordinates (a, b).\n    '''\n    a = x * x + y * y\n    b = 2 * x * y\n    return a, b",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # create a copy of the list\n    tempList = newList.copy()\n    # swap the first and last elements\n    tempList[0], tempList[-1] = tempList[-1], tempList[0]\n    # return the modified list\n    return tempList",
        "test": "assert swap_List([1]) == [1]",
        "num_ids": 754,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Calculate the number of terms in the binomial coefficient\n    num_terms = n! * (n-k) / (k! * (k-1) * (2*n-k))\n    # Return the sum of the binomial coefficient products\n    return num_terms",
        "test": "assert binomial_Coeff(10,8) == 173568000000",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'\\b0\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b')\n    return pattern.sub('', ip)",
        "test": "assert removezero_ip(\"192.168.1.\") == \"192.168.1.\"",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0:\n        return 0\n\n    return abs(even_count - odd_count)",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def min_Swaps(str1, str2):\n    if len(str1)!= len(str2):\n        return \"The strings cannot be of different lengths\"\n    \n    # Convert the strings to binary\n    bin1 = bin(int(str1, 2))[2:]\n    bin2 = bin(int(str2, 2))[2:]\n    \n    # Count the number of swaps required\n    swaps = 0\n    for i in range(len(bin1)):\n        if bin1[i]!= bin2[i]:\n            swaps += 1\n    \n    return swaps",
        "test": "assert min_Swaps(\"1011101010101011\", \"1011101010101011\") == 0 # no swaps required",
        "num_ids": 3328,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # Find the size in bytes of the given tuple\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n\n    return size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Find kth element from the given two sorted arrays.\n    '''\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Arrays must have equal lengths\")\n    if k > len(arr1) or k < 1:\n        raise ValueError(\"Invalid value for k\")\n\n    for i in range(len(arr1)):\n        if arr1[i] < arr2[i]:\n            return arr2[i]\n        elif arr1[i] > arr2[i]:\n            return arr2[i]\n\n    # If we reach here, kth element not found\n    return None",
        "test": "assert find_kth([3, 5, 1, 2], [4, 6, 8, 9], 2) == 4",
        "num_ids": 1539,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    power = 0\n    # iterate through each digit of the number\n    while number > 0:\n        digit = number % 10\n        power += digit ** 3\n        number //= 10\n    # check if the number is equal to 5^3 + 10^3 + 5^3 = 153\n    if power == 153:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(123456789) == False",
        "num_ids": 942,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # initialize sum and average variables\n    sum = 0\n    count = 0\n\n    # loop through the first n natural numbers\n    for i in range(1, number + 1):\n        # add the current number to the sum\n        sum += i\n\n        # increment the count\n        count += 1\n\n    # calculate the average by dividing the sum by the count\n    average = sum / count\n\n    # return the sum and average\n    return sum, average",
        "test": "assert sum_average(10) == (55.0, 5.5)",
        "num_ids": 861,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a Python function to find the first repeated character in a given string.\n    \"\"\"\n    str1 = str1.lower()  # convert string to lowercase to eliminate duplicates\n    char_count = {}  # dictionary to store character count\n    for char in str1:  # iterate through each character in the string\n        if char in char_count:  # if character has been counted before\n            char_count[char] += 1  # increment its count\n        else:  # if character has not been counted before\n            char_count[char] = 1  # set its count to 1\n    first_char = ''  # initialize the first character to an empty string\n    first_count = 0  # initialize the count of the first character to 0\n    for char, count in char_count.items():  # iterate through each character in the dictionary\n        if count > first_count:  # if count is greater than the count of the first character\n            first_char = char  # set the first character to the current character\n            first_count = count  # set the count of the first character to the current count\n    return first_char  # return the first character\n",
        "test": "assert first_repeated_char(\"abc\") == \"a\"",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize a list to store lucid numbers smaller than or equal to n\n    lucid_numbers = []\n\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is divisible by both 2 and i, it's a lucid number\n        if i % 2 == 0 and i % i == 0:\n            lucid_numbers.append(i)\n\n    # Return the list of lucid numbers\n    return lucid_numbers",
        "test": "assert get_ludic(0) == []",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join([word[::-1] for word in s.split()])",
        "test": "assert reverse_words(\"\") == \"\"",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(10) == False",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree * math.pi / 180",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"Hello, world!\", r\"(?<!hello)(?!world)(?!hello)(?!world)\") == (\"\", 0, 0)",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    bell_numbers = [1, 11, 111, 1111, 11111, 111111]\n    if n < len(bell_numbers):\n        return bell_numbers[n-1]\n    else:\n        return \"Bell number not found.\"",
        "test": "assert bell_Number(10) == 34, \"The output is incorrect. The correct output should be 34.\"",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    # initialize a list to store the remaining elements\n    remaining_elements = []\n\n    # iterate through the list\n    for i in range(len(list1)):\n        # if the current index is not equal to k, add it to the remaining elements list\n        if i!= L:\n            remaining_elements.append(list1[i])\n\n    return remaining_elements",
        "test": "assert remove_kth_element([], 1) == []",
        "num_ids": 1183,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Given a matrix represented as a list of lists, return the max of the N'th column.\n    '''\n    max_val = test_list[0][N-1]  # assume the first row has the N-th column, so assume max_val = first column of first row\n    for row in test_list[1:]:  # iterate over the rest of the rows\n        max_val = max(max_val, row[N-1])  # find the maximum value in the N-th column of each row\n    \n    return max_val",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6]], 2) == 5",
        "num_ids": 1295,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result",
        "test": "assert merge([]) == []",
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # initialize an empty list to hold the cumulative sums\n    cumulative_sum = []\n    # loop over each element in the given list\n    for i in range(len(test_list)):\n        # check if the current element is already present in the cumulative sum\n        if test_list[i] in cumulative_sum:\n            # if it is, update the cumulative sum\n            cumulative_sum[cumulative_sum.index(test_list[i])] += test_list[i]\n        # if the current element is not already present in the cumulative sum, add it to the cumulative sum\n        else:\n            cumulative_sum.append(test_list[i])\n    # return the cumulative sum\n    return cumulative_sum",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average value for each tuple\n    average_list = []\n\n    # Loop through each tuple in the input tuple\n    for tuple in nums:\n        # Initialize an empty list to store the values for the current tuple\n        tuple_values = []\n\n        # Loop through each value in the current tuple\n        for value in tuple:\n            # If the value is a tuple, recursively call the function on it to get the average value\n            if isinstance(value, tuple):\n                tuple_values.append(average_tuple(value))\n            else:\n                # If the value is not a tuple, add it to the list of values for the current tuple\n                tuple_values.append(value)\n\n        # Calculate the average value for the current tuple\n        average_value = sum(tuple_values) / len(tuple_values)\n\n        # Add the average value to the list of average values for the current tuple\n        average_list.append(average_value)\n\n    return average_list",
        "test": "assert average_tuple((1, 2, 3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13)) == [4.0, 5.0, 6.0, 7.0]",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths\")\n        return\n\n    # Perform the element wise modulo\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)",
        "test": "assert tuple_modulo((1,2,3),(1,2,3)) == (0,0,0)",
        "num_ids": 1198,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    jump_length = 0\n    current_position = (0, 0)\n    dx = 0\n    dy = 0\n    \n    # Check if the length is too small to reach the point\n    if steps >= d:\n        return 0\n    \n    # Check for a single jump\n    if steps == 1:\n        jumps += 1\n        jump_length = steps\n        \n    # Check for multiple jumps\n    else:\n        # Loop through each position\n        for _ in range(steps):\n            # Calculate the new position based on current position and dx and dy\n            new_position = (current_position[0] + dx, current_position[1] + dy)\n            # Check if the new position is valid and not off the edge of the plane\n            if 0 <= new_position[0] < 2 and 0 <= new_position[1] < 2 and (dx, dy)!= (0, 0):\n                # Update the variables\n                jumps += 1\n                jump_length += 1\n                current_position = new_position\n                dx, dy = dx + 1, dy + 1\n            else:\n                # If the new position is not valid, reset dx and dy to 0 and try again\n                dx = 0\n                dy = 0\n                \n    # Return the final number of jumps\n    return jumps + jump_length",
        "test": "assert min_Jumps(10, 0) == 0 # Check that the function returns 0 when given a length of 0 and a point of form (0, 0) from the origin.",
        "num_ids": 1369,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def div_list(nums1, nums2):\n    # Create an empty list to store the result\n    result = []\n\n    # Loop through the first list and add each element to the result list\n    for num in nums1:\n        result.append(num)\n\n    # Loop through the second list and subtract each element from the result list\n    for num in nums2:\n        if num in result:\n            result.remove(num)\n\n    # Return the result list\n    return result",
        "test": "assert div_list([1,2,3,4,5],[6,7,8,9,10]) == [1,2,3,4,5]",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(int(char))\n    test_str = ''.join(str(num) for num in numbers)\n    return test_str",
        "test": "assert move_num(\"\") == \"\"",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def largest_subset(a):\n    # Initialize variables\n    n = len(a)\n    size = 1\n    subset = []\n    max_size = 1\n    max_subset = []\n\n    # Iterate through the list of numbers\n    for num in a:\n        # Check if the number can be divided into two pairs\n        if num % 2 == 0:\n            # Update the subset and max_subset\n            if len(subset) < size:\n                subset.append(num)\n                max_subset.append(num)\n            else:\n                # If the size of the subset is greater than the current max size, update both\n                if len(max_subset) < max_size:\n                    max_subset[subset.index(max_subset[0])] = num\n                else:\n                    # If the current size of the subset is greater than the max size of the max_subset, update max_subset\n                    if len(max_subset) < max_size:\n                        max_subset[0] = num\n\n            # Update the size and max_size\n            size += 1\n            max_size = max(size, max_size)\n\n    # Return the size of the largest subset\n    return max_size\n",
        "test": "assert largest_subset([1, 2, 3, 4, 5]) == 3",
        "num_ids": 2072,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function finds the median of two sorted lists of same size.\n    '''\n    # Find the middle index of the two lists\n    mid = (n+1)//2\n\n    # If the size of the two lists is odd, find the median of the first half\n    if n % 2 == 1:\n        return (arr1[mid-1] + arr1[mid]) / 2\n\n    # If the size of the two lists is even, find the median of the two middle elements\n    else:\n        return (arr1[mid-1] + arr1[mid-2]) / 2\n",
        "test": "assert get_median([3, 1, 4, 2, 5], [2, 4, 1, 5, 3], 5) == 3.0",
        "num_ids": 1429,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result",
        "test": "assert nth_nums([1,2,3,4,5], 2) == [1, 4, 9, 16, 25]",
        "num_ids": 1090,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    # Convert the string to uppercase\n    string = string.upper()\n    # Return True if the string is uppercase, False otherwise\n    return string == string.upper()",
        "test": "assert is_upper(\"HELLO\") == True",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a Python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    \n    # find the semi-circle\n    area = math.pi * r * r\n    \n    # find the largest triangle that can be inscribed in the semicircle\n    max_area = 0\n    for side in [r, r * math.sqrt(3)/2, r * math.sqrt(3) / 2]:\n        area = math.pi * side * side\n        if area > max_area:\n            max_area = area\n            \n    # return the largest triangle area\n    return max_area",
        "test": "assert triangle_area(5) == 78.53981633974483, \"The area of the largest triangle with sides of length 5 and radius 5 is incorrect. It should be 78.53981633974483.\"",
        "num_ids": 1478,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return \"Invalid input! Start index should be less than or equal to end index.\"\n    \n    diff = end - start + 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i + 1\n    \n    return \"All elements are present in the array.\"",
        "test": "assert find_First_Missing([1,2,3,4,5], 3) == 4",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n    else:\n        sub[0] = ele\n    adj = []\n    for i in range(len(sub)-1):\n        if sub[i+1][0]!= sub[i][0]:\n            adj.append((sub[i], sub[i+1]))\n    return adj",
        "test": "assert adjac(1) == []",
        "num_ids": 1422,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Initialize a variable to store the modified text\n    modified_text = ''\n\n    # Loop through each character in the given string\n    for char in text:\n        # If the character is a whitespace, replace it with an underscore\n        if char.isspace():\n            modified_text += '_'\n        # If the character is not a whitespace, leave it as it is\n        else:\n            modified_text += char\n\n    return modified_text",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate through the given list and move all zeroes to the end of the result list\n    for num in num_list:\n        if num!= 0:\n            result.append(num)\n\n    # Return the result list\n    return result",
        "test": "assert move_zero([]) == []",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # Initialize variables\n    xor_sum = 0\n    \n    # Iterate through the list of numbers\n    for i in range(n):\n        # Iterate through the list of numbers again to find the xor of all pairs\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    \n    # Return the xor sum of all pairs of numbers in the list\n    return xor_sum",
        "test": "assert pair_xor_Sum([1,2,3,4], 3) == 6",
        "num_ids": 960,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given list using the heapq library.\n\n    :param iterable: The list to sort.\n    :return: The sorted list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for i in range(len(heap))]",
        "test": "assert heap_sort([5, 3, 2, 1, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 1013,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the difference between actual cost and sale amount\n    diff = actual_cost - sale_amount\n\n    # If the difference is greater than 0, it means there is no profit and no loss\n    if diff > 0:\n        return False\n    \n    # If the difference is equal to 0, it means there is no profit but there is a loss\n    elif diff == 0:\n        return True\n    \n    # If the difference is less than 0, it means there is a profit but no loss\n    else:\n        return True",
        "test": "assert noprofit_noloss(350,250) is False # the given amount has no loss but no profit",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Calculate wind speed in m/s\n    wind_speed = v*3.6\n\n    # Calculate temperature in Kelvin\n    temp_c = (t - 32) * 5/9\n\n    # Calculate wind chill index\n    wind_chill_index = round(wind_speed + temp_c)\n\n    # Round the wind chill index to the nearest integer\n    return wind_chill_index",
        "test": "assert wind_chill(30, 30) == 11",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the sum of the lengths of the names after removing those that start with a lowercase letter\n    sum_lengths = []\n    # Loop through each name in the sample list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, add the length of the name to the list of lengths\n            sum_lengths.append(len(name))\n    # Return the sum of the lengths of the names after removing those that start with a lowercase letter\n    return sum(sum_lengths)",
        "test": "assert sample_nam([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == 6",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    # remove all the parentheses and what is inbetween them\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items",
        "test": "assert remove_parenthesis(\"\") == \"\"",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 1\n    while True:\n        count += 1\n        if count > n:\n            break\n        num = (1 + (count ** 2)) ** 0.5\n        if abs(num - int(num)) < 0.001:\n            return num",
        "test": "assert is_nonagonal(6) == 22",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Find all non-alphanumeric characters except at the start and end of the word\n    text = re.sub(r'[^a-zA-Z\\d]', '', text)\n    # Find all words in the text, excluding the start and end of the word\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Check if 'z' exists at the start and end of the word\n    if 'z' in words[0] or 'z' in words[-1]:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle(\"Hello, world! This is the middle of a string.\") == False # asserted that 'z' is not present at the start or end of the word",
        "num_ids": 1087,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Convert the input array into a list\n    input_list = list(input)\n\n    # Reverse the list starting from kth index\n    reversed_list = input_list[::-1][k:]\n\n    # Return the reversed list\n    return reversed_list\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 0) == [5,4,3,2,1]",
        "num_ids": 1513,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())",
        "test": "assert add_dict_to_tuple((\"apple\", \"banana\", \"cherry\"), {\"fruit\": \"apple\"}) == (\"apple\", \"banana\", \"cherry\", \"apple\")",
        "num_ids": 1025,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    max_path_cost = cost[0][0]\n    max_path = [0, 0]\n\n    # Iterate through each cell of the matrix\n    for i in range(1, len(cost)):\n        for j in range(1, len(cost[i])):\n            # Calculate the cost of the current path\n            new_cost = cost[i-1][j-1] + cost[i][j]\n            # If the new cost is greater than the current maximum path cost, update the maximum path cost and the maximum path\n            if new_cost > max_path_cost:\n                max_path_cost = new_cost\n                max_path = [i-1, j-1]\n\n    # Return the maximum path cost and the corresponding maximum path\n    return max_path_cost, max_path",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 1.0",
        "num_ids": 3102,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def filter_data(students, h, w):\n    result = []\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result.append((name, height, weight))\n    return result",
        "test": "assert filter_data({\"Alice\":(170,85), \"Bob\":(160,90), \"Charlie\":(150,80), \"David\":(140,85)},160,200) == {\"Charlie\": (150,80), \"David\": (140,85)}",
        "num_ids": 1920,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = {}\n    for i in range(len(nums1)):\n        if nums1[i] in count:\n            count[nums1[i]] += 1\n        else:\n            count[nums1[i]] = 1\n    \n    for j in range(len(nums2)):\n        if nums2[j] in count:\n            count[nums2[j]] += 1\n        else:\n            count[nums2[j]] = 1\n    \n    same_pairs = []\n    for k, v in count.items():\n        if v == 2:\n            same_pairs.append(i)\n            same_pairs.append(j)\n    \n    return same_pairs",
        "test": "assert count_same_pair([1], [2]) == []",
        "num_ids": 1620,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    elif power % 2 == 0:\n        first_digit = power_base_sum(base, power // 2)\n        return first_digit * first_digit\n    else:\n        return base * power_base_sum(base, power - 1)",
        "test": "assert power_base_sum(5, 1) == 5",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Extracts values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\"[^\"]*\"', text1)",
        "test": "assert extract_quotation(\"\") == []",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def multiply_elements(test_tup):\n    N = len(test_tup)\n    product_tup = []\n\n    for i in range(N):\n        product_tup.append(test_tup[i] * (i+1))\n\n    return product_tup",
        "test": "assert multiply_elements((1,2,3,4,5,6,7,8,9)) == (1,4,9,16,25,36,49,64,81)",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "test": "assert sum_list([], []) == []",
        "num_ids": 913,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Removes consecutive duplicates of a given list.\n    '''\n    unique_nums = sorted(list(set(nums)))\n    return unique_nums",
        "test": "assert consecutive_duplicates([1, 2, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 918,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    A = math.pi * r * r * h / 3\n    return A",
        "test": "assert lateralsurface_cone(4,5) == 2.0413, \"lateral surface area of a cone with radius 4 and height 5 is incorrect.\"",
        "num_ids": 1733,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)",
        "test": "assert replace_specialchar(\"1,2,3,4,5\") == \"1:2:3:4:5\"",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the leftmost index i in A such that A[i] < x\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    \n    # If x is not found in A, return -1\n    if i == len(A):\n        return -1\n    \n    # Initialize a variable j to i\n    j = i\n    \n    # Traverse the array A[j:] to find the first occurrence of x\n    while j < len(A) and A[j] == x:\n        j += 1\n    \n    # Return the index of the first occurrence of x in A[i:j]\n    return j - 1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2 # find_first_occurrence returns the index of the first occurrence of a given number in a sorted array",
        "num_ids": 1242,
        "indeed": false
    },
    {
        "number": 734,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Create a list to store all possible sublists\n    sublists = []\n    for i in range(n):\n        sublists.append([])\n        for j in range(i, n):\n            sublists[i].append(arr[j])\n\n    # Calculate the sum of products of all sublists\n    sublist_sums = []\n    for i in range(n):\n        sublist_sums.append(sum(sublists[i]))\n\n    return sum(sublist_sums)",
        "test": "assert sum_Of_Subarray_Prod([1]) == 1",
        "num_ids": 1197,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def set_middle_bits(n):\n    # set first bit to 1\n    n = (n << 1) | 1\n    \n    # set last bit to 0\n    n = (n >> 1) | ((n & 1) << 31)\n    \n    # clear first bit and last bit\n    n = (n & ~(1 << 31))\n    \n    # set the other bits to 0\n    n = (n & ~(1 << 31))\n    \n    return n",
        "test": "assert set_middle_bits(0) == 0",
        "num_ids": 1468,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i] == x:\n        return i\n    else:\n        return i - 1",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 5) == 2",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if re.match(regex, string): # checking if the string matches the regex pattern\n        if string[0].lower() in vowels: # checking if the string starts with a vowel\n            return True\n    return False",
        "test": "assert check_str('python') == False",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(10) == 3628800",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # defining the array of smallest triangular numbers\n    arr = [1]\n    for i in range(2, int(math.sqrt(n))+1):\n        arr.append(i*arr[-1])\n    # finding the index of smallest triangular number with n digits\n    index = arr.index(n)\n    return index",
        "test": "assert find_Index(1) == 0, \"The index of the smallest triangular number with 1 digit is not 0.\"",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n\n    # Convert the tuple to a dictionary\n    dictionary = dict(zip(test_tup, test_tup[1:]))\n    return dictionary",
        "test": "assert tuple_to_dict((\"apple\", \"banana\", \"cherry\")) == {\"apple\": \"banana\", \"banana\": \"cherry\"}",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # initialize an empty list to store the count of each character\n    char_count = {}\n    # loop through each character in the string\n    for char in s:\n        # if the character already exists in the dictionary, add 1 to its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    # loop through the dictionary and check if all the characters have the same count\n    for key in char_count:\n        if char_count[key]!= len(s):\n            return False\n    # if all characters have the same count, return True\n    return True",
        "test": "assert all_Characters_Same(\"hello world\") == False, \"The function is not returning False for the given string\"",
        "num_ids": 951,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (0.5) * side ** 2",
        "test": "assert area_tetrahedron(1) == 0.5, \"The area of a tetrahedron with side length 1 is not 0.5\"",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    left = list[:m]\n    right = list[m:]\n    return right + left",
        "test": "assert rotate_right([1], 0) == [1]",
        "num_ids": 1224,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3, 4, 5)) == False",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Function to check if a number is divisible by every digit it contains\n    def is_divisible(num):\n        for digit in str(num):\n            if digit not in '0123456789':\n                return False\n        return True\n\n    # Find all the numbers within the given range that are divisible by every digit it contains\n    result = [num for num in range(startnum, endnum + 1) if is_divisible(num)]\n\n    return result\n",
        "test": "assert divisible_by_digits(10, 50) # should return [10, 12, 15, 17, 19]",
        "num_ids": 1371,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import math\n\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2",
        "test": "assert sector_area(3, 0) is not None, \"The function should return None if the angle is larger than 360 degrees.\"",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    l = [[0] * (p+1) for _ in range(m+1)]\n\n    # Fill the table l[][]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                l[i][j] = l[i-1][j-1] + 1\n            else:\n                l[i][j] = max(l[i-1][j], l[i][j-1])\n\n    # Find the length of the longest common subsequence\n    LCS = \"\"\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            LCS = X[i-1] + LCS\n            i -= 1\n            j -= 1\n        elif l[i-1][j] > l[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return LCS",
        "test": "assert lcs_of_three(\"abcdefg\", \"hfgde\", \"jklmno\") == \"fg\"",
        "num_ids": 1764,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase and remove all non-letter characters\n    str1 = re.sub('[^a-zA-Z\\s]', '', str1).lower()\n    # Split the string into a list of words\n    words = str1.split()\n    # Reverse the list to put spaces between words in the correct order\n    words.reverse()\n    # Join the words back into a string with spaces between them\n    result =''.join(words)\n    return result",
        "test": "assert capital_words_spaces(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\"",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n\n    Args:\n        nums_str: A list of strings containing numbers.\n\n    Returns:\n        A sorted list of strings containing numeric values.\n    '''\n    # Convert the list of strings to a list of numbers.\n    nums = [int(num.strip()) for num in nums_str]\n\n    # Sort the list of numbers using the built-in sort() function.\n    sorted_nums = sorted(nums)\n\n    # Convert the sorted list of numbers back to a list of strings.\n    sorted_str = [str(num) for num in sorted_nums]\n\n    return sorted_str",
        "test": "assert sort_numeric_strings([\"5\", \"3\", \"2\", \"4\", \"1\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\"]",
        "num_ids": 1450,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Use the tuple packing syntax to add the elements of the tuple to the list\n    test_list.extend(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([], (1, 2, 3)) == [1, 2, 3]",
        "num_ids": 708,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0 or arr[i] > arr[i-1]:\n        return True\n    else:\n        return False",
        "test": "assert check_min_heap_helper([5, 3, 8, 1, 7], 1) == False",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def jacobsthal_num(n):\n    # base case\n    if n == 0:\n        return 0\n    \n    # formula for nth Jacobsthal number\n    jacobsthal_num = 1\n    jacobsthal_num *= n\n    jacobsthal_num += n\n    jacobsthal_num -= 1\n    \n    # return the result\n    return jacobsthal_num",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def min_k(test_list, K):\n    min_list = []\n    for i in test_list:\n        if len(min_list) < K:\n            min_list.append(i)\n    return min_list",
        "test": "assert min_k([], 2) == []",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 1399,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers[1:])",
        "test": "assert second_smallest([-1, 0, 2, 4, 6]) == 0",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'[ab]{1,}'\n    matches = re.findall(pattern, text)\n    if len(matches) == 1:\n        return matches[0]\n    else:\n        return None",
        "test": "assert text_match_zero_one(\"ababa\") # True",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] + test_list[j] == test_list[j] + test_list[i]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the count of each list within the original list\n    count_dict = {}\n    # Iterate through the lists in the original list\n    for lst in list1:\n        # If the list is already present in the dictionary, increment its count\n        if lst in count_dict:\n            count_dict[lst] += 1\n        # If the list is not present in the dictionary, add it with a count of 1\n        else:\n            count_dict[lst] = 1\n    # Return the dictionary with the count of each list in the original list\n    return count_dict",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1583,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    if num[-1] == '.' and '.' in num[:-1]:\n        # check if there is only one '.' in the string, which means it's a decimal\n        return True\n    else:\n        # otherwise, check if there is only one digit after the decimal point\n        if num[-1].isdigit() and len(num) > 1:\n            # if there's only one digit after the decimal point, it's a decimal\n            return True\n        else:\n            # otherwise, the string is not a decimal number\n            return False",
        "test": "assert is_decimal(\"123.\") == False, \"123. should not be a decimal number with a precision of 2.\"",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Check if all elements in the list have frequency 1\n    if all(freq_dict[num] == 1 for num in arr):\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 3, 4, 5, 5]) == False",
        "num_ids": 964,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        for i in range(1, 13):\n            if monthnum == i:\n                return days_in_month[i-1] > 0\n        return False",
        "test": "assert check_monthnumber_number(13) == False",
        "num_ids": 947,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    \"\"\"\n    # Initialize min_diff as the first element of the array\n    min_diff = arr[0]\n\n    # Loop through all the elements of the array\n    for i in range(1, n):\n        # If the difference between the current element and the previous element is smaller than the current min_diff,\n        # update min_diff\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n\n    # Return the minimum difference found\n    return min_diff",
        "test": "assert find_min_diff([1, 1, 1], 2) == 0",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "import math\n\ndef is_polite(n):\n    # Calculate the nth polite number\n    return round(math.factorial(n) / math.factorial(2)) - 1",
        "test": "assert is_polite(2) == 0, \"2 should be not polite.\"",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def pair_wise(lst):\n    '''\n    Return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 758,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n\n    for i in range(len(arr) - 1):\n        if arr[i] + arr[i+1] == sum:\n            count += 1\n\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 9) == 1 # Test case 4",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff",
        "test": "assert Diff([],[]) == []",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    sum = 0\n    for i in range(1, n+1) : \n        for j in range(1, n+1) : \n            for k in range(1, n+1) : \n                for l in range(1, n+1) : \n                    if i**4 + j**4 + k**4 + l**4 == n : \n                        sum += i**4 + j**4 + k**4 + l**4\n    \n    return sum",
        "test": "assert odd_num_sum(4) == 4",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0 or stack[-1]!= '(':\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "test": "assert check_expression(\"()\") == True",
        "num_ids": 1008,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # split the string into words\n    words = test_str.split()\n\n    # create an empty string to store the unique words\n    unique_words = \"\"\n\n    # iterate over each word in the list of words\n    for word in words:\n\n        # check if the length of the word is less than or equal to k\n        if len(word) <= K:\n\n            # add the word to the unique_words string\n            unique_words += word + \" \"\n\n    # remove the trailing space and return the unique_words string\n    return unique_words.rstrip()",
        "test": "assert remove_length(\"Hello, World!\", 7) == \"Hello, World!\"",
        "num_ids": 1714,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        return start_index, end_index\n    else:\n        return None\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npattern = \"o\"\nstart_index, end_index = occurance_substring(text, pattern)\nif start_index is not None and end_index is not None:\n    print(\"The substrings within the pattern '{}' are '{}' and '{}'\".format(pattern, text[start_index:end_index], text[start_index:end_index+len(pattern)]))\nelse:\n    print(\"No match found.\")",
        "test": "assert occurance_substring(\"The quick brown fox jumps over the lazy dog\", \"quick\") == (7, 18)",
        "num_ids": 975,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums)):\n        if nums[i] % 2 == 1 and i % 2 == 1:\n            return False\n    return True",
        "test": "assert odd_position([1,3,5,7,9]) == False, \"The odd position function returns False for the input [1,3,5,7,9]\"",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    i = 0\n\n    while i < len(test_str):\n        if test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n        i += 1\n\n    return count",
        "test": "assert count_vowels(\"xy\") == 0",
        "num_ids": 1049,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the unique elements in the list\n    unique_elements = set(arr)\n\n    # Initialize the sum variable to 0\n    sum_ = 0\n\n    # Loop through the unique elements and add them to the sum\n    for element in unique_elements:\n        sum_ += element\n\n    # Return the sum\n    return sum_",
        "test": "assert find_sum([]) == 0",
        "num_ids": 2041,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist = []\n    for element in list1:\n        if element not in sublist:\n            sublist.append(element)\n    return sublist\n",
        "test": "assert pack_consecutive_duplicates([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1632,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    sublists = {}\n    for item in list1:\n        if item not in sublists:\n            sublists[item] = 1\n        else:\n            sublists[item] += 1\n    return sublists",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 2238,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a set to store the combinations\n    comb_set = set()\n\n    # iterate through the tuples in the list\n    for tup in test_list:\n        # check if the current tuple has at least two elements\n        if len(tup) < 2:\n            continue\n\n        # check if the sum of the current tuple is greater than all the previous sums\n        if tup[0] + tup[1] > sum(tup_list):\n            continue\n\n        # check if the current tuple has already been added to the set\n        if tup in comb_set:\n            continue\n\n        # add the current tuple to the set\n        comb_set.add(tup)\n\n    # create a list of tuples from the set\n    comb_list = list(comb_set)\n\n    return comb_list",
        "test": "assert find_combinations([]) == []",
        "num_ids": 2351,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0 \n    i = 1 \n    while i <= n: \n        if n % i == 0: \n            count += 1 \n            if count == 2: \n                return True \n            elif count == 3: \n                return False \n        i += 1 \n    return True if count == 0 else False \n",
        "test": "assert count_divisors(100) == 1",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Initialize start and end indices of the current subarray\n        start = i\n        end = i\n        \n        # Iterate through the remaining elements in the array\n        while end < len(arr) and arr[end] % 2 == 1:\n            end += 1\n        \n        # Update the sum of the current subarray\n        total_sum += arr[start:end+1]\n    \n    return total_sum",
        "test": "assert odd_length_sum([1,2,3,4,5]) == 15  # sum of all odd length subarrays of [1,2,3,4,5]",
        "num_ids": 1107,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r < 0 or r > 255 or g < 0 or g > 255 or b < 0 or b > 255:\n        raise ValueError(\"Invalid color value.\")\n    cmin = min(r, g, b)\n    cmax = max(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    s = 0\n    v = delta\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    elif cmax == b:\n        h = (r - g) / delta + 4\n    h = round(h * 60)\n    if h < 0:\n        h += 360\n    s = delta / max(cmax, 1)\n    v = delta / max(cmax, v)\n    return h, s, v",
        "test": "assert rgb_to_hsv(255, 0, 0) == (0, 1, 1)",
        "num_ids": 2842,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n\n    # create a new list to store even numbers and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n\n    # find the product of even and odd numbers and return the result\n    result = 1\n    for num in even_list:\n        result *= num\n    for num in odd_list:\n        result *= num\n\n    return result",
        "test": "assert mul_even_odd([1,2,3,4,5]) == 120",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert a tuple string to an integer tuple.\n\n    Input:\n    test_str: str\n        A string containing a tuple separated by commas.\n\n    Output:\n    int_tuple: tuple\n        A tuple containing the integers from the string.\n    '''\n\n    # Split the string by commas and convert each element to an integer\n    int_tuple = tuple(map(int, test_str.split(',')))\n\n    # Return the integer tuple\n    return int_tuple",
        "test": "assert tuple_str_int(\"123\") == (123,)",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low",
        "test": "assert right_insertion([], 5) == 0",
        "num_ids": 1088,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'[aeiou]{3,}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three(\"aaaab\") == True",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def new_tuple(test_list, test_str):\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Convert the list of words to a tuple and return it\n    return tuple(words)",
        "test": "assert new_tuple([], '') == ()",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count += 1\n    if count == 0:\n        return False\n    else:\n        return True",
        "test": "assert even_position([2, 4, 6, 8, 10]) == True",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.append(item[0])\n            remove_nested(item[1:])\n        else:\n            result.append(item)\n    return tuple(result)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for lst in input_list:\n        count += 1\n    return count",
        "test": "assert count_list([[1, 2, 3], [4, 5, 6]]) == 2",
        "num_ids": 723,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last(arr, x):\n    '''\n    Find the last position of an element in a sorted array.\n    '''\n    last_index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_index = i\n            break\n    return last_index",
        "test": "assert last([-1,-3,-5,-6,-7], -5) == 2",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_starta_endb(\"Hello, world!\") == False",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n, 0, -2): \n        if i % 2!= 0: \n            sum += i \n    return sum ",
        "test": "assert sum_odd(-2) == 0",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total",
        "test": "assert _sum([]) == 0, \"Empty array should have a sum of 0\"",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # check if d is less than 32\n    if d > 32:\n        print(\"Error: d cannot be greater than 32\")\n        return None\n    # initialize result to zero\n    result = 0\n    # loop through d bits\n    for i in range(d):\n        # get the current bit of the number\n        bit = n & 1\n        # shift the bits one position to the right\n        n = n >> 1\n        # set the bit at the beginning of the result\n        result = bit << 31\n    return result",
        "test": "assert left_rotate(32,7) == 0",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)",
        "test": "assert remove_all_spaces('') == ''",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 2\n    else:\n        count += 3\n    return count\n\nprint(test_three_equal(3, 2, 3)) # Output: 4",
        "test": "assert test_three_equal(1,1,1) == 1",
        "num_ids": 778,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    rotations = 0\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            rotations += 1\n    return rotations",
        "test": "assert count_rotation([1, 1, 1, 1, 1]) == 0 # pass",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        square = n**0.5\n        if int(square) == square:\n            return True\n        else:\n            return False",
        "test": "assert is_perfect_square(10) == False",
        "num_ids": 761,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "test": "assert is_product_even([2, 3, 4, 5]) == True",
        "num_ids": 857,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def max_sum_list(lists):\n    # create a list to store the elements of the maximum sum\n    max_sum_list = []\n\n    # iterate through the lists and find the sum of their elements\n    for i in range(len(lists)):\n        sum_list = sum(lists[i])\n\n        # if the sum is greater than the current maximum sum, update the maximum sum\n        if sum_list > max_sum_list[-1][0]:\n            max_sum_list[-1] = (sum_list, lists[i])\n        # if the sum is equal to the current maximum sum, add the current list to the end of the list\n        elif sum_list == max_sum_list[-1][0]:\n            max_sum_list[-1] = (sum_list, lists[i])\n\n    # return the list of lists whose sum of elements is the highest\n    return max_sum_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 15, 21]",
        "num_ids": 1408,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables\n    max_length = 0\n    start_index = 0\n    \n    # loop through each character in the string\n    for index, char in enumerate(test_str):\n        # if the current character is uppercase\n        if char.isupper():\n            # update the maximum length and start index\n            max_length = max(max_length, index - start_index + 1)\n            start_index = index\n    \n    # return the maximum length of the run\n    return max_length",
        "test": "assert max_run_uppercase(\"AbCdEfGhIjKlLmNoPqRsTuVwXyZ\") == 3",
        "num_ids": 977,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1]) == 1, \"The first odd number in the list [1] is not 1.\"",
        "num_ids": 887,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in test_tup[0:i] or test_tup[i]!= test_tup[i+1]:\n            return False\n    return True",
        "test": "assert check_K((1,2,3), 4) == False",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # check if each element in the first tuple is smaller than its corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    \n    return True",
        "test": "assert check_smaller((1,2,3), (3,2,1)) == False",
        "num_ids": 1004,
        "indeed": true
    }
]