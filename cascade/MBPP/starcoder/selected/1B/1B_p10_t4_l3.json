[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2 and item not in shared_elements:\n            shared_elements.append(item)\n    return shared_elements\n",
        "test": "assert similar_elements([1, 2, 3], [2, 4, 6]) == [2]",
        "num_ids": 1888,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(3) == True",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Create a max heap\n    hq.heapify(nums)\n\n    # Get the n largest elements from the heap\n    return hq.nlargest(n, nums)",
        "test": "assert heap_queue_largest([],0) == []",
        "num_ids": 2140,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_Power_Of_Two(x):\n    # check if x is a positive integer\n    if not isinstance(x, int) or x <= 0:\n        return False\n\n    # check if x is a power of 2\n    while x % 2 == 0:\n        x //= 2\n\n    return True",
        "test": "assert is_Power_Of_Two(2) is True",
        "num_ids": 1437,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{3,}\\b'\n    words = re.findall(pattern, text)\n    return words\n\ntext = \"This is a sample text which contains words of different lengths. Each word should be at least 4 characters long.\"\nprint(find_char_long(text))",
        "test": "assert find_char_long('') == []",
        "num_ids": 1637,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "test": "assert square_nums([1,2,3,4,5]) == [1,4,9,16,25]",
        "num_ids": 1673,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_Rotations(str):\n    # convert the string to a list of characters\n    char_list = list(str)\n\n    # initialize the minimum rotation count to 1\n    min_rotations = 1\n\n    # loop through the characters in the list\n    for i in range(len(char_list)):\n        # loop through the remaining characters\n        for j in range(i+1, len(char_list)):\n            # check if the current character is the same as the next character\n            if char_list[i] == char_list[j]:\n                # check if the current rotation count is greater than the minimum rotation count\n                if len(set(char_list[:i]+char_list[i+1:j+1])) < min_rotations:\n                    min_rotations = len(set(char_list[:i]+char_list[i+1:j+1]))\n\n    return min_rotations",
        "test": "assert find_Rotations('abc') == 1",
        "num_ids": 1819,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def remove_Occ(s, ch):\n    i = 0\n    while i < len(s) - 1:\n        if s[i] == ch and s[i+1] == ch:\n            s = s[:i] + s[i+2:]\n            i -= 1\n        else:\n            i += 1\n    return s",
        "test": "assert remove_Occ('hello world', 'x') == 'hello world'",
        "num_ids": 1468,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] > M[j][i]:\n                M[i], M[j] = M[j], M[i]\n    return M",
        "test": "assert sort_matrix([[-2, -1, -3], [2, 1, 4], [3, 4, 2]]) == [[-2, -1, -3], [2, 1, 4], [3, 4, 2]]",
        "num_ids": 4193,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def find_Volume(l,b,h):\n    volume = l*b*h\n    return volume\n\nl = 5\nb = 10\nh = 7\n\nprint(\"The volume of the triangular prism is:\", find_Volume(l,b,h))",
        "test": "assert find_Volume(5,4,3) == 60",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define a regular expression pattern to match lowercase letters followed by an underscore followed by another lowercase letter\n    pattern = re.compile(r'(?<![a-zA-Z])(?=[a-z])(?=[A-Z])')\n    \n    # Check if the input string matches the pattern\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"HELLO_WORLD\") == False",
        "num_ids": 1673,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a * 4\n    return perimeter",
        "test": "assert square_perimeter(0) == 0",
        "num_ids": 843,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def str_to_list(string): \n    # initialize empty list \n    result = [] \n\n    # iterate through the string character by character \n    for char in string: \n        # check if the character is present in the second string \n        if char not in string: \n            # if it is not present, add the character to the result list \n            result.append(char) \n\n    # return the result list \n    return result \n",
        "test": "assert str_to_list(\"\") == []",
        "num_ids": 3011,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) <= 1:\n        return False\n    \n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n        \n    return False",
        "test": "assert test_duplicate([]) == False, \"The function should return False for an empty array.\"",
        "num_ids": 2058,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x < 0: \n        return False\n    elif x == 0 or x == 1: \n        return True\n    elif x % 2 == 1: \n        return False\n    else: \n        return True",
        "test": "assert is_woodall(123456789) == False",
        "num_ids": 1256,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    \n    # Convert the reversed string to an integer\n    reversed_int = int(reversed_num)\n    \n    # If the reversed integer is equal to the original number, it's one less than twice its reverse\n    if reversed_int == num:\n        return True\n    else:\n        return False",
        "test": "assert rev(12) == False, \"12 should not be one less than twice its reverse.\"",
        "num_ids": 1490,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, arr[i])\n    return max_num",
        "test": "assert find_Max_Num([1]) == 1",
        "num_ids": 1698,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # Check for negative numbers\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n\n    # Check for positive numbers\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n\n    # Check for zero\n    if x == 0 and y == 0:\n        return False\n    elif x == 0 and y!= 0:\n        return True\n    elif x!= 0 and y == 0:\n        return True",
        "test": "assert opposite_Signs(10,-20) == True",
        "num_ids": 1861,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1 or n == 2: \n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        num = 1\n        while num * num <= n:\n            if n % num == 0:\n                return False\n            num += 1\n        return True",
        "test": "assert is_octagonal(20) == False",
        "num_ids": 1936,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings[s[i:j]] += 1\n    for i in range(len(s)+1):\n        if substrings[s[i-1:i]] == 1:\n            count += 1\n    return count",
        "test": "assert count_Substrings('') == 0",
        "num_ids": 2112,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def smallest_num(xs):\n    '''\n    Given a list of numbers, return the smallest number in the list.\n    '''\n    if not xs:  # base case: empty list\n        return None\n    \n    smallest = xs[0]  # initialize smallest number to the first number\n    \n    for num in xs:  # compare each number with the current smallest\n        if num < smallest:\n            smallest = num\n    \n    return smallest",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1334,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # initialize max difference to 0\n    max_diff = 0\n\n    # iterate through each pair of elements in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # calculate the difference between the two elements in the list\n            diff = abs(test_list[i]-test_list[j])\n\n            # update max difference if difference is greater than current max difference\n            if diff > max_diff:\n                max_diff = diff\n\n    # return the maximum difference\n    return max_diff",
        "test": "assert max_difference([]) == 0",
        "num_ids": 2754,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks([(10, \"Math\"), (9, \"English\"), (8, \"History\"), (10, \"Science\"), (10, \"English\"), (8, \"History\"), (9, \"History\"), (10, \"Math\")]) == [(9, \"Math\"), (10, \"Math\"), (8, \"English\"), (9, \"History\"), (10, \"Science\"), (10, \"History\"), (8, \"History\")]",
        "num_ids": 1921,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Recursively flatten a list and sum its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n    \n    # Flatten the list and sum its elements\n    result = 0\n    for item in data_list:\n        if isinstance(item, list):\n            result += recursive_list_sum(item)\n        else:\n            result += item\n    \n    return result",
        "test": "assert recursive_list_sum([1]) == 1, \"Incorrect recursive_list_sum([1])\"",
        "num_ids": 1868,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def pos_count(lst):\n    '''\n    Counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1,2,3,4,5]) == 5",
        "num_ids": 1114,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def bell_number(n):\n    # Function to find the number of ways to partition a set of Bell numbers.\n    # This is done recursively by partitioning the set in half and recursively\n    # counting the number of ways to partition each half.\n    #\n    # Parameters:\n    # n (int): the size of the Bell numbers set to partition\n    #\n    # Returns:\n    # int: the number of ways to partition the Bell numbers set\n    \n    # Base case: if n is 0 or 1, the partitioning is a simple way to partition\n    # the set.\n    if n == 0 or n == 1:\n        return 1\n    \n    # Recursive case: divide the set in half and count the number of ways to partition each half\n    # using the bell_number function.\n    partition1 = bell_number(n // 2)\n    partition2 = bell_number(n - n // 2)\n    \n    # Return the sum of the two partitions.\n    return partition1 + partition2",
        "test": "assert bell_number(1) == 1",
        "num_ids": 1771,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    elif A[0] > A[1]:\n        return True\n    else:\n        for i in range(1, n-1):\n            if A[i] > A[i-1] and A[i] > A[i+1]:\n                return False\n            elif A[i] < A[i-1] and A[i] < A[i+1]:\n                return False\n        return True",
        "test": "assert is_Monotonic([1, 2, 4, 5, 3]) == False",
        "num_ids": 2002,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(s)):\n        if s[i]!= l[i]:\n            return False\n    \n    return True",
        "test": "assert is_sublist([\"a\"], \"a\") == True, \"The first list is one element and the second sublist is itself\"",
        "num_ids": 1839,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Create a dictionary to store the count of tuples\n    count_dict = {}\n\n    # Iterate through each tuple in the input list\n    for i in range(len(Input)):\n\n        # Check if the length of the current tuple is already in the dictionary\n        if Input[i] in count_dict:\n            # If yes, increment the count of tuples of that length\n            count_dict[Input[i]].append(i)\n        else:\n            # If no, add the length of the current tuple as a key in the dictionary\n            count_dict[Input[i]] = [i]\n\n    # Check if all the tuples have equal length\n    for length in count_dict.values():\n        if len(length)!= len(set(length)):\n            return False\n\n    return True\n",
        "test": "assert find_equal_tuple(()) == True",
        "num_ids": 1892,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n\n    # create a helper function to swap two elements in a list\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # initialize the first element as the maximum element\n    max_elem = nums[0]\n\n    # loop through the remaining elements\n    for i in range(1, len(nums)):\n        # find the smallest element in the unsorted portion of the list\n        min_elem = nums[i]\n\n        # loop through the sorted portion of the list\n        for j in range(i):\n            # if the current element is smaller than the smallest element,\n            # swap it with the smallest element\n            if nums[j] > min_elem:\n                swap(nums, i, j)\n\n        # update the maximum element\n        max_elem = min_elem\n\n    # return the sorted list\n    return nums",
        "test": "assert comb_sort([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
        "num_ids": 2517,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0: \n        return False\n    if n == 1 or n == 2: \n        return True\n    count = 0\n    for i in range(1, int(n**0.5)+1): \n        if i * i > n: \n            break\n        count += 1\n    if count % 2 == 0: \n        return True\n    else: \n        return False",
        "test": "assert dif_Square(10) == False",
        "num_ids": 1933,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True",
        "test": "assert is_samepatterns([\"red\", \"green\", \"blue\"], [\"yellow\", \"green\", \"blue\"]) == False",
        "num_ids": 3072,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if len(t) % K == 0:\n            result.append(t)\n    return result\n",
        "test": "assert find_tuples([], 3) == []",
        "num_ids": 2368,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(12) is False",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def word_len(s):\n    return len(s) % 2 == 1",
        "test": "assert word_len(\"abc\") == 1, \"The length of the word is not 1\"",
        "num_ids": 1185,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def tetrahedral_number(n):\n    '''\n    Find the nth tetrahedral number.\n\n    The tetrahedral number is a 3x3 unit square with a given base triangle number, \n    which is equal to the product of the base triangle numbers.\n\n    The base triangle numbers are the integers 1, 6, 15, 24, 35, 46,...\n\n    The tetrahedral number is the product of the numbers 2, 4, and 6.\n\n    For example, the tetrahedral number of 5 is 5 * 6 * 15 = 140.\n    '''\n    base_triangle_numbers = [1, 6, 15, 24, 35, 46]\n    tetrahedral_number = 1\n    for i in range(1, n):\n        tetrahedral_number *= base_triangle_numbers[i-1]\n    return tetrahedral_number",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 2224,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi * r ** 3",
        "test": "assert volume_sphere(0) == 0",
        "num_ids": 1753,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "def get_Char(strr):\n    ascii_str = \"\"\n    for char in strr:\n        ascii_str += chr(ord(char) + 1)\n    return ascii_str",
        "test": "assert get_Char('0123456789') == 55",
        "num_ids": 1522,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def sequence(n):\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]",
        "test": "assert sequence(1) == 1",
        "num_ids": 1609,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere using the formula:\n\n    area = \u03c0r^2\n    '''\n    area = math.pi * r ** 2\n    return area",
        "test": "assert surfacearea_sphere(0) == 0.0",
        "num_ids": 1616,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def centered_hexagonal_number(n):\n    # Base case\n    if n == 1:\n        return 1\n\n    # Calculate the centered hexagonal number using the formula\n    hexagonal_number = (1 + (10 * n) // 5) ** 2\n\n    return hexagonal_number",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 3783,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict",
        "test": "assert merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 2728,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = collections.Counter(lst)\n    return freq_dict\n\nlst = [1, 2, 3, 2, 4, 5, 6, 6, 7, 8, 9, 8, 9]\nfreq_dict = freq_count(lst)\nprint(freq_dict)",
        "test": "assert freq_count([]) == {}",
        "num_ids": 1622,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_difference = float('inf')\n    closest_num = -1\n    for i in range(1, N + 1):\n        difference = abs(i - N)\n        if difference < smallest_difference:\n            closest_num = i\n            smallest_difference = difference\n    return closest_num\n",
        "test": "assert closest_num(2) == 2",
        "num_ids": 1131,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "def len_log(list1):\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)\n",
        "test": "assert len_log(['apple', 'banana', 'cherry', 'date', 'dog', 'eagle']) == 6",
        "num_ids": 1241,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    if len(str1) < len(sub_str):\n        return False\n\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i + len(sub_str)] == sub_str:\n            return True\n    return False",
        "test": "assert find_substring(\"abcdefg\", \"xyz\") == False",
        "num_ids": 1465,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n == 1 or n == 0:\n        return True\n\n    if n % 2 == 1:\n        return False\n\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n\n    return True",
        "test": "assert is_undulating(123) == False, \"123 is not undulating\"",
        "num_ids": 1647,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2, 3) == 8",
        "num_ids": 1024,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))",
        "test": "assert index_minimum([(1, 5), (3, 7), (2, 4), (8, 6)]) == (2, 4)",
        "num_ids": 2471,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Find the length of the smallest list in a list of lists.\n\n    The function takes a list of lists as input and returns the length of the smallest list in the list.\n\n    Example:\n        lst = [[1, 2, 3], [4, 5], [6, 7, 8]]\n        result = Find_Min_Length(lst)\n        print(result) # Output: 3\n    '''\n\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n\n    return min_len",
        "test": "assert Find_Min_Length([[1]]) == 1",
        "num_ids": 1925,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(3) == 2",
        "num_ids": 1295,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def frequency_lists(lst):\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element in the flattened list\n    for item in lst:\n        # If the element is already in the dictionary, increment its count\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[item] = 1\n    \n    # Return the frequency dictionary\n    return freq_dict",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 2890,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 0\n    for num in numbers:\n        total += num\n    if len(numbers) > 0:\n        return total / len(numbers)\n    else:\n        return 0",
        "test": "assert multiply_num([1]) == 1",
        "num_ids": 1527,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        binary_num = ''\n        while n > 0:\n            binary_num = str(n & 1) + binary_num\n            n >>= 1\n        return binary_num",
        "test": "assert decimal_to_binary(15) == \"1111\"",
        "num_ids": 2719,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        '''\n        Return the next smallest palindrome of n.\n        '''\n        if not is_palindrome(n):\n            return n\n        while not is_palindrome(n):\n            n = n + 1\n            if n > sys.maxsize:\n                return sys.maxsize\n        return n\n\n    return next_palindrome(num)",
        "test": "assert next_smallest_palindrome(999999) == 999999",
        "num_ids": 2435,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        print(\"Invalid input. Please enter a positive integer k greater than or equal to 1.\")\n        return\n\n    for i in range(1, len(arr) + 1):\n        if i == k:\n            return arr[i - 1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 4) == 4",
        "num_ids": 1882,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def snake_to_camel(word):\n    '''\n    Function to convert a snake case string to camel case string.\n    '''\n\n    # split the string by underscore\n    words = word.split('_')\n\n    # initialize an empty string to store the camel case string\n    camel_case = ''\n\n    # iterate over the words and append the first letter of each word to the camel case string\n    for i in range(len(words)):\n        camel_case += words[i][0] + words[i][1:]\n\n    # return the camel case string\n    return camel_case\n",
        "test": "assert snake_to_camel(\"camelCase\") == \"camelCase\"",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1: \n        return n if n > m else m\n    if n % 2 == 0 and m % 2 == 0: \n        if n >= m: \n            return 2 * eulerian_num(n//2, m)\n        else: \n            return 2 * eulerian_num(n//2, m//2) + 1\n    else: \n        if n > m: \n            return 2 * eulerian_num(n, m//2)\n        else: \n            return 2 * eulerian_num(n, m//2) + 1\n",
        "test": "assert eulerian_num(1, 2) == 2  # a1 = 2",
        "num_ids": 2342,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Initialize the empty list to store the sorted sublists\n    sorted_sublists = []\n\n    # Iterate over each sublist in the input list\n    for sublist in input_list:\n        # Initialize an empty list to store the sublist elements\n        temp_list = []\n\n        # Iterate over each element in the sublist and append it to the temp_list\n        for element in sublist:\n            temp_list.append(element)\n\n        # Append the temp_list to the sorted_sublists list\n        sorted_sublists.append(temp_list)\n\n    # Return the sorted_sublists list\n    return sorted_sublists",
        "test": "assert sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]) == [['a', 'b', 'c'], ['d', 'e', 'f']]",
        "num_ids": 2277,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "test": "assert count([]) == 0",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "test": "assert add_lists([1,2,3], []) == [1,2,3]",
        "num_ids": 1554,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    merged_list = []\n    # Merge the three sorted lists in ascending order\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(num1.pop(0))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(num2.pop(0))\n        else:\n            merged_list.append(num3.pop(0))\n\n    # Add the remaining elements of the three lists\n    merged_list += num1\n    merged_list += num2\n    merged_list += num3\n\n    # Return the merged sorted list\n    return merged_list\n",
        "test": "assert merge_sorted_list([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]",
        "num_ids": 3687,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the string to a binary number\n    num = bin(int(s,2))[2:]\n    \n    # Rotate the binary string n times\n    rotated = ''\n    for i in range(n):\n        rotated += num[0]\n        num = num[1:]\n    \n    # Find the number of numbers with odd value\n    count = 0\n    for num in rotated:\n        if int(num) % 2!= 0:\n            count += 1\n    \n    return count",
        "test": "assert odd_Equivalent(\"1010\", 3) == 2, \"odd_Equivalent should return the correct number of numbers with an odd value when rotating the binary string 1010 times.\"",
        "num_ids": 2330,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Initialize empty lists to store common elements\n    common = []\n    unique = []\n    \n    # Iterate over each element in the nested list\n    for item in nestedlist:\n        # If the item is a list, recursively call the function on it\n        if isinstance(item, list):\n            nested_list = item\n            common += common_in_nested_lists(nested_list)\n        # If the item is not a list, add it to the common list if it is not already there\n        else:\n            if item not in common:\n                common.append(item)\n                \n    # Return the common elements as a list\n    return common",
        "test": "assert common_in_nested_lists([]) == []",
        "num_ids": 2407,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def check_integer(text):\n    '''\n    Check if a string represents an integer or not.\n    '''\n    try:\n        int_value = int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 1060,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def empty_dit(lst):\n    for i in lst:\n        if type(i) is not dict:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 941,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)",
        "test": "assert tuple_to_int((1,)) == 1",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def list_to_float(test_list):\n    result = []\n    for item in test_list:\n        for subitem in item:\n            result.append(float(subitem))\n    return result",
        "test": "assert list_to_float([]) == []",
        "num_ids": 2405,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def string_to_list(string): \n    '''\n    Convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list('') == []",
        "num_ids": 975,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    result = None\n    for i in range(len(arr)):\n        if arr[i] not in arr[:i]:\n            continue\n        if not result or arr[i]!= result:\n            count = 1\n            result = arr[i]\n    if count == 0:\n        return \"Element not found\"\n    else:\n        return result",
        "test": "assert search([-1, -1, -1, -1, -1]) == -1",
        "num_ids": 2240,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 390,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the maximum absolute product between two numbers in pairs of tuples.\n    '''\n\n    # Sort the list of tuples based on the first element of each tuple\n    list1.sort(key=lambda x: x[0])\n\n    # Initialize a maximum absolute product variable and the minimum absolute product variable\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    # Iterate through the sorted list of tuples and calculate the maximum and minimum absolute product\n    for i in range(len(list1)):\n        if i < len(list1) - 1:\n            for j in range(i+1, len(list1)):\n                if list1[i][1] * list1[j][1] > max_product:\n                    max_product = list1[i][1] * list1[j][1]\n                if list1[i][1] * list1[j][1] < min_product:\n                    min_product = list1[i][1] * list1[j][1]\n\n    # Return the maximum absolute product\n    return max_product\n",
        "test": "assert max_product_tuple([(-5, -3), (1, 2), (3, -2)]) == 6",
        "num_ids": 3102,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize a list to store the sum of all amicable numbers\n    amicable_numbers_sum = []\n\n    # Loop through all integers from 1 to the limit\n    for i in range(1, limit+1):\n        # Check if the integer is a perfect square\n        if i ** 0.5 ** 2 == int(i ** 0.5):\n            # If it is, add it to the list of amicable numbers and continue\n            amicable_numbers_sum.append(i)\n            continue\n\n        # Loop through all integers from i+1 to the limit\n        for j in range(i+1, limit+1):\n            # Check if the integers add up to the current integer\n            if j > i:\n                if int(j ** 0.5) ** 2 == int(i ** 0.5):\n                    # If they do, add them to the list of amicable numbers\n                    amicable_numbers_sum.append(i+j)\n\n    # Return the sum of all amicable numbers\n    return sum(amicable_numbers_sum)",
        "test": "assert amicable_numbers_sum(1) == 1",
        "num_ids": 2691,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    # convert complex numbers to real and imaginary parts\n    a_real = abs(a)\n    a_imag = a.imag\n    b_real = abs(b)\n    b_imag = b.imag\n    \n    # calculate the angle between the two complex numbers\n    angle = cmath.phase(a * b)\n    \n    # handle cases where the real or imaginary parts are negative\n    if a_real < 0:\n        angle += cmath.pi\n    elif a_imag < 0:\n        angle -= cmath.pi\n    \n    return angle",
        "test": "assert angle_complex(1,1) == 0",
        "num_ids": 1664,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables\n    max_diff = 0\n    start = 0\n    end = 0\n\n    # Iterate through each substring of the binary string\n    while end < len(string): \n        # Count the number of 0s in the substring\n        count_zeros = 0\n        for i in range(start, end+1): \n            if string[i] == '0': \n                count_zeros += 1\n\n        # Count the number of 1s in the substring\n        count_ones = 0\n        for i in range(start, end+1): \n            if string[i] == '1': \n                count_ones += 1\n\n        # Calculate the difference between the count of 0s and 1s\n        diff = abs(count_zeros - count_ones)\n\n        # Update the maximum difference and start and end indices\n        max_diff = max(max_diff, diff)\n        if count_zeros > count_ones: \n            start = end + 1\n        else: \n            end = end + 1\n\n    # Return the maximum difference\n    return max_diff",
        "test": "assert find_length('11000010') == 2",
        "num_ids": 3628,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return sum(b, a % b)",
        "test": "assert sum(1000, 1000) == 1000, \"The sum of 1000 and 1000 should be 1000.\"",
        "num_ids": 1948,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def long_words(n, str):\n    words = str.split()\n    filtered_words = [word for word in words if len(word) <= n]\n    return filtered_words",
        "test": "assert long_words(5, \"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 3111,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    if rows == cols:\n        return True\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= i+j+1:\n                return False\n    return True",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]) == False",
        "num_ids": 4131,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Finds the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    \n    return max_item",
        "test": "assert max_occurrences([1, 2, 3, 2]) == 2, \"max_occurrences([1, 2, 3, 2]) should return 2\"",
        "num_ids": 3455,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    return str1[::-1][::-1]",
        "test": "assert reverse_vowels('') == ''",
        "num_ids": 1361,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string(1) == \"1\"",
        "num_ids": 960,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def sum_negativenum(nums):\n    '''\n    Calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total",
        "test": "assert sum_negativenum([]) == 0",
        "num_ids": 1591,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 1:\n        return hexagonal_num(n-1) + hexagonal_num(n-2)\n    else:\n        return (2*hexagonal_num(n-1) + hexagonal_num(n-3))//2\n\nprint(hexagonal_num(1)) # Output: 1\nprint(hexagonal_num(2)) # Output: 2\nprint(hexagonal_num(3)) # Output: 4\nprint(hexagonal_num(4)) # Output: 8\nprint(hexagonal_num(5)) # Output: 14",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 3062,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    total = 0\n    for num in nums:\n        if num:\n            count += 1\n            total += 1\n    return (count / total) if count > 0 else 0",
        "test": "assert zero_count([0, 0, 0, 0, 0, 0]) == 0.0",
        "num_ids": 2727,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 28,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Base Case: If n is 0, then no number can be represented as sum of powers of 2\n    if n == 0:\n        return False\n\n    # Base Case: If n is 1, then the number can be represented as sum of powers of 2\n    if n == 1:\n        return True\n\n    # Check if n is power of 2\n    if n & (n - 1) == 0: \n        # If n is a power of 2, then check if n is a sum of powers of 2\n        # (i.e., n is divisible by 2 without any remainder)\n        for i in range(32, n, 2):\n            if n % i == 0:\n                return False\n\n        # If n is a sum of powers of 2, then it can be represented as sum of powers of 2\n        return True\n\n    # If n is not a power of 2, then it cannot be represented as sum of powers of 2\n    return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 2128,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference",
        "test": "assert circle_circumference(0) == 0, \"circle_circumference(0) should return 0\"",
        "num_ids": 1488,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def extract_singly(test_list):\n    '''\n    This function takes a list of lists as input and returns a single set of numbers.\n    '''\n    return set(flatten(test_list))\n\ndef flatten(lst):\n    '''\n    This function takes a list of lists as input and returns a single set of flattened numbers.\n    '''\n    return [item for sublist in lst for item in sublist]",
        "test": "assert extract_singly([]) == set()",
        "num_ids": 2034,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 3322,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    # count the number of items in each list\n    count1 = len(list1)\n    count2 = len(list2)\n    count3 = len(list3)\n\n    # count the number of occurrences of items in each list\n    count1_occurrence = {}\n    count2_occurrence = {}\n    count3_occurrence = {}\n\n    # iterate through each list and count occurrences of each item\n    for item in list1:\n        if item in count1_occurrence:\n            count1_occurrence[item] += 1\n        else:\n            count1_occurrence[item] = 1\n\n    for item in list2:\n        if item in count2_occurrence:\n            count2_occurrence[item] += 1\n        else:\n            count2_occurrence[item] = 1\n\n    for item in list3:\n        if item in count3_occurrence:\n            count3_occurrence[item] += 1\n        else:\n            count3_occurrence[item] = 1\n\n    # count the number of identical items in each position of list3\n    count3_samepos = {}\n\n    # iterate through each position and count number of identical items in each position\n    for i in range(len(list3)):\n        for j in range(len(list3)):\n            if i!= j:\n                if list3[i] == list3[j]:\n                    if list3[i] in count3_samepos:\n                        count3_samepos[list3[i]] += 1\n                    else:\n                        count3_samepos[list3[i]] = 1\n\n    # count the total number of identical items in the list3\n    total_samepos = sum(count3_samepos.values())\n\n    # return the count of identical items in the same position of list3\n    return total_samepos",
        "test": "assert count_samepair([1,2,3], [4,5,6], [1,2,3]) == 0",
        "num_ids": 2609,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        count += 1\n    return count",
        "test": "assert find_lists(()) == 0",
        "num_ids": 1456,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = abs(arr[0]) - abs(arr[1])\n    for i in range(2, len(arr)):\n        diff = abs(arr[i]) - abs(arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([5, 5, 5]) == 0",
        "num_ids": 2135,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def find_solution(a, b, n):\n    x = None\n    y = None\n    for i in range(n):\n        x = -a * i - b\n        y = -a * i + b\n        if x*x + y*y == n:\n            return (x, y)\n    return None",
        "test": "assert find_solution(3, 2, 1) == None",
        "num_ids": 2550,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # Remove all elements from list1 that are present in list2\n    list1 = [x for x in list1 if x not in list2]\n\n    return list1",
        "test": "assert remove_elements([], []) == []",
        "num_ids": 1922,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize sum to 0\n    total_sum = 0\n    # initialize i to 0\n    i = 0\n    # calculate sum for each i\n    while i * 2 <= n:\n        # calculate sum for current i\n        current_sum = (n - i * 2) * (i * 2 + 1) // 2\n        # add current sum to total sum\n        total_sum += current_sum\n        # increment i\n        i += 1\n    # return total sum\n    return total_sum",
        "test": "assert sum_series(0) == 0 # sum of (i=0) = 0",
        "num_ids": 1961,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s * l / 2\n    return area",
        "test": "assert area_polygon(3, 4) == 6.0",
        "num_ids": 1421,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import math\n\ndef div_sum(n):\n    divisors = []\n    for i in range(1, n+1):\n        for j in range(1, int(math.sqrt(n))+1):\n            if n % i == 0 and n % j == 0:\n                divisors.append(i)\n                divisors.append(j)\n    if len(divisors) == 2:\n        return True\n    else:\n        return False",
        "test": "assert div_sum(25) == False, \"The sum of the divisors of 25 and 5 is equal to 25.\"",
        "num_ids": 1796,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 210,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Initialize a counter variable to keep track of the count of characters that appear at the same position in the string as in the English alphabet\n    count = 0\n\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase to make the algorithm case insensitive\n        char = char.lower()\n\n        # Loop through each character in the string to check if it appears at the same position\n        for i in range(len(str1)):\n            if char == str1[i]:\n                # If the character appears at the same position, increment the count\n                count += 1\n\n                # Stop the loop after the first occurrence of the character\n                break\n\n    # Return the count of characters that occur at the same position in the string as in the English alphabet\n    return count",
        "test": "assert count_char_position('') == 0",
        "num_ids": 2165,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] & 1 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 4, 6, 8]) == 0",
        "num_ids": 1929,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def next_power_of_2(n):\n    # Initialize a variable to store the next power of 2\n    next_power = 1\n\n    # Loop until we find a power of 2 greater than or equal to n\n    while next_power < n:\n        next_power <<= 1\n\n    return next_power",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 1773,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count",
        "test": "assert frequency([1, 2, 3, 4, 5], 1) == 1, \"Frequency should return 1 for the given input\"",
        "num_ids": 1819,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m > len(list1) - 1 or n < 0 or n > len(list1) - 1:\n        print(\"Invalid indices\")\n        return 0\n    else:\n        return sum(list1[m:n+1])",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 2147,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the perimeter of the pentagon\n    perimeter = 2 * a + a + a + a\n    # return the perimeter\n    return perimeter",
        "test": "assert perimeter_pentagon(4) == 20",
        "num_ids": 1506,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s' or char == 'd' or char == 't' or char == 'r':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"hello\") == 0, \"The function should return 0 for the string 'hello'.\"",
        "num_ids": 1190,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        for t in test_tuple:\n            if type(t)!= type(test_tuple[0]):\n                return False\n        return True\n    except:\n        return False",
        "test": "assert check_type((1, 2, 3)) # False",
        "num_ids": 1583,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    if x in count and count[x] > n//2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1, 2, 3, 4], 4, 3) == False # False",
        "num_ids": 2204,
        "indeed": true
    },
    {
        "number": 224,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n % 2\n        n //= 2\n    return count",
        "test": "assert count_Set_Bits(255) == 8, \"The expected output is 8, but it is: \" + str(count_Set_Bits(255))",
        "num_ids": 1380,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([char for i, char in enumerate(str) if i%2!=0])\n",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 1512,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def min_of_three(a,b,c):\n    return min(a,min(b,c))\n\nprint(min_of_three(5,2,1)) # Output: 1",
        "test": "assert min_of_three(5,4,3) == 3",
        "num_ids": 1190,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Find the difference between the maximum value and minimum value of the given range\n    diff = r - l\n\n    # Check if all bits are set in the given range\n    if diff % n == 0:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,1,10) == False",
        "num_ids": 2781,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize two pointers i and j\n    i = 0\n    j = 0\n\n    # Move i and j until they meet at the middle of the array\n    while i < n and j < n:\n\n        # If the first element of the first half of the array is negative, move i to the right\n        if arr[i] < 0:\n            i += 1\n        # If the second element of the first half of the array is negative, move j to the right\n        elif arr[j] < 0:\n            j += 1\n        # If the first element of the first half of the array is positive, move i to the left\n        elif arr[i] > 0:\n            i += 1\n        # If the second element of the first half of the array is positive, move j to the left\n        elif arr[j] > 0:\n            j += 1\n        # If the first and second elements of the first half of the array are the same, do nothing and move both i and j to the right\n        else:\n            i += 1\n            j += 1\n\n    # If i is still less than n, then the first half of the array is completely negative\n    if i < n:\n        # If the first element of the first half of the array is negative, add it at the beginning of the array\n        if arr[i] < 0:\n            arr.insert(0, -arr[i])\n            i += 1\n        # If the second element of the first half of the array is negative, do nothing and move both i and j to the right\n        elif arr[j] < 0:\n            i += 1\n            j += 1\n\n    # Return the modified array\n    return arr\n",
        "test": "assert re_arrange_array([-1, -2, -3], 3) == [-1, -2, -3]",
        "num_ids": 3986,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = \"\"\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            new_string += char\n        else:\n            new_string += str1[i]\n    return new_string",
        "test": "assert replace_blank(\"\", \" \") == \"\"",
        "num_ids": 1265,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    heapq.heapify(list1) #to heapify the list\n    return heapq.nlargest(n, list1) #returns the n largest items from the list",
        "test": "assert larg_nnum([1,2,3,4,5], 0) == []",
        "num_ids": 2132,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    '''\n\n    # Find the semi-perimeter of the cylinder\n    s = r + h\n\n    # Calculate the lateral surface area of the cylinder\n    L = 2 * (r * h)\n\n    # Return the lateral surface area\n    return L",
        "test": "assert lateralsuface_cylinder(2,3) == 12.0",
        "num_ids": 1733,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "test": "assert volume_cube(0) == 0",
        "num_ids": 1824,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 1 == 0:\n            n = n >> 1\n        else:\n            n = n - 1\n        count += 1\n    return count",
        "test": "assert even_bit_set_number(0) == 0, \"Incorrect even_bit_set_number(0).\"",
        "num_ids": 1686,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "from collections import Counter\n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return counts",
        "test": "assert check_occurences([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (4, 'e'), (1, 'a'), (2, 'b'), (1, 'c')]) == {1: 4, 2: 2, 3: 1}",
        "num_ids": 1916,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def number_of_substrings(str):\n    # Initialize a variable to keep track of the number of non-empty substrings\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each character in the remaining string from the current index to the end of the string\n        for j in range(i+1, len(str)):\n            # Check if the substring from i to j is a non-empty substring\n            if str[i:j]!= '':\n                # Increment the count variable\n                count += 1\n    \n    # Return the count of non-empty substrings\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 1472,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Check if m and n are positive integers\n    if m <= 0 or n <= 0:\n        return 0\n    # Initialize variables\n    count = 0\n    prev_num = 1\n    # Calculate the number of sequences\n    for i in range(n, m + 1):\n        count += i - prev_num\n        prev_num = i\n    return count",
        "test": "assert get_total_number_of_sequences(10,0) == 0, \"Test Case 4\"",
        "num_ids": 2595,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if list2 is empty\n    if not list2:\n        # Return the original list if it is empty\n        return list1\n    \n    # Check if the last element of list1 is the same as the first element of list2\n    if list1[-1] == list2[0]:\n        # Replace the last element with the elements of list2\n        return list1[:-1] + list2\n    else:\n        # Return the original list if the last element of list1 is different from the first element of list2\n        return list1",
        "test": "assert replace_list([],[]) == []",
        "num_ids": 1478,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac('hello world') == 11",
        "num_ids": 1143,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    sqrtN = int(math.sqrt(N))\n    if sqrtN * sqrtN!= N:\n        sqrtN += 1\n\n    while N % sqrtN!= 0:\n        sqrtN -= 1\n\n    return sqrtN * sqrtN\n",
        "test": "assert next_Perfect_Square(1) == 1",
        "num_ids": 2167,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum = float('-inf')\n    curr_sum = 0\n    bitonic = []\n\n    for i in range(n - 1, -1, -1):\n        if i > 0:\n            bitonic.append(arr[i])\n\n        curr_sum += arr[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 2802,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a given number using the Babylonian method.\n    The algorithm is:\n    1. Set the initial guess to the number itself.\n    2. Loop until the difference between the initial guess and the square root is less than 0.001:\n       a. Compute the difference between the initial guess and the square root.\n       b. Compute the new guess by subtracting the difference from the initial guess.\n       c. Check if the difference is less than 0.001. If it is, return the new guess.\n    '''\n\n    guess = number\n    while abs(guess ** 2 - number) >= 0.001:\n        guess = guess - (guess ** 2 - number) / guess\n\n    return guess",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 2055,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n\n    Args:\n    str (str): The given string.\n\n    Returns:\n    int: The length of the longest palindromic subsequence in the string.\n    \"\"\"\n\n    # Initialize the longest palindromic subsequence length and start from 0\n    max_length = 0\n    start_index = 0\n\n    # Loop through all possible starting indices\n    for i in range(len(str)):\n\n        # Initialize a set to keep track of all substrings with the same length\n        substrings = set()\n\n        # Check all possible ending indices from i to i\n        for j in range(i, len(str)):\n\n            # If the substring is palindrome and its length is greater than the current maximum, update the start index and length\n            if str[i:j+1] == str[i:j+1][::-1] and len(str[i:j+1]) > max_length:\n                max_length = len(str[i:j+1])\n                start_index = i\n\n        # Add the current substring to the set\n        substrings.add(str[i])\n\n    # Return the length of the longest palindromic subsequence\n    return max_length",
        "test": "assert lps(\"abac\") == 3",
        "num_ids": 2964,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 1595,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Return a list of elements that appear only once in both arrays.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    # Loop through each element in the first array\n    for num in array_nums1:\n        # Loop through each element in the second array and check if they are the same\n        for other_num in array_nums2:\n            if num == other_num:\n                # If they are the same, add the element to the common list\n                common_elements.append(num)\n                # Break out of the inner loop\n                break\n    # Return the common elements list\n    return common_elements",
        "test": "assert intersection_array([1,2,3],[3,4,5]),([3,4,5])",
        "num_ids": 2025,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert count_X((\"apple\", \"banana\", \"orange\"), \"apple\") == 1, \"The count of 'apple' is not 1\"",
        "num_ids": 1615,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(item)\n    result.insert(0, element)\n    return result",
        "test": "assert insert_element([1], 5) == [5,1]",
        "num_ids": 1829,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    magnitude = abs(numbers)\n    angle = cmath.phase(numbers)\n    return (magnitude, angle)",
        "test": "assert convert(3.14159) == (3.14159, 0)",
        "num_ids": 1998,
        "indeed": true
    },
    {
        "number": 253,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def count_integer(list1):\n    '''\n    Returns the number of integer elements in a given list.\n    '''\n    return sum(1 for element in list1 if isinstance(element, int))",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1246,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations of the elements of the list and return a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, n+1):\n        for j in range(i):\n            combs = combinations_with_replacement(l, i)\n            result.extend(tuple(combs))\n    return result",
        "test": "assert combinations_colors([], 0) == []",
        "num_ids": 3737,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(1) == 0",
        "num_ids": 1731,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 937,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    \n    if len(max_tup) == len(test_tup1):\n        return max_tup\n    \n    max_element = max(max_tup)\n    min_element = min(test_tup1[max_tup.index(max_element)], test_tup2[max_tup.index(max_element)])\n    max_index = max_tup.index(max_element)\n    \n    if len(test_tup1) == len(test_tup2):\n        max_index = max_tup.index(max_element)\n        min_index = max(test_tup1.index(max_element), test_tup2.index(max_element))\n    else:\n        max_index = max(test_tup1.index(max_element), test_tup2.index(max_element))\n        min_index = max_tup.index(max_element)\n    \n    return max_index, min_index",
        "test": "assert maximize_elements((1, 1), (1, 1)) == (1, 1) # Test 4",
        "num_ids": 2319,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables\n    is_prime = True\n    current_number = 2\n    count = 0\n    \n    # Loop until the nth newman\u2013shanks\u2013williams prime number is found\n    while is_prime and count < n:\n        is_prime = False\n        for i in range(current_number, int(n**0.5)+1):\n            if current_number % i == 0:\n                is_prime = True\n                break\n        current_number += 1\n        count += 1\n    \n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return current_number",
        "test": "assert newman_prime(2) == 3, \"newman_prime(2) should return 3\"",
        "num_ids": 2533,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Initialize a new list to store the results\n    result_list = []\n\n    # Loop through each element in the first tuple and perform the division operation for each element in the second tuple\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n\n    # Return the new list containing the results\n    return result_list",
        "test": "assert division_elements((2, 5), (3, 4)) == ((2, 1), (1, 2))",
        "num_ids": 2912,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 1) == ([1], [2, 3, 4, 5])",
        "num_ids": 2629,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 7\n    if h_age > 3:\n        years = 4\n    elif h_age > 1:\n        years = 2\n    elif h_age <= 1:\n        years = 0\n    return years",
        "test": "assert dog_age(0) == 0",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def list_split(S, step):\n    '''\n    Split a list S into a list of size n with step size step and return a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([], 1) == []",
        "num_ids": 2082,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * l",
        "test": "assert lateralsurface_cube(0) == 0",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a Python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each odd natural number from 1 to n\n    for i in range(1, n+1, 2):\n        # Calculate the square of the current odd natural number and add it to the sum variable\n        sum += i**2\n    # Return the sum variable\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 23,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def find_star_num(n):\n    # Initialize the first two stars to 1\n    first_star = 1\n    second_star = 1\n\n    # Loop through the remaining stars\n    for i in range(2, n):\n        # Calculate the next number after the first star\n        next_number = (first_star * i) - second_star\n\n        # If the next number is a valid star, update the stars and then'th star\n        if next_number > n:\n            n = next_number\n            first_star = 1\n            second_star = i\n        elif next_number == n:\n            n = next_number\n            first_star = i + 1\n            second_star = i + 1\n\n    # Return then'th star number\n    return n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 1698,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def ascii_value(k):\n    return ord(k)",
        "test": "assert ascii_value('A') == 65 # test case 2",
        "num_ids": 875,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n\n    Args:\n        arr (list): A list of numbers.\n\n    Returns:\n        int: The sum of even numbers at even positions of the list.\n    \"\"\"\n\n    # Initialize a variable to store the sum of even numbers\n    even_sum = 0\n\n    # Loop through each element in the list\n    for i in range(len(arr)):\n        # Check if the current element is even and if it's the even index\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n\n    # Return the sum of even numbers at even positions\n    return even_sum",
        "test": "assert sum_even_and_even_index([]) == 0",
        "num_ids": 2298,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    even_sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the exponent of 5 raised to i\n        exponent = i * 5\n\n        # Check if the exponent is even\n        if exponent % 2 == 0:\n            # Calculate the sum of the exponent raised to the fifth power\n            even_sum += exponent ** 4\n\n    return even_sum",
        "test": "assert even_Power_Sum(20) == 24334426483691008000000",
        "num_ids": 2056,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n\n    rear = []\n    for i in range(len(test_list) - 1, -1, -1):\n        rear.append(test_list[i][1])\n    return rear",
        "test": "assert rear_extract([]) == []",
        "num_ids": 1660,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result",
        "test": "assert substract_elements((1,2,3),(1,2,3)) == (0, 0, 0)",
        "num_ids": 1757,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    binomial_coeffs = [1] * (n + 1)\n    binomial_coeffs[0] = 1\n    for i in range(2, n + 1):\n        binomial_coeffs[i] = binomial_coeffs[i - 1] + binomial_coeffs[i - 2]\n    \n    sum_coeffs = 0\n    for i in range(n, 0, -1):\n        sum_coeffs += binomial_coeffs[i]\n    \n    return sum_coeffs",
        "test": "assert even_binomial_Coeff_Sum( 1) == 1",
        "num_ids": 2375,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (4/3)*np.pi*r**3*h\n    return volume",
        "test": "assert volume_cylinder(10,0) == 0",
        "num_ids": 1501,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            result[key] = dict[key]\n    return result",
        "test": "assert dict_filter({}, 0) == {}",
        "num_ids": 1934,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i, element in enumerate(test_tup):\n        if i == 0:\n            count += 1\n    return count",
        "test": "assert count_first_elements((1,)) == 1",
        "num_ids": 1739,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def is_num_decagonal(n):\n    '''\n    Function to find the nth decagonal number.\n    '''\n    # Base case: if n is 1 or n is 2, it is a decagonal number.\n    if n == 1 or n == 2:\n        return True\n    \n    # If n is odd, check if the next two numbers are decagonal.\n    if n % 2 == 1:\n        # Check if the third number is even.\n        if (n - 1) % 2 == 0:\n            return True\n    \n    # Otherwise, the nth number is a decagonal number.\n    return True",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 2717,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1,2,3,4,5], 3) == (True, 2)",
        "num_ids": 1850,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n\n    Returns True if all elements of the list are unique, False otherwise.\n    '''\n    # Initialize a set to keep track of unique elements\n    unique_set = set()\n\n    # Iterate over the list and add each element to the set\n    for element in test_list:\n        if element not in unique_set:\n            unique_set.add(element)\n\n    # If the set is empty (i.e., all elements were unique), return True\n    return len(unique_set) == len(test_list)",
        "test": "assert all_unique([1, 2, 3, 2, 1, 4]) == False",
        "num_ids": 1799,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([], [4, 5, 6]) == []",
        "num_ids": 2099,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Initialize an empty dictionary to store the frequency of each digit in the integer\n    digit_freq = {}\n\n    # Loop through each digit in the integer\n    for digit in str(n):\n        # If the digit is already present in the dictionary, increment its frequency by 1\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        # If the digit is not present in the dictionary, add it with a frequency of 1\n        else:\n            digit_freq[digit] = 1\n\n    # Loop through each digit in the integer again and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in str(n):\n        if digit_freq[digit] <= 1:\n            return False\n\n    return True",
        "test": "assert validate(123456789123) == False",
        "num_ids": 1673,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False",
        "test": "assert check_element([1,2,3,4,5],6) == False",
        "num_ids": 1572,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"(?i)(?<=a)\\w{2,3}(?=b)\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(text_match_two_three(text))  # True",
        "test": "assert text_match_two_three(\"Hello, World! Abcdefghij\") == False",
        "num_ids": 2498,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # Update current sum and maximum sum\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n\n        # If the current sum is greater than or equal to k, update start to the current index\n        if curr_sum >= k:\n            start = i + 1\n\n        # If the current sum is less than k, move start to the next index\n        if curr_sum < k:\n            start = i + 1\n\n    # Return the maximum sum found\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, -2, 3, -2, 5], 5, 2) == 5",
        "num_ids": 3126,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum of squares to 0\n    sum_of_squares = 0\n    \n    # iterate over first n even natural numbers and add them to sum_of_squares\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    \n    # return the sum of squares\n    return sum_of_squares",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1594,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list",
        "test": "assert max_length([]) == []",
        "num_ids": 2157,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # initialize variables\n    num_ways = 0\n    adj_count = [0] * k\n    \n    # populate adj_count array\n    for i in range(n):\n        for j in range(i+1, n+1):\n            adj_count[i % k] += 1\n    \n    # count the number of ways\n    for i in range(k):\n        num_ways += adj_count[i]\n    \n    return num_ways",
        "test": "assert count_no_of_ways(3, 2) == 6",
        "num_ids": 2465,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 0\n    elif n % m == 0:\n        return n // m\n    else:\n        return n // m + 1\n",
        "test": "assert find(20,2)==10",
        "num_ids": 947,
        "indeed": false
    },
    {
        "number": 293,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/2",
        "test": "assert otherside_rightangle(2, 1) == 1 # midcase",
        "num_ids": 1436,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for value in listval[1:]:\n        if value > max_value:\n            max_value = value\n    return max_value",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1693,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Get the list of all numbers from 1 to the number\n    nums = [i for i in range(1, number+1)]\n\n    # Initialize the sum of divisors to zero\n    sum_div = 0\n\n    # Loop through the list of numbers\n    for num in nums:\n        # If the number is divisible by any number in the list, add it to the sum of divisors\n        if num % number == 0:\n            sum_div += num\n\n    # Return the sum of divisors\n    return sum_div",
        "test": "assert sum_div(1) == 1",
        "num_ids": 1516,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    n = len(arr)\n\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        inv_count += 1\n\n    return inv_count",
        "test": "assert get_Inv_Count([]) == 0",
        "num_ids": 1959,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert flatten_list([]) == []",
        "num_ids": 1717,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict of lists to store the data\n    d = defaultdict(list)\n    for t in stdata:\n        d[t[0]].append(t[1])\n    # initialize the maximum aggregate and current value\n    max_val = float('-inf')\n    curr_val = 0\n    # iterate over the tuples and update the max_val and curr_val\n    for key, val in d.items():\n        curr_val = max(curr_val, max(val))\n        max_val = max(max_val, curr_val)\n    return max_val",
        "test": "assert max_aggregate([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]) == 5",
        "num_ids": 2315,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_binary_seq(n):\n    count = 0\n    binary_seq = '0' * n\n    for i in range(1, n+1):\n        binary_seq = binary_seq[:-1] + '1' + binary_seq[-1:]\n        count += int(binary_seq[i-1] == '1')\n    return count",
        "test": "assert count_binary_seq(0) == 0, \"count_binary_seq(0) should return 0\"",
        "num_ids": 2150,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(sum([dict_depth(x) for x in d.values()]), sum([dict_depth(k) for k in d.keys()]))\n    else:\n        return 0",
        "test": "assert dict_depth({1: [2, [3, [4, 5]]]}) == 1",
        "num_ids": 2610,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # initialize the result as the first element of the array\n    result = arr[0]\n\n    # iterate through the array and find the element at the given index\n    for i in range(1, len(arr)):\n        if index - i >= 0:\n            result = arr[index - i]\n\n    # iterate through the array and find the element at the given index\n    for i in range(1, len(arr)):\n        if index + i < len(arr):\n            result = arr[index + i]\n\n    return result",
        "test": "assert find_Element([1, 2, 3, 4, 5], [1, 3, 4], [2, 3, 4], -1) == 4",
        "num_ids": 3237,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'[Pp](\\w+)'\n    matches = re.findall(pattern, words)\n    if matches:\n        return matches[0] + \" and \" + matches[1]\n    else:\n        return \"No matches found\"",
        "test": "assert start_withp(['apple', 'banana', 'cherry']) == ('apple', 'cherry')",
        "num_ids": 2700,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # Initialize variables\n    max_so_far = 0\n    current_sum = 0\n\n    # Iterate through the prefix\n    for i in range(n):\n        # Calculate the sum of the subsequence ending at index i\n        subseq_sum = sum(a[index:i+1])\n\n        # Update the current sum and the maximum sum found so far\n        current_sum += subseq_sum\n        max_so_far = max(max_so_far, current_sum)\n\n    # Return the maximum sum found so far\n    return max_so_far",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9], 8, 6, 6) == 22, \"The expected result is not obtained.\"",
        "num_ids": 4008,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Returns the colon of a tuple, assuming it has length m or less.\n    '''\n    # Get the colon by slicing the first n elements of the tuple\n    colon = tuple(tuplex[i] for i in range(min(n, len(tuplex))))\n    return colon",
        "test": "assert colon_tuplex((), 1, 1) == ()",
        "num_ids": 1843,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 390,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    max_product = float('-inf')\n    factor1 = float('-inf')\n    factor2 = float('-inf')\n    product1 = float('-inf')\n    product2 = float('-inf')\n    i = 0\n    j = 0\n    \n    # iterate through the lists\n    while i < len(nums1) and j < len(nums2):\n        # select the smallest factor from each list\n        if len(nums1[i]) < len(nums2[j]):\n            factor1 = nums1[i].pop()\n        elif len(nums1[i]) > len(nums2[j]):\n            factor2 = nums2[j].pop()\n        else:\n            factor1 = nums1[i].pop()\n            factor2 = nums2[j].pop()\n        \n        # calculate the product of the selected factors\n        product = factor1 * factor2\n        \n        # update the maximum product and the selected factors\n        if product > max_product:\n            max_product = product\n            factor1_idx = i\n            factor2_idx = j\n        elif product == max_product:\n            factor1_idx = min(i, j)\n            factor2_idx = max(i, j)\n        \n        # calculate the product of the remaining factors\n        product = 1\n        for k in range(i, j):\n            product *= factor1\n            i += 1\n        for k in range(j, len(nums2)):\n            product *= factor2\n            j -= 1\n            \n        # calculate the product of the remaining factors\n        product = 1\n        for k in range(i, j):\n            product *= factor1\n            i += 1\n        for k in range(j, len(nums2)):\n            product *= factor2\n            j -= 1\n            \n        # calculate the product of the remaining factors\n        product = 1\n        for k in range(i, j):\n            product *= factor1\n            i += 1\n        for k in range(j, len(nums2)):\n            product *= factor2\n            j -= 1\n            \n        # calculate the product of the remaining factors\n        product = 1\n        for k in range(i, j):\n            product *= factor1\n            i += 1\n        for k in range(j, len(nums2)):\n            product *= factor2\n            j -= 1\n            \n        # calculate the product of the remaining factors\n        product = 1\n        for k in range(i, j):\n            product *= factor1\n            i += 1\n        for k in range(j, len(nums2)):\n            product *= factor2\n            j -= 1\n            \n        # calculate the product of the remaining factors\n        product = 1\n        for k in range(i, j):\n            product *= factor1\n            i += 1\n        for k in range(j, len(nums2)):\n            product *= factor2\n            j -= 1\n            \n        # calculate the product of the remaining factors\n        product = 1\n        for k in range(i, j):\n            product *= factor1\n            i += 1\n        for k in range(j, len(nums2)):\n            product *= factor2\n            j -= 1\n            \n        # calculate the product of the remaining factors\n        product = 1\n        for k in range(i, j):\n            product *= factor1\n            i += 1\n        for k in range(j, len(nums2)):\n            product *= factor2\n            j -= 1\n            \n        # calculate the product of the remaining factors\n        product = 1\n        for k in range(i, j):\n            product *= factor1\n            i += 1\n        for k in range(j, len(nums2)):\n            product *= factor2\n            j -= 1\n            \n        # calculate the product of the remaining factors\n        product = 1\n        for k in range(i, j):\n            product *= factor1\n            i += 1\n        for k in range(j, len(nums2)):\n            product *= factor2\n            j -= 1\n            \n        # calculate the product of the remaining factors\n        product = 1\n        for k in range(i, j):\n            product *= factor1\n            i += 1\n        for k in range(j, len(nums2)):\n            product *= factor2\n            j -= 1\n            \n        # calculate the product of the remaining factors\n        product = 1\n        for k in range(i, j):\n            product *= factor1\n            i += 1\n        for k in range(j, len(nums2)):\n            product *= factor2\n            j -= 1\n            \n        # calculate the product of the remaining factors\n        product = 1\n        for k in range(i",
        "test": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 0) == 60",
        "num_ids": 4616,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(10,20) == 20, \"The maximum of 10 and 20 is not equal to 20.\"",
        "num_ids": 920,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('') == ()",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Loop through all the bits and set the left most unset bit\n    for i in range(32):\n        if n & (1 << i):\n            n |= (1 << i)\n        else:\n            n &= ~(1 << i)\n    return n",
        "test": "assert set_left_most_unset_bit(0) == 0",
        "num_ids": 1645,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Find the volume of a cone using the formula:\n    volume = pi * r * h\n    '''\n    volume = math.pi * r * h\n    return volume",
        "test": "assert volume_cone(7, 0) == 0.0  # Correct volume of a cone with radius 7 and height 0",
        "num_ids": 1926,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    result = 1\n    while result < n:\n        result *= 2\n    \n    return result",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 1760,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    def lucas(n): \n        if n <= 1: \n            return n\n        else: \n            return lucas(n-1) + lucas(n-2)\n\n    return lucas(n)\n",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 1519,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def add_string(list_, format_string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        item = format_string.format(item)\n    return list_",
        "test": "assert add_string([], \"Hello, World!\") == []",
        "num_ids": 1524,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for item in l1:\n        if isinstance(item, dict):\n            for key, value in item.items():\n                if key in l2 and isinstance(value, (list, tuple)):\n                    result.setdefault(key, []).extend(value)\n                else:\n                    result[key] = value\n        else:\n            if item in l2 and isinstance(l3, (list, tuple)):\n                result.setdefault(item, []).extend(l3)\n            else:\n                result[item] = l3\n    return result",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 2515,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "def get_max_sum(n):\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)",
        "test": "assert get_max_sum(20) == 106",
        "num_ids": 2173,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list of numbers as input and returns the list with the maximum length.\n    '''\n\n    # initialize the maximum length as 1\n    max_length = 1\n\n    # loop through each element in the list\n    for num in input_list:\n        # if the current element is longer than the maximum length, update the maximum length\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n\n    # return the list with the maximum length\n    return input_list[:max_length]",
        "test": "assert max_length_list([]) == []",
        "num_ids": 2260,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)",
        "test": "assert check_distinct((\"a\", \"b\", \"c\", \"a\", \"d\", \"e\")) == False, \"The function should return False for a tuple containing duplicates.\"",
        "num_ids": 1566,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n\n    Args:\n        str1: a string\n\n    Returns:\n        the first non-repeated character in the string\n\n    Example:\n        >>> first_non_repeating_character(\"aabbcc\")\n        'c'\n\n    '''\n\n    # Create an empty dictionary to store the count of each character\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, skip it and move on to the next character\n        if char in char_count:\n            continue\n\n        # Otherwise, add the character to the dictionary with a count of 1\n        char_count[char] = 1\n\n    # Iterate through the dictionary and check if any character has a count of 1\n    for char, count in char_count.items():\n        # If a count of 1 is found, return the character\n        if count == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None",
        "test": "assert first_non_repeating_character(\"a\") == \"a\"",
        "num_ids": 2396,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # Check if the string matches the regex pattern\n    if re.match(regex, string): \n        return True\n    else: \n        return False",
        "test": "assert check_char('abcd') == False",
        "num_ids": 1670,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def median_numbers(a, b, c):\n    # Sort the given numbers\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the middle index\n    middle_index = len(sorted_numbers) // 2\n\n    # Check if the middle index is odd or even\n    if len(sorted_numbers) % 2 == 0:\n        # If the middle index is even, find the average of the middle two numbers\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        # If the middle index is odd, return the middle number\n        median = sorted_numbers[middle_index]\n\n    return median",
        "test": "assert median_numbers(2,2,2) == 2",
        "num_ids": 2100,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for digit in nums)",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1617,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i] ^ test_tup2[i] == 1:\n            result += (1,)\n        else:\n            result += (0,)\n    return result",
        "test": "assert bitwise_xor(tuple(), tuple()) == tuple()",
        "num_ids": 2027,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = {}\n    for item in test_list:\n        if item in unique_tuples:\n            unique_tuples[item] += 1\n        else:\n            unique_tuples[item] = 1\n    return len(unique_tuples)",
        "test": "assert extract_freq([1, 2, 3, 3, 4, 4, 5]) == {('1', 1): 1, ('2', 1): 1, ('3', 1): 2, ('4', 1): 3, ('5', 1): 1}",
        "num_ids": 1867,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # Convert both nested tuples to lists\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n\n    # Initialize a list to store the sum of the elements\n    sum_list = []\n\n    # Iterate over both nested lists\n    for i in range(len(lst1)):\n        # If the list contains an element, add it to the sum list\n        if lst1[i] is not None:\n            sum_list.append(lst1[i] + lst2[i])\n        else:\n            # If the list is empty, append None to the sum list\n            sum_list.append(None)\n\n    # Convert the sum list to a tuple and return it\n    return tuple(sum_list)",
        "test": "assert add_nested_tuples((1,2), (3,4)) == (4,6)",
        "num_ids": 2194,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(1,2) == 1",
        "num_ids": 885,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex((\"a\", 1, 2), (\"b\", 1, 2)) == False",
        "num_ids": 1226,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 22,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Use bitwise operators to check if the number is odd or even\n    return x & 1!= 0",
        "test": "assert find_Parity(30) == 0 # parity of 30 is even",
        "num_ids": 1334,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n\n    # Initialize variables\n    index = 0\n    reverse = False\n    result = \"\"\n\n    # Loop through the digits of n\n    while n > 0:\n        digit = n % 10\n        if index < len(result):\n            result = result[:index] + str(digit) + result[index+1:]\n        else:\n            result = str(digit) + result\n\n        n //= 10\n        index += 1\n\n    # Reverse the result string\n    result = result[::-1]\n\n    return int(result)",
        "test": "assert rearrange_bigger(0) == 0",
        "num_ids": 2478,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Finds k number of smallest pairs from the given arrays.\n    '''\n    # Sort the arrays by their values in ascending order\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n\n    # Initialize two heaps to store the first k elements of nums1 and nums2\n    first_k = []\n    second_k = []\n\n    # Iterate through the sorted arrays and add the smallest k elements to their heaps\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            heapq.heappush(first_k, nums1[i])\n            i += 1\n        else:\n            heapq.heappush(second_k, nums2[j])\n            j += 1\n\n    # Add the remaining elements of nums1 and nums2 to their respective heaps\n    while i < len(nums1):\n        heapq.heappush(first_k, nums1[i])\n        i += 1\n    while j < len(nums2):\n        heapq.heappush(second_k, nums2[j])\n        j += 1\n\n    # Extract the k smallest pairs from their heaps and return their values\n    result = []\n    while k > 0:\n        result.append(heapq.heappop(first_k))\n        result.append(heapq.heappop(second_k))\n        k -= 1\n\n    return result",
        "test": "assert k_smallest_pairs([1, 2, 3], [4, 5, 6], 2) == [(1, 4), (2, 5)]",
        "num_ids": 3814,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0][0]\n    else:\n        min_product = float('inf')\n        pairs = []\n        for i in range(len(list1)):\n            for j in range(i+1, len(list1)):\n                if list1[i][1] < list1[j][1]:\n                    pairs.append((list1[i], list1[j]))\n                elif list1[i][1] > list1[j][1]:\n                    pairs.append((list1[j], list1[i]))\n                elif list1[i][1] == list1[j][1]:\n                    if list1[i][0] * list1[j][0] < min_product:\n                        min_product = list1[i][0] * list1[j][0]\n                        best_pairs = [(list1[i], list1[j])]\n                    elif list1[i][0] * list1[j][0] == min_product:\n                        best_pairs.append((list1[i], list1[j]))\n        return min_product, best_pairs",
        "test": "assert min_product_tuple([]) == 0",
        "num_ids": 2816,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    \n    return min_val",
        "test": "assert min_val([1,2,3,4,5]) == 1, \"Function min_val should return the minimum value in the given list.\"",
        "num_ids": 1748,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n",
        "test": "assert snake_to_camel(\"camelCaseString\") == \"camelCaseString\"",
        "num_ids": 1396,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def remove_odd(l):\n    '''\n    Removes odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1 or n > len(list1):\n        print(\"Invalid input. Please enter a number between 1 and the length of the list.\")\n    else:\n        return list1[n-1]",
        "test": "assert extract_nth_element([('apple', 1), ('banana', 2), ('cherry', 3), ('date', 4), ('elderberry', 5)], 2) == ('banana', 2)",
        "num_ids": 2072,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if any element in the first list is present in the second list\n    else, it returns False.\n    '''\n\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert overlapping([],[]) == False",
        "num_ids": 2010,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def max_Product(arr):\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # initialize max product to negative infinity\n    max_product = float('-inf')\n\n    # loop through the array and find the product of each pair with the highest product\n    for i in range(len(arr) - 1):\n        left_product = arr[i] * arr[i + 1]\n        right_product = arr[i + 1] * arr[i]\n\n        # update max product if necessary\n        if left_product > max_product:\n            max_product = left_product\n        if right_product > max_product:\n            max_product = right_product\n\n    # return the maximum product\n    return max_product",
        "test": "assert max_Product([1, 1, 1, 1]) == 1, \"The max product should be 1\"",
        "num_ids": 2286,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = []\n    for i in range(len(Input)):\n        if len(common_element) == 0 or Input[i][0]!= common_element[-1][0]:\n            common_element.append(Input[i])\n    return common_element",
        "test": "assert group_tuples([]) == []",
        "num_ids": 2571,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 29,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return max(lst)",
        "test": "assert Find_Max([1]) == 1, \"The maximum element of the list [1] is not 1\"",
        "num_ids": 1652,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def round_and_sum(lst):\n    '''\n    Round every number in a given list of numbers and return the total sum.\n    '''\n    total = 0\n    for num in lst:\n        rounded = round(num)\n        total += rounded\n    return total * len(lst)",
        "test": "assert round_and_sum([]) == 0",
        "num_ids": 2064,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum",
        "test": "assert cube_Sum(1) == 1",
        "num_ids": 1559,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for element in test_tup:\n        result += str(element)\n    return result",
        "test": "assert concatenate_tuple((\"a\")) == \"a\"",
        "num_ids": 1409,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_Average_Of_Cube(n):\n    # Initialize variables\n    sum_of_cubes = 0\n    count = 0\n    # Find the sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n    # Calculate the average of cubes\n    average = sum_of_cubes / count\n    # Return the average\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1662,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple)[-1]",
        "test": "assert extract_rear((\"tuple_with_string\", \"string\")) == \"string\"",
        "num_ids": 1517,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([], 5) == 0, \"Error: count_element_in_list([], 5) should return 0\"",
        "num_ids": 2093,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1577,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Extract the year and month from the input date\n    year = int(dt[:4])\n    month = int(dt[5:7])\n    # Convert the month to a two-digit string\n    month = str(month).zfill(2)\n    # Combine the year and month into a single string\n    date = f\"{year}-{month}-{dt[8:10]}\"\n    # Extract the day and month again from the date string\n    day = int(date[5:7])\n    month = date[8:10]\n    # Convert the day to a two-digit string\n    day = str(day).zfill(2)\n    # Combine the month and day into a single string\n    formatted_date = f\"{day}-{month}-{year}\"\n    return formatted_date",
        "test": "assert change_date_format('2021-01-01') == '01-01-2021'",
        "num_ids": 2818,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # get the length of the list\n    n = len(my_list)\n\n    # initialize gap size\n    gap = n // 2\n\n    # loop through each element in the list\n    while gap > 0:\n\n        # loop through each gap size (starting from gap = n//2)\n        for i in range(gap, n):\n\n            # get the current element\n            current = my_list[i]\n\n            # initialize a variable to store the index where the current element will be placed\n            j = i\n\n            # move the current element to its correct position\n            while j >= gap and my_list[j - gap] > current:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            # place the current element at its correct position in the sorted list\n            my_list[j] = current\n\n        # update gap size\n        gap = gap // 2\n\n    return my_list",
        "test": "assert shell_sort([]) == []",
        "num_ids": 2508,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Define a list of tuples to store the elementwise and tuples\n    result_list = []\n\n    # Loop through each tuple in the test_tup1 list\n    for tup1 in test_tup1:\n        # Loop through each tuple in the test_tup2 list\n        for tup2 in test_tup2:\n            # Check if the tuples are equal\n            if tup1 == tup2:\n                # Add the tuple to the result_list\n                result_list.append(tup1)\n\n    # Return the result_list as a tuple\n    return tuple(result_list)",
        "test": "assert and_tuples((), ()) == ()",
        "num_ids": 2493,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b ** 2 - 4 * a * c\n    if d >= 0:\n        directrix = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    else:\n        directrix = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return directrix",
        "test": "assert parabola_directrix(1, 4, 3) == -1",
        "num_ids": 1814,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2 and item not in list1:\n            return True\n    return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 1643,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Calculates the median length of a trapezium.\n    '''\n    if base1 + base2 == height:\n        # base1 and base2 are collinear, so return their average length\n        return (base1 + base2) / 2\n    else:\n        # base1 and base2 are not collinear, so calculate the length of the trapezoid\n        midpoint = (base1 + base2) / 2\n        right_side = (height + base1 + base2) / 2 - midpoint\n        left_side = base1 - midpoint\n        return max(left_side, right_side)",
        "test": "assert median_trapezium(1, 2, 3) == 1.5",
        "num_ids": 1871,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number in arr:\n        return True\n    else:\n        return False",
        "test": "assert check_greater([1,2,3], 2) == True",
        "num_ids": 2013,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns True if there is exactly one a followed by one or more b's,\n    and False otherwise.\n    '''\n    pattern = re.compile(r'a[b]*')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one(\"pwwkew\") == False",
        "num_ids": 3336,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to a string\n    str_num = str(n)\n\n    # return the last digit\n    return int(str_num[-1])",
        "test": "assert last_Digit(123) == 3",
        "num_ids": 1110,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing the negative numbers.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list",
        "test": "assert neg_nos([]) == []",
        "num_ids": 1247,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters from a string.\n    '''\n    odd_count = 0\n    for char in str1:\n        if char.isdigit():\n            odd_count += 1\n            if odd_count % 2 == 1:\n                str1 = str1.replace(char, '')\n    return str1",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 1322,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i]!= test_list[j]:\n                bidirectional_count += 1\n                break\n    return bidirectional_count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 2425,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        return sum(L)\n",
        "test": "assert multiple_to_single([1]) == 1",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Find the first adverb and its position in a given sentence.\n    '''\n    # Define the regular expression pattern for an adverb\n    pattern = re.compile(r'(?i)\\b(will|could|might|must|should|can|may|shouldn\\'t|can\\'t|mustn\\'t|don\\'t|didn\\'t|doesn\\'t|hadn\\'t|hadn\\'t|hadn\\'t|hadn\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t|haven\\'t",
        "test": "assert find_adverb_position(\"The quick brown fox jumps over the lazy dog.\") == (7, 14)",
        "num_ids": 4543,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate surface area of cube\n    surface_area = l * l * l\n    \n    # return surface area\n    return surface_area",
        "test": "assert surfacearea_cube(5) == 125",
        "num_ids": 1087,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Returns the ration of positive numbers in a given array of integers.\n    '''\n    count = 0\n    total = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n            total += 1\n    if total == 0:\n        return 0\n    else:\n        return count / total",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1",
        "num_ids": 2078,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def largest_neg(list1):\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list[-1] if neg_list else None",
        "test": "assert largest_neg([-5, -4, -3, -2, -1]) == -1, \"largest_neg([-5, -4, -3, -2, -1]) should return -1\"",
        "num_ids": 1433,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        if len(trimmed_list) == K:\n            break\n        trimmed_list.append(test_list[i])\n    return trimmed_list",
        "test": "assert trim_tuple([], 2) == []",
        "num_ids": 2280,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n    Parameters:\n    test_tup1 (tuple): First tuple containing elements to be multiplied.\n    test_tup2 (tuple): Second tuple containing elements to be multiplied.\n\n    Returns:\n    tuple: Returns the result of multiplication of the elements of test_tup1 and test_tup2 along with their indices.\n    '''\n\n    result = ()\n    for i, item in enumerate(test_tup1):\n        result += (item * test_tup2[i],)\n\n    return result",
        "test": "assert index_multiplication((),()) == ()",
        "num_ids": 3116,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst) \n    return counter.most_common(1)[0][0]",
        "test": "assert count_Occurrence((1, 2, 3, 3), [1, 2, 3, 3, 4, 4, 5, 5]) == 3",
        "num_ids": 1788,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 1781,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    s = 0\n    for i in range(1, n+1):\n        s += i**2*p\n    return s",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 1562,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]",
        "test": "assert extract_string(\"hello world\", 3) == \"h\"",
        "num_ids": 1445,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n\ntext1 = \"Hello, World!\"\ntext2 = \"    Hello, World    \"\n\nprint(remove_whitespaces(text1)) # Output: Hello, World!\nprint(remove_whitespaces(text2)) # Output: Hello, World",
        "test": "assert remove_whitespaces('') == ''",
        "num_ids": 1338,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount >= actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n\nactual_cost = 5000\nsale_amount = 5500\n\nprint(loss_amount(actual_cost, sale_amount)) # Output: 2500",
        "test": "assert loss_amount(1000,1000) == 0 # no loss amount",
        "num_ids": 1560,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # Initialize a variable to store the sum of even factors\n    even_sum = 0\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a factor of n\n        if n % i == 0:\n            # If it is a factor, add it to the even_sum variable\n            even_sum += i\n\n    # Return the sum of even factors\n    return even_sum",
        "test": "assert sumofFactors(24) == 60 # The sum of even factors of 24 is 60",
        "num_ids": 1762,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*\\b\\w*\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_wordz('testz')",
        "num_ids": 1470,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(13) == False",
        "num_ids": 2196,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Reverse the order of the elements in a list of string values.\n\n    Args:\n        stringlist: A list of strings to be reversed.\n\n    Returns:\n        A new list containing the reversed string values.\n    '''\n    return list(reversed(stringlist))",
        "test": "assert reverse_string_list([]) == []",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def Find_Min(lst):\n    # Initialize the minimum length as the length of the list\n    min_length = len(lst)\n    \n    # Iterate through the list and update the minimum length if a sublist of length less than min_length is found\n    for i in range(1, len(lst)):\n        if len(lst[i:]) < min_length:\n            min_length = len(lst[i:])\n    \n    # Return the sublist with minimum length\n    return lst[:min_length]",
        "test": "assert Find_Min([]) == []",
        "num_ids": 1661,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b",
        "test": "assert rectangle_area(5,5) == 25",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z][a-z]*\\b'\n\n    # Use the re.sub() function to replace all matches of the pattern with an empty string\n    str1 = re.sub(pattern, '', str1)\n\n    return str1",
        "test": "assert remove_uppercase('') == ''",
        "num_ids": 1340,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]",
        "test": "assert Extract([]) == []",
        "num_ids": 1618,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Initialize a variable to keep track of the count of upper case characters\n    upper_count = 0\n    \n    # Loop through each character in the string\n    for char in str:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Increment the count of upper case characters\n            upper_count += 1\n    \n    # Return the count of upper case characters\n    return upper_count",
        "test": "assert upper_ctr(\"HELLO\") == 5",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n\n    Parameters:\n    lst (list): The list to find all combinations for.\n\n    Returns:\n    list: A list of all possible combinations of the elements in lst.\n    \"\"\"\n\n    # Base case: if the list has one element, we have only one combination\n    if len(lst) == 1:\n        return [lst]\n\n    # Base case: if the list has 0 elements, we have no combinations\n    if len(lst) == 0:\n        return []\n\n    # Recursive case: find all combinations of the first element and the remaining elements\n    combinations = []\n    for i in range(len(lst)):\n        remaining_lst = lst[:i] + lst[i+1:]\n        for comb in combinations_list(remaining_lst):\n            combinations.append([lst[i]] + comb)\n\n    return combinations",
        "test": "assert combinations_list([1,2,3]) == [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]",
        "num_ids": 3395,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product",
        "test": "assert max_subarray_product([0]) == 0",
        "num_ids": 2601,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def check_value(dict, n):\n    # Check if all values are the same\n    all_values_same = True\n    for value in dict.values():\n        if value!= dict.get(value):\n            all_values_same = False\n            break\n    return all_values_same\n",
        "test": "assert check_value({1: 'a', 2: 'b', 3: 'c'}, 4) == False",
        "num_ids": 1641,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 1732,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def max_product(arr):\n    max_product = 0\n    curr_product = 1\n    \n    for num in arr:\n        curr_product *= num\n        if curr_product > max_product:\n            max_product = curr_product\n        elif curr_product < max_product:\n            curr_product = 1\n    \n    return max_product",
        "test": "assert max_product([1]) == 1",
        "num_ids": 2128,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    first_element = test_tup[0]\n    second_element = test_tup[1]\n    result = first_element + second_element\n    return result",
        "test": "assert add_pairwise(('b', 2)) == ('d', 3)",
        "num_ids": 2046,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([1, 2, 3, 4, 5], 5) == 0",
        "num_ids": 1742,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(1, len(l)): \n        if l[i] == l[i-1]: \n            return False \n    return True ",
        "test": "assert check_Consecutive([1,2,3,4,5,5]) == False # false (duplicate number)",
        "num_ids": 2182,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection_list.append(test_list1[i])\n    return tuple(intersection_list)\n\ntest_list1 = ('apple', 'banana', 'cherry')\ntest_list2 = ('apple', 'orange', 'grape')\n\nprint(tuple_intersection(test_list1, test_list2)) # Output: ('apple', 'orange', 'grape')",
        "test": "assert tuple_intersection([1,2,3,4,5], [3,4,5,6,7]) == (3,4,5)",
        "num_ids": 1991,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes two parameters, str1 and ch.\n    str1 is the original string, and ch is the character to be replaced.\n    newch is the new character to be used for the replacement.\n    The function returns the modified string after replacing the character.\n    '''\n\n    # Converting str1 to list and iterating through it\n    str_list = list(str1)\n    i = 0\n    while i < len(str_list):\n        # If the character to be replaced is found, replace it with newch\n        if str_list[i] == ch:\n            str_list[i] = newch\n        # Increment the index\n        i += 1\n\n    # Returning the modified string\n    return ''.join(str_list)\n",
        "test": "assert replace_char(\"abcde\", \"b\", \"x\") == \"axcde\"",
        "num_ids": 1453,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "test": "assert sort_counter({1:2, 3:4, 5:6}) == {1:2, 3:4, 5:6}",
        "num_ids": 2180,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        sum_num = max_num + min_num\n        return sum_num",
        "test": "assert big_sum([]) == 0",
        "num_ids": 1963,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def is_lower(string):\n    return string.lower()",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 709,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('[^a-zA-Z0-9\\s]', '', str1)\n    return str1\n\nstring = \"This is a test string! This is another test string with lowercase characters\"\nresult = remove_lowercase(string)\nprint(result)",
        "test": "assert remove_lowercase(\"\") == \"\"",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def first_Digit(n):\n    return int(str(n)[0])",
        "test": "assert first_Digit(0) == 0  # first_Digit(0) should return 0",
        "num_ids": 1364,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert Split([1,2,3,4,5]) == [1, 3, 5]",
        "num_ids": 1291,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def difference(n):\n    cubes = 0\n    for i in range(1, n+1):\n        cubes += i ** 3\n    return cubes - sum(range(1, n+1))",
        "test": "assert difference(0) == 0",
        "num_ids": 1452,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    count = 0\n\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if A[i] ^ A[j] == 1 : \n                count += 1\n\n    return count",
        "test": "assert find_Odd_Pair([2, 4, 6], 3) == 0",
        "num_ids": 1589,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.upper()",
        "test": "assert toggle_string(\"\") == \"\"",
        "num_ids": 1592,
        "indeed": false
    },
    {
        "number": 558,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    n1_digits = list(str(n1))\n    n2_digits = list(str(n2))\n    for i in range(min(len(n1_digits), len(n2_digits))):\n        diff = abs(int(n1_digits[i]) - int(n2_digits[i]))\n        sum_diff += diff\n    return sum_diff",
        "test": "assert digit_distance_nums(1234, 1235) == 1 # check for correct output",
        "num_ids": 2191,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Find the sum of the largest contiguous subarray in the given list.\n    '''\n    \n    # Initialize variables\n    max_so_far = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the list and keep track of the maximum subarray sum\n    for i in range(size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_so_far = max(max_so_far, current_sum)\n    \n    return max_so_far",
        "test": "assert max_sub_array_sum([1], 1) == 1, \"The sum of the largest contiguous subarray [1] of length 1 is not 1.\"",
        "num_ids": 2699,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result = sorted(set(test_tup1) | set(test_tup2))\n    return result",
        "test": "assert union_elements([1,2,3], [4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 2883,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 33,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n\n    for num in lst:\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length",
        "test": "assert Find_Max_Length([1,2,3,4,5]) == 5",
        "num_ids": 1759,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\b(\\w+)\\b'\n    values = re.findall(pattern, text)\n    return values",
        "test": "assert extract_values(\"\") == []",
        "num_ids": 1506,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    # Initialize variables\n    count = 0\n\n    # Loop through the list\n    for i in range(n-1):\n        # If the current element is different from the next element, increment the count\n        if arr[i]!= arr[i+1]:\n            count += 1\n\n    return count",
        "test": "assert count_Pairs([], 0) == 0",
        "num_ids": 1720,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)",
        "test": "assert split('') == []",
        "num_ids": 984,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    return sum(digits)",
        "test": "assert sum_digits(12345) == 15, \"The sum of the digits of 12345 should be 15.\"",
        "num_ids": 1492,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def issort_list(list1):\n    '''\n    Function to check whether a specified list is sorted or not.\n\n    Parameters:\n    list1 (list): A list of integers.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    '''\n\n    # Check if the list is empty\n    if len(list1) == 0:\n        return False\n\n    # Sort the list in ascending order\n    list1.sort()\n\n    # Check if the sorted list is equal to the original list\n    if list1 == list1[::-1]:\n        return True\n\n    # If the sorted list is not equal to the original list, it is not sorted\n    return False",
        "test": "assert issort_list([1]) == True",
        "num_ids": 2368,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def empty_list(length):\n    '''\n    Create a list of N empty dictionaries.\n\n    Args:\n    length: int\n        The number of empty dictionaries to create.\n\n    Returns:\n    list:\n        A list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(10) == [{}] * 10",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        sublist = list1[i]\n        for j in range(len(sublist)-1):\n            if len(sublist[j:j+2]) > len(sublist[j:j+3]):\n                sublist[j:j+3] = sublist[j:j+3][::-1]\n                sublist[j:j+3].sort()\n    return list1",
        "test": "assert sort_sublists([]) == [], \"Empty list should return an empty list\"",
        "num_ids": 1986,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def two_unique_nums(nums):\n    '''\n    Remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result",
        "test": "assert two_unique_nums([1, 2, 2, 3, 3, 4, 4, 4]) == [1, 2, 3, 4]",
        "num_ids": 2109,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    unique_product = 1\n    for num in unique_nums:\n        unique_product *= num\n    return unique_product\n",
        "test": "assert unique_product([1]) == 1",
        "num_ids": 1757,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 3.14159 * r * r * h\n    return surface_area",
        "test": "assert surfacearea_cylinder(1,1) == 3.14159, \"Incorrect surface area calculation for cylinder with radius 1 and height 1.\"",
        "num_ids": 1328,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a Python function to check whether a list is sublist of another or not.\n    \"\"\"\n    # Find the difference between the lengths of the two lists\n    diff = len(A) - len(B)\n\n    # If the difference is 0, then the lists are sublists\n    if diff == 0:\n        return True\n\n    # If the difference is positive, then A can be made to be a sublist of B\n    elif diff > 0:\n        for i in range(len(B)):\n            if A[i]!= B[i]:\n                return False\n        return True\n\n    # If the difference is negative, then B can be made to be a sublist of A\n    else:\n        for i in range(len(A)):\n            if A[len(B) - 1 - i]!= B[i]:\n                return False\n        return True",
        "test": "assert is_Sub_Array([1,2,3,4,5], [2,3,6]) == False  # Check for the correct output",
        "num_ids": 2368,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def last_Digit_Factorial(n):\n    last_digit = n % 10\n    factorial = 1\n    for i in range(1, last_digit + 1):\n        factorial *= i\n    return last_digit",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 2025,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def interleave_lists(*lists):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for lst in lists:\n        result += lst\n    return result",
        "test": "assert interleave_lists([], [], []) == []",
        "num_ids": 2636,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n\n    # create two empty sets to store the dissimilar elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # return the intersection of the two sets\n    return set1.intersection(set2)\n",
        "test": "assert find_dissimilar((1, 2), (3, 4)) == set()",
        "num_ids": 2585,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))",
        "test": "assert even_ele((1, 2, 3, 4, 5), lambda x: x % 2 == 0)",
        "num_ids": 2274,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = b*s\n    return surface",
        "test": "assert surface_Area(5,3) == 15",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({1: 2, 2: 3})!= {1: 2, 3: 4} # Test if dictionary is not empty",
        "num_ids": 1091,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def catalan_number(num):\n    c = [0, 1]\n    for i in range(2, num+1):\n        c.append(c[i-1] + c[i-2])\n    return c[num]",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 2227,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    matches = re.findall(r\"(?<=ly)[a-zA-Z]+ly(?=ly)\", text)\n    for match in matches:\n        print(f\"{match} begins at position {text.find(match):,}\")\n\ntext = \"Hello, how are you today? It's great. There's only one mistake in this sentence. You're a bit too lying.\"\nfind_adverbs(text)",
        "test": "assert find_adverbs(\"This is a sample string. It contains an adverb ending with ly. The positions of the adverb are: 0, 7, 14.\") == [\"adverb ending with ly\", 0, 7, 14]",
        "num_ids": 2095,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    if n > len(items):\n        n = len(items)\n    sorted_items = sorted(items, key=lambda x: x[1])\n    return sorted_items[:n]",
        "test": "assert expensive_items([],0) == []",
        "num_ids": 2601,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth eelment\n    temp_list = l[:n]\n    # Add the first part of the list to the end of the list\n    temp_list.extend(l[n:])\n    return temp_list",
        "test": "assert split_Arr([1, 2, 3], 1) == [1, 2, 3]",
        "num_ids": 2102,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 862,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def big_diff(nums):\n    # Find the smallest and largest values in the list\n    smallest = min(nums)\n    largest = max(nums)\n\n    # Find the difference between the smallest and largest values\n    diff = largest - smallest\n\n    # Return the difference\n    return diff",
        "test": "assert big_diff([1,2,3,4,5]) == 4",
        "num_ids": 1899,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize variables to keep track of square numbers\n    square_numbers = []\n    sum_of_squares = 0\n    \n    # Iterate through numbers between a and b\n    for i in range(a, b+1):\n        # Calculate the square of i\n        square = i**2\n        \n        # Append the square number to square_numbers list\n        square_numbers.append(square)\n        \n        # Add the square of i to sum_of_squares\n        sum_of_squares += square\n    \n    # Return the sum of the square numbers\n    return sum_of_squares",
        "test": "assert perfect_squares(1, 1) == 1",
        "num_ids": 2068,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import math\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y, x)\n    return r * math.cos(theta), r * math.sin(theta)",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 1753,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 1573,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): the number of terms in the sequence\n    k (int): the number of terms in the sequence to consider\n\n    Returns:\n    float: the sum of the product of consecutive binomial co-efficients\n\n    \"\"\"\n    if n == 0 or k == 0:\n        return 0\n    elif k == 1:\n        return 1\n    elif k == n:\n        return 2\n    else:\n        coeff = 1\n        for i in range(2, k + 1):\n            coeff *= (n - i)\n            coeff //= i\n        return coeff",
        "test": "assert binomial_Coeff(0, 0) == 0",
        "num_ids": 3306,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})', r'\\1.\\2.\\3.\\4', ip)",
        "test": "assert removezero_ip(\"123.456.789\") == \"123.456.789\"",
        "num_ids": 2251,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Create an empty dictionary to store the count of each number\n    count = {}\n    # Traverse through the given list\n    for num in list1:\n        # If the number is even, add it to the dictionary with value 2\n        if num % 2 == 0:\n            count[num] = count.get(num, 0) + 2\n        # If the number is odd, add it to the dictionary with value 1\n        else:\n            count[num] = count.get(num, 0) + 1\n    # Find the difference of even and odd numbers\n    diff = 0\n    for key, value in count.items():\n        if value % 2 == 0:\n            diff += key\n    for key, value in count.items():\n        if value % 2!= 0:\n            diff += key\n    return diff",
        "test": "assert diff_even_odd([]) == 0",
        "num_ids": 2434,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    i = 0\n    while i < n:\n        if str1[i]!= str2[i]:\n            count += 1\n        i += 1\n    return count",
        "test": "assert min_Swaps(\"1011\", \"1101\") == 2",
        "num_ids": 3380,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Find the size of the given tuple, in bytes.\n    '''\n    size = 0\n    for item in tuple_list:\n        if isinstance(item, str):\n            size += len(item.encode())\n        else:\n            size += sys.getsizeof(item)\n    return size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 1165,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Check if the arrays are of same length\n    if len(arr1)!= len(arr2):\n        print(\"Error: The two arrays are not of same length.\")\n        return None\n    \n    # Find the index of kth element in the arrays\n    for i in range(len(arr1)):\n        if i+1 == k:\n            return arr1[i]\n    \n    # If kth element is not found, print an error message\n    print(\"Error: kth element is not found in the array.\")\n    return None",
        "test": "assert find_kth([1, 2, 3], [4, 5, 6], 3) == 3",
        "num_ids": 3658,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 29,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    power = 0\n    while number > 0:\n        remainder = number % 10\n        power += (remainder ** 2)\n        number //= 10\n    if number == 0:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 1741,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n\n    if count > 0:\n        return total/count\n    else:\n        return 0",
        "test": "assert sum_average(20) == (1 + 20) / 2",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False",
        "test": "assert is_Even(10) # true",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    max_count = max(count.values())\n    repeated_char = ''\n    for char, count in count.items():\n        if count == max_count:\n            repeated_char = char\n            break\n    return repeated_char\n",
        "test": "assert first_repeated_char(\"abb\") == \"b\"",
        "num_ids": 1684,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # Iterate over all integers from 1 to n\n    for i in range(1, n+1):\n        # Check if i is lucid (i is a factor of n)\n        if i % n == 0:\n            # If it is, append it to the list of lucid numbers\n            lucid_numbers.append(i)\n\n    # Return the list of lucid numbers\n    return lucid_numbers",
        "test": "assert get_ludic(0) == []",
        "num_ids": 4387,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Remove spaces from the string\n    s = s.replace(' ', '')\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Reverse the order of the words\n    words.reverse()\n    \n    # Join the words with spaces and return the result\n    return''.join(words)",
        "test": "assert reverse_words(\"  \") == \"\"",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True #2 is a prime number",
        "num_ids": 1222,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180",
        "test": "assert radian_degree(45) == 0.7853981633974483",
        "num_ids": 1184,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"Python is a great language\", r'\\b\\d+\\b') == (None, None, None)",
        "num_ids": 2384,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def bell_Number(n):\n    # Define a list of all the possible bell numbers\n    bells = [1, 11, 13, 17, 19]\n\n    # Return the nth bell number in the list\n    return bells[n-1]",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 1319,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = int(L)\n    return [element for index, element in enumerate(list1) if index!= k-1]",
        "test": "assert remove_kth_element([], 1) == []",
        "num_ids": 2079,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    \n    # Initialize variables\n    max_column = float('-inf')\n    max_row = -1\n    \n    # Iterate through each row and column of the matrix\n    for row in test_list:\n        for col in row:\n            # If the value is greater than the current maximum value, update the maximum value\n            if col > max_column:\n                max_column = col\n                max_row = row\n                \n    # Return the maximum value of then'th column\n    return max_column",
        "test": "assert max_of_nth([[1, 2], [3, 4]], 2) == 4, \"max_of_nth([[1, 2], [3, 4]], 2) should return 4.\"",
        "num_ids": 2406,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        sublist = []\n        for j in range(len(lst[i])):\n            sublist.append(lst[i][j])\n        result.append(sublist)\n    return result",
        "test": "assert merge([]) == []",
        "num_ids": 2269,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    for i in range(len(test_list)):\n        cum_sum.append(cum_sum[-1] + test_list[i])\n    return cum_sum\n",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 2756,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        if len(tup) == 0:\n            continue\n        else:\n            sum = 0\n            for val in tup:\n                sum += val\n            result.append(sum / len(tup))\n    return result\n",
        "test": "assert average_tuple([]) == []",
        "num_ids": 2131,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must have the same length\"\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    \n    return result",
        "test": "assert tuple_modulo((1,2,3,4,5), (10,10,10,10,10)) == (0,0,0,0,0)",
        "num_ids": 2804,
        "indeed": false
    },
    {
        "number": 617,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize variables\n    jumps = 0\n    current_step = 0\n\n    # Iterate through the steps\n    while current_step < steps:\n        # Calculate the distance to the target point\n        distance = abs(d - current_step)\n\n        # Check if we have reached the target point\n        if distance == 0:\n            # We have reached the target point, increment the number of jumps\n            jumps += 1\n            # Move to the next step\n            current_step += 1\n        else:\n            # We need to move to the next step\n            current_step += distance\n\n    # Return the number of jumps\n    return jumps",
        "test": "assert min_Jumps(0, 1) == 0",
        "num_ids": 3112,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Divides two lists element wise.\n    '''\n\n    # create two lists from the input arguments\n    list1 = list(nums1)\n    list2 = list(nums2)\n\n    # create an empty list to store the output\n    result = []\n\n    # iterate over the elements in list1\n    for i in range(len(list1)):\n        # iterate over the elements in list2\n        for j in range(len(list2)):\n            # if the elements are equal, add them to the result list\n            if list1[i] == list2[j]:\n                result.append(list1[i])\n\n    # return the result list\n    return result",
        "test": "assert div_list([],[]) == []",
        "num_ids": 2626,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return test_str.replace(r'\\d+', '', 1).lstrip('0')\n",
        "test": "assert move_num(\"\") == \"\"",
        "num_ids": 2790,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def largest_subset(a):\n    n = len(a)\n    # Initialize variables to keep track of the maximum subset size and the set of elements in each subset\n    max_subset = 1\n    subset = set()\n    # Iterate through each number in the list\n    for i in range(n):\n        # Create a new subset if the size of the current subset is greater than the maximum subset\n        if len(subset) > max_subset:\n            max_subset = len(subset)\n            # Initialize a new subset\n            subset = {a[i]}\n        # Add the current number to the current subset\n        else:\n            subset.add(a[i])\n    return max_subset",
        "test": "assert largest_subset([1,1,1,1,1]) == 1",
        "num_ids": 2900,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n\n    Args:\n        arr1 (list): First sorted list.\n        arr2 (list): Second sorted list.\n        n (int): Size of the two sorted lists.\n\n    Returns:\n        float: The median of the two sorted lists.\n\n    '''\n\n    # Sort the two sorted lists\n    arr1.sort()\n    arr2.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2]) / 2\n    else:\n        return arr1[n//2]",
        "test": "assert get_median([1,1,1], [1,1,1], 2) == 1.0",
        "num_ids": 3206,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the nth power of each number in a list.\n\n    Args:\n    - nums (list): a list of numbers to compute the nth power of\n    - n (int): the power to raise each number to\n\n    Returns:\n    - list: a new list containing the nth powers of each number in nums.\n    \"\"\"\n\n    powers = []\n    for num in nums:\n        powers.append(num ** n)\n\n    return powers",
        "test": "assert nth_nums([1,2,3,4,5],2)==[1,4,9,16,25] # nth_nums([1,2,3,4,5],2) should return [1,4,9,16,25]",
        "num_ids": 2201,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def is_upper(string):\n    '''\n    Returns True if the given string is in uppercase, False otherwise.\n    '''\n    return string.isupper()",
        "test": "assert is_upper('HELLO WORLD')",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 1664,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a Python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    if r == 0:\n        return 0\n    a = math.sqrt(r**2 + 1)\n    b = 2*math.sqrt(r**2 + 1)\n    c = 2*math.sqrt(r**2 + 2)\n    area = (a+b+c)/2\n    \n    return area",
        "test": "assert triangle_area(15) == 89.90721652147176",
        "num_ids": 2541,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a Python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    count = 0\n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            count += 1\n    \n    return count",
        "test": "assert find_First_Missing([1,2,3,4,5,6,7,8,9,10,11]) == 0",
        "num_ids": 2340,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 1552,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        return [ele]\n\n    return sub + [ele]",
        "test": "assert adjac((1, 2)) == [(1, 2)]",
        "num_ids": 2534,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Split the string into a list of words\n    words = text.split()\n\n    # Initialize an empty string to store the modified string\n    modified_string = ''\n\n    # Loop through each word in the list\n    for word in words:\n        # If the word is not a space, add it to the modified string\n        if word!='':\n            modified_string += word + '_'\n\n    # Remove the last underscore from the modified string\n    return modified_string[:-1]\n",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 210,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    return new_list",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1837,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "def pair_xor_Sum(arr, n):\n    # Find the number of pairs in the array\n    n_pairs = len(arr) // 2\n    \n    # Initialize the sum of xor of all pairs\n    xor_sum = 0\n    \n    # Loop through all pairs of numbers and calculate xor of the pair\n    for i in range(n_pairs):\n        xor_sum += arr[i] ^ arr[i+n]\n    \n    return xor_sum",
        "test": "assert pair_xor_Sum([1,2,3,4,5],0) == 0",
        "num_ids": 1423,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    heapq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result",
        "test": "assert heap_sort([]) == []",
        "num_ids": 2008,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # Check if the sale amount is less than or equal to the actual cost\n    if sale_amount <= actual_cost: \n        return True\n    else: \n        return False",
        "test": "assert noprofit_noloss(200,500) == False",
        "num_ids": 1466,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Calculate wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(v / (t - 32))",
        "test": "assert wind_chill(0, 20) == 0",
        "num_ids": 1843,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].islower():\n            result += len(name)\n    return result",
        "test": "assert sample_nam(\"dog\") == 3",
        "num_ids": 1710,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    cleaned_items = re.sub(pattern, '', items)\n    return cleaned_items\n\nitems = \"Hello (this) is a sample string with (parenthesis) around it.\"\ncleaned_items = remove_parenthesis(items)\nprint(cleaned_items)",
        "test": "assert remove_parenthesis(\"hello\") == \"hello\"",
        "num_ids": 1647,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def is_nonagonal(n): \n    '''\n    Function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 1\n    else:\n        a, b = 0, 1\n        while b*b <= n:\n            if b*b > n:\n                break\n            a, b = b, a + b\n        return a",
        "test": "assert is_nonagonal(1) == 1, \"1 is not a nonagonal number.\"",
        "num_ids": 1862,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Check if a given string contains 'z' at the middle of a word, except at the start and end.\n    '''\n    pattern = r'\\b(z.*z|\\b.*z\\b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group() == 'z'\n    else:\n        return False",
        "test": "assert text_match_wordz_middle(\"This is a test string\") == False",
        "num_ids": 2161,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and a position as input and returns a reversed array upto that position.\n    '''\n    output = []\n    for i in range(len(input)-1, -1, -1):\n        output.append(input[i])\n    return output[:k]",
        "test": "assert reverse_Array_Upto_K([], 0) == []",
        "num_ids": 2572,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #create a new tuple and add the dictionary as an item\n    new_tup = tuple(test_tup) + (test_dict,)\n    return new_tup",
        "test": "assert add_dict_to_tuple((\"hello\", \"world\"), {\"key\": \"value\"}) == (\"hello\", \"world\", {\"key\": \"value\"})",
        "num_ids": 1912,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables to keep track of the current path and its cost\n    current_path = []\n    current_cost = 0\n    \n    # Initialize variables to keep track of the maximum average and the current maximum cost\n    max_avg = float('-inf')\n    max_cost = 0\n    \n    # Iterate through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # If we reach a cell with negative cost, skip it\n            if cost[i][j] < 0:\n                continue\n            \n            # Add the current cell to the current path\n            current_path.append((i, j))\n            \n            # Compute the current cost\n            current_cost += cost[i][j]\n            \n            # If the current path has a higher average than the current maximum, update the maximum average and cost\n            if current_cost > max_cost:\n                max_avg = current_cost / len(current_path)\n                max_cost = current_cost\n            \n            # If the current path has a lower average than the maximum average, skip it\n            elif current_cost < max_avg:\n                continue\n            \n            # If we reach the bottom-right cell and the current path has a higher average than the current maximum, update the maximum average and cost\n            if i == len(cost)-1 and j == len(cost[0])-1:\n                if current_cost > max_cost:\n                    max_avg = current_cost / len(current_path)\n                    max_cost = current_cost\n                \n    # Return the maximum average over all paths\n    return max_avg",
        "test": "assert maxAverageOfPath([[100, 100, 100], [100, 100, 100], [100, 100, 100]]) == 100.0",
        "num_ids": 6437,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = []\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students.append((name, height, weight))\n\n    return filtered_students\n",
        "test": "assert filter_data({\"Alice\": (165, 80), \"Bob\": (170, 75), \"Charlie\": (175, 85)}, 185, 85) == []",
        "num_ids": 2882,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            result.append(i)\n    return result",
        "test": "assert count_same_pair([], []) == []",
        "num_ids": 2947,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    while power > 0:\n        digit = base % 10\n        total_sum += digit ** power\n        base //= 10\n        power -= 1\n    return total_sum",
        "test": "assert power_base_sum(2, 3) == 8",
        "num_ids": 2132,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Extracts values between quotation marks \" \" of the given string.\n    '''\n    # Find all quotation marks in the text\n    matches = re.findall(r'\"[^\"]+\"', text1)\n\n    # Extract the values between quotation marks\n    values = []\n    for match in matches:\n        value = match[1:-1]\n        if value!= '':\n            values.append(value)\n\n    # Join the values with spaces\n    result =''.join(values)\n\n    return result",
        "test": "assert extract_quotation('\"\"') == ''",
        "num_ids": 1747,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)",
        "test": "assert multiply_elements(()) == ()",
        "num_ids": 3405,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = []\n    for i in range(len(lst1)):\n        sum.append(lst1[i] + lst2[i])\n    return sum",
        "test": "assert sum_list([], []) == []",
        "num_ids": 1619,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 24,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Remove consecutive duplicates\n    return list(set(nums))",
        "test": "assert consecutive_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2339,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 380,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculates the lateral surface area of a cone given its radius and height.\n    '''\n    area = math.pi * r * r\n    return area",
        "test": "assert lateralsurface_cone(4, 5) == 25",
        "num_ids": 1924,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[.,;]', ':', text)\n\ntext = \"Hello, World! I'm a sentence.\"\nnew_text = replace_specialchar(text)\nprint(new_text)",
        "test": "assert replace_specialchar(\"Hello, World!\") == \"Hello: World!\"",
        "num_ids": 1297,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 4, 5], 6) == -1 # The function should return -1 if the given number is not present in the array.",
        "num_ids": 2184,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    sublist_sum = [0] * len(arr)\n    prod_sum = 1\n    \n    for i in range(len(arr)):\n        sublist_sum[i] = sublist_sum[i-1] + arr[i]\n        \n    for i in range(1, len(arr)):\n        prod_sum *= sublist_sum[i]\n        \n    return prod_sum",
        "test": "assert sum_Of_Subarray_Prod([1]) == 1",
        "num_ids": 2718,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def set_middle_bits(n):\n    # Find the middle bit of the number\n    middle_bit = n & 1\n    \n    # Toggle the middle bit of the number\n    n ^= middle_bit\n    \n    # Find the position of the middle bit in binary representation\n    pos = bin(middle_bit)[2:].count('1')\n    \n    # Copy the toggled number to the original position\n    n = n >> pos << pos\n    \n    return n",
        "test": "assert set_middle_bits(0) == 0b0",
        "num_ids": 4551,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return low",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 5) == 2 # Testing the return value",
        "num_ids": 2227,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "import re\n\nregex = r'^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_str('hello world') == False",
        "num_ids": 1313,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 1430,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    i = 0\n    while True:\n        # Check if i is a triangular number with n digits\n        if sum(int(digit) ** 3 for digit in str(i)) == i ** 3:\n            return i\n        i += 1",
        "test": "assert find_Index(3) == 0",
        "num_ids": 2627,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Convert a tuple into a dictionary based on adjacent elements.\n\n    Args:\n        test_tup (tuple): A tuple containing elements to be converted.\n\n    Returns:\n        dict: A dictionary containing the elements of the tuple as keys and their adjacent elements as values.\n    '''\n\n    # Initialize an empty dictionary\n    result = {}\n\n    # Convert the tuple to a list of elements\n    elements = list(test_tup)\n\n    # Iterate over the list of elements\n    for i in range(len(elements)):\n        # If the current element is not the last one, add it as a key with the current element as the value\n        if i!= len(elements) - 1:\n            result[elements[i]] = elements[i+1]\n\n    return result",
        "test": "assert tuple_to_dict((\"apple\", \"banana\", \"cherry\", \"date\")) == {\"apple\": \"banana\", \"banana\": \"cherry\", \"cherry\": \"date\"}",
        "num_ids": 1832,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def all_Characters_Same(s):\n    count = 0\n    for char in s:\n        if char == s[count]:\n            count += 1\n        else:\n            return False\n    return count == len(s)",
        "test": "assert all_Characters_Same(\"\") == True",
        "num_ids": 1545,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side**2",
        "test": "assert area_tetrahedron(1) == 0.5, \"The area of a tetrahedron with a side of 1 is not equal to 0.5\"",
        "num_ids": 1199,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[-m:] + list[:-m]",
        "test": "assert rotate_right([1], 1) == [1]",
        "num_ids": 2246,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_values = set([None])\n    if test_tup in none_values:\n        return True\n    else:\n        return False",
        "test": "assert check_none((1, 2, 3, 4, 5)) == False",
        "num_ids": 1154,
        "indeed": false
    },
    {
        "number": 745,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digit(num):\n        '''\n        This function checks if a given number is divisible by every digit it contains.\n        '''\n        return all(digit in str(num) for digit in str(num))\n\n    def filter_numbers(startnum, endnum):\n        '''\n        This function filters out the numbers that do not contain every digit it contains.\n        '''\n        return [num for num in range(startnum, endnum + 1) if is_divisible_by_digit(num)]\n\n    return filter_numbers(startnum, endnum)",
        "test": "assert divisible_by_digits(123, 987) # True",
        "num_ids": 5349,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if the angle is larger than 360 degrees\n    if a > 360:\n        return None\n    \n    # Calculate the area of the sector\n    area = math.pi * (r**2)\n    \n    # Return the area of the sector\n    return area\n",
        "test": "assert sector_area(4,90) == None",
        "num_ids": 1166,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def lcs_of_three(X, Y, Z):\n    M = len(X)\n    N = len(Y)\n    O = len(Z)\n\n    L = [[0] * (O + 1) for i in range(M + 1)]\n\n    for i in range(M + 1):\n        for j in range(N + 1):\n            for k in range(O + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                else:\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1], L[i - 1][j - 1])\n\n    # Backtrack to find the longest common subsequence\n    i = M\n    j = N\n    k = O\n\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] == Z[k - 1]:\n            lcs.append(Z[k - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        elif L[i][j - 1] > L[i - 1][j]:\n            j -= 1\n        else:\n            k -= 1\n\n    return ''.join(lcs[::-1])",
        "test": "assert lcs_of_three(\"A\", \"A\", \"A\") == \"A\"",
        "num_ids": 4013,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Regular expression to match capital letters, followed by one or more letters or spaces\n    pattern = re.compile(r'[A-Z][a-z]+\\s+')\n\n    # Replace all matches of the pattern with a single space\n    return re.sub(pattern,'', str1)\n",
        "test": "assert capital_words_spaces(\"this is a test 123\") == \"this is a test 123\"",
        "num_ids": 1820,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a list of strings of numbers numerically.\n\n    Args:\n    nums_str (list of str): A list of strings of numbers.\n\n    Returns:\n    list of str: A list of strings sorted numerically.\n    '''\n    # Convert all strings in the list to integers\n    nums = [int(num) for num in nums_str]\n\n    # Use the sorted() function with a key argument to sort the list numerically\n    sorted_nums = sorted(nums, key=lambda x: x)\n\n    # Convert the sorted list of integers back to a list of strings\n    sorted_str = [str(num) for num in sorted_nums]\n\n    return sorted_str",
        "test": "assert sort_numeric_strings(['5', '3', '1', '4']) == ['1', '3', '4', '5']",
        "num_ids": 2768,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup",
        "test": "assert add_tuple([],[]) == []",
        "num_ids": 1200,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Check if the given array represents a binary heap or not.\n    '''\n    if i == 0:\n        return True\n    elif arr[i-1] > arr[i]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i-1)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)",
        "test": "assert check_min_heap_helper([], 0) == True # Test case 1: Empty array is a min heap",
        "num_ids": 2621,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 27,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # If n is less than or equal to 1, return n\n    if n <= 1:\n        return n\n    \n    # Initialize a variable to store the nth Lucas number\n    lucas = 0\n    \n    # Initialize two variables to store the previous Lucas numbers\n    prev_lucas = 1\n    prev_prev_lucas = 1\n    \n    # Loop until the nth Lucas number is found\n    while lucas < n:\n        # Calculate the nth Lucas number using the formula: lucas = prev_lucas + prev_prev_lucas\n        lucas = prev_lucas + prev_prev_lucas\n        \n        # Update the previous Lucas numbers\n        prev_prev_lucas = prev_lucas\n        prev_lucas = lucas\n    \n    # Return the nth Lucas number\n    return lucas",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 3015,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def min_k(test_list, K):\n    sorted_list = sorted(test_list)\n    min_list = []\n    for i in range(K):\n        min_list.append(sorted_list[i])\n    return min_list",
        "test": "assert min_k([('a', 5), ('b', 3), ('c', 2)], 2) == [('a', 5), ('b', 3)]",
        "num_ids": 2336,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def extract_index_list(l1, l2, l3):\n    # Create an empty list to store common elements\n    common = []\n    \n    # Loop through all lists\n    for i in range(len(l1)):\n        # Check if the element exists in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            # If the element exists, append it to the common list\n            common.append(l1[i])\n    \n    # Return the common elements as a list\n    return common",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 2417,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def second_smallest(numbers):\n    '''\n    Find the second smallest number in a list.\n    '''\n    numbers.sort()  # sort the list in ascending order\n    if len(numbers) < 2:  # if the list has less than 2 elements\n        return None  # return None as there is no second smallest number\n    return numbers[1]  # return the second smallest number",
        "test": "assert second_smallest([10, 8, 6, 4, 2]) == second_smallest([8, 6, 4, 2, 10])",
        "num_ids": 1986,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<![ab])a(?:b){1,}'\n    return bool(re.search(pattern, text, re.IGNORECASE))",
        "test": "assert text_match_zero_one('ababb') == True",
        "num_ids": 3569,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] > test_list[i + 1]:\n            count += 1\n    return count",
        "test": "assert count_reverse_pairs(['a', 'b', 'c', 'd', 'e', 'f']) == 0",
        "num_ids": 1959,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # creating a dictionary to store the list counts\n    list_counts = {}\n\n    # looping through each element of the list\n    for elem in list1:\n\n        # converting the element to a tuple and adding it to the dictionary\n        tuple_elem = (elem, )\n\n        # checking if the tuple already exists in the dictionary\n        if tuple_elem in list_counts:\n\n            # incrementing the count of the tuple in the dictionary\n            list_counts[tuple_elem] += 1\n\n        # if the tuple does not exist in the dictionary, adding it with a count of 1\n        else:\n            list_counts[tuple_elem] = 1\n\n    # returning the dictionary\n    return list_counts",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2955,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    if len(num.split('.')[1]) > 2:\n        return False\n    return True",
        "test": "assert is_decimal(\"3.141592653589794\") == False",
        "num_ids": 2151,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def unique_Element(arr):\n    '''\n    Returns True if the input list of numbers contains only one distinct element, and False otherwise.\n    '''\n    seen_set = set()\n    for num in arr:\n        if num not in seen_set:\n            seen_set.add(num)\n            if len(seen_set) == 1:\n                return True\n    return False",
        "test": "assert unique_Element([1]) == True",
        "num_ids": 1986,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum % 4 == 0 and (monthnum % 100!= 0 or monthnum % 400 == 0):\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(13) == False",
        "num_ids": 1931,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i]-arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([1, 2, 3, 4, 5], 5) == 1",
        "num_ids": 2641,
        "indeed": true
    },
    {
        "number": 764,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 1144,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Returns True if the number is a polite number, False otherwise.\n    '''\n    if n % 10 == 1:\n        return True\n    elif n % 10 == 2:\n        return False\n    else:\n        return True",
        "test": "assert is_polite(1) == True",
        "num_ids": 1899,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([]) == []",
        "num_ids": 2678,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 10) == 0, \"The function should return 0 if there are no pairs whose sum is equal to 10.\"",
        "num_ids": 1783,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff.append(li1[i])\n    return diff",
        "test": "assert Diff([],[]) == [] # Test case 4",
        "num_ids": 1603,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += i**4\n    return result",
        "test": "assert odd_num_sum(1) == 1, \"The sum of fourth power of the first 1 odd natural numbers is incorrect.\"",
        "num_ids": 1754,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    if exp == '':\n        return True\n    \n    stack = deque()\n    \n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0 or stack[-1]!= '(':\n                return False\n            stack.pop()\n        elif char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0 or stack[-1]!= '[':\n                return False\n            stack.pop()\n    \n    if len(stack)!= 0:\n        return False\n    \n    return True",
        "test": "assert check_expression(\"((a+b)*(c-d)))\") == False",
        "num_ids": 1518,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize a new list to store the words with length less than or equal to K\n    filtered_words = []\n\n    # Loop through the words and add them to the filtered list\n    for word in words:\n        if len(word) <= K:\n            filtered_words.append(word)\n\n    # Join the words in the filtered list and return the result\n    return \" \".join(filtered_words)",
        "test": "assert remove_length(\"a\", 0) == \"\"",
        "num_ids": 1612,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    # Find all occurrences of pattern in text\n    matches = re.finditer(pattern, text)\n\n    # Iterate over all matches\n    for match in matches:\n        # Get the substring between matches\n        substring = text[match.start():match.end()]\n        # Check if substring matches pattern\n        if re.search(pattern, substring):\n            print(f\"Match found at position {match.start()} and length {match.end() - match.start()}: {substring}\")",
        "test": "assert occurance_substring(\"Hello World\", \"E\") == None",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def odd_position(nums):\n    '''\n    This function checks whether every odd index in the given list contains odd numbers.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                return False\n    return True",
        "test": "assert odd_position([1, 3, 5, 7, 9]) == False # test case 2",
        "num_ids": 2283,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i:i+2] in vowels:\n            count += 1\n        i += 1\n    return count",
        "test": "assert count_vowels(\"\") == 0, \"An empty string has 0 vowels\"",
        "num_ids": 1963,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty list to store non-repeated elements\n    unique_elements = []\n\n    # Loop through the input list\n    for num in arr:\n        # If the element is not already in the list, add it to the list\n        if num not in unique_elements:\n            unique_elements.append(num)\n\n    # Return the sum of the non-repeated elements\n    return sum(unique_elements)\n",
        "test": "assert find_sum([]) == 0",
        "num_ids": 1952,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Create an empty dictionary to store the count of each element\n    element_count = {}\n\n    # Iterate through the list and update the count of each element in the dictionary\n    for element in list1:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n\n    # Create an empty list to store the sublists\n    sublists = []\n\n    # Iterate through the dictionary and create sublists based on the count of each element\n    for key, value in element_count.items():\n        if value == 1:\n            sublist = [key]\n            sublists.append(sublist)\n        else:\n            for i in range(value - 1):\n                sublist = [key + str(i + 1)]\n                sublists.append(sublist)\n\n    return sublists",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 3532,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def unique_sublists(lst):\n    # Initialize an empty dictionary to store the count of each list\n    counts = {}\n    # Iterate through each element in the list\n    for elem in lst:\n        # Check if the element is already in the dictionary\n        if elem in counts:\n            # If it is, increment the count of that list\n            counts[elem] += 1\n        # If it is not, add it to the dictionary with count 1\n        else:\n            counts[elem] = 1\n    # Return the dictionary of counts\n    return counts",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2614,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Initialize a set of tuples for the given tuple list\n    tuples_set = set(test_list)\n\n    # Create a function to calculate the sum of each tuple in the set\n    def tuple_sum(tuple_tuple):\n        return sum(tuple_tuple)\n\n    # Create a function to find the combinations of sums with tuples in the given tuple list\n    def find_combinations_with_tuples(tuples_set):\n        combinations_with_tuples = []\n        for i in range(1, len(tuples_set)):\n            for j in range(i+1, len(tuples_set)):\n                combinations_with_tuples.append(combinations(tuples_set, i) + combinations(tuples_set, j))\n        return combinations_with_tuples\n\n    # Call the find_combinations_with_tuples function to find the combinations of sums with tuples in the given tuple list\n    combinations_with_tuples = find_combinations_with_tuples(tuples_set)\n\n    return combinations_with_tuples",
        "test": "assert find_combinations([]) == []",
        "num_ids": 4735,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert count_divisors(5) == 1",
        "num_ids": 1810,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    sum_even = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum_odd += arr[i]\n        else:\n            sum_even += arr[i]\n    return sum_odd + sum_even",
        "test": "assert odd_length_sum([]) == 0",
        "num_ids": 2742,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert rgb color to hsv color\n    h, s, v = rgb_to_hsv_helper(r, g, b)\n    return h, s, v\n\ndef rgb_to_hsv_helper(r, g, b):\n    '''\n    Helper function to convert rgb color to hsv color.\n    '''\n    # Check if input values are within the valid range\n    if r < 0 or r > 255 or g < 0 or g > 255 or b < 0 or b > 255:\n        raise ValueError(\"Input values are not within the valid range.\")\n\n    # Calculate the maximum and minimum values of the color channels\n    r_max = max(r, g, b)\n    g_max = max(r_max, g)\n    b_max = max(r_max, b)\n\n    # Calculate the sum of the color channels\n    r_sum = r_max + g_max + b_max\n    g_sum = r_max + g_max + b_max\n    b_sum = r_max + g_max + b_max\n\n    # Calculate the difference between the color channels\n    delta = b_sum - r_sum\n    # If the difference is zero, return the color as black\n    if delta == 0:\n        return 0, 0, 0\n    # Calculate the hue using the maximum difference between the color channels\n    if b_sum == r_sum:\n        h = delta / b_max\n    elif g_sum == r_sum:\n        h = 2.0 + delta / (g_max - b_sum)\n    else:\n        h = 4.0 + delta / (b_max - r_sum)\n\n    # Calculate the saturation using the average difference between the color channels\n    s = r_sum / r_max\n\n    # Calculate the value using the average difference between the color channels\n    v = r_sum / r_max\n\n    return h, s, v",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 5463,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def mul_even_odd(list1):\n    product = 1\n    for number in list1:\n        if number % 2 == 0:\n            product *= number\n    for number in list1:\n        if number % 2!= 0:\n            product *= number\n    return product",
        "test": "assert mul_even_odd([]) == 1",
        "num_ids": 1430,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n\n    Parameters:\n    test_str: string that contains a tuple separated by commas.\n\n    Returns:\n    a tuple containing the elements of the tuple string as integers.\n\n    Example:\n    tuple_str_int(\"1, 2, 3\") -> (1, 2, 3)\n    '''\n\n    # initialize empty list to store integers\n    int_list = []\n\n    # iterate over each element in the tuple string\n    for element in test_str.split(','):\n        # convert each element to an integer and add it to the list\n        int_list.append(int(element))\n\n    # convert the list to a tuple\n    return tuple(int_list)",
        "test": "assert tuple_str_int(\"123\") == (123,)",
        "num_ids": 1752,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    - a: list of integers, sorted in ascending order.\n    - x: integer, the value to search for.\n\n    Returns:\n    - int: the index of the right insertion point for the specified value.\n    '''\n\n    # Find the index of the last element in the list\n    last_index = len(a) - 1\n\n    # Perform binary search to find the insertion point\n    left = 0\n    right = last_index\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if a[mid] < x:\n            left = mid + 1\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            # Found the insertion point\n            return mid\n\n    # Insertion point not found\n    return last_index + 1",
        "test": "assert right_insertion([1, 2, 3, 4, 5], 6) == 5",
        "num_ids": 1998,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba'\n    return re.match(pattern, text) is not None",
        "test": "assert text_match_three(\"pwwkew\") == False, \"text_match_three: pwwkew should not match\"",
        "num_ids": 4062,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    This function takes two arguments - test_list and test_str.\n\n    test_list is a list of values to be used for creating the new tuple.\n    test_str is a string that contains the values to be used for creating the new tuple.\n\n    The function returns a new tuple containing the values from test_list and test_str.\n\n    If test_list and test_str are empty, then the function returns an empty tuple.\n    '''\n\n    if len(test_list) == 0 or len(test_str) == 0:\n        return ()\n\n    new_tuple = tuple(test_list + test_str)\n\n    return new_tuple",
        "test": "assert new_tuple([], '') == ()",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(nums[i] % 2 == 0 for i in range(len(nums)))",
        "test": "assert even_position([1, 3, 5, 7, 9]) == False",
        "num_ids": 2108,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def remove_nested(test_tup):\n    '''\n    Remove tuples from the given tuple.\n\n    Args:\n        test_tup (tuple): Tuple to be removed.\n\n    Returns:\n        tuple: Tuple with removed elements.\n    '''\n    # Initialize an empty list to store the filtered elements\n    filtered_list = []\n\n    # Loop through the elements of the tuple\n    for element in test_tup:\n        # If the element is a tuple itself, recursively call the function on it\n        if isinstance(element, tuple):\n            filtered_list.extend(remove_nested(element))\n        # If the element is not a tuple itself, add it to the filtered list\n        else:\n            filtered_list.append(element)\n\n    # Return the filtered list\n    return tuple(filtered_list)",
        "test": "assert remove_nested((1, (2, (3, (4, 5))))), \"((1, (2, (3, (4, 5))))) should be removed\"",
        "num_ids": 2005,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def count_list(input_list): \n    count = 0\n    for i in range(len(input_list)):\n        count += 1\n    return count",
        "test": "assert count_list([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 1220,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last(arr, x):\n    '''\n    Find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1",
        "test": "assert last([1,2,3,4,5,6],1) == 0 # Test case 4",
        "num_ids": 1542,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba\\w*\\b'\n    return bool(re.search(pattern, text, re.IGNORECASE))",
        "test": "assert text_starta_endb(\"Hello World1234567890\") == False, \"The function returns False for the example text with a space in the middle\"",
        "num_ids": 1605,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total",
        "test": "assert return_sum({'a':1, 'b':2, 'c':3}) == 6",
        "num_ids": 1880,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(x for x in range(1, n+1) if x % 2!= 0)",
        "test": "assert sum_odd(0) == 0",
        "num_ids": 1328,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total",
        "test": "assert _sum([1, 2, 3]) == 6",
        "num_ids": 1019,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0b111111111111111111111111111111111 << d\n    shifted = n & mask\n    shifted |= n >> (32 - d)\n    return shifted",
        "test": "assert left_rotate(0,0) == 0",
        "num_ids": 1398,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('^\\s+', '', text)\n\ntext = \"   this is a test string with spaces   \"\nprint(remove_all_spaces(text))",
        "test": "assert remove_all_spaces(\"\") == \"\"",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1,4):\n        if x == y == z == i:\n            count += 1\n    return count",
        "test": "assert test_three_equal(2,1,3)==0, \"test_three_equal(2,1,3) should return 0\"",
        "num_ids": 1597,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        for k in range(i+1, n):\n            if arr[i] > arr[k]:\n                j = k\n                break\n        else:\n            count += 1\n    return count\n",
        "test": "assert count_rotation([]) == 0",
        "num_ids": 2308,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n\n",
        "test": "assert is_perfect_square(12) == False",
        "num_ids": 1659,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([1, 2, 3]) == True",
        "num_ids": 1541,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input, and returns the list in which the sum of the \n    elements of each list is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    \n    # Iterate over each list in the input list\n    for lst in lists:\n        # Calculate the sum of the elements in the list\n        total = sum(lst)\n        \n        # Check if the sum is greater than the current maximum sum\n        if total > max_sum:\n            max_sum = total\n            result = [lst]\n        elif total == max_sum:\n            result.append(lst)\n            \n    # If no list was found with a maximum sum, return an empty list\n    if not result:\n        return []\n    else:\n        return result",
        "test": "assert max_sum_list([[-1, 2, 3], [4, 5, -6], [7, 8, 9]]) == [[7, 8, 9]]",
        "num_ids": 3079,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize the maximum run length to 1\n    max_run_length = 1\n\n    # Iterate through each character in the string\n    for char in test_str:\n\n        # If the character is uppercase, update the maximum run length\n        if char.isupper():\n            max_run_length = max(max_run_length, len(test_str) - test_str.index(char) + 1)\n\n    # Return the maximum run length\n    return max_run_length",
        "test": "assert max_run_uppercase(\"1234567890\") == 1",
        "num_ids": 2016,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1]) == 1",
        "num_ids": 1560,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K((1,2,3), 2) == True # checking if the tuple (1,2,3) contains 2",
        "num_ids": 1514,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 3), (2, 1)) == False",
        "num_ids": 1959,
        "indeed": true
    }
]