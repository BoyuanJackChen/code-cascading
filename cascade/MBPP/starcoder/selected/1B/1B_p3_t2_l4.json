[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "test": "assert similar_elements([1, 2, 3, 4], [2, 4, 6, 8]) == [2, 4]",
        "num_ids": 452
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    A function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_not_prime(5) == True",
        "num_ids": 330
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap from the given list of numbers\n    max_heap = hq.MaxHeap()\n    for num in nums:\n        hq.heappush(max_heap, num)\n\n    # Retrieve n largest numbers from the heap and return them in descending order\n    return [hq.heappop(max_heap) for _ in range(n)]",
        "test": "assert heap_queue_largest([1,2,3,4],5) == [4,3,2,1]",
        "num_ids": 463
    },
    {
        "number": 6,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two(x):\n    if x > 1 and (x & (x - 1)) == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(10) == False # check if x is not a power of two",
        "num_ids": 306
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n\ntext = \"This is a test string. It has many words. The first word has 3 characters. The second word has 6 characters.\"\nwords = find_char_long(text)\nprint(words)",
        "test": "assert find_char_long(\"hello world\") == ['hello', 'world']",
        "num_ids": 439
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "test": "assert square_nums([1,2,3,4,5]) == [1,4,9,16,25]",
        "num_ids": 282
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Rotations(str):\n    # remove all characters except the first and last ones\n    str = str[1:-1]\n    # initialize an empty list to store the minimum number of rotations\n    rotations = []\n    # iterate through each character of the string\n    for i in range(len(str)):\n        # if the current character is the same as the previous one, \n        # add the previous character to the list of rotations\n        if str[i] == str[i-1]:\n            rotations.append(i)\n    # return the minimum number of rotations\n    return len(rotations)",
        "test": "assert find_Rotations('abcde') == 0, \"The function should return 0 when given the string 'abcde'.\"",
        "num_ids": 523
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence of character\n    s = s.replace(ch, '', 1)\n    \n    # Remove last occurrence of character\n    s = s.replace(ch, '', -1)\n    \n    return s",
        "test": "assert remove_Occ(\"\", \"\") == \"\"",
        "num_ids": 314
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = M.shape[0]\n    col = M.shape[1]\n    for i in range(1, rows):\n        sum_row = sum(M[i, :])\n        for j in range(i):\n            if sum_row < M[j, i]:\n                M[j, i] = sum_row\n                M[i, j] = sum_row\n        M[i, i] = sum_row\n    return M\n",
        "test": "assert sort_matrix([[1, 3, 2], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 919
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n\n    Args:\n    l: float\n        Length of the base of the triangular prism.\n    b: float\n        Base of the triangular prism.\n    h: float\n        Height of the base of the triangular prism.\n\n    Returns:\n    float:\n        Volume of the triangular prism.\n    \"\"\"\n    volume = (l * b * h) / 6\n    return volume\n",
        "test": "assert find_Volume(3,4,5) == 12",
        "num_ids": 320
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function returns True if the input string contains sequences of lowercase letters joined with an underscore,\n    and False otherwise.\n    '''\n    pattern = r'\\b[a-z][a-z_]*\\b'\n    return bool(re.search(pattern, text, re.IGNORECASE))\n\ntext = \"The quick brown fox jumps over the lazy dog\"\nif text_lowercase_underscore(text):\n    print(\"The string contains lowercase letters joined with an underscore.\")\nelse:\n    print(\"The string does not contain lowercase letters joined with an underscore.\")",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 445
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter",
        "test": "assert square_perimeter(3) == 14",
        "num_ids": 200
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for i in range(NO_OF_CHARS):\n        if string[i] not in string[i:NO_OF_CHARS]:\n            result.append(string[i])\n    return result",
        "test": "assert str_to_list(\"world\") == [\"w\", \"o\", \"r\", \"l\", \"d\"]",
        "num_ids": 417
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # loop through each element in the array\n    for i in range(len(arraynums)):\n        # check if any element in the array is equal to the current element\n        if arraynums[i] == arraynums[i+1]:\n            # if there is a duplicate element, return True\n            return True\n    # if there are no duplicates, return False\n    return False",
        "test": "assert test_duplicate([1,2,2,3,3,4]) == True",
        "num_ids": 388
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 1:\n        return False\n    elif x % 3 == 0:\n        return True\n    elif x % 5 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(2) == False",
        "num_ids": 378
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Base case: if the number is less than 1, it is not a palindrome\n    if num < 1:\n        return False\n\n    # Initialize two variables to keep track of the original number and its reverse\n    original = num\n    reverse = original * 2 - num\n\n    # Check if the original number is equal to its reverse\n    if original == reverse:\n        return True\n\n    # If the original number is not equal to its reverse, check if it is one less than twice its reverse\n    while reverse > original:\n        original += 1\n        reverse -= 1\n\n    # If the original number is one less than twice its reverse, it is a palindrome\n    return original == num",
        "test": "assert rev(123) == True # Input: 123",
        "num_ids": 388
    },
    {
        "number": 57,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_Max_Num(arr):\n    max_num = arr[0]\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num",
        "test": "assert find_Max_Num([1,2,3]) == 3",
        "num_ids": 354
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    elif x == 0 and y == 0:\n        return True\n    elif x < 0 and y > 0:\n        return False\n    elif x > 0 and y < 0:\n        return False\n    else:\n        return None",
        "test": "assert opposite_Signs(2,3) == True",
        "num_ids": 434
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_octagonal(n): \n    '''\n    Function to find the nth octagonal number.\n    '''\n    if n % 2 == 0:\n        # Finding the square of the base (2n)\n        square_of_base = 2 * n\n        # Finding the difference between the square and 3\n        difference = square_of_base - 3\n        # Using the fact that the square of the base is divisible by 3, \n        # and the difference is a positive integer, \n        # we can check if the difference is even or odd.\n        if difference % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert is_octagonal(4) == False",
        "num_ids": 405
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize an empty dictionary to store the count of substrings\n    count_dict = defaultdict(int)\n\n    # Initialize the sum variable to zero\n    sum_digits = 0\n\n    # Loop through each character in the string\n    for char in s:\n        # Add the digit at the end of the string to the sum_digits variable\n        sum_digits += int(char)\n\n    # Loop through each character in the string again\n    for i in range(len(s)):\n        # Add the digit at the current index to the sum_digits variable\n        sum_digits += int(s[i])\n\n    # Check if the sum of digits is equal to the length of the string\n    if sum_digits == len(s):\n        # If it is, increment the count of substrings in the dictionary\n        count_dict[len(s)] += 1\n\n    # Return the count of substrings in the dictionary\n    return count_dict",
        "test": "assert count_Substrings(\"hello\") == 5, \"count_Substrings('hello') should return 5\"",
        "num_ids": 643
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "test": "assert smallest_num([1, 2, 3]) == 1",
        "num_ids": 281
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # define a function to calculate the maximum difference between pairs\n    def max_difference_function(pair):\n        # find the indices of the two elements in the pair\n        i, j = pair\n        # calculate the difference between the two elements\n        difference = abs(test_list[i] - test_list[j])\n        # return the maximum difference found so far\n        return max(difference, max_difference_function(pair[::-1]))\n\n    # define the initial maximum difference\n    max_diff = float('-inf')\n\n    # loop through the pairs in the test list\n    for pair in test_list:\n        # call the function to calculate the maximum difference\n        max_diff = max(max_diff, max_difference_function(pair))\n\n    # return the maximum difference found\n    return max_diff",
        "test": "assert max_difference([(1,2), (3,4), (5,6), (7,8), (9,10)]) == 12",
        "num_ids": 674
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks([('Math', 85), ('Science', 90), ('English', 90), ('History', 85)]) == [('Math', 85), ('Science', 90), ('English', 90), ('History', 85)]",
        "num_ids": 466
    },
    {
        "number": 65,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum([recursive_list_sum(item) for item in data_list])\n    else:\n        return data_list",
        "test": "assert recursive_list_sum([1]) == 1",
        "num_ids": 412
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 284
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n - the number of elements in the set\n\n    Returns:\n    The number of ways to partition the set.\n    '''\n\n    # base cases\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    # recursive case\n    count = 0\n    for i in range(2, n+1):\n        count += bell_number(n-i)\n\n    return count\n",
        "test": "assert bell_number(1) == 1",
        "num_ids": 405
    },
    {
        "number": 68,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    if len(A) == 1:\n        return True\n    elif len(A) == 2:\n        return A[0] >= A[1]\n    else:\n        prev_val = A[0]\n        for i in range(1, len(A)):\n            if A[i] <= prev_val:\n                return False\n            else:\n                prev_val = A[i]\n        return True",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True",
        "num_ids": 415
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Return True if the list l contains the given sublist s, False otherwise.\n    '''\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True",
        "test": "assert is_sublist([1, 2, 3], [1, 2, 3]) == True",
        "num_ids": 343
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True",
        "test": "assert find_equal_tuple(()) == True",
        "num_ids": 322
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using the combinatorial sorting method.\n    '''\n    for i in range(len(nums)):\n        # Find the smallest element in the unsorted portion\n        min_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        # Swap the smallest element with the current element\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    return nums",
        "test": "assert comb_sort([1, 5, 3, 8, 2]) == [1, 2, 3, 5, 8]",
        "num_ids": 707
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Function to check whether the given number can be represented as the difference of two squares or not.\n    def check_difference(a, b):\n        # Check if the difference between the squares of a and b is equal to the square of n.\n        if a**2 - b**2 == n**2:\n            # If the difference is equal to the square of n, return True.\n            return True\n        else:\n            # If the difference is not equal to the square of n, return False.\n            return False\n    \n    # Check if the given number is between 1 and 100.\n    if 1 <= n <= 100:\n        # If the given number is between 1 and 100, return True if it can be represented as the difference of two squares, otherwise return False.\n        return check_difference(n, n**2) or check_difference(n, n**2 + 1)\n    else:\n        # If the given number is outside the range of 1 to 100, return False.\n        return False",
        "test": "assert dif_Square(0) == 0",
        "num_ids": 561
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    for color in colors:\n        if color not in patterns:\n            return False\n    return True",
        "test": "assert is_samepatterns([\"red\",\"green\",\"blue\"], [\"red\",\"blue\"]) == False",
        "num_ids": 389
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    \n    # create a list of tuples which have all elements divisible by k from the given list of tuples\n    result = []\n    for tup in test_list:\n        if freq_dict[tup] % K == 0:\n            result.append(tup)\n    \n    return result",
        "test": "assert find_tuples([(\"apple\", 2), (\"banana\", 3), (\"cherry\", 4)], 2) == [(\"apple\", 2)]",
        "num_ids": 572
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n < 11:\n        return False\n    if n % 10 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(7) == False, \"is_Diff should return False for 7\"",
        "num_ids": 277
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    if len(word) == 1:\n        return \"Word is empty\"\n    elif len(word) % 2 == 1:\n        return \"Word is odd\"\n    else:\n        return \"Word is even\"",
        "test": "assert word_len(\"The quick brown fox jumps over the lazy dog\") == 11 # length of \"The quick brown fox jumps over the lazy dog\" should be 11",
        "num_ids": 393
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tetrahedral_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        tetrahedral_number = 4*tetrahedral_number(n-1) + 3\n        tetrahedral_number = 4*tetrahedral_number(n-2) + 5\n        return tetrahedral_number",
        "test": "assert tetrahedral_number(1) == 1, \"The first tetrahedral number is 1.\"",
        "num_ids": 427
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Function to find the volume of a sphere.\n    '''\n    volume = math.pi * r**3\n    return volume",
        "test": "assert volume_sphere(1) == 3.141592653589793",
        "num_ids": 288
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_val = 0\n    for i in strr:\n        ascii_val += ord(i)\n    return chr(ascii_val % 26)",
        "test": "assert get_Char(\"I am a test\") == \"a\"",
        "num_ids": 268
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sequence(n):\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]",
        "test": "assert sequence(2) == 1",
        "num_ids": 287
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4/3 * math.pi * r**3",
        "test": "assert surfacearea_sphere(5) == 24",
        "num_ids": 408
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    else:\n        return (3 * n + 1) // 2 + centered_hexagonal_number(n - 1)",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 532
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({\"a\":1,\"b\":2,\"c\":3}, {\"d\":4,\"e\":5,\"f\":6}, {\"g\":7,\"h\":8,\"i\":9}) == {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5,\"f\":6,\"g\":7,\"h\":8,\"i\":9}",
        "num_ids": 455
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef freq_count(list1):\n    '''\n    Given a list of elements, return a dictionary of their frequencies.\n    '''\n    freq = Counter(list1)\n    return freq",
        "test": "assert freq_count(['apple', 'banana', 'cherry', 'apple', 'orange']) == {'apple': 2, 'banana': 1, 'cherry': 1, 'orange': 1}",
        "num_ids": 420
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    closest = None\n    diff = float('inf')\n\n    for i in range(N):\n        temp_diff = abs(N - i)\n        if temp_diff < diff:\n            closest = i\n            diff = temp_diff\n\n    return closest",
        "test": "assert closest_num(10) == 9",
        "num_ids": 300
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    max_word = ''\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_word = word\n    return max_word",
        "test": "assert len_log(['apple', 'banana']) == 5",
        "num_ids": 370
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False",
        "test": "assert find_substring(\"abcdefg\", \"xyz\") == False # False",
        "num_ids": 266
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef is_undulating(n):\n    square_root = math.sqrt(n)\n    difference = n - square_root\n    if difference < 1e-10:\n        return True\n    else:\n        return False",
        "test": "assert is_undulating(12) == False, \"The number 12 is not undulating.\"",
        "num_ids": 271
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,3) == 8",
        "num_ids": 252
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    result = None\n    for t in test_list:\n        if result is None or t[1] < result[1]:\n            result = t\n    return result[0] if result is not None else None",
        "test": "assert index_minimum([]) == None # empty list",
        "num_ids": 517
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 1:  # Base case: if the list has only one element, return it\n        return len(lst[0])  # Return its length\n\n    min_length = float('inf')  # Initialize the min_length variable to infinity\n\n    for sublist in lst:  # Iterate over each sublist in the list\n        if len(sublist) < min_length:  # If the length of a sublist is shorter than the current min_length\n            min_length = len(sublist)  # Update the min_length variable with the new length\n\n    return min_length",
        "test": "assert Find_Min_Length([[]]) == 0",
        "num_ids": 541
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def divisor(n):\n    # Count the number of divisors\n    count = 1\n    # Loop through all numbers from 1 to n-1\n    for i in range(1, n+1):\n        # If i is divisible by any number between 1 and n/i, then it is a divisor\n        if n % i == 0:\n            count += 1\n    # Return the count of divisors\n    return count",
        "test": "assert divisor(15) == 5 #Correct divisor",
        "num_ids": 291
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # Create a dictionary to store the frequency of each element\n    frequency_dict = {}\n    \n    # Loop through the flattened list and update the frequency dictionary\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    \n    return frequency_dict",
        "test": "assert frequency_lists([1, 2, 3, 4, 5]) == {'1': 1, '2': 1, '3': 1, '4': 1, '5': 1}",
        "num_ids": 558
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def multiply_num(numbers):\n    # multiply all the numbers in the list and return the result\n    result = 1\n    for number in numbers:\n        result *= number\n    return result\n",
        "test": "assert multiply_num([1, 2, 3]) == 6",
        "num_ids": 358
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty string to store the binary representation\n    binary = ''\n    # iterate over each digit of the decimal number\n    for digit in str(n):\n        # convert each digit to its binary equivalent and add it to the string\n        binary += bin(int(digit))[2:]\n    # return the binary representation of the decimal number\n    return binary",
        "test": "assert decimal_to_binary(10) == '10'",
        "num_ids": 419
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input is a positive integer\n    if not num.is_integer():\n        print(\"Error: Please input a positive integer.\")\n        sys.exit()\n\n    # Convert the input to an integer\n    num = int(num)\n\n    # Check if the input is a palindrome\n    if str(num) == str(num)[::-1]:\n        # If the input is a palindrome, return its next smallest palindrome\n        return next_smallest_palindrome(num+1)\n    else:\n        # If the input is not a palindrome, return its smallest palindrome\n        return num\n",
        "test": "assert next_smallest_palindrome(121) == 121",
        "num_ids": 723
    },
    {
        "number": 101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def kth_element(arr, k):\n    '''\n    Find the kth element in the given array using 1-based indexing.\n\n    Parameters:\n    arr (list): list of elements to find the kth element of.\n    k (int): index of the kth element to find.\n\n    Returns:\n    int: the kth element of the array.\n\n    Raises:\n    ValueError: if k is not an integer or k is greater than or equal to the length of the array.\n    '''\n    if not isinstance(k, int):\n        raise ValueError(\"k must be an integer.\")\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be a positive integer less than or equal to the length of the array.\")\n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 2) == 3",
        "num_ids": 412
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word\n    new_words = [word.capitalize() for word in words]\n\n    # Join the words back together with the first letter in uppercase\n    return ''.join(new_words)",
        "test": "assert snake_to_camel('hello_world') == 'HelloWorld'",
        "num_ids": 376
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Check if n and m are positive integers\n    if n <= 0 or m <= 0:\n        return \"Invalid input. Please enter positive integers.\"\n\n    # Calculate the sum of the first m terms of the series\n    a = (1 + (2 * m + 1) ** (1/2)) ** (1/m)\n\n    # Return the Eulerian number a(n, m)\n    return a",
        "test": "assert eulerian_num(15, 10) == 35",
        "num_ids": 449
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def sort_sublists(input_list):\n    sublists = []\n    for sublist in input_list:\n        if sublist:\n            sublists.append(sublist)\n    return sublists",
        "test": "assert sort_sublists([[''], [''], [''], [''], ['']]) == [[''], [''], [''], [''], ['']]",
        "num_ids": 634
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "test": "assert count([False, False, False, True, True]) == 2",
        "num_ids": 176
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == [5, 7, 9]",
        "num_ids": 262
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Create a list to store the merged sorted list\n    merged_list = []\n\n    # Push the first number into the merged list\n    merged_list.append(num1)\n\n    # Loop through the remaining numbers and push them into the merged list\n    while len(num2) > 0 and len(num3) > 0:\n        if num2[0] < num3[0]:\n            merged_list.append(num2[0])\n            num2 = num2[1:]\n        else:\n            merged_list.append(num3[0])\n            num3 = num3[1:]\n\n    # Push the remaining numbers from the input lists\n    while len(num2) > 0:\n        merged_list.append(num2[0])\n        num2 = num2[1:]\n    while len(num3) > 0:\n        merged_list.append(num3[0])\n        num3 = num3[1:]\n\n    # Return the merged sorted list\n    return merged_list",
        "test": "assert merge_sorted_list([1,3,5,7,9], [4,6,8,2,0], [9,7,5,3,1]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 819
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Define the binary string\n    binary_str = s\n    \n    # Define the rotation count\n    count = n\n    \n    # Initialize the count to 0\n    num_of_odd = 0\n    \n    # Loop through the binary string and count the number of odd numbers\n    for i in range(len(binary_str)):\n        if binary_str[i] == '1':\n            num_of_odd += 1\n        if num_of_odd == count:\n            # Exit the loop if the count is reached\n            break\n    \n    return num_of_odd",
        "test": "assert odd_Equivalent('101010', 3) == 3, \"The function should find the number of numbers with an odd value when rotating a binary string of length 3.\"",
        "num_ids": 546
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Create an empty dictionary to store the common elements\n    common_dict = {}\n\n    # Iterate over each element in the nested list and check if it exists in the common_dict\n    for element in nestedlist:\n        if element in common_dict:\n            # If the element already exists in the common_dict, add it to the output list\n            common_dict[element].append(element)\n        else:\n            # If the element does not exist in the common_dict, add it to the common_dict\n            common_dict[element] = [element]\n\n    # Create a set from the common_dict values to get the common elements\n    common_set = set(common_dict.values())\n\n    # Convert the set to a list to get the common elements in the original nested list\n    common_list = list(common_set)\n\n    # Return the common elements in the original nested list\n    return common_list",
        "test": "assert common_in_nested_lists([1,2,[3,4,[5,6]]]) == [3, 4, 5, 6]",
        "num_ids": 514
    },
    {
        "number": 113,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int_num = int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"42\") == True",
        "num_ids": 217
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d.keys()!= set():\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 252
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for i in range(len(nums)):\n        num += nums[i]\n    return num",
        "test": "assert tuple_to_int((1,2,3)) == 6",
        "num_ids": 190
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for list_ in test_list:\n        for item in list_:\n            if isinstance(item, float):\n                float_list.append(item)\n    return float_list",
        "test": "assert list_to_float([]) == []",
        "num_ids": 483
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def string_to_list(string):\n    '''\n    Convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"abc 123 def\") == [\"abc\", \"123\", \"def\"]",
        "num_ids": 223
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return num\n        seen[num] = True\n    return None",
        "test": "assert search([1, 2, 3, 3, 4, 5]) == 3",
        "num_ids": 295
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize the maximum absolute product to negative infinity\n    max_product = -float('inf')\n\n    # Iterate through the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Find the absolute difference between the numbers in pairs of tuples\n            diff = abs(list1[i][0] - list1[j][0]) + abs(list1[i][1] - list1[j][1])\n\n            # If the absolute difference is greater than the maximum absolute product, update it\n            if diff > max_product:\n                max_product = diff\n\n    # Return the maximum absolute product\n    return max_product",
        "test": "assert max_product_tuple([(-3, -2), (1, -3), (-2, 4), (3, 1)]) == (-2, 6)",
        "num_ids": 746
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list of all the amicable numbers from 1 to the limit\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        is_amicable = True\n        for j in range(1, int(i**0.5)+1):\n            if i % j == 0:\n                is_amicable = False\n                break\n        if is_amicable:\n            amicable_numbers.append(i)\n\n    # Return the sum of all the amicable numbers\n    return sum(amicable_numbers)",
        "test": "assert amicable_numbers_sum(10) == 28",
        "num_ids": 459
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the magnitude of the complex number\n    magnitude = abs(a) + abs(b)\n\n    # Calculate the angle of the complex number\n    angle = cmath.phase(a / magnitude)\n\n    # Return the angle in radians\n    return angle",
        "test": "assert angle_complex(1,1) == 0, \"The angle of (1,1) is not 0.\"",
        "num_ids": 460
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_length(string): \n    max_diff = 0\n    for i in range(len(string)):\n        count = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count += 1\n            else:\n                count -= 1\n                if count < 0:\n                    count = 0\n            max_diff = max(max_diff, abs(count))\n    return max_diff",
        "test": "assert find_length('01111011') == 2",
        "num_ids": 608
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # loop through all numbers from 1 to the sum of a and b\n    for i in range(1, a+b+1):\n        # check if i is divisible by both a and b\n        if i % a == 0 and i % b == 0:\n            # check if the sum of i and both a and b is greater than i\n            if sum(i, a) > i and sum(i, b) > i:\n                # add i to the sum of common divisors\n                return sum(i, a) + sum(i, b)",
        "test": "assert sum(36, 42) == 28",
        "num_ids": 504
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(3, 4) == 12",
        "num_ids": 183
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two parameters: the length of the words to be compared to and the list of words.\n    The function returns a list of words that are longer than n characters from the list.\n    '''\n\n    words = str.split()\n    result = []\n\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n\n    return result",
        "test": "assert long_words(4, 'hello world') == ['hello', 'world']",
        "num_ids": 366
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def magic_square_test(my_matrix):\n    rows = len(my_matrix)\n    if rows!= len(my_matrix[0]):\n        return False\n    \n    for row in my_matrix:\n        if len(row)!= rows:\n            return False\n        \n        if not row.count(row[0]):\n            return False\n    \n    return True",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == True",
        "num_ids": 566
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        count = nums.count(num)\n        if count > max_count:\n            max_count = count\n            max_item = num\n            \n    return max_item",
        "test": "assert max_occurrences([1,2,2,3,3,3,3,3]) == 3",
        "num_ids": 573
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str += char\n    return new_str",
        "test": "assert reverse_vowels(\"A man, a plan, a canal: Panama\") == \"nam ap si nlanac a\"",
        "num_ids": 353
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string(\"hello\") == \"hello\"",
        "num_ids": 201
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)",
        "test": "assert sum_negativenum([-1, -2, -3, -4, -5]) == -10",
        "num_ids": 338
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 2\n    c = 3\n    d = 5\n    e = 6\n    \n    # Loop through numbers from 0 to n-1\n    for i in range(n):\n        # Calculate the current hexagonal number\n        current_num = a + b + c + d + e\n        # Check if the current number is the nth hexagonal number\n        if current_num == n * i:\n            # Return the hexagonal number\n            return current_num\n    \n    # If the nth hexagonal number is not found, return None\n    return None",
        "test": "assert hexagonal_num(10) == 184",
        "num_ids": 571
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # create an integer array of zeros\n    zeros = array('i', [0]*len(nums))\n\n    # count the number of zeroes in the array\n    count_zeros = 0\n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n\n    # count the number of non-zeroes in the array\n    count_ones = 0\n    for num in nums:\n        if num!= 0:\n            count_ones += 1\n\n    # calculate the ratio\n    return (count_zeros / count_ones) if count_zeros > 0 else 0.0",
        "test": "assert zero_count([1, 0, 0, 0, 1]) == 0.25",
        "num_ids": 559
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        total = 0\n        while n > 0:\n            total += n\n            n -= 2\n        return total == 0",
        "test": "assert is_Sum_Of_Powers_Of_Two(16) == False",
        "num_ids": 419
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference\n",
        "test": "assert circle_circumference(3.14) == 6.28",
        "num_ids": 299
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for i in test_list:\n        if isinstance(i, list):\n            flat_list.extend(extract_singly(i))\n        else:\n            flat_list.append(i)\n    return set(flat_list)\n",
        "test": "assert extract_singly([[[1,2], [3,4]], [[5,6], [7,8]]]) == {1, 2, 3, 4, 5, 6, 7, 8}",
        "num_ids": 450
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def pancake_sort(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums",
        "test": "assert pancake_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 559
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[2,3,3],[3,4,5]) == 0, \"Count of same pair of items at position 1 and 3 are equal\"",
        "num_ids": 496
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, tuple):\n            count += 1\n    return count",
        "test": "assert find_lists((1, 2, 3)) == 1, \"The function should return 1 for a tuple with one element\"",
        "num_ids": 288
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    max_index = 1\n    \n    for i in range(2, len(arr)):\n        diff = arr[i] - arr[i-1]\n        \n        if diff > max_diff:\n            max_diff = diff\n            max_index = i\n    \n    return max_index",
        "test": "assert max_Abs_Diff([1,-2,-3,4,5]) == 3",
        "num_ids": 404
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a, b, and n are positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n\n    # Initialize variables\n    x = y = None\n\n    # Calculate the solution for x and y\n    if a * b == n:\n        x = n // a\n        y = n - x * a\n    elif b * a == n:\n        y = n // b\n        x = n - y * b\n    elif a * b > n:\n        x = n // a\n        y = n - x * a\n    else:\n        y = n // b\n        x = n - y * b\n\n    # Return a tuple of x and y, or None if no solution exists\n    return (x, y) if x and y else None",
        "test": "assert find_solution(5, 3, 10) == None",
        "num_ids": 586
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))",
        "test": "assert remove_elements([], []) == []",
        "num_ids": 378
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_series(n):\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum",
        "test": "assert sum_series(11) == 64, \"The correct sum of the series is 64\"",
        "num_ids": 341
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = pi * (s * s) / 2\n    return area",
        "test": "assert area_polygon(4, 6) == 16.0",
        "num_ids": 367
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        divisors = []\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                divisors.append(i)\n                if i!= n // i:\n                    divisors.append(n // i)\n        if len(divisors) == 2 and divisors[0] + divisors[1] == n:\n            return True\n        elif len(divisors) == 1 and divisors[0] == n:\n            return True\n        else:\n            return False",
        "test": "assert div_sum(7) == 3",
        "num_ids": 693
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1.lower():\n        if str1.lower().count(char) == 1:\n            count += 1\n    return count",
        "test": "assert count_char_position(\"\") == 0",
        "num_ids": 584
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2",
        "num_ids": 519
    },
    {
        "number": 167,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the next power of 2 greater than or equal to n\n    next_pow_of_2 = 1\n    while next_pow_of_2 < n:\n        next_pow_of_2 <<= 1\n\n    # Return the smallest power of 2 greater than or equal to n\n    return next_pow_of_2",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 920
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for item in a:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert frequency(1, [1, 2, 3, 4, 4, 5]) == 2",
        "num_ids": 279
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n\n    Parameters:\n    list1 (list): A list of numbers.\n    m (int): The starting index of the range.\n    n (int): The ending index of the range.\n\n    Returns:\n    int: The sum of numbers within the range.\n    '''\n\n    # Create a new list to store the sum\n    sum_list = []\n\n    # Iterate through the list and add each number to the sum_list\n    for i in range(m, n+1):\n        sum_list.append(list1[i-m])\n\n    # Return the sum of the list\n    return sum(sum_list)",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 5) == 6",
        "num_ids": 545
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 2 * a * (a + b + c + d)\n    return perimeter",
        "test": "assert perimeter_pentagon(4) == 20 # test the perimeter of a regular pentagon with side length 4",
        "num_ids": 385
    },
    {
        "number": 172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s' or char == 'd' or char == 't' or char == 'l':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"programming is fun\") == 6",
        "num_ids": 340
    },
    {
        "number": 222,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # get the type of the first element of the tuple\n    first_element_type = type(test_tuple[0])\n\n    # loop through the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # get the type of the current element\n        element_type = type(element)\n\n        # if the types are different, return False\n        if element_type!= first_element_type:\n            return False\n\n    # if all the types are same, return True\n    return True",
        "test": "assert check_type(('1', 2, '3')) is False",
        "num_ids": 410
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_majority(arr, n, x):\n    # Initialize a count of the number of elements in the array\n    count = 0\n    \n    # Iterate through the array and check if the current element matches the given element\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            \n    # If the count is greater than n/2, then the element is the majority element\n    if count > n//2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1, 2, 2, 2, 2], 5, 3) == False",
        "num_ids": 478
    },
    {
        "number": 224,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1 # Get the rightmost 1-bit of the number\n        n >>= 1 # Shift the number left by one bit\n    return count",
        "test": "assert count_Set_Bits(0) == 0, \"count_Set_Bits(0) should return 0 for 0\"",
        "num_ids": 355
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    odd_index_list = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_index_list.append(i)\n    return ''.join([str[i] for i in odd_index_list])",
        "test": "assert odd_values_string(\"Python is awesome!\") == \"Python i\"",
        "num_ids": 321
    },
    {
        "number": 227,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(2,5,8) == 2",
        "num_ids": 224
    },
    {
        "number": 228,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # check if both n and r are positive integers\n    if not isinstance(n, int) or not isinstance(r, int) or n <= 0 or r <= 0:\n        return False\n\n    # check if l is less than or equal to r\n    if l > r:\n        return False\n\n    # initialize a variable to store the number of set bits in the range\n    count = 0\n\n    # check each bit in the range\n    for i in range(l, r + 1):\n        # check if the bit is set in the current number of set bits\n        if n & (1 << i):\n            count += 1\n\n    # if all the bits in the range are set, return True\n    if count == n:\n        return True\n    # otherwise, return False\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(3,2,4) == False",
        "num_ids": 587
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create a new array to store the negative and positive elements\n    negative_arr = []\n    positive_arr = []\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative_arr.append(arr[i])\n        else:\n            positive_arr.append(arr[i])\n\n    # Sort the negative and positive elements\n    negative_arr.sort()\n    positive_arr.sort()\n\n    # Copy the sorted negative and positive elements to the new array\n    for i in range(n):\n        if i < len(negative_arr):\n            arr[i] = negative_arr[i]\n        else:\n            arr[i] = positive_arr[0]\n\n    return arr\n",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 3) == [1, 3, 2, 4, 5]",
        "num_ids": 987
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"char\")",
        "test": "assert replace_blank(\"\", \"\") == \"\"",
        "num_ids": 220
    },
    {
        "number": 232,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([1, 2, 3, 4, 5], 1) == [5]",
        "num_ids": 489
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area",
        "test": "assert lateralsuface_cylinder(5,3) == 30",
        "num_ids": 264
    },
    {
        "number": 234,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume",
        "test": "assert volume_cube(5) == 125",
        "num_ids": 1179
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the sum of even bits to 0\n    even_sum = 0\n    \n    # Iterate through each bit in the number\n    for bit in bin(n): \n        # Check if the current bit is even\n        if bit == '0b1': \n            # Add the even bit sum to the running total\n            even_sum += 1\n    \n    # Return the even bit sum\n    return even_sum",
        "test": "assert even_bit_set_number(25) == 321, \"The function should set all even bits of 25 to 3.\"",
        "num_ids": 458
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the test_list\n    count_obj = Counter(test_list)\n    \n    # Create a dictionary to store the counts\n    counts = {}\n    \n    # Loop through each tuple in the test_list and add it to the dictionary with its count\n    for key in count_obj.keys():\n        counts[key] = count_obj[key]\n    \n    return counts",
        "test": "assert check_occurences([(1, 2), (2, 3), (3, 4), (4, 1), (4, 5)]) == {1: 3, 2: 2, 3: 2, 4: 1, 4: 1}",
        "num_ids": 644
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if not str:\n        return 0\n    count = 0\n    for i in range(len(str)):\n        if str[i] == '':\n            continue\n        count += 1\n        for j in range(i + 1, len(str) + 1):\n            if j <= len(str) and str[j-1] == str[j]:\n                count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 550
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a counter variable to keep track of the number of possible sequences\n    count = 0\n    \n    # Loop through all possible sequences of length n\n    for i in range(1, n+1):\n        \n        # Check if each element in the sequence is within the range of m and greater than or equal to twice the previous element\n        is_valid = True\n        for j in range(i-1):\n            if m-j < 2*i[j] or i[j] < 2*i[j-1]:\n                is_valid = False\n                break\n        \n        # If the sequence is valid, increment the counter\n        if is_valid:\n            count += 1\n    \n    return count",
        "test": "assert get_total_number_of_sequences(2, 4) == 24, \"Incorrect number of sequences\"",
        "num_ids": 606
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1",
        "test": "assert replace_list([1,2,3,4,5], [2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 324
    },
    {
        "number": 242,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n\n    # initialize a variable to store the total number of characters\n    count = 0\n\n    # iterate through each character in the string\n    for char in str1:\n        # increment the count by 1 for each character\n        count += 1\n\n    # return the total count\n    return count",
        "test": "assert count_charac(\"Hello World\") == 11",
        "num_ids": 227
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a Python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Calculate the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # Check if the square root is a perfect square\n    if sqrt_N * sqrt_N == N:\n        return sqrt_N * sqrt_N\n    else:\n        # If the square root is not a perfect square, continue iterating until we find one\n        while sqrt_N * sqrt_N!= N:\n            sqrt_N += 1\n\n        # Check if we found a perfect square after iterating N times\n        return sqrt_N * sqrt_N",
        "test": "assert next_Perfect_Square(20) == 22",
        "num_ids": 1013
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    \n    for i in range(2, n):\n        dp[i] = max(dp[i-1], arr[i] + dp[i-2])\n        \n    return dp[-1]",
        "test": "assert max_sum([1, 5, 3, 9, 4]) == 13",
        "num_ids": 464
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number < 0:\n        return None\n    else:\n        while number % 2 == 0:\n            number /= 2\n        x = 1\n        while number % 2 == 0:\n            x += 1\n            number //= 2\n        return x",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 438
    },
    {
        "number": 247,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    if n == 0:\n        return 0\n    # initialize a list to store the longest palindromic subsequence in the string\n    dp = [1] * n\n    # initialize the first two rows of the table\n    dp[0] = 1\n    dp[1] = 1\n    # loop through the remaining rows\n    for i in range(2, n):\n        # if the current character is already a palindrome, then set its length to the current index + 1\n        if str[i-1] == str[i]:\n            dp[i] = dp[i-1] + 2\n        # otherwise, set its length to 1\n        else:\n            dp[i] = 1\n    # find the length of the longest palindromic subsequence in the string\n    return max(dp)\n",
        "test": "assert lps(\"\") == 0",
        "num_ids": 681
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum_of_n = 1\n    for i in range(2, n+1):\n        sum_of_n += i / i - 1\n    return sum_of_n",
        "test": "assert harmonic_sum(5) == 1",
        "num_ids": 436
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set to store the intersection of the two arrays\n    intersection = set(array_nums1).intersection(set(array_nums2))\n    # Convert the set to a list and return it\n    return list(intersection)\n",
        "test": "assert intersection_array([], []) == []",
        "num_ids": 433
    },
    {
        "number": 250,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 4, 5), 6) == 0, \"The function should return 0 if the element is not present in the tuple.\"",
        "num_ids": 401
    },
    {
        "number": 251,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(item)\n    for i in range(len(new_list)):\n        if new_list[i] == element:\n            new_list.insert(i,element)\n            break\n    return new_list",
        "test": "assert insert_element([], 1) == []",
        "num_ids": 336
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n\n    Parameters:\n    numbers (list): A list of complex numbers.\n\n    Returns:\n    list: A list of polar coordinates.\n    \"\"\"\n\n    # Create a list to store the polar coordinates\n    polar_coordinates = []\n\n    # Iterate through each complex number in the input list\n    for number in numbers:\n        # Extract the real and imaginary parts of the number\n        real = number.real\n        imaginary = number.imag\n\n        # Calculate the magnitude of the number\n        magnitude = cmath.sqrt(real**2 + imaginary**2)\n\n        # Calculate the angle of the number with respect to the x-axis\n        angle = cmath.phase(number)\n\n        # Calculate the distance from the origin to the number\n        distance = magnitude * cmath.cos(angle)\n\n        # Store the polar coordinates in the polar_coordinates list\n        polar_coordinates.append([distance, angle])\n\n    return polar_coordinates",
        "test": "assert convert(3+4j) == (3.0, 4.0)",
        "num_ids": 554
    },
    {
        "number": 253,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 251
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "test": "assert combinations_colors([], 1) == []",
        "num_ids": 433
    },
    {
        "number": 256,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(num % i!= 0 for num in range(2, int(n**0.5)+1)):\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(0) == 0",
        "num_ids": 482
    },
    {
        "number": 257,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def swap_numbers(a, b):\n    return (b, a)",
        "test": "assert swap_numbers(5,7) == (7,5)",
        "num_ids": 168
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    # Find the maximum element in the two tuples\n    max_element = max(test_tup1[0], test_tup2[0])\n    # Find the index of the maximum element in the two tuples\n    max_index = test_tup1.index(max_element)\n    # Find the index of the second maximum element in the two tuples\n    second_max_index = test_tup2.index(max(test_tup2))\n    # Return a tuple containing the maximum element, its index, and the second maximum element's index\n    return (max_element, max_index, second_max_index)",
        "test": "assert maximize_elements((1, 2), (3, 4)) == (1, 3)",
        "num_ids": 467
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def newman_prime(n):\n    # Initialize the list of prime numbers\n    primes = [True] * (n+1)\n\n    # Set the first two numbers as not prime\n    primes[0] = primes[1] = False\n\n    # Check the other numbers from 2 to the square root of n\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            # If i is prime, mark all its multiples as not prime\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n\n    # Check if n is prime\n    if primes[n]:\n        # If n is prime, return its index\n        return n\n    else:\n        # If n is not prime, return None\n        return None",
        "test": "assert newman_prime(1) == 3",
        "num_ids": 474
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Initialize an empty tuple to store the result\n    result_tup = []\n    # Loop through each tuple in the input tuples\n    for tup in [test_tup1, test_tup2]:\n        # Loop through each tuple element in the tuple\n        for elem in tup:\n            # Perform the division operation and add the result to the result tuple\n            result_tup.append(elem / len(tup))\n    # Return the result tuple\n    return result_tup",
        "test": "assert division_elements((\"a\", \"b\", \"c\", \"d\"), (\"e\", \"f\", \"g\", \"h\")) == ((\"a\", \"e\", \"g\"), (\"b\", \"f\", \"h\"), (\"c\", \"d\", \"h\"))",
        "num_ids": 630
    },
    {
        "number": 262,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    result1 = list1[:L]\n    result2 = list1[L:]\n    return (result1, result2)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 634
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "test": "assert dog_age(10) == 2, \"The function should return 2 for the age of a dog that is at least 10 years old.\"",
        "num_ids": 265
    },
    {
        "number": 265,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n\n    result = []\n    n = 0\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n        n += 1\n\n    return result",
        "test": "assert list_split([], 1) == []",
        "num_ids": 401
    },
    {
        "number": 266,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert lateralsurface_cube(3) == 27, \"The lateral surface area of a cube with side length 3 is 27.\"",
        "num_ids": 343
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(5) == 125",
        "num_ids": 259
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # set variables to store the numerator and denominator\n    numerator = 0\n    denominator = 1\n    \n    # loop until the nth star number is found\n    while numerator <= n:\n        # calculate the next numerator\n        numerator += 1\n        \n        # check if the next numerator is a factor of the nth star number\n        if n % numerator == 0:\n            # check if the denominator is a factor of the next numerator\n            if denominator % numerator == 0:\n                # return the nth star number if both are factors\n                return numerator\n            \n            # if the denominator is smaller than the next numerator, the next numerator is a factor\n            else:\n                denominator += 1\n        else:\n            # if the next numerator is not a factor of the nth star number, the next numerator is not a factor\n            denominator += 1\n    \n    # if the nth star number is not found, return None\n    return None",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 455
    },
    {
        "number": 269,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return None",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 191
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0  # initialize the sum to zero\n    even_index = 0  # initialize the index to zero\n\n    # loop through the list and add even numbers to the sum and index\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:  # check if current element is even\n            even_sum += arr[i]  # add even number to the sum\n            even_index += 1  # increment the index\n\n    return even_sum, even_index",
        "test": "assert sum_even_and_even_index([1,2,3,4,5]) == 25",
        "num_ids": 487
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    even_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_sum += i\n        if i ** 5 in range(1, 6):\n            even_sum += i ** 5\n    return even_sum",
        "test": "assert even_Power_Sum(15) == 5155",
        "num_ids": 457
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) > 1:\n            result.append(tup[1])\n    return result",
        "test": "assert rear_extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]",
        "num_ids": 442
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    result = []\n    for i in range(len(test_tup2)):\n        result.append(test_tup1[i] - test_tup2[i])\n\n    return tuple(result)",
        "test": "assert substract_elements(('a', 'b', 'c'), ('a', 'b', 'c')) == ('a', 'b', 'c')",
        "num_ids": 875
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2==0:\n            sum += math.comb(n, i)\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0   # n = 0",
        "num_ids": 431
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    # Calculate the volume of the cylinder using the formula V = \u03c0r^2h\n    volume = 3.14 * r**2 * h\n    return volume",
        "test": "assert volume_cylinder(5,10) == 314.159, \"The volume of a cylinder with radius 5 and height 10 is not equal to 314.159.\"",
        "num_ids": 409
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 6) == {}",
        "num_ids": 446
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return 0\n    else:\n        return count_first_elements(test_tup[1:]) + 1\n",
        "test": "assert count_first_elements(('apple', 'banana', 'cherry', 'date')) == 3",
        "num_ids": 424
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define a list to store the digits of the nth decagonal number\n    decagonal_digits = []\n    # Loop through all the digits of the nth power of 2\n    for i in range(n):\n        # Add the next power of 2 to the list\n        decagonal_digits.append(2**i)\n    # Check if the nth power of 2 is a decagonal number\n    if decagonal_digits[-1] == decagonal_digits[-2]*2:\n        return True\n    return False",
        "test": "assert is_num_decagonal(123) == 123",
        "num_ids": 445
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1",
        "test": "assert sequential_search([1,2,3,4,5], 3) == (True, 2)",
        "num_ids": 499
    },
    {
        "number": 281,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Initialize a set to store unique elements in the list\n    unique_set = set(test_list)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1,2,3,4,5]) == True",
        "num_ids": 355
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(set(nums1) - set(nums2))",
        "test": "assert sub_list([1,2,3,4,5],[2,3,4,5]) == [0, 0, 0, 0, 0]",
        "num_ids": 372
    },
    {
        "number": 283,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = {}\n    for digit in str(n):\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n\n    for digit in str(n):\n        if frequency[digit] > 1:\n            return False\n\n    return True",
        "test": "assert validate(12345) == True",
        "num_ids": 309
    },
    {
        "number": 284,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(lst, element):\n    for item in lst:\n        if item!= element:\n            return False\n    return True",
        "test": "assert check_element([1, 2, 3, 4, 5], 6) == False",
        "num_ids": 304
    },
    {
        "number": 285,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.{2,3}'\n    matches = re.findall(pattern, text)\n    return bool(matches)\n",
        "test": "assert text_match_two_three(\"abcabcabc\") == True",
        "num_ids": 293
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Input: \n    a: array of integers\n    n: size of the array\n    k: integer representing the number of times the array should be repeated\n\n    Output: \n    The largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize variables\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    # Iterate through the array and find the maximum sum of a contiguous array\n    for i in range(n):\n        # Find the maximum sum of a subarray ending at i\n        ending_here = max(a[i], 0) * k\n        # Update max_ending_here with the maximum sum of a subarray ending at i\n        max_ending_here = max(max_ending_here, ending_here)\n        # Update max_so_far with the maximum sum of a subarray ending at i\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "test": "assert max_sub_array_sum_repeated([1, -2, 3, -4, 5], 4, 3) == 9 # Case 1",
        "num_ids": 889
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_sum += i * i\n    return even_sum",
        "test": "assert square_Sum(100) == 1024",
        "num_ids": 362
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list of maximum length.\n    '''\n    max_list = []\n    max_length = 0\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_list = sublist\n            max_length = len(sublist)\n    return max_list",
        "test": "assert max_length([]) == []",
        "num_ids": 415
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_no_of_ways(n, k):\n    # Calculate the number of ways of painting n posts with k colors\n    ways = 0\n    for i in range(k+1):\n        ways += n // (i + 1)\n    \n    return ways",
        "test": "assert count_no_of_ways(n=3, k=2) == 5, \"The function should return the correct output for n=3 and k=2.\"",
        "num_ids": 583
    },
    {
        "number": 292,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find(n, m):\n    # rounding down to nearest integer\n    n = int(n)\n    m = int(m)\n    # division\n    quotient = n // m\n    # rounding up to nearest integer\n    return quotient",
        "test": "assert find(10,5) == 2",
        "num_ids": 309
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w*h)/math.tan(math.pi/3)\n    return s",
        "test": "assert otherside_rightangle(10,15) == 15",
        "num_ids": 256
    },
    {
        "number": 294,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Initialize a variable to store the maximum value\n    max_val = None\n\n    # Loop through each element in the list\n    for element in listval:\n\n        # Check if the current element is greater than the maximum value\n        if max_val is None or element > max_val:\n            max_val = element\n\n    # Return the maximum value\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5, \"max_val([1, 2, 3, 4, 5]) should return 5.\"",
        "num_ids": 457
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n            if i!= number // i:\n                divisors.append(number // i)\n\n    return sum(divisors)\n",
        "test": "assert sum_div(13) == 162 # correct",
        "num_ids": 345
    },
    {
        "number": 296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
        "test": "assert get_Inv_Count([1, 4, 2, 5, 3]) == 1",
        "num_ids": 415
    },
    {
        "number": 297,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n\n    return result",
        "test": "assert flatten_list([1, 2, 3, [4, 5, [6, [7]]]]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 462
    },
    {
        "number": 299,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate from it.\n    '''\n    max_val = stdata[0][1]  # assume first tuple is the maximum aggregate\n    for tup in stdata:\n        if tup[1] > max_val:\n            max_val = tup[1]\n    return max_val",
        "test": "assert max_aggregate([(\"apple\", 2), (\"banana\", 3), (\"cherry\", 1), (\"date\", 4), (\"elderberry\", 5)]) == 5",
        "num_ids": 590
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_binary_seq(n):\n    # Create a list of all binary sequences of length n\n    binary_sequences = []\n    for i in range(2**n):\n        binary_seq = ''.join(bin(i)[2:])\n        binary_sequences.append(binary_seq)\n\n    # Create a dictionary to store the count of each binary sequence\n    count = {}\n    for binary_seq in binary_sequences:\n        bit_sum = 0\n        for bit in binary_seq:\n            bit_sum += int(bit)\n        count[binary_seq] = bit_sum\n\n    # Find the maximum count of a binary sequence\n    max_count = 0\n    for binary_seq, count in count.items():\n        if count > max_count:\n            max_count = count\n\n    # Return the count of all binary sequences of length 2n with sum of first n bits equal to sum of last n bits\n    return max_count",
        "test": "assert count_binary_seq(2) == 2, \"The function should return 2 for n = 2.\"",
        "num_ids": 560
    },
    {
        "number": 301,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + max(dict_depth(child) for child in d.values())\n    elif type(d) == list:\n        return 1 + max(dict_depth(child) for child in d)\n    else:\n        return 0",
        "test": "assert dict_depth({'a':1,'b':{'c':2,'d':{'e':3,'f':4}}}) == 3",
        "num_ids": 385
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # creating an empty dictionary to store the rotations\n    rotations_dict = {}\n\n    # initializing the index and rotations values\n    count = 0\n    rotations = rotations % len(arr)\n\n    # loop through all the rotations\n    for i in range(rotations):\n        # rotating the array by the current index\n        arr = arr[index:] + arr[:index]\n\n        # finding the element in the rotated array\n        element = None\n        for num in arr:\n            if num > element:\n                element = num\n            elif num == element:\n                count += 1\n                break\n\n        # updating the rotations dictionary\n        rotations_dict[i] = element\n\n    # finding the element in the original array\n    count = 0\n    element = None\n    for num in arr:\n        if num > element:\n            element = num\n        elif num == element:\n            count += 1\n            break\n\n    return element, count, rotations_dict",
        "test": "assert find_Element([1,2,3,4,5],[[1,3],[2,4]],[0,1,2,3,4],1) == 4",
        "num_ids": 828
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[aeiou].*'\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches\n    else:\n        return None",
        "test": "assert start_withp(['apple', 'banana', 'cherry']) == ('apple', 'cherry')",
        "num_ids": 496
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum to be negative infinity and the sum of the current subsequence to be 0\n    max_sum = float('-inf')\n    subseq = [0] * n\n    \n    # Iterate over all possible prefixes from index to i-1\n    for i in range(index, n):\n        # Check if the current prefix is increasing and also after the given kth element\n        if a[i] < a[i-k] and a[i] > a[i+k]:\n            # If so, update the maximum sum and subsequence\n            max_sum = max(max_sum, a[i] + subseq[i-index])\n            subseq[i] = a[i]\n            \n    # Return the maximum sum and subsequence\n    return max_sum, subseq",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 1, 4) == 9, \"Test case 2: (1, 2, 3, 4, 5) with k=4, and expected output: 9\"",
        "num_ids": 895
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    # Create a new tuple with n elements\n    new_tuplex = tuple(deepcopy(tuplex))\n\n    # Append elements to the new tuple from the beginning\n    for i in range(m):\n        new_tuplex = (new_tuplex[0], *new_tuplex[1:])\n\n    # Remove elements from the new tuple from the end\n    for i in range(n - 1, -1, -1):\n        new_tuplex = new_tuplex[:-1]\n\n    return new_tuplex",
        "test": "assert colon_tuplex((1,2,3),(2,1,4),(4,1,3)) == (1, 2, 3)",
        "num_ids": 506
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Convert the lists to sets to remove duplicates\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n\n    # Create a list of tuples, where each tuple contains the product of each factor from the two lists\n    factors = []\n    for factor1 in nums1_set:\n        for factor2 in nums2_set:\n            factors.append((factor1 * factor2, factor1))\n\n    # Sort the list of tuples in descending order of the product\n    factors.sort(key=lambda x: x[0], reverse=True)\n\n    # Select the number of factors and return the corresponding products\n    return [x[0] for x in factors[:N]]",
        "test": "assert large_product([2, 3, 4, 5, 6], [1, 2, 3, 4, 5], 3) == 24",
        "num_ids": 1154
    },
    {
        "number": 309,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(3,4) == 4",
        "num_ids": 124
    },
    {
        "number": 310,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 264
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n):\n    # Convert the binary number to decimal\n    decimal_number = int(bin(n)[2:], 2)\n\n    # Find the rightmost set bit\n    rightmost_bit = 0\n    while decimal_number & 1:\n        rightmost_bit += 1\n        decimal_number >>= 1\n\n    # Set the leftmost set bit to 1\n    decimal_number |= 1 << rightmost_bit\n\n    # Convert the decimal number back to binary\n    binary_number = bin(decimal_number)[2:]\n\n    return int(binary_number, 2)",
        "test": "assert set_left_most_unset_bit(10) == 1, \"set_left_most_unset_bit(10) should return 1\"",
        "num_ids": 395
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h\n    return volume",
        "test": "assert volume_cone(1,1) == 3.141592653589793",
        "num_ids": 321
    },
    {
        "number": 388,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power",
        "test": "assert highest_Power_of_2(10) == 16",
        "num_ids": 388
    },
    {
        "number": 389,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return n + find_lucas(n-1)",
        "test": "assert find_lucas(10) == 55",
        "num_ids": 296
    },
    {
        "number": 390,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Apply the format string to each element of the list\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)\n    return list_",
        "test": "assert add_string([], \"\") == [] # test empty list",
        "num_ids": 320
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # converting the list of dictionaries to a dictionary\n    nested_dict = {key: val for key, val in zip(l1, l2)}\n    \n    # converting the list of lists to a dictionary\n    nested_dict.update({key: val for key, val in zip(l3, l2)})\n    \n    # return the dictionary\n    return nested_dict",
        "test": "assert convert_list_dictionary([1,2,3], ['a', 'b', 'c'], ['x', 'y', 'z']) == {",
        "num_ids": 470
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    max_sum = float('-inf')\n    for i in range(1, n+1):\n        for j in range(1, n//i + 1):\n            for k in range(1, n//(i*j) + 1):\n                for l in range(1, n//(i*j*k) + 1):\n                    sub_sum = (j + l) * k\n                    if max_sum < sub_sum + i:\n                        max_sum = sub_sum + i\n    return max_sum",
        "test": "assert get_max_sum(10) == 35, \"get_max_sum(10) should return 35\"",
        "num_ids": 576
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    if len(input_list) == len(max(input_list, key=len)):\n        return input_list\n    else:\n        return max_length_list(sorted(input_list, key=len))\n",
        "test": "assert max_length_list([1, 2, 3, 4, 5, 6]) == [5, 6]",
        "num_ids": 511
    },
    {
        "number": 394,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique = True\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                unique = False\n                break\n    return unique",
        "test": "assert check_distinct([1, 2, 3, 4, 5]) # True",
        "num_ids": 328
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    for char in str1:\n        if char in char_dict:\n            return char\n    return None",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 564
    },
    {
        "number": 396,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if not re.match(regex, string):\n        return False\n    if len(string) % 2 == 1:\n        return False\n    return True",
        "test": "assert check_char('world') == False",
        "num_ids": 308
    },
    {
        "number": 397,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def partition(arr, low, high):\n    pivot = arr[high]  # Choose the last element as pivot\n    i = low - 1  # Initialize the index of smaller element as -1\n\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]  # Swap pivot and last element\n    return i + 1\n\n\ndef quick_sort(arr, low, high):\n    if low < high:\n        pi = partition(arr, low, high)\n        quick_sort(arr, low, pi - 1)\n        quick_sort(arr, pi + 1, high)\n\n\ndef median_numbers(a, b, c):\n    arr = [a, b, c]\n    quick_sort(arr, 0, len(arr) - 1)\n    return arr[len(arr) // 2]\n",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 546
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total",
        "test": "assert sum_of_digits([1, 2, 3, 4]) == 10  # pass",
        "num_ids": 526
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i])\n    return result_tup",
        "test": "assert bitwise_xor((1, 2), (3, 4, 5)) == (1, 2, 3, 4, 5)",
        "num_ids": 603
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a dictionary to store the frequency of each tuple\n    freq = {}\n    # loop through each tuple in the list and add it to the dictionary with its frequency\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    # return the number of unique tuples in the list\n    return len(freq)",
        "test": "assert extract_freq([]) == 0, \"extract_freq([]) should return 0\"",
        "num_ids": 601
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    total_tuple = []\n    for i in range(len(test_tup1)):\n        total_tuple.append(test_tup1[i] + test_tup2[i])\n    return total_tuple",
        "test": "assert add_nested_tuples(('a', 1), ('b', 2)) == ('a', 2)",
        "num_ids": 461
    },
    {
        "number": 404,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n\n    if a<b: \n        return a \n    else: \n        return b",
        "test": "assert minimum(3,4) == 3 ",
        "num_ids": 174
    },
    {
        "number": 405,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False ",
        "test": "assert check_tuplex(\"hello world\", \"world\") == True",
        "num_ids": 214
    },
    {
        "number": 406,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # if the number is even, return true\n    if x % 2 == 0:\n        return True\n    \n    # if the number is odd, return false\n    else:\n        return False",
        "test": "assert find_Parity(9876543210) == 1, \"9876543210 should be even parity\"",
        "num_ids": 407
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # initialize variables\n    i = 0\n    j = 0\n    temp = 0\n    \n    # loop through each digit of the number\n    while i < len(str(n)):\n        # check if the current digit is greater than the next digit\n        if int(str(n)[i]) > int(str(n)[i+1]):\n            # swap the current digit with the next digit\n            temp = int(str(n)[i])\n            str(n) = str(n)[i+1:i+2] + str(temp)\n            # add the next digit to the start of the string\n            str(n) = str(temp) + str(n)\n            # move the next digit to the right\n            j += 1\n            i += 1\n            \n        # if the next digit is not greater than the current digit, move on to the next digit\n        else:\n            i += 1\n            \n    # convert the string back to an integer and return it\n    return int(str(n))",
        "test": "assert rearrange_bigger(123456789) == 123456789",
        "num_ids": 716
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Find the k smallest pairs in nums1 and nums2 such that they consist of one element from each array.\n    The pairs are returned as a list of tuples where each tuple contains two elements from nums1 and nums2.\n    '''\n    # Create a min heap to store the pairs\n    min_heap = []\n\n    # Iterate through the arrays and insert the k smallest pairs into the min heap\n    for num1, num2 in zip(nums1, nums2):\n        # If the size of the heap is less than or equal to k, insert the current pair into the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (num1, num2))\n        # If the size of the heap is greater than k, remove the smallest pair from the heap\n        elif len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Return the list of pairs in the heap\n    return [pair for pair in min_heap]",
        "test": "assert k_smallest_pairs([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 3) == [(1, 4), (2, 5), (3, 6)]",
        "num_ids": 1099
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        list1 (list): List of tuples.\n\n    Returns:\n        int: The minimum product found.\n    \"\"\"\n\n    # Initialize the minimum product to infinity\n    min_product = float('-inf')\n\n    # Loop through the pairs of tuples\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n\n            # If the product is smaller than the current minimum product, update it\n            if product < min_product:\n                min_product = product\n\n    return min_product",
        "test": "assert min_product_tuple([5,2,8,6,1]) == 17",
        "num_ids": 655
    },
    {
        "number": 410,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to be the first element in the list\n    minval = listval[0]\n    # loop through the rest of the elements in the list\n    for i in range(1, len(listval)):\n        # if the current element is smaller than the minimum value, update minval\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 383
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'(?<=[a-z])([A-Z])', word.lower())\n    return ''.join(word.capitalize() for word in words if word)",
        "test": "assert snake_to_camel(\"Snake_Case\") == \"snakeCase\"",
        "num_ids": 379
    },
    {
        "number": 412,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    return [num for num in l if num % 2!= 0]",
        "test": "assert remove_odd([]) == []",
        "num_ids": 299
    },
    {
        "number": 413,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]",
        "test": "assert extract_nth_element([('apple', 1), ('banana', 2), ('orange', 3), ('grape', 4)], 3) == ('orange', 3)",
        "num_ids": 388
    },
    {
        "number": 414,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3],[1,2,3,4]) # True",
        "num_ids": 359
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_Product(arr):\n    max_product = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        max_product = max(arr[i], max_product * arr[i])\n    return max_product",
        "test": "assert max_Product([1,2,3,4,5]) == 120",
        "num_ids": 433
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    result = []\n    for tup in Input:\n        if not result or tup[0]!= result[-1][0]:\n            result.append(tup)\n    return result",
        "test": "assert group_tuples([('a', 1), ('b', 2), ('c', 3), ('a', 4), ('d', 5), ('e', 6)]) == [('a', 4), ('b', 2)]",
        "num_ids": 424
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    \n    return max_element",
        "test": "assert Find_Max([]) == None",
        "num_ids": 379
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        rounded = round(num)\n        total += rounded\n    print(\"The total sum of the rounded numbers is:\", total * len(list1))",
        "test": "assert round_and_sum([1.5, 2.5, 3.5, 4.5, 5.5]) == 30",
        "num_ids": 542
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2, n+1):\n        total += i ** 3\n    return total",
        "test": "assert cube_Sum(0) == 0 # cube_Sum(0) should return 0 when n = 0",
        "num_ids": 275
    },
    {
        "number": 421,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) +''\n    return result[:-1]",
        "test": "assert concatenate_tuple(('a', 'b', 'c', 'd', 'e')) == 'abcd'",
        "num_ids": 290
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    count = 0  \n    for i in range(1, n+1):  \n        cube = i**3  \n        sum += cube  \n        count += 1  \n\n    if count == 0:  \n        return None  \n    else:  \n        return sum / count  ",
        "test": "assert find_Average_Of_Cube(5) == 28.0, \"The average of cubes of first 5 natural numbers is incorrect.\"",
        "num_ids": 388
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [elem[-1] for elem in test_tuple]",
        "test": "assert extract_rear((\"a\", \"b\", \"c\", \"d\", \"e\")) == (3,)",
        "num_ids": 270
    },
    {
        "number": 425,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if all(element in sublist for element in x):\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 1) == 0, \"count_element_in_list([], 1) should return 0\"",
        "num_ids": 383
    },
    {
        "number": 426,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def filter_oddnumbers(nums):\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert filter_oddnumbers([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 274
    },
    {
        "number": 427,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.search(dt)\n    if match:\n        return f\"{match.group(2)}-{match.group(3)}-{match.group(1)}\"\n    else:\n        return dt",
        "test": "assert change_date_format(\"2020-01-01\") == \"01-01-2020\"",
        "num_ids": 504
    },
    {
        "number": 428,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n\n        gap //= 2\n\n    return my_list",
        "test": "assert shell_sort([10, 15, 2, 8, 12, 13, 11, 5, 7, 9]) == [2, 5, 7, 8, 9, 10, 11, 12, 13, 15]",
        "num_ids": 583
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    \n    for tup in test_tup1:\n        result.append(tup)\n    \n    for tup in test_tup2:\n        result.append(tup)\n    \n    return result",
        "test": "assert and_tuples(('a', 'b', 'c'), ('d', 'e')) == [('a', 'b', 'd'), ('a', 'b', 'e'), ('c', 'd', 'e')]",
        "num_ids": 423
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    discriminant = b**2 - 4*a*c\n\n    if discriminant >= 0:\n        directrix = (-b + discriminant**0.5) / (2*a)\n        return directrix\n    else:\n        return \"Parabola is not real\"\n",
        "test": "assert parabola_directrix(0, 1, 1) == 0",
        "num_ids": 555
    },
    {
        "number": 431,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # iterate over each element in list1 and check if it exists in list2\n    for elem in list1:\n        if elem in list2:\n            # if an element is found, return true\n            return True\n    # if no common element is found, return false\n    return False",
        "test": "assert common_element([], [1, 2, 3]) == False",
        "num_ids": 377
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Find the median length of a trapezium by calculating the base area.\n    '''\n    # Find the semi-perimeter of the trapezium\n    s = (base1 + base2) / 2\n    # Calculate the base area of the trapezium\n    area = (s * (s + height)) / 2\n    # Calculate the median length of the trapezium\n    return area",
        "test": "assert median_trapezium(2, 4, 6) == 4 # This is the correct output",
        "num_ids": 692
    },
    {
        "number": 433,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # Check if the number is greater than all elements in the array\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n\n    # If the number is not greater than any element, return False\n    return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 485
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    # Using re module to split the string into list of words\n    words = text.split()\n\n    # Using a loop to check if any word starts with 'a' and has at least one 'b'\n    for word in words:\n        if word.startswith('a') and len(re.findall('b', word)) >= 1:\n            return True\n\n    return False",
        "test": "assert text_match_one(\"abcabcbb\") == True",
        "num_ids": 315
    },
    {
        "number": 435,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n\n    # using modulo operator to find last digit\n    last_digit = n % 10\n\n    return last_digit",
        "test": "assert last_Digit(123456789) == 9, \"last_Digit(123456789) should return 9\"",
        "num_ids": 302
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of numbers as input and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num >= 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([]) == []",
        "num_ids": 315
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters from a string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    \n    # Initialize the count of odd characters\n    odd_count = 0\n    \n    # Loop through each character in the list and increment the odd_count if the character is odd\n    for char in char_list:\n        if char % 2!= 0:\n            odd_count += 1\n            \n    # Create a new string with the odd characters removed\n    new_str = ''.join([char for char in char_list if char % 2!= 0])\n    \n    # Return the new string\n    return new_str",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 414
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Counts the number of bidirectional tuple pairs in the input list.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 444
    },
    {
        "number": 439,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total",
        "test": "assert multiple_to_single([1, 2, 3, 4, 5]) == 15 # correct",
        "num_ids": 316
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Function to find the first adverb and their positions in a given sentence.\n\n    Parameters:\n    text (str): A string containing a sentence.\n\n    Returns:\n    (str, int): The first adverb found and its position in the sentence.\n    '''\n\n    # Define the pattern to match adverbs\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n\n    # Find all occurrences of the pattern in the sentence\n    matches = pattern.finditer(text)\n\n    # Initialize the first adverb found to None and its position to 0\n    first_adverb = None\n    first_adverb_pos = 0\n\n    # Loop through all matches and find the first adverb and its position\n    for match in matches:\n        if match.start() == 0:\n            first_adverb = match.group(0)\n            first_adverb_pos = match.start()\n        else:\n            break\n\n    # Return the first adverb found and its position\n    return (first_adverb, first_adverb_pos)",
        "test": "assert find_adverb_position(\"The dog barked and the cat slept.\") == (7, 11)",
        "num_ids": 672
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area\n`",
        "test": "assert surfacearea_cube(3) == 12",
        "num_ids": 221
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Return the ration of positive numbers in the input array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    if positive_count == 0:\n        return \"No positive numbers in the input array\"\n    else:\n        return positive_count / len(nums)",
        "test": "assert positive_count([1,2,3,4,5]) == 1.0",
        "num_ids": 526
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf') # initialize largest to negative infinity\n    for num in list1:\n        if num < 0: # if number is negative\n            if num > largest: # if current number is larger than largest\n                largest = num # update largest variable\n    return largest # return largest negative number",
        "test": "assert largest_neg([1, 2, 3, -4, 5, 6, 7]) == -4",
        "num_ids": 359
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    # Create a dictionary to store the count of each tuple\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    \n    # Sort the dictionary by the count of tuples in descending order\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda x: x[1], reverse=True))\n    \n    # Trim the tuples based on the count of tuples in the sorted dictionary\n    trimmed_list = []\n    for item in sorted_dict:\n        trimmed_list.extend(sorted_dict[item][:K])\n    \n    return trimmed_list",
        "test": "assert trim_tuple((1, 2, 3, 4, 5, 6, 7), 3) == (1, 2, 3)",
        "num_ids": 493
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize a new tuple to store the result\n    result_tup = ()\n    \n    # Iterate over the indices of the first tuple\n    for i in range(len(test_tup1)):\n        # Multiply each tuple element with the corresponding element in the second tuple and add it to the result tuple\n        result_tup += (test_tup1[i] * test_tup2[i])\n    \n    # Return the result tuple\n    return result_tup",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6, 7, 8)) == (4, 10, 18, 28, 36)",
        "num_ids": 576
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup).get(lst, 0)",
        "test": "assert count_Occurrence((1, 2, 3, 3, 3), [4, 2, 3, 3, 3]) == 2",
        "num_ids": 406
    },
    {
        "number": 447,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 363
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum",
        "test": "assert cal_sum(10) == 55",
        "num_ids": 274
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Initialize a list to store the extracted strings\n    extracted_strings = []\n\n    # Loop through the list of strings\n    for s in l:\n        # Check if the length of the string is equal to the specified size\n        if len(s) == l:\n            # If yes, append the string to the list of extracted strings\n            extracted_strings.append(s)\n\n    # Return the list of extracted strings\n    return extracted_strings",
        "test": "assert extract_string(\"hello world\", 6) == \"hello world\"",
        "num_ids": 342
    },
    {
        "number": 451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "test": "assert remove_whitespaces(\"   This is a   test   string.   \") == \"This is a test string\"",
        "num_ids": 320
    },
    {
        "number": 452,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(1000,2000) == 1000 # should return 1000",
        "num_ids": 371
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef sumOfFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of that number.\n    '''\n    sum_even = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum_even += i\n    return sum_even\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of even factors of\", n, \"is:\", sumOfFactors(n))",
        "test": "assert sumofFactors(12) == 24  # The correct output is 24",
        "num_ids": 441
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Matches a word containing 'z' from the given text.\n    '''\n    pattern = r'\\b(z+)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None",
        "test": "assert text_match_wordz(\"the quick brown fox jumped over the lazy cat.\") == False",
        "num_ids": 308
    },
    {
        "number": 455,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check if the given month number is between 1 and 12\n    if not isinstance(monthnum2, int):\n        return False\n    \n    # Check if the given month number is a valid month number\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    \n    # Check if the given month number has 31 days\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(12) == False",
        "num_ids": 428
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        stringlist[i], stringlist[-1-i] = stringlist[-1-i], stringlist[i]",
        "test": "assert reverse_string_list([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]",
        "num_ids": 420
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist",
        "test": "assert Find_Min([5, 10, 20, 30, 40]) == [10, 20, 30, 40]",
        "num_ids": 421
    },
    {
        "number": 458,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(5, 10) == 50 # area of a rectangle with sides 5 and 10 is 50",
        "num_ids": 288
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove all uppercase characters from the string\n    str1 = str1.replace(' ', '')\n    # Replace all uppercase characters in the string with an empty string\n    str1 = re.sub('([A-Z])', '', str1)\n    # Return the modified string\n    return str1",
        "test": "assert remove_uppercase('') == ''",
        "num_ids": 273
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 318
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"Python is awesome\") == 15",
        "num_ids": 273
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def backtrack(start, path, result):\n        if start == len(list1):\n            result.append(path)\n            return\n        for i in range(start, len(list1)):\n            backtrack(i+1, path+[list1[i]], result)\n    \n    result = []\n    backtrack(0, [], result)\n    return result",
        "test": "assert combinations_list([1]) == [([1],)]",
        "num_ids": 744
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    '''\n    Given an array, find the maximum product subarray.\n    '''\n    max_so_far = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        current_product = max(current_product * arr[i], arr[i])\n        max_so_far = max(max_so_far, current_product)\n\n    return max_so_far",
        "test": "assert max_subarray_product([1, -2, 3, 4, -5]) == 12",
        "num_ids": 544
    },
    {
        "number": 464,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values_same = True\n    for key, value in dict.items():\n        if value!= list(dict.values())[n-1]:\n            all_values_same = False\n            break\n    return all_values_same",
        "test": "assert check_value({}, 1) == True",
        "num_ids": 403
    },
    {
        "number": 465,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 295
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product(arr):\n    # initialize the maximum product as 1\n    max_product = 1\n\n    # loop through each element of the array\n    for i in range(1, len(arr)):\n        # loop through all possible subsequence starting from i\n        for j in range(i, len(arr)):\n            # calculate the product of all the elements from j to len(arr)-1\n            product = arr[j]\n            for k in range(j, len(arr)):\n                product *= arr[k]\n            # if the product of all the elements is greater than the current max_product, update it\n            if product > max_product:\n                max_product = product\n\n    return max_product",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 12",
        "num_ids": 460
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 3:\n        return False\n    \n    for i in range(len(test_tup) - 1):\n        if test_tup[i] + test_tup[i+1] == test_tup[i+1] + test_tup[i+2]:\n            return True\n    \n    return False",
        "test": "assert add_pairwise((5,6,7)) == (5,7,9)",
        "num_ids": 380
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the product variable\n    product = 1\n    # Iterate through the array and multiply each element with the product variable\n    for num in arr:\n        product = (product * num) % n\n    # Return the product variable\n    return product",
        "test": "assert find_remainder([1, 2, 3, 4, 5], 10) == 0",
        "num_ids": 352
    },
    {
        "number": 472,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # If the list is empty, return False\n    if len(l) == 0:\n        return False\n    \n    # If the first element of the list is not equal to 1, return False\n    if l[0]!= 1:\n        return False\n    \n    # Iterate through the list from the second element onwards\n    for i in range(1, len(l)):\n        # If the current element is not equal to the next element and not equal to 1, return False\n        if l[i]!= (i+1) and l[i]!= 1:\n            return False\n    \n    # If the loop completes without returning False, the list contains consecutive numbers\n    return True",
        "test": "assert check_Consecutive([1,2,2,3,4]) == False",
        "num_ids": 517
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Define a set to store the intersection of the two lists\n    intersection = set(test_list1) & set(test_list2)\n    # Convert the set to a tuple and return it\n    return tuple(intersection)",
        "test": "assert tuple_intersection([], []) == ()",
        "num_ids": 507
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Replaces characters in a string with a new character.\n\n    Parameters:\n    - str1: the string to be modified\n    - ch: the character to be replaced\n    - newch: the new character that replaces the old character\n\n    Returns:\n    - a new string where the old character has been replaced by the new character\n    '''\n    return str1.replace(ch,newch)",
        "test": "assert replace_char(\"hello world\", \"o\", \"L\") == \"helo wrld\"",
        "num_ids": 308
    },
    {
        "number": 475,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    \n    # sort the dictionary by value in ascending order\n    sorted_dict = dict(counter)\n    \n    return sorted_dict",
        "test": "assert sort_counter({}) == {}",
        "num_ids": 486
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num + min_num",
        "test": "assert big_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 447
    },
    {
        "number": 477,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower('HELLO') == 'hello'",
        "num_ids": 156
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and returns a new string with lowercase substrings removed.\n    '''\n    # define the regex pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]\\w*\\b')\n\n    # use the regex pattern to find all occurrences of the pattern in the input string\n    matches = pattern.findall(str1)\n\n    # initialize an empty string to hold the new string\n    new_str = \"\"\n\n    # loop through the matches and append them to the new string\n    for match in matches:\n        new_str += match\n\n    # return the new string\n    return new_str",
        "test": "assert remove_lowercase(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"",
        "num_ids": 338
    },
    {
        "number": 479,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #converting the number to string\n    num_str = str(n)\n\n    #finding the first digit of the string\n    first_digit = int(num_str[0])\n\n    return first_digit",
        "test": "assert first_Digit(123) == 1",
        "num_ids": 255
    },
    {
        "number": 554,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 285
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # initialize variables\n    cube_sum = 0\n    sum_sum = 0\n    \n    # loop through the natural numbers\n    for i in range(1, n+1):\n        # calculate cube of the number\n        cube = i ** 3\n        \n        # add cube to cube_sum\n        cube_sum += cube\n        \n        # calculate sum of the number\n        sum_num = sum(range(1, i+1))\n        \n        # add sum of number to sum_sum\n        sum_sum += sum_num\n    \n    # calculate difference between cube_sum and sum_sum\n    diff = cube_sum - sum_sum\n    \n    # return the difference as output\n    return diff",
        "test": "assert difference(10) == 50",
        "num_ids": 457
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] & 1 == 1:\n                count += 1\n    return count\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nN = len(A)\nprint(find_Odd_Pair(A, N))",
        "test": "assert find_Odd_Pair([1,2,3,4,5],5)==2 # find an odd pair with xor value 2",
        "num_ids": 514
    },
    {
        "number": 557,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Initialize a variable to store the new string with capitalized letters\n    new_string = \"\"\n    # Iterate through each character in the original string\n    for char in string:\n        # Check if the character is uppercase or lowercase\n        if char.isupper():\n            # If the character is uppercase, convert it to lowercase and add it to the new string\n            new_string += char.lower()\n        else:\n            # If the character is lowercase, convert it to uppercase and add it to the new string\n            new_string += char.upper()\n    # Return the new string with capitalized letters\n    return new_string",
        "test": "assert toggle_string('world') == 'wORLD'",
        "num_ids": 461
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert n1 and n2 to lists of digits\n    n1_list = list(map(int, str(n1)))\n    n2_list = list(map(int, str(n2)))\n\n    # iterate through each digit and compute the difference between the lists\n    diff_list = [abs(x1 - x2) for x1, x2 in zip(n1_list, n2_list)]\n\n    # return the sum of the differences\n    return sum(diff_list)",
        "test": "assert digit_distance_nums(123, 123) == 0",
        "num_ids": 614
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def max_sub_array_sum(a, size):\n    # initialize variables\n    max_so_far = a[0]\n    current_sum = a[0]\n\n    # iterate over the list\n    for i in range(1, size):\n        # update max sum if current sum is greater than max sum\n        if current_sum > max_so_far:\n            max_so_far = current_sum\n        # update current sum\n        current_sum += a[i]\n\n    # return max sum\n    return max_so_far",
        "test": "assert max_sub_array_sum([1], 1) == 1 # input: [1], size: 1",
        "num_ids": 483
    },
    {
        "number": 560,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Convert the tuples into sets to remove duplicates\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    \n    # Find the union of the two sets\n    union_set = test_set1.union(test_set2)\n    \n    # Convert the set back into a sorted list and return it\n    return sorted(union_set)",
        "test": "assert union_elements((1, 2, 3), (2, 3, 4)) == [1, 2, 3, 4]",
        "num_ids": 526
    },
    {
        "number": 562,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    current_length = 1\n    for i in range(len(lst)):\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length",
        "test": "assert Find_Max_Length([1,1,1,1]) == 5     # case 2",
        "num_ids": 440
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use regular expression to extract values between quotation marks\n    match = re.search(r'(?<!\\w)\\\"[^\\\"]*\\\"(?!\\w)', text)\n    # If match is found, extract the values between quotes and return as a list\n    if match:\n        values = match.group(0).split('\\\"')[:-1]\n        return values\n    # If no match is found, return an empty list\n    else:\n        return []",
        "test": "assert extract_values(\"She sells sea shells by the sea shore.\") == ['She','sells','sea','shells', 'by', 'the','sea','shore']",
        "num_ids": 517
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_Pairs(arr, n):\n    # initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n    \n    # initialize two variables to store the minimum and maximum element in the array\n    min_ele = max_ele = float('inf')\n    \n    # loop through each element in the array and update the minimum and maximum element if necessary\n    for i in range(n):\n        if arr[i] < min_ele:\n            min_ele = arr[i]\n        if arr[i] > max_ele:\n            max_ele = arr[i]\n            \n    # loop through the array again and count the number of possible unordered pairs where both elements are unequal\n    count = 0\n    for i in range(n):\n        if freq[arr[i]] > 1 and min_ele!= arr[i] and max_ele!= arr[i]:\n            count += 1\n            \n    return count",
        "test": "assert count_Pairs([1,2,3,4,5],4) == 2",
        "num_ids": 721
    },
    {
        "number": 565,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()",
        "test": "assert split('hello world') == ['hello', 'world']",
        "num_ids": 243
    },
    {
        "number": 566,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_of_digits = 0\n    while n > 0:\n        sum_of_digits += n % 10\n        n //= 10\n    return sum_of_digits",
        "test": "assert sum_digits(1234) == 1 + 2 + 3 + 4",
        "num_ids": 347
    },
    {
        "number": 567,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def issort_list(list1):\n    # Initialize variables for comparison and sorting\n    min_val = float('inf')\n    max_val = float('-inf')\n    for num in list1:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    \n    # Check if the list is sorted\n    if min_val >= max_val:\n        return True\n    else:\n        return False",
        "test": "assert issort_list([3, 1, 2, 4]) == [1, 2, 3, 4]",
        "num_ids": 391
    },
    {
        "number": 568,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n\n    Args:\n    length (int): The number of empty dictionaries to create.\n\n    Returns:\n    list: A list of N empty dictionaries.\n    '''\n\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 219
    },
    {
        "number": 569,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n\n    Input: list1 - A list of lists of strings.\n\n    Output: A list of sorted lists of strings.\n\n    '''\n\n    # Create an empty list to store the sorted sublists\n    sorted_sublists = []\n\n    # Iterate over each sublist of strings in the input list\n    for sublist in list1:\n\n        # Create an empty list to store the sublist elements\n        sublist_elements = []\n\n        # Iterate over each element in the sublist\n        for element in sublist:\n\n            # Append the element to the sublist elements list\n            sublist_elements.append(element)\n\n        # Create a new sublist from the sublist elements list\n        new_sublist = sublist_elements\n\n        # Sort the new sublist using the bubble sort algorithm\n        for i in range(len(new_sublist)):\n            for j in range(len(new_sublist)-1):\n                if new_sublist[j] > new_sublist[j+1]:\n                    temp = new_sublist[j]\n                    new_sublist[j] = new_sublist[j+1]\n                    new_sublist[j+1] = temp\n\n        # Append the sorted sublist to the sorted sublists list\n        sorted_sublists.append(new_sublist)\n\n    return sorted_sublists",
        "test": "assert sort_sublists([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 773
    },
    {
        "number": 572,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def two_unique_nums(nums):\n    '''\n    Removes duplicate numbers from a given number of lists.\n    \n    Parameters:\n    nums (list): A list of numbers\n    \n    Returns:\n    list: A new list with duplicate numbers removed\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "test": "assert two_unique_nums([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 601
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 340
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * (r**2) * h",
        "test": "assert surfacearea_cylinder(3,2) == 6",
        "num_ids": 1231
    },
    {
        "number": 576,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    n = len(A)\n    m = len(B)\n    if m == 0:\n        return True\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        elif A[i] < B[j]:\n            i += 1\n        else:\n            j += 1\n    return j == m",
        "test": "assert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5]) == True",
        "num_ids": 593
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def last_Digit_Factorial(n):\n    # Convert the number to a string\n    n_str = str(n)\n    \n    # Find the last digit of the number and convert it to an integer\n    last_digit = int(n_str[-1])\n    \n    # Find the factorial of the last digit\n    factorial = 1\n    for i in range(1, last_digit+1):\n        factorial *= i\n    \n    # Return the last digit of the factorial\n    return last_digit",
        "test": "assert last_Digit_Factorial(5) == 5",
        "num_ids": 450
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def interleave_lists(*lists):\n    '''\n    Create a single flat list from multiple lists of the same length.\n    '''\n    result = []\n    for lst in lists:\n        result.extend(lst)\n    return result",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 498
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    dissimilar_elements = set1.symmetric_difference(set2)\n\n    return dissimilar_elements\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (6, 7, 8, 9, 10)\n\ndissimilar_elements = find_dissimilar(test_tup1, test_tup2)\n\nprint(dissimilar_elements)  # Output: {7, 9}",
        "test": "assert find_dissimilar(('a', 'b'), ('a', 'c')) == False",
        "num_ids": 728
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # create a dictionary to store the keys and values of the mixed tuple\n    key_dict = {}\n    for i in test_tuple:\n        key = i[0]\n        value = i[1]\n        if key not in key_dict:\n            key_dict[key] = []\n        key_dict[key].append(value)\n    \n    # iterate through the dictionary and find all the even keys and remove them from the dictionary\n    for key, value in key_dict.items():\n        if len(value) % 2 == 0:\n            even_fnc(key, value)\n    \n    # return the modified tuple with the even elements removed\n    return tuple(test_tuple)",
        "test": "assert even_ele((\"apple\", \"banana\", \"orange\"), lambda x: x % 2!= 0) == True",
        "num_ids": 705
    },
    {
        "number": 581,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def surface_Area(b,s):\n    area = b*s\n    return area",
        "test": "assert surface_Area(5,3) == 15 # base edge=5, height=3",
        "num_ids": 229
    },
    {
        "number": 582,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0",
        "test": "assert my_dict({}) == {}",
        "num_ids": 167
    },
    {
        "number": 583,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Function to calculate nth Catalan number.\n    '''\n    catalan = 1\n    for i in range(num):\n        catalan *= (i + 1) // 2\n    return catalan",
        "test": "assert catalan_number(1) == 0",
        "num_ids": 451
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    adverb_pattern = re.compile(r'\\b(ly|ly\\b)')\n    match = adverb_pattern.search(text)\n    \n    if match:\n        start = match.start()\n        end = match.end()\n        return (text[start:end], start, end)\n    else:\n        return None\n\ntext = \"This is a sample string. It has a long sentence with some adverbs ending with 'ly'.\"\n\nadverb_result = find_adverbs(text)\n\nif adverb_result:\n    print(\"Adverb found at position:\", adverb_result[1], \"-\", adverb_result[2])\nelse:\n    print(\"No adverb found.\")",
        "test": "assert find_adverbs(\"It was raining today.\") == (\"today\", 5)",
        "num_ids": 642
    },
    {
        "number": 585,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the items into a heap\n    items_heap = [(item, price) for item, price in items]\n    # Use a max heap to keep track of the n most expensive items\n    heapq.heapify(items_heap)\n    # Return the n most expensive items in the heap\n    return [item for item, price in items_heap[:n]]",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 561
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Remove all the elements except the first n elements from the list\n    new_l = l[:n]\n    # Append the new list to the original list and return it\n    return new_l + l[n:]",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]",
        "num_ids": 413
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 268
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def big_diff(nums):\n    # initialize variables\n    max_val = min_val = nums[0]\n\n    # iterate over the list and update max_val and min_val\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n\n    # return the difference between max_val and min_val\n    return max_val - min_val",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 402
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Initialize variables to store the squares of the numbers\n    squares = []\n    for i in range(a, b+1):\n        squares.append(i ** 2)\n    \n    # Find the square root of the sum of squares\n    sqrt_sum = sum(squares) ** 0.5\n    \n    # Find the perfect squares between the sum and sqrt_sum\n    perfect_squares = [i for i in squares if i > sqrt_sum]\n    \n    return perfect_squares",
        "test": "assert perfect_squares(10, 10) == 144",
        "num_ids": 601
    },
    {
        "number": 590,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef polar_rect(x, y):\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    theta_rad = math.radians(theta)\n    x_rect = r * math.cos(theta_rad)\n    y_rect = r * math.sin(theta_rad)\n    return x_rect, y_rect",
        "test": "assert polar_rect(0,0) == (0, 0)",
        "num_ids": 376
    },
    {
        "number": 591,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # check if newList has length greater than 1\n    if len(newList) > 1:\n        # check if newList has only two elements\n        if len(newList) == 2:\n            # swap first and last elements in newList\n            newList[0], newList[-1] = newList[-1], newList[0]\n            # return newList after swapping\n            return newList\n        else:\n            # swap first and last elements in newList\n            newList[0], newList[-1] = newList[-1], newList[0]\n            # return newList after swapping\n            return newList\n    else:\n        # return newList if length is 1\n        return newList",
        "test": "assert swap_List([1,2,3]) == [3,2,1] # check if the function works correctly for an empty list",
        "num_ids": 556
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a Python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): the number of terms\n    k (int): the number of terms to sum\n\n    Returns:\n    int: the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n\n    # Initialize variables to store the sum of binomial coefficient products\n    sum_product = 0\n\n    # Calculate the sum of the first n terms of the binomial coefficient\n    for i in range(1, n+1):\n        product = 1\n        for j in range(1, k+1):\n            product *= i\n            if j < k:\n                product *= (n-j)\n        sum_product += product\n\n    return sum_product",
        "test": "assert binomial_Coeff(1,0) == 1  # base case for binomial coeff",
        "num_ids": 638
    },
    {
        "number": 593,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an ip address.\n    '''\n    # Remove all non-numeric characters from the input ip address\n    ip = re.sub('[^0-9.]', '', ip)\n    # Check if the ip address is valid (no zeroes present)\n    if len(ip) > 0:\n        return ip\n    else:\n        return None",
        "test": "assert removezero_ip(\"192.168.0.1\") == \"192.168.0.1\"",
        "num_ids": 489
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = abs(even_num - odd_num)\n    return diff\n",
        "test": "assert diff_even_odd([1,3,5,7,9]) == 2",
        "num_ids": 426
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_Swaps(str1, str2):\n    swaps = 0\n    \n    for i in range(len(str1)):\n        if str1[i] == '1' and str2[i] == '0':\n            swaps += 1\n    \n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] == '0' and str2[i] == '1':\n            swaps += 1\n    \n    return swaps",
        "test": "assert min_Swaps(\"1010\", \"1011\") == 1",
        "num_ids": 531
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sum(len(x) for x in tuple_list)",
        "test": "assert tuple_size(()) == 0 ",
        "num_ids": 223
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_kth(arr1, arr2, k):\n    # check if the array sizes are equal\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Array sizes must be equal\")\n\n    # use binary search to find the kth element\n    left, right = 0, len(arr1) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr1[mid] == arr2[mid]:\n            # if the elements are equal, we have found the kth element\n            if mid == k - 1:\n                return arr1[mid]\n            # if we're looking for the next element, move the right pointer\n            else:\n                right = mid - 1\n        elif arr1[mid] < arr2[mid]:\n            # if the left half contains the kth element, search in the right half\n            left = mid + 1\n        else:\n            # if the right half contains the kth element, search in the left half\n            right = mid - 1\n\n    # if we reach here, the kth element was not found\n    raise ValueError(\"The kth element is not in the array\")",
        "test": "assert find_kth([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], [1, 3, 5, 9, 2, 6, 5, 4, 3], 3) == 5",
        "num_ids": 913
    },
    {
        "number": 598,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes an integer as input and returns True if the number is armstrong, else False.\n\n    Let's find the sum of the cubes of all the numbers from 1 to the input number. If the sum is equal to the input number, then the number is armstrong. Otherwise, it is not.\n    '''\n\n    # Find the sum of the cubes of all the numbers from 1 to the input number\n    sum_of_cubes = 0\n    for i in range(1, number+1):\n        sum_of_cubes += i**3\n\n    # If the sum is equal to the input number, return True\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(1234) == False # not armstrong number",
        "num_ids": 421
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_average(n):\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    if count > 0:\n        return total/count\n    else:\n        return 0\n\nprint(sum_average(10))  # Output: 5.0\nprint(sum_average(5))   # Output: 5.0\nprint(sum_average(0))   # Output: 0.0\n",
        "test": "assert sum_average(0) == 0",
        "num_ids": 340
    },
    {
        "number": 600,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 160
    },
    {
        "number": 602,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # iterate over the dictionary and find the character with the highest frequency\n    for char, count in freq.items():\n        if count == 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None",
        "test": "assert first_repeated_char('abc') == 'a'",
        "num_ids": 461
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(1, n+1):\n        for j in range(1, i):\n            if i+j <= n and i%j == 0:\n                l.append(i+j)\n    return l\n",
        "test": "assert get_ludic(50) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 41",
        "num_ids": 2343
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)",
        "test": "assert reverse_words('the quick brown fox jumps over the lazy dog') == 'zyxwvutsrqponmlkjihgfedcba'",
        "num_ids": 297
    },
    {
        "number": 605,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    A function to check if a given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(3) == True, \"3 is a prime number\"",
        "num_ids": 245
    },
    {
        "number": 606,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Converts degrees to radians.\n    '''\n    return degree * math.pi / 180",
        "test": "assert radian_degree(360) == 2*math.pi",
        "num_ids": 246
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Search a string for a regex pattern. The function returns the matching subtring, a start index and an end index.\n    '''\n\n    # Use regular expressions to match the pattern in the string\n    match = re.search(pattern, text)\n\n    # Check if the pattern was found\n    if match:\n        # Get the match object\n        match_obj = match.group()\n        # Get the literal string\n        literal_str = match.string\n        # Get the literal string without the pattern\n        trimmed_str = literal_str[len(match_obj):]\n        # Get the start and end indices of the match in the string\n        start_idx = match.start()\n        end_idx = match.end()\n        # Return the match and other information\n        return (trimmed_str, start_idx, end_idx)\n    else:\n        # The pattern was not found in the string\n        return None",
        "test": "assert find_literals(\"Hello, world!\", r\"world\") == (\"world\", 11, 16)",
        "num_ids": 619
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 100\n    else:\n        result = 0\n        for i in range(1, n + 1):\n            result += bell_Number(i - 1)\n        return result",
        "test": "assert bell_Number(2) == 10, \"The second bell number is 10\"",
        "num_ids": 316
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L // 2\n    return list1[:k] + list1[k+1:]",
        "test": "assert remove_kth_element([1,2,3,4,5], 2) == [1, 3, 4, 5]",
        "num_ids": 619
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = test_list[0][N-1] # initial value of max_value\n    for row in test_list:\n        max_value = max(max_value, row[N-1]) # update max_value if row[N-1] is greater than current max_value\n    return max_value",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 9",
        "num_ids": 459
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        if len(sublist) == 2:\n            result.append([sublist[0], sublist[1]])\n    return result",
        "test": "assert merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]",
        "num_ids": 489
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = [0]\n    for i in range(len(test_list)):\n        cumulative_sum.append(cumulative_sum[i-1] + test_list[i])\n    return cumulative_sum\n",
        "test": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]",
        "num_ids": 412
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg_list.append(sum(tup)/len(tup))\n    return avg_list",
        "test": "assert average_tuple([]) == []",
        "num_ids": 494
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)",
        "test": "assert tuple_modulo( (3,4,5,6,7), (1,2,3,4,5) ) == (0,1,2,3,4)",
        "num_ids": 461
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d):\n    # Initialize the variables\n    count = 0\n    i = 0\n\n    # Loop through the steps and count the number of jumps\n    while i < steps:\n        # Update the variables\n        count += 1\n        i += 1\n\n        # Check if the number of jumps is less than or equal to the difference between the current distance and the destination point\n        if i <= d:\n            # If the number of jumps is equal to the difference between the current distance and the destination point, update the destination point\n            i = d\n        # If the number of jumps is greater than the difference between the current distance and the destination point, increment the destination point\n        else:\n            # Update the destination point\n            d += 1\n\n    return count",
        "test": "assert min_Jumps(3, 4) == 1",
        "num_ids": 1139
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Create a new list to store the result\n    result = []\n\n    # Iterate through the elements of nums1\n    for num1 in nums1:\n        # Iterate through the elements of nums2 and check if the element is present in nums1\n        for num2 in nums2:\n            if num1 == num2:\n                # If the element is present in nums1, add it to the result list\n                result.append(num1)\n                break\n\n    # Return the result list\n    return result",
        "test": "assert div_list([1,2,3,4,5],[1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "num_ids": 497
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # initializing an empty string\n    new_str = \"\"\n\n    # looping through the given string\n    for char in test_str:\n\n        # checking if the character is a digit or not\n        if char.isdigit():\n\n            # appending the digit to the new string\n            new_str += char\n\n        # checking if the character is not a digit or not\n        else:\n\n            # appending the character to the new string\n            new_str += char\n\n    # returning the new string\n    return new_str",
        "test": "assert move_num(\"12345\") == \"12345\"",
        "num_ids": 460
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def largest_subset(a):\n    # Initialize the largest set to be the first element of the list\n    largest_set = {a[0]}\n    \n    # Iterate through the list and check if each pair is divisible\n    for num in a:\n        # Check if the current number is divisible by any number in the largest set\n        if num % largest_set:\n            # If it is, add the current number to the largest set\n            largest_set.add(num)\n    \n    # Return the size of the largest set\n    return len(largest_set)",
        "test": "assert largest_subset([2, 3, 4, 5, 6]) == 3",
        "num_ids": 703
    },
    {
        "number": 622,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # find the middle index of the two lists\n    mid = n // 2\n    \n    # sort both lists in ascending order\n    arr1.sort()\n    arr2.sort()\n    \n    # find the median based on whether the two lists are in ascending or descending order\n    if (len(arr1) > len(arr2)):\n        # if arr1 is longer than arr2, return the median of arr1 and arr2, which is the middle index\n        return arr1[mid]\n    else:\n        # if arr2 is longer than arr1, return the median of arr2 and arr1, which is the middle index\n        return arr2[mid]\n",
        "test": "assert get_median([1], [], 1) == 1",
        "num_ids": 714
    },
    {
        "number": 623,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n\n    # initialize an empty list to store the results\n    results = []\n\n    # iterate over each number in the list and compute its n-th power\n    for num in nums:\n        result = num ** n\n        results.append(result)\n\n    return results",
        "test": "assert nth_nums([1, 2, 3, 4, 5], 2) == [1, 4, 9, 16, 25]",
        "num_ids": 389
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper('Hello') == 'HELLO'",
        "num_ids": 182
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def swap_List(newList):\n    # swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # return the new list\n    return newList",
        "test": "assert swap_List([1]) == [1]",
        "num_ids": 364
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def triangle_area(r):\n    # function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    def find_area(r):\n        # function to find the area of a triangle using Heron's formula\n        def heron_formula(base, height):\n            return (base**2 + height**2)**0.5\n        \n        # function to calculate the semiperimeter of a triangle\n        def semiperimeter(base, height):\n            return (base + height)**0.5\n        \n        # function to find the area of a triangle using Heron's formula\n        def triangle_area(base, height):\n            s = semiperimeter(base, height)\n            return (base*height)/s\n        \n        # calculate the semiperimeter of the triangle\n        s = semiperimeter(r, r)\n        \n        # calculate the area of the triangle using Heron's formula\n        area = triangle_area(r, r)\n        \n        # return the area of the largest triangle that can be inscribed in a semicircle with the given radius\n        return area\n    \n    # return the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    return find_area(r)",
        "test": "assert triangle_area(3) == 6.0 # 3 units is equal to 6 square units",
        "num_ids": 612
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if start < 0 or start > end:\n        return -1  # out of range\n    \n    count = len(array)\n    for i in range(start, end+1):\n        if i!= array[i]:\n            return i  # found a missing number\n    \n    return count + 1  # not found a missing number",
        "test": "assert find_First_Missing([1,3,4,5,7,9],end=3) == 4 # case 2",
        "num_ids": 609
    },
    {
        "number": 628,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces('Hello World') == 'Hello%20World'",
        "num_ids": 208
    },
    {
        "number": 629,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def Split(lst):\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]",
        "num_ids": 373
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def adjac(ele, sub=[]):\n    if sub == []:\n        sub = [(ele[0], ele[1]), (ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1),\n               (ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n    return sub",
        "test": "assert adjac((0,0), [(0,1),(0,2),(1,1),(1,2),(2,1),(2,2)]) == [(0,1),(0,2),(1,1),(1,2),(2,1),(2,2)]",
        "num_ids": 582
    },
    {
        "number": 631,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # convert the string to a list of characters\n    text = list(text)\n\n    # iterate through each character in the list\n    for i in range(len(text)):\n        # if the character is a space, replace it with an underscore\n        if text[i] =='':\n            text[i] = '_'\n        # if the character is not a space, keep it as is\n        else:\n            text[i] = text[i]\n\n    # convert the list of characters back to a string and return it\n    return ''.join(text)",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 403
    },
    {
        "number": 632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # Initialize a new empty list to store the non-zero elements\n    non_zero_list = []\n\n    # Iterate through each element of the input list\n    for num in num_list:\n        # If the element is not zero, append it to the new list\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # Return the new list with all zeroes moved to the end\n    return non_zero_list",
        "test": "assert move_zero([0,0,1,2,3]) == [0,0,1,2,3]",
        "num_ids": 461
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum",
        "test": "assert pair_xor_Sum([1, 2, 3, 4, 5], 5) == 12 # check the sum of xor of all pairs of numbers in the given list",
        "num_ids": 359
    },
    {
        "number": 635,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Sort the list using the heapq library\n    hq.heapify(iterable)\n    # Build a new list with the sorted items\n    sorted_list = []\n    while len(iterable) > 0:\n        # Extract the root node and append it to the sorted list\n        sorted_list.append(iterable[0])\n        # Remove the root node from the list\n        hq.heappop(iterable)\n    return sorted_list",
        "test": "assert heap_sort([5, 1, 3, 7, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 448
    },
    {
        "number": 637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > 0 and sale_amount > 0:\n        profit = actual_cost - sale_amount\n        loss = sale_amount - actual_cost\n    elif actual_cost == 0 and sale_amount == 0:\n        profit = 0\n        loss = 0\n    else:\n        profit = 0\n        loss = 0\n\n    return profit,loss",
        "test": "assert noprofit_noloss(50,150) == \"No Loss\"",
        "num_ids": 385
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0:\n        return 0\n    \n    # Calculate the wind chill formula\n    wc = (1.8 * math.log(1 + (0.0622 * t) - (0.0065 * t**2) + (0.0004 * t**3))) / (math.log(v) - 1.6)\n    \n    # Round the result to the nearest integer\n    return int(wc)",
        "test": "assert wind_chill(10, 22) == 36",
        "num_ids": 516
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if not name.startswith('a'):\n            result += len(name)\n    return result",
        "test": "assert sample_nam(['Alice', 'Bob', 'Charlie', 'David', 'Eve']) == 25",
        "num_ids": 423
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    # find the opening parenthesis\n    open_index = items.find('(')\n    if open_index == -1:\n        # no parentheses found\n        return items\n    else:\n        # find the closing parenthesis\n        close_index = items.find(')', open_index+1)\n        if close_index == -1:\n            # no closing parenthesis found\n            return items\n        else:\n            # return the substring between the opening and closing parentheses\n            return items[open_index+1:close_index]",
        "test": "assert remove_parenthesis(\"()\") == \"\"",
        "num_ids": 419
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_nonagonal(n):\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 1\n    else:\n        return n + (n-1)*(n-2)//2",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 309
    },
    {
        "number": 643,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the middle of a word using regular expressions.\n    '''\n    # Define the regular expression pattern for the middle of a word\n    pattern = r'\\b[a-zA-Z]+\\b'\n    \n    # Use the re.search() method to search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # Return True if the pattern is found in the text, False otherwise\n    return bool(match)",
        "test": "assert text_match_wordz_middle('The quick brown fox jumps over the lazy dog') == True",
        "num_ids": 459
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reversed_array = []\n    n = len(input)\n    for i in range(n):\n        if i >= k:\n            break\n        reversed_array.append(input[i])\n    return reversed_array",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 8) == [1, 2, 3, 4, 5]",
        "num_ids": 513
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple(1, {'a': 1, 'b': 2}) == (1, {'a': 1, 'b': 2})",
        "num_ids": 391
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Get the size of the matrix\n    N = len(cost)\n\n    # Initialize the maximum sum of the path and the sum of the path cost and the number of cells visited\n    max_sum = float('-inf')\n    sum_path = 0\n    sum_cost = 0\n    count = 0\n\n    # Iterate through each cell of the matrix\n    for i in range(N):\n        for j in range(N):\n            # If the current cell is the starting cell of a path\n            if cost[i][j] == 0:\n                # Initialize the sum of the path cost and the number of cells visited\n                sum_cost = 0\n                count = 0\n\n                # Iterate through each cell from the starting cell to the current cell\n                for k in range(i, N):\n                    sum_cost += cost[k][j]\n                    count += 1\n\n                    # If the sum of the path cost and the number of cells visited exceeds the maximum sum\n                    if sum_cost > max_sum:\n                        max_sum = sum_cost\n                        path = [i, j]\n\n            # If the current cell is not the starting cell of a path\n            else:\n                # If the sum of the path cost and the number of cells visited exceeds the maximum sum\n                if sum_cost > max_sum:\n                    max_sum = sum_cost\n                    path = [i, j]\n\n                # Update the sum of the path cost and the number of cells visited\n                sum_cost += cost[i][j]\n                count += 1\n\n    # Return the maximum sum of the path and the number of cells visited\n    return max_sum, count\n",
        "test": "assert maxAverageOfPath([[1,1],[1,1]]) == 1",
        "num_ids": 1408
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def filter_data(students, h, w):\n    filtered_students = []\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students.append(student)\n    return filtered_students",
        "test": "assert filter_data({'Alice':(180,70), 'Bob':(170,65), 'Charlie':(160,60), 'David':(155,55)}, 180, 70) == {'Bob': (170, 65)}",
        "num_ids": 850
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [2, 2, 3, 3, 4]) == 2, \"count_same_pair([1, 2, 3, 4, 5], [2, 2, 3, 3, 4])\"",
        "num_ids": 490
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Create an empty string to store the digits of the base\n    digits = ''\n\n    # Iterate from 0 to the power\n    for _ in range(power):\n        # Divide the base by 10 to get the next digit\n        digit = base % 10\n        # Add the digit to the digits string\n        digits += str(digit)\n        # Remove the last digit from the base to get the next digit\n        base = base // 10\n\n    # Return the sum of the digits\n    return int(digits)",
        "test": "assert power_base_sum(2, 1) == 2, \"The correct sum of all digits of base 2 to the power 1 is 2.\"",
        "num_ids": 582
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Define the pattern for matching quotation marks\n    pattern = r'\"[^\"]*\"'\n\n    # Use the re.search() method to search for the pattern in the string\n    match = re.search(pattern, text1)\n\n    # If the pattern is found, return the substring between the opening and closing\n    # quotation marks, otherwise return None\n    if match:\n        return match.group().strip()\n    else:\n        return None",
        "test": "assert extract_quotation(\"The quick brown fox jumps over the lazy dog.\") == \"The quick brown fox jumps over the lazy dog.\"",
        "num_ids": 540
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup",
        "test": "assert multiply_elements(10) == (10, 20, 30, 40, 50)",
        "num_ids": 496
    },
    {
        "number": 728,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initialize a new list to store the sum of the two lists\n    result = []\n    # Iterate through both lists and add them together and append to the result list\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    # Return the result list\n    return result",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 461
    },
    {
        "number": 730,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    return list(set(nums))",
        "test": "assert consecutive_duplicates([1, 2, 3, 4, 4, 5, 6, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 523
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h / 3.0\n    return area",
        "test": "assert lateralsurface_cone(1,3) == 3.141592653589793, \"Incorrect surface area for a cone with radius 1 and height 3.\"",
        "num_ids": 367
    },
    {
        "number": 732,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)\n\ntext = \"Hello, world! This is a test.\"\nprint(replace_specialchar(text))",
        "test": "assert replace_specialchar('Hello, World!') == 'Hello: World!'",
        "num_ids": 364
    },
    {
        "number": 733,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1 # x not found in array",
        "test": "assert find_first_occurrence([1,2,3,3,4,4,4,5], 6) == -1",
        "num_ids": 519
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Create an empty dictionary to store all possible sublists\n    subs = {}\n\n    # Initialize a variable to store the sum of products of all sublists\n    prod = 1\n\n    # Loop through all possible sublists of the given list\n    for i in range(1, len(arr) + 1):\n        # Get the current sublist\n        sublist = arr[0:i]\n\n        # If the sublist is already in the dictionary, add its product to the sum\n        if sublist in subs:\n            prod += subs[sublist]\n\n        # Add the current sublist to the dictionary\n        subs[sublist] = prod\n\n    # Return the sum of products of all sublists\n    return prod",
        "test": "assert sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 210  # correct for the given input array",
        "num_ids": 601
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the number of bits\n    num_bits = len(bin(n)[2:])\n    \n    # Toggle the bits\n    for i in range(1, num_bits-1):\n        n = n ^ (1 << (num_bits-i-1))\n    \n    # Return the modified number\n    return n",
        "test": "assert set_middle_bits(2) == 0b10",
        "num_ids": 478
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = 0\n    while i < len(a) and a[i] <= x:\n        i += 1\n    if i == len(a) or a[i] == x:\n        i -= 1\n    return i",
        "test": "assert left_insertion([1], 5) == 0",
        "num_ids": 558
    },
    {
        "number": 737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\nregex = r'^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    return pattern.match(string)\n\nstring = input(\"Enter a string: \")\nif check_str(string):\n    print(\"The string is starting with a vowel.\")\nelse:\n    print(\"The string is not starting with a vowel.\")",
        "test": "assert check_str('world') == True",
        "num_ids": 355
    },
    {
        "number": 738,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    \n    return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 287
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    This function finds the index of smallest triangular number with n digits. \n    '''\n\n    # first, we need to check if n is a power of 2\n    if n & (n-1)!= 0: \n        raise ValueError(\"n is not a power of 2\")\n\n    # calculate the number of terms\n    term_count = int(math.log2(n)) + 1\n\n    # calculate the smallest triangular number with n digits\n    index = term_count - n\n\n    # return the index of the first term\n    return index",
        "test": "assert find_Index(1) == 0, \"Incorrect value returned for n=1\"",
        "num_ids": 493
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 480
    },
    {
        "number": 741,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Initialize a variable to store the first character of the string\n    char_1 = s[0]\n    # Iterate through each character of the string and compare it with the first character\n    for char_2 in s:\n        # If the characters are different, return False\n        if char_1!= char_2:\n            return False\n        # If all characters are same, return True\n        else:\n            return True",
        "test": "assert all_Characters_Same(\"abcde\") == True",
        "num_ids": 293
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    area = 0.5 * side * side * side\n    return area",
        "test": "assert area_tetrahedron(2) == 4",
        "num_ids": 306
    },
    {
        "number": 743,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Get the length of the list\n    n = len(list)\n\n    # If m is greater than n, then m must be less than or equal to n\n    if m > n:\n        m = n - m\n    \n    # If m is less than 0, then m must be greater than or equal to 0\n    if m < 0:\n        m = m % n\n\n    # Use slicing to rotate the list\n    list = list[-m:] + list[:-m]\n\n    return list",
        "test": "assert rotate_right([], 0) == []",
        "num_ids": 545
    },
    {
        "number": 744,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, None)) == True",
        "num_ids": 274
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    digits = []\n\n    # Find the digits of the numbers in the range\n    for num in range(startnum, endnum+1):\n        digits.append(str(num)[0])\n\n    # Create a lambda function that checks if a number is divisible by every digit it contains\n    divisible_by_digit = lambda num: any(digit in str(num) for digit in digits)\n\n    # Find the numbers in the range that are divisible by every digit in the digits list\n    divisible_numbers = [num for num in range(startnum, endnum+1) if divisible_by_digit(num)]\n\n    # Return the list of divisible numbers\n    return divisible_numbers\n",
        "test": "assert divisible_by_digits(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 721
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2",
        "test": "assert sector_area(4, 45) is not None # Angle is within 0-360 range",
        "num_ids": 463
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n    Parameters:\n    X, Y, Z (str): Three string sequences\n\n    Returns:\n    The longest common subsequence as a string\n\n    \"\"\"\n    m, n = len(X), len(Y)\n    if n == 0:\n        return X\n    elif m == 0:\n        return Y\n    elif X[0] == Y[0]:\n        return X[0] + lcs_of_three(X[1:], Y[1:], Z)\n    else:\n        return lcs_of_three(X[1:], Y, Z)",
        "test": "assert lcs_of_three(\"hello\", \"world\", \"programming\") == \"world\"",
        "num_ids": 988
    },
    {
        "number": 748,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Define the regular expression pattern to match words starting with capital letters\n    pattern = re.compile(r'\\b\\w{2,}\\b')\n\n    # Use the findall() method of the re module to find all occurrences of the pattern in the string\n    matches = pattern.findall(str1)\n\n    # Loop through the matches and replace any matches with spaces\n    for match in matches:\n        if match.startswith(' '):\n            str1 = str1.replace(match,'')\n        else:\n            str1 = str1.replace(match, match.capitalize() +'')\n\n    return str1",
        "test": "assert capital_words_spaces(\"Hello World\") == \"Hello World\"",
        "num_ids": 493
    },
    {
        "number": 749,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings in the list to numeric values\n    nums = [int(x.strip()) for x in nums_str]\n    # Sort the list numerically using the built-in sort() function\n    nums.sort()\n    # Convert the sorted list back to a string\n    sorted_str = [str(x) for x in nums]\n    return sorted_str",
        "test": "assert sort_numeric_strings(['3', '1', '4', '2', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 578
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Check if the input arguments are lists and tuples\n    if not isinstance(test_list, list) or not isinstance(test_tup, tuple):\n        print(\"Both input arguments must be lists and tuples.\")\n        return None\n    \n    # Check if the length of the lists and tuples are the same\n    if len(test_list)!= len(test_tup):\n        print(\"The length of the lists and tuples must be the same.\")\n        return None\n    \n    # Add the tuples to the list\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup[i]\n        \n    return test_list",
        "test": "assert add_tuple([1, 2, 3], (4, 5)) == [5, 7, 9]",
        "num_ids": 386
    },
    {
        "number": 751,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i == 0:\n        return True\n\n    # If current element is greater than left child, then it is not a min heap\n    if arr[i] > arr[2*i] and arr[i] > arr[2*i+1]:\n        return False\n\n    # If current element is smaller than left child, then recursively check for left child\n    else:\n        return check_min_heap_helper(arr, 2*i) or check_min_heap_helper(arr, 2*i+1)",
        "test": "assert check_min_heap_helper([5, 3, 1, 8, 9], 0) == True",
        "num_ids": 768
    },
    {
        "number": 752,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n\n    \"\"\"\n    # Create a list of the nth jacobsthal numbers\n    jacobsthal_list = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731]\n\n    # Return the nth jacobsthal number\n    return jacobsthal_list[n]",
        "test": "assert jacobsthal_num(0) == 0, \"The first jacobsthal number is not 0.\"",
        "num_ids": 1415
    },
    {
        "number": 753,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    # Initialize an empty list to store the minimum k records\n    min_records = []\n    \n    # Loop through the test list and append the minimum k records to the list\n    for test in test_list:\n        min_records.append(test)\n        \n        # Check if the length of the list is equal to K\n        if len(min_records) == K:\n            break\n            \n    # Return the minimum k records\n    return min_records",
        "test": "assert min_k([], 0) == []",
        "num_ids": 609
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_elements.append(l1[i])\n\n    return common_elements",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 605
    },
    {
        "number": 755,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def second_smallest(numbers):\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # If the list has a single number, return that number\n    if len(numbers) == 1:\n        return numbers[0]\n\n    # Otherwise, return the second number in the list\n    else:\n        return numbers[1]",
        "test": "assert second_smallest([1]) == 1, \"The second smallest number in a list with one element should be 1.\"",
        "num_ids": 395
    },
    {
        "number": 756,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    # Use regular expression to match 'a followed by one or more 'b's\n    pattern = re.compile(r'a followed by one or more b')\n    # Find all matches of the pattern in the text\n    matches = pattern.findall(text)\n    # Return the number of matches\n    return len(matches)\n",
        "test": "assert text_match_zero_one(\"aba\") == 0",
        "num_ids": 380
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list) // 2):\n        if test_list[i] == test_list[-i - 1]:\n            count += 1\n    return count\n\ntest_list = ['hello', 'world', 'python', 'programming', 'in','reverse']\nprint(count_reverse_pairs(test_list))  # Output: 4",
        "test": "assert count_reverse_pairs([1, 2, 3, 4, 5]) == 0, \"count_reverse_pairs([1, 2, 3, 4, 5]) should return 0\"",
        "num_ids": 629
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each list\n    sublist_count = {}\n\n    # Iterate over all the elements of the list\n    for element in list1:\n        # Check if the element is already in the dictionary\n        if element in sublist_count:\n            # If it is, add 1 to the count of the list\n            sublist_count[element] += 1\n        else:\n            # If it isn't, add the list to the dictionary with 1 as its count\n            sublist_count[element] = 1\n\n    # Return the dictionary containing the count of each list\n    return sublist_count",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 619
    },
    {
        "number": 759,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    try:\n        float(num)\n        if len(str(num)) > 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "test": "assert is_decimal('1.23') is True",
        "num_ids": 608
    },
    {
        "number": 760,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set of elements from the list\n    elements = set(arr)\n    \n    # Check if the set has only one element\n    if len(elements) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 2, 3, 3, 4, 4, 5]) == False",
        "num_ids": 380
    },
    {
        "number": 762,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 4 == 0 and (monthnum3 % 100!= 0 or monthnum3 % 400 == 0):\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(12) == True, \"Month number 12 should contain 30 days.\"",
        "num_ids": 447
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def find_min_diff(arr, n):\n    # Create a dictionary to store the difference of adjacent elements\n    diff_dict = {}\n\n    # Iterate through the array\n    for i in range(n):\n        # Calculate the minimum difference between any two elements in the array\n        min_diff = float('inf')\n\n        # Iterate through the remaining array elements\n        for j in range(i + 1, n):\n            # Calculate the difference between current elements\n            diff = abs(arr[i] - arr[j])\n\n            # Update the minimum difference if the difference is smaller than the current minimum\n            if diff < min_diff:\n                min_diff = diff\n\n        # Add the minimum difference to the dictionary\n        diff_dict[i] = min_diff\n\n    # Find the minimum difference between any two elements in the remaining array\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n\n    # Return the minimum difference\n    return min_diff\n",
        "test": "assert find_min_diff([3,4,2,5,1],3)==1, \"The minimum difference between any two elements in the given array is not 1.\"",
        "num_ids": 635
    },
    {
        "number": 764,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"1234567890\") == 10",
        "num_ids": 349
    },
    {
        "number": 765,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef is_polite(n):\n    if n == 1:\n        return 1\n\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n\n    return n",
        "test": "assert is_polite(1) == True",
        "num_ids": 309
    },
    {
        "number": 766,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n\n    # Initialize the list of pairs\n    pairs = []\n\n    # Loop through each item in the list\n    for i in range(len(l1) - 1):\n\n        # Find the index of the next item in the list\n        j = i + 1\n\n        # If the next item is also the next item plus one, add it to the list of pairs\n        if j < len(l1) and l1[j] == l1[i] + 1:\n            pairs.append((l1[i], l1[j]))\n\n        # If the next item is not the next item plus one, add the pair of the current item and the next item to the list of pairs\n        else:\n            pairs.append((l1[i], l1[j-1]))\n\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 646
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 7) == 2, \"The output should be 2, but it is {}\".format(get_pairs_count([1, 2, 3, 4, 5], 7))",
        "num_ids": 563
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = li1.copy()\n    for i in li2:\n        diff.remove(i)\n    return diff",
        "test": "assert Diff([],[])==[]",
        "num_ids": 307
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a Python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum",
        "test": "assert odd_num_sum(10) == 510",
        "num_ids": 376
    },
    {
        "number": 771,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Create a stack to store the opening parentheses\n    stack = deque()\n\n    # Iterate through each character in the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, check if the stack is empty or if the top element is not equal to the opening parenthesis\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack.pop()!= '(':\n                return False\n\n    # If the stack is empty, the expression is balanced\n    return not stack",
        "test": "assert check_expression(\"()\") == True, \"The function should return True for the expression (()).\"",
        "num_ids": 464
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the words with length K or less\n    filtered_words = []\n    \n    # Iterate through the words and check if they have the right length\n    for word in words:\n        if len(word) >= K:\n            filtered_words.append(word)\n    \n    # Join the filtered words back into a string\n    filtered_str =''.join(filtered_words)\n    \n    # Return the filtered string\n    return filtered_str",
        "test": "assert remove_length(\"hello world\", 5) == \"helloworld\"",
        "num_ids": 407
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\npattern = \"o\"\nresult = occurance_substring(text, pattern)\nif result:\n    print(f\"The substrings '{result[0]}' and '{text[result[1]:result[1] + len(result[0])]}' occur {result[1] - result[0] + 1} times in the string.\")",
        "test": "assert occurance_substring(\"Hello World!\", \"World\") == (7, 11)",
        "num_ids": 471
    },
    {
        "number": 775,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                return False\n    return True",
        "test": "assert odd_position([1,2,3,4,5,6,7,8,9,10]) # true",
        "num_ids": 461
    },
    {
        "number": 776,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            if test_str[i:j].lower() in vowels:\n                count += 1\n    return count",
        "test": "assert count_vowels(\"apple\") == 2",
        "num_ids": 372
    },
    {
        "number": 777,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty set to store the elements that have been seen\n    seen = set()\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each element in the list\n    for elem in arr:\n        # If the element is not in the set, add it to the set and add it to the sum\n        if elem not in seen:\n            seen.add(elem)\n            sum += elem\n    # Return the sum\n    return sum",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 580
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist = []\n    for element in list1:\n        if element not in sublist:\n            sublist.append(element)\n    return sublist",
        "test": "assert pack_consecutive_duplicates([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]",
        "num_ids": 587
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count\n",
        "test": "assert unique_sublists([1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 655
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Finds the combinations of sums with tuples in the given tuple list.\n    '''\n    # Create a set of sums from the test_list\n    sums = set(sum(t) for t in combinations(test_list, 2))\n    \n    # Create a list of all tuples from the test_list\n    tuples_list = [(t[0], t[1]) for t in combinations(test_list, 2)]\n    \n    # Find the combinations of sums that match the length of tuples_list\n    combinations_list = []\n    for i in range(len(sums)):\n        for j in range(i+1, len(sums)):\n            if set(sums[i]) == set(sums[j]) and i!= j:\n                combinations_list.append(tuples_list[i])\n                combinations_list.append(tuples_list[j])\n                break\n    \n    return combinations_list",
        "test": "assert find_combinations(range(1, 11)) == [range(1, 11), range(1, 11, 2), range(1, 11, 3), range(1, 11, 4), range(1, 11, 5), range(1, 11, 6), range(1, 11, 7), range(1, 11, 8), range(1, 11, 9), range(1, 11, 10)]",
        "num_ids": 1035
    },
    {
        "number": 781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert count_divisors(2) == 2",
        "num_ids": 520
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_length = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if len(arr[j]) % 2 == 1: # checking if the length of the current subarray is odd\n                sum_odd_length += arr[j]\n    return sum_odd_length",
        "test": "assert odd_length_sum([1,2,3,4,5,6,7,8,9,10]) == 55",
        "num_ids": 435
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n    Arguments:\n    r -- red component (0-255)\n    g -- green component (0-255)\n    b -- blue component (0-255)\n\n    Returns:\n    H -- hue (0-360)\n    S -- saturation (0-1)\n    V -- value (0-1)\n\n    '''\n\n    # Calculate the max and min values of the color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # If the color has only one value, return it as-is\n    if max_val == min_val:\n        return (0, 0, max_val)\n\n    # Calculate the difference between max and min values\n    delta = max_val - min_val\n\n    # Calculate the saturation and value components\n    if max_val == r:\n        s = delta / (g - b)\n    elif max_val == g:\n        s = delta / (b - r)\n    else:\n        s = delta / (r - g)\n\n    # If the color has zero value, return the same color as before\n    if delta == 0:\n        return (0, 0, max_val)\n\n    # Calculate the hue component\n    if r == max_val:\n        h = (g - b) / delta\n    elif g == max_val:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    # Scale the hue to the range of 0-360\n    if h < 0:\n        h += 1\n    h *= 60\n\n    # Return the hue, saturation, and value components\n    return (h, s, max_val)",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0), \"rgb_to_hsv(0, 0, 0) should return (0, 0, 0)\"",
        "num_ids": 1266
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n    for num in list1:\n        if num % 2!= 0:\n            product *= num\n    return product",
        "test": "assert mul_even_odd([]) == 1",
        "num_ids": 380
    },
    {
        "number": 785,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma and space\n    split_str = test_str.split(',')\n\n    # Convert each string in the list to an integer\n    result = []\n    for s in split_str:\n        result.append(int(s))\n\n    # Return the integer tuple\n    return tuple(result)",
        "test": "assert tuple_str_int(\"123\") == (123,)",
        "num_ids": 367
    },
    {
        "number": 786,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)",
        "test": "assert right_insertion([1,2,3,4,5], 3) == 3",
        "num_ids": 361
    },
    {
        "number": 787,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b' characters.\n    It returns True if a match is found, False otherwise.\n    '''\n    pattern = re.compile(r'a(?=b{3})')\n    matches = pattern.findall(text)\n    return bool(matches)",
        "test": "assert text_match_three(\"abccbbbc\") == False",
        "num_ids": 253
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list[0], test_str, test_list[1])\n    return new_tuple",
        "test": "assert new_tuple(\"hello\", [1, 2, 3]) == (\"hello\", (1, 2, 3))",
        "num_ids": 256
    },
    {
        "number": 790,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True",
        "test": "assert even_position([1, 2, 3, 4, 5]) == False",
        "num_ids": 340
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_nested(test_tup):\n    '''\n    Remove tuples from a given tuple.\n    '''\n\n    # Define a nested list to store the tuples to be removed\n    nested_list = []\n\n    # Iterate through each element in the tuple\n    for element in test_tup:\n        # Check if the element is a tuple and not a nested list\n        if isinstance(element, tuple) and not isinstance(element, list):\n            # If the element is not a nested list, add it to the nested_list\n            nested_list.append(element)\n\n    # Return the nested_list with the tuples removed\n    return nested_list",
        "test": "assert remove_nested((1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (169, (170, (171, (172, (173, (174, (175, (176, (177, (178, (179, (180, (181, (182, (183, (184, (185, (186, (187, (188, (189, (190, (191, (192, (193, (194, (195, (196, (197, (198, (199, (200, (201, (202, (203, (204, (205, (206, (207, (208, (209, (210, (211, (212, (213, (214, (215, (216, (217, (218, (219, (220, (221, (222, (223, (224, (225, (226, (2",
        "num_ids": 1420
    },
    {
        "number": 792,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_list(input_list):\n    '''\n    Counts the number of lists in a given number of lists.\n    '''\n    return len(input_list)",
        "test": "assert count_list([[1,2,3],[4,5,6]]) == 2",
        "num_ids": 304
    },
    {
        "number": 793,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1  # Element not found in array",
        "test": "assert last([1, 2, 3, 4, 5], 6) == -1",
        "num_ids": 327
    },
    {
        "number": 794,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    # Define the pattern to match the string with 'a' and 'b' in the beginning\n    pattern = r'a\\w+b'\n\n    # Use the re.search() method to search the text for the pattern\n    match = re.search(pattern, text)\n\n    # If the match is found, return the match object\n    if match:\n        return match.group()\n    else:\n        return \"No match found\"",
        "test": "assert text_starta_endb(\"aaaab\") == \"aaaab\"",
        "num_ids": 392
    },
    {
        "number": 796,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    Function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for item in dictionary:\n        sum += dictionary[item]\n    return sum",
        "test": "assert return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6",
        "num_ids": 326
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through all odd natural numbers within the range\n    for num in range(l, r+1, 2):\n        sum += num\n    \n    # Return the sum\n    return sum",
        "test": "assert sum_odd(20) == 41",
        "num_ids": 318
    },
    {
        "number": 798,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 235
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of times to rotate\n    rotation_count = (d % 32)\n    # Calculate the left shifted value\n    left_shift = (n << rotation_count)\n    # Return the left shifted value\n    return left_shift",
        "test": "assert left_rotate(16,1) == 32",
        "num_ids": 441
    },
    {
        "number": 800,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n\ntext = \"Hello, World!\"\nprint(remove_all_spaces(text))",
        "test": "assert remove_all_spaces(\"   hello world  \") == \"helloworld\"",
        "num_ids": 266
    },
    {
        "number": 801,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    # Check if all three integers are positive\n    if x >= 0 and y >= 0 and z >= 0:\n        # Check if at least one of the integers is equal to itself\n        if x == y and x == z:\n            return 1\n        elif y == z and y == x:\n            return 1\n        else:\n            return 0\n    else:\n        return \"The integers are not positive.\"",
        "test": "assert test_three_equal(1,1,1) == 1",
        "num_ids": 405
    },
    {
        "number": 802,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Calculate the number of rotations required to generate a sorted array\n    rotations = 0\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] > arr[i + 1]:\n            rotations += 1\n        i += 1\n\n    return rotations",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0 # Test case 1",
        "num_ids": 642
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_perfect_square(n):\n    # Calculate the square root of n\n    root = int(n**0.5)\n    \n    # Check if the square root is equal to the rounded value of n\n    return root == int(root)",
        "test": "assert is_perfect_square(4) == True",
        "num_ids": 305
    },
    {
        "number": 804,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr):\n    # Initialize the result variable with 1\n    result = 1\n\n    # Iterate through the array and multiply each element with the result variable\n    for num in arr:\n        result *= num\n\n    # Check if the result is even or not\n    if result % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2, 4, 6]) == True # check if the product of 2, 4, and 6 is even",
        "num_ids": 465
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = None\n    for list in lists:\n        current_sum = sum(list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n    return max_list",
        "test": "assert max_sum_list([[1]]) == [1]",
        "num_ids": 515
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i] == test_str[i].upper():\n            max_run += 1\n    return max_run\n\ntest_str = \"hello world\"\nprint(max_run_uppercase(test_str))  # Output: 3",
        "test": "assert max_run_uppercase(\"racecar\") == \"racecar\"",
        "num_ids": 441
    },
    {
        "number": 807,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # If no odd number is found, return None",
        "test": "assert first_odd([1]) == 1",
        "num_ids": 201
    },
    {
        "number": 808,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)-K+1):\n        if test_tup[i:i+K] == K:\n            return True\n    return False",
        "test": "assert check_K((), 0) == False",
        "num_ids": 274
    },
    {
        "number": 809,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for item in test_tup2:\n        if item in test_tup1:\n            return False\n        else:\n            continue\n    return True\n",
        "test": "assert check_smaller((1, 2, 3), (1, 3, 4)) == False",
        "num_ids": 417
    }
]