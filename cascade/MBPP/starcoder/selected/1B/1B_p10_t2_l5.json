[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two lists and returns a list of common elements.\n    The common elements are the elements that are present in both the lists.\n    '''\n    common_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            common_elements.append(i)\n    return common_elements",
        "test": "assert similar_elements([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]",
        "num_ids": 1546,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(2) == False",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # Create a max heap from the given list of numbers\n    max_heap = [x for x in nums]\n    # Use heapq.heapify() to convert the list into a max heap\n    hq.heapify(max_heap)\n    # Iterate through the max heap and remove the top n elements\n    for i in range(n - 1, -1, -1):\n        # Remove the maximum element from the heap\n        max_heap[0], max_heap[-1] = max_heap[-1], max_heap[0]\n        # Heapify the modified heap\n        hq.heapify(max_heap)\n    # Return the largest n elements from the heap in descending order\n    return [x for _, x in sorted(zip(max_heap, nums), reverse=True)]",
        "test": "assert heap_queue_largest([], 0) == []",
        "num_ids": 1915,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Power_Of_Two(x):\n    if x == 0 or x == 1:\n        return True\n    while x!= 1:\n        if x % 2 == 1:\n            return False\n        x = int(x/2)\n    return True",
        "test": "assert is_Power_Of_Two(2) == True # the first two bits are 1s, so the result should be True",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "import re\n\ndef find_char_long(text):\n    # Using regular expression to match all words containing at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "test": "assert find_char_long('hello world') == ['hello', 'world']",
        "num_ids": 1471,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 1074,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a Python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Initialize variables\n    rotations = 0\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Check if the current character is the same as the last character\n        if str[i] == str[i-1]:\n            count += 1\n            # If the current character is the same as the last character and count is greater than 0, increment rotations\n            if count > 0:\n                rotations += 1\n        # Reset the count variable for the next iteration\n        count = 0\n\n    # Return the minimum number of rotations required to get the same string\n    return rotations",
        "test": "assert find_Rotations('abc') == 0",
        "num_ids": 1945,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 1:\n        return s[:-1] + s[-1:]\n    elif s.count(ch) == 2:\n        return s[:-2] + s[-2:]\n    else:\n        return s",
        "test": "assert remove_Occ(\"hello world\", \"z\") == \"hello world\"",
        "num_ids": 1245,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize a list to store the row sums\n    row_sums = [0] * len(M)\n\n    # loop over each row in the matrix\n    for i in range(len(M)):\n        # add the current row's sum to the row sums list\n        row_sums[i] = sum(row_sums[:i+1])\n        # store the current row in a temporary variable\n        temp = M[i]\n        # update the matrix with the sorted row\n        M[i] = [temp[j] for j in range(len(M[i]))]\n\n    # loop over each row sum in the row sums list\n    for i in range(len(row_sums)):\n        # loop over each other row sum in the row sums list\n        for j in range(i+1, len(row_sums)):\n            # check if the current row sum is greater than the other row sum\n            if row_sums[i] > row_sums[j]:\n                # swap the current and other row sums\n                row_sums[i], row_sums[j] = row_sums[j], row_sums[i]\n                # loop over each other row in the matrix\n                for k in range(len(M)):\n                    # swap the elements at the same row positions\n                    M[k][i], M[k][j] = M[k][j], M[k][i]\n\n    # return the sorted matrix\n    return M",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 3216,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def find_Volume(l, b, h):\n    volume = l * b * h\n    return volume",
        "test": "assert find_Volume(3,4,5) == 60",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # use regular expressions to match sequences of lowercase letters and underscores\n    pattern = r'[a-z][a-z_]*'\n    matches = re.findall(pattern, text)\n    if len(matches) == 1:\n        # check if the first match is a single lowercase letter followed by an underscore\n        return matches[0][0] == matches[0][-1]\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"\") == False",
        "num_ids": 1240,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def square_perimeter(side_length):\n    '''\n    Returns the perimeter of a square given its side length as input.\n    '''\n    return side_length * 4",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 719,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    unique_chars = set()\n    for i in range(len(string)):\n        if string[i] not in unique_chars:\n            unique_chars.add(string[i])\n    return ''.join(unique_chars)\n",
        "test": "assert str_to_list(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]",
        "num_ids": 1230,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Test if a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums))!= len(arraynums)",
        "test": "assert test_duplicate([]) == False, \"Test1: [] should not contain any duplicate element\"",
        "num_ids": 1450,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_woodall(x): \n    if x % 10 == 0 or x % 5 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(123) == False",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def rev(num):\n    if num < 2:\n        return True\n    else:\n        return rev(num-2)\n\nprint(rev(7)) # Output: True\nprint(rev(5)) # Output: False\nprint(rev(0)) # Output: True",
        "test": "assert rev(222) is True",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    max_num = arr[0]\n    for i in range(1, len(arr)) :\n        if arr[i] > max_num :\n            max_num = arr[i]\n\n    return max_num",
        "test": "assert find_Max_Num([1]) == 1",
        "num_ids": 1518,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def opposite_Signs(x,y):\n    # Check if x and y are in the same sign or not\n    if x >= 0 and y >= 0:\n        # If they are in the same sign, then their XOR will be 0.\n        xor = x ^ y\n        if xor == 0:\n            # If they have opposite signs, then they have opposite signs\n            return True\n        else:\n            # If they do not have opposite signs, then they do not have opposite signs\n            return False\n    else:\n        # If either of the integers is negative, then they do not have opposite signs\n        return False",
        "test": "assert opposite_Signs(5, -3) == False, \"The function is not working correctly for the given input.\"",
        "num_ids": 1466,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_octagonal(n):\n    '''\n    Function to find the nth octagonal number.\n    '''\n\n    # If n is less than 1 or greater than 20, return False\n    if n < 1 or n > 20:\n        return False\n\n    # Initialize variables\n    i = 1\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    e = 1\n    f = 1\n    g = 1\n    h = 1\n\n    # Calculate the nth octagonal number\n    while i <= n:\n        # Calculate the factorial of i\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n\n        # Calculate the nth octagonal number\n        n_oct = a * b * c * d * e * f * g * h\n\n        # Update the nth octagonal number and the factors\n        h = g\n        g = f\n        f = e\n        e = d\n        d = c\n        c = b\n        b = a\n        a = n_oct\n\n        # Update i\n        i += 1\n\n    # Return the nth octagonal number\n    return n_oct",
        "test": "assert is_octagonal(1) == True",
        "num_ids": 1721,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    count = defaultdict(int)\n    for char in s:\n        count[char] += 1\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1] in count:\n                count[s[i:j+1]] += 1\n    return len(count)",
        "test": "assert count_Substrings(\"\") == 0",
        "num_ids": 1865,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1170,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n\n    It uses a for loop to iterate through each element in the list and compares the adjacent elements. If the current element is greater than the adjacent element, then the current element is the maximum difference.\n\n    If the current element is not greater than the adjacent element, then the current element and the adjacent element are not available in a pair, so there is no need to compare them.\n\n    The function returns the maximum difference found.\n\n    Parameters:\n        test_list: A tuple list containing elements to be compared.\n\n    Returns:\n        The maximum difference between available pairs in the input list.\n    '''\n\n    # Initialize the maximum difference to 0\n    max_diff = 0\n\n    # Iterate through each element in the list\n    for i in range(len(test_list) - 1):\n        # Compare the current element with the adjacent element\n        if test_list[i + 1] > test_list[i]:\n            # If the current element is greater than the adjacent element, update the maximum difference\n            max_diff = max(max_diff, test_list[i + 1] - test_list[i])\n\n    return max_diff",
        "test": "assert max_difference([]) == 0",
        "num_ids": 2355,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # define a function to sort the list of tuples based on the second value of each tuple\n    def sort_by_second(lst):\n        return sorted(lst, key=lambda x: x[1])\n\n    # call the function and pass in the subjectmarks list\n    sorted_marks = sort_by_second(subjectmarks)\n\n    # return the sorted list of tuples\n    return sorted_marks",
        "test": "assert subject_marks([(80, 'Math'), (70, 'Science'), (60, 'English'), (90, 'History'), (80, 'Physics')]) == [(80, 'Math'), (60, 'English'), (70, 'Science'), (90, 'History'), (80, 'Physics')]",
        "num_ids": 1463,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total",
        "test": "assert recursive_list_sum([]) == 0, \"recursive_list_sum([]) should return 0\"",
        "num_ids": 1391,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1,-2,3,4,5]) == 4",
        "num_ids": 770,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    result = 1\n\n    for i in range(2, n+1):\n        result *= i\n\n    return result",
        "test": "assert bell_number(1) == 1",
        "num_ids": 2028,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if A[j] > A[j+1]:\n                return False\n    return True",
        "test": "assert is_Monotonic([1, 3, 5, 2, 4]) == False",
        "num_ids": 1588,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True\n",
        "test": "assert is_sublist([1,2,3,4,5], [2,4,6]) == False # case 1",
        "num_ids": 1363,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == len(set(tuple(Input))):\n        return True\n    else:\n        return False",
        "test": "assert find_equal_tuple(()) == True",
        "num_ids": 1571,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def comb_sort(nums):\n    for i in range(1, len(nums)):\n        current_num = nums[i]\n        j = i - 1\n        while j >= 0 and nums[j] > current_num:\n            nums[j+1] = nums[j]\n            j -= 1\n        nums[j+1] = current_num\n    return nums",
        "test": "assert comb_sort([1, 1, 1]) == [1, 1, 1]",
        "num_ids": 2306,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number is divisible by both 1 and 2\n    if n % 1 == 0 and n % 2 == 0: \n        # Return True if the number can be represented as the difference of two squares\n        return True\n    else: \n        # Return False if the number cannot be represented as the difference of two squares\n        return False",
        "test": "assert dif_Square(1) == 0, \"dif_Square(1) should return 0 for 1\"",
        "num_ids": 2157,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True",
        "test": "assert is_samepatterns(['red', 'blue', 'yellow'], [['red', 'blue'], ['green','red']]) == False",
        "num_ids": 1954,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = set()\n    for tup in test_list:\n        if len(set(tup)) % K == 0:\n            result.add(tup)\n    return list(result)",
        "test": "assert find_tuples([], 2) == []",
        "num_ids": 2088,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(3) == False",
        "num_ids": 869,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # define a function to check if the length of the word is odd or not\n    def check_odd_length(word):\n        # check if the length of the word is odd\n        if len(word) % 2 == 1:\n            return True\n        else:\n            return False\n\n    # call the function to check if the length of the word is odd or not\n    result = check_odd_length(s)\n\n    # return the result\n    return result",
        "test": "assert word_len(\"\") == 0",
        "num_ids": 1032,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n**3 - n**2 + n)",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 2083,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Calculates the volume of a sphere using the formula V = \u03c0r^3\n    '''\n    return math.pi * r ** 3",
        "test": "assert volume_sphere(0) == 0",
        "num_ids": 2528,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the character and its ASCII value as variables\n    char = None\n    ascii_value = None\n\n    # Loop through the string and update the character and its ASCII value\n    for char_index in range(len(strr)):\n        ascii_value = ord(strr[char_index])\n        # Check if the ASCII value is between 32 and 126 (inclusive)\n        if 32 <= ascii_value <= 126:\n            # Update the character and its ASCII value\n            if char is None:\n                char = chr(ascii_value)\n            elif chr(ascii_value)!= char:\n                # If the character does not match, reset the character and its ASCII value\n                char = None\n                ascii_value = None\n                break\n        else:\n            # If the ASCII value is not between 32 and 126, reset the character and its ASCII value\n            char = None\n            ascii_value = None\n            break\n\n    # Return the character if it is found, None otherwise\n    return char",
        "test": "assert get_Char('hello world') == 'o'",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(2, n + 1):\n            c = a + b\n            a = b\n            b = c\n        return b",
        "test": "assert sequence(1) == 1",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi * r**2\n\nprint(surfacearea_sphere(10)) # output: 314.1592653589793",
        "test": "assert surfacearea_sphere(5) == 78.53981633974483",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Function to find the nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        half_number = 1\n        for i in range(n//2-1):\n            half_number += 1\n        return 1 + half_number + centered_hexagonal_number(n-1)\n    else:\n        half_number = 1\n        for i in range(n//2):\n            half_number += 1\n        return 1 + half_number + centered_hexagonal_number(n-1)",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 2189,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({},{},{}) == {}",
        "num_ids": 2070,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def freq_count(lst):\n    '''\n    Returns a dictionary where the keys are elements of the list and the values are the number of times that element appears.\n    '''\n\n    freq_dict = {}\n\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n\n    return freq_dict",
        "test": "assert freq_count([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 1184,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def closest_num(N):\n    closest = float('inf')\n    for i in range(1, N+1):\n        if abs(i-N) < closest:\n            closest = abs(i-N)\n    return N - closest",
        "test": "assert closest_num(2) == 2",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_word = \"\"\n    max_length = 0\n    \n    for word in list1:\n        if len(word) > max_length:\n            max_word = word\n            max_length = len(word)\n            \n    return max_length\n",
        "test": "assert len_log([]) == 0",
        "num_ids": 1349,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Convert the string values to lowercase to make the search case-insensitive\n    str1 = str1.lower()\n    sub_str = sub_str.lower()\n\n    # Check if the sub_str is present in str1\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring(\"hello world\", \"w\") == True",
        "num_ids": 1315,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Define a list of numbers from 0 to n-1\n    numbers = list(range(n+1))\n\n    # Define the sum of the numbers from 1 to n\n    sum_of_numbers = sum(numbers[1:])\n\n    # If the sum of the numbers is even, the number is undulating\n    if sum_of_numbers % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_undulating(1234) == False",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,3) == 8",
        "num_ids": 835,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "from operator import itemgetter\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = test_list[0][1]\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            min_index = i\n    return test_list[min_index]",
        "test": "assert index_minimum([('a', 3), ('b', 1), ('c', 4), ('d', 2), ('f', 5)]) == ('b', 1)",
        "num_ids": 1514,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = float('inf')\n    for i in lst:\n        if len(i) < smallest_length:\n            smallest_length = len(i)\n    return smallest_length",
        "test": "assert Find_Min_Length([[1]]) == 1",
        "num_ids": 1578,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(12) == 6 # 12 is a divisor of 6",
        "num_ids": 1104,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def frequency_lists(list1):\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store frequency of each element\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 1727,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    length = len(numbers)\n    for num in numbers:\n        product *= num\n    result = product / length\n    return result",
        "test": "assert multiply_num([1, 2, 3, 4, 5]) == 15 # test case 2",
        "num_ids": 976,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 3204,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Function to find the next smallest palindrome of a specified integer.\n    '''\n    # Initialize the smallest palindrome as the same as the input number\n    smallest_palindrome = num\n\n    # Loop through the number range from smallest to largest\n    for i in range(num+1, int(num**0.5)+1):\n        # Check if the number is a palindrome and is greater than or equal to the smallest palindrome\n        if str(i) == str(i)[::-1] and int(i) >= smallest_palindrome:\n            smallest_palindrome = i\n            break\n\n    # Return the next smallest palindrome\n    return smallest_palindrome",
        "test": "assert next_smallest_palindrome(121) == 121",
        "num_ids": 2588,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return None\n\n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 3) == 3",
        "num_ids": 1405,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # convert snake case string to camel case string\n    parts = word.split(\"_\")\n    words = [parts[0]]\n    for i in range(1, len(parts)):\n        words.append(parts[i])\n    return \"\".join(words)\n",
        "test": "assert snake_to_camel('UpperCamelCaseString') == 'UpperCamelCaseString'",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n == m:\n        return n\n    elif n > m:\n        return eulerian_num(m, n)\n    else:\n        return 1 + eulerian_num(n - m, m)",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 1899,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    n = len(input_list)\n\n    # Base case: if the list has only one element, it's already sorted\n    if n == 1:\n        return input_list\n\n    # Divide the list into two halves recursively\n    mid = n // 2\n    left_list = input_list[:mid]\n    right_list = input_list[mid:]\n\n    # Recursively sort the two halves\n    left_list = sort_sublists(left_list)\n    right_list = sort_sublists(right_list)\n\n    # Merge the two sorted halves\n    i = j = k = 0\n    while i < len(left_list) and j < len(right_list):\n        if left_list[i] < right_list[j]:\n            input_list[k] = left_list[i]\n            i += 1\n        else:\n            input_list[k] = right_list[j]\n            j += 1\n        k += 1\n\n    # Copy any remaining elements from the left or right list\n    while i < len(left_list):\n        input_list[k] = left_list[i]\n        i += 1\n        k += 1\n\n    while j < len(right_list):\n        input_list[k] = right_list[j]\n        j += 1\n        k += 1\n\n    return input_list\n",
        "test": "assert sort_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 2197,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def count(lst):  \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0  \n    for i in lst:  \n        if i:  \n            count += 1  \n    return count  ",
        "test": "assert count([]) == 0",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup",
        "test": "assert add_lists([], (1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)",
        "num_ids": 1115,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # combine the three lists into a single sorted list\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 2655,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # convert string to binary\n    binary = bin(int(s,2))[2:]\n\n    # initialize count and length of binary\n    count = 0\n    length = len(binary)\n\n    # iterate through each bit of the binary\n    for i in range(length):\n        # check if the current bit is 1\n        if binary[i] == '1':\n            # count the number of 1s in the binary string\n            count += 1\n        # if the count reaches n, break the loop\n        if count >= n:\n            break\n\n    return count",
        "test": "assert odd_Equivalent(\"10001010\",3) == 3 #test case 1",
        "num_ids": 1842,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n\n    Parameters:\n    nestedlist (list): A list of lists where each inner list contains elements.\n\n    Returns:\n    list: A list of common elements in the nested lists.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Loop through the nested lists\n    for innerlist in nestedlist:\n        # Loop through the inner lists and compare each element with all other elements in the list\n        for element in innerlist:\n            if element in common_elements:\n                # If an element is already in the common_elements list, remove it to avoid duplicates\n                common_elements.remove(element)\n\n    # Return the common_elements list\n    return common_elements",
        "test": "assert common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9],[]]) == []",
        "num_ids": 2232,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"5\") == True",
        "num_ids": 691,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # Check if all dictionaries in the list are empty\n    all_empty = True\n    for d in list1:\n        if len(d) > 0:\n            all_empty = False\n            break\n\n    return all_empty",
        "test": "assert empty_dit([]) == True, \"The function should return True if the list is empty, and False otherwise.\"",
        "num_ids": 1045,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)",
        "test": "assert tuple_to_int((1, 2, 3)) == 6",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, str) or isinstance(element, int) or isinstance(element, float):\n                result.append(float(element))\n    return result",
        "test": "assert list_to_float([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]",
        "num_ids": 1754,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def string_to_list(string):\n    '''\n    Convert a string to a list of strings, separated by spaces.\n    '''\n    return string.split()",
        "test": "assert string_to_list('') == []",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    most_common = [k for k, v in count.items() if v == max(count.values())]\n    if most_common:\n        return most_common[0]\n    else:\n        return None",
        "test": "assert search([1, 1, 2, 3, 4, 5]) == 1",
        "num_ids": 2594,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def max_product_tuple(lst):\n    if len(lst) < 2:\n        return None\n    \n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i] * lst[j]\n            abs_product = abs(product)\n            if abs_product > max_product:\n                max_product = abs_product\n    \n    return max_product",
        "test": "assert max_product_tuple([1,2,3]) == 6",
        "num_ids": 2262,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    a = 1\n    total = 0\n    \n    while a < limit:\n        if is_amicable(a):\n            total += a\n        a += 1\n    \n    return total\n\ndef is_amicable(n):\n    '''\n    Check if a number is amicable.\n    '''\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert amicable_numbers_sum(100) == 1516 # 1 + 2 + 4 + 7 + 11 + 13 + 17 + 19 + 23 + 29 = 1516",
        "num_ids": 1827,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0 and b == 0:\n        return 0\n    else:\n        return cmath.phase(a)",
        "test": "assert angle_complex(0,0) == 0 #positive zero",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Initialize variables\n    num_zeros = 0\n    num_ones = 0\n\n    # Iterate through the string and count the number of zeros and ones\n    for char in string:\n        if char == '0':\n            num_zeros += 1\n        else:\n            num_ones += 1\n\n    # Find the maximum difference\n    max_diff = num_ones - num_zeros\n\n    return max_diff",
        "test": "assert find_length(\"10101\") == 1",
        "num_ids": 2835,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def sum(a, b):\n    common_divisor = 0\n    for i in range(1, b + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisor += i\n    return common_divisor\n",
        "test": "assert sum(3,5) == 1, \"Sum of 3 and 5 should be 1\"",
        "num_ids": 1595,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    # Split the string into a list of words\n    words = str.split()\n\n    # Initialize an empty list to store the words that are longer than n characters\n    result = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than or equal to n\n        if len(word) >= n:\n            # Add the word to the result list\n            result.append(word)\n\n    # Return the result list\n    return result",
        "test": "assert long_words(1, \"world\") == [\"world\"]",
        "num_ids": 1257,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if my_matrix == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]:\n        return True\n    else:\n        return False",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == False",
        "num_ids": 2889,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = defaultdict(int)\n    for num in nums:\n        max_freq[num] += 1\n    return max(max_freq.keys())",
        "test": "assert max_occurrences([1, 2, 2, 3, 3, 3]) == 3",
        "num_ids": 1707,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouy\"\n    return str1[::-1]\n\nstr1 = \"hello world\"\nprint(reverse_vowels(str1))  # \"dlrow olleh\"",
        "test": "assert reverse_vowels(\"ABCD\") == \"DCBA\"",
        "num_ids": 1213,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def tup_string(tup1):\n    '''\n    Converts a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string(()) == '()'",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum",
        "test": "assert sum_negativenum([0, 0, 0, 0, 0]) == 0",
        "num_ids": 1149,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * hexagonal_num(n-1) + hexagonal_num(n-2) - hexagonal_num(n-3) - hexagonal_num(n-4)",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 2078,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            count += 1\n    ratio = 0 if count == 0 else float(zero_count) / count\n    return ratio",
        "test": "assert zero_count([0, 0, 0, 0, 0]) == 0/5",
        "num_ids": 1774,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # if the given number is 0 or negative, it can't be represented as sum of non-zero powers of 2\n    if n <= 0:\n        return False\n    \n    # check if the given number is a power of 2\n    if n & (n - 1) == 0:\n        return True\n    \n    # check if the given number can be represented as sum of non-zero powers of 2\n    for i in range(32, n, 1):\n        if n % i == 0:\n            return False\n    \n    # if the loop completes, the given number is a power of 2 and can be represented as sum of non-zero powers of 2\n    return True",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 1829,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * r * math.pi\n    return circumference",
        "test": "assert circle_circumference(5) == 31.41592653589793",
        "num_ids": 1133,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize empty set to store unique numbers\n    unique_set = set()\n    # Loop through each nested list in the list of lists\n    for nested_list in test_list:\n        # Loop through each element in the nested list and add it to the set\n        for element in nested_list:\n            unique_set.add(element)\n    # Return the set of unique numbers as a list\n    return list(unique_set)\n",
        "test": "assert extract_singly([]) == []",
        "num_ids": 1500,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def pancake_sort(nums):\n    '''\n    Sort a list of integers in ascending order.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums",
        "test": "assert pancake_sort([3, 2, 1, 4, 6]) == [1, 2, 3, 4, 6]",
        "num_ids": 1902,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3,4,5],[3,4,5,6,7],[2,3,1,1,4,6]) == 6",
        "num_ids": 1610,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    num_lists = len(set(Input))\n    return num_lists\n",
        "test": "assert find_lists(()) == 0",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 4",
        "num_ids": 1494,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check for zero division error\n    if b == 0:\n        return None\n    \n    # Calculate the discriminant\n    discriminant = b * b - 4 * a * n\n    \n    # If discriminant is negative, then the solution doesn't exist\n    if discriminant < 0:\n        return None\n    \n    # Calculate the solutions to the quadratic equation\n    real = (-b + (b ** 2 - 4 * a * n) ** 0.5) / (2 * a)\n    imaginary = (-b - (b ** 2 - 4 * a * n) ** 0.5) / (2 * a)\n    \n    # Check if both solutions are real numbers\n    if real.is_integer() and imaginary.is_integer():\n        return (real, imaginary)\n    \n    # Return None if no solution is found\n    return None",
        "test": "assert find_solution(2, 3, 9) is None",
        "num_ids": 2016,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 1473,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series = []\n    i = 0\n    while n - 2*i >= 0:\n        series.append(n - 2*i)\n        i += 1\n    return series[0]",
        "test": "assert sum_series(0) == 0, \"sum_series should return 0 for n = 0\"",
        "num_ids": 1394,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (pi/4) * (s**2)\n    return area",
        "test": "assert area_polygon(3, 5) == 28.0",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "import math\n\ndef div_sum(n):\n    # Get the list of divisors of n\n    divs = [num for num in range(1, n+1) if n % num == 0]\n\n    # Calculate the sum of the divisors\n    div_sum = sum(divs)\n\n    # Check if the sum is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False",
        "test": "assert div_sum(10) == 0",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to make the comparison case-insensitive\n    str1 = str1.lower()\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through the string, checking each character at the same position as the English alphabet\n    for char in str1:\n        if char.isalpha():\n            # If the character is a letter (both uppercase and lowercase), increment the count variable\n            count += 1\n\n    # Return the count of characters that occur at the same position in the English alphabet as in the original string\n    return count",
        "test": "assert count_char_position(\"abcde\") == 5",
        "num_ids": 1907,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n\n    return count",
        "test": "assert find_even_pair([2, 4, 6, 8, 10]) == 0",
        "num_ids": 1368,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # initialize the next power of 2 to 1\n    next_power = 1\n\n    # loop until the next power of 2 is greater than n\n    while next_power < n:\n        # multiply the next power of 2 by 2\n        next_power <<= 1\n\n    # return the next power of 2\n    return next_power",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 1473,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,1,2,3,3,3,4,4,4],1) == 2",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9, \"The sum of numbers in the list [1, 2, 3, 4, 5] within the range [1, 3] should be 9.\"",
        "num_ids": 1641,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 0.5 * a * (a + 1)",
        "test": "assert perimeter_pentagon(5) == 15, \"The perimeter of a regular pentagon should be 15.\"",
        "num_ids": 1058,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"abcd\") == 0, \"The count of 'abcd' should be 0.\"",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for item in test_tuple:\n        if type(item)!= type(test_tuple[0]):\n            return False\n    return True",
        "test": "assert check_type(('a', 'b', 1)) == False",
        "num_ids": 1166,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count >= n // 2",
        "test": "assert is_majority([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 10, 2) == True",
        "num_ids": 1796,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0, \"The count of set bits for 0 should be 0\"",
        "num_ids": 1130,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def odd_values_string(str):\n    # Initialize an empty string to store the modified string\n    modified_str = \"\"\n    \n    # Loop through each character of the input string\n    for char in str:\n        \n        # Check if the index of the current character is odd\n        if char % 2 == 1:\n            \n            # Add the current character to the modified string\n            modified_str += char\n    \n    # Return the modified string\n    return modified_str",
        "test": "assert odd_values_string(\"ABCD\") == \"ABCD\"",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(5, 3, 2) == 2",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes two integer arguments, n and l, which represent the starting and ending numbers for which we want to find all the bits that are unset.\n    The function returns a boolean value True if all the bits are unset in the given range, False otherwise.\n    '''\n    # Initializing a boolean variable to check all bits are unset\n    all_unset = True\n\n    # Looping through all numbers between l and r\n    for i in range(l, r+1):\n        # Checking if the current number is equal to the binary representation of n\n        if n & (1 << i):\n            # If it is, then the current number is equal to the binary representation of n\n            all_unset = False\n            # Break the loop to avoid checking all bits again\n            break\n\n    return all_unset",
        "test": "assert all_Bits_Set_In_The_Given_Range(3,0,10) == False",
        "num_ids": 2128,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def re_arrange_array(arr, n):\n    arr.sort(reverse=True)\n    arr[:n] = [x if x > 0 else -x for x in arr[:n]]\n    return arr",
        "test": "assert re_arrange_array([], 0) == []",
        "num_ids": 2265,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1",
        "test": "assert replace_blank(\"\", \"-\") == \"\"",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([5, 3, 8, 1, 2], 2) == [8, 5]",
        "num_ids": 1516,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = r * h\n    return area",
        "test": "assert lateralsuface_cylinder(10,0) == 0",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "test": "assert volume_cube(1) == 1",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n:\n        if n & 1:\n            n ^= 1\n        n >>= 1\n    return n",
        "test": "assert even_bit_set_number(1024) == 0",
        "num_ids": 1348,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 120,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    occurrences = Counter(test_list)\n    # Return the occurrences as a dictionary\n    return occurrences",
        "test": "assert check_occurences([]) == {}",
        "num_ids": 1879,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        if str[i]!= '':\n            count += 1\n    return count",
        "test": "assert number_of_substrings('') == 0",
        "num_ids": 1210,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    else:\n        return n * get_total_number_of_sequences(m, n-1)",
        "test": "assert get_total_number_of_sequences(3,2) == 2",
        "num_ids": 1512,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list2) == 0:\n        return list1\n    else:\n        return [list1[-1] + element for element in list2]",
        "test": "assert replace_list([],[]) == []",
        "num_ids": 1658,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac('hello') == 5 # count the number of characters in the string 'hello'",
        "num_ids": 780,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n\n    # initialize a variable to keep track of the next perfect square number\n    next_square = 2\n\n    # iterate through the numbers from 2 to the square root of N\n    for i in range(2, int(math.sqrt(N)) + 1):\n        # if the square of i is equal to N, then N is a perfect square\n        if i * i == N:\n            return i\n\n    # N is not a perfect square, so return N+1 as the next perfect square number\n    return N + 1",
        "test": "assert next_Perfect_Square(1) == 1",
        "num_ids": 1368,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def max_sum(arr):\n    # initialize the maximum sum to negative infinity\n    max_sum = float('-inf')\n\n    # loop over all possible bitonic subsequences\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            # find the sum of the current bitonic subsequence\n            bitonic_sum = sum(arr[i:j+1])\n\n            # update the maximum sum if the current subsequence is better than the current max sum\n            if bitonic_sum > max_sum:\n                max_sum = bitonic_sum\n\n    return max_sum",
        "test": "assert max_sum([1,2,3,4,5]) == 15, \"The maximum sum of a subsequence of length 5 with respect to a given array [1, 2, 3, 4, 5] is incorrect.\"",
        "num_ids": 2191,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes square roots using the babylonian method.\n    The method works by repeatedly subtracting the square of the current number from the square of the previous number and dividing the sum by 2.\n    The final answer will be the square root of the input number.\n    '''\n    current_number = number\n    next_number = number\n    current_sum = 0\n    next_sum = 0\n    count = 0\n    \n    while next_number ** 2!= current_number:\n        next_sum = current_number + next_number\n        current_sum = current_sum + current_number\n        count += 1\n        if count >= 1000:\n            return \"The maximum number of iterations has been reached.\"\n        current_number = next_number\n        next_number = next_number ** 0.5\n    \n    return next_number ** 0.5",
        "test": "assert babylonian_squareroot(1) == 1",
        "num_ids": 1630,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def lps(str):\n    # Create a 2D array of size (len(str) + 1) x (len(str) + 1)\n    dp = [[0] * (len(str) + 1) for i in range(len(str) + 1)]\n\n    # Initialize the first column of the first row\n    for i in range(1, len(str) + 1):\n        dp[i][i] = 1\n\n    # Calculate the length of the longest palindromic subsequence using dynamic programming\n    for i in range(2, len(str) + 1):\n        for j in range(1, i):\n            if str[i - 1] == str[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[len(str)][len(str)]",
        "test": "assert lps(\"\") == 0",
        "num_ids": 2402,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    if n == 1:\n        return 1\n\n    # Calculate the harmonic sum by iterating from 1 to n-1 and adding each harmonic number to a running total\n    total = 0\n    for i in range(1, n+1):\n        total += 1 / i\n    \n    return total",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 1071,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns their intersection.\n    '''\n    # Create a set to store the unique elements from both arrays\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Create a set to store the elements from only one of the arrays\n    intersection = set1.intersection(set2)\n    \n    # Convert the set to a list and return it\n    return list(intersection)",
        "test": "assert intersection_array([1,2,3,4,5],[1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 1936,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_X(tup, x):\n    count = 0\n    for t in tup:\n        if t == x:\n            count += 1\n    return count",
        "test": "assert count_X((1,2,3,4,5), 6) == 0",
        "num_ids": 1195,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n    new_list.insert(0, element)\n    return new_list",
        "test": "assert insert_element(['apple','banana','orange'], 'pear') == ['pear','apple','banana','orange']",
        "num_ids": 1459,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    angle = numbers[0]\n    magnitude = numbers[1]\n    theta = cmath.phase(numbers[0])\n    r = cmath.rect(theta)\n    phi = cmath.arg(numbers[0])\n    psi = 2 * cmath.pi * cmath.atan2(numbers[1], r)\n    return [psi, phi]",
        "test": "assert convert(1+2j) == (1.4142135623730951, 0.7853981633974483)",
        "num_ids": 1542,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_integer(list1):\n    '''\n    Returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 888,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations (with repetition) of n elements from l.\n    Returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "test": "assert combinations_colors([], 2) == []",
        "num_ids": 1954,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert count_Primes_nums(1) == 0",
        "num_ids": 1452,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 728,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    # Find the maximum element in the first tuple\n    max1 = max(test_tup1)\n    # Find the maximum element in the second tuple\n    max2 = max(test_tup2)\n    # Find the minimum element in the tuple\n    min1 = min(test_tup1)\n    # Find the minimum element in the second tuple\n    min2 = min(test_tup2)\n    # If the maximum element in the first tuple is greater than the\n    # maximum element in the second tuple, return the first tuple\n    if max1 > max2:\n        return test_tup1\n    # If the maximum element in the second tuple is greater than the\n    # maximum element in the first tuple, return the second tuple\n    elif max2 > max1:\n        return test_tup2\n    # If the minimum element in the tuple is less than the minimum element\n    # in the second tuple, return the first tuple\n    elif min1 < min2:\n        return test_tup1\n    # If the minimum element in the second tuple is less than the minimum\n    # element in the tuple, return the second tuple\n    else:\n        return test_tup2",
        "test": "assert maximize_elements( (1, 2), (3, 2) ) == (3, 2)",
        "num_ids": 2356,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def newman_prime(n):\n    if n < 2:\n        return None\n    \n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    p = 2\n    while p * p <= n:\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n        p += 1\n    \n    if sieve[n]:\n        return n\n    \n    return None",
        "test": "assert newman_prime(2) == 2",
        "num_ids": 2826,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # Check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    # Initialize the result tuple\n    result_tup = ()\n    \n    # Perform division element-wise\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    # Return the result tuple\n    return result_tup",
        "test": "assert division_elements((1,2,3),(4,5,6)) == (1.0/4.0, 2.0/5.0, 3.0/6.0)",
        "num_ids": 2161,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)",
        "test": "assert split_two_parts([], 0) == ([], [])",
        "num_ids": 2185,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        return \"Invalid age\"\n    elif h_age < 6:\n        return f\"{h_age} years\"\n    elif h_age < 12:\n        return \"Too young to be a dog\"\n    elif h_age < 18:\n        return \"Veterinarian\"\n    else:\n        return \"Adolescent\"",
        "test": "assert dog_age(6) == 2",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([], 2) == []",
        "num_ids": 1407,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = l * l * l\n    return surface",
        "test": "assert lateralsurface_cube(4) == 64",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def square_Sum(n):\n    # Initialize a variable to store the sum of squares of first n odd natural numbers\n    sum = 0\n    \n    # Iterate through the first n odd natural numbers\n    for i in range(1, n+1):\n        # Square the odd number and add it to the sum\n        sum += i*i\n    \n    return sum",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the list of numbers from 1 to n\n    numbers = [i for i in range(1, n+1)]\n\n    # use a while loop to generate the sequence of numbers\n    # until the length of the sequence is n\n    while len(numbers) < n:\n        # generate a random number between 1 and the length of the sequence\n        random_num = random.randint(1, len(numbers))\n\n        # check if the random number is already in the sequence\n        if random_num not in numbers:\n            # add the random number to the sequence\n            numbers.append(random_num)\n\n    # return the nth star number\n    return numbers[n-1]",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 1194,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def ascii_value(k):\n    '''\n    Function to find the ASCII value of a character.\n    '''\n    ascii_value = {}\n    ascii_value['a'] = 97\n    ascii_value['b'] = 98\n    ascii_value['c'] = 99\n    ascii_value['d'] = 100\n    ascii_value['e'] = 101\n    ascii_value['f'] = 102\n    ascii_value['g'] = 103\n    ascii_value['h'] = 104\n    ascii_value['i'] = 105\n    ascii_value['j'] = 106\n    ascii_value['k'] = 107\n    ascii_value['l'] = 108\n    ascii_value['m'] = 109\n    ascii_value['n'] = 110\n    ascii_value['o'] = 111\n    ascii_value['p'] = 112\n    ascii_value['q'] = 113\n    ascii_value['r'] = 114\n    ascii_value['s'] = 115\n    ascii_value['t'] = 116\n    ascii_value['u'] = 117\n    ascii_value['v'] = 118\n    ascii_value['w'] = 119\n    ascii_value['x'] = 120\n    ascii_value['y'] = 121\n    ascii_value['z'] = 122\n    ascii_value['A'] = 65\n    ascii_value['B'] = 66\n    ascii_value['C'] = 67\n    ascii_value['D'] = 68\n    ascii_value['E'] = 69\n    ascii_value['F'] = 70\n    ascii_value['G'] = 71\n    ascii_value['H'] = 72\n    ascii_value['I'] = 73\n    ascii_value['J'] = 74\n    ascii_value['K'] = 75\n    ascii_value['L'] = 76\n    ascii_value['M'] = 77\n    ascii_value['N'] = 78\n    ascii_value['O'] = 79\n    ascii_value['P'] = 80\n    ascii_value['Q'] = 81\n    ascii_value['R'] = 82\n    ascii_value['S'] = 83\n    ascii_value['T'] = 84\n    ascii_value['U'] = 85\n    ascii_value['V'] = 86\n    ascii_value['W'] = 87\n    ascii_value['X'] = 88\n    ascii_value['Y'] = 89\n    ascii_value['Z'] = 90\n    ascii_value['0'] = 48\n    ascii_value['1'] = 49\n    ascii_value['2'] = 50\n    ascii_value['3'] = 51\n    ascii_value['4'] = 52\n    ascii_value['5'] = 53\n    ascii_value['6'] = 54\n    ascii_value['7'] = 55\n    ascii_value['8'] = 56\n    ascii_value['9'] = 57\n    ascii_value['+'] = 43\n    ascii_value['-'] = 45\n    ascii_value['*'] = 42\n    ascii_value['/'] = 47\n    ascii_value['='] = 61\n    ascii_value['?'] = 63\n    ascii_value['!'] = 33\n    ascii_value['('] = 40\n    ascii_value[')'] = 41\n    ascii_value['{'] = 123\n    ascii_value['}'] = 125\n    ascii_value['<'] = 60\n    ascii_value['>'] = 62\n    return ascii_value[k]",
        "test": "assert ascii_value('A') == 65",
        "num_ids": 3221,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def sum_even_and_even_index(arr):\n    sum_even = 0\n    sum_even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n            sum_even_index += i\n\n    return sum_even, sum_even_index\n",
        "test": "assert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 20",
        "num_ids": 1640,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    for i in range(1, n+1, 2):\n        even_sum += i**5\n    return even_sum",
        "test": "assert even_Power_Sum(23) == 8150",
        "num_ids": 1421,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)-1, -1, -1):\n        rear_list.append(test_list[i][1])\n    return rear_list",
        "test": "assert rear_extract([(\"a\", 1), (\"b\", 2), (\"c\", 3)]) == [3, 2, 1]",
        "num_ids": 1488,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Convert the tuples to lists to make subtraction easier\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n\n    # Check if the tuples have the same length\n    if len(test_list1)!= len(test_list2):\n        raise ValueError(\"The tuples must have the same length\")\n\n    # Iterate over the tuples and subtract the elements\n    result = []\n    for i in range(len(test_list1)):\n        result.append(test_list1[i] - test_list2[i])\n\n    return tuple(result)",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 2504,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n\n    # initialize variables to store the even index binomial coefficients\n    even_coeffs = []\n\n    # iterate from 2 to n\n    for i in range(2, n+1):\n        # calculate the even index binomial coefficient\n        coeff = math.factorial(i) / math.factorial(2*i-1)\n        even_coeffs.append(coeff)\n\n    # sum up all even index binomial coefficients\n    sum_even_coeffs = sum(even_coeffs)\n\n    # return the sum of even index binomial coefficients\n    return sum_even_coeffs",
        "test": "assert even_binomial_Coeff_Sum(5) == 36",
        "num_ids": 1628,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (4/3)*pi*r**3*h\n    return volume",
        "test": "assert volume_cylinder(5, 5) == 31.0, \"Incorrect volume calculation for cylinder with radius 5 and height 5.\"",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, 6) == {}",
        "num_ids": 1373,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    try:\n        tup = test_tup\n        if len(tup) < 2:\n            print(\"Error: Tuple must have at least two elements.\")\n            return\n        elif len(tup) == 2:\n            return 0\n        else:\n            start = tup[1]\n            counter = 1\n            for i in range(2, len(tup)):\n                if tup[i] == start:\n                    counter += 1\n                else:\n                    break\n            return counter\n    except TypeError:\n        print(\"Error: Test tuple must be a tuple.\")\n        return",
        "test": "assert count_first_elements((\"apple\", \"banana\", \"kiwi\")) == 1",
        "num_ids": 1545,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_num_decagonal(n):\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        count = 0\n        for i in range(1, n, 2):\n            count += 1\n        return count == 5",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1371,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1",
        "test": "assert sequential_search([1], 1) == (True, 0)",
        "num_ids": 1774,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Initialize a set to store unique elements\n    unique_set = set()\n\n    # Iterate through the test_list\n    for element in test_list:\n        # Check if the element is already in the set\n        if element in unique_set:\n            return False\n        # If it is not in the set, add it to the set\n        else:\n            unique_set.add(element)\n\n    # If the loop completes without returning False, then all elements are unique\n    return True",
        "test": "assert all_unique([1, 2, 2, 1]) == False",
        "num_ids": 1519,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    return [x for x in nums1 if x not in nums2]",
        "test": "assert sub_list([],[]) == []",
        "num_ids": 1236,
        "indeed": false
    },
    {
        "number": 283,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Initialize an empty dictionary to store the frequency of each digit in the integer\n    digit_freq = {}\n\n    # Convert the integer to a string\n    int_str = str(n)\n\n    # Iterate over each character in the string\n    for char in int_str:\n\n        # Check if the character is a digit\n        if char.isdigit():\n\n            # If the character is a digit, get its corresponding frequency\n            freq = digit_freq.get(int(char), 0) + 1\n\n            # Update the frequency of the character in the dictionary\n            digit_freq[int(char)] = freq\n\n    # Check if all the digits in the integer are less than or equal to their frequency\n    for freq in digit_freq.values():\n        if freq <= n:\n            return True\n    return False",
        "test": "assert validate(123456789) # True",
        "num_ids": 1498,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_element(list, element):\n    for item in list:\n        if item == element:\n            return True\n    return False",
        "test": "assert check_element([1,2,3,4,5], 6) == False",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a.{2,3}b', text):\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three(\"abc\") is False",
        "num_ids": 3246,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Args:\n        a: list of integers\n        n: int\n            length of the array\n        k: int\n            number of times to repeat the given array\n\n    Returns:\n        int:\n            the largest sum of a contiguous array which is formed by repeating the given array k times.\n    \"\"\"\n    # Step 1: Calculate the maximum subarray sum using Kadane's algorithm\n    max_sum = a[0]\n    for i in range(1, n):\n        max_sum = max(a[i], a[i] + max_sum)\n\n    # Step 2: Calculate the sum of the current subarray and repeat it k times\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(max_sum, current_sum)\n\n    # Step 3: Return the maximum sum of the modified array\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1], 1, 2) == 1",
        "num_ids": 2710,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1211,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def max_length(list1):\n    max_len = len(list1[0])\n    for i in range(1, len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len",
        "test": "assert max_length([[1],[2,3],[4,5,6],[7,8,9]]) == (3, [4, 5, 6])",
        "num_ids": 1380,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def count_no_of_ways(n, k):\n    ways = 0\n    for i in range(k):\n        for j in range(i+1, k+1):\n            ways += 4\n            if i > j and j <= 2*i-1:\n                ways -= 2\n                if j == 4:\n                    ways -= 2\n                elif j == 5:\n                    ways -= 1\n    return ways",
        "test": "assert count_no_of_ways(6, 2) == 12",
        "num_ids": 2368,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    result = round(n/m)\n    return result",
        "test": "assert find(12, 3) == 4",
        "num_ids": 947,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h)",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 972,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')  # Initialize max_val to negative infinity\n    for item in listval:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1313,
        "indeed": true
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def sum_div(number):\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nprint(sum_div(10))  # Output: 12\nprint(sum_div(12))  # Output: 24",
        "test": "assert sum_div(24) == 60",
        "num_ids": 1192,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count",
        "test": "assert get_Inv_Count([]) == 0",
        "num_ids": 1387,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    # initialize an empty list to store flattened elements\n    flattened_list = []\n\n    # loop through each element in the nested list\n    for item in list1:\n\n        # if the current item is a list, recursively call the function on that list\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n\n        # otherwise, add the current item to the flattened list\n        else:\n            flattened_list.append(item)\n\n    # return the flattened list\n    return flattened_list",
        "test": "assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4]",
        "num_ids": 1583,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculates the maximum aggregate from a list of tuples.\n    '''\n    aggregate_dict = defaultdict(float)\n\n    for tup in stdata:\n        aggregate_dict[tup[0]] += tup[1]\n\n    max_aggregate_value = max(aggregate_dict.values())\n\n    return max_aggregate_value",
        "test": "assert max_aggregate( [(1, 2), (3, 4), (5, 6)] ) == 6",
        "num_ids": 1614,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(n):\n        num = 0\n        while i > 0:\n            num += (i & 1)\n            i >>= 1\n        count += num\n    return count",
        "test": "assert count_binary_seq(3) == 2",
        "num_ids": 1670,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for k, v in d.items():\n        count += 1\n    return count",
        "test": "assert dict_depth({}) == 0",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    # initialize the result list\n    result = []\n    # initialize the current index\n    current_index = 0\n    # loop through each element in the array\n    while current_index < len(arr):\n        # if the index is within the range of the current element, append it to the result list\n        if arr[current_index] in ranges[current_index]:\n            result.append(arr[current_index])\n        # if the current index is within the range of the rotation, rotate it to find the element at the new index\n        elif current_index + rotations[current_index] < len(arr) and arr[current_index] in ranges[current_index+rotations[current_index]]:\n            current_index += rotations[current_index]\n        # if the index is not within the range of the current element and not within the range of the rotation, return -1\n        else:\n            return -1\n    # return the result list\n    return result",
        "test": "assert find_Element([],[],[],0) == []",
        "num_ids": 2013,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Define regular expression pattern for starting with 'p'\n    pattern = r'\\b\\w*p\\w*\\b'\n\n    # Use findall() method to find all matches of the pattern in the list of words\n    matches = re.findall(pattern, words)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # If there are matches, return the first two words (the starting 'p' and the rest of the words)\n    else:\n        return matches[0], matches[1]",
        "test": "assert start_withp([\"apple\", \"banana\", \"cherry\", \"grape\"]) == (\"apple\", \"banana\")",
        "num_ids": 1709,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Create a list to store the prefix sum of the subsequence\n    prefix_sum = [0] * n\n    # Create a list to store the sum of the subsequence\n    subsequence_sum = [0] * n\n    # Initialize the prefix sum with the first element of the given sequence\n    prefix_sum[index] = a[index]\n    # Initialize the subsequence sum with the sum of the first and last elements of the subsequence\n    subsequence_sum[index] = a[index] + a[index-1]\n    # Find the maximum sum of the subsequence\n    max_sum = float('-inf')\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + a[i]\n        subsequence_sum[i] = subsequence_sum[i-1] + a[i]\n        # Check if the sum of the subsequence is greater than the current maximum sum\n        if subsequence_sum[i] > max_sum:\n            max_sum = subsequence_sum[i]\n    # Return the maximum sum of the subsequence\n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 2, 4) == 14  # Test Case 1",
        "num_ids": 3373,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append(tuplex[i])\n    return tuple(colon)\n",
        "test": "assert colon_tuplex((\"x\", 3, 5), 3, 5) == (\"x\", 3, 5)",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def large_product(nums1, nums2, N):\n    # sort the two input lists in descending order of length\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # initialize the sum of the largest product so far\n    max_product = 0\n    # initialize the index of the largest product so far\n    max_index = 0\n    # loop through the two input lists until there are no more pairs left to compare\n    while len(nums1) > 0 and len(nums2) > 0:\n        # compute the size of the current pair\n        size = min(len(nums1), len(nums2))\n        # multiply the pair and update the max_product and max_index\n        product = nums1[0] * nums2[0]\n        if product > max_product:\n            max_product = product\n            max_index = 0\n        elif product == max_product:\n            max_index += 1\n        # remove the pair from the lists\n        nums1 = nums1[1:]\n        nums2 = nums2[1:]\n    # return the maximum product found\n    return max_product, max_index",
        "test": "assert large_product([1,2,3],[4,5,6], 2) == 24",
        "num_ids": 2890,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(10, 5) == 10",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"hello world\") == (\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\")",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the leftmost unset bit.\n    \"\"\"\n    # Initialize result to 0\n    result = 0\n    \n    # Iterate through all bits of the number and update result\n    for bit in bin(n):\n        if bit == '0':\n            # Update result by shifting right one bit and then left-shifting by one\n            result = result >> 1 | 1 << 0\n            \n    # Return the final result\n    return result",
        "test": "assert set_left_most_unset_bit(10) == 1 # true",
        "num_ids": 1289,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculates the volume of a cone.\n\n    Parameters:\n    r (float): radius of the cone\n    h (float): height of the cone\n\n    Returns:\n    float: volume of the cone\n    '''\n    volume = math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(1,1) == 3.1415926535897931",
        "num_ids": 1968,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while True:\n        # check if n is a power of 2\n        if n & (n - 1) == 0:\n            return n\n        # n is not a power of 2, so we increase it by 1 and try again\n        n += 1",
        "test": "assert highest_Power_of_2(1) == 1, \"1 is not the highest power of 2 less than or equal to 1.\"",
        "num_ids": 1493,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def find_lucas(n):\n    '''\n    This function calculates then'th lucas number.\n    '''\n    a, b = 0, 1\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    return b",
        "test": "assert find_lucas(1) == 1 # find_lucas(1) should return 1",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n\n    # loop through each element in the list\n    for i in list_:\n        # use the f-string to apply the format string to the element\n        i = f\"{i}{string}\"\n\n    return list_",
        "test": "assert add_string([], '') == []",
        "num_ids": 1183,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Define nested dictionary\n    d = {}\n    # Loop through each list\n    for i in range(len(l1)):\n        # Loop through each element in the list\n        for j in range(len(l2[i])):\n            # Check if the key already exists in the nested dictionary\n            if l1[i] not in d:\n                # If not, add it with the value as a list\n                d[l1[i]] = [l2[i][j]]\n            else:\n                # If the key already exists, append the value as a list\n                d[l1[i]].append(l2[i][j])\n    # Return the nested dictionary\n    return d",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 2184,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def get_max_sum(n):\n    # initializing variables\n    max_sum = float('-inf')\n    temp = 1\n    \n    # iterating from 1 to n\n    for i in range(1, n+1):\n        # using formula for next number\n        temp = (i*2 + 1) // 3\n        # if current number is greater than max sum\n        if temp > max_sum:\n            max_sum = temp\n    \n    return max_sum",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1659,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def max_length_list(input_list):\n    '''\n    Find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 1432,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    '''\n    Check if given tuple contains no duplicates.\n    '''\n    # Create a set to keep track of unique elements\n    unique_set = set()\n\n    # Iterate over each element in the tuple and add it to the set\n    for element in test_tup:\n        unique_set.add(element)\n\n    # Check if the set has the same number of elements as the input tuple\n    return len(unique_set) == len(test_tup)",
        "test": "assert check_distinct(()) == True",
        "num_ids": 1174,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Returns the first non-repeated character in the given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    char_freq = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in char_freq:\n            char_freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            char_freq[char] = 1\n\n    # Find the character with the highest frequency\n    max_freq = max(char_freq.values())\n\n    # Find the first character with a frequency of max_freq\n    for char in str1:\n        if char_freq[char] == max_freq:\n            return char\n\n    # If no character with a frequency of max_freq is found, return None\n    return None",
        "test": "assert first_non_repeating_character('abc') == 'a'",
        "num_ids": 1791,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    match = re.match(regex, string)\n    if match:\n        return match.group(1)\n    else:\n        return False",
        "test": "assert check_char(\"123\") == False",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def median_numbers(a, b, c):\n    # sort the numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # calculate the middle index\n    mid = len(nums) // 2\n\n    # check if there are even or odd numbers in the list\n    if len(nums) % 2 == 0:\n        # if there are even numbers, return the average of the two middle numbers\n        return (nums[mid - 1] + nums[mid]) / 2\n    else:\n        # if there are odd numbers, return the middle number\n        return nums[mid]",
        "test": "assert median_numbers(4,5,6) == 5",
        "num_ids": 1683,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum\n",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1277,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n    return result\n",
        "test": "assert bitwise_xor((), ()) == 0",
        "num_ids": 1837,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    unique_tuples = set()\n    for item in test_list:\n        if item not in unique_tuples:\n            unique_tuples.add(item)\n        count += 1\n    return count",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 1427,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    # Create an empty dictionary to store the result\n    result_dict = {}\n\n    # Iterate over the first nested tuple and calculate the sum of its elements\n    for i in range(len(test_tup1)):\n        result_dict[i] = sum(test_tup1[i]) + sum(test_tup2[i])\n\n    # Iterate over the second nested tuple and calculate the sum of its elements\n    for i in range(len(test_tup2)):\n        result_dict[i] = result_dict[i] + sum(test_tup2[i])\n\n    # Return the result as a dictionary\n    return result_dict",
        "test": "assert add_nested_tuples((\"a\", 1), ((\"b\", 2), ((\"c\", 3), \"d\"))) == ((\"a\", 2), ((\"b\", 2), ((\"c\", 3), \"d\")))",
        "num_ids": 2130,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def minimum(a, b):\n    return min(a, b)",
        "test": "assert minimum(1, 2) == 1",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex((1,2,3), 1) == True",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # Calculate the parity using bitwise AND operator\n    parity = x & 1\n\n    # Return True if the parity is odd, False otherwise\n    return parity == 1",
        "test": "assert find_Parity(5) == True",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Create a string from the number\n    num_str = str(n)\n    # Split the string into a list of digits\n    digits = list(num_str)\n    # Sort the list of digits in reverse order\n    digits.sort(reverse=True)\n    # Join the sorted list of digits back into a string\n    next_num = ''.join(digits)\n    # Convert the string back to an integer\n    next_num = int(next_num)\n    # Return the next bigger number\n    return next_num",
        "test": "assert rearrange_bigger(12345) == 54321",
        "num_ids": 3203,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # Create a min heap\n    min_heap = []\n\n    # Add the first element from the first array to the heap\n    heapq.heappush(min_heap, (-nums1[0], nums1[0]))\n\n    # Add the second element from the second array to the heap\n    heapq.heappush(min_heap, (-nums2[0], nums2[0]))\n\n    # Initialize the count variable\n    count = 0\n\n    # Iterate till k number of pairs are found\n    while count < k:\n\n        # Get the smallest pair from the min heap\n        pair = heapq.heappop(min_heap)\n\n        # Add the pair to a set to get unique pairs\n        pair_set = set([pair])\n\n        # Check if the pair is already present in the result set\n        if len(pair_set) == 1:\n            count += 1\n\n        # If the pair is unique, add it to the result set\n        else:\n            result_set.add(pair)\n\n    return result_set",
        "test": "assert k_smallest_pairs([1, 2, 3, 4, 5], [3, 4, 5, 1, 2], 3) == [(1, 3), (2, 4), (3, 5)]",
        "num_ids": 3527,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def min_product_tuple(lst):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(lst)\n    if n < 2:\n        return 0\n    max_product = lst[0] * lst[1]\n    min_product = max_product\n    \n    for i in range(2, n):\n        curr_product = lst[i] * lst[i-1]\n        if curr_product < min_product:\n            min_product = curr_product\n        elif curr_product == min_product:\n            max_product = max(max_product, curr_product)\n            \n    return max_product",
        "test": "assert min_product_tuple([2, 7, 3, 1, 5]) == 14",
        "num_ids": 2125,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n\n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n\n    return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1, \"Error: min_val([1, 2, 3, 4, 5]) should return 1\"",
        "num_ids": 1245,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_(\\w)', lambda m: m.group(1).upper(), word)",
        "test": "assert snake_to_camel('snake_case_string') =='snakeCaseString'",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]",
        "num_ids": 1053,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    return list1[n-1]",
        "test": "assert extract_nth_element([('apple', 1), ('banana', 2), ('orange', 3)], 1) == ('apple', 1)",
        "num_ids": 1400,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def overlapping(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3],[2,3,4]) == True, \"The list [1, 2, 3] should overlap with the list [2, 3, 4]\"",
        "num_ids": 1293,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def max_Product(arr):\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product",
        "test": "assert max_Product([1, 2, 3]) == 6",
        "num_ids": 1742,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Remove duplicates from the list\n    unique_tuples = list(set(Input))\n    # Initialize a dictionary to store the count of first elements\n    first_element_count = {}\n    # Loop through each tuple in the list\n    for tuple_ in unique_tuples:\n        # Get the first element from the tuple\n        first_element = tuple_[0]\n        # If the first element has not been seen before, add it to the dictionary with a count of 1\n        if first_element not in first_element_count:\n            first_element_count[first_element] = 1\n        # If the first element has been seen before, increment the count by 1\n        else:\n            first_element_count[first_element] += 1\n    # Find the common first element and its count\n    common_first_element = None\n    common_count = 0\n    for element, count in first_element_count.items():\n        # If the first element is not found or its count is greater than the common count,\n        # set the common element and its count to the current element and its count\n        if element not in Input or count > common_count:\n            common_first_element = element\n            common_count = count\n    return common_first_element, common_count",
        "test": "assert group_tuples([('apple', 'banana'), ('orange', 'grape'), ('cherry', 'blueberry'), ('watermelon','strawberry'), ('mango', 'papaya')]) == ('apple', 'banana', 'orange', 'grape', 'cherry')",
        "num_ids": 2076,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def Find_Max(lst):\n    max_num = lst[0]\n    for num in lst:\n        if num > max_num:\n            max_num = num\n    return max_num",
        "test": "assert Find_Max([5]) == 5",
        "num_ids": 1388,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    return total * len(lst)",
        "test": "assert round_and_sum([-2, -1, 0, 1, 2]) == 0",
        "num_ids": 1506,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def cube_Sum(n):\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    return cube_sum",
        "test": "assert cube_Sum(1) == 1",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item)\n    return result",
        "test": "assert concatenate_tuple(('a', 'b', 'c')) == 'abc'",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initialize a variable to store the sum of cubes of natural numbers from 1 to n\n    sum_of_cubes = 0\n    # Loop through the natural numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the cube of the current number and add it to the sum_of_cubes variable\n        cube = i**3\n        sum_of_cubes += cube\n    # Return the sum of cubes divided by n\n    return sum_of_cubes/n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1466,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for tup in test_tuple:\n        result.append(tup[-1])\n    return result",
        "test": "assert extract_rear(('apple', 'banana', 'cherry', 'date', 'elderberry')) == ['elderberry']",
        "num_ids": 1115,
        "indeed": true
    },
    {
        "number": 425,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if sublist == x:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 3) == 0",
        "num_ids": 1449,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1114,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Extract the year, month, and day from the date string\n    year, month, day = re.findall('\\d+', dt)[0], re.findall('\\d+', dt)[1], re.findall('\\d+', dt)[2]\n\n    # Format the date string as dd-mm-yyyy\n    date_str = f'{day}-{month}-{year}'\n\n    return date_str\n",
        "test": "assert change_date_format(\"2021-12-31\") == \"31-12-2021\"",
        "num_ids": 2044,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 120,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            # Traverse the list and swap adjacent elements if they are in wrong order\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n    return my_list",
        "test": "assert shell_sort([64, 25, 12, 89, 55])",
        "num_ids": 2173,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for element in test_tup1:\n        result.append(element)\n    for element in test_tup2:\n        result.append(element)\n    return tuple(result)",
        "test": "assert and_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 2281,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = (b * c - a * b) / (2 * a)\n    return directrix",
        "test": "assert parabola_directrix(1, 2, 3) == 2, \"Parabola equation 1*x**2 + 2*x + 3 = 0 is not valid.\"",
        "num_ids": 1607,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0",
        "test": "assert common_element([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 1",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height % 2 == 0:\n        # even height\n        return (base1 + base2) / 2\n    else:\n        # odd height\n        return (base1 + base2) / 2 + (base2 - base1) / 2",
        "test": "assert median_trapezium(1,2,3) == 2 # should be 2",
        "num_ids": 1778,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def check_greater(arr, number):\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3], 2) == True, \"Error: The function should return True for an array with an element equal to the number to be checked\"",
        "num_ids": 1054,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Matches a string that has an a followed by one or more b's.\n    \n    Returns True if the string matches the pattern, and False otherwise.\n    '''\n    pattern = r'a\\w*b'\n    return re.match(pattern, text) is not None",
        "test": "assert text_match_one(\"abababa\") == True",
        "num_ids": 2974,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit\n",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i >= 0:\n            neg_list.append(i)\n    return neg_list\n",
        "test": "assert neg_nos([]) == []",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 437,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters from a string.\n    '''\n    return ''.join(filter(str.isalnum, str1))",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Counts the number of bidirectional tuple pairs in the list.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] < test_list[i+1]:\n            count += 1\n    return count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 1585,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "test": "assert multiple_to_single([1]) == 1",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b(a|an|the)\\b', text)\n    adverb_positions = []\n    for adverb in adverbs:\n        if adverb.lower() not in ['a', 'an', 'the']:\n            adverb_positions.append(text.index(adverb) + len(adverb))\n    return adverb_positions",
        "test": "assert find_adverb_position(\"This is a great day. I am looking forward to it.\") == (0, 16)",
        "num_ids": 3925,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*l*l",
        "test": "assert surfacearea_cube(3) == 27, \"The surface area of a cube of size 3 is incorrect.\"",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums) if len(nums) > 0 else 0",
        "test": "assert positive_count([-1, -2, -3, -4, -5]) == 0.0",
        "num_ids": 1515,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def largest_neg(list1):\n    '''\n    Find the largest negative number in a list.\n    '''\n    # Initialize the largest negative number to negative infinity\n    largest = float('-inf')\n\n    # Loop through each number in the list\n    for num in list1:\n        # If the number is negative, update the largest negative number\n        if num < 0:\n            largest = max(largest, num)\n\n    # Return the largest negative number\n    return largest",
        "test": "assert largest_neg([-1, -2, -3, -4, -5]) == -1",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Trim each tuple by k in the given tuple list.\n    '''\n    return [test_list[i] for i in range(len(test_list)) if i >= K-1]",
        "test": "assert trim_tuple([], 1) == []",
        "num_ids": 1447,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Initialize a new tuple to store the result\n    result_tup = ()\n\n    # Iterate over the indices of the tuples\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        # Perform index wise multiplication of the elements in the tuples\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n\n    # Return the final result tuple\n    return result_tup",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 1805,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_tuple = tuple(count_dict.keys())\n    return count_dict.get(count_tuple, 0)",
        "test": "assert count_Occurrence((), []) == 0",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def cube_nums(nums):\n    '''\n    Return a list of cubes of the input numbers.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 1062,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def extract_string(str_list, n):\n    '''\n    Extract n strings from a given list of string values.\n    '''\n    return str_list[:n]",
        "test": "assert extract_string(\"Hello, world!\", 5) == \"Hello\"",
        "num_ids": 1273,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)",
        "test": "assert remove_whitespaces(\"\") == \"\"",
        "num_ids": 897,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    # calculate loss amount based on the sale amount\n    loss_amount = actual_cost - sale_amount\n\n    # return the loss amount if it's greater than zero, else return 0\n    return loss_amount if loss_amount > 0 else 0",
        "test": "assert loss_amount(500, 500) == 0",
        "num_ids": 1150,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            if n // i > 0:\n                sum += i * n // i\n            else:\n                sum += i\n        i += 2\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of even factors of\", n, \"is:\", sumofFactors(n))",
        "test": "assert sumofFactors(25) == 76",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*\\b' # word boundary and one or more word characters\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog.\")",
        "num_ids": 1173,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # convert month number to integer\n    monthnum = int(monthnum2)\n\n    # check if month number is between 1 and 12\n    if monthnum < 1 or monthnum > 12:\n        return False\n    \n    # check if month contains 31 days\n    if monthnum == 2 or monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    \n    # if month does not contain 31 days, it is not a leap year\n    return False",
        "test": "assert check_monthnumb_number(1) == False, \"The function should return False for month numbers without 31 days\"",
        "num_ids": 2550,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist) // 2):\n        temp = stringlist[i]\n        stringlist[i] = stringlist[len(stringlist) - i - 1]\n        stringlist[len(stringlist) - i - 1] = temp\n    return stringlist",
        "test": "assert reverse_string_list(['A', 'B', 'C']) == ['C', 'B', 'A']",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def Find_Min(lst):\n    # Initialize a variable to store the minimum sublist\n    min_sublist = lst\n\n    # Loop through all the elements in the list\n    for i in range(1, len(lst)):\n        # If the length of the current sublist is less than the minimum sublist,\n        # update the minimum sublist\n        if len(lst[i:]) < len(min_sublist):\n            min_sublist = lst[i:]\n\n    # Return the minimum sublist\n    return min_sublist",
        "test": "assert Find_Min([]) == []",
        "num_ids": 1530,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def rectangle_area(l, b):\n    return l * b",
        "test": "assert rectangle_area(5, 5) == 25",
        "num_ids": 844,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove all uppercase substrings from the input string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)",
        "test": "assert remove_uppercase(\"\") == \"\"",
        "num_ids": 875,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for sublist in lst for x in sublist]",
        "test": "assert Extract([]) == []",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count",
        "test": "assert upper_ctr(\"\") == 0",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    def backtrack(current, start, end, path):\n        if start == end:\n            combinations.append(path[:])\n            return\n        for i in range(start, end+1):\n            path.append(list1[i])\n            backtrack(current+[i], start, i-1, path)\n            path.pop()\n        return\n\n    backtrack([], 0, len(list1)-1, [])\n    return combinations",
        "test": "assert combinations_list([]) == []",
        "num_ids": 2229,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    current_sum = 0\n\n    for num in arr:\n        if num > 0:\n            current_product *= num\n            current_sum += num\n        else:\n            current_product *= -num\n            current_sum -= num\n\n        if current_product > max_product:\n            max_product = current_product\n        elif current_product == max_product and current_sum > max_sum:\n            max_product = current_product\n            max_sum = current_sum\n\n    return max_product",
        "test": "assert max_subarray_product([1, -2, 3, -5, 4]) == 120 # subarray [1, -2, 3, -5] has product 120",
        "num_ids": 1946,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def check_value(dict, n):\n    '''\n    Checks if all values in a dictionary are the same.\n    '''\n    for value in dict:\n        if len(set(dict.values()))!= 1:\n            return False\n    \n    return True",
        "test": "assert check_value({}, 1) == True",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for key, value in dict1.items():\n        if value:\n            result[key] = value\n    return result",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 1380,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def max_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    max_product_so_far = float('-inf')\n    max_product_ending_here = float('-inf')\n    for i in range(len(arr)):\n        if i > 0:\n            current_product = arr[i] * arr[i - 1]\n            if current_product > max_product_ending_here:\n                max_product_ending_here = current_product\n        else:\n            current_product = arr[i]\n        if current_product > max_product_so_far:\n            max_product_so_far = current_product\n    return max_product_so_far",
        "test": "assert max_product([1, 2, 3]) == 6",
        "num_ids": 1687,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    n = len(test_tup)\n    for i in range(n-1):\n        if i == n-2:\n            result.append(test_tup[i] + test_tup[i+1])\n        else:\n            result.append(test_tup[i] + test_tup[i+1] + test_tup[i+2])\n    return result",
        "test": "assert add_pairwise((1, 2, 3, 4)) == (2, 3, 4, 5)",
        "num_ids": 1692,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product\n\n\narr = [1, 2, 3, 4, 5]\nn = 6\nresult = find_remainder(arr, n)\nprint(\"The product of the array multiplication modulo\", n, \"is:\", result)",
        "test": "assert find_remainder([1, 2, 3], 6) == 0",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n\n    for i in range(1, len(l)):\n        if l[i] - l[i - 1]!= 1:\n            return False\n\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 4, 5]) == False",
        "num_ids": 1554,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    :param test_list1: a list of tuples\n    :param test_list2: a list of tuples\n    :return: a list of tuples that are common to both lists\n    \"\"\"\n    common_tuples = []\n    for tuple1 in test_list1:\n        if tuple1 in test_list2:\n            common_tuples.append(tuple1)\n    return common_tuples",
        "test": "assert tuple_intersection([1,2,3,4,5],[4,5,6]) == [4,5]",
        "num_ids": 1680,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            result += newch\n    return result",
        "test": "assert replace_char('hello', 'l', 'x') == 'xx'",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 475,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 110,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(counter)\n    sorted_dict = dict(sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "test": "assert sort_counter({}) == {}",
        "num_ids": 1413,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # create a variable to store the maximum and minimum values in the array\n    max_val = min_val = nums[0]\n    \n    # loop through each element in the array and update the max and min values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    # return the sum of the max and min values\n    return max_val + min_val",
        "test": "assert big_sum([-1, -2, -3, -4, -5]) == -5",
        "num_ids": 1544,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"hello\") == \"hello\"",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Removes lowercase substrings from a given string using the re module.\n    '''\n    lowercase_str = re.sub('[^a-zA-Z]', '', str1)\n    return lowercase_str",
        "test": "assert remove_lowercase(\"hello world\") == \"helloworld\"",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    # initialize the variable to store the first digit\n    first_digit = 0\n\n    # loop through each digit of the number\n    for digit in str(n):\n        # check if the digit is a digit\n        if digit.isdigit():\n            # if it is a digit, add it to the first_digit variable\n            first_digit = int(digit)\n\n    # return the first digit\n    return first_digit",
        "test": "assert first_Digit(10) == 0 # assert 10 is 0",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Create a new list to store the odd numbers only\n    odd_list = []\n    # Loop through the list and add odd numbers to the new list\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num)\n    # Return the new list of odd numbers\n    return odd_list",
        "test": "assert Split([1,2,3,4,5]) == [1, 3, 5]",
        "num_ids": 1025,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n        sum_of_cubes += i**3\n    \n    return sum_of_natural_numbers - sum_of_cubes\n\nprint(difference(5)) # Output: 249",
        "test": "assert difference(0) == 0",
        "num_ids": 1413,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    xor = 0\n    for i in range(N):\n        xor = xor ^ A[i]\n        if xor & 1 == 1:\n            count += 1\n    return count",
        "test": "assert find_Odd_Pair([1, 2, 3, 4, 5], 3) == 2 # test case 1",
        "num_ids": 1512,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Initialize an empty string to hold the modified string\n    modified_string = \"\"\n\n    # Iterate over each character in the input string\n    for char in string:\n        # If the character is uppercase, convert it to lowercase\n        if char.isupper():\n            modified_string += char.lower()\n        # If the character is lowercase, convert it to uppercase\n        elif char.islower():\n            modified_string += char.upper()\n        # If the character is neither uppercase nor lowercase, leave it unchanged\n        else:\n            modified_string += char\n\n    # Return the modified string\n    return modified_string",
        "test": "assert toggle_string(\"\") == \"\"",
        "num_ids": 1200,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    while n1!= 0 or n2!= 0:\n        digit1 = n1 % 10\n        digit2 = n2 % 10\n        diff += abs(digit1 - digit2)\n        n1 //= 10\n        n2 //= 10\n    return diff",
        "test": "assert digit_distance_nums(123, 123) == 0",
        "num_ids": 1996,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    current_max_sum = 0\n    current_start = 0\n    current_end = 0\n\n    # Traverse the list\n    for i in range(size):\n        # Update current sum and max sum\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_max_sum = current_sum\n        elif current_sum == max_sum and a[i] > current_max_sum:\n            current_max_sum = a[i]\n            current_end = i\n        # Move the start index if the current element is smaller than the sum\n        elif current_sum < 0:\n            current_start = i + 1\n\n    # Return the maximum sum\n    return max_sum",
        "test": "assert max_sub_array_sum([1, -2, 3, -1, -2, 5], 4) == 12",
        "num_ids": 2316,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Convert the tuples to sets to remove duplicates and then convert back to tuples\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n\n    # Find the union of the sets\n    union_set = test_set1.union(test_set2)\n\n    # Convert the set back to a tuple and sort it\n    union_tuple = tuple(sorted(union_set))\n\n    return union_tuple\n",
        "test": "assert union_elements((), ()) == ()",
        "num_ids": 1851,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    sublist = []\n    for i in lst:\n        if len(sublist) == 0:\n            sublist.append(i)\n        else:\n            if i > sublist[-1]:\n                sublist.append(i)\n            elif i < sublist[-1]:\n                sublist.pop()\n                sublist.append(i)\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(Find_Max_Length(lst))",
        "test": "assert Find_Max_Length([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1649,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import re\n\ndef extract_values(text):\n    # Extract values between quotation marks using regular expression\n    pattern = r'(?:\"([^\"]+)\"|(?<=\\()[^)]+(\\))|(?<=\\[(?!\\[).+?\\]))'\n    match = re.search(pattern, text)\n    values = []\n    \n    # Extract values from matches\n    if match:\n        values = [match.group()]\n    else:\n        values = re.findall(r'[^\\s]+', text)\n    \n    return values\n",
        "test": "assert extract_values(\"\") == \"\"",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5], 3) == 3",
        "num_ids": 1399,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def split(word):\n    return word.split()",
        "test": "assert split(\"\") == []",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 566,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digit_sum = 0\n    while n > 0:\n        digit_sum += n % 10\n        n //= 10\n    return digit_sum",
        "test": "assert sum_digits(123) == 6 # the sum of the digits of 123 is 6",
        "num_ids": 1075,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def issort_list(list1):\n    '''\n    Check whether a specified list is sorted or not.\n\n    Parameters:\n    list1 (list): A list of elements to be sorted.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    '''\n\n    # Check if the list is empty or contains only one element.\n    if len(list1) < 2:\n        return True\n\n    # Sort the list in ascending order.\n    list1.sort()\n\n    # Check if the sorted list is equal to its original list.\n    return list1 == sorted(list1)",
        "test": "assert issort_list([1, 3, 5, 7, 9]) == True",
        "num_ids": 2259,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Args:\n        length: int\n            The length of the list.\n\n    Returns:\n        list:\n            A list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(1) == [{}], \"The function should create a list of 1 empty dictionary.\"",
        "num_ids": 701,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def sort_sublists(list1):\n    sublists = []\n    for sublist in list1:\n        sublists.append(sublist)\n    for i in range(len(sublists)):\n        for j in range(i+1, len(sublists)):\n            if sublists[i] == sublists[j]:\n                sublists[i], sublists[j] = sublists[j], sublists[i]\n    return sublists",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 2786,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert the list of lists to a set to remove duplicates\n    unique_nums = set(nums)\n    # Convert the set back to a list and return it\n    return list(unique_nums)",
        "test": "assert two_unique_nums([1, 2, 3, 3, 4, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1545,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))  # Convert the list to a set and convert back to a list\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 1297,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi * r**2 * h",
        "test": "assert surfacearea_cylinder(1, 1) == 3.1415926535897931",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    # Traverse through the first half of A\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    \n    # Traverse through the last half of B\n    for i in range(len(B), len(A), -1):\n        if B[i-1] not in A:\n            return False\n    \n    return True",
        "test": "assert is_Sub_Array([1,2,3,4,5], [1,2,4]) == False",
        "num_ids": 1798,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    last_digit = n % 10\n    return last_digit",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 1729,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3",
        "test": "assert interleave_lists([], [], []) == []",
        "num_ids": 1728,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for tup in test_tup1:\n        if tup not in test_tup2:\n            dissimilar_list.append(tup)\n    return dissimilar_list",
        "test": "assert find_dissimilar(\"apple\", \"apple\") == []",
        "num_ids": 1799,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n\n    Parameters:\n    test_tuple (tuple): A tuple containing mixed elements.\n\n    Returns:\n    tuple: A new tuple with the elements of the input tuple that are even and not odd.\n    '''\n    result = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            result.extend(even_ele(element, even_fnc))\n        elif isinstance(element, (int, float)):\n            if even_fnc(element):\n                result.append(element)\n    return tuple(result)",
        "test": "assert even_ele([1, 2, 3, 4, 5, 6, 7, 8, 9], lambda x: x % 2 == 0)",
        "num_ids": 2054,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #calculate the area of the base\n    base_area = b * b\n\n    #calculate the area of the pyramid\n    pyramid_area = b * s\n\n    #calculate the area of the part that extends from the base to the pyramid\n    pyramid_part_area = s * b\n\n    #calculate the surface area of the pyramid\n    surface_area = pyramid_area + pyramid_part_area\n\n    return surface_area",
        "test": "assert surface_Area(3,4) == 24",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({'a': 1, 'b': 2, 'c': 3}) == False",
        "num_ids": 720,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth Catalan number.\n    \"\"\"\n\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        catalan = (1 + catalan_number(num-1)) / 2\n        return catalan",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 2081,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'(?i)\\bly\\b')\n    matches = pattern.finditer(text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverb = text[start:end]\n        print(f\"Adverb found at position {start} and {end}: {adverb}\")",
        "test": "assert find_adverbs(\"The quick brown fox went through the lazy dog.\") == [(38, \"ly\")]",
        "num_ids": 2463,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function finds the n most expensive items in a given dataset.\n    '''\n    max_items = []\n    heapq.heapify(max_items)\n\n    for item in items:\n        if len(max_items) < n:\n            heapq.heappush(max_items, item)\n        elif item < max_items[0]:\n            heapq.heappop(max_items)\n            heapq.heappush(max_items, item)\n\n    return max_items[:n]",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 1828,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    \n    first_part = l[:n]\n    last_part = l[n:]\n    return first_part + last_part",
        "test": "assert split_Arr(['a'], 1) == ['a']",
        "num_ids": 1621,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def list_tuple(lst):\n    return tuple(lst)",
        "test": "assert list_tuple([]) == ()",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables\n    max_val = nums[0]\n    min_val = nums[0]\n    \n    # loop through the list and update max and min values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    \n    # return the difference between max and min values\n    return max_val - min_val",
        "test": "assert big_diff([1, 1, 1, 1]) == 0",
        "num_ids": 1376,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    \n    count = 0\n    for i in range(a, b+1):\n        if i**2 == i:\n            count += 1\n            \n    return count\n\nprint(perfect_squares(1, 10))  # Output: 25",
        "test": "assert perfect_squares(1, 1) == 1",
        "num_ids": 1624,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import math\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    theta = math.atan2(y, x)\n    r = math.sqrt(x**2 + y**2)\n\n    return r * math.cos(theta), r * math.sin(theta)",
        "test": "assert polar_rect(0, 0) == (0, 0)",
        "num_ids": 1258,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"The list must have at least two elements\")\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList",
        "test": "assert swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 1238,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def binomial_Coeff(n, k):\n    # Initialize variables\n    prod = 1\n    # Calculate the product of consecutive binomial coefficients\n    for i in range(1, k+1):\n        prod *= (n-i+1)\n    # Return the sum of the product\n    return prod",
        "test": "assert binomial_Coeff(3,2) == 6",
        "num_ids": 1503,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # pattern to match leading zeroes\n    pattern = re.compile(r'^0+')\n    # replace leading zeroes with empty string\n    return pattern.sub('', ip)",
        "test": "assert removezero_ip('192.168.1.1') == '192.168.1.1'",
        "num_ids": 1296,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Initialize two variables to keep track of the even and odd numbers respectively\n    even_num = 0\n    odd_num = 0\n\n    # Iterate over the list and increment the even_num and odd_num accordingly\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n\n    # If the even_num is 0, it means there are no even numbers in the list, so return 0\n    if even_num == 0:\n        return 0\n\n    # If the odd_num is 0, it means there are no odd numbers in the list, so return 0\n    if odd_num == 0:\n        return 0\n\n    # Return the difference between the even and odd numbers\n    return even_num - odd_num",
        "test": "assert diff_even_odd([1, 2, 3, 4, 6]) == 1",
        "num_ids": 2042,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    # Initialize dp table\n    dp = [0] * (n+1)\n    # Fill the first row of the table\n    for i in range(1, n+1):\n        dp[i] = i\n    # Fill the remaining rows of the table\n    for i in range(1, n+1):\n        # If str1[i] is less than str2[i] then we can swap\n        if str1[i-1] < str2[i-1]:\n            dp[i] = min(dp[i], dp[i-1] + 1)\n        else:\n            dp[i] = min(dp[i], dp[i-1])\n    # Return the minimum value in the dp table\n    return dp[n]",
        "test": "assert min_Swaps('1010','1010') == 0",
        "num_ids": 2898,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the tuple to bytes\n    bytes_tuple = bytes(tuple_list)\n    \n    # Calculate the size in bytes\n    size = len(bytes_tuple)\n    \n    # Return the size\n    return size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None",
        "test": "assert find_kth([1,2,3,4,5], [1,2,3,4,5], 1) == 1",
        "num_ids": 2150,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def armstrong_number(number):\n    '''\n    Returns True if the given number is armstrong, and False otherwise.\n\n    The number is considered armstrong if the sum of its digits raised to the power of the number of digits is equal to the number.\n    '''\n    num_str = str(number)\n    num_digits = len(num_str)\n    sum_of_digits = 0\n    for digit in num_str:\n        sum_of_digits += int(digit) ** num_digits\n    return sum_of_digits == number",
        "test": "assert armstrong_number(125) == False, \"125 is not a valid armstrong number\"",
        "num_ids": 1572,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # initialize sum and count to 0\n    sum = 0\n    count = 0\n\n    # loop through the first n natural numbers\n    for i in range(1, number + 1):\n        # add the current number to the sum\n        sum += i\n\n        # increment the count\n        count += 1\n\n    # calculate the average by dividing the sum by the count\n    average = sum / count\n\n    # return the sum and average\n    return sum, average",
        "test": "assert sum_average(5) == (15 + 7) / 2",
        "num_ids": 1109,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def first_repeated_char(str1):\n    # Create an empty dictionary to store the frequency of each character\n    char_freq = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in char_freq:\n            char_freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            char_freq[char] = 1\n            \n    # Find the first character with a frequency of 2 or more\n    first_char = None\n    for char, freq in char_freq.items():\n        if freq >= 2:\n            first_char = char\n            break\n    \n    # If no character has a frequency of 2 or more, return None\n    if first_char is None:\n        return None\n    else:\n        return first_char",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 1726,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucids = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucids.append(i)\n    return lucids\n\ndef is_lucid(n):\n    \"\"\"\n    Check if a number is lucid.\n    \"\"\"\n    for i in range(1, int(n/2)+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert get_ludic(11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
        "num_ids": 4476,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def reverse_words(s):\n    words = s.split() # split the string into words\n    words.reverse() # reverse the order of the words\n    return \" \".join(words) # join the words back together with spaces",
        "test": "assert reverse_words(\"this is a test\") == \"test a is this\"",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def prime_num(num):\n    '''\n    Check if the given integer is a prime number.\n    '''\n    # if num is less than 2, it is not prime\n    if num < 2:\n        return False\n    \n    # loop from 2 to the square root of num\n    for i in range(2, int(num ** 0.5) + 1):\n        # if num is divisible by i, it is not prime\n        if num % i == 0:\n            return False\n    \n    # if we reach here, num is prime\n    return True",
        "test": "assert prime_num(5) == True",
        "num_ids": 1108,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 852,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return match.group(), start, end\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"This is a sample string.\", r'\\b\\d+\\b') == (r'\\d+', 10, 18)",
        "num_ids": 1917,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def bell_Number(n):\n    bell_num = n * (1 + ((n-1)//2))\n    return bell_num",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L - 1\n    if k < 0 or k >= n:\n        return list1\n\n    return [x for i, x in enumerate(list1) if i!= k]",
        "test": "assert remove_kth_element([], 0) == []",
        "num_ids": 1567,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_column = test_list[0] # initialize max_column with the first column of the first row of the matrix\n    max_index = 0 # initialize max_index with the first index of the first column of the first row of the matrix\n\n    for i in range(1, len(test_list)): # iterate over the remaining columns of the matrix\n        if test_list[i][N-1] > max_column[max_index]:\n            max_column = test_list[i] # update max_column with the current column\n            max_index = i # update max_index with the current index\n\n    return max_column[max_index] # return the max of the nth column of the matrix",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6]], 2) == 5",
        "num_ids": 1885,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist)\n    return result",
        "test": "assert merge([['a','b'],['c','d']]), [('a', 'b'), ('c', 'd')]",
        "num_ids": 1572,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Create an empty list to store the cumulative sum\n    cumulative_sum = []\n\n    # Iterate over the list of elements\n    for i in range(len(test_list)):\n\n        # If the element is not in the list, append it to the cumulative sum\n        if test_list[i] not in cumulative_sum:\n            cumulative_sum.append(test_list[i])\n\n    # Return the cumulative sum\n    return cumulative_sum",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 1532,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create an empty list to store the average values\n    averages = []\n    \n    # Loop through each tuple in the input list\n    for i in range(len(nums)):\n        # Get the value from the current tuple\n        value = nums[i][1]\n        \n        # If the value is a tuple, calculate the average for each sub-tuple\n        if isinstance(value, tuple):\n            sub_averages = []\n            for j in range(len(value)):\n                sub_value = value[j]\n                if isinstance(sub_value, tuple):\n                    sub_sub_averages = []\n                    for k in range(len(sub_value)):\n                        sub_sub_value = sub_value[k]\n                        if isinstance(sub_sub_value, tuple):\n                            sub_sub_sub_value = sub_sub_value[k]\n                        else:\n                            sub_sub_sub_value = sub_sub_value\n                        sub_sub_sub_sub_value = sum(sub_sub_sub_value) / len(sub_sub_sub_value)\n                        sub_sub_sub_sub_values.append(sub_sub_sub_sub_value)\n                    sub_average = sum(sub_sub_sub_sub_values) / len(sub_sub_sub_sub_values)\n                else:\n                    sub_average = sub_value\n                sub_averages.append(sub_average)\n            average = sum(sub_averages) / len(sub_averages)\n        else:\n            average = value\n        \n        averages.append(average)\n    \n    # Return the list of averages\n    return averages",
        "test": "assert average_tuple([('apple', 10), ('banana', 20), ('cherry', 15)]) == [10.0, 20.0, 15.0]",
        "num_ids": 1955,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Convert the tuples to lists\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n\n    # Compute the modulo\n    modulo_list = []\n    for i in range(len(test_list1)):\n        modulo_list.append(test_list1[i] % test_list2[i])\n\n    return tuple(modulo_list)",
        "test": "assert tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3)",
        "num_ids": 2196,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for i in range(steps):\n        jumps += 1\n        if i == d - 1:\n            break\n    return jumps",
        "test": "assert min_Jumps(0, 0) == 0, \"The function should return 0 for empty arrays\"",
        "num_ids": 1779,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1 // num2 for num1 in nums1 for num2 in nums2]",
        "test": "assert div_list([1,2,3,4,5], [2,3,4,5,6]) == [0, 0, 0, 1, 0]",
        "num_ids": 1559,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Declare an empty string variable to store the updated string\n    updated_str = \"\"\n    # Loop through each character in the original string\n    for char in test_str:\n        # If the character is a digit, append it to the updated string\n        if char.isdigit():\n            updated_str += char\n        # If the character is a non-digit character, do nothing\n    # Return the updated string\n    return updated_str",
        "test": "assert move_num(\"12345\") == \"12345\"",
        "num_ids": 1605,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def largest_subset(a):\n    # Sort the list in descending order\n    a.sort(reverse=True)\n    # Initialize variables\n    max_size = 0\n    current_size = 0\n    # Iterate over each element in the list\n    for num in a:\n        # Increment the current size by 1\n        current_size += 1\n        # Check if the number is divisible by the current size\n        if num % current_size == 0:\n            # If it is, update the maximum size\n            max_size = max(max_size, current_size)\n    return max_size",
        "test": "assert largest_subset([1, 2, 3, 4, 5]) == 3",
        "num_ids": 1934,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # If the size of the input arrays is not equal, return None\n    if len(arr1)!= len(arr2):\n        return None\n\n    # Sort the two input arrays in ascending order\n    arr1.sort()\n    arr2.sort()\n\n    # Calculate the size of the input arrays\n    size = len(arr1)\n\n    # Calculate the median\n    mid = (size // 2)\n\n    # If the size of the input arrays is odd, return the middle element\n    if size % 2 == 1:\n        return arr1[mid]\n\n    # If the size of the input arrays is even, return the average of the middle two elements\n    else:\n        return (arr1[mid - 1] + arr1[mid]) / 2",
        "test": "assert get_median([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5) == 5",
        "num_ids": 2926,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def nth_nums(nums, n):\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([], 1) == []",
        "num_ids": 1112,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def is_upper(string):\n    '''\n    Converts a given string to uppercase.\n    '''\n    for char in string:\n        if char.isupper():\n            return True\n    return False",
        "test": "assert is_upper(\"HELLO\") # True",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def swap_List(newList):\n    # swap first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1]) == [1]",
        "num_ids": 1389,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def triangle_area(r) :  \n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the semi-circle circumference\n    n = 2 * r\n    # Calculate the area of the triangle\n    area = 0.5 * n * n\n    return area",
        "test": "assert triangle_area(5) == 50, \"Incorrect area calculation for triangle with base length 5\"",
        "num_ids": 1646,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1",
        "test": "assert find_First_Missing([1,2,3,4,5]) == 5 # correct result",
        "num_ids": 2016,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces('') == ''",
        "num_ids": 881,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums",
        "test": "assert Split([6, 7, 8, 9, 10]) == [6, 8, 10]",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n    else:\n        sub.append(ele)\n    adjacent = []\n    for i in range(len(sub)-1):\n        if i == len(sub)-2:\n            adjacent.append((sub[i], sub[i+1]))\n        else:\n            adjacent.append((sub[i], sub[i+1]))\n    return adjacent",
        "test": "assert adjac((0,0)) == []",
        "num_ids": 1701,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 879,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize a new list to store the non-zero elements\n    non_zero_list = []\n\n    # Loop through the list and append non-zero elements to new list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # Return the new list\n    return non_zero_list",
        "test": "assert move_zero([1, 2, 3, 4, 0, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1620,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
        "test": "assert pair_xor_Sum([1,2,3,4,5],6) == 22 # check for correct output",
        "num_ids": 1291,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using the heapsort algorithm.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    return [heapq.heappop(heap) for _ in range(len(iterable))]",
        "test": "assert heap_sort([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1652,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    if profit >= 0 and loss >= 0:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(5000, 5000) == True",
        "num_ids": 1386,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert wind velocity to mph\n    v_mph = v * 1.60934\n\n    # Calculate wind chill index\n    t_c = (t - 32) * 5.0 / 9.0\n\n    # Round to the next integer\n    t_f = math.ceil(t_c)\n\n    # Calculate temperature in fahrenheit\n    t_f = (t_c * 9.0 / 5.0) + 32\n\n    return t_f\n",
        "test": "assert wind_chill(10, 0) == 0, \"wind_chill(10, 0) == 0\"",
        "num_ids": 1723,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # create an empty set to store the unique names\n    unique_names = set()\n\n    # loop through each name in the list of names\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, append it to the set of unique names\n            unique_names.add(name)\n\n    # return the sum of the length of each name in the unique_names set\n    return sum(len(name) for name in unique_names)",
        "test": "assert sample_nam(\"Bob\") == 2",
        "num_ids": 1695,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Removes the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all parenthesis from the string\n    items = re.sub(r'\\(|\\)', '', items)\n    \n    # Split the string into words using whitespace as the delimiter\n    words = items.split()\n    \n    # Remove any empty words from the list\n    words = [word for word in words if word.strip()!= '']\n    \n    return''.join(words)",
        "test": "assert remove_parenthesis(\"\") == \"\"",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def is_nonagonal(n):\n    # initialize variables\n    count = 1\n    prev_count = 0\n    prev_number = 1\n\n    # iterate over the range from 1 to n\n    for i in range(2, n+1):\n        # check if the current number is a nonagonal number\n        if i % count == 0:\n            # update the count and number variables\n            count += 1\n            prev_number = i\n        else:\n            # check if the current number is already a nonagonal number\n            if i % prev_count == 0 and i % count!= 0:\n                # update the count and number variables\n                count += 1\n                prev_number = i\n            else:\n                # decrement the count variable and the previous number variable\n                count -= 1\n                prev_number -= 1\n\n    # return the nth nonagonal number\n    return prev_number",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 2531,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # remove leading and trailing whitespaces and convert to lowercase\n    text = text.strip().lower()\n    \n    # search for 'z' at the start and end of the word\n    match = re.search(r'z', text)\n    \n    # return True if 'z' is found, False otherwise\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle(\"This is a test string\") == False",
        "num_ids": 1596,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n\n    # Define a list to store the reversed elements\n    output = []\n\n    # Traverse the input list from left to right\n    for i in range(len(input) - 1, -1, -1):\n        # If the current element is greater than or equal to k, add it to the output list and continue with the loop\n        if input[i] >= k:\n            output.append(input[i])\n        # If the current element is less than k, break out of the loop and move on to the next element\n        elif k < input[i]:\n            break\n\n    # Return the reversed output list\n    return output",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 6) == []",
        "num_ids": 2220,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple((\"a\", 1), {\"b\": 2, \"c\": 3}) == (\"a\", 1, {\"b\": 2, \"c\": 3})",
        "num_ids": 1417,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # initialize variables\n    n = len(cost)\n    m = len(cost[0])\n    path = set()\n    visited = set()\n\n    # compute max cost of a single path\n    max_cost = max(cost)\n\n    # compute path with maximum average over all paths\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                # move to next cell in current direction\n                if i < n - 1 and j < m - 1:\n                    path.add((i, j))\n\n            else:\n                # move to cell to the right\n                if i < n - 1 and j == m - 1:\n                    path.add((i, j))\n                    path.add((i, j + 1))\n\n                # move to cell below\n                elif i == n - 1 and j < m - 1:\n                    path.add((i, j))\n                    path.add((i + 1, j))\n\n                # move to cell to the left\n                elif i == 0 and j < m - 1:\n                    path.add((i, j))\n                    path.add((i - 1, j))\n\n    # compute average of all paths\n    if len(path) > 0:\n        avg = sum([cost[i][j] for i, j in path]) / len(path)\n        return avg\n\n    else:\n        return 0\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]) == 70.0",
        "num_ids": 4132,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students.append(name)\n    return filtered_students\n\nstudents = {'Alice': (175, 80), 'Bob': (180, 75), 'Charlie': (185, 70), 'David': (190, 65)}\nh = 175\nw = 80\nprint(filter_data(students, h, w)) # ['Alice', 'Bob']",
        "test": "assert filter_data({}, 180, 80) == []",
        "num_ids": 2488,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    same_indices = []\n\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)):\n            if nums1[i] == nums2[j]:\n                same_indices.append((i, j))\n\n    return same_indices",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == []",
        "num_ids": 1910,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def power_base_sum(base, power):\n    # calculate the sum of all digits of the base to the specified power\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        base //= 10\n        power -= 1\n\n    return result",
        "test": "assert power_base_sum(10, 3) == 1  # base 10, power 3 = 1",
        "num_ids": 1433,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    match = re.search(pattern, text1)\n    if match:\n        return match.group(1)\n    else:\n        return None",
        "test": "assert extract_quotation(\"This is a sample text with a quotation mark: \\\"This is an example of a quotation mark.\\\"\") == \"This is an example of a quotation mark.\"",
        "num_ids": 1566,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def multiply_elements(test_tup):\n    N = len(test_tup)\n    t_product = []\n    for i in range(N):\n        t_product.append(test_tup[i] * test_tup[i+1])\n    return tuple(t_product)",
        "test": "assert multiply_elements((2,3,4,5,6)) == ((2*3*4*5*6),(2*3*4*5*6),(2*3*4*5*6),(2*3*4*5*6),(2*3*4*5*6))",
        "num_ids": 1852,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "test": "assert sum_list([], []) == []",
        "num_ids": 1449,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    return list(set(nums))",
        "test": "assert consecutive_duplicates([1, 2, 3, 3, 4, 5, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1457,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r ** 2 * h",
        "test": "assert lateralsurface_cone(1,5) == 6 # radius=1 and height=5",
        "num_ids": 1295,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')",
        "test": "assert replace_specialchar(\"\") == \"\"",
        "num_ids": 1186,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    for i in range(n):\n        if A[i] == x:\n            return i\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 3, 3, 4, 5, 5, 5], 6) == -1",
        "num_ids": 1622,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Define a function to find all possible sublists\n    def find_sublists(arr, start, end, n):\n        sublist = []\n        for i in range(start, end + 1):\n            sublist.append(arr[i])\n        return sublist\n\n    # Define a function to calculate the product of all sublists\n    def product(sublist):\n        product = 1\n        for i in range(1, len(sublist)):\n            product *= sublist[i]\n        return product\n\n    # Define a function to find the sum of products of all sublists\n    def sum_sublists(arr, n):\n        sublists = []\n        start = 0\n        for i in range(len(arr)):\n            end = i\n            while end < len(arr) and arr[end] == arr[end - 1]:\n                end += 1\n            sublists.append(find_sublists(arr, start, end, n))\n            start = end\n        return sublists\n\n    # Get the length of the input list\n    n = len(arr)\n\n    # Find all sublists of size n and calculate their products\n    sublists = sum_sublists(arr, n)\n\n    # Calculate the sum of products of all sublists\n    total_sum = 0\n    for sublist in sublists:\n        total_sum += product(sublist)\n    return total_sum\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3]) == 6",
        "num_ids": 2646,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def set_middle_bits(n):\n    # Check if the number is even\n    if n % 2 == 0:\n        # Check if the first and the last bits are 0\n        if n & 1 == 0 or n & 255 == 0:\n            return n ^ 1\n        else:\n            return n\n    else:\n        # Check if the first and the last bits are 1\n        if n & 1 == 1 or n & 255 == 255:\n            return n ^ 1\n        else:\n            return n",
        "test": "assert set_middle_bits(101) == 100",
        "num_ids": 1934,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left",
        "test": "assert left_insertion(sorted([1, 3, 5, 7, 9]), 6) == 3",
        "num_ids": 1562,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    This function checks whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"apple\") == True",
        "num_ids": 1069,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def geometric_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(10) == 3628800",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Function to find the factorial of a number\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    # Function to find the index of smallest triangular number with n digits\n    def smallest_triangular(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        else:\n            a = math.ceil(math.log(n + 1) / math.log(3))\n            return int(a)\n\n    # Find the index of smallest triangular number with n digits\n    return smallest_triangular(n)",
        "test": "assert find_Index(2) == 1 # index of smallest triangular number with 2 digits",
        "num_ids": 2071,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))",
        "test": "assert tuple_to_dict(('a', 'b', 'c', 'd', 'e')) == {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e'}",
        "num_ids": 1639,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n\n    Parameters:\n    s (str): String containing characters.\n\n    Returns:\n    bool: True if all the characters are same and False otherwise.\n    \"\"\"\n\n    # Initialize a boolean variable to False\n    is_same = False\n\n    # Iterate through each character in the string\n    for char in s:\n\n        # If the current character is same as the next character, then it is same\n        if char == s[0]:\n            is_same = True\n\n        # If the current character is not same as the next character, then it is not same\n        else:\n            is_same = False\n\n        # If all the characters are same, then return True\n        if is_same:\n            break\n\n    # If all the characters are not same, then return False\n    if not is_same:\n        return False\n    else:\n        return True",
        "test": "assert all_Characters_Same(\"abc\") == True",
        "num_ids": 1178,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculates the area of a tetrahedron.\n    '''\n    return (0.5 * side * side * side)",
        "test": "assert area_tetrahedron(2) == 4.0",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n\n    # If n is greater than the length of the list, return the original list\n    if n > len(lst):\n        return lst\n    \n    # If n is less than or equal to the length of the list, return the original list\n    if n <= len(lst):\n        return lst[-n:] + lst[:-n]\n\n    # If n is negative, return the first n items of the list and the remaining items of the list to the left\n    return lst[-n:] + lst[:-n] + lst[-(n % len(lst)):]",
        "test": "assert rotate_right([], 0) == []",
        "num_ids": 1783,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup:\n        if None in test_tup:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert check_none(('a', 1, 'b')) == False",
        "num_ids": 860,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        # check if the number is divisible by every digit it contains\n        is_divisible_by_digits = True\n        for digit in str(num):\n            if int(digit) not in range(1, 10):\n                is_divisible_by_digits = False\n                break\n        if is_divisible_by_digits:\n            result.append(num)\n    return result",
        "test": "assert divisible_by_digits(1234, 5678) == [12, 34, 56, 78]",
        "num_ids": 2994,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > math.pi/2:\n        return None\n    else:\n        return math.pi*r**2",
        "test": "assert sector_area(10,45) is None, \"The correct sector area is 10x10.\"",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m, n = len(X), len(Y)\n    if n == 0:\n        return X\n    if m == 0:\n        return Y\n    if X[m-1] == Y[n-1]:\n        return lcs_of_three(X[0:m-1], Y[0:n-1], Z[0:m-1])\n    elif X[m-1] < Y[n-1]:\n        return lcs_of_three(X[0:m-1], Y, Z)\n    else:\n        return lcs_of_three(X, Y[0:n-1], Z)",
        "test": "assert lcs_of_three(\"\", \"\", \"\") == \"\"",
        "num_ids": 3220,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # create a regular expression pattern to match capital letters followed by one or more letters or spaces\n    pattern = re.compile(r'[A-Z][a-z\\s]*')\n    # replace all matches of the pattern in the string with spaces\n    return pattern.sub(' ', str1)",
        "test": "assert capital_words_spaces(\"the quick brown fox jumps over the lazy dog\") == \"the quick brown fox jumps over the lazy dog\"",
        "num_ids": 1577,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    # Convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n\n    # Sort the list of integers in ascending order\n    nums.sort()\n\n    # Convert the sorted list back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str\n",
        "test": "assert sort_numeric_strings([\"2\", \"1\", \"3\", \"4\", \"5\", \"1\"]) == [\"1\", \"1\", \"2\", \"3\", \"4\", \"5\"]",
        "num_ids": 2059,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n\n    return test_list + test_tup",
        "test": "assert add_tuple([1,2,3], []) == [1,2,3]",
        "num_ids": 973,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0 or arr[i] < arr[i-1]:\n        return True\n    else:\n        return False\n\ndef check_min_heap(arr):\n    for i in range(len(arr)):\n        if check_min_heap_helper(arr, i):\n            return False\n    return True",
        "test": "assert check_min_heap_helper([10], 0) == True",
        "num_ids": 2915,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        phi = (1 + 5**0.5)**n\n        return round(phi * n, 2)",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 4346,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = min(K, len(test_list))\n    if len(test_list) < k:\n        return []\n    else:\n        return sorted(test_list, key=lambda x: (-x[1], x[0]))[:k]",
        "test": "assert min_k([('a', 5), ('b', 4), ('c', 3), ('d', 2)], 2) == [('a', 5), ('b', 4)]",
        "num_ids": 2261,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 2794,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    # initialize variables\n    smallest = second_smallest = float('inf')\n    \n    # loop through list of numbers\n    for num in numbers:\n        # update smallest and second_smallest\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    # return second smallest number\n    return second_smallest",
        "test": "assert second_smallest([1, 3, 5, 7, 9]) == 3",
        "num_ids": 1416,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n\n    pattern = r'a(?![bB]).*b'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one('ababa') == False",
        "num_ids": 4463,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def count_reverse_pairs(test_list):\n    # Initialize a counter to 0\n    count = 0\n    \n    # Iterate through each string in the test_list\n    for string in test_list:\n        # Initialize two pointers to the string and the other string\n        left = 0\n        right = len(string) - 1\n        \n        # While the pointers are within bounds of the strings\n        while left < right:\n            # If the current character at the left pointer is equal to the current character at the right pointer, increment the count and move both pointers forward\n            if string[left] == string[right]:\n                count += 2\n                left += 1\n                right -= 1\n            # If the current character at the left pointer is greater than the current character at the right pointer, move the left pointer forward\n            elif string[left] > string[right]:\n                left += 1\n            # If the current character at the left pointer is less than the current character at the right pointer, move the right pointer backward\n            else:\n                right -= 1\n    \n    return count\n",
        "test": "assert count_reverse_pairs([\"hello\", \"world\", \"python\", \"programming\", \"is\", \"fun\"]) == 2",
        "num_ids": 2118,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for item in list1:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    return counts",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1968,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Initialize variables\n    decimal_mark = '.'\n    decimal_places = 2\n    zero_char = '0'\n    num_str = ''\n    num_len = len(num)\n\n    # Check if there's a decimal mark and decimal places\n    if '.' in num and num.count('.') == 1:\n        decimal_mark = '.'\n        decimal_places = int(num.split('.')[1])\n\n    # Check if there's a decimal point and zero\n    if decimal_mark in num and '0' in num:\n        if '0' not in num:\n            zero_char = '0'\n        elif '.' in num:\n            zero_char = '.'\n        else:\n            zero_char = '0'\n\n    # Extract the number and zero character\n    num_str = num.replace(decimal_mark, '').replace(zero_char, '')\n\n    # Check if there's only one decimal place\n    if len(num_str) - num_len == 1:\n        return False\n\n    # Check if the number is a valid decimal number\n    for c in num_str:\n        if not c.isdigit():\n            return False\n\n    # Check if the number has a precision of 2\n    num_float = float(num_str)\n    if abs(num_float - int(num_float)) > 0.00001:\n        return False\n\n    # If the number passes all checks, return True\n    return True",
        "test": "assert is_decimal(\"123.45\") # True",
        "num_ids": 3172,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Check if all elements in the list have the same frequency\n    if sum(freq.values()) == len(arr):\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 1, 1, 1, 1]) == True",
        "num_ids": 1618,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(12) == True # Month 12 has 30 days",
        "num_ids": 1924,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def find_min_diff(arr,n):\n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n\n    # Loop through the array\n    for i in range(n-1):\n        # Loop through the remaining elements\n        for j in range(i+1,n):\n            # Calculate the difference between the elements\n            diff = arr[j] - arr[i]\n            \n            # Update the minimum difference if the difference is smaller\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff",
        "test": "assert find_min_diff([1,2,3], 2) == 1",
        "num_ids": 1870,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 852,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import math\n\ndef is_polite(n):\n    if n <= 0:\n        return False\n    else:\n        count = 1\n        while n > 0:\n            count *= n\n            n -= 1\n        return count == 1\n\nprint(is_polite(5)) # Output: True",
        "test": "assert is_polite(1) == True",
        "num_ids": 1531,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n\n    # Initialize an empty list to store the pairs\n    pairs = []\n\n    # Iterate through the list\n    for i in range(len(l1) - 1):\n        # Add the pair to the list\n        pairs.append((l1[i], l1[i+1]))\n\n    return pairs",
        "test": "assert pair_wise([]) == []",
        "num_ids": 1726,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count",
        "test": "assert get_pairs_count([1,2,3,4,5], 6) == 2",
        "num_ids": 1649,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def Diff(li1, li2):\n    '''\n    Given two lists, find their difference and return it as a new list.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff",
        "test": "assert Diff([], []) == []",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a Python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i**4\n    return sum",
        "test": "assert odd_num_sum(11) == 169, \"odd_num_sum(11) should return 169\"",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    left_brackets = 0\n    for char in exp:\n        if char in ('(', '['):\n            stack.append(char)\n        elif char in (')', ']'):\n            if not stack:\n                return False\n            if char == '(':\n                left_brackets -= 1\n                if left_brackets < 0:\n                    return False\n            elif char == '[':\n                left_brackets -= 1\n                if left_brackets < 0:\n                    return False\n            stack.pop()\n        elif char == '+':\n            left_brackets -= 1\n            if left_brackets < 0:\n                return False\n        elif char == '-':\n            left_brackets += 1\n            if left_brackets > 0:\n                return False\n\n    if stack:\n        return False\n    return left_brackets == 0",
        "test": "assert check_expression('(a + (b + c)) * d') == False",
        "num_ids": 1522,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    count = 0\n    new_words = []\n    for word in words:\n        if len(word) == K:\n            count += 1\n        else:\n            new_words.append(word)\n    if count == len(words):\n        return test_str\n    else:\n        return''.join(new_words)",
        "test": "assert remove_length(\"hello world\", 4) == \"helloworld\"",
        "num_ids": 1401,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # Use regex pattern to find occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Check if there are any matches\n    if not matches:\n        return None\n\n    # Initialize variables to hold the matches and their positions\n    matches_list = []\n    positions_list = []\n\n    # Iterate through each match\n    for match in matches:\n        # Add the match to a list of matches\n        matches_list.append(match.group())\n        # Add the position to a list of positions\n        positions_list.append(match.start())\n\n    # If there are no matches, return None\n    if not matches_list:\n        return None\n\n    # If there is only one match, return it\n    if len(matches_list) == 1:\n        return (matches_list[0], positions_list[0])\n\n    # If there are multiple matches, return a tuple of matches and their positions\n    else:\n        return (matches_list, positions_list)",
        "test": "assert occurance_substring(\"hello world\", \"lo\") == (\"lo\", 3)",
        "num_ids": 1853,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Loop through every odd index of the given list\n    for i in range(1, len(nums), 2):\n        # Check if the number at the current index is odd\n        if nums[i] % 2!= 0:\n            # If it is not odd, return False\n            return False\n    # If we reach this point, every odd index contains odd numbers\n    return True",
        "test": "assert odd_position([1, 2, 3, 4, 5, 6]) == True",
        "num_ids": 1673,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and i > 0 and test_str[i-1] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"abcd\") == 0, \"The function should return 0 for the given input string.\"",
        "num_ids": 1445,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def find_sum(arr):\n    '''\n    Find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n\n    # Iterate over the list and add each element to the set\n    for element in arr:\n        if element not in unique_set:\n            unique_set.add(element)\n\n    # Return the sum of the elements in the set\n    return sum(unique_set)",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1552,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for elem in list1:\n        if not result or result[-1]!= elem:\n            result.append(elem)\n    return result",
        "test": "assert pack_consecutive_duplicates([1,2,3,2,4,5]) == [1,2,3,2,4,5]",
        "num_ids": 2080,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def unique_sublists(lst):\n    '''\n    Function to count the number of unique sublists in the given list.\n    Returns a dictionary where the key is a list and the value is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in lst:\n        if sublist not in sublist_count:\n            sublist_count[sublist] = 1\n        else:\n            sublist_count[sublist] += 1\n    return sublist_count",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 3398,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize a set to store the combinations of sums\n    combination_set = set()\n\n    # Create a list to store the current combination\n    combination = []\n\n    # Iterate over the given test list\n    for i in range(len(test_list)):\n        # Check if the current sum is already in the combination set\n        if (i == 0 or test_list[i] < test_list[i-1]) and (i == len(test_list)-1 or test_list[i] > test_list[i+1]):\n            # If the sum is valid, add it to the combination set and create a new combination\n            combination.append(test_list[i])\n            combination_set.add(tuple(combination))\n            combination = []\n\n    # Return the list of all combinations found\n    return list(combination_set)",
        "test": "assert find_combinations([1,2,3,4,5]) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5)]",
        "num_ids": 4646,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 1:\n                return count\n    return count",
        "test": "assert count_divisors(10) == 2, \"The count of divisors of 10 should be 2.\"",
        "num_ids": 1389,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def odd_length_sum(arr):\n    # Initialize variables\n    total_sum = 0\n    n = len(arr)\n\n    # Loop through the array\n    for i in range(n):\n        # Check if the current element is odd length\n        if i == 0 or arr[i]!= arr[i - 1]:\n            # If the current element is odd length, add it to the sum\n            total_sum += arr[i]\n\n    return total_sum\n",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5, 6]) == 21 # test case 2",
        "num_ids": 1958,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color model.\n    '''\n    # Calculate the maximum and minimum values for each channel\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    delta_val = max_val - min_val\n\n    # If the maximum value is zero, return (0, 0, 0)\n    if delta_val == 0:\n        return (0, 0, 0)\n\n    # Calculate the hue and saturation values\n    if max_val == r:\n        hue = (g - b) / delta_val\n        saturation = delta_val / max_val\n    elif max_val == g:\n        hue = 2 + (b - r) / delta_val\n        saturation = delta_val / max_val\n    else:\n        hue = 4 + (r - g) / delta_val\n        saturation = delta_val / max_val\n\n    # If the hue is out of range, round it to the nearest integer\n    if hue < 0:\n        hue = 0\n    elif hue > 1:\n        hue = 1\n\n    # Calculate the value from the hue and saturation values\n    value = max_val\n    if delta_val == 0:\n        hue = 0\n    elif saturation == 0:\n        value = max_val\n    else:\n        value = max_val - abs(int(abs(delta_val / saturation) * hue + 0.5))\n\n    # Return the HSV values\n    return (hue, saturation, value)",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 5323,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def mul_even_odd(list1):\n    '''\n    Function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num\n    return product",
        "test": "assert mul_even_odd([]) == 1",
        "num_ids": 1264,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string into a list of strings\n    str_list = test_str.split(',')\n\n    # Initialize an empty list to hold the integer tuples\n    int_list = []\n\n    # Iterate over the list of strings and convert each string to an integer\n    for str in str_list:\n        try:\n            int_list.append(int(str))\n        except ValueError:\n            # If the string cannot be converted to an integer, append it to the list of strings\n            int_list.append(str)\n\n    # Return the integer tuple list\n    return tuple(int_list)",
        "test": "assert tuple_str_int('1') == (1,)",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo, hi = 0, len(a) - 1\n\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n\n    return lo",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 9) == 4",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\s*b{3}'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three(\"aabb\") == False",
        "num_ids": 4228,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # split the input string into a list of words\n    words = test_str.split()\n    # create a new tuple with the elements of the input list and the elements of the input string\n    return tuple(test_list + words)",
        "test": "assert new_tuple([], '') == ()",
        "num_ids": 1087,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = True\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            result = False\n            break\n    return result",
        "test": "assert even_position([1,2,3,4,5]) == True",
        "num_ids": 1278,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)",
        "test": "assert remove_nested((1, 2, 3)) == (1, 2, 3), \"remove_nested((1, 2, 3)) should return (1, 2, 3)\"",
        "num_ids": 1413,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_list(input_list):\n    count = 0\n    for list in input_list:\n        count += 1\n    return count",
        "test": "assert count_list([[1, 2, 3], [4, 5, 6]]) == 2",
        "num_ids": 1045,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the index variable to the length of the array\n    index = len(arr)\n    \n    # Loop through the array to find the last occurrence of the element\n    while index > 0:\n        if arr[index - 1] == x:\n            return index\n        else:\n            index -= 1\n    \n    # If the element is not found in the array, return -1\n    return -1",
        "test": "assert last([1,2,3,4,5],6) == -1",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba\\w+\\b'\n    return re.match(pattern, text) is not None",
        "test": "assert text_starta_endb(\"ab\") == True",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dictionary.values():\n        sum += item\n    return sum",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 975,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(x for x in range(1, n+1) if x%2!=0)",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "test": "assert _sum([1,2,3]) == 6",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Perform left rotation by d bits\n    left_rot = n << d\n    # Extract the left d bits and return them as the result\n    return left_rot",
        "test": "assert left_rotate(4,2) == 16",
        "num_ids": 1221,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)",
        "test": "assert remove_all_spaces(\"\") == \"\"",
        "num_ids": 872,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(y, z+1):\n            if i == j == z:\n                count += 1\n    return count",
        "test": "assert test_three_equal(3,3,2) == 0, \"The function should return 0 when called with 3 equal integers.\"",
        "num_ids": 1061,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def count_rotation(arr):\n    count = 0\n    for i in range(len(arr)):\n        # Traverse the array from the last element to the first element\n        for j in range(i, len(arr)):\n            if arr[j] < arr[j-1]:\n                count += 1\n                # If the number of rotations exceeds the current one, increment the count\n                if count > 1:\n                    count = 1\n    return count",
        "test": "assert count_rotation([1, 1, 1, 1]) == 0, \"The count of rotations required to generate a sorted array is incorrect.\"",
        "num_ids": 1895,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def is_perfect_square(n):\n    '''\n    Check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if n is an integer\n    if not isinstance(n, int):\n        return False\n    \n    # Calculate the square root of n\n    sqrt_n = int(n ** 0.5)\n    \n    # Check if sqrt_n is an integer\n    if not isinstance(sqrt_n, int):\n        return False\n    \n    # Check if the square of sqrt_n is equal to n\n    return sqrt_n ** 2 == n",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 1126,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize the product to 1\n    product = 1\n    \n    # Loop through the list\n    for num in arr:\n        \n        # Multiply the product with the current number\n        product *= num\n    \n    # Check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2, 4, 6]) is True",
        "num_ids": 1148,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # sort the lists by the sum of their elements\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            if lists[i][0] + lists[j][0] > lists[i][1] + lists[j][1]:\n                lists[i], lists[j] = lists[j], lists[i]\n\n    # find the maximum sum\n    max_sum = lists[0][1]\n    for i in range(1, len(lists)):\n        if lists[i][1] > max_sum:\n            max_sum = lists[i][1]\n\n    # find the index of the maximum sum\n    max_sum_index = 0\n    for i in range(1, len(lists)):\n        if lists[i][1] == max_sum:\n            max_sum_index = i\n\n    # return the list\n    return lists[max_sum_index]",
        "test": "assert max_sum_list([[-2, -3, 4], [-1, 2, 5], [3, -2, 1]]) == [-2, -1, 3]",
        "num_ids": 2412,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run count\n        if char.isupper():\n            current_run += 1\n        \n        # If the current run is greater than the max_run, update max_run\n        if current_run > max_run:\n            max_run = current_run\n    \n    return max_run",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 1979,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number found in the list.\n    '''\n    \n    for num in nums:\n        if num % 2!= 0:  # checking if the number is odd or not\n            return num\n    \n    return None  # returning None if no odd number is found in the list\n    ",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1162,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    elif len(test_tup) == K:\n        return True\n    elif len(test_tup) > K:\n        return True\n    else:\n        return False",
        "test": "assert check_K((1, 2, 3), 5) == False",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True",
        "test": "assert check_smaller((5, 8), (2, 4)) # true",
        "num_ids": 1533,
        "indeed": true
    }
]