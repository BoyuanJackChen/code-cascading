[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create two sets to store the unique elements of each list\n    unique1 = set(test_tup1)\n    unique2 = set(test_tup2)\n\n    # Find the shared elements between the two sets\n    shared = unique1.intersection(unique2)\n\n    # Return the shared elements\n    return shared",
        "test": "assert similar_elements((1,2,3), (4,5,6)) == set()",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if (n % i) == 0:\n            return False\n    return True",
        "test": "assert is_not_prime(2) == True, \"The input 2 is not a prime number.\"",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "import heapq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Finds the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    return heapq.nlargest(n, nums)",
        "test": "assert heap_queue_largest([], 0) == []",
        "num_ids": 1126,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Power_Of_Two(x):\n    # convert x to binary string\n    bin_x = bin(x)[2:]\n    # loop through each bit of binary string\n    for bit in bin_x:\n        # if there is only one bit left, it is a power of two\n        if len(bit) == 1:\n            return True\n    # if all bits are zero, x is a power of two\n    return False",
        "test": "assert is_Power_Of_Two(8) == True",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = re.findall(r'\\b\\w{4,}\\b', text)\n    return word_list",
        "test": "assert find_char_long(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 903,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n\n    # Check if the string is empty\n    if len(str) == 0:\n        return 0\n\n    # If the string is of length 1, we can simply return 0 since we can rotate it once\n    elif len(str) == 1:\n        return 0\n\n    # Initialize the minimum rotation count to 1\n    min_count = 1\n\n    # Iterate through the string to find the minimum number of rotations\n    for i in range(1, len(str)):\n        # Check if the current character is present in the string after rotating by one character\n        if str[i] in str[i-1:]:\n            min_count = max(min_count, i)\n\n    return min_count",
        "test": "assert find_Rotations(\"\") == 0, \"find_Rotations should return 0 for an empty string\"",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n\n    Parameters:\n        s (str): the input string.\n        ch (str): the character to be removed.\n\n    Returns:\n        str: the modified string with the first occurrence of ch removed.\n\n    Example:\n        >>> remove_Occ('hello world', 'w')\n        'hello'\n\n        >>> remove_Occ('hello world', 'o')\n        'world'\n    \"\"\"\n    if len(s) <= 1:\n        return s\n    else:\n        if s[0] == ch and s[-1] == ch:\n            return s[1:-1]\n        else:\n            return s",
        "test": "assert remove_Occ(\"Hello world\", \"x\") == \"Hello world\"",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    rows = len(M)\n    cols = len(M[0])\n    \n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # sort the rows based on their sum\n    sorted_rows = sorted(range(rows), key=lambda i: row_sums[i])\n    \n    # transpose the rows to get the columns\n    transposed_rows = [[M[i][j] for j in range(cols)] for i in sorted_rows]\n    \n    return transposed_rows",
        "test": "assert sort_matrix([[1,2,3], [4,5,6], [7,8,9]]) == [[1,2,3], [4,5,6], [7,8,9]]",
        "num_ids": 1719,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def find_Volume(l, b, h):\n    volume = l * b * h\n    return volume",
        "test": "assert find_Volume(1,2,3) == 6",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z][a-z_]*')\n    return pattern.search(text) is not None",
        "test": "assert text_lowercase_underscore(\"\") == False",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def square_perimeter(a):\n    '''\n    Returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    unique_list = []\n    for char in string:\n        if char not in unique_list:\n            unique_list.append(char)\n    return ''.join(unique_list)",
        "test": "assert str_to_list(\"\") == []",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty dictionary\n    seen = {}\n    \n    # iterate through each element in the array\n    for num in arraynums:\n        # if the number is already in the dictionary, return True\n        if num in seen:\n            return True\n        # otherwise, add the number to the dictionary and continue\n        seen[num] = True\n    \n    # if we reach this point, all elements in the array are unique\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5, 5, 5]) # This will assert that the function returns False for an array with duplicate elements.",
        "num_ids": 917,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def is_woodall(x): \n    '''\n    This function checks if the given number is a woodball number or not. \n    It takes an integer argument 'x' and returns a boolean value indicating whether it is a woodball number or not. \n    '''\n    # Define a list of woodball numbers \n    woodball_numbers = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]\n    \n    # Check if the number is in the list of woodball numbers\n    if x in woodball_numbers:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(1) is False",
        "num_ids": 2689,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 1:\n        return False\n    while num > 0:\n        num = num // 10\n    num = num * 2\n    if num == 0:\n        return True\n    else:\n        return False",
        "test": "assert rev(0) == False, \"The reverse of 0 is not 0.\"",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_Max_Num(arr) : \n    max_num = arr[0]\n    for num in arr : \n        if num > max_num : \n            max_num = num\n    return max_num",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y >= 0:\n        return True\n    elif x >= 0 and y < 0:\n        return True\n    elif x < 0 and y < 0:\n        return False",
        "test": "assert opposite_Signs(0, 1) == False",
        "num_ids": 756,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_octagonal(n):\n    # The first octagonal number is 1\n    if n == 1:\n        return True\n    \n    # If n is divisible by 3, the nth octagonal number is 1 + 2*i + 3*j\n    if n % 3 == 0:\n        return True\n    \n    # Otherwise, the nth octagonal number is 1 + 2*i + j\n    for i in range(1, n):\n        if n % (i+2) == 0:\n            return True\n    \n    # If none of the above conditions are satisfied, the nth octagonal number is n + (2*i + j)\n    for i in range(1, n):\n        for j in range(1, 2*i+1):\n            if n + (2*i + j) == n:\n                return True\n    \n    return False",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the frequency of each substring\n    frequency = defaultdict(int)\n    \n    # Iterate over each substring of the given string\n    for i in range(len(s)):\n        # Find the sum of digits in the substring\n        digit_sum = sum(int(d) for d in s[i:])\n        \n        # Increment the frequency of the substring in the dictionary\n        frequency[digit_sum] += 1\n    \n    # Return the frequency of each substring\n    return frequency",
        "test": "assert count_Substrings(\"abcdefgh\") == 5",
        "num_ids": 903,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize a variable to store the smallest number\n    smallest = xs[0]\n    # loop through the list and check if the current number is smaller than the smallest number\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    # return the smallest number\n    return smallest",
        "test": "assert smallest_num([4, 2, 6, 8, 10]) == 2",
        "num_ids": 778,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks([(\"Math\", 90), (\"English\", 85), (\"History\", 90), (\"Science\", 75), (\"Chemistry\", 90)]) == [(\"Chemistry\", 90), (\"English\", 85), (\"Math\", 90), (\"Science\", 75), (\"History\", 90)]",
        "num_ids": 697,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the last element of the list to the sum\n    return data_list[-1] + recursive_list_sum(data_list[:-1])",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 947,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1,2,3,4,5]) == 5 # expected output: 5",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)",
        "test": "assert bell_number(1) == 1",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def is_Monotonic(A):\n    if len(A) == 1:\n        return True\n    elif len(A) == 2:\n        return A[0] == A[1]\n    elif len(A) == 3:\n        return A[0] < A[1] and A[0] < A[2]\n    else:\n        for i in range(len(A) - 1):\n            if A[i] > A[i + 1]:\n                return False\n        return True",
        "test": "assert is_Monotonic([1, 2, 1]) == False",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # iterate through each element of the list\n    for i in range(len(l)):\n        # if the current element matches the first element of the sublist\n        if l[i] == s[0]:\n            # check if the current element matches the remaining elements of the sublist\n            if i+1 < len(s) and s[i+1] == s[i]:\n                # if so, recursively call the function on the remaining elements of the sublist\n                return is_sublist(l[i+1:], s[i+1:])\n    # if the loop completes without returning, the sublist is present in the list\n    return True",
        "test": "assert is_sublist([],[]) == True",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = set()\n    for i in range(len(Input)):\n        if len(Input[i]) not in lengths:\n            lengths.add(len(Input[i]))\n    return lengths == set(range(len(Input)))",
        "test": "assert find_equal_tuple([]) == True",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using thecomb-sort algorithm.\n\n    Parameters:\n    nums (list): A list of elements to sort.\n\n    Returns:\n    list: The sorted list of elements.\n    '''\n\n    # Define the function to sort the elements\n    def comb_sort_helper(nums, start, end):\n        if start == end:\n            return\n\n        # Find the smallest element and its index\n        min_index = start\n        min_val = nums[start]\n        for i in range(start+1, end):\n            if nums[i] < min_val:\n                min_val = nums[i]\n                min_index = i\n\n        # Swap the smallest element with the start element\n        nums[start], nums[min_index] = nums[min_index], nums[start]\n\n        # Recursively sort the remaining elements\n        comb_sort_helper(nums, start+1, end)\n\n    # Call the helper function with the entire list\n    comb_sort_helper(nums, 0, len(nums)-1)\n\n    # Return the sorted list of elements\n    return nums",
        "test": "assert comb_sort([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
        "num_ids": 1606,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def dif_Square(n):\n    '''\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 4 == 0:\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return True",
        "test": "assert dif_Square(16) == True # it can be represented as the difference of two squares",
        "num_ids": 753,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns)!= len(colors):\n        return False\n\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True",
        "test": "assert is_samepatterns(['red', 'green', 'blue', 'yellow', 'purple'], ['red', 'green', 'blue', 'yellow', 'pink']) == False",
        "num_ids": 1026,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Create an empty list to store the tuples which meet the conditions\n    result = []\n\n    # Loop through each tuple in the list\n    for t in test_list:\n        # Check if the tuple has all elements divisible by k\n        if all(t[i] % K == 0 for i in range(len(t))):\n            # If the tuple meets all conditions, add it to the result list\n            result.append(t)\n\n    # Return the result list\n    return result",
        "test": "assert find_tuples([], 5) == []",
        "num_ids": 1500,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(11) == True",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Initialize the count variable\n    count = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Increment the count variable for each odd length word\n        if char.isalpha():\n            count += 1\n            \n    # Return the count\n    return count\n",
        "test": "assert word_len(\"cat\") == 3",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 15\n\n    # Recursive case\n    half_n = n // 2\n    tria_n = tetrahedral_number(half_n)\n    return tria_n * tria_n * tria_n",
        "test": "assert tetrahedral_number(1) == 1, \"The first tetrahedral number is 1.\"",
        "num_ids": 994,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi * r ** 3",
        "test": "assert volume_sphere(1) == 3.141592653589793",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr(ascii_value % 26)",
        "test": "assert get_Char(\"programming\") == 109 # lowercase p",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        a, b = 0, 1 \n        for i in range(2, n+1): \n            c = a + b \n            a, b = b, c \n        return b ",
        "test": "assert sequence(2) == 1  # 2 is the third number in the sequence",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi * r**2",
        "test": "assert surfacearea_sphere(10) == 314.1592653589793",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Returns the nth centered hexagonal number using the centered hexagonal formula.\n\n    Args:\n        n (int): The number of centered hexagonal numbers to find.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    '''\n\n    if n < 1 or n > 100:\n        raise ValueError(\"Input number must be between 1 and 100.\")\n\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (1 + centered_hexagonal_number(n - 1)) // 2\n    else:\n        return centered_hexagonal_number(n - 1) + 1",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        if key in dict1 and key in dict2 and key in dict3:\n            merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n        elif key in dict1:\n            merged_dict[key] = dict1[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict",
        "test": "assert merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 1181,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "from collections import defaultdict\n\ndef freq_count(lst):\n    freq = defaultdict(int)\n    for item in lst:\n        freq[item] += 1\n    return freq\n\nlst1 = [1, 2, 3, 2, 1, 2, 1]\nprint(freq_count(lst1)) # Output: {'1': 3, '2': 4, '3': 1}",
        "test": "assert freq_count([1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 1152,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    for i in range(1, N+1):\n        if abs(N - i) < abs(N - min_num):\n            min_num = i\n    return min_num\n\nprint(closest_num(10))  # Output: 6\nprint(closest_num(15))  # Output: 10\nprint(closest_num(20))  # Output: 15\n",
        "test": "assert closest_num(1) == 1",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def len_log(list1):\n    '''\n    Find the length of the longest word in a list of strings.\n    '''\n\n    # Initialize the max_len variable to 0\n    max_len = 0\n\n    # Loop through each string in the list\n    for string in list1:\n        # If the length of the current string is greater than the current max_len, update max_len\n        if len(string) > max_len:\n            max_len = len(string)\n\n    # Return the max_len variable\n    return max_len",
        "test": "assert len_log([\"one\", \"two\", \"three\", \"four\", \"five\"]) == 5",
        "num_ids": 925,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring(\"Hello, World!\", \"w\") == False",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return False\n    elif n % 2 == 1 and n > 2:\n        return True\n    else:\n        return False",
        "test": "assert is_undulating(7) is True, \"The given number 7 is not undulating\"",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def power(a,b):\n    '''\n    Calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,3) == 8",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from operator import itemgetter\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_second = float('inf')\n    smallest_index = -1\n    for index, (x, y) in enumerate(test_list):\n        if y < smallest_second:\n            smallest_second = y\n            smallest_index = index\n    return test_list[smallest_index]",
        "test": "assert index_minimum([(1, 3), (4, 6), (7, 9)]) == (1, 3)",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        min_length = len(lst[0])\n        for i in range(len(lst)):\n            if len(lst[i]) < min_length:\n                min_length = len(lst[i])\n        return min_length",
        "test": "assert Find_Min_Length([[1]]) == 1",
        "num_ids": 1918,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(2) == 2",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # create a dictionary to store frequency of each element\n    freq_dict = {}\n\n    # loop through the flattened list\n    for item in flat_list:\n\n        # if the element is already in the dictionary, increment its count\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # otherwise, add the element as a key with a count of 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict",
        "test": "assert frequency_lists([1, 2, 3, 2, 1, 2]) == {1: 3, 2: 1, 3: 1}",
        "num_ids": 1178,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)",
        "test": "assert multiply_num([1]) == 1",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def decimal_to_binary(n):\n    # Initialize a string to store the binary representation of n\n    binary_str = \"\"\n\n    # Loop through the digits of n and append the corresponding binary digit to the string\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n\n    # Remove any leading zeros from the binary representation\n    binary_str = binary_str.lstrip(\"0\")\n\n    return binary_str",
        "test": "assert decimal_to_binary(15) == '1111'",
        "num_ids": 1842,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is negative\n    if num < 0:\n        num = abs(num)\n\n    # Initialize the smallest palindrome to be the number itself\n    smallest_palindrome = num\n\n    # Initialize a variable to keep track of the current palindrome\n    current_palindrome = num\n\n    # Loop until the current palindrome is not smaller than the smallest palindrome\n    while current_palindrome > smallest_palindrome:\n        # Check if the current palindrome is a palindrome\n        if str(current_palindrome) == str(current_palindrome)[::-1]:\n            # If it is, update the smallest palindrome if it is smaller\n            if current_palindrome < smallest_palindrome:\n                smallest_palindrome = current_palindrome\n            # Update the current palindrome\n            current_palindrome += 1\n        else:\n            # If the current palindrome is not a palindrome, move on to the next one\n            current_palindrome += 1\n\n    # Return the next smallest palindrome\n    return smallest_palindrome",
        "test": "assert next_smallest_palindrome(10101) == 10101",
        "num_ids": 1563,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) - 1:\n        return None\n    else:\n        return arr[k - 1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1 # The first element is 1",
        "num_ids": 929,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words using underscore as separator\n    words = word.split(\"_\")\n    # Convert each word to camel case and join them with an underscore\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word",
        "test": "assert snake_to_camel('snake_case') =='snakeCase'",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def eulerian_num(n, m):\n    # Function to find Eulerian number\n    def euler(n, m):\n        if n == 0 and m == 0:\n            return 1\n        elif n == 1 and m == 1:\n            return 2\n        elif n == 0 and m == 1:\n            return 3\n        else:\n            result = 1\n            for i in range(2, n + 1):\n                for j in range(2, m + 1):\n                    if i == n and j == m:\n                        result *= i + j\n                    elif i == n and j == 1:\n                        result *= i + 1\n                    elif i == 1 and j == m:\n                        result *= i + j\n                    elif i == 1 and j == 1:\n                        result *= i + 1\n            return result\n\n    # Return Eulerian number\n    return euler(n, m)",
        "test": "assert eulerian_num(10, 2) == 12, \"The correct Eulerian number for n=10 and m=2 is 12.\"",
        "num_ids": 1697,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n\n    for sublist in input_list:\n        # Check if the sublist is already in the result list\n        if sublist not in result:\n            # If not, add it to the result list\n            result.append(sublist)\n\n    # Sort the result list in ascending order\n    result.sort()\n\n    return result",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"cherry\"], [\"banana\", \"apple\", \"pear\"], [\"cherry\", \"apple\", \"banana\"]]) == [[\"apple\", \"banana\", \"cherry\"], [\"banana\", \"apple\", \"pear\"], [\"cherry\", \"apple\", \"banana\"]]",
        "num_ids": 2215,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n\nlst = [True, False, True, False, True, False, True]\nprint(count(lst)) # Output: 2",
        "test": "assert count([]) == 0",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Merges three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = 0\n    \n    while i < len(num1) and j < len(num2) and j < len(num3):\n        if num1[i] <= num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num1[i] > num3[j]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[j])\n            j += 1\n            \n    # Add any remaining elements from the non-empty list\n    merged_list.extend(num1[i:])\n    merged_list.extend(num2[j:])\n    merged_list.extend(num3[j:])\n    \n    return merged_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 1774,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def odd_Equivalent(s, n):\n    # convert string to binary\n    binary = bin(int(s, 2))[2:].zfill(n)\n    \n    # count the number of odd numbers\n    count = 0\n    for i in range(n):\n        if binary[i] == '1':\n            count += 1\n    \n    return count",
        "test": "assert odd_Equivalent('11011011',2) == 2",
        "num_ids": 866,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list of common elements.\n    '''\n\n    common_list = []\n\n    for sublist in nestedlist:\n        if len(set(sublist)) == 1:\n            common_list.append(sublist[0])\n\n    return common_list",
        "test": "assert common_in_nested_lists([[]]) == []",
        "num_ids": 1468,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int_num = int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"abc\") == False",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if dict1.keys()!= set():\n            return False\n    return True\n",
        "test": "assert empty_dit([]) == True",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers into a single integer.\n    '''\n    return sum(nums)",
        "test": "assert tuple_to_int((1,2,3)) == 6",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def list_to_float(test_list):\n    '''\n    This function takes a list of lists as input and returns a list of floats containing all the elements in the input list that can be converted to floats.\n    '''\n    float_list = []\n    for item in test_list:\n        for value in item:\n            try:\n                float_list.append(float(value))\n            except ValueError:\n                pass\n    return float_list\n",
        "test": "assert list_to_float([]) == []",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"apple banana\") == [\"apple\", \"banana\"]",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def search(arr):\n    \"\"\"\n    Write a Python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    count = 0\n    current = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == current:\n            count += 1\n        else:\n            if count == 1:\n                return current\n            count = 1\n            current = arr[i]\n    if count == 1:\n        return current\n    else:\n        return None",
        "test": "assert search([1, 1, 1, 1, 1]) == None",
        "num_ids": 3094,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def max_product_tuple(lst):\n    # Sort the list of tuples based on first element\n    lst.sort(key=lambda x: x[0])\n\n    # Initialize the maximum product to negative infinity\n    max_product = float('-inf')\n\n    # Loop through all the tuples and find the maximum absolute product\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            # Calculate the absolute product between the two tuples\n            prod = lst[i][0] * lst[j][0]\n            # Update the maximum product if necessary\n            if prod > max_product:\n                max_product = prod\n\n    # Return the maximum absolute product\n    return max_product",
        "test": "assert max_product_tuple([-1, -2, -3, -4, -5, -6]) == (-600, (-1, -6), (-2, -5), (-3, -4), (-4, -3), (-5, -2), (-6, -1))",
        "num_ids": 1557,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        is_amicable = True\n        for j in range(1, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_amicable = False\n                break\n        if is_amicable:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n",
        "test": "assert amicable_numbers_sum(10000) == 311420709 # 1 + 2 + 4 + 5 + 7 + 11 + 13 + 15 + 17 + 19 + 23 + 29 + 31 + 37 + 41 + 43 + 47 + 53 + 59 + 61 + 67 + 71 + 73 + 79 + 83 + 89 + 97 = 311420709",
        "num_ids": 2296,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+1j*b)  # Calculate the angle in radians\n    return angle",
        "test": "assert angle_complex(0,0) == 0",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n            if count_0 > max_diff:\n                max_diff = count_0\n        else:\n            count_1 += 1\n            if count_1 > max_diff:\n                max_diff = count_1\n    return max_diff",
        "test": "assert find_length(\"\") == 0",
        "num_ids": 2145,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def sum(a, b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisor = 0\n    for i in range(a, b+1):\n        if a % i == 0 and b % i == 0:\n            common_divisor += i\n    return common_divisor\n",
        "test": "assert sum(5, 10) == 5, \"The sum of 5 and 10 is incorrect\"",
        "num_ids": 1325,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def multiply_int(x, y):\n    '''\n    Multiply two integers and return the result.\n    '''\n    result = x * y\n    return result",
        "test": "assert multiply_int(3, 4) == 12, \"The result of multiplying 3 and 4 is not equal to 12.\"",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def long_words(n, str_list):\n    '''\n    Given a list of words, return a list of words that are longer than n characters.\n    '''\n\n    long_words_list = []\n\n    for word in str_list:\n        if len(word) > n:\n            long_words_list.append(word)\n\n    return long_words_list",
        "test": "assert long_words(7, 'The quick brown fox jumps over the lazy dog') == []",
        "num_ids": 1141,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    if rows!= len(my_matrix[0]):\n        return False\n    \n    cols = len(my_matrix[0])\n    if cols!= rows:\n        return False\n    \n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= i + j + 1:\n                return False\n            \n    return True",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 1516,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for num in nums:\n        counts[num] += 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n    return max_item",
        "test": "assert max_occurrences([1, 1, 1, 1, 1]) == 1",
        "num_ids": 1167,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n\n    vowels = \"aeiouy\"\n    reversed_str = \"\"\n\n    for char in str1:\n        if char not in vowels:\n            reversed_str += char\n\n    return reversed_str",
        "test": "assert reverse_vowels(\"\") == \"\"",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def tup_string(tup1):\n    '''\n    Convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string(\"hello\") == \"hello\"",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            total_sum += num\n    return total_sum",
        "test": "assert sum_negativenum([]) == 0",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def hexagonal_num(n): \n    # Function to find nth hexagonal number\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    else:\n        return (n * (n-1)) // 2 + hexagonal_num(n-1)",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 1401,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize a counter for the zeroes and a counter for the non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate through the array and count the zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = round((zero_count / non_zero_count), 2)\n\n    return ratio",
        "test": "assert zero_count([1]) == 0",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is an integer\n    if not isinstance(n, int):\n        return False\n\n    # Check if n is equal to 0\n    if n == 0:\n        return False\n\n    # Check if n is 1\n    if n == 1:\n        return True\n\n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        return True\n\n    # Check if n can be represented as sum of powers of 2\n    for i in range(32, n, 2):\n        if n % i == 0:\n            return False\n\n    return True",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 1379,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = math.pi\n    circumference = 2 * pi * r\n    return circumference",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 917,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Create an empty set to store the numbers\n    result = set()\n    \n    # Loop through each element in the input list\n    for element in test_list:\n        # If the element is a list, recursively call the function on it\n        if type(element) is list:\n            result.update(extract_singly(element))\n        # If the element is not a list, add it to the result set\n        else:\n            result.add(element)\n    \n    # Return the set of numbers as a list\n    return list(result)",
        "test": "assert extract_singly([]) == []",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def pancake_sort(nums):\n    '''\n    Sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the smallest and largest elements in the sublist\n        left = i\n        right = n - 1\n        while left < right:\n            if nums[left] > nums[right]:\n                # swap the elements and move the right pointer to the right\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n            else:\n                right -= 1\n        # if we couldn't find a sublist of size 2 or less, we're done\n        if i!= left - 1:\n            # move the right pointer to the next index\n            right = n - 1\n\n    return nums",
        "test": "assert pancake_sort([1, 1, 1, 1]) == [1, 1, 1, 1]",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([],[],[]) == 0, \"count_samepair([]) should return 0 for an empty list\"",
        "num_ids": 1138,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def find_lists(Input):\n    '''\n    Function to find number of lists present in a tuple.\n\n    Args:\n    Input: Tuple to find number of lists in.\n\n    Returns:\n    Count of lists in the tuple.\n    '''\n\n    return len(Input)",
        "test": "assert find_lists(()) == 0",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def max_Abs_Diff(arr):\n    # sort the array in non-descending order\n    arr.sort()\n    # initialize two variables to store the maximum difference and the current difference\n    max_diff = abs(arr[1] - arr[0])\n    current_diff = abs(arr[1] - arr[0])\n\n    # iterate through the array and calculate the maximum difference\n    for i in range(1, len(arr)):\n        current_diff = max(abs(arr[i] - arr[i-1]), current_diff)\n        max_diff = max(max_diff, current_diff)\n\n    # return the maximum difference\n    return max_diff",
        "test": "assert max_Abs_Diff([5, 4, 3, 2, 1]) == 1",
        "num_ids": 1166,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if x and y are integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n\n    # Check if x and y are different\n    if a == b:\n        return None\n\n    # Calculate solutions\n    solutions = [(a, b), (-a, b), (a, -b), (-a, -b)]\n\n    # Find the first solution\n    for solution in solutions:\n        x, y = solution\n        if x * x + y * y == n:\n            return (x, y)\n\n    # If no solution was found, return None\n    return None",
        "test": "assert find_solution(1, 4, 5) == None",
        "num_ids": 1158,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # create a set of elements present in list2\n    set2 = set(list2)\n\n    # create an empty list to store the remaining elements\n    result = []\n\n    # iterate through the elements of list1\n    for element in list1:\n        # if element is present in set2, append it to result list\n        if element in set2:\n            result.append(element)\n\n    return result\n",
        "test": "assert remove_elements([], [1, 2, 3, 4, 5]) == []",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    \n    total_sum = 0\n    i = 1\n    while i <= n // 2:\n        total_sum += i\n        i += 1\n    \n    while n - total_sum > 0:\n        total_sum -= 2*i\n        i += 1\n    \n    return total_sum",
        "test": "assert sum_series(10) == 28",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (s * 2) / pi\n    area = a * l * (l - 1) / 2\n    return area",
        "test": "assert area_polygon(12, 4) == 24*pi, \"The area of the polygon with 12 sides and 4 sides is not equal to 24 * pi.\"",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [1] * (n + 1)\n    divisors[0] = 0\n    divisors[1] = 1\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors[i] = i\n            divisors[n // i] = 0\n            \n    return sum(divisors)",
        "test": "assert div_sum(13) == 13, \"The sum of divisors of 13 should be 13\"",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def count_char_position(str1):\n    # Define a set of uppercase and lowercase English alphabets\n    english_alphabets = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    # Count the number of characters in the first string that occur at the same position in the English alphabet\n    char_count = 0\n    for i in range(len(str1)):\n        if str1[i] in english_alphabets:\n            char_count += 1\n    return char_count\n",
        "test": "assert count_char_position('1234567890') == 0",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        if A[i] % 2 == 0 and A[i]!= A[i+1] % 2:\n            count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2, \"The expected output is 2\"",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n: \n        power <<= 1\n    return power",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 830,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count",
        "test": "assert frequency(\"kiwi\", [\"apple\", \"banana\", \"apple\", \"banana\", \"cherry\"]) == 0",
        "num_ids": 721,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-m]\n    return total",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 6",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 2 * (a * (a + 1) / 2)",
        "test": "assert perimeter_pentagon(8) == 28, \"Test 4: The perimeter of a regular pentagon from the length of its sides is 28.\"",
        "num_ids": 678,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def count_occurance(s):\n    '''\n    Function to count the number of occurance of the string'std' in a given string.\n    '''\n\n    count = 0\n    for char in s:\n        if char =='s' or char == 't' or char == 'd':\n            count += 1\n\n    return count",
        "test": "assert count_occurance('a') == 0, \"count_occurance should return 0 if the string is empty.\"",
        "num_ids": 539,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = True\n    for i in range(len(test_tuple)):\n        if not isinstance(test_tuple[i], type(test_tuple[0])):\n            data_type = False\n            break\n    return data_type",
        "test": "assert check_type(('a', 2, 3, 'b', 4)) == False",
        "num_ids": 808,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Count the frequency of each element in the array\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Check if the majority element is within n/2 times the frequency of the given element\n    majority_count = 0\n    for count in freq.values():\n        if count > n//2:\n            majority_count += 1\n        elif count == n//2:\n            return True\n\n    # If no majority element is found, return False\n    return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 2) == False, \"Test Case 2: The element is not the majority element in the given sorted array.\"",
        "num_ids": 1429,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty list to store the remaining characters\n    result = []\n    # iterate through each character in the string\n    for i, char in enumerate(str):\n        # check if the index is odd and if it is not already in the result list\n        if i % 2 == 1 and char not in result:\n            # add the character to the result list\n            result.append(char)\n    # return the result list\n    return result",
        "test": "assert odd_values_string(\"abc\") == \"bc\"",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_of_three(a, b, c):\n    # Finding the minimum of three numbers\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:  # base case: n is 0\n        return True\n    \n    # if n is odd, then check whether the least significant bit is set or not\n    if n % 2!= 0:\n        mask = (1 << l) - 1  # bitmask of all bits that are set to 1 except for least significant bit\n        if (mask & (n >> l))!= 0:\n            return False  # if the least significant bit is set in n, then no bits are set in the range\n    \n    # if n is even, then check whether the second least significant bit is set or not\n    else:\n        mask = (1 << (l+1)) - 1  # bitmask of all bits that are set to 1 except for second least significant bit\n        if (mask & (n >> (l+1)))!= 0:\n            return False  # if the second least significant bit is set in n, then no bits are set in the range\n    \n    # recursive case: n is even or odd\n    return all_Bits_Set_In_The_Given_Range((n >> 1), l, (l+1))  # call the function recursively with n >> 1 as the argument and l+1 as the left limit\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,0,5) == False",
        "num_ids": 1530,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    neg_start = 0\n    pos_start = n - 1\n\n    for i in range(n):\n        if arr[i] < 0:\n            arr[neg_start], arr[i] = arr[i], arr[neg_start]\n            neg_start += 1\n        else:\n            arr[pos_start], arr[i] = arr[i], arr[pos_start]\n            pos_start -= 1\n\n    return arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 1706,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank(\"hello\", \" \") == \"hello\"",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([1, 2, 3, 4, 5], 0) == []",
        "num_ids": 1010,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h",
        "test": "assert lateralsuface_cylinder(1,1) == 2",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "test": "assert volume_cube(1) == 1, \"Volume of a cube with side length 1 is not 1.\"",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # set all even bits of n to 1\n    return n | n >> 1 | n >> 2 | n >> 4 | n >> 8 | n >> 16\n    \n    # set all odd bits of n to 0\n    return n & ~n >> 1 & ~n >> 2 & ~n >> 4 & ~n >> 8 & ~n >> 16",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 1037,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a dictionary to store the counts\n    counts = Counter()\n\n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Get the first element of the tuple\n        key = tup[0]\n\n        # Increment the count for the key\n        counts[key] += 1\n\n    return counts",
        "test": "assert check_occurences([(\"apple\", 2), (\"banana\", 3), (\"apple\", 1), (\"pear\", 1), (\"banana\", 2)]) == {\"apple\": 2, \"banana\": 2, \"pear\": 1}",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize count variable to zero\n    count = 0\n    \n    # Loop through each character in the string\n    for char in str:\n        # If the character is not an empty string, increment the count\n        if char!= '':\n            count += 1\n    \n    # Return the count\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if m <= 0 or n <= 0:\n        return 0\n    if n == 1:\n        return 1\n\n    count = 0\n    prev_num = 1\n    for i in range(2, m+1):\n        if i % 2 == 0:\n            if i - prev_num >= 2:\n                count += 1\n        else:\n            if prev_num - i >= 2:\n                count += 1\n        prev_num = i\n\n    return count",
        "test": "assert get_total_number_of_sequences(2, 2) == 0",
        "num_ids": 1710,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if both lists have the same length\n    if len(list1)!= len(list2):\n        raise ValueError(\"Lists must have the same length\")\n    \n    # Replace last element of first list with elements of second list\n    list1[-1] = list2[-1]",
        "test": "assert replace_list([1,2,3,4,5], [6,7,8,9,10]) == [1,2,3,6,7,8,9,10,4,5]",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)",
        "test": "assert count_charac(\"\") == 0",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Check if the number is positive\n    if N <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Initialize the upper limit for the square root\n    upper = int(math.sqrt(N))\n    # Initialize the current square root\n    current_sqrt = upper\n    \n    # Loop until the square root is greater than or equal to N\n    while current_sqrt * current_sqrt < N:\n        current_sqrt += 1\n    \n    # Return the next perfect square\n    return current_sqrt**2",
        "test": "assert next_Perfect_Square(1) == 1, \"next_Perfect_Square(1) should return 1, but it returns {}\".format(next_Perfect_Square(1))",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize max sum and the current sum\n    max_sum = arr[0]\n    curr_sum = arr[0]\n    \n    # Traverse the array from 2 to n-1 and calculate the current sum\n    for i in range(1, n):\n        curr_sum = arr[i] + curr_sum - arr[i-1]\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum",
        "test": "assert max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 55",
        "num_ids": 1227,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while guess * guess!= number:\n        if guess * guess > number:\n            guess = guess - 1\n        else:\n            guess = guess + 1\n    return guess\n",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Create a table to store the length of the longest palindromic subsequence ending at each position in the string.\n    lps_table = [[0]*len(str) for _ in range(len(str))]\n\n    # Initialize the length of the longest palindromic subsequence and its start position to the length of the string.\n    max_palindrome = 1\n    start_pos = 0\n\n    # Iterate through the string using dynamic programming.\n    for i in range(1, len(str)):\n        # Check if the current character is a palindrome and its position is not already in the table.\n        if str[i] == str[i-1] and i-start_pos+1 > max_palindrome:\n            max_palindrome = i-start_pos+1\n            start_pos = i-max_palindrome+1\n\n        # Update the length of the longest palindromic subsequence ending at the current position in the table.\n        lps_table[i][i] = 1\n\n        # Update the length of the longest palindromic subsequence ending at the current position and one step to the left in the table.\n        if i-1 >= start_pos:\n            lps_table[i][i-1] = 2 + lps_table[i-1][i-2]\n\n    # Return the length of the longest palindromic subsequence.\n    return max_palindrome",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 1580,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    h = 0\n    for i in range(1, n+1):\n        h += 1 / i\n    return h",
        "test": "assert harmonic_sum(0) == 0, \"harmonic_sum(0) should return 0\"",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create two sets of unique numbers from the two input arrays\n    unique_nums1 = set(array_nums1)\n    unique_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = unique_nums1.intersection(unique_nums2)\n\n    # Return the intersection as a list\n    return list(intersection)",
        "test": "assert intersection_array([1,2,3,4], [1,2,3,4]) == [1,2,3,4]",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert count_X((1,2,3,4,5), 3) == 1",
        "num_ids": 715,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n    result.insert(0, element)\n    return result",
        "test": "assert insert_element([],1) == [1]",
        "num_ids": 845,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    if not isinstance(numbers, list) or len(numbers)!= 2:\n        raise TypeError('Input must be a list containing two elements.')\n\n    real_part = numbers[0]\n    imaginary_part = numbers[1]\n\n    real_part = complex(real_part, 0)\n    imaginary_part = complex(0, imaginary_part)\n\n    magnitude = cmath.sqrt(real_part**2 + imaginary_part**2)\n    angle = cmath.phase(imaginary_part)\n\n    return [magnitude, angle]",
        "test": "assert convert(4 - 5j) == (4 - 5j, -2.83185)",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1,2,3,4,5]) == 5",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations of the elements of a list of length n,\n    with repetition. Returns a list of tuples.\n    '''\n    combinations = []\n    for comb in combinations_with_replacement(l, n):\n        comb_tuple = tuple(comb)\n        combinations.append(comb_tuple)\n    return combinations",
        "test": "assert combinations_colors([], 2) == []",
        "num_ids": 2077,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            n //= i\n    return count",
        "test": "assert count_Primes_nums(0) == 0",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2",
        "test": "assert maximize_elements( (10, 8), (5, 3) ) == (10, 8)",
        "num_ids": 1232,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def newman_prime(n):\n    '''\n    Returns the nth Newman-Shanks-Williams prime number.\n    '''\n    # Define a list of prime numbers up to n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n    # Check if n is prime\n    if n in primes:\n        return n\n\n    # Check if n is divisible by any prime number\n    for prime in primes:\n        if n % prime == 0:\n            return n\n\n    # If n is not prime or divisible by any prime number, n cannot be a prime number\n    return None",
        "test": "assert newman_prime(2) == 2",
        "num_ids": 2882,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n    Args:\n        test_tup1 (tuple): A tuple of elements that need to be divided\n        test_tup2 (tuple): Another tuple of elements that need to be divided\n\n    Returns:\n        tuple: The result tuple of element-wise division of the given tuples\n    \"\"\"\n\n    result_tuple = []\n\n    for i in range(len(test_tup1)):\n        result_tuple.append(test_tup1[i] / test_tup2[i])\n\n    return tuple(result_tuple)",
        "test": "assert division_elements(('a', 2), ('a', 1)) == [('a', 0)]",
        "num_ids": 1458,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    result1 = list1[:L]\n    result2 = list1[L:]\n    return (result1, result2)",
        "test": "assert split_two_parts([], 0) == ([], [])",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7",
        "test": "assert dog_age(0) == 0  # 0 is a valid input for h_age",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result",
        "test": "assert list_split([], 1) == []",
        "num_ids": 879,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # find the area of the cube\n    area = l*l*l\n    \n    # find the lateral surface area\n    lateral_surface = 2*area\n    \n    return lateral_surface",
        "test": "assert lateralsurface_cube(2) == 16",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "test": "assert square_Sum(10) == 165 # Correct answer",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    else:\n        return n * (find_star_num(n-1))",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return None",
        "test": "assert ascii_value(\"a\") == 97",
        "num_ids": 935,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:  # check if the current element is even\n            sum += arr[i]\n        elif i % 2 == 0:  # check if the current element is odd and even position\n            sum += arr[i]\n    return sum",
        "test": "assert sum_even_and_even_index([2,4,6,8,10]) == 30",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize a list to store the even natural numbers\n    even_numbers = []\n\n    # Loop through all numbers from 2 to the square root of n\n    for num in range(2, int(n**0.5) + 1):\n\n        # Check if the number is even\n        if num % 2 == 0:\n\n            # Check if the number is a factor of n\n            if num % n == 0:\n\n                # Check if the number is raised to the fifth power\n                if num ** 5 == n:\n\n                    # Add the number to the list of even numbers\n                    even_numbers.append(num)\n\n    # Calculate and return the sum of the even numbers\n    return sum(even_numbers)",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list",
        "test": "assert rear_extract([]) == [] # test empty list",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    subtraction_list = []\n    for i in range(len(test_tup1)):\n        subtraction_list.append(test_tup1[i] - test_tup2[i])\n\n    return subtraction_list",
        "test": "assert substract_elements((1,2,3),(1,1,1)) == (0,0,0) # no elements to subtract",
        "num_ids": 1250,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Calculate the binomial coefficients for all even numbers from 1 to n\n    binomial_coeffs = [math.factorial(i) // (math.factorial(i-1) * math.factorial(n-i)) for i in range(2, n+1, 2)]\n    # Return the sum of even binomial coefficients\n    return sum(binomial_coeffs[i] for i in range(len(binomial_coeffs)) if binomial_coeffs[i] % 2 == 0)",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1104,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Calculates the volume of a cylinder using the formula V = pi * r^2 * h\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume",
        "test": "assert volume_cylinder(1,1) == 3.14159",
        "num_ids": 553,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({'a': 5, 'b': 7, 'c': 2, 'd': 9}, 10) == {}",
        "num_ids": 1209,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count",
        "test": "assert count_first_elements(('hello', 'world', 'python')) == 1",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_num_decagonal(n):\n    num_decagonal = n * (3 * (n + 1) // 2 - 1)\n    return num_decagonal == int(num_decagonal)",
        "test": "assert is_num_decagonal(1) == 1, \"The first decagonal number is not 1.\"",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def sequential_search(dlist, item):\n    # Initialize the index variable to -1\n    index = -1\n    # Loop through the list and check if the item is equal to the current item\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            # If the item is found, return the index and True\n            index = i\n            return (True, index)\n    # If the item is not found, return the index and False\n    return (False, index)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 840,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 775,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def sub_list(nums1, nums2):\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[1,2,3]) == [0,0,0]",
        "num_ids": 610,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = {}\n    for digit in str(n):\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n\n    # Check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in frequency:\n        if frequency[digit] > 1:\n            return False\n\n    return True",
        "test": "assert validate(12121) == False",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    return False",
        "test": "assert check_element([1,2,3,4,5],6) == False",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(?=.*[ab]{2,})')\n    return pattern.match(text) is not None",
        "test": "assert text_match_two_three('pwwkew') == False",
        "num_ids": 2675,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize max sum to negative infinity\n    max_sum = float('-inf')\n\n    # Initialize current sum to the first element of the array\n    current_sum = a[0]\n\n    # Initialize remaining array\n    remaining = a[1:]\n\n    # Iterate through remaining array\n    for i in range(k):\n        # Update current sum to the maximum of current sum and current element plus the current sum of the remaining array\n        current_sum = max(a[i], current_sum + a[i], remaining[i])\n\n        # Update max sum if current sum is greater\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([-1, -2, -3, -4, -5], 4, 2) == -1",
        "num_ids": 1394,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Check if n is even\n    if n % 2 == 0:  \n        # Add the square of n to the sum\n        sum += n**2  \n        \n        # Keep adding squares of even natural numbers until n is no longer even\n        while n % 2 == 0:  \n            n += 2  \n            sum += n**2  \n    \n    else:  \n        # Add the square of n to the sum\n        sum += n**2  \n        \n    return sum",
        "test": "assert square_Sum(1) == 1**2",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length_list = []\n    for sublist in list1:\n        length = len(sublist)\n        if length > len(length_list):\n            length_list = sublist\n    return length_list",
        "test": "assert max_length([]) == []",
        "num_ids": 1472,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def count_no_of_ways(n, k):\n    # base case\n    if n == 0 or k == 0:\n        return 0\n\n    # recursive case\n    if n == 1:\n        return 1\n\n    # initialize variables\n    ways = 0\n    color = 1\n\n    # iterate over the remaining posts\n    for i in range(2, n+1):\n        ways += color * count_no_of_ways(n-i, k)\n        color = (color + 1) % k\n\n    return ways",
        "test": "assert count_no_of_ways(n=4, k=3) == 2",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return n\n    elif n % m == 0:\n        return n // m\n    else:\n        return find(n, m - 1)",
        "test": "assert find(10,5) == 2",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 293,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function will find the third side of a right angled triangle.\n    '''\n    if w == 0:\n        return h\n    elif h == 0:\n        return w\n    else:\n        return (w**2 + h**2)**0.5",
        "test": "assert otherside_rightangle(4,3) == 5",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return max(listval)",
        "test": "assert max_val([1,2,3,4,5]) == 5",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "test": "assert sum_div(0) == 0",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def get_Inv_Count(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n",
        "test": "assert get_Inv_Count([1, 3, 5, 2, 4]) == 3",
        "num_ids": 1087,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def flatten_list(lst):\n    # Flatten the nested list structure\n    flattened_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_lst.extend(flatten_list(item))\n        else:\n            flattened_lst.append(item)\n    return flattened_lst",
        "test": "assert flatten_list([]) == []",
        "num_ids": 952,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the maximum aggregate values\n    max_aggregate_dict = defaultdict(int)\n\n    # Loop through each tuple in the list\n    for tup in stdata:\n        # If the value is greater than the current maximum aggregate, update it\n        if tup[1] > max_aggregate_dict[tup[0]]:\n            max_aggregate_dict[tup[0]] = tup[1]\n\n    # Return the maximum aggregate value\n    return max(max_aggregate_dict.values())",
        "test": "assert max_aggregate([(\"Alice\", 50), (\"Bob\", 30), (\"Charlie\", 20), (\"Dave\", 40), (\"Eve\", 60)]) == 60",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize variables\n    count = 0\n    first = 0\n    last = 0\n\n    # Iterate through the range of n\n    for i in range(n):\n        # Check if the sum of the first n bits is same as the sum of the last n bits\n        if (first == last):\n            # Increment the count of binary sequences\n            count += 1\n        else:\n            # Reset the count of binary sequences and reset the first and last bits\n            count = 0\n            first = 0\n            last = 0\n\n    return count",
        "test": "assert count_binary_seq(3) == 3, \"The function should return 3 for the given input.\"",
        "num_ids": 1244,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = dict_depth(v) + 1\n        else:\n            depth = 1\n        max_depth = max(max_depth, depth)\n    return max_depth",
        "test": "assert dict_depth({}) == 0",
        "num_ids": 1025,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    # Check if the given index is within the specified ranges\n    if index >= ranges[0] and index <= ranges[1]:\n        # If yes, find the element at the given index after number of rotations\n        return arr[index]\n    # Otherwise, return None\n    else:\n        return None",
        "test": "assert find_Element([1,2,3,4,5], [2,4,6], [0,3,1], 2) == 3",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0].isalpha() and word[0].lower() == 'p':\n            p_words.append(word)\n    return p_words\n",
        "test": "assert start_withp(['dog', 'cat', 'elephant']) == ('cat', 'dog')",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    current_index = index\n\n    # Iterate through the array\n    for i in range(index, n):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_index = i\n\n    # Check if the kth element is also present in the maximum sum subsequence\n    if current_sum - k > 0 and current_sum + k < max_sum:\n        return max_sum\n\n    # If the kth element is not present in the maximum sum subsequence, return -1\n    return -1",
        "test": "assert max_sum_increasing_subseq(a, n, index, k) == expected_output, \\",
        "num_ids": 2172,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    tuplex: a tuple.\n    m: an integer.\n    n: an integer.\n\n    Returns:\n    A colon of the tuple.\n    '''\n    colon = [tuplex[i] for i in range(m) if i < n]\n    return colon",
        "test": "assert colon_tuplex((1, 2, 3),2,4) == (1, 2, 3)",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def largest_product(nums1, nums2, N):\n    '''\n    Find the N largest products from two given lists using one factor from each list.\n\n    Args:\n    nums1: list of integers\n    nums2: list of integers\n    N: int, number of largest products to find\n\n    Returns:\n    list of N largest products from nums1 and nums2, or [] if N is too small.\n    '''\n\n    # Check if N is too small\n    if N < 1:\n        return []\n\n    # Calculate the number of elements in nums1 and nums2\n    num_elements = len(nums1) + len(nums2)\n\n    # Initialize the result list with zeros\n    result = [0] * N\n\n    # Iterate over all elements of nums1 and nums2\n    for i in range(num_elements):\n        if i < len(nums1):\n            product1 = nums1[i] * nums1[i]\n        else:\n            product1 = 0\n\n        if i < len(nums2):\n            product2 = nums2[i] * nums2[i]\n        else:\n            product2 = 0\n\n        # Calculate the product of the two factors, and store it in the result list\n        result[i] = max(product1, product2)\n\n    # Return the result list\n    return result",
        "test": "assert large_product([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 16) == [32640, 21870, 16000, 12000, 8000]",
        "num_ids": 2193,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def maximum(a,b):\n    return a if a > b else b",
        "test": "assert maximum(3,5) == 5 # Test the correctness of the maximum function with the given values",
        "num_ids": 465,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"Python\") == ('P', 'y', 't', 'h', 'o', 'n')",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def set_left_most_unset_bit(n):\n    # check if n is positive\n    if n < 0:\n        return -1\n\n    # get the number of set bits in the binary representation of n\n    count = 0\n    while n > 0:\n        count += n % 2\n        n = n // 2\n\n    # set the leftmost unset bit at index 0\n    if count == 0:\n        return 0\n\n    # otherwise, add the first count - 1 bits to the left and return the result\n    return count - 1",
        "test": "assert set_left_most_unset_bit(0) == 0, \"The leftmost unset bit should be set to 0\"",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h/3.14159)",
        "test": "assert volume_cone(15,15) == 125.0, \"Incorrect volume calculation for cone with radius 15 and height 15.\"",
        "num_ids": 958,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # If n is 1 or 2, return 1\n    if n == 1 or n == 2:\n        return n\n\n    # Initialize a variable to keep track of the highest power of 2\n    highest_power_of_2 = 1\n\n    # Loop through all the numbers from 2 to n-1\n    for i in range(2, n+1):\n        # If the current number is a power of 2 and greater than the current highest power of 2, update the highest power of 2\n        if i & (i - 1) == 0 and highest_power_of_2 < i:\n            highest_power_of_2 = i\n\n    return highest_power_of_2",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 1077,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n < 1:\n        print(\"n must be a positive integer.\")\n        return\n    \n    if n == 1 or n == 2:\n        return n\n    \n    a = 1\n    b = 1\n    for i in range(3, n+1):\n        c = a + b\n        a = b\n        b = c\n    \n    return b",
        "test": "assert find_lucas(10) == 55",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def add_string(list_, string):\n    return [str(item) + string for item in list_]",
        "test": "assert add_string([], \"\") == []",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(l1)):\n        if i not in nested_dict:\n            nested_dict[i] = {}\n        for j in range(len(l2[i])):\n            if j not in nested_dict[i]:\n                nested_dict[i][j] = []\n            nested_dict[i][j].append(l3[i][j])\n    return nested_dict",
        "test": "assert convert_list_dictionary([1, 2], [3, 4, 5], [6, 7, 8]) == {'1': {'2': 3, '3': 6}, '2': {'4': 4, '5': 7}, '3': {'8': 8}}",
        "num_ids": 1447,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            for k in range(1, j+1):\n                for l in range(1, k+1):\n                    for m in range(1, l+1):\n                        for n in range(1, m+1):\n                            # Calculate the sum of the given equation f(n)\n                            sum_f_n = (i * j * k * l * m * n)\n                            # Check if the sum is greater than the current maximum sum\n                            if sum_f_n > max_sum:\n                                max_sum = sum_f_n\n    return max_sum",
        "test": "assert get_max_sum(400) == 2020, \"Incorrect value returned\"",
        "num_ids": 1636,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n\n    # Initialize a variable to store the maximum length of the input list\n    max_length = len(input_list[0])\n\n    # Loop through each element in the input list\n    for element in input_list:\n        # Update the maximum length if the current element is longer than the previous maximum length\n        if len(element) > max_length:\n            max_length = len(element)\n\n    # Return the list with the maximum length\n    return input_list[:max_length]",
        "test": "assert max_length_list([1,2,3,4,5,6,7,8,9,10]) == [10,9,8,7,6,5,4,3,2,1]",
        "num_ids": 988,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def check_distinct(test_tup):\n    '''\n    Check if a tuple contains no duplicates.\n\n    Args:\n        test_tup (tuple): A tuple to be checked.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    '''\n    return len(set(test_tup)) == len(test_tup)",
        "test": "assert check_distinct((\"apple\", \"banana\", \"orange\")) == True # True",
        "num_ids": 745,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create an empty dictionary to store the frequency of characters\n    freq = {}\n\n    # Iterate over the string and update the frequency of each character\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first non-repeating character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None",
        "test": "assert first_non_repeating_character(\"abc\") == \"a\"",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 1:\n        return string.isalpha()\n    else:\n        if re.search(regex, string[1:-1]):\n            return True\n        else:\n            return False",
        "test": "assert check_char('abcde') == False",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def median_numbers(a, b, c):\n    # create a list of the numbers\n    nums = [a, b, c]\n\n    # sort the list in ascending order\n    nums.sort()\n\n    # determine the number of elements in the list\n    n = len(nums)\n\n    # calculate the median\n    if n % 2 == 1:\n        median = nums[n // 2]\n    else:\n        median = (nums[n // 2 - 1] + nums[n // 2]) / 2\n\n    return median\n",
        "test": "assert median_numbers(0, 0, 0) == 0",
        "num_ids": 1674,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 874,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    # initialize the xor value to 0\n    xor_val = 0\n    \n    # loop through each element in the tuples and xor with the xor_val\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            xor_val ^= tup1 ^ tup2\n    \n    # return the xor_val\n    return xor_val",
        "test": "assert bitwise_xor((1,2,3,4), ()) == (1, 2, 3, 4)",
        "num_ids": 1887,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)\n",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)",
        "test": "assert add_nested_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)",
        "num_ids": 1280,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(1,2) == 1 # True",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False",
        "test": "assert check_tuplex( (1,2,3,4,5), (6,2,3,4,5) ) == False",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_Parity(x):\n    if x == 0:\n        return True\n    elif x % 2 == 0:\n        return find_Parity(x // 2)\n    else:\n        return find_Parity(x - 1)",
        "test": "assert find_Parity(3) == 1",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string and slice it to get the last two digits\n    last_two_digits = str(n)[-2:]\n    # add the last two digits to the start of the string\n    n_str = '0' + last_two_digits\n    # convert the string back to an integer and return it\n    return int(n_str)\n",
        "test": "assert rearrange_bigger(0) == 0",
        "num_ids": 2061,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # convert the list of numbers to a min heap\n    min_heap = []\n    for num in nums1 + nums2:\n        heapq.heappush(min_heap, num)\n\n    # extract k elements from the heap\n    pairs = []\n    for _ in range(k):\n        pair = heapq.heappop(min_heap)\n        pairs.append(pair)\n\n    return pairs",
        "test": "assert k_smallest_pairs([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 2) == [1, 2]",
        "num_ids": 2586,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def min_product_tuple(list1):\n    '''\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Parameters:\n    list1 (list): A list of tuples containing integers.\n\n    Returns:\n    int: The minimum product of all pairs of tuples within the given list.\n    '''\n\n    # Sort the list of tuples in ascending order based on the first element of each tuple\n    list1.sort(key=lambda x: x[0])\n\n    # Initialize the minimum product to the first element of the first tuple\n    min_product = list1[0][1]\n\n    # Iterate over the remaining tuples and calculate the product of their first two elements\n    for i in range(1, len(list1)):\n        min_product = min(min_product, list1[i][0] * list1[i][1])\n\n    return min_product",
        "test": "assert min_product_tuple([1, -2, 3, -4, 5]) == -12",
        "num_ids": 1298,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return min(listval)",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    # convert snake case string to camel case string\n    pattern = re.compile(r'_(\\w)')\n    return re.sub(pattern, lambda m: m.group(1).upper(), word)",
        "test": "assert snake_to_camel(\"snake_case_string\") == \"snakeCaseString\"",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list",
        "test": "assert remove_odd([]) == []",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return None\n    else:\n        return list1[n-1]",
        "test": "assert extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 3) == ('c', 3)",
        "num_ids": 934,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3,4,5], [2,4,6,8,10]) == True",
        "num_ids": 610,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def max_Product(arr):\n    arr.sort()\n    max_product = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        max_product = max(max_product, arr[i] * arr[i-1])\n    return max_product\n",
        "test": "assert max_Product([1, 2, 3]) == 6",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize a dictionary to store the count of each first element in the list\n    count = {}\n    # Loop through each tuple in the list and add the first element to the count dictionary\n    for tup in Input: \n        if tup[0] in count: \n            count[tup[0]] += 1\n        else: \n            count[tup[0]] = 1\n    # Find the first element with the highest count\n    max_count = 0\n    max_element = None\n    for key, value in count.items(): \n        if value > max_count: \n            max_count = value \n            max_element = key\n    return max_element",
        "test": "assert group_tuples([('apple', 1), ('banana', 2), ('apple', 3), ('orange', 4), ('apple', 5)]) == [('apple', 1), ('banana', 2)]",
        "num_ids": 1418,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n\n    return max_element",
        "test": "assert Find_Max([1, 2, 3, 4]) == 4, \"Error: Invalid input.\"",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(\"Total sum:\", total_sum, \"multiplied by length of the list:\", len(list1))",
        "test": "assert round_and_sum([1.1,2.2,3.3,4.4,5.5]) == 22.25",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1, 2):\n        result += i * i * i\n    return result",
        "test": "assert cube_Sum(1) == 1",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for item in test_tup:\n        result += item\n    return result",
        "test": "assert concatenate_tuple('test') == 'test'",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n        \n    average = total/count\n    \n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1.0",
        "num_ids": 610,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for i in range(len(test_tuple)):\n        print(test_tuple[i])",
        "test": "assert extract_rear(('a', 'b', 'c', 'd', 'e')) == ('d',)",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if sublist == x:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, 4, 5], 6) == 0",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert filter_oddnumbers([]) == []",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Extract the date portion of the string\n    date_str = dt.split()[0]\n    \n    # Replace the hyphen with a space\n    date_str = re.sub('-','', date_str)\n    \n    # Extract the month and day from the date string\n    month, day = date_str.split('-')\n    \n    # Return the result as a string in dd-mm-yyyy format\n    return f\"{day}-{month}-{dt.split()[1]}\"",
        "test": "assert change_date_format('2021-12-32') == '32-12-2021'",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # Traverse through all array elements\n    for i in range(n):\n        # One by one swap the elements\n        # that are smaller than it\n        # using the gap of 2.\n        for gap in range(n-i-1, n, 2):\n            # Traverse through the array elements\n            # one by one\n            for j in range(gap, n):\n                # If the current element is greater\n                # than the swapped element\n                # then swap them\n                if my_list[j] < my_list[j-gap]:\n                    my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n    return my_list",
        "test": "assert shell_sort([]) == []",
        "num_ids": 1326,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # get the length of the two tuples\n    len_t1 = len(test_tup1)\n    len_t2 = len(test_tup2)\n\n    # initialize a new tuple to store the elementwise and tuples\n    result = tuple()\n\n    # loop through each element of the two tuples\n    for i in range(len_t1):\n        # if the i-th element of both tuples is equal, append it to the result tuple\n        if test_tup1[i] == test_tup2[i]:\n            result = result + (test_tup1[i],)\n\n    # loop through each element of the two tuples\n    for i in range(len_t2):\n        # if the i-th element of both tuples is not equal to the first element of the result tuple, append it to the result tuple\n        if test_tup2[i]!= test_tup1[0]:\n            result = result + (test_tup2[i],)\n\n    return result",
        "test": "assert and_tuples((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = (b*b - 4*a*c) ** 0.5\n    return d",
        "test": "assert parabola_directrix(0, 1, -1) == 1.0",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1).intersection(list2)) > 0:\n        return True\n    else:\n        return False",
        "test": "assert common_element([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == True",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2)\n\n    # calculate the distance from the center of the trapezium\n    center_distance = 0.5 * (base1 + base2 + height)\n\n    # find the median length\n    if area > 0:\n        if height > 0:\n            median = height\n        else:\n            median = center_distance\n    elif area < 0:\n        if height > 0:\n            median = 0\n        else:\n            median = center_distance\n    else:\n        if height > 0:\n            median = base1 + base2\n        else:\n            median = center_distance\n\n    return median",
        "test": "assert median_trapezium(2,3,4) == 4",
        "num_ids": 1252,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3], 3) == False",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba\\b'  # match one a followed by one or more b's\n    match = re.search(pattern, text)  # search for the first occurrence of the pattern in the string\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one(\"abababbb\") == False",
        "num_ids": 1641,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 705,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def neg_nos(list1):\n    '''\n    This function returns a list of the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1, -2, 3, -4, 5]) == [1, -2, -3, -4, -5]",
        "num_ids": 624,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and removes the odd characters from it.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        else:\n            new_str = \"\"\n            break\n    return new_str\n",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 707,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 945,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "test": "assert multiple_to_single([]) == 0",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes in a sentence as input and returns a tuple containing the first adverb and its position in the sentence.\n    '''\n\n    # Use regular expression to extract all the adverbs from the sentence\n    adverbs = re.findall(r\"(?i)\\b(?:am|is|were|have|has|had|do|does|did|will|could|couldnt|should|shouldnt|may|might|must)\\b\", text)\n\n    # Check if there are any adverbs found\n    if len(adverbs) == 0:\n        return None\n\n    # Find the index of the first adverb found\n    first_adverb_index = adverbs[0].start()\n\n    # Return a tuple containing the first adverb and its position in the sentence\n    return (text[first_adverb_index:first_adverb_index + len(\"adv.\")], first_adverb_index)\n",
        "test": "assert find_adverb_position(\"The quick brown fox slept the lazy dog.\") == (5, \"slept the lazy dog.\")",
        "num_ids": 2344,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l * l * l",
        "test": "assert surfacearea_cube(4) == 64",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Find the ration of positive numbers in an array of integers.\n    '''\n\n    # initialize a dictionary to store the count of positive numbers\n    count_dict = {}\n\n    # iterate over the array and increment the count in the dictionary\n    for num in nums:\n        if num > 0:\n            count_dict[num] = count_dict.get(num, 0) + 1\n\n    # calculate the ration of positive numbers\n    ration = 0.0\n    for num in count_dict:\n        if count_dict[num] > 0:\n            ration += count_dict[num] / len(nums)\n\n    return ration",
        "test": "assert positive_count([1]) == 1",
        "num_ids": 1056,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1: \n        if num < 0: \n            if num > largest: \n                largest = num\n    return largest",
        "test": "assert largest_neg([5, 2, -3, 1, 6]) == -3",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for t in test_list:\n        if len(t) <= K:\n            new_list.append(t)\n        else:\n            new_list.append(t[:K])\n    return new_list",
        "test": "assert trim_tuple([1,2,3,4,5], 4) == (1, 2)",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 1052,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    return counter",
        "test": "assert count_Occurrence((1,2,3,4,5), [1,2,3,4,5]) == Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1})",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    a = 1\n    b = 1\n    c = 0\n\n    for i in range(n):\n        c = a + b\n        total += c\n        a = b\n        b = c\n\n    return total",
        "test": "assert cal_sum(2) == 5, \"The sum of perrin numbers 2 is not equal to 5\"",
        "num_ids": 1675,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts a list of strings of size'size' from a list of string values.\n    '''\n    return str_list[:size]",
        "test": "assert extract_string(\"hello world\", [\"hello\", \"world\", \"goodbye\"]) == [\"hello\", \"world\"]",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1",
        "test": "assert remove_whitespaces(\"\") == \"\"",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount <= actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(50,100) == 0",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def sumofFactors(n):\n    even_sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            even_sum += 2\n        i += 1\n    return even_sum",
        "test": "assert sumofFactors(15) == 61 ",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Matches a word containing 'z' in a given text string.\n\n    Returns True if a match is found, False otherwise.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\b')\n    return bool(pattern.search(text))",
        "test": "assert text_match_wordz(\"This is a test z\") is True",
        "num_ids": 712,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if it contains 31 days, and False otherwise.\n    '''\n    if monthnum % 4 == 0 and (monthnum % 100!= 0 or monthnum % 400 == 0):\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(2) == False, \"The given month number should not contain 31 days\"",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list([]) == []",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def Find_Min(lst):\n    n = len(lst)\n    min_len = n\n    min_sublist = []\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist",
        "test": "assert Find_Min([1,2,3,4,5]) == [1]",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b",
        "test": "assert rectangle_area(5, 10) == 50",
        "num_ids": 429,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('^.*[A-Z].*')\n    return pattern.sub('', str1)",
        "test": "assert remove_uppercase('1234567890') == '1234567890'",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i])\n    return result",
        "test": "assert Extract([]) == []",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([char for char in str if char.isupper()])",
        "test": "assert upper_ctr(\"\") == 0",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    def recursive_combinations(lst, i, res):\n        if i == len(lst):\n            res.append(''.join(lst))\n        else:\n            for j in range(i, len(lst)):\n                recursive_combinations(lst, j+1, res)\n\n    res = []\n    recursive_combinations(list1, 0, res)\n    return res",
        "test": "assert combinations_list([1,2,3,4,5,6,7]) == [[1,2,3,4,5,6,7], [1,2,4,3,5,6,7], [1,3,2,4,5,6,7], [1,3,4,2,5,6,7], [1,4,2,3,5,6,7], [1,4,3,2,5,6,7], [2,1,3,4,5,6,7], [2,1,4,3,5,6,7], [2,3,1,4,5,6,7], [2,3,4,1,5,6,7], [2,4,1,3,5,6,7], [2,4,3,1,5,6,7], [3,1,2,4,5,6,7], [3,1,4,2,5,6,7], [3,4,1,2,5,6,7], [3,4,2,1,5,6,7]]",
        "num_ids": 2643,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def max_subarray_product(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far",
        "test": "assert max_subarray_product([1]) == 1",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.keys())!= len(set(dict.values())):\n        return False\n    else:\n        return True",
        "test": "assert check_value({}, 3) == True",
        "num_ids": 1004,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}",
        "test": "assert drop_empty({'a':1}) == {'a':1}",
        "num_ids": 712,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_product(arr):\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product *= arr[i]\n    return max_product",
        "test": "assert max_product([1, 1, 1]) == 1",
        "num_ids": 1656,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum and count variables\n    sum_left = 0\n    count_left = 0\n    sum_right = 0\n    count_right = 0\n\n    # Traverse through the tuple\n    for element in test_tup:\n        # Update the sum and count for the left element\n        sum_left += element\n        count_left += 1\n\n        # Update the sum and count for the right element\n        sum_right += element\n        count_right += 1\n\n    # Calculate the average of the two sums\n    average_sum = (sum_left + sum_right) / 2\n\n    # Find the sum of the average of the two sums\n    total_sum = sum(sum_left for i in range(count_left)) + sum(sum_right for i in range(count_right))\n\n    # Calculate the average of the two sums\n    average_total_sum = total_sum / (count_left + count_right)\n\n    # Print the result\n    print(\"The pairwise addition of the neighboring elements of the given tuple is:\", average_total_sum)",
        "test": "assert add_pairwise(('hello', 'world', 'python', 'apple', 'banana', 'cherry')) == ('hello', 'world', 'python', 'apple', 'banana', 'cherry')",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    product %= n\n    return product",
        "test": "assert find_remainder([1, 2, 3], 1) == 0",
        "num_ids": 837,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers or not.\n    If the list contains consecutive numbers, it returns True, else it returns False.\n    '''\n    # Check if the list is empty or contains only one element\n    if len(l) <= 1:\n        return True\n    \n    # Initialize a variable to keep track of the current element\n    current = l[0]\n    \n    # Iterate over the list and check if the current element is equal to the next element\n    for i in range(1, len(l)):\n        if l[i] == current + 1:\n            # If the current element is equal to the next element, the list is consecutive\n            return True\n        elif l[i]!= current + 1:\n            # If the current element is not equal to the next element, the list is not consecutive\n            return False\n        \n    # If the loop completes without finding a pair of consecutive elements, the list is not consecutive\n    return False\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n    test_list1 (list): The first tuple list.\n    test_list2 (list): The second tuple list.\n\n    Returns:\n    list: A list containing the tuple intersection of the given lists.\n    '''\n\n    # Convert the test_list1 and test_list2 into sets so that we can perform a set intersection\n    test_list1_set = set(test_list1)\n    test_list2_set = set(test_list2)\n\n    # Convert the sets back to tuples and return the intersection as a list\n    return list(test_list1_set.intersection(test_list2_set))",
        "test": "assert tuple_intersection([], []) == []",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"Hello World\", \"Z\", \"O\") == \"Hello World\"",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)",
        "test": "assert sort_counter({'apple': 2, 'banana': 1, 'cherry': 3, 'date': 4, 'elderberry': 5}) == {'elderberry': 5, 'cherry': 3, 'date': 4, 'banana': 1, 'apple': 2}",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables to store the largest and smallest values\n    max_val = nums[0]\n    min_val = nums[0]\n\n    # Loop through the array and update the maximum and minimum values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n\n    # Return the sum of the maximum and minimum values\n    return max_val + min_val",
        "test": "assert big_sum([1,2,3,4,5]) == 15",
        "num_ids": 1125,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"hello\") == \"hello\"",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string using regular expressions.\n    '''\n    pattern = re.compile(r'(?<!\\w)[a-z]+(?!\\w)')\n    return pattern.sub('', str1)",
        "test": "assert remove_lowercase(\"12345\") == \"12345\"",
        "num_ids": 1594,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = 0\n    if n >= 0:\n        first_digit = n % 10\n    return first_digit",
        "test": "assert first_Digit(0) == 0 # Test 3",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for number in list: \n        if number % 2 == 1: \n            odd_numbers.append(number)\n    return odd_numbers ",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Define a list of natural numbers\n    nums = [x**3 for x in range(1, n+1)]\n\n    # Calculate the sum of cubes\n    cube_sum = sum(nums)\n\n    # Calculate the sum of natural numbers\n    natural_sum = sum(nums)\n\n    # Calculate the difference\n    difference = cube_sum - natural_sum\n\n    return difference",
        "test": "assert difference(0) == 0",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 1 : \n                count += 1\n                break\n    return count",
        "test": "assert find_Odd_Pair([1, 2, 3, 4, 5], 5) == 2",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result",
        "test": "assert toggle_string(\"abcdefg\") == \"ABCDEFG\"",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    result = 0\n    for i in range(10):\n        if n1 % (10**i)!= n2 % (10**i):\n            result += abs(n1 // (10**i))\n            result += abs(n2 // (10**i))\n    return result",
        "test": "assert digit_distance_nums(12345, 12345) == 0",
        "num_ids": 1356,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size == 1:\n        return a[0]\n\n    # Initialize the max subarray sum and its start index\n    max_sum = float('-inf')\n    max_start = 0\n\n    # Calculate the sum of each subarray\n    subarray_sum = sum(a[i:i+size])\n\n    # Loop through the remaining elements in the list\n    for i in range(size):\n        # Update the max subarray sum and its start index\n        subarray_sum += a[i]\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n            max_start = i\n\n        # Update the sum of the current subarray\n        subarray_sum = sum(a[i:i+size])\n\n    # Return the max subarray sum\n    return max_sum",
        "test": "assert max_sub_array_sum([1], 1) == 1",
        "num_ids": 1424,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # create a set from the given tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # union the sets and convert to a list for sorted output\n    union_set = set1.union(set2)\n    union_list = sorted(list(union_set))\n    \n    return union_list",
        "test": "assert union_elements((), (1, 2, 3)) == sorted((1, 2, 3))",
        "num_ids": 1046,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length",
        "test": "assert Find_Max_Length([1,2,3,4,5]) == 5",
        "num_ids": 988,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None",
        "test": "assert extract_values(\"Hello, world!\") == [\"Hello\", \"world\"]",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    # Count the number of elements in the list\n    num_elements = len(arr)\n\n    # Initialize two counters to keep track of the number of pairs\n    num_pairs_one = 0\n    num_pairs_two = 0\n\n    # Traverse through the list of elements\n    for i in range(num_elements):\n\n        # Check if the current element is greater than the next element\n        if i < num_elements - 1 and arr[i] > arr[i+1]:\n\n            # If the current element is greater than the next element, increment the number of pairs where both elements are unequal\n            if arr[i]!= arr[i+1]:\n                num_pairs_one += 1\n\n        # Check if the current element is less than the previous element\n        if i > 0 and arr[i] < arr[i-1]:\n\n            # If the current element is less than the previous element, increment the number of pairs where both elements are unequal\n            if arr[i]!= arr[i-1]:\n                num_pairs_two += 1\n\n    # Return the sum of the counters\n    return num_pairs_one + num_pairs_two",
        "test": "assert count_Pairs([1,2,3,4,5], 6) == 0",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()",
        "test": "assert split(\"hello world\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"]",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 566,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_of_digits = 0\n    while n > 0:\n        digit = n % 10\n        sum_of_digits += digit\n        n //= 10\n    return sum_of_digits",
        "test": "assert sum_digits(123) == 6 # sum of the digits is 6",
        "num_ids": 1266,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def issort_list(lst):\n    '''\n    Function to check whether a list is sorted or not.\n    '''\n    if len(lst) == 1:\n        return True\n\n    # Traverse through each element of the list\n    for i in range(1, len(lst)):\n\n        # If the current element is greater than the next element,\n        # then the list is not sorted\n        if lst[i] > lst[i - 1]:\n            return False\n\n    # If we reach here, then the list is sorted\n    return True\n",
        "test": "assert issort_list([5, 8, 3, 2, 1]) == False # Sorts the list [1, 2, 3, 5, 8]",
        "num_ids": 1047,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def sort_sublists(list1):\n    '''\n    Sort each sublist of strings in a given list of lists.\n\n    Parameters:\n    list1 (list): A list of lists, each containing strings.\n\n    Returns:\n    list: A list of sorted sublists.\n    '''\n\n    # Check if the list is empty\n    if not list1:\n        return []\n\n    # Find the length of the longest sublist\n    max_length = len(list1[0])\n\n    # Create an empty list to hold the sorted sublists\n    sorted_sublists = []\n\n    # Iterate over each sublist of strings in the list\n    for sublist in list1:\n        # Check if the length of the current sublist is greater than the maximum length\n        if len(sublist) > max_length:\n            # Remove the last sublist and add it to the beginning of the sorted sublists list\n            sorted_sublists = [sublist[i:] for i in range(len(sublist))] + sorted_sublists\n            # Reset the maximum length to the length of the current sublist\n            max_length = len(sublist)\n        # If the length of the current sublist is equal to or less than the maximum length,\n        # append it to the beginning of the sorted sublists list\n        else:\n            sorted_sublists.append(sublist)\n\n    # Return the sorted sublists list\n    return sorted_sublists",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['date', 'elderberry', 'fig'], ['grape', 'honeydew', 'ice'], ['kiwi', 'lemon','mango']]) == [['apple', 'banana', 'cherry'], ['date', 'elderberry', 'fig'], ['grape', 'honeydew', 'ice'], ['kiwi', 'lemon','mango']]",
        "num_ids": 1200,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    return list(unique_nums)",
        "test": "assert two_unique_nums([1, 2, 3, 2, 4]) == [1, 2, 3, 4]",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create an empty set to store unique numbers\n    unique_numbers = set()\n\n    # iterate through the list and add unique numbers to set\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.add(num)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product",
        "test": "assert unique_product([]) == 1  # Test 4",
        "num_ids": 945,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h",
        "test": "assert surfacearea_cylinder(3,1) == 28.918, \"Error: surfacearea_cylinder() has not been implemented correctly.\"",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n\n    Parameters:\n    A (list): The list to check.\n    B (list): The list to check if it is a sublist of A.\n\n    Returns:\n    bool: True if A is a sublist of B, False otherwise.\n    \"\"\"\n\n    if len(B) > len(A):\n        return False\n\n    # Check if A is a sublist of B\n    for i in range(len(B)):\n        if B[i]!= A[i]:\n            return False\n\n    return True",
        "test": "assert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5]) == True",
        "num_ids": 1158,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 10:\n        return n\n\n    factorial = 1\n    for i in range(1, int(n/10)+1):\n        factorial *= i\n    \n    last_digit = n % 10\n    \n    return last_digit",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def interleave_lists(*args):\n    flat_list = []\n    for lst in args:\n        for item in lst:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert interleave_lists([],[],[]) == []",
        "num_ids": 1350,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for tup in test_tup1:\n        if tup not in test_tup2:\n            dissimilar.append(tup)\n    for tup in test_tup2:\n        if tup not in test_tup1:\n            dissimilar.append(tup)\n    return dissimilar",
        "test": "assert find_dissimilar((1,2,3), (1,2,3)) == []",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def even_ele(test_tuple, even_fnc):\n    # Convert the mixed tuple to a list of lists\n    test_list = [sub_list for sub_list in test_tuple]\n\n    # Remove uneven elements from the nested list\n    even_list = [even_fnc(sub_list) for sub_list in test_list]\n\n    # Convert the list back to a mixed tuple\n    even_tuple = tuple(even_list)\n\n    return even_tuple",
        "test": "assert even_ele((1, 2, 3, 4, 5), lambda x: x % 2!= 0) == (2, 4, 6)",
        "num_ids": 1616,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s",
        "test": "assert surface_Area(3,4) == 24, \"surface_Area(3,4) failed\"",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth Catalan number.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Number must be a non-negative integer.\")\n\n    catalan = 1\n    for i in range(2, num + 1):\n        catalan *= (i - 1) / i\n\n    return catalan",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b(?:\\w+ly|ly(?![aeiouy])\\b)', text)\n    for i, adverb in enumerate(adverbs):\n        if adverb.endswith('ly'):\n            return (adverb, i)\n    return None\n\ntext = \"I love to lie down and lie down.\"\nadverb, pos = find_adverbs(text)\nif adverb:\n    print(f\"The adverb '{adverb}' ends at position {pos}.\")\nelse:\n    print(\"No adverb found.\")",
        "test": "assert find_adverbs(\"The weather was nice in New York.\") == \"weather\"",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item[0] for item in heap]",
        "test": "assert expensive_items(['apple', 'banana', 'cherry', 'date', 'elderberry'], 5) == ['apple', 'banana', 'cherry', 'date', 'elderberry']",
        "num_ids": 1217,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]",
        "test": "assert split_Arr([], 2) == []",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def list_tuple(lst):\n    '''\n    Function to convert a list to a tuple.\n    '''\n    return tuple(lst)",
        "test": "assert list_tuple([]) == ()",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # find the difference between the largest and smallest values\n    diff = max_val - min_val\n    \n    return diff",
        "test": "assert big_diff([1,2,3,4,5]) == 4",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    for i in range(a, b+1):\n        if i*i == i:\n            count += 1\n            print(i)\n    return count\n\nprint(perfect_squares(1, 10)) # Output: 25, 36, 49, 64, 81, 100",
        "test": "assert perfect_squares(1, 1) == 1",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to radians\n    r = x*cmath.cos(y)\n    theta = y*cmath.sin(x)\n\n    # Convert the polar coordinates to rectangular coordinates\n    rect_x = r*cmath.cos(theta)\n    rect_y = r*cmath.sin(theta)\n\n    # Return the rectangular coordinates\n    return rect_x, rect_y",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 820,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Check if the list has only one element\n    if len(newList) == 1:\n        return newList\n\n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 958,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_of_binomial = 0\n    for i in range(1,n+1): \n        if i <= k: \n            sum_of_binomial += (n-i+1) * binomial(i,k)\n        else: \n            sum_of_binomial += (i-k) * binomial(n-i+1,k)\n    return sum_of_binomial \n\ndef binomial(n, k): \n    '''\n    Write a python function to find the value of the nth binomial coefficient.\n    '''\n    if n == 0 or k == 0: \n        return 1\n    if k == 1: \n        return n\n    if k == n: \n        return 1\n    if n <= k: \n        return binomial(n-1, k)\n    else: \n        return binomial(n, k-1) * (n-k+1)",
        "test": "assert binomial_Coeff(5,3) == 15",
        "num_ids": 2312,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # get rid of leading zeros\n    ip = re.sub(r'^0+', '', ip)\n    return ip",
        "test": "assert removezero_ip(\"123.456.789.0\") == \"123.456.789.0\"",
        "num_ids": 1052,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Initialize variables to store the count of even and odd numbers in the list\n    count_even = 0\n    count_odd = 0\n\n    # Loop through each element of the list\n    for element in list1:\n\n        # If the element is even, increment the count of even numbers\n        if element % 2 == 0:\n            count_even += 1\n\n        # If the element is odd, increment the count of odd numbers\n        else:\n            count_odd += 1\n\n    # Return the difference of the two counts\n    return count_odd - count_even",
        "test": "assert diff_even_odd([]) == 0",
        "num_ids": 1416,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def min_Swaps(str1,str2) : \n    # Count the number of swaps required to convert string1 to string2\n    swaps = 0 \n    # Loop through each character in string1\n    for i in range(len(str1)): \n        # If the character in string1 is not equal to the character in string2, increment swaps\n        if str1[i]!= str2[i]: \n            swaps += 1 \n    # Return the minimum number of swaps required to convert string1 to string2\n    return swaps ",
        "test": "assert min_Swaps(\"1111\", \"1111\") == 0",
        "num_ids": 2450,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if not isinstance(tuple_list, tuple):\n        print(\"Error: Input is not a tuple.\")\n        sys.exit(1)\n    total_size = 0\n    for item in tuple_list:\n        if isinstance(item, tuple):\n            total_size += tuple_size(item)\n        elif isinstance(item, list):\n            for i in range(len(item)):\n                total_size += tuple_size((item[i], ))\n        elif isinstance(item, (int, float, str)):\n            total_size += 8\n    return total_size",
        "test": "assert tuple_size(()) == 0, \"tuple_size(()) == 0\"",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # sort the arrays\n    arr1.sort()\n    arr2.sort()\n\n    # find the kth element from the sorted arrays\n    kth_element = arr2[k - 1]\n\n    return kth_element",
        "test": "assert find_kth([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 4) == 7",
        "num_ids": 1248,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def armstrong_number(number):\n    '''\n    This function checks whether the given number is armstrong or not.\n    '''\n    # Create a string of the given number\n    num_str = str(number)\n    \n    # Convert the string to int and then to str again to remove the sign\n    num_str = str(int(num_str))\n    \n    # Initialize the variable to hold the sum\n    sum = 0\n    \n    # Loop through each digit of the number\n    for digit in num_str:\n        # Convert the digit to int and add it to the sum\n        sum += int(digit)\n        \n    # Compare the sum of digits with the original number\n    if sum == number:\n        # The number is armstrong\n        return True\n    else:\n        # The number is not armstrong\n        return False",
        "test": "assert armstrong_number(123456789) == False",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # Loop through the first n natural numbers\n    for i in range(1, number + 1):\n        # Add each number to sum and increment count\n        sum += i\n        count += 1\n\n    # Calculate and return the sum and average\n    avg = sum / count\n    return sum, avg\n",
        "test": "assert sum_average(100) == 550, \"Function should return the correct sum and average of the first 100 natural numbers.\"",
        "num_ids": 841,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store the frequency of each character\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # loop through the dictionary and find the first character that has a count of 2 or more\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # if no character has a count of 2 or more, return None\n    return None",
        "test": "assert first_repeated_char(\"abba\") == \"a\"",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        lucid_numbers.append(i)\n        if i % 2 == 0:\n            lucid_numbers.append(i * i)\n    return lucid_numbers",
        "test": "assert get_ludic(0) == []",
        "num_ids": 2498,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Convert the string to lowercase and split it into words\n    words = s.lower().split()\n    # Reverse the order of the words and join them back together with spaces\n    reversed_words = \" \".join(words[::-1])\n    # Return the reversed string\n    return reversed_words",
        "test": "assert reverse_words(\"Was it a car or a cat I saw?\") == \"yes, it was a car I saw\"",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is 1 or less\n    if num <= 1:\n        return False\n\n    # Check if the number is 2 or less\n    elif num == 2:\n        return True\n\n    # Check if the number is odd\n    else:\n        # Check if the number is divisible by any number between 2 and the square root of the number\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        # If the number is not divisible by any number, it is a prime number\n        return True",
        "test": "assert prime_num(2) == True, \"The number 2 is not prime.\"",
        "num_ids": 723,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)",
        "test": "assert radian_degree(0) == 0.0",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npattern = r\"the|quick|brown|fox|jumps\"\nresult = find_literals(text, pattern)\nif result:\n    print(f\"Match found at index {result[1]}: {text[result[1]:result[2]]}\")\nelse:\n    print(\"Match not found\")",
        "test": "assert find_literals(\"Hello World!\", r\"world\") == (None, None, None)",
        "num_ids": 1116,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def bell_Number(n): \n    '''\n    Function to find nth bell number.\n    '''\n    bell = 1\n    for i in range(n):\n        bell *= 2\n    return bell",
        "test": "assert bell_Number(25) == 130",
        "num_ids": 2618,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L\n    new_list = []\n    for i in range(n):\n        if i!= k-1:\n            new_list.append(list1[i])\n    return new_list",
        "test": "assert remove_kth_element([], 1) == []",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def max_of_nth(test_list, N):\n    max_val = float('-inf')\n    max_index = -1\n    \n    for i in range(len(test_list)):\n        row = test_list[i]\n        col = [test_list[j][i] for j in range(len(test_list))]\n        max_col = max(col)\n        \n        if max_col > max_val:\n            max_val = max_col\n            max_index = i\n            \n    if max_index == -1:\n        return None\n    \n    return max_val",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6]], 2) == 5",
        "num_ids": 1204,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) == 2:\n            result.append([sublist[0], sublist[1]])\n        else:\n            result.append(sublist)\n    return result",
        "test": "assert merge([[1,2],[3,4]]) == [[1, 2], [3, 4]]",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = []\n    for i in range(len(test_list)):\n        cumulative_sum.append(test_list[i])\n    return cumulative_sum",
        "test": "assert cummulative_sum([1]) == [1]",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if len(nums) == 0:\n        return []\n    else:\n        averages = []\n        for i in range(len(nums)):\n            if isinstance(nums[i], tuple):\n                sum_tuple = 0\n                for j in range(len(nums[i])):\n                    sum_tuple += nums[i][j]\n                averages.append(sum_tuple / len(nums[i]))\n            else:\n                averages.append(nums[i])\n        return averages",
        "test": "assert average_tuple(()) == []",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if both tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n    \n    # Create a new tuple to store the result\n    result_tup = ()\n    \n    # Calculate the modulo of each tuple element\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] % test_tup2[i])\n    \n    return result_tup",
        "test": "assert tuple_modulo((1, 2, 3, 4, 5), (2, 3, 4, 5, 6)) == (0, 1, 2, 3, 4)",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def min_Jumps(steps, d):\n    n = 0\n    jumps = 0\n    for i in range(steps):\n        n += 1\n        if d - i >= 0:\n            jumps += 1\n    return jumps",
        "test": "assert min_Jumps(5, 3) == 4, \"The function should return 4 for length 5 and distance 3\"",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def div_list(nums1, nums2):\n    result = []\n    for i in range(len(nums1)):\n        if len(nums2) == 0:\n            return \"Empty list\"\n        else:\n            result.append(nums1[i] / nums2[0])\n            nums2 = nums2[1:]\n    return result",
        "test": "assert div_list([1,2,3,4,5], [1,2,3,4,5]) == [1,1,1,1,1]",
        "num_ids": 837,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace('.', '')\n    return test_str",
        "test": "assert move_num(\"\") == \"\"",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def largest_subset(a):\n    # Create a list of all numbers in the input list a\n    numbers = list(set(a))\n    # Initialize a variable to store the largest subset size\n    largest_size = 0\n    # Iterate through each pair of numbers in the list\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            # Check if the sum of the two numbers is divisible by 2\n            if (numbers[i] + numbers[j]) % 2 == 0:\n                # Update the largest subset size if the current subset size is greater\n                if largest_size < len(numbers)-i-j:\n                    largest_size = len(numbers)-i-j\n    return largest_size",
        "test": "assert largest_subset([1, 2, 3]) == 1",
        "num_ids": 1470,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # find the midpoint of arr1 and arr2\n    mid = n // 2\n\n    # check if arr1 has more elements than arr2\n    if len(arr1) > len(arr2):\n        # if so, return the element at the midpoint of arr1\n        return arr1[mid]\n\n    # if not, return the element at the midpoint of arr2\n    return arr2[mid]\n",
        "test": "assert get_median([1], [1], 1) == 1, \"get_median([1], [1], 1) should return 1 for a list with only one element.\"",
        "num_ids": 1601,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the nth power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3,4,5],3) == [1,8,27,64,125] # nth_nums(nums, n)",
        "num_ids": 857,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if it is in uppercase, otherwise, it returns False.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False",
        "test": "assert is_upper(\"HELLO WORLD\") == True",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # get the length of the list\n    length = len(newList)\n\n    # if the list has only one element, return it\n    if length <= 1:\n        return newList\n\n    # get the first and last elements of the list\n    first_elem = newList[0]\n    last_elem = newList[length-1]\n\n    # swap the first and last elements of the list\n    newList[0] = last_elem\n    newList[length-1] = first_elem\n\n    # return the modified list\n    return newList",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    s = 1\n    while True:\n        area = (1/3) * (s * (s + r))\n        if area >= 4 * r:\n            return area\n        s += 1\n",
        "test": "assert triangle_area(4) == 20, \"The area of the triangle with base of length 4 and height 3 is incorrect.\"",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    # Find the smallest missing number\n    missing_num = array[end] + 1\n    \n    # Find the first missing number that is greater than the smallest missing number\n    for i in range(start, end+1):\n        if i == missing_num:\n            continue\n        else:\n            return i\n    \n    # If all numbers are missing, return the smallest missing number\n    return missing_num",
        "test": "assert find_First_Missing([1,1,1]) == 0",
        "num_ids": 1226,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces('Hello World') == 'Hello%20World'",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def Split(lst):\n    '''\n    Takes a list of numbers as input and returns a new list with even numbers.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven_numbers = Split(lst)\nprint(even_numbers)",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 824,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n        return sub\n    else:\n        sub.append(ele)\n        adj = [sub[0][0]-1, sub[0][1], sub[0][0]+1, sub[0][1], sub[0][0], sub[0][1]-1, sub[0][0], sub[0][1]+1]\n        return adj",
        "test": "assert adjac((1, 2)) == [(1, 2)]",
        "num_ids": 1334,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the text into a list of words\n    words = text.split()\n    # Join the words back into a string with underscores\n    result = '_'.join(words)\n    # Return the modified string\n    return result",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0) # adding 0 to the end of the list\n\n    return num_list",
        "test": "assert move_zero([1, 0, 0, 0, 0]) == [1, 0, 0, 0, 0]",
        "num_ids": 1052,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize a variable to store the xor of all pairs\n    xor_sum = 0\n\n    # Traverse through all pairs of numbers in the given list\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # Calculate the xor of the two numbers\n            xor = arr[i] ^ arr[j]\n            \n            # Add the xor to the sum variable\n            xor_sum += xor\n\n    # Return the xor of all pairs in the list\n    return xor_sum\n",
        "test": "assert pair_xor_Sum([2,2,2,2,2],5) == 0",
        "num_ids": 1299,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    max_heap = []\n    for element in iterable:\n        heapq.heappush(max_heap, element)\n    for _ in range(len(max_heap)//2):\n        hq.heappop(max_heap)\n    return max_heap",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1145,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit and loss of the sale\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    # Check if the profit is greater than or equal to the loss\n    if profit >= loss:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(1000, 1000) == True # correct answer: neither profit nor loss",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 10:\n        return round(t + 1.8 * t * math.log(v / 10))\n    elif v > 10 and v <= 30:\n        return round(t + 1.8 * t * math.log(v / 30))\n    elif v > 30 and v <= 50:\n        return round(t + 1.8 * t * math.log(v / 50))\n    elif v > 50:\n        return round(t + 1.8 * t * math.log(v / 75))\n    else:\n        return round(t)",
        "test": "assert wind_chill(8,15) == 9",
        "num_ids": 1206,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        # Remove names that start with a lowercase letter\n        if name[0].islower():\n            result += len(name)\n    return result",
        "test": "assert sample_nam('Alice') == 4",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(|\\)|\\[|\\]|[^a-zA-Z0-9 ]+')\n    return pattern.sub('', items)\n\nitems = \"Hello (World) Python!\"\nprint(remove_parenthesis(items)) # Output: \"Hello World Python\"",
        "test": "assert remove_parenthesis(\"Hello\") == \"Hello\"",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    count = 0\n    a = 1\n    while a**2 <= n:\n        count += 1\n        a += 1\n    return n - count",
        "test": "assert is_nonagonal(1) == 0",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Remove any leading or trailing whitespace from the text\n    text = text.strip()\n    \n    # Split the text into individual words\n    words = text.split()\n    \n    # Check if the first word contains 'z'\n    if words[0] in ['z', 'Z']:\n        # If so, check if the middle word contains 'z'\n        if words[1] in ['z', 'Z']:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert text_match_wordz_middle('The dog ate the apple') == False",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # create an empty list to store the reversed elements\n    reversed_list = []\n    \n    # loop through the input array from left to right\n    for i in range(len(input)-1, -1, -1):\n        # check if i is equal to k\n        if i == k:\n            break\n        # append the element to the reversed list\n        reversed_list.append(input[i])\n    \n    # return the reversed list\n    return reversed_list",
        "test": "assert reverse_Array_Upto_K([], 0) == []",
        "num_ids": 1384,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_dict.values()) + test_tup",
        "test": "assert add_dict_to_tuple(tuple(), {}) == ()",
        "num_ids": 753,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    max_path_avg = 0\n    max_path = []\n    path_counter = 0\n    path_cost = 0\n\n    # Iterate through all paths and calculate average\n    for i in range(len(cost)):\n        for j in range(i, len(cost[0])):\n            if cost[i][j] > 0:  # Ignore paths with zero or negative cost\n                path_counter += 1\n                path_cost += cost[i][j]\n\n                if len(max_path) < path_counter:  # Update max path if new path has more cells\n                    max_path = cost[i][j]\n                    max_path_avg = path_cost / path_counter\n                else:\n                    if cost[i][j] > max_path:  # Update max path if new path has higher average\n                        max_path = cost[i][j]\n                        max_path_avg = path_cost / path_counter\n\n    return max_path, max_path_avg",
        "test": "assert maxAverageOfPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 17",
        "num_ids": 2835,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students = []\n    \n    for name, student in students.items():\n        if student[0] > h or student[1] > w:\n            filtered_students.append(name)\n    \n    return filtered_students",
        "test": "assert filter_data({}, 160, 100) == []",
        "num_ids": 1991,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [3, 2, 1, 4, 5]) == [0, 2, 4]",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable to 0\n    total_sum = 0\n\n    # Loop through the digits of the base\n    for i in range(10):\n        # Calculate the power of the base and the digit\n        power_digit = i**power\n        # Add the power to the total sum\n        total_sum += power_digit\n\n    # Return the total sum\n    return total_sum",
        "test": "assert power_base_sum(10, 2) == 100",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Given a string, extract the values between quotation marks \" \" using regular expressions.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "test": "assert extract_quotation(\"Hello, World!\") == \"Hello\"",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = ()\n    for i in range(N):\n        result = (test_tup[i] * test_tup[i+1])\n    return result",
        "test": "assert multiply_elements((1, 2, 3, 4, 5)) == (1 * 2, 1 * 3, 1 * 4, 1 * 5, 2 * 5)",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n\n    # iterate over the elements of the lists and add them up\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n\n    return result\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(sorted(list(groupby(nums, lambda x: x % 2 == 0)))))",
        "test": "assert consecutive_duplicates([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "num_ids": 1885,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h",
        "test": "assert lateralsurface_cone(10,5) == 50",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,. ]', ':', text)",
        "test": "assert replace_specialchar(\"The quick brown fox jumps over the lazy dog.\") == \"The:quick:brown:fox:jumps:over:the:lazy:dog:\"",
        "num_ids": 826,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Return the index of the first occurrence of x in A, or -1 if x is not in A.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 6) == -1",
        "num_ids": 1297,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Create a list of all possible sublists of the given list\n    sublist_list = []\n    for i in range(len(arr)):\n        sublist_list.append([arr[i]])\n\n    # Calculate the sum of products of all sublists\n    total_sum = 1\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            for k in range(len(sublist_list[j])):\n                sublist_product = 1\n                for l in range(i, j):\n                    sublist_product *= sublist_list[j][l]\n                sublist_product *= arr[k]\n                total_sum += sublist_product\n\n    return total_sum",
        "test": "assert sum_Of_Subarray_Prod([1]) == 1",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def set_middle_bits(n):  \n    # Define the mask to toggle the bits\n    mask = 1 << 2  \n    \n    # Toggle the first and last bits\n    n &= ~(mask - 1)\n    \n    return n",
        "test": "assert set_middle_bits(5) == 4",
        "num_ids": 1989,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo, hi = 0, len(a) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 5) == 2",
        "num_ids": 991,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # Define regex pattern to check whether the string starts with a vowel or not\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    \n    # Use re.match() function to check if the string starts with a vowel\n    match = re.match(regex, string)\n    \n    # Check if the match is found or not\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_str('WORLD') == False",
        "num_ids": 723,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 0:\n        return 1\n\n    return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(4) == 24, \"The correct sum of 4 is 24, but it is \" + str(geometric_sum(4)) + \".\"",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef find_Index(n): \n    # Find the smallest triangular number with n digits\n    num = 10**(n-1)\n    smallest = math.sqrt(num)\n    \n    # Find the index of the smallest triangular number\n    index = 0\n    for i in range(int(math.sqrt(num))+1):\n        if i*i <= num:\n            index = i\n            break\n    \n    return index",
        "test": "assert find_Index(4) == 0",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 1196,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize a boolean variable to keep track of whether all characters are the same\n    same = True\n    \n    # Loop through each character in the string and check if it is the same as the previous character\n    for i in range(len(s)):\n        if s[i]!= s[i-1]:\n            # If the characters are different, set the boolean variable to False and break out of the loop\n            same = False\n            break\n    \n    # If all characters are the same, return True\n    if same:\n        return True\n    \n    # If all characters are different, return False\n    else:\n        return False",
        "test": "assert all_Characters_Same('abcde') == False",
        "num_ids": 748,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculates the area of a tetrahedron.\n    '''\n    return 0.5 * side * side",
        "test": "assert area_tetrahedron(1) == 0.5",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rotate_right(list, n):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # get the length of the list\n    length = len(list)\n    # get the number of elements to be rotated\n    n = n % length\n    # if n is equal to 0, then return the original list\n    if n == 0:\n        return list\n    # otherwise, move the first n elements to the right\n    new_list = list[n:] + list[:n]\n    return new_list",
        "test": "assert rotate_right([1], 1) == [1]",
        "num_ids": 1139,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def check_none(test_tup):\n    '''\n    Check if the given tuple has any none value.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False",
        "test": "assert check_none((1,2,3,4)) == False",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: str(x).isdigit(), range(startnum, endnum+1)))",
        "test": "assert divisible_by_digits(2, 2) == [2]",
        "num_ids": 1496,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a",
        "test": "assert sector_area(10, 45)!= 45",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n = len(X), len(Y)\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n    return L[-1][-1]",
        "test": "assert lcs_of_three(\"abcdefg\", \"hijklmnopqr\", \"pqrstuv\") == \"mnopqr\"",
        "num_ids": 1879,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b\\w+\\b')\n    return pattern.sub(r'\\1 ', str1)",
        "test": "assert capital_words_spaces(\"the quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\"",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    # Convert all the strings in the list to integers\n    nums_int = [int(num) for num in nums_str]\n\n    # Sort the integers in ascending order\n    nums_int.sort()\n\n    # Convert the sorted integers back to strings and return them\n    return [str(num) for num in nums_int]",
        "test": "assert sort_numeric_strings(['4', '2', '3', '1', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list",
        "test": "assert add_tuple([1,2,3],[4,5,6]) == [5, 7, 9]",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    left = 2 * i\n    right = 2 * i + 1\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return check_min_heap_helper(arr, left)\n    return True",
        "test": "assert check_min_heap_helper([1, 5, 3, 8, 2], 2) == False",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Check for negative input\n        if n < 0:\n            n = abs(n)\n            n += 1\n\n        # Initialize variables\n        prev_num = 0\n        current_num = 1\n        next_num = 2\n\n        # Iterate until the next jacobsthal number is found\n        while True:\n            if next_num % n == 0:\n                return next_num\n            elif next_num % n == 1:\n                # If the next number is divisible by n, move on to the next iteration\n                next_num += 1\n            elif next_num % n == -1:\n                # If the next number is not divisible by n, move back to the previous iteration\n                next_num = prev_num\n            else:\n                # If the next number is neither divisible by n nor by n+1, the current number is the next jacobsthal number\n                return current_num\n            prev_num = current_num\n            current_num = next_num\n            next_num += 1",
        "test": "assert jacobsthal_num(0) == 0, \"Jacobsthal number 0 should be 0\"",
        "num_ids": 2693,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def min_k(test_list, K):\n    # Create a dictionary to store the count of each record\n    count_dict = {}\n    # Iterate over the test list\n    for record in test_list:\n        # Check if the record is already present in the dictionary\n        if record in count_dict:\n            # If it is, increment its count\n            count_dict[record] += 1\n        # If it is not, add it to the dictionary with count 1\n        else:\n            count_dict[record] = 1\n    # Create a list of tuples containing the records with minimum count\n    min_count_list = []\n    # Iterate over the dictionary to find the records with minimum count\n    for record in count_dict:\n        if count_dict[record] == min(count_dict.values()):\n            # If it is, add the record to the list\n            min_count_list.append(record)\n    # Return the list of minimum count records\n    return min_count_list",
        "test": "assert min_k([], 1) == []",
        "num_ids": 1513,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2, \"Test 1: Second smallest is 2.\"",
        "num_ids": 1193,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b+'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"aba\") == True",
        "num_ids": 1676,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([1]) == 0",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Initialize an empty dictionary\n    sublist_counts = {}\n\n    # Loop through each element in the list\n    for element in list1:\n\n        # If the element is a list, recursively call the function on it\n        if isinstance(element, list):\n            sublist_counts.update(unique_sublists(element))\n\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            sublist_counts[element] = 1\n\n    return sublist_counts",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1356,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the number contains a decimal point\n    if '.' not in num:\n        # If there is no decimal point, it is a valid decimal number\n        return True\n\n    # Split the number into its parts\n    parts = num.split('.')\n\n    # Check if there are exactly 2 parts\n    if len(parts)!= 2:\n        # If there are not exactly 2 parts, it is not a valid decimal number\n        return False\n\n    # Check if the second part is a decimal number with a precision of 2\n    if len(parts[1])!= 2:\n        # If the second part is not a decimal number with a precision of 2, it is not a valid decimal number\n        return False\n\n    # Check if the second part is a valid decimal number\n    try:\n        float(parts[1])\n        # If the second part is a valid decimal number, it is a valid decimal number with a precision of 2\n        return True\n    except ValueError:\n        # If the second part is not a valid decimal number, it is not a valid decimal number with a precision of 2\n        return False",
        "test": "assert is_decimal(\"1234.567\") == False",
        "num_ids": 2136,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes in a list of numbers and returns True if there is only one distinct element in the list, and False otherwise.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # Check if the set has only one element\n    return len(unique_set) == 1",
        "test": "assert unique_Element([1, 2, 3, 4, 4, 5, 5, 6]) == False",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 4 == 0 and (monthnum3 % 100!= 0 or monthnum3 % 400 == 0):\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(123) == False",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([1,2,3,4,5], 5) == 1 # Test case 1",
        "num_ids": 1491,
        "indeed": true
    },
    {
        "number": 764,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import math\n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return \"It is the first polite number.\"\n    elif n % 10 == 1: \n        return \"It is the second polite number.\"\n    elif n % 10 == 2: \n        return \"It is the third polite number.\"\n    elif n % 10 == 3: \n        return \"It is the fourth polite number.\"\n    elif n % 10 == 4: \n        return \"It is the fifth polite number.\"\n    elif n % 10 == 5: \n        return \"It is the sixth polite number.\"\n    elif n % 10 == 6: \n        return \"It is the seventh polite number.\"\n    elif n % 10 == 7: \n        return \"It is the eighth polite number.\"\n    elif n % 10 == 8: \n        return \"It is the ninth polite number.\"\n    elif n % 10 == 9: \n        return \"It is the tenth polite number.\"\n    else:\n        return \"It is not a polite number.\"\n\nn = int(input(\"Enter a number: \"))\nprint(is_polite(n))",
        "test": "assert is_polite(3) == True",
        "num_ids": 1317,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    # Create an empty dictionary\n    pairs_count = {}\n    \n    # Loop through the list of numbers\n    for num in arr:\n        # Check if the current number is present in the dictionary\n        if num in pairs_count:\n            # Increment the count of pairs in the dictionary\n            pairs_count[num] += 1\n        else:\n            # Add the current number to the dictionary with a count of 1\n            pairs_count[num] = 1\n    \n    # Loop through the dictionary and return the count of pairs whose sum is equal to the given sum\n    count = 0\n    for num, count_ in pairs_count.items():\n        if count_ == sum:\n            count += 1\n    \n    return count",
        "test": "assert get_pairs_count([1,2,3,4,5], 0) == 0, \"get_pairs_count([1,2,3,4,5], 0) should return 0\"",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))",
        "test": "assert Diff([],[]) == []",
        "num_ids": 832,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if i % 2!= 0 : \n            sum += i**4\n    return sum",
        "test": "assert odd_num_sum(30) == 750",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n    return len(stack) == 0",
        "test": "assert check_expression(\"()\") == True # the empty string is balanced",
        "num_ids": 608,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    words_to_remove = []\n    for word in words:\n        if len(word)!= K:\n            words_to_remove.append(word)\n    return''.join(words_to_remove)",
        "test": "assert remove_length(\"hello world\", 3) == \"helloworld\"",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n\n    # Use regular expression to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If no matches were found, return None\n    if len(matches) == 0:\n        return None\n\n    # Return a tuple of the match and its position\n    return matches[0]\n",
        "test": "assert occurance_substring(\"hello world\", \"good\") == None",
        "num_ids": 1407,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    n = len(nums)\n    for i in range(n):\n        if i % 2 == 1:\n            if any(nums[i] % j == 0 for j in range(2, int(i/2)+1)):\n                return False\n    return True",
        "test": "assert odd_position([1, 2, 3, 4, 5, 6]) == False",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            if test_str[i:j].lower() in vowels:\n                count += 1\n    return count",
        "test": "assert count_vowels(\"\") == 0 # 0",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # create an empty dictionary to store the counts of each element\n    count_dict = {}\n\n    # loop through the list and count the occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # create an empty list to store the unique elements\n    unique_elements = []\n\n    # loop through the dictionary and add all the unique elements to the list\n    for num in count_dict:\n        if count_dict[num] == 1:\n            unique_elements.append(num)\n\n    # return the sum of the unique elements\n    return sum(unique_elements)\n",
        "test": "assert find_sum([]) == 0",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def pack_consecutive_duplicates(lst):\n    '''\n    Pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublists = []\n    for item in lst:\n        if not sublists or item!= sublists[-1]:\n            sublists.append(item)\n        else:\n            sublists[-1].append(item)\n    return sublists",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 1555,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        sublists[item] = sublists.get(item, 0) + 1\n    return sublists\n",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initialize an empty list to store the combinations\n    result = []\n    # iterate through each tuple in the list and compute the sum of its elements\n    for tup in test_list:\n        sum_tup = sum(tup)\n        # check if the sum of the tuple is equal to 0 (i.e., if all elements are 0)\n        if sum_tup == 0:\n            # if not, add the tuple to the result list\n            result.append(tup)\n    # return the result list of combinations\n    return result",
        "test": "assert find_combinations([1, 2, 3, 4, 5]) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5)]",
        "num_ids": 1803,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert count_divisors(10) == 4",
        "num_ids": 989,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize a variable to store the sum\n    sum = 0\n    # Loop through each element of the array\n    for i in range(n):\n        # Loop through each element after the current one\n        for j in range(i+1, n):\n            # Check if the current element is odd and its length is odd\n            if arr[i] % 2 == 1 and arr[j] % 2 == 0:\n                # If so, add the current element and its length to the sum\n                sum += arr[i] + arr[j]\n    return sum",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert a given RGB color to HSV (hue, saturation, and value) color model.\n    '''\n    # Calculate the min, max, and range of each color channel\n    min_r, max_r = min(r, g, b), max(r, g, b)\n    delta_r = max_r - min_r\n    \n    min_g, max_g = min(g, b), max(g, b)\n    delta_g = max_g - min_g\n    \n    min_b, max_b = min(b, r), max(b, r)\n    delta_b = max_b - min_b\n    \n    # Calculate the hue, saturation, and value of each color channel\n    if delta_r == 0:\n        hue = 0\n    elif delta_g == 0:\n        hue = delta_b / delta_r * 60\n    elif delta_b == 0:\n        hue = (1/3) * (delta_g + delta_r)\n    else:\n        if delta_g < delta_b:\n            delta_g, delta_b = delta_b, delta_g\n        i = delta_g.index(min_g)\n        hue = (i * 60) / delta_r + (delta_g - min_g) / 2\n        if hue < 0:\n            hue += 360\n    \n    if delta_r == 0:\n        saturation = 0\n    else:\n        saturation = delta_r / (1 - abs((2 * delta_g) - delta_b))\n    \n    if delta_b == 0:\n        value = delta_g\n    else:\n        value = (1 - abs((2 * delta_r) - delta_g)) / (1 - abs((2 * delta_b) - delta_r))\n    \n    # Round the hue and saturation to the nearest whole number\n    hue = round(hue)\n    saturation = round(saturation)\n    value = round(value)\n    \n    # Construct the HSV (hue, saturation, and value) tuple\n    return (hue, saturation, value)",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0)",
        "num_ids": 2902,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def mul_even_odd(list1):\n    even_product = 1\n    odd_product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n\n    return even_product * odd_product",
        "test": "assert mul_even_odd([0, 2, 4, 6, 8]) == 0",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # Convert the tuple string to a tuple\n    tuple_str = tuple(test_str.split(','))\n    \n    # Convert the tuple to an integer tuple\n    integer_tuple = tuple([int(num) for num in tuple_str])\n\n    return integer_tuple",
        "test": "assert tuple_str_int('123') == (123,)",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left + 1  # Return the index of the right insertion point",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 9) == 4  # Test case 3",
        "num_ids": 1352,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef text_match_three(text):\n    # Regular expression pattern for match\n    pattern = re.compile(r'\\ba\\b')\n    # Find all matches of pattern in text\n    matches = pattern.findall(text)\n    # Return list of matches, if any\n    if matches:\n        return matches\n    else:\n        return None",
        "test": "assert text_match_three(\"ababbb\") == True",
        "num_ids": 1482,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Create a new tuple from the given string and list.\n    \n    Parameters:\n    test_list (list): a list of strings\n    test_str (str): a string containing a comma-separated list of strings\n    \n    Returns:\n    new_tuple (tuple): a new tuple containing the elements from the test_str and test_list\n    '''\n    \n    # Split the string into a list of strings\n    test_list = test_str.split(',')\n    \n    # Convert the list to a tuple\n    new_tuple = tuple(test_list)\n    \n    return new_tuple",
        "test": "assert new_tuple([], 'hello') == ('hello',)",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_nums = [num for num in nums if num % 2 == 0]\n    return len(even_nums) == len(nums)",
        "test": "assert even_position([1, 2, 3, 5, 7]) == False",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def remove_nested(test_tup):\n    '''\n    Remove tuples from a tuple by recursively calling the function on each element of the tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        return test_tup\n\n    result = []\n    for item in test_tup:\n        result.append(remove_nested(item))\n\n    return result",
        "test": "assert remove_nested([]) == []",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def count_list(input_list):\n    '''\n    Count the number of lists in a given number of lists.\n\n    Args:\n    input_list: A list of lists or a list of integers.\n\n    Returns:\n    An integer representing the number of lists in the input list.\n    '''\n    if isinstance(input_list, list):\n        return len(input_list)\n    elif isinstance(input_list, int):\n        return 1\n    else:\n        raise ValueError(\"Input must be a list or an integer.\")",
        "test": "assert count_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3",
        "num_ids": 812,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def last(arr, x):\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1  # Element not found",
        "test": "assert last([1,2,3,4,5],3)==2",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'a\\w*b', text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_starta_endb(\"This is a test c\") == None",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total",
        "test": "assert return_sum({'apple': 10, 'banana': 5, 'cherry': 8}) == 23",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odds = 0\n    for i in range(n, 0, -2): \n        if i % 2!= 0: \n            sum_odds += i\n    return sum_odds",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15, \"The sum of the array [1, 2, 3, 4, 5] should be 15\"",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def left_rotate(n, d):\n    if d % 32 == 0:\n        return n\n    else:\n        carry = 1\n        result = 0\n        while carry!= 0:\n            if d % 2 == 1:\n                result = (result << 1) | 1\n            d = d >> 1\n            carry = n & (1 << 31)\n            n = n << 1\n        return result",
        "test": "assert left_rotate(0, 32) == 0, \"left_rotate(0, 32) should return 0\"",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)",
        "test": "assert remove_all_spaces('') == ''",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(3):\n        if x == y == z:\n            count += 1\n    return count",
        "test": "assert test_three_equal(1,2,4) == 0",
        "num_ids": 753,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def count_rotation(arr):\n    # Count the number of rotations required to sort the array in descending order\n    num_rotations = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            num_rotations += 1\n    \n    # If the array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    \n    # Count the number of rotations required to sort the array in ascending order\n    num_rotations = 0\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            num_rotations += 1\n    \n    return num_rotations",
        "test": "assert count_rotation([]) == 0",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_perfect_square(n) :\n    '''\n    This function checks whether the given number is a perfect square or not.\n    '''\n    # Base Case: If n is less than or equal to 0, it is not a perfect square\n    if n <= 0:\n        return False\n\n    # Check if n is a power of 2 or not\n    if n == 1 or n == 2:\n        return True\n\n    # Find the square root of n and check if it is a power of 2 or not\n    square_root = int(n ** 0.5)\n    if square_root ** 2 == n:\n        return True\n\n    # If n is not a perfect square, return False\n    return False",
        "test": "assert is_perfect_square(4) == True",
        "num_ids": 840,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0",
        "test": "assert is_product_even([1, 2, 3, 4]) is True  # arr = [1, 2, 3, 4] * 2 = [2, 4, 6, 8]",
        "num_ids": 820,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def max_sum_list(lists):\n    '''\n    Return the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        curr_sum = sum(lst)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_list = lst\n    return max_list",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [4, 9, 18]",
        "num_ids": 1320,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 1\n    if curr_run > max_run:\n        max_run = curr_run\n    return max_run",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0: #check if the number is odd\n            return num #return the first odd number in the list\n    return None #return None if no odd numbers are found in the list",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) == K:\n        return True\n    else:\n        return False",
        "test": "assert check_K([(1, 2), (3, 4)], 5) == False",
        "num_ids": 731,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True",
        "test": "assert check_smaller((1, 3), (3, 5)) == True",
        "num_ids": 891,
        "indeed": false
    }
]