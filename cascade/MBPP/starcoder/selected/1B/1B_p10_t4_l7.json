[
    {
        "number": 2,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    # create two empty lists to store shared elements\n    shared_list = []\n\n    # iterate through the lists and add elements that are present in both lists\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_list.append(elem)\n\n    # return the shared elements\n    return shared_list\n",
        "test": "assert similar_elements((\"apple\", \"banana\"), (\"orange\", \"banana\")) == [\"banana\"]",
        "num_ids": 2179,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_not_prime(1) == True",
        "num_ids": 1420,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return hq.nlargest(n, nums)",
        "test": "assert heap_queue_largest([],0) == []",
        "num_ids": 2277,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return abs(x) & (abs(x) - 1) == 0",
        "test": "assert is_Power_Of_Two(3) == False",
        "num_ids": 1887,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words in the string\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "test": "assert find_char_long(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 1890,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Initialize an empty list to store squares\n    squares = []\n\n    # Loop through each element in the input list\n    for num in nums:\n        # Calculate the square of the current element\n        square = num**2\n        \n        # Append the square to the list of squares\n        squares.append(square)\n    \n    # Return the list of squares\n    return squares",
        "test": "assert square_nums([1,2,3,4,5]) == [1,4,9,16,25]",
        "num_ids": 1520,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # count the number of rotations needed to get the same string\n    rotations = 0\n    for i in range(len(str)):\n        if str[i:i+1] == str:\n            rotations += 1\n\n    # return the minimum number of rotations\n    return rotations",
        "test": "assert find_Rotations(\"\") == 0, \"find_Rotations('') should return 0\"",
        "num_ids": 2097,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.strip(ch).strip()",
        "test": "assert remove_Occ(\"hello world\", \"x\") == \"hello world\"",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        row_sum = sum(M[i])\n        M[i].sort(key=lambda x: x + row_sum - row_sum % 2)  # Sort the rows based on the sum of their rows.\n    return M",
        "test": "assert sort_matrix([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == [[1, 1, 1], [1, 1, 1], [1, 1, 1]]",
        "num_ids": 2898,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def find_Volume(l, b, h):\n    volume = l*b*h\n    return volume",
        "test": "assert find_Volume(1,2,3) == 6",
        "num_ids": 1141,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'(?<![a-z])[a-z](?![a-z])', text.lower()):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"test1_string\") == False",
        "num_ids": 1723,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4",
        "test": "assert square_perimeter(4) == 16 # test for square with side length 4",
        "num_ids": 830,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the non-overlapping characters\n    non_overlapping_chars = []\n    \n    # Loop through each character in the first string\n    for char in string:\n        # Check if the character is present in the second string\n        if char in string:\n            # Add the character to the non-overlapping_chars list\n            non_overlapping_chars.append(char)\n    \n    # Return the non-overlapping_chars list\n    return non_overlapping_chars",
        "test": "assert str_to_list(\"\") == []",
        "num_ids": 1871,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Test whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert test_duplicate([]) == False",
        "num_ids": 1799,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def is_woodall(x): \n    '''\n    This function checks if a given number is a woodball number or not.\n    '''\n\n    # Initialize variables\n    if x < 10:  # base case 1\n        return True\n    elif x % 10 == 1 or x % 10 == 3 or x % 10 == 7:  # base case 2\n        return False\n    else:\n        return is_woodall(x // 10)  # recursive call\n",
        "test": "assert is_woodall(51) == False",
        "num_ids": 1657,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = str(num)[::-1]\n    if int(reverse) == num:\n        return True\n    else:\n        return False",
        "test": "assert rev(12345) == False, \"The given number is not one less than twice its reverse.\"",
        "num_ids": 1442,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def find_Max_Num(arr):\n    max_num = arr[0] # assuming the first element in the list is the largest number\n    \n    for num in arr[1:]:\n        if num > max_num:\n            max_num = num\n    \n    return max_num",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1904,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n\n    # Check if the given integers have opposite sign\n    if x * y < 0!= x < y * -1:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(0, 5) == False",
        "num_ids": 1634,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def is_octagonal(n):\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Check if n is divisible by 8\n    if n % 8 == 0:\n        return n // 8\n    \n    # Check if n is divisible by 4\n    if n % 4 == 0:\n        return (n // 4) * 2\n    \n    # If n is not divisible by 8 or 4, return 1\n    return 1",
        "test": "assert is_octagonal(1) == True, \"Test 1\"",
        "num_ids": 1595,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Convert string to lowercase\n    s = s.lower()\n    # Initialize dictionary to store counts\n    counts = defaultdict(int)\n    # Loop through each character in the string\n    for char in s:\n        # Add current character to counts dictionary\n        counts[char] += 1\n    # Initialize sum and current substring\n    total_sum = 0\n    current_substring = \"\"\n    # Loop through each character in the string again\n    for char in s:\n        # If current character is a digit, add its value to total_sum\n        if char.isdigit():\n            total_sum += int(char)\n        # If current character is not a digit, update the current substring\n        else:\n            current_substring += char\n            # If the total sum of the substring is equal to its length, increment the count in the counts dictionary\n            if total_sum == len(current_substring):\n                counts[current_substring] += 1\n            # Reset current substring and total_sum\n            current_substring = \"\"\n            total_sum = 0\n    # Return the number of substrings with the sum of digits equal to their length\n    return len(counts)",
        "test": "assert count_Substrings('') == 0",
        "num_ids": 2297,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = float('inf')\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest",
        "test": "assert smallest_num([1,2,3,4,5]) == 1",
        "num_ids": 1339,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def max_difference(test_list):\n    '''\n    Find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([]) == 0",
        "num_ids": 2737,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n\n    return subjectmarks",
        "test": "assert subject_marks([('Math', 85), ('Science', 90), ('English', 95), ('History', 80), ('Geography', 75)]) == [('Math', 85), ('Science', 90), ('English', 95), ('Geography', 75), ('History', 80)]",
        "num_ids": 2425,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for item in data_list:\n        if isinstance(item, (list, tuple)):\n            result += recursive_list_sum(item)\n        else:\n            result += item\n    return result",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 1802,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def bell_number(n):\n    # Base cases\n    if n == 0 or n == 1:\n        return 1\n\n    # Recursive case\n    return bell_number(n-1) + bell_number(n-2)",
        "test": "assert bell_number(1) == 1",
        "num_ids": 1925,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n\n    Parameters:\n    A - list of integers\n\n    Returns:\n    True if the array is monotonic, False otherwise.\n    \"\"\"\n\n    # Check if array has at least two elements\n    if len(A) < 2:\n        return False\n\n    # Check if the first element is smaller than all the other elements\n    if A[0] > A[1]:\n        return False\n\n    # Check if the last element is larger than all the other elements\n    if A[-1] < A[-2]:\n        return False\n\n    # Traverse the array and check if the next element is smaller than all the previous elements\n    for i in range(1, len(A) - 1):\n        if A[i] < A[i - 1]:\n            return False\n\n    return True",
        "test": "assert is_Monotonic([1, 2, 3, 5, 4]) == False",
        "num_ids": 1923,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sublist(l, s):\n    '''\n    Check if a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True",
        "test": "assert is_sublist(['a', 'b'], ['c', 'd']) is False",
        "num_ids": 1722,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def find_equal_tuple(Input):\n    if len(Input) == len(set(Input)):\n        return True\n    else:\n        return False",
        "test": "assert find_equal_tuple(()) == True",
        "num_ids": 1452,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums",
        "test": "assert comb_sort([3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3]",
        "num_ids": 2443,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        num = n - 1\n        while num % 2 == 0:\n            num //= 2\n        if num == 1:\n            return True\n        else:\n            return False",
        "test": "assert dif_Square(15) == False",
        "num_ids": 1867,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if len(set(colors[i]) - set(patterns[i]))!= 0:\n            return False\n    return True",
        "test": "assert is_samepatterns(['red', 'blue', 'green', 'yellow', 'orange'], ['red', 'green', 'purple']) == False",
        "num_ids": 2243,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Find all tuples in the list which have all elements divisible by K.\n    '''\n\n    # Initialize result list and dictionary to keep track of elements\n    result = []\n    elem_divisible = {}\n\n    # Iterate over all tuples in the list\n    for tup in test_list:\n        # Check if all elements are divisible by K\n        all_divisible = True\n        for elem in tup:\n            if elem not in elem_divisible:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n            elem_divisible[tup[0]] = True\n\n    return result",
        "test": "assert find_tuples([], 3) == []",
        "num_ids": 2610,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Check if the number is greater than 999\n    if n > 999:\n        return False\n\n    # Initialize a loop to check every other number from 1 to n/2\n    for i in range(1, n//2+1): \n        # Check if the number is divisible by i\n        if n % i == 0:\n            return True\n\n    # If no number divides n, it is not divisible by 11\n    return False",
        "test": "assert is_Diff(11) == True",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def word_len(s):\n    # Check if the length of the string is odd\n    if len(s) % 2 == 1:\n        # If the length is odd, return True\n        return True\n    else:\n        # If the length is even, return False\n        return False",
        "test": "assert word_len(\"a\") == 1",
        "num_ids": 1219,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n\n    Args:\n        n (int): The nth tetrahedral number to find.\n\n    Returns:\n        int: The nth tetrahedral number.\n\n    \"\"\"\n\n    # Base cases\n    if n == 1:\n        return 1\n\n    # Check for common factors\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n\n    # Check for tetrahedral numbers\n    if n in factors:\n        return n\n\n    # If n is not in factors, return None\n    return None",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 2026,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = math.pi * r ** 3\n    return volume",
        "test": "assert volume_sphere(0) == 0",
        "num_ids": 1483,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char) % 26\n    return chr(ascii_value)",
        "test": "assert get_Char(\"AbCdEfGhIjKlMnOpQRSTUVWXYZ\") == \"Z\"",
        "num_ids": 1317,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 21,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def sequence(n):\n    # Define the values of the sequence\n    values = [0, 1]\n\n    # Generate the remaining values in the sequence\n    for i in range(2, n+1):\n        next_value = values[i-1] + values[i-2]\n        values.append(next_value)\n\n    # Return the nth value in the sequence\n    return values[n]",
        "test": "assert sequence(1) == 1  # test for base case",
        "num_ids": 2395,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2",
        "test": "assert surfacearea_sphere(0) == 0, \"The surface area of a sphere is 0\"",
        "num_ids": 1680,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def centered_hexagonal_number(n):\n    if n < 1 or n > 25:\n        return None\n    \n    hexagonal_numbers = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12]\n    centered_hexagonal = sum(hexagonal_numbers[:n-1]) + hexagonal_numbers[n-1]\n    return centered_hexagonal",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 1988,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(lambda: {})\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({},{},{}) == {}",
        "num_ids": 2191,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary of the frequency of each element in the list.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return freq_dict",
        "test": "assert freq_count([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 1978,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 22,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_num = N\n    for i in range(1, N + 1):\n        if abs(i - N) < abs(closest_num - N):\n            closest_num = i\n    return closest_num",
        "test": "assert closest_num(1) == 1",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    max_length = 0\n    longest_word = \"\"\n\n    # loop through each element in the list\n    for word in list1:\n        # check if the length of the current word is greater than max_length\n        if len(word) > max_length:\n            # update max_length and longest_word\n            max_length = len(word)\n            longest_word = word\n\n    # return the length of the longest word\n    return max_length",
        "test": "assert len_log([]) == 0",
        "num_ids": 1733,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_of_strings = ['apple', 'banana', 'cherry', 'date']\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"hello world\", \"world2\") == False # check if string \"hello world\" is not present as a substring in the list [\"hello\", \"world\"]",
        "num_ids": 1781,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def is_undulating(n):\n    if n == 0:\n        return True\n    if n % 2 == 0 and n % 3 == 0:\n        return True\n    if n % 5 == 0:\n        return True\n    if n % 7 == 0:\n        return True\n    if n % 11 == 0:\n        return True\n    if n % 13 == 0:\n        return True\n    if n % 17 == 0:\n        return True\n    if n % 19 == 0:\n        return True\n    if n % 23 == 0:\n        return True\n    if n % 29 == 0:\n        return True\n    return False",
        "test": "assert is_undulating(12345) == True",
        "num_ids": 1680,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,3) == 8 ",
        "num_ids": 1083,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))",
        "test": "assert index_minimum([('apple', 2), ('banana', 1), ('orange', 3), ('grape', 2), ('kiwi', 4)]) == ('banana', 1)",
        "num_ids": 2111,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 1:\n        return len(lst[0])\n    else:\n        min_len = len(lst[0])\n        for item in lst:\n            if len(item) < min_len:\n                min_len = len(item)\n        return min_len",
        "test": "assert Find_Min_Length([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h'], ['i']]) == 1",
        "num_ids": 2781,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisors += 1\n    return divisors",
        "test": "assert divisor(0) == 0 # divisors of 0 are not applicable",
        "num_ids": 1697,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through the flattened list and count the frequency of each element\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 2839,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def multiply_num(numbers):\n    # Multiply all the numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    # Divide the product by the length of the list\n    length = len(numbers)\n    product /= length\n    return product",
        "test": "assert multiply_num([1]) == 1 # Test 4",
        "num_ids": 1605,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def decimal_to_binary(n):\n    # Function to convert decimal number to binary string\n    # Returns binary string with no leading zeros\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary",
        "test": "assert decimal_to_binary(5) == \"101\"",
        "num_ids": 3346,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Function to find the next smallest palindrome of a specified integer, returning as an integer.\n\n    Parameters:\n    num: an integer\n\n    Returns:\n    The next smallest palindrome of the input integer, as an integer.\n    '''\n\n    # Initialize the next smallest palindrome to the first number\n    next_smallest = num\n\n    # Loop through each number between 1 and the square root of the input number\n    for i in range(1, int(num**0.5)+1):\n        # Check if the input number is a palindrome by comparing the square of the current number to the square of the next smallest palindrome\n        if num == int(i**0.5)**2:\n            # If the input number is a palindrome, update the next smallest palindrome\n            next_smallest = i\n\n    return next_smallest",
        "test": "assert next_smallest_palindrome(999) == 999",
        "num_ids": 2401,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return None\n    \n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 4) == 4",
        "num_ids": 1505,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return ''.join([word[0].upper() + word[1:].lower() for word in words])",
        "test": "assert snake_to_camel(\"UPPER_CASE_STRING\") == \"UpperCaseString\"",
        "num_ids": 1373,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def eulerian_num(n, m):\n    # Find the number of common divisors between n and m\n    divisors = [x for x in range(1, n+1) if n%x == 0 and m%x == 0]\n    \n    # If there are no common divisors, then n and m are Eulerian\n    if len(divisors) == 0:\n        return n+m\n    \n    # Otherwise, return the Eulerian number that satisfies the common divisor constraint\n    else:\n        return min(n+m, max(n+m, divisors[0]))",
        "test": "assert eulerian_num(2, 2) == 4",
        "num_ids": 2010,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create an empty list to store the sorted sublists\n    sorted_sublists = []\n\n    # Iterate over each sublist in the input list\n    for sublist in input_list:\n        # Create a new list to store the sorted sublist\n        sorted_sublist = []\n\n        # Iterate over each character in the sublist\n        for char in sublist:\n            # If the character is not in the sorted_sublist, add it to it\n            if char not in sorted_sublist:\n                sorted_sublist.append(char)\n\n        # Add the sorted sublist to the sorted_sublists list\n        sorted_sublists.append(sorted_sublist)\n\n    # Return the sorted_sublists list\n    return sorted_sublists",
        "test": "assert sort_sublists([[\"a\",\"b\"],[\"c\",\"d\"],[\"e\",\"f\"],[\"g\",\"h\"],[\"i\",\"j\"],[\"k\",\"l\"],[\"m\",\"n\"]]) == [[\"a\",\"b\"],[\"c\",\"d\"],[\"e\",\"f\"],[\"g\",\"h\"],[\"i\",\"j\"],[\"k\",\"l\"],[\"m\",\"n\"]]",
        "num_ids": 3252,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "test": "assert count([False, False, True, False, False]) == 1, \"The count function should return the correct number of False booleans in the list.\"",
        "num_ids": 802,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup.append(i)\n    return test_tup",
        "test": "assert add_lists([], []) == []",
        "num_ids": 1401,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge the three sorted lists using heapq\n    merged_list = heapq.merge(num1, num2, num3)\n    # Convert the merged list to a sorted list\n    sorted_list = sorted(merged_list)\n    return sorted_list\n",
        "test": "assert merge_sorted_list([], [], []) == []",
        "num_ids": 4198,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def odd_Equivalent(s,n):\n    # check if string is of even length\n    if len(s) % 2 == 0:\n        # if so, set n to the length of the string divided by 2\n        n = len(s) // 2\n\n    # initialize count to 0\n    count = 0\n\n    # rotate string n times\n    for _ in range(n):\n        # get last character of string s\n        last_char = s[-1]\n\n        # if last character is '0', increment count by 1\n        if last_char == '0':\n            count += 1\n\n        # shift all characters in string by 1 place to the left\n        s = s[:-1] + '1'\n\n    return count",
        "test": "assert odd_Equivalent(\"10011010\",4) == 1, \"odd_Equivalent('10011010',4) should return 1\"",
        "num_ids": 3766,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for nested_list in nestedlist:\n        for element in nested_list:\n            if element not in common_elements:\n                common_elements.append(element)\n    return common_elements",
        "test": "assert common_in_nested_lists([[]]) == []",
        "num_ids": 2762,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Check if the string consists of only digits\n    if text.isdigit():\n        # Convert the string to an integer and return True if it is an integer, False otherwise\n        return int(text) == int(text)\n\n    # If the string doesn't consist of only digits, it is not an integer\n    return False",
        "test": "assert check_integer(\"123\") == True, \"123 is not an integer\"",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if not isinstance(item, dict):\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 1118,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "test": "assert tuple_to_int(()) == 0",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    # Loop through each list in the test_list\n    for lst in test_list:\n        # Loop through each element in the list\n        for elem in lst:\n            # Check if the element is convertible to a float\n            if isinstance(elem, (int, float)):\n                # Convert the float to a string and convert the string back to a float\n                try:\n                    float(elem)\n                except ValueError:\n                    # If the element is not convertible to a float, set it to None\n                    elem = None\n                # Replace the original element with the converted float\n                lst[lst.index(elem)] = elem\n\n    return test_list",
        "test": "assert list_to_float([]) == []",
        "num_ids": 2061,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"Hello world!\") == ['Hello', 'world!']",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def search(arr):\n    '''\n    Find the element that appears only once in a sorted array.\n\n    Parameters:\n    arr (list): A sorted array.\n\n    Returns:\n    element (object): The element that appears only once in the array. If the array is empty, None is returned.\n    '''\n\n    # Initialize the element that appears only once to None\n    element = None\n\n    # Loop through the array and check if the current element is the same as the previous element\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            element = arr[i]\n            break\n\n    return element",
        "test": "assert search([]) == None",
        "num_ids": 2106,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            abs_product = abs(product)\n            if abs_product > max_product:\n                max_product = abs_product\n    return max_product",
        "test": "assert max_product_tuple([1,1,1,1,1]) == 1, \"max_product_tuple([1,1,1,1,1]) should return 1.\"",
        "num_ids": 3164,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Create an empty list to store the sum of the amicable numbers\n    amicable_numbers = []\n\n    # Loop from 1 to the limit\n    for i in range(1, limit+1):\n\n        # Check if the number is divisible by both 1 and i\n        if i % 1 == 0 and i % 2 == 0:\n\n            # If it is, add it to the list of amicable numbers\n            amicable_numbers.append(i)\n\n    # Return the sum of the amicable numbers\n    return sum(amicable_numbers)",
        "test": "assert amicable_numbers_sum(5) == 6, \"The sum of the first 5 amicable numbers is incorrect.\"",
        "num_ids": 2144,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    real = a.real + b.real\n    imag = a.imag - b.imag\n    angle = cmath.phase(a)\n    return abs(angle)",
        "test": "assert angle_complex(0,0) == 0",
        "num_ids": 1586,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                count = 0\n        if count > 0:\n            if i - count + 1 > max_diff:\n                max_diff = i - count + 1\n    return max_diff",
        "test": "assert find_length(\"1101\") == 2",
        "num_ids": 5367,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a*b // gcd(a,b)\n\ndef gcd(a,b): \n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    if b == 0: \n        return a\n    return gcd(b,a % b)",
        "test": "assert sum(2, 3) == 6",
        "num_ids": 1834,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply_int(x, y):\n    '''\n    Multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "test": "assert long_words(10, \"The quick brown fox jumps over the lazy dog.\") == []",
        "num_ids": 1588,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    # Check if the matrix is of size 4x4\n    if rows!= 4 or cols!= 4:\n        return False\n    \n    # Check if the matrix is a magic square\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= i + j + 1:\n                return False\n    \n    return True",
        "test": "assert magic_square_test([[1,2,3], [4,5,6], [7,8,9]]) is False # False indicates that the matrix is not a magic square",
        "num_ids": 3175,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    max_freq = defaultdict(int)\n    max_item = None\n\n    for num in nums:\n        max_freq[num] += 1\n        if max_freq[num] > max_freq.get(max_item, 0):\n            max_item = num\n\n    return max_item",
        "test": "assert max_occurrences([1, 1, 1, 1, 1]) == 1",
        "num_ids": 2515,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str",
        "test": "assert reverse_vowels(\"\") == \"\"",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def tup_string(tup1):\n    '''\n    Converts a tuple to a string.\n    '''\n    # Define a string to hold the result\n    result = ''\n\n    # Loop through each element in the tuple\n    for element in tup1:\n        # Append the element to the result string\n        result += str(element)\n\n    # Return the result string\n    return result",
        "test": "assert tup_string('abc') == 'abc'",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # create a new list to store the positive numbers\n    positive_nums = []\n    # loop through the input list and add positive numbers to the list\n    for num in nums:\n        if num >= 0:\n            positive_nums.append(num)\n    # if there are no positive numbers in the list, return 0\n    if len(positive_nums) == 0:\n        return 0\n    # calculate the sum of the negative numbers\n    return sum(negative_nums)\n",
        "test": "assert sum_negativenum([]) == 0",
        "num_ids": 1564,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def hexagonal_num(n):\n    # Define a list to store the hexagonal numbers\n    hex_list = []\n    \n    # Loop through each number in the sequence\n    for i in range(1, n+1):\n        # Define the length of the current hexagon\n        length = i*i\n        \n        # Define the x and y coordinates of the current hexagon\n        x = i\n        y = 2*i\n        \n        # Append the hexagon to the list\n        hex_list.append([x, y, length])\n    \n    # Return the hexagonal number at index n\n    return hex_list[n-1][0]\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 2177,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    return (zero_count / non_zero_count) if non_zero_count > 0 else 0\n",
        "test": "assert zero_count([0,0,0,0,0,0,0,0]) == 0.0",
        "num_ids": 2240,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Convert the given number to binary and count the number of zeros\n    zeros = bin(n)[2:].count('0')\n    \n    # Check if the number of zeros is less than or equal to the number of ones\n    if zeros <= n.bit_length():\n        return True\n    else:\n        return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(0) == False, \"The number 0 cannot be represented as sum of non-zero powers of 2\"",
        "num_ids": 2959,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 1605,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        flattened_list.extend(item)\n    return flattened_list",
        "test": "assert extract_singly([]) == []",
        "num_ids": 1685,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def pancake_sort(nums):\n    for i in range(len(nums)):\n        # initialize the index variable to the next element after the current element\n        j = i + 1\n        \n        # while the current element is less than or equal to the next element\n        while j < len(nums):\n            \n            # if the current element is greater than the next element\n            if nums[i] > nums[j]:\n                # swap the elements\n                nums[i], nums[j] = nums[j], nums[i]\n                \n                # increment the index variable\n                j += 1\n            \n            # if the current element is less than the next element\n            else:\n                j += 1\n    \n    return nums",
        "test": "assert pancake_sort([1]) == [1]",
        "num_ids": 2883,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def count_samepair(list1, list2, list3):\n    # sort lists so that they have the same order\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    \n    # find the difference between the two sorted lists\n    n = len(list1)\n    i = 0\n    count = 0\n    while i < n:\n        if list1[i] == list2[i]:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    \n    return count",
        "test": "assert count_samepair([1,2,3], [3,4,5], [1,2,3]) == 0",
        "num_ids": 1980,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)",
        "test": "assert find_lists(()) == 0",
        "num_ids": 1330,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Returns the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_diff = 0\n    min_a = float('inf')\n    max_a = float('-inf')\n    min_b = float('inf')\n    max_b = float('-inf')\n\n    for num in arr:\n        if num > max_a:\n            max_a = num\n        if num < min_a:\n            min_a = num\n        if num > max_b:\n            max_b = num\n        if num < min_b:\n            min_b = num\n        \n        diff = max(num, max_a - num, max_b - num)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff",
        "test": "assert max_Abs_Diff([5,4,3,2,1]) == 5",
        "num_ids": 2392,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def find_solution(a, b, n):\n    if a*b == n:\n        return (a, b)\n    else:\n        return None",
        "test": "assert find_solution(3, 4, 7) == None",
        "num_ids": 1995,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]",
        "test": "assert remove_elements([], []) == []",
        "num_ids": 1813,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize variables\n    sum = 0\n    x = 0\n    \n    # Calculate the sum until x = n // 2\n    while x <= n // 2:\n        sum += x\n        x += 1\n    \n    return sum",
        "test": "assert sum_series(0) == 0, \"The correct sum of series should be 0, but it is {}.\".format(sum_series(0))",
        "num_ids": 1969,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s * l / 2\n    return area",
        "test": "assert area_polygon(3, 4) == 6.0",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # get the sum of the divisors of n\n    divs_sum = sum(int(math.sqrt(n))+1 for i in range(2,int(math.sqrt(n))+1))\n\n    # check if the sum of the divisors of n and the given integer are the same\n    return n == divs_sum",
        "test": "assert div_sum(28) == False",
        "num_ids": 2139,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower() # convert string to lowercase for case insensitivity\n    \n    count = 0\n    for char in str1:\n        if char.isalpha(): # check if character is alphabetic\n            if char.lower() == str1[count:]: # check if character matches at the same position as in the string\n                count += 1\n            else: # if character does not match at the same position, count it as a new character\n                count += 1\n    \n    return count # return the count of characters that match at the same position in the string as in the English alphabet",
        "test": "assert count_char_position('12345') == 0, \"The count_char_position function does not work correctly for the given string\"",
        "num_ids": 2444,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] & 1 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2",
        "num_ids": 2105,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # initialize result as 1\n    result = 1\n    \n    # iterate until result is greater than or equal to n\n    while result <= n:\n        # increment result by 2\n        result *= 2\n    \n    # return result as the smallest power of 2 greater than or equal to n\n    return result",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 1847,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,3,2,1],2) == 2",
        "num_ids": 1328,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 2, 4) == 12",
        "num_ids": 2134,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 0\n    for side in range(1, a+1):\n        perimeter += side\n    return perimeter",
        "test": "assert perimeter_pentagon(0) == 0, \"The perimeter of a regular pentagon with zero sides is incorrect.\"",
        "num_ids": 1701,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def count_occurance(s):\n    '''\n    This function takes in a string's' and returns the count of'std' in it.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count\n\ns = \"standard\"\nprint(count_occurance(s))",
        "test": "assert count_occurance(\"abc\") == 0",
        "num_ids": 1115,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for element in test_tuple:\n        if type(element)!= type(test_tuple[0]):\n            return False\n    return True",
        "test": "assert check_type([1, 2, 3]) == True",
        "num_ids": 1331,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def is_majority(arr, n, x):\n    # Count the frequency of x in arr\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # Check if there is at least n/2 occurrences of x in arr\n    if count >= n//2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1,2,3,3,3,4,4,4,4,4,5,6,7,8,8,8,9,10,11,11,12,13,14,14,14,14,15,16,17,18,19,19,19,19,20], 11, 16) == False",
        "num_ids": 2628,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 1709,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Loop through each character in the string\n    for char in str:\n        # If the character has an odd index, add it to the result string\n        if char % 2!= 0:\n            result += char\n    \n    return result",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 1519,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_of_three(a, b, c):\n    return min(a, b, c)",
        "test": "assert min_of_three(10,20,30) == 10",
        "num_ids": 1224,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Create a binary string of length n with all the bits set to 1\n    bits = bin(n)[2:]\n    # Split the binary string into binary strings of length l and r\n    left_bits = bits[:l]\n    right_bits = bits[r:]\n    # Check if all the bits are set in the left half of the range\n    all_set = True\n    for bit in left_bits:\n        if bit == '0':\n            all_set = False\n            break\n    # Check if all the bits are set in the right half of the range\n    all_set = True\n    for bit in right_bits:\n        if bit == '0':\n            all_set = False\n            break\n    # If all the bits are set in the left and right half of the range, return True\n    if all_set:\n        return True\n    # If at least one of the bits is not set, return False\n    return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(5, 0, 1) == False # n=5, l=0, r=1",
        "num_ids": 3012,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def re_arrange_array(arr, n):\n    # Make a copy of the array\n    new_arr = arr.copy()\n\n    # Sort the array in descending order\n    new_arr.sort(reverse=True)\n\n    # Iterate over the first n elements of the sorted array\n    for i in range(n):\n        # Find the index of the element that is negative\n        neg_index = -1\n        for j in range(i, n):\n            if new_arr[j] < 0:\n                neg_index = j\n                break\n\n        # Swap the element at the current position with the element at the negative index\n        new_arr[i], new_arr[neg_index] = new_arr[neg_index], new_arr[i]\n\n    # Sort the array again in ascending order\n    new_arr.sort()\n\n    return new_arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 3529,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "test": "assert replace_blank('', '_') == ''",
        "num_ids": 1276,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        n = len(list1)\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([], 0) == [] # empty list",
        "num_ids": 2101,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = r*h\n    return area",
        "test": "assert lateralsuface_cylinder(3,4) == 12",
        "num_ids": 1407,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "test": "assert volume_cube(3) == 27",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a Python function to set all even bits of a given number.\n    '''\n    # Set all even bits of n to 1\n    n = n | n >> 1\n    n = n | n >> 2\n    n = n | n >> 4\n    n = n | n >> 8\n    n = n | n >> 16\n    \n    # Return the final number\n    return n",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 3330,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict",
        "test": "assert check_occurences([]) == {} # empty list should return an empty dictionary",
        "num_ids": 2610,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str) - 1):\n        for j in range(i + 1, len(str)):\n            if str[i:j]!= '':\n                count += 1\n    return count",
        "test": "assert number_of_substrings('') == 0",
        "num_ids": 1689,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            if (i+j) % 2 == 0 and (i+j) >= 2 * m:\n                total_sequences += 1\n    return total_sequences\n",
        "test": "assert get_total_number_of_sequences(2,10) == 24",
        "num_ids": 2149,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def replace_list(list1, list2):\n    # Use slicing to remove the last element of the first list\n    list1 = list1[:-1]\n    \n    # Use append() method to add the elements of the second list to the end of the first list\n    list1.extend(list2)\n    \n    return list1",
        "test": "assert replace_list([],[2]) == [2]",
        "num_ids": 2355,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)",
        "test": "assert count_charac(\"\") == 0",
        "num_ids": 969,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    # find the square root of N\n    square_root = int(round(root))\n    # check if the square root is the nearest integer\n    if square_root * square_root!= N:\n        # if not, find the nearest integer by multiplying the square root with 2\n        square_root += 1\n    # check if the square root is greater than N\n    if square_root > N:\n        # if it is, return N+1 (which is the next perfect square)\n        return N+1\n    # otherwise, return the square root as the next perfect square\n    return square_root",
        "test": "assert next_Perfect_Square(1) == 1",
        "num_ids": 2108,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # Initialize a list to store the maximum sum\n    max_sum_list = []\n\n    # Iterate through the array and find the maximum sum of a bitonic subsequence\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            # Calculate the sum of the bitonic subsequence\n            subsequence = arr[i:j]\n            subsequence.sort()\n            bitonic_sum = sum(subsequence)\n\n            # Append the maximum sum to the list\n            if len(max_sum_list) == 0 or bitonic_sum > max_sum_list[-1]:\n                max_sum_list.append(bitonic_sum)\n\n    # Return the maximum sum\n    return max(max_sum_list)",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 2659,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a given number using the babylonian method.\n    '''\n    # Start with a guess of 1, and multiply it by 1/2 until it's within\n    # the desired error (epsilon).\n    guess = 1\n    epsilon = 1e-9\n    while True:\n        # Calculate the new guess by adding the previous guess to the\n        # previous guess squared, and dividing by 2.\n        new_guess = (guess + number / guess) / 2\n        # If the new guess is within the desired error, return it.\n        if abs(new_guess - guess) < epsilon:\n            return new_guess\n        # Otherwise, update the guess.\n        guess = new_guess",
        "test": "assert babylonian_squareroot(1) == 1",
        "num_ids": 2033,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize the length of the longest palindromic substring and the starting point of the longest palindromic substring\n    max_palindrome = 0\n    start = 0\n\n    # Iterate through the string and check if the substring is a palindrome\n    for i in range(len(str)):\n        # If the substring is longer than the current longest palindromic substring, update the longest palindromic substring\n        if i > max_palindrome:\n            max_palindrome = i\n            start = i\n        # Check if the substring is a palindrome\n        if str[i] == str[start]:\n            start += 1\n            # If the substring is longer than the longest palindromic substring, update the longest palindromic substring\n            if i - start + 1 > max_palindrome:\n                max_palindrome = i - start + 1\n\n    # Return the length of the longest palindromic substring\n    return max_palindrome",
        "test": "assert lps(\"aab\") == 2",
        "num_ids": 3020,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += i/i\n    return harmonic_sum",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 1809,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            intersection.append(num1)\n    return intersection\n",
        "test": "assert intersection_array([1,2,3,4,5], [2,4,6,8,10]) == [2,4]",
        "num_ids": 2053,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count",
        "test": "assert count_X((), 1) == 0",
        "num_ids": 1685,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(item)\n    result.insert(0, element)\n    return result",
        "test": "assert insert_element([1], 3) == [3, 1]",
        "num_ids": 1800,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real_part = numbers[0]\n    imaginary_part = numbers[1]\n    angle = cmath.phase(numbers)\n    magnitude = cmath.sqrt(real_part**2 + imaginary_part**2)\n\n    if magnitude == 0:\n        return \"Error: the complex number is an imaginary number.\"\n\n    return (magnitude, angle)",
        "test": "assert convert(-1 + 2j) == (-1 + 2j, -0.7071067811865476)",
        "num_ids": 2386,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def count_integer(lst):\n    '''\n    Returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in lst:\n        if isinstance(num, int):\n            count += 1\n    return count\n\nlst = [1, 2, 3, 4, 5, 'a', 'b', 'c']\nprint(count_integer(lst)) # Output: 3",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l) * n):\n        combos.append(tuple(l[j] for j in range(i, i+n)))\n    return combos",
        "test": "assert combinations_colors([1, 2, 3], 5) == [((1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3)), ((1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2)), ((1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 4)), ((1, 3), (1, 2), (1, 3), (1, 2), (1, 4), (1, 2)), ((1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 5)), ((1, 3), (1, 2), (1, 3), (1, 2), (1, 5), (1, 2)), ((1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 6)), ((1, 3), (1, 2), (1, 3), (1, 2), (1, 6), (1, 2)), ((1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 7)), ((1, 3), (1, 2), (1, 3), (1, 2), (1, 7), (1, 2)), ((1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 8)), ((1, 3), (1, 2), (1, 3), (1, 2), (1, 8), (1, 2)), ((1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 9)), ((1, 3), (1, 2), (1, 3), (1, 2), (1, 9), (1, 2)), ((1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 10)), ((1, 3), (1, 2), (1, 3), (1, 2), (1, 10), (1, 2))]",
        "num_ids": 5993,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(1) == 0",
        "num_ids": 1734,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 1076,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2",
        "test": "assert maximize_elements((1, 2, 3), (3, 2, 1)) == (3, 2, 1)",
        "num_ids": 2208,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    if n < 1:\n        return None\n\n    # Check if n is a prime number\n    if n == 2:\n        return 2\n    elif n % 2 == 0:\n        return None\n\n    # Check if n is divisible by any number less than or equal to sqrt(n)\n    if n % 2 == 0 and n % 3 == 0:\n        return None\n\n    # Check if n is even\n    if n % 2 == 0:\n        return 3\n\n    # Check if n is odd\n    if n % 2!= 0:\n        return 5\n\n    # Initialize variables\n    i = 5\n    prime = 5\n\n    # Iterate through prime numbers up to sqrt(n)\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return None\n\n        if i * i > n:\n            break\n\n        i += 6\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return prime",
        "test": "assert newman_prime(5) == 5",
        "num_ids": 5233,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # create a new tuple to store the result\n    result_tup = ()\n\n    # iterate over the tuples and perform division operation element-wise\n    for num1, num2 in zip(test_tup1, test_tup2):\n        result_tup += (num1 / num2,)\n\n    return result_tup",
        "test": "assert division_elements( (1, 2, 3), (1, 2, 3) ) == (1, 1, 1)",
        "num_ids": 2800,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])",
        "test": "assert split_two_parts([], 0) == ([], [])",
        "num_ids": 2771,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age // 7",
        "test": "assert dog_age(0) == 0",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = int(step)  # Convert step to integer\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+n])\n        i += n\n    return result",
        "test": "assert list_split([], 1) == []",
        "num_ids": 1982,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert lateralsurface_cube(0) == 0",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''  \n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i*i  \n    return sum  ",
        "test": "assert square_Sum(1) == 1**2, \"The function should return the sum of squares of the first odd natural number.\"",
        "num_ids": 1489,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Create an array of zeros of length n+1\n    arr = [0] * (n+1)\n\n    # Fill the array with 1's\n    for i in range(1, n+1):\n        arr[i] = 1\n\n    # Calculate the nth power of 1\n    result = 1\n    for i in range(1, n+1):\n        result *= arr[i]\n\n    # Return the result\n    return result",
        "test": "assert find_star_num(0) == 1",
        "num_ids": 1810,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 1330,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and i % 2 == 0:\n            total += arr[i]\n    return total",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 15  # Test case 2",
        "num_ids": 2022,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize a list of even natural numbers and their corresponding powers\n    powers = [(2*i+1, i**5) for i in range(n)]\n\n    # Initialize a variable to store the sum of the even powers\n    sum_evens = 0\n\n    # Iterate through the list of powers and add their values to the sum_evens variable\n    for i in powers:\n        sum_evens += i[0]\n\n    # Return the sum of even powers\n    return sum_evens",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 1812,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def rear_extract(test_list):\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list",
        "test": "assert rear_extract([(1,2)]) == [2]",
        "num_ids": 1612,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n    return sub_tup\n",
        "test": "assert substract_elements((1, 2, 3), (1, 2, 3)) == (0, 0, 0)",
        "num_ids": 2957,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_coefficients = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_binomial_coefficients.append(math.factorial(i) // math.factorial(i-1))\n    return sum(even_binomial_coefficients)",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1946,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi*r*h\n    return volume",
        "test": "assert volume_cylinder(2,0) == 0.0, \"Volume of a cylinder with radius 2 and height 0 is incorrect.\"",
        "num_ids": 1524,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def dict_filter(dict, n):\n    '''\n    Filters a dictionary to only include entries with values greater than or equal to n.\n\n    :param dict: the dictionary to filter\n    :param n: the minimum value to include in the filtered dictionary\n    :return: a new dictionary with only the entries with values greater than or equal to n\n    '''\n    return {k: v for k, v in dict.items() if v >= n}",
        "test": "assert dict_filter({'a': 1, 'b': 2, 'c': 3}, 4) == {}",
        "num_ids": 1883,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements(('apple', 'banana', 'cherry', 'date', 'elderberry')) == 1",
        "num_ids": 1680,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1 or n == 4: # base case\n        return n*n\n    elif n % 2 == 0: # even number of decagonal\n        num = n//2 # get the number of even rows\n        if n % 2 == 0: # even number of rows\n            return (num*num + num + 1) * n/2 # calculate the nth decagonal\n        else: # odd number of rows\n            return (num*num + num + 1) * n/2 # calculate the nth decagonal\n    else: # odd number of decagonal\n        return (n*n + 1) // 2 # calculate the nth decagonal",
        "test": "assert is_num_decagonal(0) == 0",
        "num_ids": 1873,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, value in enumerate(dlist):\n        if value == item:\n            return True, i\n    return False, -1",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2) # returns True and 2",
        "num_ids": 1920,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set from the list of elements\n    unique_set = set(test_list)\n    # Check if the set contains all the unique elements\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 1767,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    return [x - y for x, y in zip(nums1, nums2)]",
        "test": "assert sub_list([],[]) == []",
        "num_ids": 1488,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # initialize a list to store the frequency of each digit\n    for digit in str(n):  # iterate over each digit in the integer\n        freq[int(digit)] += 1  # increment the frequency of the corresponding digit in the freq list\n    for i in range(1, 10):  # iterate over each digit from 1 to 9\n        if freq[i] > i:  # check if the frequency of the current digit is greater than the current digit itself\n            return False  # return False if the frequency of the current digit is greater than the current digit itself\n    return True  # return True if all the digits in the integer have the same frequency",
        "test": "assert validate(123) == True, \"The frequency of each digit in the integer is less than or equal to the digit itself.\"",
        "num_ids": 2205,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True",
        "test": "assert check_element([1,2,3,4,5],6) is False",
        "num_ids": 1371,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(?<![bB])a{2,3}')\n    return bool(pattern.search(text))\n\ntext = \"aaaabbbccc\"\nprint(text_match_two_three(text))  # Output: True\n\ntext = \"aaaaccc\"\nprint(text_match_two_three(text))  # Output: True\n\ntext = \"aaabb\"\nprint(text_match_two_three(text))  # Output: False",
        "test": "assert text_match_two_three(\"abc\") == False",
        "num_ids": 1728,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # initialize variables\n    max_so_far = a[0]  # initialize max_so_far with the first element of the array\n    current_sum = a[0]  # initialize current_sum with the first element of the array\n\n    # iterate through the array, keeping track of current_sum and max_so_far\n    for i in range(1, n):\n        current_sum = max(a[i], current_sum + a[i])\n        max_so_far = max(max_so_far, current_sum)\n\n    # calculate the sum of the largest subarray of the modified array\n    max_sum = max_so_far * k\n\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1], 1, 1) == 1",
        "num_ids": 3423,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(1) == 1 # test case 1",
        "num_ids": 2845,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    # create an empty list to store the maximum length values\n    max_length_list = []\n\n    # loop through the list of lists\n    for list2 in list1:\n        # loop through the elements in each list\n        for element in list2:\n            # if the length of the element is greater than the current maximum,\n            # update the maximum length value\n            if len(element) > len(max_length_list[0]):\n                max_length_list.append(element)\n\n    # return the maximum length list\n    return max_length_list",
        "test": "assert max_length([]) == []",
        "num_ids": 3198,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n    Args:\n        n (int): number of posts in the fence\n        k (int): number of distinct colors in the fence\n\n    Returns:\n        int: the number of ways of painting the fence\n\n    Examples:\n        >>> count_no_of_ways(5, 3)\n        3\n\n        >>> count_no_of_ways(7, 4)\n        20\n\n        >>> count_no_of_ways(8, 5)\n        45\n\n    \"\"\"\n    # base case\n    if k == 1:\n        return 1\n    elif k == 2:\n        return 2\n\n    # recursive case\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            # check if the color of the jth post is the same as the i-th post and the kth color\n            if i == j or colors[j] == colors[i] or j % 2 == 0:\n                count += count_no_of_ways(n, k-1)\n    return count",
        "test": "assert count_no_of_ways(n=3, k=2) == 2, \"count_no_of_ways(n=3, k=2) should return 2\"",
        "num_ids": 3771,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # Calculate quotient as integer division\n    quotient = int(n / m)\n    \n    # Round down to nearest integer\n    return quotient",
        "test": "assert find(10,5) == 2",
        "num_ids": 1341,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/2",
        "test": "assert otherside_rightangle(6,4) == 12",
        "num_ids": 1295,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif isinstance(listval[0], int) or isinstance(listval[0], float):\n        return max(listval)\n    else:\n        return max(map(max_val, listval))",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5, \"The maximum value in the list [1, 2, 3, 4, 5] is not 5.\"",
        "num_ids": 1990,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "test": "assert sum_div(1) == 1",
        "num_ids": 1386,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def get_Inv_Count(arr):\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize the count\n    count = 0\n\n    # Iterate through the array\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            # Swap the elements\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            count += 1\n\n    return count",
        "test": "assert get_Inv_Count([]) == 0",
        "num_ids": 1894,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def flatten_list(nested_list):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "test": "assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4]",
        "num_ids": 2269,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = stdata[0][1]\n    for tup in stdata:\n        if tup[1] > max_val:\n            max_val = tup[1]\n    return max_val",
        "test": "assert max_aggregate([(\"a\", 1), (\"a\", 2), (\"b\", 3), (\"b\", 4), (\"c\", 5), (\"d\", 7)]) == 7",
        "num_ids": 2652,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(n, 0, -1):\n        current_sum = 0\n        for j in range(i):\n            current_sum += 1\n        if current_sum == n:\n            count += 1\n    return count\n\nprint(count_binary_seq(5)) # Output: 1\nprint(count_binary_seq(3)) # Output: 1\nprint(count_binary_seq(7)) # Output: 2\nprint(count_binary_seq(10)) # Output: 3",
        "test": "assert count_binary_seq(1) == 1",
        "num_ids": 2377,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def dict_depth(d):\n    '''\n    Find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value))\n        else:\n            depth += 1\n    return depth",
        "test": "assert dict_depth({'a':1}) == 1",
        "num_ids": 2737,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Initialize the index with the given value\n    if index == 0:\n        return arr[0]\n\n    # If the range is empty, it means we are at the end of the array and the element at the index is the last element\n    if ranges[index-1] == 0:\n        return arr[index]\n\n    # If the element at the index is greater than the range, we need to rotate the array\n    # After the rotations, the element at the index will be in the correct position\n    if arr[ranges[index-1]-1] > arr[ranges[index]-1]:\n        arr = rotate(arr, ranges[index-1], rotations-1)\n        return find_Element(arr, ranges, rotations, index-1)\n    else:\n        return arr[ranges[index-1]-1]\n\ndef rotate(arr, n, k):\n    \"\"\"\n    Rotate the given array by k positions.\n    \"\"\"\n    return arr[-k:] + arr[:-k]",
        "test": "assert find_Element([1,2,3,4,5], [0,3], [4,1,2,3,0], 0) == 1",
        "num_ids": 2451,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word.startswith('p')]\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return None, None",
        "test": "assert start_withp([\"pear\", \"pineapple\", \"kiwi\"]) == (\"pear\", \"pineapple\")",
        "num_ids": 1874,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize prefix sum array\n    prefix_sum = [0] * n\n\n    # Initialize sum and max values\n    max_sum = float('-inf')\n    max_i = -1\n\n    # Traverse prefix sum array and update max sum and max index\n    for i in range(n):\n        prefix_sum[i] += a[i]\n\n        # If current prefix sum is greater than max sum, update max sum and max index\n        if prefix_sum[i] > max_sum:\n            max_sum = prefix_sum[i]\n            max_i = i\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum + a[max_i]",
        "test": "assert max_sum_increasing_subseq([1, 10, 15, 20, 25], 5, 3, 3) == 50, \"Incorrect output for max_sum_increasing_subseq([1, 10, 15, 20, 25], 5, 3, 3)\"",
        "num_ids": 3897,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = tuple(deepcopy(tuplex)[:m]) + tuple(deepcopy(tuplex)[m:])\n    return colon",
        "test": "assert colon_tuplex(tuple(),1,2) == tuple()",
        "num_ids": 2047,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize the largest product of the selected factor and the remaining factors\n    largest_product = float('-inf')\n\n    # Loop through the remaining factors\n    for factor in range(1, N + 1):\n        # Calculate the product of the current factor and the largest product of the selected factor\n        current_product = nums1[0] * nums2[0] * factor\n\n        # Check if the current product is greater than the largest product so far\n        if current_product > largest_product:\n            # Update the largest product\n            largest_product = current_product\n\n    # Return the largest product\n    return largest_product",
        "test": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == 30",
        "num_ids": 3568,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(1, 3) == 3",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def string_to_tuple(s):\n    '''\n    Convert a string to a tuple of its characters.\n    '''\n    return tuple(s)",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the leftmost unset bit as 1\n    left_most_unset_bit = 1\n\n    # Iterate through the binary representation of the number\n    for i in range(len(bin(n))-2, -1, -1):\n        # If the binary representation of the number is 0b00000000,\n        # set the leftmost unset bit as 0 and break out of the loop\n        if bin(n)[i] == '0':\n            left_most_unset_bit = 0\n            break\n\n    # Set the leftmost unset bit in the number\n    n |= left_most_unset_bit\n\n    return n",
        "test": "assert set_left_most_unset_bit(0) == 0  # set the leftmost unset bit to 0",
        "num_ids": 1984,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone using the formula V = pi * r^2 * h\n    '''\n    vol = math.pi * r**2 * h\n    return vol",
        "test": "assert volume_cone(1,1) == 3.141592653589793",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Check if n is positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Error: Input must be a positive integer.\"\n\n    # Initialize variable to hold highest power of 2\n    highest_power_of_2 = 1\n\n    # Loop through all possible powers of 2 from 1 to n\n    for i in range(1, n+1):\n        # If i is a power of 2 and its highest power of 2 is less than or equal to i\n        if i == i and highest_power_of_2 <= i:\n            highest_power_of_2 = i\n\n    return highest_power_of_2",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 2405,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 1: # base case\n        return n\n    else: # recursive case\n        return n + find_lucas(n-1)",
        "test": "assert find_lucas(10) == 55",
        "num_ids": 1419,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Replace all occurrences of the format string with the string\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "test": "assert add_string([], 'hello') == []",
        "num_ids": 1714,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Convert a list of lists to a nested dictionary.\n\n    Args:\n    l1: list of lists, where each inner list contains a dictionary.\n    l2: list of lists, where each inner list contains a tuple containing two elements: the key to match, and the value to assign to that key.\n    l3: list of lists, where each inner list contains a tuple containing three elements: the key to match, the value to assign to that key, and the list to select from.\n\n    Returns:\n    A nested dictionary containing the original list.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        key, value = l2[i]\n        if isinstance(key, (tuple, list)):\n            if isinstance(value, (tuple, list)):\n                result[key] = convert_list_dictionary(l1[i], l2[i + 1], l3[i + 1])\n            elif value in l1[i]:\n                result[key] = l1[i][value]\n            else:\n                result[key] = value\n        else:\n            if key in l1[i]:\n                result[key] = l1[i][key]\n            else:\n                result[key] = value\n    return result",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 2314,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def get_max_sum(n):\n    max_sum = 0\n    for i in range(1, n+1):\n        max_sum += max((i//2 + i//3 + i//4 + i//5), i)\n    return max_sum\n\nn = 5\nprint(\"The maximum sum possible is:\", get_max_sum(n))",
        "test": "assert get_max_sum(0) == 0",
        "num_ids": 2058,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def max_length_list(input_list):\n    '''\n    Find the list with the maximum length.\n    '''\n\n    if not input_list:\n        return []\n\n    max_length = 0\n    max_list = []\n\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n\n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 2292,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_list = list(set(test_tup))\n    return unique_list == sorted(unique_list)",
        "test": "assert check_distinct(()) == True",
        "num_ids": 1152,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def first_non_repeating_character(str1):\n    # Initialize a dictionary to keep track of character frequencies\n    freq = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, do nothing\n        if char in freq:\n            continue\n        # If the character is not in the dictionary, add it with a frequency of 1\n        freq[char] = 1\n\n    # Loop through the dictionary and find the first non-repeating character\n    for char, freq in freq.items():\n        if freq == 1:\n            return char",
        "test": "assert first_non_repeating_character(\"abc\") == \"a\"",
        "num_ids": 3183,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # convert the string to lowercase\n    string = string.lower()\n    # replace the special characters with an empty string\n    string = string.replace('/', '').replace('\\\\', '').replace('\"', '').replace('\\'', '').replace(',', '')\n    # check if the string starts with the same character as the regex\n    if string.startswith(regex):\n        # check if the string ends with the same character as the regex\n        if string.endswith(regex):\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert check_char('abcdz') == False",
        "num_ids": 1556,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # sort the list of numbers\n    sorted_list = [a, b, c]\n    sorted_list.sort()\n\n    # get the length of the sorted list\n    sorted_length = len(sorted_list)\n\n    # calculate the median index\n    median_index = (sorted_length - 1) // 2\n\n    # if the length of the list is odd, return the middle number\n    if sorted_length % 2 == 1:\n        return sorted_list[median_index]\n    # if the length of the list is even, return the average of the two middle numbers\n    else:\n        return (sorted_list[median_index - 1] + sorted_list[median_index]) / 2",
        "test": "assert median_numbers(2,3,4) == 3",
        "num_ids": 2125,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1755,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\n    Args:\n    test_tup1 (tuple): A tuple containing the first element of the first element of the second tuple.\n    test_tup2 (tuple): A tuple containing the first element of the first element of the second tuple.\n\n    Returns:\n    tuple: A tuple containing the result of the bitwise xor operation.\n    '''\n\n    # Creating a tuple to store the result\n    result_tup = ()\n\n    # Iterating through the elements of the second tuple\n    for element in test_tup2:\n        # Calculating the bitwise xor between the first element of the first tuple and the current element\n        result_element = test_tup1[0] ^ element\n\n        # Appending the result element to the result tuple\n        result_tup = result_tup + (result_element,)\n\n    # Returning the result tuple\n    return result_tup",
        "test": "assert bitwise_xor((1, 1, 1), (0, 0, 0)) == (1, 1, 1)",
        "num_ids": 2383,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if item not in unique_tuples:\n            unique_tuples.add(item)\n    return len(unique_tuples)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 2060,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tuple = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if len(test_tup1) > len(test_tup2):\n            result_tuple += (test_tup1[i],)\n        elif len(test_tup2) > len(test_tup1):\n            result_tuple += (test_tup2[i],)\n        else:\n            result_tuple += (test_tup1[i] + test_tup2[i],)\n    return result_tuple\n",
        "test": "assert add_nested_tuples((1,2,3), (4,5,6)) == (5, 7, 9)",
        "num_ids": 2756,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(5,6) == 5",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for item in tuplex:\n        if item == tuple1:\n            return True\n    return False",
        "test": "assert check_tuplex(('a', 'b', 'c'), 'a') == True",
        "num_ids": 1183,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert find_Parity(123) == 1, \"find_Parity(123) should return 1, not {}\".format(find_Parity(123))  # check the correctness of find_Parity",
        "num_ids": 1694,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # get the original number as a string\n    num_str = str(n)\n    # iterate through each digit of the number and rearrange it\n    for i in range(len(num_str)):\n        # find the largest number in the range\n        max_num = int(num_str[i])\n        # iterate through each digit and rearrange it if the number is greater\n        for j in range(i+1, len(num_str)):\n            # check if the current digit is greater than the largest number\n            if int(num_str[j]) > max_num:\n                # swap the digits\n                num_str = num_str[:i] + str(int(num_str[i])+1) + num_str[i+1:]\n                break\n    # convert the string back to an integer\n    num = int(num_str)\n    return num",
        "test": "assert rearrange_bigger(0) == 0",
        "num_ids": 2771,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store pairs of smallest elements\n    heap1 = []\n    heap2 = []\n\n    # add all elements from nums1 to heap1\n    heapq.heappush(heap1, (-nums1[0], -nums1[1]))\n\n    # add all elements from nums2 to heap2\n    heapq.heappush(heap2, (-nums2[0], -nums2[1]))\n\n    # iterate till heap1 is not empty and heap2 is not empty\n    while len(heap1) > 0 and len(heap2) > 0:\n        # get the smallest pair from heap1 and heap2\n        smallest1 = heapq.heappop(heap1)\n        smallest2 = heapq.heappop(heap2)\n\n        # if the sum of smallest1 and smallest2 is greater than k\n        if smallest1[0] + smallest2[0] > k and smallest1[1] + smallest2[1] > k:\n            # add the smallest pair to the list of pairs and remove it from heap1 and heap2\n            pairs.append((smallest1[0], smallest1[1], smallest2[0], smallest2[1]))\n            heapq.heappush(heap1, smallest1)\n            heapq.heappush(heap2, smallest2)\n\n        # if the sum of smallest1 and smallest2 is less than k, remove the smallest pair from heap1 and heap2\n        else:\n            heapq.heappop(heap1)\n            heapq.heappop(heap2)\n\n    # return the list of pairs\n    return pairs",
        "test": "assert k_smallest_pairs([1,2,3,4,5], [3,4,5,1,2], 3) == [3,4]",
        "num_ids": 4122,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pairs = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pairs.append((list1[i], list1[j]))\n    pairs.sort(key=lambda x: x[0])\n    return pairs[0][0] * pairs[0][1]",
        "test": "assert min_product_tuple([0, 0, 0]) == 0",
        "num_ids": 2902,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def min_val(lst):\n    if len(lst) == 0:\n        return None  # Empty list\n    else:\n        return lst[0]  # Return the first element in the list",
        "test": "assert min_val([1.1, 2.2, 3.3, 4.4, 5.5]) == 1.1",
        "num_ids": 1535,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert snake case to camel case\n    word = re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n    # convert first letter to lowercase\n    return re.sub(r'[a-z]', lambda m: m.group(0).lower(), word)",
        "test": "assert snake_to_camel('PascalCaseString') == 'PascalCaseString'",
        "num_ids": 1481,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list",
        "test": "assert remove_odd([]) == []",
        "num_ids": 1594,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n <= 0 or n > len(list1):\n        return None\n    \n    return list1[n-1]\n",
        "test": "assert extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 1) == ('a', 1)",
        "num_ids": 2059,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
        "test": "assert overlapping([], [1,2,3,4,5]) == False",
        "num_ids": 1580,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product",
        "test": "assert max_Product([-1,-2,-3,-4,-5]) == 24, \"max_Product([-1,-2,-3,-4,-5]) should return 24\"",
        "num_ids": 2461,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize a dictionary to store the count of each first element\n    count_dict = {}\n\n    # Iterate through the list of tuples and count the occurrences of each first element\n    for tup in Input:\n        # Check if the first element is already present in the dictionary\n        if tup[0] in count_dict:\n            # If it is present, increment its count\n            count_dict[tup[0]] += 1\n        else:\n            # If it is not present, add it to the dictionary with count of 1\n            count_dict[tup[0]] = 1\n\n    # Find the first element which has count of 1 in the dictionary\n    max_count = max(count_dict.values())\n    common_tup = None\n    for tup in Input:\n        if count_dict[tup[0]] == max_count:\n            if common_tup is None or tup[0] < common_tup[0]:\n                common_tup = tup\n\n    return common_tup",
        "test": "assert group_tuples((('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5))) == ('a', 1)",
        "num_ids": 3021,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def Find_Max(lst):\n    # Initialize maximum length and maximum element to None\n    max_len = 0\n    max_element = None\n    \n    # Loop through each element in the list\n    for i in lst:\n        # If current element is greater than the current maximum, update maximum length and maximum element\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_element = i\n    \n    # Return the maximum element\n    return max_element",
        "test": "assert Find_Max([]) == None",
        "num_ids": 1750,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    length = len(list1)\n    for num in list1:\n        total += round(num)\n    print(\"The rounded and sum list is: \", total * length)",
        "test": "assert round_and_sum([-1, -2, -3, -4, -5]) == -1",
        "num_ids": 2009,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i ** 3\n    return cube_sum",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 1236,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = []\n    for item in test_tup:\n        result.append(str(item))\n    return tuple(result)",
        "test": "assert concatenate_tuple(('hello', 'world', '!', '?')) == concatenate_tuple(('hello', 'world', '!', '?'))",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def find_Average_Of_Cube(n):\n    # initialize the average to 0\n    average = 0\n\n    # loop over the first n natural numbers\n    for i in range(1, n+1):\n        # calculate the cube of the current number\n        cube = i**3\n\n        # add the cube to the average\n        average += cube\n\n    # return the average\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Extracting the rear index of each string in the given tuple\n    rear_indices = [i for i, x in enumerate(test_tuple) if x.isalpha()]\n    # Removing duplicates from the rear_indices list\n    unique_rear_indices = list(set(rear_indices))\n    # Extracting only the rear index element of each unique string in the given tuple\n    return tuple(test_tuple[i] for i in unique_rear_indices)",
        "test": "assert extract_rear((\"hello\", \"world\")) == (\"hello\", \"world\")",
        "num_ids": 1459,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 3) == 0 # case 4: the list is empty",
        "num_ids": 1782,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1567,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 34,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define regular expression pattern\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # Check if the date string matches the pattern\n    if re.match(pattern, dt):\n        # Extract the date components of the original date string\n        year = int(dt[:4])\n        month = int(dt[5:7])\n        day = int(dt[8:10])\n\n        # Create a new date string in the desired format\n        new_dt = f'{day:02d}-{month:02d}-{year:04d}'\n\n        # Return the new date string\n        return new_dt\n    else:\n        # If the date string does not match the pattern, return None\n        return None",
        "test": "assert change_date_format(\"2022-01-01\") == \"01-01-2022\"",
        "num_ids": 2644,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Choose a gap size that is large enough to sort the array.\n    gap = n // 2\n    while gap > 0:\n        # Iterate through the array and swap adjacent elements if they are in the wrong order.\n        for i in range(gap, n):\n            if my_list[i - gap] > my_list[i]:\n                my_list[i], my_list[i - gap] = my_list[i - gap], my_list[i]\n        # Reduce the gap size by half.\n        gap = gap // 2\n\n    return my_list",
        "test": "assert shell_sort([1000000000]) == [1000000000]",
        "num_ids": 3240,
        "indeed": false
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)",
        "test": "assert and_tuples( (1,), (2,) ) == (1,)",
        "num_ids": 2648,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Solve for the coefficients\n    d = (b*b - 4*a*c)/(2*b)\n    e = (2*a*c - b*b)/(2*a)\n    f = (-1*a*b + b*b)/(2*b)\n\n    # Compute the directrix\n    directrix = f - (e**2)/2 - d*e + d*f\n    \n    return directrix",
        "test": "assert parabola_directrix(1, 2, 3) == 1",
        "num_ids": 1707,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False # both lists have at least one common element",
        "num_ids": 2033,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    if height <= 0:\n        return \"Invalid height\"\n    # calculate the base lengths\n    base_length1 = base1 + base2\n    base_length2 = 2 * base1\n    # find the length of the two medians\n    if height % 2 == 0:\n        median1 = (base_length1 + base_length2) / 2\n        median2 = (base_length1 + base_length2) / 2 - 1\n    else:\n        median1 = base_length1 / 2\n        median2 = base_length1 / 2\n    # calculate the trapezium length\n    trapezium = (base1 + base2 + median1 + median2) / 2\n    return trapezium",
        "test": "assert median_trapezium(1,2,3) == 3",
        "num_ids": 2166,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the entered number is greater than the elements of the given array.\n    '''\n\n    if arr[0] <= number <= arr[-1]:\n        return True\n    else:\n        return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 1503,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(?![b]*[b])b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"aabbc\") == False",
        "num_ids": 4240,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 1030,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num >= 0:\n            neg_nums.append(num)\n    return neg_nums",
        "test": "assert neg_nos([]) == []",
        "num_ids": 1278,
        "indeed": false
    },
    {
        "number": 437,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters from a string.\n\n    Args:\n        str1 (str): The string to remove odd characters from.\n\n    Returns:\n        str: The string with all odd characters removed.\n    '''\n    # Define a list of even numbers to use as a mask to select odd characters\n    even_numbers = [2, 4, 6, 8]\n\n    # Initialize an empty string to store the modified string\n    modified_str = ''\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is an odd number, remove it\n        if char in even_numbers:\n            modified_str += char\n        else:\n            # Otherwise, add it to the modified string\n            modified_str += char\n\n    return modified_str",
        "test": "assert remove_odd('') == ''",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Counts the number of bidirectional tuple pairs in a given list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] > test_list[j][1]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 1916,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result += i\n    return result",
        "test": "assert multiple_to_single([]) == 0",
        "num_ids": 1577,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input and returns the first adverb found in the sentence and its position.\n    '''\n\n    # define the pattern for finding adverbs\n    pattern = re.compile(r'\\b(a|an|the|in)([sS]he|s)([^aS])\\b')\n\n    # find all matches in the sentence\n    matches = re.findall(pattern, text)\n\n    # initialize the variables to store the adverb and its position\n    adverb = ''\n    position = 0\n\n    # loop through each match and check if it is the first adverb\n    for match in matches:\n        if match[1] == 'a':\n            adverb = match[2]\n            position = len(match[2])\n            break\n\n    # return the adverb and its position\n    return adverb, position",
        "test": "assert find_adverb_position(\"This is a test sentence.\") == (2, 11)",
        "num_ids": 3326,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l * l * l",
        "test": "assert surfacearea_cube(1) == 1",
        "num_ids": 865,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    \n    return positive_count / len(nums)",
        "test": "assert positive_count([0, 0, 0, 0, 0]) == 0",
        "num_ids": 2052,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for num in list1: \n        if num < 0: \n            neg_list.append(num)\n    if len(neg_list) == 0: \n        return -1\n    else: \n        return neg_list[-1]",
        "test": "assert largest_neg([-5, 10, -2, 4]) == -2, \"largest_neg([-5, 10, -2, 4]) should return -2\"",
        "num_ids": 1716,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    # Initialize a new list to store the trimmed tuples\n    trimmed_list = []\n\n    # Loop through each tuple in the original list\n    for t in test_list:\n        # Loop through each tuple by k in the original list\n        for i in range(len(t) - K + 1):\n            # Add the first K elements of the original tuple to a new list\n            new_t = t[:K]\n            # Add the rest of the tuple to the new list\n            new_t += t[K:]\n            # Add the trimmed tuple to the new list\n            trimmed_list.append(new_t)\n\n    return trimmed_list",
        "test": "assert trim_tuple([], 2) == []",
        "num_ids": 2133,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n        test_tup1 (tuple): A tuple of integers or floats.\n        test_tup2 (tuple): A tuple of integers or floats.\n\n    Returns:\n        tuple: A tuple containing the index wise multiplication of the tuple elements.\n\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 3188,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # create a Counter object to count the frequency of each element in the list\n    freq_obj = Counter(lst)\n\n    # loop through the tuple and count the frequency of each element\n    count = 0\n    for tup_element in tup:\n        count += freq_obj[tup_element]\n\n    return count",
        "test": "assert count_Occurrence((1, 2, 3, 4, 5), [1, 2, 3, 4, 5]) == 5",
        "num_ids": 2018,
        "indeed": true
    },
    {
        "number": 447,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 1581,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize variables\n    sum_p = 0\n    sum_n = 1\n    count = 0\n\n    # calculate sum of perrin numbers\n    while count < n:\n        sum_p += sum_n\n        count += 1\n        sum_n += 1\n\n    return sum_p\n",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a list of string values.\n    \n    :param str_list: A list of string values.\n    :param size: The number of strings to extract.\n    :return: A list of size number of strings.\n    '''\n    return str_list[:size]",
        "test": "assert extract_string(\"Hello World\", 0) == \"\"",
        "num_ids": 1470,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Remove whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1",
        "test": "assert remove_whitespaces(\"   This is a test   \") == \"Thisisatest\"",
        "num_ids": 1272,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    loss_rate = 0.05 # assuming 5% loss rate\n    loss = sale_amount * (loss_rate/100)\n    if loss > actual_cost:\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(50,50) == 0",
        "num_ids": 1386,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a positive integer as input and returns the sum of even factors of n.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        while n % i == 0:\n            sum += i\n            n //= i\n    if n > 1:\n        sum += n\n    return sum",
        "test": "assert sumofFactors(50) == 20",
        "num_ids": 1715,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[zZ]\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz(\"This is a test string containing 'z'.\") == True",
        "num_ids": 1677,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Check if the month number is a number between 1 and 12\n    if not (1 <= monthnum2 <= 12):\n        return False\n\n    # If the month number is a number between 1 and 12, check if it contains 31 days\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(31) == False",
        "num_ids": 2144,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list([]) == []",
        "num_ids": 1547,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize the minimum length and maximum length variables\n    min_length = float('inf')\n    max_length = 0\n\n    # Iterate through the list and update the minimum and maximum length variables\n    for num in lst:\n        if len(str(num)) < min_length:\n            min_length = len(str(num))\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n\n    # Create a sublist from the list that has the minimum length\n    sublist = []\n    for num in lst:\n        if len(str(num)) == min_length:\n            sublist.append(num)\n\n    return sublist",
        "test": "assert Find_Min([]) == []",
        "num_ids": 2342,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def rectangle_area(l, b):\n    area = l * b\n    return area",
        "test": "assert rectangle_area(5, 10) == 50, \"Expected rectangle area to be 50, but got %s\" % rectangle_area(5, 10)",
        "num_ids": 858,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove all uppercase substrings from a given string.\n    '''\n    # Use regular expression to match uppercase substrings\n    match = re.findall(r'[A-Z]', str1)\n    # Replace all uppercase substrings with an empty string\n    str2 = re.sub(r'[A-Z]', '', str1)\n    # Return the modified string\n    return str2",
        "test": "assert remove_uppercase(\"\") == \"\"",
        "num_ids": 1322,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def Extract(lst):\n    result = []\n    for sublist in lst:\n        if len(sublist) == 0:\n            continue  # skip empty sublists\n        if len(sublist) > 1:\n            result.append(sublist[0])  # get the first element of non-empty sublists\n    return result",
        "test": "assert Extract([]) == []",
        "num_ids": 951,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"\") == 0",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        return [[list1[0]]] + combinations_list(list1[1:])",
        "test": "assert combinations_list([]) == []",
        "num_ids": 4352,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Finds the maximum product subarray of the given array.\n\n    Args:\n        arr (list): The array to find the maximum subarray for.\n\n    Returns:\n        int: The maximum product subarray of the given array.\n    \"\"\"\n\n    # Initialize the maximum subarray product to negative infinity\n    max_product = float('-inf')\n\n    # Loop over all elements of the array\n    for i in range(len(arr)):\n        # Initialize the current subarray product to zero\n        subarray_product = 0\n\n        # Loop over all elements of the subarray\n        for j in range(i, len(arr)):\n            # Update the current subarray product with the current element\n            subarray_product += arr[j]\n\n            # Update the maximum subarray product if it is greater than the current subarray product\n            if subarray_product > max_product:\n                max_product = subarray_product\n\n    return max_product",
        "test": "assert max_subarray_product([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6, \"max_subarray_product([-2, 1, -3, 4, -1, 2, 1, -5, 4]) should return 6, but it returns {}\".format(max_subarray_product([-2, 1, -3, 4, -1, 2, 1, -5, 4]))",
        "num_ids": 2305,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "from collections import Counter\n\ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= len(set(dict.values())):\n        return False\n    else:\n        counter = Counter(dict.values())\n        if len(counter) == n:\n            return True\n        else:\n            return False",
        "test": "assert check_value({}, 0) is True",
        "num_ids": 1524,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for key, value in dict1.items():\n        if value:\n            result[key] = value\n    return result",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 1367,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def max_product(arr):\n    # find the maximum subarray ending at the first element of the array\n    max_subarray = [arr[0]]\n    max_product = arr[0] * max_subarray[0]\n    \n    # find the maximum subarray ending at the second element of the array\n    for i in range(1, len(arr)):\n        current_product = arr[i] * max_subarray[-1]\n        if current_product > max_product:\n            max_product = current_product\n        max_subarray.append(current_product)\n    \n    return max_product",
        "test": "assert max_product([1, 2, 3]) == 6",
        "num_ids": 2111,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[1] + test_tup[0], test_tup[1] - test_tup[0], test_tup[0] - test_tup[1])",
        "test": "assert add_pairwise((4, 5)) == (4, 9)",
        "num_ids": 2204,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product",
        "test": "assert find_remainder([10, 20, 30, 40, 50], 10) == 0",
        "num_ids": 1515,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0: # if the list is empty\n        return False\n    else:\n        for i in range(len(l)-1): # iterate over the list starting from the second element\n            if l[i] == l[i+1]: # check if the first element is the same as the second element\n                return True\n    return False",
        "test": "assert check_Consecutive([1, 2, 3, 2, 3, 4]) == False",
        "num_ids": 1728,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for element in test_list1:\n        if element in test_list2:\n            intersection.append(element)\n    return intersection",
        "test": "assert tuple_intersection([], []) == []",
        "num_ids": 2146,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace characters in a string with a new character.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char('hello world', 'x', 'x') == 'hello world'",
        "num_ids": 1298,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sorts a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(counter)\n    return sorted_dict",
        "test": "assert sort_counter({\"apple\": 2, \"banana\": 3, \"cherry\": 1, \"apple\": 2, \"orange\": 1}) == {\"apple\": 2, \"banana\": 3, \"cherry\": 1, \"orange\": 1}",
        "num_ids": 2799,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def big_sum(nums):\n    # Initialize the largest and smallest values to be the first element in the array\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Loop through the array and update the largest and smallest values as needed\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n            \n    # Return the sum of the largest and smallest values\n    return largest + smallest",
        "test": "assert big_sum([-5, -3, -1, 1, 3]) == -2",
        "num_ids": 1813,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def is_lower(string):\n    '''\n    Convert a string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower('hello') == 'hello'",
        "num_ids": 696,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define regular expression pattern to remove lowercase substrings\n    pattern = re.compile(r'\\b[a-z]\\b', re.IGNORECASE)\n    # replace lowercase substrings with an empty string\n    new_str = pattern.sub('', str1)\n    return new_str",
        "test": "assert remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\"",
        "num_ids": 1184,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 28,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # get the first character of the string\n    first_char = str(n)[0]\n    # convert the string to an integer\n    int_num = int(first_char)\n    # return the integer value of the first character\n    return int_num",
        "test": "assert first_Digit(0) == 0",
        "num_ids": 1375,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list with only the odd integers.\n    \"\"\"\n    new_lst = []\n    for num in lst:\n        if num % 2 == 1:\n            new_lst.append(num)\n    return new_lst",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1309,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Initialize variables\n    cube_sum = 1\n    natural_sum = 1\n\n    # Calculate sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        cube_sum += i ** 3\n\n    # Calculate sum of first n natural numbers\n    for i in range(1, n+1):\n        natural_sum += i\n\n    # Calculate difference\n    difference = cube_sum - natural_sum\n\n    return difference",
        "test": "assert difference(5) == 25",
        "num_ids": 1717,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] == 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == 0",
        "num_ids": 1810,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "test": "assert toggle_string(\"\") == \"\"",
        "num_ids": 1265,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Check if the input numbers are integers\n    if not isinstance(n1, int) or not isinstance(n2, int):\n        raise ValueError('Input numbers must be integers')\n\n    # Calculate the difference between the input numbers\n    diff = abs(n1 - n2)\n\n    # Initialize a variable to keep track of the sum of per-digit differences\n    total_sum = 0\n\n    # Loop through each digit of the difference and add the difference of the digit to the total sum\n    for digit in str(diff):\n        total_sum += int(digit)\n\n    # Return the total sum\n    return total_sum",
        "test": "assert digit_distance_nums(999, 999) == 0",
        "num_ids": 2400,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function finds the maximum subarray sum in a given list.\n\n    Parameters:\n    - a (list): A list of integers.\n    - size (int): The size of the sublist to be considered.\n\n    Returns:\n    - int: The maximum subarray sum found in the given list.\n    '''\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n",
        "test": "assert max_sub_array_sum([1], 1) == 1",
        "num_ids": 2702,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples and sort them\n    combined_tup = sorted(test_tup1 + test_tup2)\n    # Return the sorted tuple\n    return combined_tup\n",
        "test": "assert union_elements((\"a\", \"b\"), (\"c\", \"d\")) == sorted((\"a\", \"b\", \"c\", \"d\"))",
        "num_ids": 1884,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 33,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Find the length of the longest sublist in a list of integers.\n    '''\n    max_length = 0\n    current_length = 0\n    for num in lst:\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n        else:\n            max_length = max(max_length, current_length)\n    return max_length",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 1806,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = 'This is a \"test\" string with \"quotes\" between them.'\n\nprint(extract_values(text))",
        "test": "assert extract_values('This is a test string \"Python\" with \"Java\" in it') == ['Python', 'Java']",
        "num_ids": 1714,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5], 3) == 3 # correct count of pairs",
        "num_ids": 2512,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def split(word):\n    return list(word)",
        "test": "assert split(\"\") == []",
        "num_ids": 1042,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    return sum(digits)",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 1428,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n\n    Args:\n    list1 (list): A list to be checked for sorting.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    '''\n\n    # Initialize the minimum and maximum values to be checked\n    min_val = list1[0]\n    max_val = list1[-1]\n\n    # Check the first element of the list\n    if min_val >= max_val:\n        return True\n\n    # Check if the second element of the list is greater than the first element\n    if list1[1] > min_val:\n        return False\n\n    # Check if all the elements after the first element are greater than or equal to the first element\n    for i in range(2, len(list1)):\n        if list1[i] < min_val:\n            return False\n        elif list1[i] > max_val:\n            return False\n\n    # If all the elements are sorted, the list is sorted\n    return True\n",
        "test": "assert issort_list([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == True",
        "num_ids": 2341,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list",
        "test": "assert empty_list(0) == []",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def sort_sublists(list1):\n    # Create an empty list to store the sorted sublists\n    sorted_sublists = []\n    # Loop through each sublist of the input list\n    for sublist in list1:\n        # Create an empty list to store the sorted sublist elements\n        sorted_sublist = []\n        # Loop through each element of the sublist\n        for element in sublist:\n            # Add the element to the sorted sublist\n            sorted_sublist.append(element)\n        # Append the sorted sublist to the sorted sublists list\n        sorted_sublists.append(sorted_sublist)\n    # Return the sorted sublists list\n    return sorted_sublists",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 3559,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def two_unique_nums(nums):\n    '''\n    Remove duplicate numbers from a given number of lists.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list containing only unique numbers from the original list.\n\n    Examples:\n    >>> two_unique_nums([1, 2, 3, 3, 4, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> two_unique_nums([1, 2, 2, 2, 3, 3, 3])\n    [1, 2, 3]\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1984,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 1649,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "def surfacearea_cylinder(r,h):\n    area = math.pi*r*r\n    return area",
        "test": "assert surfacearea_cylinder(1,1) == 3.141592653589793",
        "num_ids": 1630,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Find the length of A and B\n    n1, n2 = len(A), len(B)\n    \n    # If A and B have different lengths, return False\n    if n1!= n2:\n        return False\n    \n    # Initialize two pointers to start of A and B\n    i, j = 0, 0\n    \n    # Compare the first elements of A with the first elements of B\n    while i < n1 and j < n2:\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        elif A[i] < B[j]:\n            i += 1\n        else:\n            j += 1\n            \n    # If all elements of A and B are present in A, return True\n    if i == n1:\n        return True\n    \n    # If all elements of A and B are present in B, return False\n    elif j == n2:\n        return False\n    \n    # If A and B have at least one common element, return True\n    else:\n        return True",
        "test": "assert is_Sub_Array([1,2,3,4,5], [3,4,5,6]) == False",
        "num_ids": 2453,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = n % 10\n    factorial = 1\n    for i in range(10, -1, -1):\n        factorial *= i\n        if factorial == n:\n            break\n    return last_digit",
        "test": "assert last_Digit_Factorial(1) == 1 # correct result",
        "num_ids": 1703,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Concatenate the three lists into a single flat list\n    flat_list = list1 + list2 + list3\n    \n    return flat_list",
        "test": "assert interleave_lists([],[],[]) == []",
        "num_ids": 2526,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set(test_tup1) - set(test_tup2)\n    return dissimilar_set",
        "test": "assert find_dissimilar(set([1,2,3]), set([3,4,5])) == set([1,2])",
        "num_ids": 2001,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # iterate through the nested tuple and remove uneven elements\n    result = []\n    for subtuple in test_tuple:\n        if isinstance(subtuple, tuple):\n            subresult = even_ele(subtuple, even_fnc)\n        elif isinstance(subtuple, list):\n            subresult = []\n            for item in subtuple:\n                if isinstance(item, (int, float)):\n                    if even_fnc(item):\n                        subresult.append(item)\n            subresult = tuple(subresult)\n        else:\n            subresult = subtuple\n        result.append(subresult)\n    return tuple(result)",
        "test": "assert even_ele((1, 2, 3, 4, 5), lambda x: x % 2 == 0) # returns True",
        "num_ids": 2562,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def surface_Area(b, s):\n    area = (b * s) / 2\n    return area",
        "test": "assert surface_Area(4,3) == 6, \"The surface area of a square pyramid with a base edge of 4 and height of 3 is not equal to 6.\"",
        "num_ids": 1303,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True",
        "num_ids": 880,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def catalan_number(num):\n    catalan = 1\n    for i in range(2, num+1):\n        catalan *= i\n    return catalan",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 2347,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'[aeiouy]\\w+ly'\n    match = re.search(pattern, text)\n    if match:\n        positions = []\n        start = match.start()\n        end = match.end()\n        while start < end and text[start]!='':\n            positions.append(start)\n            start += 1\n        while end > start and text[end-1]!='':\n            positions.append(end-1)\n            end -= 1\n        return positions\n    else:\n        return None\n\ntext = \"This is a great day. It's beautiful in the morning. The weather is good.\"\nadverbs = find_adverbs(text)\nif adverbs:\n    print(adverbs)\nelse:\n    print(\"No adverbs found in the text.\")\n",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == ([(24, 29)], [(14, 20)])",
        "num_ids": 2740,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n\n    return heap",
        "test": "assert expensive_items([], 10) == []",
        "num_ids": 2091,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        raise ValueError(\"n must be less than or equal to the length of the list\")\n    return l[:n] + l[n:]",
        "test": "assert split_Arr([], 0) == []",
        "num_ids": 1918,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 914,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return abs(max_num - min_num)",
        "test": "assert big_diff([1,2,3,4,5]) == 4",
        "num_ids": 1579,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    # Find the square root of the sum of the squares\n    s = (a + b) ** 0.5\n    \n    # Find the sum of the squares of the numbers between a and b\n    ps = 0\n    for i in range(int(a), int(b) + 1):\n        ps += i ** 2\n    \n    # Return the number of perfect squares found\n    return ps",
        "test": "assert perfect_squares(1, 1) == 1",
        "num_ids": 1814,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to radians\n    theta = cmath.phase(x + y * 1j)\n    \n    # Calculate rectangular coordinates\n    rect_x = x * (math.cos(theta)) - y * (math.sin(theta))\n    rect_y = x * (math.sin(theta)) + y * (math.cos(theta))\n    \n    return rect_x, rect_y",
        "test": "assert polar_rect(0,0) == (0,0), \"Test case 1 failed. The function should return (0,0) for the given input (0,0).\"",
        "num_ids": 1490,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def swap_List(newList):\n    # Check if the list is empty or has only one element\n    if len(newList) <= 1:\n        return newList\n\n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # Return the modified list\n    return newList",
        "test": "assert swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 1461,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Calculate the sum of all the binomial coefficients up to the nth term\n    coef = 1\n    for i in range(1,n+1):\n        coef *= i\n    \n    # Find the sum of all the products of the first k terms of the binomial coefficients\n    product = 1\n    for i in range(k):\n        product *= i\n    \n    # Return the sum of the products and the sum of the binomial coefficients\n    return coef + product",
        "test": "assert binomial_Coeff(5,4) == 120",
        "num_ids": 2210,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from ip address\n    ip = re.sub('^0+', '', ip)\n    # convert ip back to string\n    ip = str(ip)\n    return ip",
        "test": "assert removezero_ip('123.456.789') == '123.456.789'",
        "num_ids": 2512,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables\n    first_even = 0\n    first_odd = 0\n    diff = 0\n\n    # Loop through the list\n    for num in list1:\n        # Check if the number is even\n        if num % 2 == 0:\n            first_even += 1\n        # Check if the number is odd\n        else:\n            first_odd += 1\n\n    # Calculate the difference\n    if first_even > 0:\n        diff = list1[first_odd - 1] - list1[first_even - 1]\n    else:\n        diff = 0\n\n    return diff",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1 # check if the function works correctly for a given list",
        "num_ids": 2343,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # Convert the binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Count the number of 1s in the binary numbers\n    count = 0\n    while num1!= 0:\n        count += 1\n        num1 &= num1 - 1\n    \n    # Subtract 1 from the number of 1s\n    count -= 1\n    \n    # Calculate the minimum number of swaps required\n    min_swaps = count\n    \n    return min_swaps",
        "test": "assert min_Swaps(\"1010\", \"1011\") == 1 # swaps are made on '0'",
        "num_ids": 2991,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        if isinstance(item, str):\n            size += len(item)\n        elif isinstance(item, bytes):\n            size += len(item)\n        elif isinstance(item, int):\n            size += sys.getsizeof(item)\n        elif isinstance(item, float):\n            size += sys.getsizeof(item)\n        elif isinstance(item, tuple):\n            size += tuple_size(item)\n        elif isinstance(item, list):\n            for subitem in item:\n                if isinstance(subitem, str):\n                    size += len(subitem)\n                elif isinstance(subitem, bytes):\n                    size += len(subitem)\n                elif isinstance(subitem, int):\n                    size += sys.getsizeof(subitem)\n                elif isinstance(subitem, float):\n                    size += sys.getsizeof(subitem)\n                elif isinstance(subitem, tuple):\n                    size += tuple_size(subitem)\n                elif isinstance(subitem, list):\n                    for subsubitem in subitem:\n                        if isinstance(subsubitem, str):\n                            size += len(subsubitem)\n                        elif isinstance(subsubitem, bytes):\n                            size += len(subsubitem)\n                        elif isinstance(subsubitem, int):\n                            size += sys.getsizeof(subsubitem)\n                        elif isinstance(subsubitem, float):\n                            size += sys.getsizeof(subsubitem)\n                        elif isinstance(subsubitem, tuple):\n                            size += tuple_size(subsubitem)\n                        elif isinstance(subsubitem, list):\n                            for subsubsubitem in subsubitem:\n                                if isinstance(subsubsubitem, str):\n                                    size += len(subsubsubitem)\n                                elif isinstance(subsubsubitem, bytes):\n                                    size += len(subsubsubitem)\n                                elif isinstance(subsubsubitem, int):\n                                    size += sys.getsizeof(subsubsubitem)\n                                elif isinstance(subsubsubitem, float):\n                                    size += sys.getsizeof(subsubsubitem)\n                                elif isinstance(subsubsubitem, tuple):\n                                    size += tuple_size(subsubsubitem)\n                        else:\n                            size += sys.getsizeof(subsubitem)\n        else:\n            size += sys.getsizeof(item)\n    return size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 1789,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    \n    # Check if k is within the range of arr1 and arr2\n    if k > len(arr1) or k > len(arr2) or k < 1:\n        print(\"Invalid input!\")\n        return\n\n    # If k is in arr1, return the element at index k-1\n    if k == 1:\n        return arr1[0]\n\n    # If k is in arr2, return the element at index k-1\n    elif k == 2:\n        return arr2[0]\n\n    # If k is in arr1 and arr2, find the difference between the two arrays\n    diff = len(arr1) - k\n    if diff >= 0:\n        return arr2[diff]\n    else:\n        return arr1[abs(diff)]",
        "test": "assert find_kth([1,2,3,4,5], [4,5,6,7,8], 1) == 1",
        "num_ids": 2626,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return temp == 0",
        "test": "assert armstrong_number(0) == True, \"0 is not an armstrong number.\"",
        "num_ids": 1694,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n\n    for i in range(number):\n        sum += i\n        count += 1\n\n    average = sum / count\n\n    return sum, average",
        "test": "assert sum_average(5) == 15",
        "num_ids": 1349,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string str1 as input and returns the first repeated character.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # Sort the dictionary by values in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    # Return the first character of the sorted_freq list\n    return sorted_freq[0][0]",
        "test": "assert first_repeated_char(\"abc\") == \"a\"",
        "num_ids": 1798,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if all(x % i!= 0 for x in range(1, i)):\n            ludic_numbers.append(i)\n    return ludic_numbers\n",
        "test": "assert get_ludic(-5) == []",
        "num_ids": 3445,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)",
        "test": "assert reverse_words(\"To be, or not to be: that is the question.\") == \"thbe, a or n thbe si thi si t qustion.\"",
        "num_ids": 2019,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_num(num):\n    if num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5, num - 1, 6):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n        return True\n",
        "test": "assert prime_num(5) == True",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "test": "assert radian_degree(45) == 0.7853981633974483",
        "num_ids": 1377,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index, and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"hello world\", \"hello\") == (\"hello\", 0, 5)",
        "num_ids": 2532,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 11\n    else:\n        count = 0\n        num = 5\n        while count < n:\n            count += 1\n            num += 2\n        return num",
        "test": "assert bell_Number(2) == 11",
        "num_ids": 2296,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Remove the kth element from a list.\n\n    Parameters:\n    list1 (list): The input list.\n    k (int): The index of the element to remove.\n\n    Returns:\n    list: The updated list with the k'th element removed.\n    '''\n    if len(list1) <= k:\n        return list1\n\n    # Initialize the first and last pointers\n    first = 0\n    last = len(list1) - 1\n\n    # Move the first and last pointers towards each other\n    # until they meet at the kth element\n    while first <= last:\n        if first == k:\n            last -= 1\n        elif last == k - 1:\n            first += 1\n        else:\n            first += 1\n            last -= 1\n\n    # Remove the kth element\n    list1.pop(last)\n\n    return list1",
        "test": "assert remove_kth_element([], 3) == []",
        "num_ids": 2507,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if N < 1 or N > len(test_list[0]):\n        raise ValueError(\"N should be a positive integer less than or equal to the number of rows in the matrix.\")\n    \n    # Initialize a max value to be the first element in the matrix\n    max_value = test_list[0][N-1]\n\n    # Iterate over the rest of the columns and compare with the max value\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    \n    return max_value",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 8 # Check if the function returns the max of then'th column of the matrix",
        "num_ids": 2856,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst",
        "test": "assert merge([]) == []",
        "num_ids": 1697,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def cummulative_sum(test_list):\n    # Initialize the cumulative sum array\n    cumsum = [0] * len(test_list)\n    cumsum[0] = test_list[0]\n\n    # Iterate over the remaining elements in the list\n    for i in range(1, len(test_list)):\n        # Add the current element to the cumulative sum array\n        cumsum[i] = cumsum[i-1] + test_list[i]\n\n    # Return the cumulative sum array\n    return cumsum",
        "test": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]",
        "num_ids": 2065,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for i in nums:\n        for j in i:\n            total += j\n            count += 1\n    if count == 0:\n        return None\n    else:\n        return [total/count]",
        "test": "assert average_tuple([(), (), (1,)]) == [1.0]",
        "num_ids": 2309,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Input tuples must be of the same length\")\n\n    # Initialize a list to store the modulo values\n    modulo_list = []\n\n    # Iterate through the tuples and perform element-wise modulo\n    for i in range(len(test_tup1)):\n        modulo_list.append(test_tup1[i] % test_tup2[i])\n\n    # Return the tuple with modulo values\n    return tuple(modulo_list)",
        "test": "assert tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3)",
        "num_ids": 2944,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def min_Jumps(steps, d):\n    # To find the number of jumps required\n    jumps = steps // d\n\n    # To find the number of steps required for reaching the point of form (d, 0)\n    steps_to_reach_origin = steps - (jumps * d)\n\n    # To find the total number of jumps required\n    total_jumps = jumps + steps_to_reach_origin\n\n    return total_jumps",
        "test": "assert min_Jumps(1, 2) == 1",
        "num_ids": 3146,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n\n    Parameters:\n    nums1 (list): A list of numbers.\n    nums2 (list): A list of numbers.\n\n    Returns:\n    list: A list of lists, where each inner list contains the elements of nums1 divided by the corresponding element of nums2.\n    '''\n\n    # Create an empty list to store the result\n    result = []\n\n    # Loop through the elements of nums1\n    for i in range(len(nums1)):\n        # Loop through the elements of nums2\n        for j in range(len(nums2)):\n            # If the elements are equal, append the element of nums1 divided by the corresponding element of nums2 to the result list\n            if nums1[i] == nums2[j]:\n                result.append(nums1[i] / nums2[j])\n\n    return result",
        "test": "assert div_list([], [1,2,3]) == []",
        "num_ids": 2605,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    # Reverse the list of words\n    reversed_words = list(reversed(words))\n    # Join the reversed list of words back into a string\n    result =''.join(reversed_words)\n    return result",
        "test": "assert move_num(\"\") == \"\"",
        "num_ids": 1665,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Create a dictionary to store the count of each number in the list\n    num_count = {}\n\n    # Loop through each number in the list\n    for num in a:\n        # If the number is not in the dictionary, add it with a count of 1\n        if num not in num_count:\n            num_count[num] = 1\n        # If the number is already in the dictionary, add 1 to its count\n        else:\n            num_count[num] += 1\n\n    # Create a list of tuples with the numbers in the largest subset\n    num_list = sorted(num_count.items(), key=lambda x: x[1], reverse=True)\n\n    # Initialize the largest subset size to 1\n    max_subset_size = 1\n\n    # Loop through each tuple in the sorted list\n    for num, count in num_list:\n        # If the current number is a multiple of the largest number in the current subset,\n        # add it to the largest subset size and start a new subset\n        if count % max_subset_size == 0:\n            max_subset_size += 1\n            subset = []\n        # If the current number is a multiple of the largest number in the current subset and\n        # is not the first number in the subset, add the current number to the subset\n        else:\n            subset.append(num)\n\n    # Return the size of the largest subset\n    return max_subset_size",
        "test": "assert largest_subset([1, 3, 5, 7, 9]) == 2",
        "num_ids": 3621,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0], arr2[0])\n    \n    # Find the midpoint of the two sorted lists\n    mid = n // 2\n    \n    # Find the median of the two halves\n    if n % 2 == 0:\n        return (arr1[mid], arr2[mid-1])\n    else:\n        return arr1[mid]",
        "test": "assert get_median([1,2,3,4], [2,3,4,5], 5) == 3",
        "num_ids": 3349,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def nth_nums(nums, n):\n    if n == 1:\n        return nums\n    else:\n        return [x ** n for x in nums]",
        "test": "assert nth_nums([2, 4, 6, 8, 10], 1) == [2, 4, 6, 8, 10]",
        "num_ids": 1795,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for i in range(len(string)):\n        if string[i].isupper() == False:\n            return False\n    return True",
        "test": "assert is_upper('hello') == False",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) <= 1:\n        return newList\n\n    # create a copy of the list\n    newList_copy = newList[:]\n\n    # swap the first and last elements\n    newList_copy[0], newList_copy[-1] = newList_copy[-1], newList_copy[0]\n\n    return newList_copy",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 1523,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Initialize variables\n    a = 0\n    b = 0\n    area = 0\n    max_area = 0\n\n    # Iterate through all possible semi-circles\n    for i in range(1, r + 1) :\n        # Calculate area of a triangle with side a and semi-circle radius b\n        area = 0.5 * i * (a + b)\n\n        # Check if area is greater than current maximum\n        if area > max_area :\n            max_area = area\n            # Update variables for next iteration\n            b = i\n            a = (a + b) // 2\n\n    # Return area of largest triangle\n    return max_area\n",
        "test": "assert triangle_area(1) == 0",
        "num_ids": 2313,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n    return end + 1",
        "test": "assert find_First_Missing([3,4,2,7,0,1]) == 1",
        "num_ids": 2173,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"Hello world!\") == \"Hello%20world!\"",
        "num_ids": 976,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def Split(lst):\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 1840,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Extract all adjacent coordinates of the given coordinate tuple.\n    If a sublist is provided, only extract adjacent coordinates within that sublist.\n    '''\n    x, y = ele\n    adj = []\n    # check if the x-coordinate is within the sublist\n    if x in sub:\n        adj.append((x+1, y))\n    if x > 0:\n        adj.append((x-1, y))\n    # check if the y-coordinate is within the sublist\n    if y in sub:\n        adj.append((x, y+1))\n    if y > 0:\n        adj.append((x, y-1))\n    return adj",
        "test": "assert adjac((0, 0)) == []",
        "num_ids": 3191,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Create an empty string to store the modified text\n    modified_text = \"\"\n\n    # Iterate through each character in the text\n    for char in text:\n\n        # Check if the character is a space\n        if char == \" \":\n\n            # If it is, replace it with an underscore\n            modified_text += \"_\"\n\n        # If the character is not a space, append it to the modified string\n        else:\n            modified_text += char\n\n    # Return the modified string\n    return modified_text",
        "test": "assert replace_spaces('') == ''",
        "num_ids": 1414,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for num in num_list:\n        if num!= 0:\n            num_list[count] = num\n            count += 1\n    num_list = num_list[:count]\n    return num_list",
        "test": "assert move_zero([1]) == [1]",
        "num_ids": 1918,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # Create an empty dictionary to store the xor values of each pair\n    xor_dict = {}\n\n    # Traverse through the array and for each pair, calculate the xor of the numbers and add it to the dictionary\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor = arr[i] ^ arr[j]\n            xor_dict[str(xor)] = xor_dict.get(str(xor), 0) + 1\n\n    # Return the sum of xor values in the dictionary\n    return sum(xor_dict.values())",
        "test": "assert pair_xor_Sum([1,2,3,4,5], 5) == 10",
        "num_ids": 2164,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        hq.heappop(iterable)\n    return sorted_list",
        "test": "assert heap_sort([]) == []",
        "num_ids": 2144,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the difference between the actual cost and the sale amount\n    difference = actual_cost - sale_amount\n\n    # Check if the difference is negative\n    if difference < 0:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(1000, 2000) == True",
        "num_ids": 1580,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate wind chill index\n    chi = round(v / (0.6213 * t + 273.15))\n    \n    return chi",
        "test": "assert wind_chill(0, 32) == 0",
        "num_ids": 2418,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Remove names that start with a lowercase letter\n    filtered_names = [name for name in sample_names if name.isalpha()]\n\n    # Add up the lengths of the filtered names\n    total_length = sum(len(name) for name in filtered_names)\n\n    return total_length",
        "test": "assert sample_nam(\"a b c\") == 3 # Test case 1",
        "num_ids": 2843,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis and what is inbetween them from a string.\n    \n    Parameters:\n    items (str): the string to remove parenthesis from\n    \n    Returns:\n    str: the original string with no parenthesis\n    '''\n    # use regular expression to match and remove parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    # replace any other non-alphanumeric characters with an empty string\n    items = re.sub(r'[^a-zA-Z0-9 ]+', '', items)\n    return items",
        "test": "assert remove_parenthesis(\"\") == \"\"",
        "num_ids": 1737,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n\n    if n == 1 or n == 2:\n        return n\n\n    a = 1\n    b = 1\n\n    while b <= n:\n        a, b = b, a + b\n\n    return a",
        "test": "assert is_nonagonal(1) == 1, \"1 should be the first nonagonal number.\"",
        "num_ids": 1938,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Check if a string contains 'z' at the middle of a word.\n    '''\n    # Find all the words in the text\n    words = re.findall(r'\\b\\w*\\b', text)\n\n    # Check if there are any words in the text that contain 'z' at the middle\n    for word in words:\n        if 'z' in word and word.startswith(word) and word.endswith(word):\n            return True\n\n    # If there are no words that contain 'z' at the middle, return False\n    return False",
        "test": "assert text_match_wordz_middle(\"Python\") == False",
        "num_ids": 2090,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 27,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize the reversed array to the input array\n    reversed_array = input\n    # Initialize the start index and end index variables\n    start_index = 0\n    end_index = len(reversed_array) - 1\n    # Initialize the count variable\n    count = 0\n    # Loop till the start index is less than the end index\n    while start_index < end_index:\n        # Swap the elements at the start index and end index\n        temp = reversed_array[start_index]\n        reversed_array[start_index] = reversed_array[end_index]\n        reversed_array[end_index] = temp\n        # Increment the start index and decrement the end index\n        start_index += 1\n        end_index -= 1\n        # Increment the count variable\n        count += 1\n        # Check if the count meets the given k value\n        if count == k:\n            break\n    # Return the reversed array\n    return reversed_array",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]",
        "num_ids": 2736,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'key1': 10, 'key2': 20}) == (1, 2, 3, {'key1': 10, 'key2': 20})",
        "num_ids": 1938,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    paths = []\n    max_avg = -1\n    max_path = []\n\n    for i in range(N):\n        for j in range(N):\n            # Mark the current cell as visited\n            cost[i][j] = 0\n\n            # If the current cell is the bottom right cell, add the current path to the result\n            if j == N-1 and i == N-1:\n                if i not in max_path:\n                    max_path.append(i)\n                paths.append(max_path[:])\n                max_path = []\n\n            # Perform a right move\n            if j < N-1:\n                if cost[i][j+1] == 0:\n                    # If the next cell is not visited, mark it as visited\n                    cost[i][j+1] = 1\n                    # Check if the path is a better one\n                    if i not in max_path:\n                        max_path.append(i)\n                    if len(max_path) > len(paths):\n                        max_avg = 0\n                    else:\n                        max_avg = sum(cost[i][j+1] for i in range(len(paths)))/len(paths)\n                    if max_avg > max_avg_so_far:\n                        max_avg_so_far = max_avg\n                else:\n                    # If the next cell is visited, skip to the next iteration\n                    pass\n\n            # Perform a down move\n            if i < N-1:\n                if cost[i+1][j] == 0:\n                    # If the next cell is not visited, mark it as visited\n                    cost[i+1][j] = 1\n                    # Check if the path is a better one\n                    if i not in max_path:\n                        max_path.append(i)\n                    if len(max_path) > len(paths):\n                        max_avg = 0\n                    else:\n                        max_avg = sum(cost[i+1][j] for i in range(len(paths)))/len(paths)\n                    if max_avg > max_avg_so_far:\n                        max_avg_so_far = max_avg\n                else:\n                    # If the next cell is visited, skip to the next iteration\n                    pass\n\n    # Add the last path to the result\n    if i < N-1:\n        if i not in max_path:\n            max_path.append(i)\n        paths.append(max_path[:])\n\n    # Return the maximum average over all paths\n    return max_avg_so_far",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9], [1,2,3], [1,2,3], [1,2,3]]) == 20",
        "num_ids": 7121,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = []\n    for student_name, (student_height, student_weight) in students.items():\n        if student_height > h and student_weight > w:\n            filtered_students.append(student_name)\n    return filtered_students",
        "test": "assert filter_data({'Alice':(170,80), 'Bob':(165,75), 'Charlie':(160,70), 'David':(155,65), 'Eve':(150,60)},150,100) == []",
        "num_ids": 3556,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def count_same_pair(nums1, nums2):\n    same_indices = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_indices.append(i)\n    return same_indices",
        "test": "assert count_same_pair([1], [1, 1, 1, 1, 1]) == [0]",
        "num_ids": 2263,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        base //= 10\n        power -= 1\n    return total",
        "test": "assert power_base_sum(2, 0) == 0",
        "num_ids": 2061,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Define a regular expression pattern to match the values between the quotation marks\n    pattern = r\"(?<!')('.*?[^'])*('(?![^\\\"]*$))\"\n\n    # Use the re.findall() function to find all matches of the pattern in the text\n    matches = re.findall(pattern, text1)\n\n    # If no matches are found, return an empty list\n    if not matches:\n        return []\n\n    # Extract the values between the quotation marks\n    values = []\n    for match in matches:\n        values.append(match[1:-1])\n\n    return values",
        "test": "assert extract_quotation(\"\") == []",
        "num_ids": 1777,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # create an empty list to store the result\n    result = []\n    # iterate through the input tuple\n    for i in range(len(test_tup)-1):\n        # multiply the elements and add to the result list\n        result.append(test_tup[i] * test_tup[i+1])\n    # return the result list\n    return result",
        "test": "assert multiply_elements((1, 2, 3, 4, 5, 6, 7, 8)) == (1, 2, 3, 4, 5, 10, 14, 20)",
        "num_ids": 3072,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 1757,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Removes consecutive duplicates of a given list.\n    '''\n    # Initialize an empty list to store the unique numbers\n    unique_nums = []\n    \n    # Iterate through the list\n    for num in nums:\n        # Check if the current number is already in the unique_nums list\n        if num not in unique_nums:\n            # If it is not, append it to the unique_nums list\n            unique_nums.append(num)\n    \n    # Return the unique_nums list\n    return unique_nums",
        "test": "assert consecutive_duplicates([1,2,2,3,3,4,4,4,4,5,5,5,5,5]) == [1,2,3,4,5]",
        "num_ids": 2307,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the surface area of the cone\n    surface_area = math.pi * r * r\n    \n    # calculate the volume of the cone\n    volume = math.pi * r * r * h\n    \n    # return the surface area and volume as a tuple\n    return (surface_area, volume)",
        "test": "assert lateralsurface_cone(2, 5) == 22.5",
        "num_ids": 1620,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[.,]', ':', text)\n    return text",
        "test": "assert replace_specialchar(\"one,two,three,four,five,six\") == \"one:two:three:four:five:six\"",
        "num_ids": 1430,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Initialize the index to -1\n    index = -1\n\n    # Loop through the array from left to right\n    for i in range(len(A)):\n\n        # If the current element is equal to the given number, update the index\n        if A[i] == x:\n            index = i\n            break\n\n    # Return the index of the first occurrence of the given number\n    return index",
        "test": "assert find_first_occurrence([1,2,3,4,5], 6) == -1",
        "num_ids": 2370,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Function to find sum of products of all possible sublists of a given list.\n    def sum_of_sublist_products(arr):\n        n = len(arr)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return arr[0]\n        else:\n            sublist_sum = sum_of_sublist_products(arr[1:])\n            subarray_sum = 0\n            for i in range(n-1):\n                subarray_sum += arr[i] * sublist_sum\n            return subarray_sum\n\n    return sum_of_sublist_products(arr)",
        "test": "assert sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 3057,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize variables\n    start = 1\n    end = len(bin(n)[2:]) - 1\n    \n    # Toggle bits of the number until first and last bits are not set\n    while start <= end:\n        n = (n ^ (1 << start)) & n\n        start += 1\n        \n    return n",
        "test": "assert set_middle_bits(0) == 0, \"set_middle_bits(0) should return 0\"",
        "num_ids": 3522,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left, right = 0, len(a) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left",
        "test": "assert left_insertion(sorted([1, 2, 3, 4, 5]), 3) == 2",
        "num_ids": 2177,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else:\n        return False",
        "test": "assert check_str(\"apple\") == True",
        "num_ids": 1218,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def geometric_sum(n):\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(5) == 120",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import math\n\ndef find_Index(n):\n    # Initialize variables\n    count = 0\n    max_count = 0\n    max_index = 0\n    smallest_triangular_number = 0\n\n    # Iterate through numbers from 1 to n\n    for num in range(1, n + 1):\n        # Calculate the smallest triangular number with n digits\n        triangular_number = math.comb(n, count)\n        # Check if the triangular number is smaller than the current smallest number\n        if triangular_number < smallest_triangular_number:\n            count += 1\n            smallest_triangular_number = triangular_number\n        # If the triangular number is equal to the current smallest number, update the count and index\n        elif triangular_number == smallest_triangular_number:\n            count += 1\n            max_count = max(max_count, count)\n            max_index = num\n\n    # Return the index of the smallest triangular number with n digits\n    return max_index",
        "test": "assert find_Index(3) == 0",
        "num_ids": 2374,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create an empty dictionary\n    result_dict = {}\n\n    # Iterate over the elements of the tuple and create a new key-value pair\n    for i in range(len(test_tup) - 1):\n        result_dict[test_tup[i]] = test_tup[i+1]\n\n    return result_dict",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 2138,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] > 1:\n            return False\n    return True",
        "test": "assert all_Characters_Same('hello world') == False",
        "num_ids": 1600,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (0.5 * side * side * side)\n    return area",
        "test": "assert area_tetrahedron(1) == 0.5",
        "num_ids": 1337,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def rotate_right(lst, m):\n    # check if m is less than or equal to 0\n    if m <= 0:\n        return lst\n\n    # check if m is greater than the length of the list\n    if m >= len(lst):\n        m = len(lst) - m\n\n    # create a new list by shifting the first m items to the left, and then the last m-m items to the right\n    new_lst = lst[m:] + lst[:m]\n\n    return new_lst",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 2302,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none(()) == False, \"empty tuple should be False\"",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return (lambda n: all(d in str(n) for d in str(n)[::-1]))(startnum) and (lambda n: all(d in str(n) for d in str(n)[::-1]))(endnum)",
        "test": "assert divisible_by_digits(123, 123456) == True",
        "num_ids": 6530,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import math\n\ndef sector_area(r,a):\n    if a > math.pi/2:\n        return None\n    else:\n        return math.pi * r * r * math.sin(a)",
        "test": "assert sector_area(5,361) == None",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m, n = len(X), len(Y)\n    if n == 0:\n        return X\n    if m == 0:\n        return Y\n\n    # Initialize a matrix to store LCS\n    lcs = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Fill the LCS matrix using dynamic programming\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n\n    # Return the LCS\n    return lcs[m][n]",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GXTYXAB\") == \"GXTYABX\"",
        "num_ids": 4496,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Create a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Use the re.sub() method to replace all non-word characters in the string with spaces\n    return re.sub(r'[^\\w\\s]','', str1)",
        "test": "assert capital_words_spaces(\"this is another test string\") == \"this is another test string\"",
        "num_ids": 2101,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n    Args:\n    nums_str (list): A list of strings containing numbers.\n\n    Returns:\n    list: A list of strings sorted numerically.\n\n    '''\n\n    # Convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n\n    # Sort the list of integers in ascending order\n    nums.sort()\n\n    # Convert the sorted list of integers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str",
        "test": "assert sort_numeric_strings([\"10\", \"20\", \"30\", \"40\", \"50\"]) == sorted([\"10\", \"20\", \"30\", \"40\", \"50\"])",
        "num_ids": 2268,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup",
        "test": "assert add_tuple([1, 2, 3], []) == [1, 2, 3]",
        "num_ids": 1516,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 27,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0 or arr[i] < arr[i-1]:\n        return True\n    else:\n        return False",
        "test": "assert check_min_heap_helper([1, 2, 3, 4, 5], 2) == False",
        "num_ids": 2875,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 1\n        b = 2\n        c = 1\n        while b * b <= n:\n            if n % b == 0:\n                a, b = b, n // b\n            else:\n                a, b = b, a\n            c += a\n        return c",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 4063,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort()\n    return test_list[:K]",
        "test": "assert min_k([('Alice', 50), ('Bob', 30), ('Charlie', 20), ('David', 40), ('Eve', 35)], 4) == [('Alice', 50), ('Bob', 30), ('Charlie', 20), ('David', 40)]",
        "num_ids": 2491,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create an empty list to store the common elements\n    common_elements = []\n\n    # Iterate over each element in the first list\n    for i in range(len(l1)):\n        # Check if the element is in all three lists\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in common_elements:\n            # If it is, add it to the common list\n            common_elements.append(l1[i])\n\n    return common_elements",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 2942,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def second_smallest(numbers):\n    return numbers[1] if numbers[0]!= numbers[1] else None",
        "test": "assert second_smallest([10, 20, 30, 40, 50]) == 20",
        "num_ids": 1655,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    match = re.match(r'\\ba\\w+\\b', text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"abaabcabcab\") == True, \"text_match_zero_one('abaabcabcab') should return True\"",
        "num_ids": 2926,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] + test_list[j] == test_list[i] * test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 2021,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if sublist not in sublists:\n            sublists[sublist] = 1\n        else:\n            sublists[sublist] += 1\n    return sublists",
        "test": "assert unique_sublists([1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 3994,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def is_decimal(num):\n    '''\n    Check whether a given string is a decimal number with a precision of 2.\n\n    :param num: a string containing a decimal number with a precision of 2\n    :return: True if the number is a decimal number with a precision of 2, False otherwise.\n    '''\n\n    # Check if the string is empty\n    if num == '':\n        return False\n\n    # Split the string into its constituent parts\n    parts = num.split('.')\n\n    # Check if the length of the parts is 2\n    if len(parts)!= 2:\n        return False\n\n    # Check if the first part is a number\n    try:\n        float(parts[0])\n    except ValueError:\n        return False\n\n    # Check if the second part is a number\n    try:\n        float(parts[1])\n    except ValueError:\n        return False\n\n    # If all checks pass, the string is a decimal number with a precision of 2\n    return True",
        "test": "assert is_decimal('123') == False",
        "num_ids": 6173,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Initialize a set to store unique elements\n    unique_set = set()\n\n    # Loop through the input list and add each element to the set\n    for num in arr:\n        unique_set.add(num)\n\n    # Check if the set contains only one element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 3, 4, 5]) == False",
        "num_ids": 1785,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(12) is True, \"The given month number should contain 30 days.\"",
        "num_ids": 1769,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def find_min_diff(arr, n):\n    diff = n * (n + 1) // 2\n    for i in range(n):\n        if i > 0:\n            if arr[i] - arr[i - 1] < diff:\n                diff = arr[i] - arr[i - 1]\n    return diff",
        "test": "assert find_min_diff([1,1,1,1,1], 5) == 0",
        "num_ids": 2159,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr('123') == 3, \"The function should return the number of digits in the given string '123'.\"",
        "num_ids": 1268,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 21,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n and returns True if n is a polite number,\n    otherwise it returns False.\n\n    A polite number is a number that is positive, negative, or zero, but with\n    a large magnitude. Polite numbers can be found by finding their positive and\n    negative factors, or by counting the factors from 1 to n.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        # Define the base cases for the function\n        if n < 0:\n            return False\n        elif n == 2:\n            return True\n        else:\n            # Find the negative and positive factors of n\n            negative_factors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n            positive_factors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n\n            # If the number is a positive multiple of any of the positive factors, it is a polite number\n            if any(n % i == 0 for i in positive_factors):\n                return True\n            # If the number is a negative multiple of any of the negative factors, it is a polite number\n            elif any(n % i == 0 for i in negative_factors):\n                return True\n            # If neither of the above conditions are met, it is not a polite number\n            else:\n                return False",
        "test": "assert is_polite(0) == False, \"The function should return False for the given input.\"",
        "num_ids": 1801,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def pair_wise(lst):\n    '''\n    Returns a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n    return pairs",
        "test": "assert pair_wise([]) == []",
        "num_ids": 2173,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    # Create a dictionary to store the count of each pair in the list\n    counts = {}\n\n    # Loop through the list of numbers\n    for num in arr:\n        # If the current number is equal to the sum, increment the count in the dictionary\n        if num == sum:\n            counts[sum] = counts.get(sum, 0) + 1\n    \n    # Return the count of pairs in the list that sum up to the given sum\n    return counts[sum] if sum in counts else 0",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 10) == 0, \"The function should return 0 if no pair is found whose sum is 10\"",
        "num_ids": 1957,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff.append(li1[i])\n    return diff",
        "test": "assert Diff([], []) == []",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum",
        "test": "assert odd_num_sum(1) == 1",
        "num_ids": 1451,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n\n    # Initialize variables\n    stack = deque()\n\n    # Loop through each character of the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, check if it matches the top element of the stack\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n\n    # If we get here, the expression is balanced\n    return True",
        "test": "assert check_expression(\"()()\") == True",
        "num_ids": 1905,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    words_list = []\n    for word in words:\n        if len(word) >= K:\n            words_list.append(word)\n    return \" \".join(words_list)",
        "test": "assert remove_length(\"This is a test string\", 10) == \"\"",
        "num_ids": 1612,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    # regular expression pattern to match the substrings\n    pattern = re.compile(pattern)\n    # find all substrings in the text that match the pattern\n    matches = pattern.findall(text)\n    # check if there is at least one match\n    if matches:\n        # get the first match\n        match = matches[0]\n        # find the position of the match within the text\n        pos = text.find(match)\n        # return the match and position\n        return match, pos\n    else:\n        # return None if there is no match\n        return None",
        "test": "assert occurance_substring(\"hello world\", \"x\") == None",
        "num_ids": 2047,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    result = True\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                result = False\n                break\n    return result",
        "test": "assert odd_position([1, 2, 3, 4]) # True",
        "num_ids": 1499,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if test_str[j] in vowels:\n                    count += 1\n                    break\n    return count",
        "test": "assert count_vowels(\"ABCD\") == 0, \"The function should return 0 vowels in the string 'ABCD'.\"",
        "num_ids": 1794,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def find_sum(arr):\n    '''\n    Find the sum of non-repeated elements in a list.\n\n    :param arr: list of integers\n    :return: the sum of non-repeated elements in the list\n    '''\n    # Create a set to store the unique elements in the list\n    unique_set = set(arr)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate over the unique elements in the list\n    for elem in unique_set:\n        # Add the element to the sum\n        sum += elem\n    # Return the sum\n    return sum",
        "test": "assert find_sum([]) == 0",
        "num_ids": 2262,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def pack_consecutive_duplicates(list1):\n    '''\n    Pack consecutive duplicates of a given list elements into sublists.\n    \n    Args:\n        list1 (list): The list to be packed.\n    \n    Returns:\n        list: A list of sublists with consecutive duplicates.\n    '''\n    sublist = []\n    for item in list1:\n        if item not in sublist:\n            sublist.append(item)\n        else:\n            sublist[-1] = item\n    return sublist",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 3601,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for lst in list1:\n        if lst not in count_dict:\n            count_dict[lst] = 1\n        else:\n            count_dict[lst] += 1\n    return count_dict",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 3105,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            total = sum(test_list[i:j])\n            if total in result:\n                result.append((total, test_list[i], test_list[j-1]))\n    return result",
        "test": "assert find_combinations([1, 2, 3]) == []",
        "num_ids": 4284,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert count_divisors(7) == 1, \"The correct count of divisors is 1.\"",
        "num_ids": 1488,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    # Initialize a variable to store the sum of odd length subarrays\n    total_sum = 0\n\n    # Iterate through each element of the array\n    for i in range(len(arr)):\n        # Check if the current element is odd and its length is odd\n        if arr[i] % 2!= 0 and i > 0 and arr[i] == arr[i - 1]:\n            # Add the current element and its length to the sum\n            total_sum += arr[i]\n\n    return total_sum\n",
        "test": "assert odd_length_sum([]) == 0",
        "num_ids": 2492,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to HSV\n    r /= 255\n    g /= 255\n    b /= 255\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    h, s, v = None, None, None\n    if delta == 0:\n        h = 0\n        s = 0\n    elif max_val == r:\n        h = ((g - b) / delta) % 6\n        s = delta / max_val\n    elif max_val == g:\n        h = (b - r) / delta + 2\n        s = delta / max_val\n    else:\n        h = (r - g) / delta + 4\n        s = delta / max_val\n    h = h / 6\n\n    # Convert HSV to RGB\n    if h < 0:\n        h += 1\n    if h > 1:\n        h -= 1\n    if s == 0:\n        r, g, b = 0, 0, 0\n    else:\n        i = int(h * 6)\n        f = h * 6 - i\n        p = v * (1 - s)\n        q = v * (1 - f * s)\n        t = v * (1 - (1 - f) * s)\n        if i == 0:\n            r, g, b = v, t, p\n        elif i == 1:\n            r, g, b = q, v, p\n        elif i == 2:\n            r, g, b = p, v, t\n        elif i == 3:\n            r, g, b = p, q, v\n        elif i == 4:\n            r, g, b = t, p, v\n        else:\n            r, g, b = v, p, q\n\n    r *= 255\n    g *= 255\n    b *= 255\n\n    return r, g, b",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0), \"rgb_to_hsv should return (0, 0, 0) for (0, 0, 0)\"",
        "num_ids": 5121,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i % 2 == 0:\n            product *= i\n    for i in list1:\n        if i % 2!= 0:\n            product *= i\n    return product",
        "test": "assert mul_even_odd([]) == 1",
        "num_ids": 1822,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert tuple string to integer tuple.\n    '''\n    str_list = list(test_str)\n    int_list = []\n    for i in str_list:\n        if i.isdigit():\n            int_list.append(int(i))\n    return tuple(int_list)\n",
        "test": "assert tuple_str_int('1,2,3') == (1, 2, 3)",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return len(a)",
        "test": "assert right_insertion([1, 3, 5, 6, 7], 5) == 2 # should return 2 because 5 is in the right position",
        "num_ids": 2336,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 21,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n\n    # Define a pattern to match the string with three 'b'\n    pattern = r'[ab]{3}'\n\n    # Use the re.match() method to check if the string matches the pattern\n    match = re.match(pattern, text)\n\n    # If the string matches the pattern, return True\n    if match:\n        return True\n    else:\n        # If the string does not match the pattern, return False\n        return False",
        "test": "assert text_match_three(\"abc\") == False # string does not have an a followed by three 'b's",
        "num_ids": 2374,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n\n    # Split the string by commas and convert the resulting list to a tuple\n    new_tuple = tuple(test_list)\n\n    # Return the new tuple\n    return new_tuple",
        "test": "assert new_tuple(['apple', 'banana', 'cherry'], 'apple') == ('apple', 'banana', 'cherry')",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # create a variable to store the result\n    result = False\n    \n    # iterate through the list\n    for i in range(len(nums)):\n        \n        # check if the current index is even\n        if i % 2 == 0:\n            \n            # check if the current even index contains an even number\n            for num in nums[i:]:\n                if num % 2 == 0:\n                    result = True\n                    break\n                    \n    # return the result\n    return result",
        "test": "assert even_position([1, 3, 5, 7, 9]) == False",
        "num_ids": 2087,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def remove_nested(test_tup):\n    '''\n    Remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(t) for t in test_tup)\n    elif isinstance(test_tup, list):\n        return [remove_nested(t) for t in test_tup]\n    elif isinstance(test_tup, dict):\n        return {k: remove_nested(v) for k, v in test_tup.items()}\n    else:\n        return test_tup",
        "test": "assert remove_nested([]) == []",
        "num_ids": 2165,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n\n    # Initialize variables\n    count = 0\n    size = len(input_list)\n\n    # Loop through each list in the input list\n    for i in range(size): \n        # If the list is not empty, increment the count\n        if input_list[i]: \n            count += 1\n\n    return count",
        "test": "assert count_list([]) == 0",
        "num_ids": 1453,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1",
        "test": "assert last([1,2,3,4,5],3) == 2",
        "num_ids": 1756,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import re\n\ndef text_starta_endb(text):\n    # use regular expression to match 'a followed by anything, ending in 'b'\n    match = re.match(r'^a.*?b$', text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_starta_endb('123abc') == False",
        "num_ids": 1497,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total",
        "test": "assert return_sum({\"apple\": 1, \"banana\": 2, \"cherry\": 3}) == 6 # test case 1",
        "num_ids": 1556,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(n+1) if i%2!=0])\n",
        "test": "assert sum_odd(0) == 0, \"The sum of all odd natural numbers within the range 0 and 0 is not equal to 0.\"",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''  \n    return sum(arr)  ",
        "test": "assert _sum([1,2,3,4,5]) == 15, \"The sum of an array is not correct.\"",
        "num_ids": 946,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Check if d is greater than 32\n    if d > 32:\n        print(\"Error: d must be less than or equal to 32\")\n        return\n\n    # Calculate the number of bits to rotate\n    n_bits = 32 - d\n\n    # Calculate the number of bits to shift\n    shift = d % n_bits\n\n    # Rotate left by shift bits\n    rotated_n = (n << shift) >> shift\n\n    return rotated_n",
        "test": "assert left_rotate(0, 3) == 0",
        "num_ids": 1483,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n\ntext = \"  this is a test   with spaces  \"\nprint(remove_all_spaces(text))  # Output: \"thisisaatestwithspaces\"",
        "test": "assert remove_all_spaces(\"\") == \"\"",
        "num_ids": 1274,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x):\n        for j in range(y):\n            for k in range(z):\n                if i == x - 1 and j == y - 1 and k == z - 1:\n                    count += 1\n    return count",
        "test": "assert test_three_equal(1, 1, 1) == 1",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n                break\n    return count",
        "test": "assert count_rotation([]) == 0",
        "num_ids": 2352,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    else:\n        sqrt_n = int(n**0.5)\n        if n == sqrt_n**2:\n            return True\n        else:\n            return False",
        "test": "assert is_perfect_square(8) == False # not perfect square",
        "num_ids": 1661,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize a variable to store the product of all numbers in the list\n    product = 1\n\n    # Loop through the list to calculate the product of all numbers\n    for i in range(len(arr)):\n        product *= arr[i]\n\n    # Check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([1, 2, 3, 4]) == True # input is even",
        "num_ids": 1690,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n\n    return max_list",
        "test": "assert max_sum_list([[1,2,3],[4,5,6],[7,8,9]]) == [7, 8, 9]",
        "num_ids": 2550,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            max_run = max(max_run, i - max_run + 1)\n    return max_run",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 1895,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1778,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup",
        "test": "assert check_K([], 5) == False",
        "num_ids": 1476,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    # Convert tuples to lists\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    \n    # Check if elements are equal\n    if test_list1 == test_list2:\n        return True\n    else:\n        return False",
        "test": "assert check_smaller((1, 2, 3), (3, 1, 2)) == False",
        "num_ids": 1935,
        "indeed": false
    }
]