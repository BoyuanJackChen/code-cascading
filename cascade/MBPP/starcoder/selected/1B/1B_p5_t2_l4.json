[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "test": "assert similar_elements([1, 2, 3, 4], [2, 4, 6, 8]) == [2, 4]",
        "num_ids": 1033
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True",
        "test": "assert is_not_prime(5) == True",
        "num_ids": 579
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    heapq.heapify(nums[1:])\n    \n    # Find the largest n elements\n    max_heap = []\n    for i in range(n):\n        max_heap.append(hq.heappop(nums))\n    \n    # Return the largest n elements in descending order\n    return max_heap",
        "test": "assert heap_queue_largest([1,2,3,4,5],6) == [5,4,3,2,1]",
        "num_ids": 795
    },
    {
        "number": 6,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Power_Of_Two(x):\n    if x > 1 and (x & (x - 1)) == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(10) == False # check if x is not a power of two",
        "num_ids": 535
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n\ntext = \"This is a test string. It has many words. The first word has 3 characters. The second word has 6 characters.\"\nwords = find_char_long(text)\nprint(words)",
        "test": "assert find_char_long(\"hello world\") == ['hello', 'world']",
        "num_ids": 821
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "test": "assert square_nums([1,2,3,4,5]) == [1,4,9,16,25]",
        "num_ids": 482
    },
    {
        "number": 9,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_Rotations(str):\n    # remove all characters except the first and last ones\n    str = str[1:-1]\n    # initialize an empty list to store the minimum number of rotations\n    rotations = []\n    # iterate through each character of the string\n    for i in range(len(str)):\n        # if the current character is the same as the previous one, \n        # add the previous character to the list of rotations\n        if str[i] == str[i-1]:\n            rotations.append(i)\n    # return the minimum number of rotations\n    return len(rotations)",
        "test": "assert find_Rotations('abc') == 1, \"The function should return 1 when given the string 'abc'.\"",
        "num_ids": 773
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence of character\n    s = s.replace(ch, '', 1)\n    \n    # Remove last occurrence of character\n    s = s.replace(ch, '', -1)\n    \n    return s",
        "test": "assert remove_Occ(\"\", \"\") == \"\"",
        "num_ids": 603
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # create a list of tuples containing row and column sums of each column\n    row_sums = [(row[0], sum(row[1:])) for row in M]\n\n    # sort the list of tuples in ascending order based on the second element of each tuple\n    sorted_rows = sorted(row_sums, key=lambda x: x[1])\n\n    # create a new matrix from the sorted rows\n    sorted_matrix = [[row[0] for row in sorted_rows] for row in M]\n\n    return sorted_matrix",
        "test": "assert sort_matrix([[1, 2, 3], [3, 4, 5], [5, 6, 7]]) == [[1, 2, 3], [5, 6, 7], [4, 5, 6]]",
        "num_ids": 1389
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume",
        "test": "assert find_Volume(3,2,5) == 30, \"The volume of the prism is incorrect.\"",
        "num_ids": 512
    },
    {
        "number": 16,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    if re.findall(r'[a-z]+_+', text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 637
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(6) == 36",
        "num_ids": 330
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    characters_in_string = set(string)\n    return list(characters_in_string - set(second_string))",
        "test": "assert str_to_list('Python is awesome') == ['P', 'y', 't', 'h', 'o', 'n', 'g','', 'i','s','', 'a', 'w', 'e','s', 'e', 'a', 'r', 'e', '']",
        "num_ids": 1769
    },
    {
        "number": 19,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_set = set(arraynums)\n    return bool(unique_set)",
        "test": "assert test_duplicate([1,2,2,3,3,4]) == True",
        "num_ids": 631
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_woodall(x):\n    '''\n    Function to check if the given number is a woodall number or not.\n\n    Parameters:\n    x (int): The given number to be checked.\n\n    Returns:\n    boolean: True if the number is a woodall number, False otherwise.\n\n    Example:\n    >>> is_woodall(1234)\n    True\n    >>> is_woodall(1235)\n    False\n    '''\n\n    # Define a list of possible woodall numbers\n    woodall_numbers = [1, 5, 10, 25, 50, 100, 250, 500, 1000]\n\n    # Check if the given number is in the list of possible woodall numbers\n    if x in woodall_numbers:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(2) == False",
        "num_ids": 751
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 2 + num % 10\n        num //= 10\n    return rev_num == num",
        "test": "assert rev(456) == False # Input: 456",
        "num_ids": 589
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_Max_Num(arr):\n    max_num = arr[0]\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num",
        "test": "assert find_Max_Num([1,2,3]) == 3",
        "num_ids": 633
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    elif x == 0 and y == 0:\n        return True\n    elif x < 0 and y > 0:\n        return False\n    elif x > 0 and y < 0:\n        return False\n    else:\n        return None",
        "test": "assert opposite_Signs(2,3) == True",
        "num_ids": 674
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n\n    Args:\n        n (int): The nth octagonal number to find.\n\n    Returns:\n        int: The nth octagonal number.\n    \"\"\"\n    # initialize variables\n    i = 1\n    a = 1\n    b = 1\n    c = 1\n    octagonal = 0\n    # iterate through each octagonal number\n    while i <= n:\n        # calculate the next octagonal number\n        octagonal = a * b * c\n        # increment variables\n        i += 1\n        a = b\n        b = c\n        c = octagonal\n    return octagonal",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 676
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # initialize a defaultdict to store the count of each substring\n    counts = defaultdict(int)\n    # iterate over each character in the string\n    for c in s:\n        # if the character is an '0', we add 1 to the count of the substring with the sum of digits equal to its length\n        if c == '0':\n            # if the substring with the sum of digits equal to its length has not been seen before, add it to the counts\n            if counts[0] == 0:\n                counts[0] = 1\n            else:\n                counts[0] += 1\n                # move to the next character in the string\n                continue\n        # iterate over all possible substrings with the same sum of digits as the length of the current character\n        for i in range(1, len(s) + 1):\n            # calculate the sum of digits of the current substring\n            digit_sum = sum(int(c) for c in s[:i])\n            # check if the current substring with the sum of digits equal to its length has been seen before\n            if counts[digit_sum] == 0:\n                # if not, add it to the counts\n                counts[digit_sum] = 1\n            else:\n                # otherwise, increment the count of the current substring with the sum of digits equal to its length\n                counts[digit_sum] += 1\n    # return the total count of substrings with the sum of digits equal to their length\n    return sum(counts.values())",
        "test": "assert count_Substrings(\"hello\") == 6",
        "num_ids": 1211
    },
    {
        "number": 62,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "test": "assert smallest_num([1, 2, 3]) == 1",
        "num_ids": 474
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_difference(test_list):\n    '''\n    Find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the list of pairs in ascending order\n    pairs = sorted(test_list)\n\n    # Initialize the maximum difference to be the difference between the last pair and the first pair\n    max_diff = pairs[1][1] - pairs[0][1]\n\n    # Iterate over the remaining pairs\n    for i in range(2, len(pairs)):\n        # If the difference between the current pair and the previous pair is greater than the maximum difference,\n        # update the maximum difference\n        if pairs[i][0] - pairs[i-1][1] > max_diff:\n            max_diff = pairs[i][0] - pairs[i-1][1]\n\n    # Return the maximum difference\n    return max_diff",
        "test": "assert max_difference([1, 2, 3, 4, 5, 6]) == 3",
        "num_ids": 1113
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks([[95, 75, 90], [85, 90, 80], [80, 85, 90], [85, 90, 80], [90, 85, 95]]) == [[80, 85, 90], [85, 90, 80], [90, 85, 95], [95, 75, 90], [85, 90, 80]]",
        "num_ids": 763
    },
    {
        "number": 65,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum([recursive_list_sum(item) for item in data_list])\n    else:\n        return data_list",
        "test": "assert recursive_list_sum([1]) == 1",
        "num_ids": 758
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 541
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def bell_number(n):\n    # Define a function to determine the number of ways to partition Bell numbers\n    def partition(n, k):\n        if n == 1:\n            return 1\n        if k == 1:\n            return 1 + partition(n - 1, 1)\n        return partition(n - 1, k - 1) + partition(n - 1, k)\n\n    # Call the function to get the number of ways to partition Bell numbers\n    return partition(n, n)",
        "test": "assert bell_number(1) == 1",
        "num_ids": 827
    },
    {
        "number": 68,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n == 0:\n        return True\n\n    start = 0\n    end = 1\n\n    while end < n:\n        if A[start] > A[end]:\n            return False\n        elif A[start] < A[end]:\n            start += 1\n        else:\n            end += 1\n\n    return True",
        "test": "assert is_Monotonic([3, 1, 5, 4, 2]) == False",
        "num_ids": 638
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    '''\n    Return True if the list l contains the given sublist s, False otherwise.\n    '''\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True",
        "test": "assert is_sublist([1, 2, 3], [1, 2, 3]) == True",
        "num_ids": 568
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if the length of the tuples is equal to the length of the input list\n    if len(Input)!= len(set(Input)):\n        return False\n    else:\n        return True",
        "test": "assert find_equal_tuple([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]) == True",
        "num_ids": 678
    },
    {
        "number": 71,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using the combinatorial sorting method.\n    '''\n    for i in range(len(nums)):\n        # Find the smallest element in the unsorted portion\n        min_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        # Swap the smallest element with the current element\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    return nums",
        "test": "assert comb_sort([1, 5, 3, 8, 2]) == [1, 2, 3, 5, 8]",
        "num_ids": 1103
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def dif_Square(n):\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return dif_Square(n-1)\n    else:\n        return False",
        "test": "assert dif_Square(1) == 1 # 1 is equal to itself",
        "num_ids": 836
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_samepatterns(colors, patterns):\n    for color in colors:\n        if color not in patterns:\n            return False\n    return True",
        "test": "assert is_samepatterns([\"red\",\"green\",\"blue\"], [\"red\",\"blue\"]) == False",
        "num_ids": 650
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in test_list:\n        if len(i) % K == 0:\n            result.append(i)\n    return result",
        "test": "assert find_tuples([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 3) == [('a', 1), ('b', 2), ('c', 3)]",
        "num_ids": 959
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n < 11:\n        return False\n    if n % 10 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(7) == False, \"is_Diff should return False for 7\"",
        "num_ids": 455
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words\n    words = s.split()\n    # check if the length of the word is odd\n    if len(words) % 2 == 1:\n        # if it is odd, return 1\n        return 1\n    else:\n        # otherwise, return 0\n        return 0",
        "test": "assert word_len(\"world hello\") == 5",
        "num_ids": 608
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def tetrahedral_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        tetrahedral_number = 4*tetrahedral_number(n-1) + 3\n        tetrahedral_number = 4*tetrahedral_number(n-2) + 5\n        return tetrahedral_number",
        "test": "assert tetrahedral_number(1) == 1, \"The first tetrahedral number is 1.\"",
        "num_ids": 763
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Function to find the volume of a sphere.\n    '''\n    volume = math.pi * r**3\n    return volume",
        "test": "assert volume_sphere(1) == 3.141592653589793",
        "num_ids": 528
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    str = strr.lower()\n    result = 0\n    for char in str:\n        ascii_value = ord(char)\n        result += ascii_value % 26\n    return result",
        "test": "assert get_Char(\"Python\") == 105 # the correct character is P",
        "num_ids": 494
    },
    {
        "number": 84,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sequence(n):\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]",
        "test": "assert sequence(2) == 1",
        "num_ids": 642
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n\n    Parameters:\n    r (float): radius of the sphere\n\n    Returns:\n    float: surface area of the sphere\n\n    \"\"\"\n    return math.pi * r**2",
        "test": "assert surfacearea_sphere(1) == 3.141592653589793, \"Expected surface area of sphere with radius 1 to be 3.141592653589793, but it is {} instead.\".format(surfacearea_sphere(1))",
        "num_ids": 553
    },
    {
        "number": 86,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def centered_hexagonal_number(n):\n    if n % 2 == 1:\n        n = n + 1\n    if n % 2 == 0:\n        n = n - 1\n    n = n * 2 - 1\n    \n    return n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 844
    },
    {
        "number": 87,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({\"a\":1,\"b\":2,\"c\":3}, {\"d\":4,\"e\":5,\"f\":6}, {\"g\":7,\"h\":8,\"i\":9}) == {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5,\"f\":6,\"g\":7,\"h\":8,\"i\":9}",
        "num_ids": 719
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "from collections import Counter\n\ndef freq_count(list1):\n    '''\n    Given a list of elements, return a dictionary of their frequencies.\n    '''\n    freq = Counter(list1)\n    return freq",
        "test": "assert freq_count(['apple', 'banana', 'cherry', 'apple', 'orange']) == {'apple': 2, 'banana': 1, 'cherry': 1, 'orange': 1}",
        "num_ids": 685
    },
    {
        "number": 89,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def closest_num(N):\n    closest = float('inf')\n    for i in range(1, N+1):\n        if i < N:\n            closest = min(closest, i)\n        else:\n            closest = max(closest, i)\n    return closest",
        "test": "assert closest_num(10) == 10",
        "num_ids": 481
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "test": "assert len_log([\"apple\", \"banana\", \"orange\"]) == 6",
        "num_ids": 630
    },
    {
        "number": 91,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False",
        "test": "assert find_substring(\"abcdefg\", \"xyz\") == False # False",
        "num_ids": 534
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_undulating(n):\n    '''\n    Function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return True\n    elif n % 2 == 0 and n % 3 == 0:\n        return True\n    elif n % 2 == 0 and n % 5 == 0:\n        return True\n    elif n % 3 == 0 and n % 5 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_undulating(5) == True",
        "num_ids": 514
    },
    {
        "number": 93,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,3) == 8",
        "num_ids": 346
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    result = None\n    for t in test_list:\n        if result is None or t[1] < result[1]:\n            result = t\n    return result[0] if result is not None else None",
        "test": "assert index_minimum([]) == None # empty list",
        "num_ids": 790
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 1:  # Base case: if the list has only one element, return it\n        return len(lst[0])  # Return its length\n\n    min_length = float('inf')  # Initialize the min_length variable to infinity\n\n    for sublist in lst:  # Iterate over each sublist in the list\n        if len(sublist) < min_length:  # If the length of a sublist is shorter than the current min_length\n            min_length = len(sublist)  # Update the min_length variable with the new length\n\n    return min_length",
        "test": "assert Find_Min_Length([[]]) == 0",
        "num_ids": 820
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors",
        "test": "assert divisor(10) == 4, \"The number of divisors of 10 should be 4.\"",
        "num_ids": 465
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Flatten the list of lists into a single list\n    flattened_list = []\n    for sublist in list1:\n        flattened_list.extend(sublist)\n\n    # Create an empty dictionary to store the frequency of each element\n    frequency = {}\n\n    # Iterate through the flattened list and count the frequency of each element\n    for element in flattened_list:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n\n    return frequency",
        "test": "assert frequency_lists([1,2,2,3,3,3,3]) == {1: 2, 2: 3, 3: 3}",
        "num_ids": 1072
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def multiply_num(numbers):\n    # multiply all the numbers in the list and return the result\n    result = 1\n    for number in numbers:\n        result *= number\n    return result\n",
        "test": "assert multiply_num([1, 2, 3]) == 6",
        "num_ids": 558
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty string to store the binary representation\n    binary = ''\n    # iterate over each digit of the decimal number\n    for digit in str(n):\n        # convert each digit to its binary equivalent and add it to the string\n        binary += bin(int(digit))[2:]\n    # return the binary representation of the decimal number\n    return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 591
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    else:\n        num_str = str(num)\n        length = len(num_str)\n        next_palindrome = num_str[0]\n        smallest = True\n\n        for i in range(1, length):\n            if num_str[i] == next_palindrome:\n                next_palindrome = num_str[i]\n            else:\n                next_palindrome = \"\"\n                smallest = True\n                break\n\n        if smallest:\n            return num + 1\n        else:\n            return num_str[0]\n",
        "test": "assert next_smallest_palindrome(1234567890) == 1234567891",
        "num_ids": 1473
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    # Initialize the index variable to 1\n    index = 1\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the count is equal to k, return the value at that index\n        if count == k:\n            return arr[i]\n        # Increment the count variable\n        count += 1\n        # Increment the index variable\n        index += 1\n    # If the count is greater than k, return None\n    return None",
        "test": "assert kth_element([1, 2, 3, 4, 5], 7) == None",
        "num_ids": 828
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word\n    new_words = [word.capitalize() for word in words]\n\n    # Join the words back together with the first letter in uppercase\n    return ''.join(new_words)",
        "test": "assert snake_to_camel('hello_world') == 'HelloWorld'",
        "num_ids": 502
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def eulerian_num(n, m):\n    a = 0\n    x = 1\n    y = 0\n\n    while m > 0:\n        if m % 2 == 1:\n            a += x\n            x = -y\n            y = a\n\n        m //= 2\n\n    return a",
        "test": "assert eulerian_num(6, 6) == 24",
        "num_ids": 776
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def sort_sublists(input_list):\n    sublists = []\n    for sublist in input_list:\n        if sublist:\n            sublists.append(sublist)\n    return sublists",
        "test": "assert sort_sublists([[''], [''], [''], [''], ['']]) == [[''], [''], [''], [''], ['']]",
        "num_ids": 1094
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "test": "assert count([False, False, False, True, True]) == 2",
        "num_ids": 311
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n",
        "test": "assert add_lists([1, 2, 3], []) == (1, 2, 3)",
        "num_ids": 473
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n        k += 1\n\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n\n    return merged_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 1236
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Define the binary string\n    binary_str = s\n    \n    # Define the rotation count\n    count = n\n    \n    # Initialize the count to 0\n    num_of_odd = 0\n    \n    # Loop through the binary string and count the number of odd numbers\n    for i in range(len(binary_str)):\n        if binary_str[i] == '1':\n            num_of_odd += 1\n        if num_of_odd == count:\n            # Exit the loop if the count is reached\n            break\n    \n    return num_of_odd",
        "test": "assert odd_Equivalent('101010', 3) == 3, \"The function should find the number of numbers with an odd value when rotating a binary string of length 3.\"",
        "num_ids": 967
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for innerlist in nestedlist:\n        common_elements = set(innerlist) & set(result)\n        result = list(common_elements)\n    return result",
        "test": "assert common_in_nested_lists([]) == []",
        "num_ids": 895
    },
    {
        "number": 113,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int_num = int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"42\") == True",
        "num_ids": 339
    },
    {
        "number": 115,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def empty_dit(list1):\n    for dictionary in list1:\n        if dictionary is {}:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 400
    },
    {
        "number": 116,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for i in range(len(nums)):\n        num += nums[i]\n    return num",
        "test": "assert tuple_to_int((1,2,3)) == 6",
        "num_ids": 399
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, (float, int)):\n                float_list.append(element)\n    return float_list",
        "test": "assert list_to_float([]) == []",
        "num_ids": 864
    },
    {
        "number": 118,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def string_to_list(string):\n    '''\n    Convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"abc 123 def\") == [\"abc\", \"123\", \"def\"]",
        "num_ids": 354
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return num\n        seen[num] = True\n    return None",
        "test": "assert search([1, 2, 3, 3, 4, 5]) == 3",
        "num_ids": 619
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst) - 2):\n        curr_product = lst[i][0] * lst[i+1][1] - lst[i][1] * lst[i+1][0]\n        if curr_product > max_product:\n            max_product = curr_product\n    return max_product",
        "test": "assert max_product_tuple([(-1, 1, 5), (-2, 2, 1), (1, -1, 3), (-3, -1, 2), (-4, 3, 2)]) == (8, 1)",
        "num_ids": 1271
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        '''\n        Check if a number is amicable or not.\n        '''\n        if num <= 1:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    def sum_amicable_numbers(num):\n        '''\n        Calculate the sum of all amicable numbers up to a specified number.\n        '''\n        total = 0\n        for i in range(1, num+1):\n            if is_amicable(i):\n                total += i\n        return total\n    \n    return sum_amicable_numbers(limit)",
        "test": "assert amicable_numbers_sum(100) == 479",
        "num_ids": 790
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the magnitude of the complex number\n    magnitude = abs(a) + abs(b)\n\n    # Calculate the angle of the complex number\n    angle = cmath.phase(a / magnitude)\n\n    # Return the angle in radians\n    return angle",
        "test": "assert angle_complex(1,1) == 0, \"The angle of (1,1) is not 0.\"",
        "num_ids": 734
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_length(string):\n    n = len(string)\n    count = 0\n    max_count = 0\n    max_length = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        max_count = max(max_count, count)\n        if count == 0:\n            max_length = i - max_length\n\n    return max_length",
        "test": "assert find_length('01101011') == 3",
        "num_ids": 1005
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef sum(a,b):\n    common_divisor = 0\n    while b!= 0:\n        common_divisor += 1\n        b = a % b\n        a = b\n    return common_divisor",
        "test": "assert sum(3,7) == 2 # (3+7)/2 = 6",
        "num_ids": 822
    },
    {
        "number": 127,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(3, 4) == 12",
        "num_ids": 292
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two parameters: the length of the words to be compared to and the list of words.\n    The function returns a list of words that are longer than n characters from the list.\n    '''\n\n    words = str.split()\n    result = []\n\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n\n    return result",
        "test": "assert long_words(4, 'hello world') == ['hello', 'world']",
        "num_ids": 566
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def magic_square_test(my_matrix):\n    if len(my_matrix)!= 16:\n        print(\"Invalid input matrix size\")\n        return False\n    for i in range(4):\n        for j in range(4):\n            if my_matrix[i][j]!= my_matrix[i][my_matrix[i].index(max(my_matrix[i]))] or \\\n               my_matrix[j][i]!= my_matrix[my_matrix[j].index(max(my_matrix[j]))][i]:\n                return False\n    return True",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 833
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_freq = None\n    max_count = 0\n    max_item = None\n    for item, count in frequency.items():\n        if count > max_count or (count == max_count and item > max_item):\n            max_freq = item\n            max_count = count\n            max_item = item\n    return max_freq",
        "test": "assert max_occurrences([1,2,2,3,3,3,3,3]) == 3",
        "num_ids": 876
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiou'\n    reversed_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str",
        "test": "assert reverse_vowels('Python') == 'nohtyP'",
        "num_ids": 610
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string(\"hello\") == \"hello\"",
        "num_ids": 401
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to store the sum\n    total = 0\n    # Loop through each number in the list\n    for num in nums:\n        # If the number is negative, add it to the total\n        if num < 0:\n            total += num\n    # Return the total\n    return total",
        "test": "assert sum_negativenum([-1, -2, -3, -4]) == -10",
        "num_ids": 547
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the constants for the first half of the hexagonal numbers\n    A, B, C = 1, 2, 3\n    # Define the constants for the second half of the hexagonal numbers\n    D, E, F = 4, 5, 6\n    \n    # Check if n is less than or equal to 2\n    if n <= 2:\n        return n\n    \n    # Calculate the sum of the first half of the hexagonal numbers\n    hexagonal_sum = A + B + C + D + E + F\n    \n    # Calculate the nth hexagonal number\n    if n % 2 == 0:\n        return hexagonal_sum // 2\n    else:\n        return (hexagonal_sum + A) // 2",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 897
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # create an integer array of zeros\n    zeros = array('i', [0]*len(nums))\n\n    # count the number of zeroes in the array\n    count_zeros = 0\n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n\n    # count the number of non-zeroes in the array\n    count_ones = 0\n    for num in nums:\n        if num!= 0:\n            count_ones += 1\n\n    # calculate the ratio\n    return (count_zeros / count_ones) if count_zeros > 0 else 0.0",
        "test": "assert zero_count([1, 0, 2, 3, 0, 4, 5, 6]) == 0.3333333333333333",
        "num_ids": 936
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        total = 0\n        while n > 0:\n            total += n\n            n -= 2\n        return total == 0",
        "test": "assert is_Sum_Of_Powers_Of_Two(16) == False",
        "num_ids": 847
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def circle_circumference(r):\n    '''\n    Calculate the circumference of a circle.\n    '''\n    return 2 * (3.14159 * r)",
        "test": "assert circle_circumference(5) == 12.56637061256637",
        "num_ids": 494
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for i in test_list:\n        if isinstance(i, list):\n            flat_list.extend(extract_singly(i))\n        else:\n            flat_list.append(i)\n    return set(flat_list)\n",
        "test": "assert extract_singly([[[1,2], [3,4]], [[5,6], [7,8]]]) == {1, 2, 3, 4, 5, 6, 7, 8}",
        "num_ids": 768
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def pancake_sort(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums",
        "test": "assert pancake_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 921
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[2,3,3],[3,4,5]) == 0, \"Count of same pair of items at position 1 and 3 are equal\"",
        "num_ids": 754
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find the number of lists in a tuple.\n\n    Parameters:\n    Input (tuple): A tuple containing multiple lists.\n\n    Returns:\n    int: The number of lists in the tuple.\n\n    \"\"\"\n    return len(Input)",
        "test": "assert find_lists([\"apple\", \"banana\", \"cherry\"]) == 3, \"The function is not returning the correct number of lists.\"",
        "num_ids": 620
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 4",
        "num_ids": 649
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b > 0:\n            y = -n // b\n            x = n // b - y\n        else:\n            return None\n    else:\n        x = (-b - b**2 // (4*a)) // (2*a)\n        y = b + x * a\n\n    if x**2 + y**2 == n:\n        return (x, y)\n    else:\n        return None",
        "test": "assert find_solution(5, 3, 10) == None",
        "num_ids": 861
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))",
        "test": "assert remove_elements([], []) == []",
        "num_ids": 703
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum",
        "test": "assert sum_series(5) == 21",
        "num_ids": 602
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l + 1):\n        area += s / (4 * pi * i)\n    return area",
        "test": "assert area_polygon(3, 5) == 6.0",
        "num_ids": 568
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n\n    Parameters:\n    n (int): An integer.\n\n    Returns:\n    bool: True if the sum of the divisors of n and its square is equal to n, else False.\n    \"\"\"\n    \n    # Calculate the sum of the divisors of n\n    divisor_sum = sum(int(math.sqrt(n)) for i in range(1, int(math.sqrt(n))+1))\n    \n    # Calculate the sum of the divisors of n squared\n    divisor_square_sum = sum(i*i for i in range(1, int(math.sqrt(n))+1))\n    \n    # Return True if the sum of the divisors of n and its square is equal to n, else False\n    return divisor_sum == divisor_square_sum",
        "test": "assert div_sum(10) == True",
        "num_ids": 1121
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1.lower():\n        if str1.lower().count(char) == 1:\n            count += 1\n    return count",
        "test": "assert count_char_position(\"\") == 0",
        "num_ids": 865
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2",
        "num_ids": 739
    },
    {
        "number": 167,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the next power of 2 greater than or equal to n\n    next_pow_of_2 = 1\n    while next_pow_of_2 < n:\n        next_pow_of_2 <<= 1\n\n    # Return the smallest power of 2 greater than or equal to n\n    return next_pow_of_2",
        "test": "assert next_power_of_2(0) == 1  # Should return 1",
        "num_ids": 1204
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency(1, [1,2,3,4,4,5,5,5,5]) == 3",
        "num_ids": 473
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return \"Error: m should be smaller than or equal to n.\"\n    elif m == n:\n        return sum(list1[m])\n    else:\n        return sum(list1[m:n+1])",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 2, 4) == 12",
        "num_ids": 873
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # calculate the area of the regular pentagon using the formula A = 2*pi*r^2\n    A = 2*math.pi*a**2\n\n    # return the perimeter of the pentagon using the formula P = 2*A\n    P = 2*A\n\n    # return the perimeter of the pentagon\n    return P",
        "test": "assert perimeter_pentagon(10) == 100",
        "num_ids": 605
    },
    {
        "number": 172,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+4] =='std':\n            count += 1\n        i += 1\n    return count",
        "test": "assert count_occurance(\"std\") == 1",
        "num_ids": 542
    },
    {
        "number": 222,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # get the type of the first element of the tuple\n    first_element_type = type(test_tuple[0])\n\n    # loop through the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # get the type of the current element\n        element_type = type(element)\n\n        # if the types are different, return False\n        if element_type!= first_element_type:\n            return False\n\n    # if all the types are same, return True\n    return True",
        "test": "assert check_type(('1', 2, '3')) is False",
        "num_ids": 668
    },
    {
        "number": 223,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_majority(arr, n, x):\n    # count the number of occurrences of x in the array\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # if there are more than n/2 occurrences of x in the array, return True\n    if count >= n/2:\n        return True\n    # if there are less than n/2 occurrences of x in the array, return False\n    else:\n        return False",
        "test": "assert is_majority([1, 2, 2, 1, 2, 2], 5, 1) == False",
        "num_ids": 899
    },
    {
        "number": 224,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1 # Get the rightmost 1-bit of the number\n        n >>= 1 # Shift the number left by one bit\n    return count",
        "test": "assert count_Set_Bits(0) == 0, \"count_Set_Bits(0) should return 0 for 0\"",
        "num_ids": 588
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_values.append(str[i])\n    return ''.join(odd_values)\n",
        "test": "assert odd_values_string(\"Python programming\") == \"nohtyping\"",
        "num_ids": 591
    },
    {
        "number": 227,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(2,5,8) == 2",
        "num_ids": 550
    },
    {
        "number": 228,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # check if both n and r are positive integers\n    if not isinstance(n, int) or not isinstance(r, int) or n <= 0 or r <= 0:\n        return False\n\n    # check if l is less than or equal to r\n    if l > r:\n        return False\n\n    # initialize a variable to store the number of set bits in the range\n    count = 0\n\n    # check each bit in the range\n    for i in range(l, r + 1):\n        # check if the bit is set in the current number of set bits\n        if n & (1 << i):\n            count += 1\n\n    # if all the bits in the range are set, return True\n    if count == n:\n        return True\n    # otherwise, return False\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,0,10) == False",
        "num_ids": 895
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize a counter to keep track of the number of negative elements\n    neg_count = 0\n\n    # Loop through the array and count the number of negative elements\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n\n    # Shift the negative elements to the beginning of the array\n    for i in range(neg_count):\n        arr[i], arr[n - 1 - i] = arr[n - 1 - i], arr[i]\n\n    # Reverse the array\n    for i in range(len(arr) // 2):\n        arr[i], arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n\n    return arr",
        "test": "assert re_arrange_array([1, 2, -3, -1, 4], 4) == [-1, 1, 2, 3, -3, -1, 4]",
        "num_ids": 1585
    },
    {
        "number": 230,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"char\")",
        "test": "assert replace_blank(\"\", \"\") == \"\"",
        "num_ids": 418
    },
    {
        "number": 232,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([1, 2, 3, 4, 5], 1) == [5]",
        "num_ids": 820
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area",
        "test": "assert lateralsuface_cylinder(5,3) == 30",
        "num_ids": 444
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume",
        "test": "assert volume_cube(5) == 125",
        "num_ids": 1303
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a counter to keep track of how many bits have been set\n    count = 0\n    # Loop through each bit in the number\n    for i in range(32):\n        # Check if the bit is set\n        if n & (1 << i):\n            # If it is, set it and increment the counter\n            n |= (1 << i)\n            count += 1\n    return n, count",
        "test": "assert even_bit_set_number(5) == 3 # Test case for the function with input 5",
        "num_ids": 790
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each tuple\n    counts = Counter(test_list)\n\n    # return the dictionary\n    return counts",
        "test": "assert check_occurences([('a', 1), ('b', 2), ('c', 3), ('c', 3), ('c', 2)]) == {'a': 3, 'b': 2, 'c': 3}",
        "num_ids": 991
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            substring = str[i:j]\n            if substring.strip()!= \"\":\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 762
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def get_total_number_of_sequences(m, n): \n    # Define a list of all possible sequences of length n, where each element is a positive integer\n    all_sequences = []\n\n    # Define a function to generate all possible combinations of length n from the given list of sequences\n    def generate_combinations(sequences):\n        for i in range(len(sequences)):\n            for j in range(i+1, len(sequences)):\n                yield sequences[i] + sequences[j]\n\n    # Define a function to count the number of sequences satisfying the given condition\n    def count_sequences(combination):\n        count = 1\n        for element in combination:\n            if element < 2*combination[0] or element > m:\n                count = 0\n                break\n        return count\n\n    # Generate all possible sequences of length n, where each element is a positive integer\n    for sequence in generate_combinations([1, 2, 3, 4, 5]):\n        # Check if the sequence satisfies the given condition\n        if count_sequences(sequence) == n:\n            all_sequences.append(sequence)\n\n    # Return the total number of sequences satisfying the given condition\n    return len(all_sequences)",
        "test": "assert get_total_number_of_sequences(10,10) == 100, \"get_total_number_of_sequences(10,10) should return 100\"",
        "num_ids": 1111
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1",
        "test": "assert replace_list([1,2,3,4,5], [2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 790
    },
    {
        "number": 242,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n\n    # initialize a variable to store the total number of characters\n    count = 0\n\n    # iterate through each character in the string\n    for char in str1:\n        # increment the count by 1 for each character\n        count += 1\n\n    # return the total count\n    return count",
        "test": "assert count_charac(\"Hello World\") == 11",
        "num_ids": 358
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # calculate the square root of N\n    sqrt = math.sqrt(N)\n    \n    # calculate the next perfect square\n    next_sqrt = round(sqrt + 0.5)\n    \n    # return the next perfect square\n    return next_sqrt",
        "test": "assert next_Perfect_Square(25) == 49",
        "num_ids": 1508
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def max_sum(arr): \n    n = len(arr)\n    max_sum = float('-inf')\n    for i in range(1, n): \n        for j in range(i): \n            temp = arr[j] + arr[i]\n            if temp > max_sum: \n                max_sum = temp\n    return max_sum",
        "test": "assert max_sum([1, 3, 5, 7, 9]) == 16, \"The correct maximum sum is 16.\"",
        "num_ids": 963
    },
    {
        "number": 246,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number < 0:\n        return None\n    else:\n        while number % 2 == 0:\n            number /= 2\n        x = 1\n        while number % 2 == 0:\n            x += 1\n            number //= 2\n        return x",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 701
    },
    {
        "number": 247,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    if n == 0:\n        return 0\n    # initialize a list to store the longest palindromic subsequence in the string\n    dp = [1] * n\n    # initialize the first two rows of the table\n    dp[0] = 1\n    dp[1] = 1\n    # loop through the remaining rows\n    for i in range(2, n):\n        # if the current character is already a palindrome, then set its length to the current index + 1\n        if str[i-1] == str[i]:\n            dp[i] = dp[i-1] + 2\n        # otherwise, set its length to 1\n        else:\n            dp[i] = 1\n    # find the length of the longest palindromic subsequence in the string\n    return max(dp)\n",
        "test": "assert lps(\"\") == 0",
        "num_ids": 1079
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum_of_n = 1\n    for i in range(2, n+1):\n        sum_of_n += i / i - 1\n    return sum_of_n",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 594
    },
    {
        "number": 249,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set to store the intersection of the two arrays\n    intersection = set(array_nums1).intersection(set(array_nums2))\n    # Convert the set to a list and return it\n    return list(intersection)\n",
        "test": "assert intersection_array([], []) == []",
        "num_ids": 740
    },
    {
        "number": 250,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 4, 5), 6) == 0, \"The function should return 0 if the element is not present in the tuple.\"",
        "num_ids": 608
    },
    {
        "number": 251,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(item)\n    for i in range(len(new_list)):\n        if new_list[i] == element:\n            new_list.insert(i,element)\n            break\n    return new_list",
        "test": "assert insert_element([], 1) == []",
        "num_ids": 594
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Convert complex numbers to polar coordinates.\n    '''\n    complex_number = numbers[0] + 1j * numbers[1]\n    magnitude = abs(complex_number)\n    angle = cmath.phase(complex_number)\n    return magnitude, angle",
        "test": "assert convert(3 + 4j) == (3.0 + 4.0j), \"The function should return (3.0 + 4.0j).\"",
        "num_ids": 915
    },
    {
        "number": 253,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 447
    },
    {
        "number": 255,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if len(combinations) < n:\n                    combinations.append((l[i], l[j], l[k]))\n    return combinations",
        "test": "assert combinations_colors([], 1) == []",
        "num_ids": 735
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(num % i!= 0 for num in range(2, int(n**0.5)+1)):\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(1) == 0",
        "num_ids": 769
    },
    {
        "number": 257,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def swap_numbers(a, b):\n    return (b, a)",
        "test": "assert swap_numbers(5,7) == (7,5)",
        "num_ids": 250
    },
    {
        "number": 259,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Maximize the first tuple\n    if test_tup1[1] > test_tup2[1]:\n        return test_tup1\n\n    # Maximize the second tuple\n    elif test_tup1[1] < test_tup2[1]:\n        return test_tup2\n\n    # Both tuples are equal\n    else:\n        return test_tup1",
        "test": "assert maximize_elements((1, 2), (3, 4)) == (3, 4)",
        "num_ids": 754
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def newman_prime(n):\n    # Check if n is 2 or less\n    if n <= 1:\n        return \"Not prime\"\n    \n    # Initialize variables\n    a = 2\n    b = 0\n    \n    # Perform prime check up to n-1\n    while n-b > 1:\n        # Check if a is a prime number\n        if a == a**2 + b:\n            return a\n        \n        # Update values\n        if a % 2 == 0:\n            a += 1\n        else:\n            b += 1\n    \n    # Return the last prime number found\n    return a",
        "test": "assert newman_prime(2) == 3",
        "num_ids": 927
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # Check if the two tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples are not of the same length.\")\n        return\n    \n    # Initialize the result tuple with the same length as the first tuple\n    result = test_tup1\n    \n    # Perform the division operation element-wise\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] / test_tup2[i]\n    \n    return result",
        "test": "assert division_elements((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\")) == ((\"a/d\", \"b/e\", \"c/f\"), (\"d/e\", \"e/f\", \"f/a\"))",
        "num_ids": 1039
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    result1 = list1[:L]\n    result2 = list1[L:]\n    return (result1, result2)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 1000
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_of_age = h_age / 7\n    return years_of_age",
        "test": "assert dog_age(7) == 1",
        "num_ids": 411
    },
    {
        "number": 265,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n\n    result = []\n    n = 0\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n        n += 1\n\n    return result",
        "test": "assert list_split([], 1) == []",
        "num_ids": 722
    },
    {
        "number": 266,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert lateralsurface_cube(3) == 27, \"The lateral surface area of a cube with side length 3 is 27.\"",
        "num_ids": 532
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def square_Sum(n):\n    '''\n    Write a Python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Create an empty list to store the odd natural numbers\n    odd_numbers = []\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Append each odd natural number to the list of odd natural numbers\n        odd_numbers.append(i)\n    # Loop through the odd natural numbers and calculate the sum of the squares\n    sum_of_squares = 0\n    for i in odd_numbers:\n        sum_of_squares += i**2\n    # Return the sum of the squares\n    return sum_of_squares",
        "test": "assert square_Sum(3) == 9",
        "num_ids": 566
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # set variables to store the numerator and denominator\n    numerator = 0\n    denominator = 1\n    \n    # loop until the nth star number is found\n    while numerator <= n:\n        # calculate the next numerator\n        numerator += 1\n        \n        # check if the next numerator is a factor of the nth star number\n        if n % numerator == 0:\n            # check if the denominator is a factor of the next numerator\n            if denominator % numerator == 0:\n                # return the nth star number if both are factors\n                return numerator\n            \n            # if the denominator is smaller than the next numerator, the next numerator is a factor\n            else:\n                denominator += 1\n        else:\n            # if the next numerator is not a factor of the nth star number, the next numerator is not a factor\n            denominator += 1\n    \n    # if the nth star number is not found, return None\n    return None",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 666
    },
    {
        "number": 269,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return None",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 301
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n            sum_even_index += 1\n    return sum_even, sum_even_index\n",
        "test": "assert sum_even_and_even_index([1, 2, 3, 4, 5]) == 15 # testing the sum_even_and_even_index function with a sample input",
        "num_ids": 828
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # Initialize the sum and count variables\n    sum = 0\n    count = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # Check if the square of the current number is equal to 5^5\n        if i**5 == i**2:\n            # Add the current number to the sum\n            sum += i\n            # Increment the count variable\n            count += 1\n\n    # Return the sum of the first n even natural numbers that are raised to the fifth power\n    return sum, count",
        "test": "assert even_Power_Sum(50) == 2536, \"The sum of the first 50 even natural numbers that are raised to the fifth power is incorrect.\"",
        "num_ids": 947
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for t in test_list:\n        rear_elements.append(t[1])\n    return rear_elements",
        "test": "assert rear_extract([]) == []",
        "num_ids": 704
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "test": "assert substract_elements((\"a\", \"b\"), (\"c\", \"d\")) == (\"a\", \"b\", \"c\", \"d\")",
        "num_ids": 1133
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2==0:\n            sum += math.comb(n, i)\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0   # n = 0",
        "num_ids": 679
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 4/3 * np.pi * r**3 * h",
        "test": "assert volume_cylinder(3,4) == 6.283185307179586",
        "num_ids": 612
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 6) == {}",
        "num_ids": 669
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return 0\n    else:\n        return count_first_elements(test_tup[1:]) + 1\n",
        "test": "assert count_first_elements(('apple', 'banana', 'cherry', 'date')) == 3",
        "num_ids": 682
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def is_num_decagonal(n):\n    # Find the square root of n\n    sqrt_n = int(n**0.5)\n    # Check if n is divisible by sqrt_n (i.e., n is a square decagonal)\n    if n % sqrt_n == 0:\n        # If so, return True\n        return True\n    # Otherwise, return False\n    return False",
        "test": "assert is_num_decagonal(20) == 1",
        "num_ids": 831
    },
    {
        "number": 280,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1",
        "test": "assert sequential_search([1,2,3,4,5], 6) == (False, -1)",
        "num_ids": 831
    },
    {
        "number": 281,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Initialize a set to store unique elements in the list\n    unique_set = set(test_list)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 4, 5, 6]) # True",
        "num_ids": 629
    },
    {
        "number": 282,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n",
        "test": "assert sub_list([1,2,3],[1,2,3]) == [0, 0, 0]",
        "num_ids": 605
    },
    {
        "number": 283,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = {}\n    for digit in str(n):\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n\n    for digit in str(n):\n        if frequency[digit] > 1:\n            return False\n\n    return True",
        "test": "assert validate(12345) == True",
        "num_ids": 542
    },
    {
        "number": 284,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_element(lst, element):\n    for item in lst:\n        if item!= element:\n            return False\n    return True",
        "test": "assert check_element([1, 2, 3, 4, 5], 6) == False",
        "num_ids": 504
    },
    {
        "number": 285,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.{2,3}'\n    matches = re.findall(pattern, text)\n    return bool(matches)\n",
        "test": "assert text_match_two_three(\"abbb\") == True",
        "num_ids": 504
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Input: \n    a: array of integers\n    n: size of the array\n    k: integer representing the number of times the array should be repeated\n\n    Output: \n    The largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize variables\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    # Iterate through the array and find the maximum sum of a contiguous array\n    for i in range(n):\n        # Find the maximum sum of a subarray ending at i\n        ending_here = max(a[i], 0) * k\n        # Update max_ending_here with the maximum sum of a subarray ending at i\n        max_ending_here = max(max_ending_here, ending_here)\n        # Update max_so_far with the maximum sum of a subarray ending at i\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "test": "assert max_sub_array_sum_repeated([1, -2, 3, -4, 5], 4, 3) == 9 # Case 1",
        "num_ids": 1467
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i*i\n    return total",
        "test": "assert square_Sum(10) == 10240",
        "num_ids": 648
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list of maximum length.\n    '''\n    max_list = []\n    max_length = 0\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_list = sublist\n            max_length = len(sublist)\n    return max_list",
        "test": "assert max_length([]) == []",
        "num_ids": 735
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_no_of_ways(n, k):\n    # Calculate the number of ways of painting n posts with k colors\n    ways = 0\n    for i in range(k+1):\n        ways += n // (i + 1)\n    \n    return ways",
        "test": "assert count_no_of_ways(n=3, k=2) == 5, \"The function should return the correct output for n=3 and k=2.\"",
        "num_ids": 1075
    },
    {
        "number": 292,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find(n, m):\n    # rounding down to nearest integer\n    n = int(n)\n    m = int(m)\n    # division\n    quotient = n // m\n    # rounding up to nearest integer\n    return quotient",
        "test": "assert find(10,5) == 2",
        "num_ids": 517
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    third_side = (w**2 + h**2)**0.5\n    return third_side",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 466
    },
    {
        "number": 294,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Initialize a variable to store the maximum value\n    max_val = None\n\n    # Loop through each element in the list\n    for element in listval:\n\n        # Check if the current element is greater than the maximum value\n        if max_val is None or element > max_val:\n            max_val = element\n\n    # Return the maximum value\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5, \"max_val([1, 2, 3, 4, 5]) should return 5.\"",
        "num_ids": 736
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize a variable to store the sum of divisors\n    divisor_sum = 0\n    # Calculate the sum of all divisors of the number using a loop\n    for i in range(1, number+1):\n        if number % i == 0:\n            # If the number is divisible by i, add i to the sum of divisors\n            divisor_sum += i\n    # Return the sum of divisors\n    return divisor_sum",
        "test": "assert sum_div(12) == 28",
        "num_ids": 603
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                arr[i], arr[j] = arr[j], arr[i]\n    return inv_count",
        "test": "assert get_Inv_Count([1, 3, 2, 4, 5]) == 1  # the function returns 1 for an array with one element and 0 for an array with 2 elements",
        "num_ids": 773
    },
    {
        "number": 297,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n\n    return result",
        "test": "assert flatten_list([1, 2, 3, [4, 5, [6, [7]]]]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 731
    },
    {
        "number": 299,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate from it.\n    '''\n    max_val = stdata[0][1]  # assume first tuple is the maximum aggregate\n    for tup in stdata:\n        if tup[1] > max_val:\n            max_val = tup[1]\n    return max_val",
        "test": "assert max_aggregate([(\"apple\", 2), (\"banana\", 3), (\"cherry\", 1), (\"date\", 4), (\"elderberry\", 5)]) == 5",
        "num_ids": 1019
    },
    {
        "number": 300,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_binary_seq(n):\n    # Create a list of all binary sequences of length n\n    binary_sequences = []\n    for i in range(2**n):\n        binary_seq = ''.join(bin(i)[2:])\n        binary_sequences.append(binary_seq)\n\n    # Create a dictionary to store the count of each binary sequence\n    count = {}\n    for binary_seq in binary_sequences:\n        bit_sum = 0\n        for bit in binary_seq:\n            bit_sum += int(bit)\n        count[binary_seq] = bit_sum\n\n    # Find the maximum count of a binary sequence\n    max_count = 0\n    for binary_seq, count in count.items():\n        if count > max_count:\n            max_count = count\n\n    # Return the count of all binary sequences of length 2n with sum of first n bits equal to sum of last n bits\n    return max_count",
        "test": "assert count_binary_seq(1) == 1",
        "num_ids": 1168
    },
    {
        "number": 301,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def dict_depth(d):\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1\n        else:\n            break\n    return depth",
        "test": "assert dict_depth({}) == 0",
        "num_ids": 585
    },
    {
        "number": 304,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr = arr[::-1]  # reverse the array to find it in reverse order\n    return arr[index]  # return the element at the given index",
        "test": "assert find_Element(arr = [1,2,3,4,5], ranges = [0,10], rotations = 2, index = 2) == 3",
        "num_ids": 1238
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    return p_words",
        "test": "assert start_withp(['apple', 'banana', 'orange', 'pear']) == ('apple', 'orange')",
        "num_ids": 770
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    prefix_sum = [0] * n\n    prefix_sum[index] = 1\n    max_sum = float('-inf')\n\n    for i in range(1, n):\n        current_sum = prefix_sum[i] + a[i - 1]\n        if current_sum >= k:\n            max_sum = max(max_sum, current_sum)\n        prefix_sum[i] = current_sum\n\n    return max_sum",
        "test": "assert max_sum_increasing_subseq(a, n, index, k) == expected_output",
        "num_ids": 1237
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    for i in range(m):\n        colon[i] = tuplex[i]\n    for i in range(n-m):\n        colon[i+m] = tuplex[i]\n    return colon",
        "test": "assert colon_tuplex((1, 2, 3), 2, 3) == '(1, 2, 3)'",
        "num_ids": 845
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    factors = []\n    products = []\n    \n    for i in range(N):\n        factors.append(nums1[i])\n        products.append(nums2[i])\n        \n    # Sort the products in descending order\n    products.sort(reverse=True)\n    \n    # Find the largest product among the selected factors\n    num = 1\n    for i in range(1, N):\n        if products[i] > products[i-1]:\n            num *= factors[i]\n            \n    return num\n",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 6) == [1800, 900, 480]",
        "num_ids": 1631
    },
    {
        "number": 309,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(3,4) == 4",
        "num_ids": 255
    },
    {
        "number": 310,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 408
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def set_left_most_unset_bit(n):\n    # Convert the binary number to decimal\n    decimal_number = int(bin(n)[2:], 2)\n\n    # Find the rightmost set bit\n    rightmost_bit = 0\n    while decimal_number & 1:\n        rightmost_bit += 1\n        decimal_number >>= 1\n\n    # Set the leftmost set bit to 1\n    decimal_number |= 1 << rightmost_bit\n\n    # Convert the decimal number back to binary\n    binary_number = bin(decimal_number)[2:]\n\n    return int(binary_number, 2)",
        "test": "assert set_left_most_unset_bit(2) == 3",
        "num_ids": 610
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h\n    return volume",
        "test": "assert volume_cone(1,1) == 3.141592653589793",
        "num_ids": 514
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power",
        "test": "assert highest_Power_of_2(10) == 16",
        "num_ids": 763
    },
    {
        "number": 389,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 472
    },
    {
        "number": 390,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Apply the format string to each element of the list\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)\n    return list_",
        "test": "assert add_string([], \"\") == [] # test empty list",
        "num_ids": 559
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n\n    # Check if length of all the lists are equal\n    if len(l1)!= len(l2)!= len(l3):\n        print(\"Error: Length of lists should be equal.\")\n        return\n\n    # Convert the lists to dictionaries\n    d1 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n\n    d2 = {}\n    for i in range(len(l1)):\n        d2[l1[i]] = l3[i]\n\n    d3 = {}\n    for i in range(len(l1)):\n        d3[l1[i]] = d1[l1[i]]\n\n    d4 = {}\n    for i in range(len(l1)):\n        d4[l1[i]] = d2[l1[i]]\n\n    d5 = {}\n    for i in range(len(l1)):\n        d5[l1[i]] = d3[l1[i]]\n\n    d6 = {}\n    for i in range(len(l1)):\n        d6[l1[i]] = d4[l1[i]]\n\n    d7 = {}\n    for i in range(len(l1)):\n        d7[l1[i]] = d5[l1[i]]\n\n    d8 = {}\n    for i in range(len(l1)):\n        d8[l1[i]] = d6[l1[i]]\n\n    d9 = {}\n    for i in range(len(l1)):\n        d9[l1[i]] = d7[l1[i]]\n\n    d10 = {}\n    for i in range(len(l1)):\n        d10[l1[i]] = d8[l1[i]]\n\n    d11 = {}\n    for i in range(len(l1)):\n        d11[l1[i]] = d9[l1[i]]\n\n    d12 = {}\n    for i in range(len(l1)):\n        d12[l1[i]] = d10[l1[i]]\n\n    d13 = {}\n    for i in range(len(l1)):\n        d13[l1[i]] = d11[l1[i]]\n\n    d14 = {}\n    for i in range(len(l1)):\n        d14[l1[i]] = d12[l1[i]]\n\n    d15 = {}\n    for i in range(len(l1)):\n        d15[l1[i]] = d13[l1[i]]\n\n    d16 = {}\n    for i in range(len(l1)):\n        d16[l1[i]] = d14[l1[i]]\n\n    d17 = {}\n    for i in range(len(l1)):\n        d17[l1[i]] = d15[l1[i]]\n\n    d18 = {}\n    for i in range(len(l1)):\n        d18[l1[i]] = d16[l1[i]]\n\n    d19 = {}\n    for i in range(len(l1)):\n        d19[l1[i]] = d17[l1[i]]\n\n    d20 = {}\n    for i in range(len(l1)):\n        d20[l1[i]] = d18[l1[i]]\n\n    d21 = {}\n    for i in range(len(l1)):\n        d21[l1[i]] = d19[l1[i]]\n\n    d22 = {}\n    for i in range(len(l1)):\n        d22[l1[i]] = d20[l1[i]]\n\n    d23 = {}\n    for i in range(len(l1)):\n        d23[l1[i]] = d21[l1[i]]\n\n    d24 = {}\n    for i in range(len(l1)):\n        d24[l1[i]] = d22[l1[i]]\n\n    d25 = {}\n    for i in range(len(l1)):\n        d25[l1[i]] = d23[l1[i]]\n\n    d26 = {}\n    for i in range(len(l1)):\n        d26[l1[i]] = d24[l",
        "test": "assert convert_list_dictionary([1, 2, 3, 4, 5], ['apple', 'banana', 'cherry'], ['red', 'green', 'blue']) == {'apple': {'red': 1, 'green': 2, 'blue': 3}, 'banana': {'red': 4, 'green': 5, 'blue': 0}, 'cherry': {'red': 5, 'green': 0, 'blue': 0}}",
        "num_ids": 1932
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = n\n    half_sum = (n//2) + (n//3) + (n//4) + (n//5)\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            half_sum += i\n        else:\n            half_sum -= i\n        if half_sum > max_sum:\n            max_sum = half_sum\n    return max_sum",
        "test": "assert get_max_sum(10) == 30",
        "num_ids": 1048
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    # Initialize maximum length and the first element\n    max_length = 1\n    max_element = input_list[0]\n\n    # Loop through each element in the input list\n    for element in input_list:\n        # If the current element is longer than the current maximum, update\n        # the maximum length and the new maximum element\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element",
        "test": "assert max_length_list([1, 2, 3, 4, 5, 6]) == [5]",
        "num_ids": 828
    },
    {
        "number": 394,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique = True\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                unique = False\n                break\n    return unique",
        "test": "assert check_distinct([1, 2, 3, 4, 5]) # True",
        "num_ids": 519
    },
    {
        "number": 395,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    for char in str1:\n        if char in char_dict:\n            return char\n    return None",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 910
    },
    {
        "number": 396,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if not re.match(regex, string):\n        return False\n    if len(string) % 2 == 1:\n        return False\n    return True",
        "test": "assert check_char('world') == False",
        "num_ids": 546
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def partition(arr, low, high):\n    pivot = arr[high]  # Choose the last element as pivot\n    i = low - 1  # Initialize the index of smaller element as -1\n\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]  # Swap pivot and last element\n    return i + 1\n\n\ndef quick_sort(arr, low, high):\n    if low < high:\n        pi = partition(arr, low, high)\n        quick_sort(arr, low, pi - 1)\n        quick_sort(arr, pi + 1, high)\n\n\ndef median_numbers(a, b, c):\n    arr = [a, b, c]\n    quick_sort(arr, 0, len(arr) - 1)\n    return arr[len(arr) // 2]\n",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 745
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total",
        "test": "assert sum_of_digits([1, 2, 3, 4]) == 10  # pass",
        "num_ids": 810
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    result_tup = []\n\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] ^ test_tup2[i])\n\n    return tuple(result_tup)",
        "test": "assert bitwise_xor((1, 2), (1, 2)) == (0, 0) # case 2",
        "num_ids": 1927
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a dictionary to store the frequency of each tuple\n    freq = {}\n    # loop through each tuple in the list and add it to the dictionary with its frequency\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    # return the number of unique tuples in the list\n    return len(freq)",
        "test": "assert extract_freq([]) == 0, \"extract_freq([]) should return 0\"",
        "num_ids": 864
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Create a list to store the result\n    result_list = []\n\n    # Iterate over each element of each tuple in the two input tuples\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            # Add the elements of the two tuples at the same index\n            result = tup1[index] + tup2[index]\n            # Add the result to the list\n            result_list.append(result)\n\n    return result_list\n",
        "test": "assert add_nested_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)",
        "num_ids": 891
    },
    {
        "number": 404,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n\n    if a<b: \n        return a \n    else: \n        return b",
        "test": "assert minimum(3,4) == 3 ",
        "num_ids": 281
    },
    {
        "number": 405,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False ",
        "test": "assert check_tuplex(\"hello world\", \"world\") == True",
        "num_ids": 363
    },
    {
        "number": 406,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # if the number is even, return true\n    if x % 2 == 0:\n        return True\n    \n    # if the number is odd, return false\n    else:\n        return False",
        "test": "assert find_Parity(9876543210) == 1, \"9876543210 should be even parity\"",
        "num_ids": 578
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert n to a string\n    n_str = str(n)\n    # Initialize variables\n    num = int(n_str)\n    next_bigger = 0\n    # Iterate through each digit\n    for i in range(len(n_str)):\n        # Find the next larger digit\n        temp = num % 10\n        # If the current digit is not the next larger, increase it by 1\n        if temp!= next_bigger:\n            next_bigger = temp\n            num //= 10\n    # Convert the next larger number back to an integer\n    return int(next_bigger)",
        "test": "assert rearrange_bigger(1234567) == 1567342, \"rearrange_bigger(1234567) should return 1567342\"",
        "num_ids": 1275
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Find the k smallest pairs in nums1 and nums2 such that they consist of one element from each array.\n    The pairs are returned as a list of tuples where each tuple contains two elements from nums1 and nums2.\n    '''\n    # Create a min heap to store the pairs\n    min_heap = []\n\n    # Iterate through the arrays and insert the k smallest pairs into the min heap\n    for num1, num2 in zip(nums1, nums2):\n        # If the size of the heap is less than or equal to k, insert the current pair into the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (num1, num2))\n        # If the size of the heap is greater than k, remove the smallest pair from the heap\n        elif len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Return the list of pairs in the heap\n    return [pair for pair in min_heap]",
        "test": "assert k_smallest_pairs([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 3) == [(1, 4), (2, 5), (3, 6)]",
        "num_ids": 1770
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def min_product_tuple(list1):\n    # create empty dictionary to store minimum product found so far\n    min_products = {}\n    \n    # iterate through each tuple in the input list\n    for tup in list1:\n        # check if current tuple is already in dictionary\n        if tup in min_products:\n            # increment value for current tuple by product\n            min_products[tup] += tup[0] * tup[1]\n        else:\n            # add new tuple as key with product of 1\n            min_products[tup] = tup[0] * tup[1]\n    \n    # return minimum product found\n    return min(min_products.values())",
        "test": "assert min_product_tuple([2, 3, 5, 6, 8]) == (18, 36, 24) # test case 2",
        "num_ids": 1097
    },
    {
        "number": 410,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to be the first element in the list\n    minval = listval[0]\n    # loop through the rest of the elements in the list\n    for i in range(1, len(listval)):\n        # if the current element is smaller than the minimum value, update minval\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 701
    },
    {
        "number": 411,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    word = re.sub('_(.)?', lambda m: m.group(1).upper(), word)\n    return word",
        "test": "assert snake_to_camel('snake_case') =='snakeCase'",
        "num_ids": 650
    },
    {
        "number": 412,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(l):\n    return [num for num in l if num % 2!= 0]",
        "test": "assert remove_odd([]) == []",
        "num_ids": 579
    },
    {
        "number": 413,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]",
        "test": "assert extract_nth_element([('apple', 1), ('banana', 2), ('orange', 3), ('grape', 4)], 3) == ('orange', 3)",
        "num_ids": 622
    },
    {
        "number": 414,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def overlapping(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3],[1,2,3,4]) # True",
        "num_ids": 656
    },
    {
        "number": 415,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def max_Product(arr):\n    max_product = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        max_product = max(arr[i], max_product * arr[i])\n    return max_product",
        "test": "assert max_Product([1,2,3,4]) == 24  # expected output: 24",
        "num_ids": 828
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    result = []\n    for tup in Input:\n        if not result or tup[0]!= result[-1][0]:\n            result.append(tup)\n    return result",
        "test": "assert group_tuples([]) == []",
        "num_ids": 847
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    \n    return max_element",
        "test": "assert Find_Max([]) == None",
        "num_ids": 608
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round every number in the list\n    list1_rounded = [round(num) for num in list1]\n\n    # Calculate the sum of the rounded numbers\n    total_sum = sum(list1_rounded)\n\n    # Calculate the length of the list\n    length = len(list1)\n\n    # Multiply the sum by the length and print the result\n    print(\"The total sum of rounded numbers is:\", total_sum * length)\n",
        "test": "assert round_and_sum([10, 20, 30, 40, 50]) == 1500",
        "num_ids": 857
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2, n+1):\n        total += i ** 3\n    return total",
        "test": "assert cube_Sum(0) == 0 # cube_Sum(0) should return 0 when n = 0",
        "num_ids": 465
    },
    {
        "number": 421,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) +''\n    return result[:-1]",
        "test": "assert concatenate_tuple(('a', 'b', 'c', 'd', 'e')) == 'abcd'",
        "num_ids": 476
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def find_Average_Of_Cube(n):\n    # initialize sum and count\n    sum_of_cubes = 0\n    count = 0\n    \n    # loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate cube of current number\n        cube = i ** 3\n        # add cube to sum and increment count\n        sum_of_cubes += cube\n        count += 1\n    \n    # calculate average of cubes\n    average = sum_of_cubes / count\n    \n    # return the average\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 585
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    rear_elements = []\n    for string in test_tuple:\n        if string.endswith(']'):\n            rear_elements.append(string.split(']')[0])\n    return rear_elements",
        "test": "assert extract_rear(('a', 'b', 'c', 'd', 'e', 'f')) == (3, 2, 'f')",
        "num_ids": 623
    },
    {
        "number": 425,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 1) == 0, \"count_element_in_list([], 1) should return 0\"",
        "num_ids": 684
    },
    {
        "number": 426,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def filter_oddnumbers(nums):\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert filter_oddnumbers([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 501
    },
    {
        "number": 427,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year, month, day = map(int, re.findall(r'\\d+', dt))\n    formatted_date = f'{day:02d}-{month:02d}-{year:04d}'\n    return formatted_date",
        "test": "assert change_date_format(\"2020-01-01\") == \"01-01-2020\"",
        "num_ids": 779
    },
    {
        "number": 428,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n\n        gap //= 2\n\n    return my_list",
        "test": "assert shell_sort([10, 15, 2, 8, 12, 13, 11, 5, 7, 9]) == [2, 5, 7, 8, 9, 10, 11, 12, 13, 15]",
        "num_ids": 1070
    },
    {
        "number": 429,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_elements = [x for x in test_tup1 if x in test_tup2]\n    and_tuples = tuple(and_elements)\n    return and_tuples",
        "test": "assert and_tuples((), ()) == ()",
        "num_ids": 837
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    directrix = (c - b**2) / (2 * a)\n    return directrix",
        "test": "assert parabola_directrix(2, 3, 10) == 0.25",
        "num_ids": 791
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # iterate over each element in list1 and check if it exists in list2\n    for elem in list1:\n        if elem in list2:\n            # if an element is found, return true\n            return True\n    # if no common element is found, return false\n    return False",
        "test": "assert common_element([], [1, 2, 3]) == False",
        "num_ids": 628
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Find the median length of a trapezium by adding up the lengths of the two bases and dividing by 2.\n    '''\n    trapezium_length = (base1 + base2) / 2\n    return trapezium_length",
        "test": "assert median_trapezium(10,20,5) == 15.0",
        "num_ids": 1002
    },
    {
        "number": 433,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # Check if the number is greater than all elements in the array\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n\n    # If the number is not greater than any element, return False\n    return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 712
    },
    {
        "number": 434,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    # Using re module to split the string into list of words\n    words = text.split()\n\n    # Using a loop to check if any word starts with 'a' and has at least one 'b'\n    for word in words:\n        if word.startswith('a') and len(re.findall('b', word)) >= 1:\n            return True\n\n    return False",
        "test": "assert text_match_one(\"abcabcbb\") == True",
        "num_ids": 514
    },
    {
        "number": 435,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n\n    # using modulo operator to find last digit\n    last_digit = n % 10\n\n    return last_digit",
        "test": "assert last_Digit(123456789) == 9, \"last_Digit(123456789) should return 9\"",
        "num_ids": 456
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of numbers as input and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num >= 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([]) == []",
        "num_ids": 509
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters from a string.\n\n    Args:\n        str1 (str): The input string.\n\n    Returns:\n        str: The modified string without odd characters.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalnum() or char =='' or char == '-':\n            new_str += char\n    return new_str",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 623
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Counts the number of bidirectional tuple pairs in the input list.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 713
    },
    {
        "number": 439,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total",
        "test": "assert multiple_to_single([1]) == 1",
        "num_ids": 474
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the pattern to match adverbs in the sentence\n    pattern = re.compile(r'\\b(kind|age|happiness|right|wrong)\\b')\n\n    # Use the findall method to find all matches in the sentence\n    matches = pattern.findall(text)\n\n    # Initialize an empty dictionary to store the positions of each adverb\n    positions = {}\n\n    # Loop through each match and store its position in the dictionary\n    for match in matches:\n        positions[match] = len(text) - text.index(match)\n\n    # Find the first adverb in the sentence\n    first_adverb = max(positions, key=positions.get)\n\n    # Return the first adverb's position\n    return first_adverb, positions[first_adverb]",
        "test": "assert find_adverb_position(\"The quick brown fox jumps over the lazy dog. This is a test.\") == (11, 13)",
        "num_ids": 1120
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3",
        "test": "assert surfacearea_cube(3) == 27, \"Incorrect surface area of a cube of size 3\"",
        "num_ids": 337
    },
    {
        "number": 442,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Return the ration of positive numbers in the input array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    if positive_count == 0:\n        return \"No positive numbers in the input array\"\n    else:\n        return positive_count / len(nums)",
        "test": "assert positive_count([1,2,3,4,5]) == 1.0",
        "num_ids": 776
    },
    {
        "number": 443,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf') # initialize largest to negative infinity\n    for num in list1:\n        if num < 0: # if number is negative\n            if num > largest: # if current number is larger than largest\n                largest = num # update largest variable\n    return largest # return largest negative number",
        "test": "assert largest_neg([1, 2, 3, -4, 5, 6, 7]) == -4",
        "num_ids": 601
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Trim each tuple in the given list by k.\n    '''\n    trimmed_list = []\n    for item in test_list:\n        if len(trimmed_list) == K:\n            break\n        if len(item) == K:\n            trimmed_list.append(item)\n    return trimmed_list",
        "test": "assert trim_tuple([1, 2, 3, 4, 5], 0) == ([1, 2, 3, 4, 5],)",
        "num_ids": 793
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Define a dictionary to store the index-wise multiplication result\n    result_dict = {}\n\n    # Iterate through the tuples and perform index wise multiplication\n    for i in range(len(test_tup1)):\n        result_dict[i] = tuple(map(lambda x, y: x * y, test_tup1[i], test_tup2[i]))\n\n    # Return the result dictionary\n    return result_dict",
        "test": "assert index_multiplication((1,2),(3,4,5)) == (1*3 + 2*4 + 3*5, 2*3 + 2*4 + 3*5)",
        "num_ids": 1087
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        count.pop(item, None)  # Removing the element from the count\n    return count",
        "test": "assert count_Occurrence((1,2,3,4,5), [2,2,3,4,5]) == 3",
        "num_ids": 719
    },
    {
        "number": 447,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 637
    },
    {
        "number": 448,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 673
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n",
        "test": "assert extract_string('hello world', 3) == 'world'",
        "num_ids": 488
    },
    {
        "number": 451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1",
        "test": "assert remove_whitespaces('   Hello, world!') == 'HelloWorld'",
        "num_ids": 490
    },
    {
        "number": 452,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost: \n        return 0 \n    else: \n        return actual_cost - sale_amount\n\nprint(loss_amount(100, 50)) # Output: 50\nprint(loss_amount(50, 100)) # Output: 0\nprint(loss_amount(300, 200)) # Output: 150",
        "test": "assert loss_amount(500,500) == 0",
        "num_ids": 519
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    even_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            even_sum += i\n\n    return even_sum",
        "test": "assert sumofFactors(10) == 30 # pass",
        "num_ids": 674
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"This is a sentence containing the word 'z' in it.\"\nresult = text_match_wordz(text)\nprint(result)",
        "test": "assert text_match_wordz(\"This is a test. This is another test.\") == \"test\"",
        "num_ids": 600
    },
    {
        "number": 455,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_dict = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    if monthnum2 in month_dict:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(31) == False",
        "num_ids": 696
    },
    {
        "number": 456,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist) // 2):\n        stringlist[i], stringlist[-i-1] = stringlist[-i-1], stringlist[i]\n    return stringlist",
        "test": "assert reverse_string_list([\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"e\", \"d\", \"c\", \"b\", \"a\"]",
        "num_ids": 690
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize min and max values\n    min_length = float('inf')\n    min_sublist = []\n\n    # Loop through all the sublists\n    for sublist in lst:\n\n        # Check if current sublist length is smaller than min length\n        if len(sublist) < min_length:\n\n            # Update min_length and min_sublist\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist",
        "test": "assert Find_Min([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]",
        "num_ids": 750
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(5, 10) == 50 # area of a rectangle with sides 5 and 10 is 50",
        "num_ids": 462
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove all uppercase characters from the string\n    str1 = str1.replace(' ', '')\n    # Replace all uppercase characters in the string with an empty string\n    str1 = re.sub('([A-Z])', '', str1)\n    # Return the modified string\n    return str1",
        "test": "assert remove_uppercase('') == ''",
        "num_ids": 465
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]",
        "test": "assert Extract([[1], [2], [3], [4], [5]]) == [[1]]",
        "num_ids": 500
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # initialize the counter to 0\n    upper_count = 0\n    \n    # loop through each character in the string\n    for char in str:\n        # if the character is uppercase, increment the counter\n        if char.isupper():\n            upper_count += 1\n    \n    # return the count of upper case characters in the string\n    return upper_count",
        "test": "assert upper_ctr(\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\") == 26",
        "num_ids": 454
    },
    {
        "number": 462,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def combinations_list(lst):\n    '''\n    Create a list of all possible combinations of elements in the given list.\n    '''\n    result = []\n    for i in range(1, len(lst) + 1):\n        sub_lst = lst[:i]\n        result.append(sub_lst)\n    return result",
        "test": "assert combinations_list([]) == []",
        "num_ids": 1393
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_subarray_product(arr):\n    '''\n    Given an array, find the maximum product subarray.\n    '''\n    max_so_far = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        current_product = max(current_product * arr[i], arr[i])\n        max_so_far = max(max_so_far, current_product)\n\n    return max_so_far",
        "test": "assert max_subarray_product([1, -2, 3, 4, -5]) == 12",
        "num_ids": 865
    },
    {
        "number": 464,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values in a dictionary are equal to the given value.\n    '''\n    for value in dict.values():\n        if value!= n:\n            return False\n    return True",
        "test": "assert check_value({}, 1) == True",
        "num_ids": 634
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 526
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_product(arr):\n    # Initialize the maximum product as the first number in the array\n    max_product = arr[0]\n\n    # Iterate through the remaining numbers in the array\n    for i in range(1, len(arr)):\n        # Find the largest product that can be formed by multiplying the current number and the previous ones\n        max_product = max(arr[i], max_product) * arr[i]\n\n    # Return the maximum product\n    return max_product",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 24 ",
        "num_ids": 728
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n    Parameters:\n        test_tup (tuple): A tuple containing two or more integers.\n\n    Returns:\n        tuple: A tuple containing the pairwise addition of the neighboring elements.\n    '''\n\n    result = []\n\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n\n    return tuple(result)\n",
        "test": "assert add_pairwise((2, 4, 6)) == (4, 5, 7)",
        "num_ids": 686
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the product variable\n    product = 1\n    # Iterate through the array and multiply each element with the product variable\n    for num in arr:\n        product = (product * num) % n\n    # Return the product variable\n    return product",
        "test": "assert find_remainder([1, 2, 3, 4, 5], 10) == 0",
        "num_ids": 517
    },
    {
        "number": 472,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # If the list is empty, return False\n    if len(l) == 0:\n        return False\n    \n    # If the first element of the list is not equal to 1, return False\n    if l[0]!= 1:\n        return False\n    \n    # Iterate through the list from the second element onwards\n    for i in range(1, len(l)):\n        # If the current element is not equal to the next element and not equal to 1, return False\n        if l[i]!= (i+1) and l[i]!= 1:\n            return False\n    \n    # If the loop completes without returning False, the list contains consecutive numbers\n    return True",
        "test": "assert check_Consecutive([1,2,2,3,4]) == False",
        "num_ids": 843
    },
    {
        "number": 473,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Define a set to store the intersection of the two lists\n    intersection = set(test_list1) & set(test_list2)\n    # Convert the set to a tuple and return it\n    return tuple(intersection)",
        "test": "assert tuple_intersection([], []) == ()",
        "num_ids": 777
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace characters in a string with new characters.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello world\", 'o', 'o') == \"hello world\"",
        "num_ids": 503
    },
    {
        "number": 475,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    \n    # sort the dictionary by value in ascending order\n    sorted_dict = dict(counter)\n    \n    return sorted_dict",
        "test": "assert sort_counter({}) == {}",
        "num_ids": 858
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # initialize variables\n    largest = float('-inf')\n    smallest = float('inf')\n    # iterate over the array\n    for num in nums:\n        # update the largest and smallest values\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    # return the sum of the largest and smallest values\n    return largest + smallest",
        "test": "assert big_sum([-1, 0, 2, 3, -4, 5]) == 5",
        "num_ids": 767
    },
    {
        "number": 477,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower('HELLO') == 'hello'",
        "num_ids": 252
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]\\w*\\b', '', str1).lower()",
        "test": "assert remove_lowercase(\"HELLO WORLD\") == \"hello world\"",
        "num_ids": 515
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #converting the number to string\n    num_str = str(n)\n\n    #finding the first digit of the string\n    first_digit = int(num_str[0])\n\n    return first_digit",
        "test": "assert first_Digit(123) == 1",
        "num_ids": 414
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 445
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize variables\n    a = 1\n    b = 0\n    c = 1\n    n_sum = 0\n\n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(n):\n        n_sum += i**3\n\n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        a += i\n        b += i**3\n\n    # Find the difference between the sum of cubes and sum of natural numbers\n    diff = n_sum - (a + b)\n\n    return diff",
        "test": "assert difference(10) == 55",
        "num_ids": 810
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] & 1 == 1:\n                count += 1\n    return count\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nN = len(A)\nprint(find_Odd_Pair(A, N))",
        "test": "assert find_Odd_Pair([1,2,3,4,5],5)==2 # find an odd pair with xor value 2",
        "num_ids": 805
    },
    {
        "number": 557,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def toggle_string(string):\n    '''\n    Toggle the case of all characters in a string.\n    '''\n    return string.upper()",
        "test": "assert toggle_string(\"world\") == \"WOrld\"",
        "num_ids": 576
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    while n2!= 0:\n        digit = n2 % 10\n        diff += abs(digit - n1 % 10)\n        n1 //= 10\n        n2 //= 10\n    return diff",
        "test": "assert digit_distance_nums(123, 123) == 0",
        "num_ids": 868
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_sum = max(max_sum, max_ending_here)\n    return max_sum",
        "test": "assert max_sub_array_sum([1], 1) == 1 # input: [1], size: 1",
        "num_ids": 832
    },
    {
        "number": 560,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Convert the tuples into sets to remove duplicates\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    \n    # Find the union of the two sets\n    union_set = test_set1.union(test_set2)\n    \n    # Convert the set back into a sorted list and return it\n    return sorted(union_set)",
        "test": "assert union_elements((1, 2, 3), (2, 3, 4)) == [1, 2, 3, 4]",
        "num_ids": 892
    },
    {
        "number": 562,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def Find_Max_Length(lst):\n    max_length = 1\n    current_length = 1\n    \n    for sublist in lst:\n        current_length += 1\n        \n        if current_length > max_length:\n            max_length = current_length\n            \n    return max_length",
        "test": "assert Find_Max_Length([1]), \"The list [1] should return 1.\"",
        "num_ids": 688
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function uses regular expressions to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    values = pattern.findall(text)\n    return values\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\n\nvalues = extract_values(text)\nprint(values)",
        "test": "assert extract_values(\"this is a sample string 'with quotation marks' and some more text\") == ['with quotation marks']",
        "num_ids": 742
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_Pairs(arr, n):\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # initialize count variable\n    count = 0\n\n    # loop through array\n    for i in range(len(arr)-1):\n        # if the current element is equal to the next element\n        if arr[i] == arr[i+1]:\n            count += 1\n\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5],6) == 0",
        "num_ids": 978
    },
    {
        "number": 565,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()",
        "test": "assert split('hello world') == ['hello', 'world']",
        "num_ids": 538
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_digits(n):\n    '''\n    Function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_of_digits = 0\n    while n > 0:\n        sum_of_digits += n % 10\n        n //= 10\n    return sum_of_digits",
        "test": "assert sum_digits(1234) == 1 + 2 + 3 + 4",
        "num_ids": 570
    },
    {
        "number": 567,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1.sort()  # sorts the list in ascending order\n    return list1  # returns the sorted list",
        "test": "assert issort_list([1, 1, 1, 1, 1]) # True",
        "num_ids": 671
    },
    {
        "number": 568,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n\n    Args:\n    length (int): The number of empty dictionaries to create.\n\n    Returns:\n    list: A list of N empty dictionaries.\n    '''\n\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 410
    },
    {
        "number": 569,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n\n    Input: list1 - A list of lists of strings.\n\n    Output: A list of sorted lists of strings.\n\n    '''\n\n    # Create an empty list to store the sorted sublists\n    sorted_sublists = []\n\n    # Iterate over each sublist of strings in the input list\n    for sublist in list1:\n\n        # Create an empty list to store the sublist elements\n        sublist_elements = []\n\n        # Iterate over each element in the sublist\n        for element in sublist:\n\n            # Append the element to the sublist elements list\n            sublist_elements.append(element)\n\n        # Create a new sublist from the sublist elements list\n        new_sublist = sublist_elements\n\n        # Sort the new sublist using the bubble sort algorithm\n        for i in range(len(new_sublist)):\n            for j in range(len(new_sublist)-1):\n                if new_sublist[j] > new_sublist[j+1]:\n                    temp = new_sublist[j]\n                    new_sublist[j] = new_sublist[j+1]\n                    new_sublist[j+1] = temp\n\n        # Append the sorted sublist to the sorted sublists list\n        sorted_sublists.append(new_sublist)\n\n    return sorted_sublists",
        "test": "assert sort_sublists([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 1086
    },
    {
        "number": 572,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def two_unique_nums(nums):\n    '''\n    Removes duplicate numbers from a given number of lists.\n    \n    Parameters:\n    nums (list): A list of numbers\n    \n    Returns:\n    list: A new list with duplicate numbers removed\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "test": "assert two_unique_nums([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 962
    },
    {
        "number": 573,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 574
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area",
        "test": "assert surfacearea_cylinder(3,2) == 12, \"The surface area of a cylinder with radius 3 and height 2 is incorrect.\"",
        "num_ids": 1462
    },
    {
        "number": 576,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    n = len(A)\n    m = len(B)\n    if m == 0:\n        return True\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        elif A[i] < B[j]:\n            i += 1\n        else:\n            j += 1\n    return j == m",
        "test": "assert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5]) == True",
        "num_ids": 891
    },
    {
        "number": 577,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def last_Digit_Factorial(n):\n    # Convert the number to a string\n    n_str = str(n)\n    \n    # Find the last digit of the number and convert it to an integer\n    last_digit = int(n_str[-1])\n    \n    # Find the factorial of the last digit\n    factorial = 1\n    for i in range(1, last_digit+1):\n        factorial *= i\n    \n    # Return the last digit of the factorial\n    return last_digit",
        "test": "assert last_Digit_Factorial(5) == 5",
        "num_ids": 654
    },
    {
        "number": 578,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def interleave_lists(*lists):\n    '''\n    Create a single flat list from multiple lists of the same length.\n    '''\n    result = []\n    for lst in lists:\n        result.extend(lst)\n    return result",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 826
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create an empty set to store the dissimilar elements\n    dissimilar_set = set()\n    \n    # iterate through the elements in the first tuple\n    for element in test_tup1:\n        # check if the element is present in the second tuple and not already in the dissimilar set\n        if element in test_tup2 and element not in dissimilar_set:\n            # add the element to the dissimilar set\n            dissimilar_set.add(element)\n            \n    # iterate through the elements in the second tuple\n    for element in test_tup2:\n        # check if the element is present in the first tuple and not already in the dissimilar set\n        if element in test_tup1 and element not in dissimilar_set:\n            # add the element to the dissimilar set\n            dissimilar_set.add(element)\n            \n    # return the list of dissimilar elements\n    return list(dissimilar_set)",
        "test": "assert find_dissimilar((1,2,3), (4,5,6)) == []",
        "num_ids": 1006
    },
    {
        "number": 580,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Define an empty list to store the filtered elements\n    filtered_list = []\n\n    # Iterate over each element in the nested mixed tuple\n    for element in test_tuple:\n        # Check if the element is a tuple (which means it's a nested tuple)\n        if isinstance(element, tuple):\n            # Recursively call the function on the nested tuple\n            filtered_list.extend(even_ele(element, even_fnc))\n        else:\n            # If the element is not a tuple, it means it's a regular value, so check if it's even\n            if even_fnc(element):\n                # If it's even, add it to the filtered list\n                filtered_list.append(element)\n\n    # Return the filtered list\n    return filtered_list",
        "test": "assert even_ele((1, (2, 3, 4, 5), (6, (7, 8, 9))), lambda x: x % 2 == 0)",
        "num_ids": 1047
    },
    {
        "number": 581,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def surface_Area(b,s):\n    area = b*s\n    return area",
        "test": "assert surface_Area(5,3) == 15 # base edge=5, height=3",
        "num_ids": 463
    },
    {
        "number": 582,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True, \"my_dict({}) should return True\"",
        "num_ids": 343
    },
    {
        "number": 583,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def catalan_number(num):\n    '''\n    Returns the nth Catalan number.\n    '''\n\n    if num < 0:\n        raise ValueError(\"Invalid input. Number must be non-negative.\")\n\n    def catalan(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return catalan(n-1) + catalan(n-2)\n\n    return catalan(num)",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1625
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\bly\\b', text)\n    positions = [m.start() for m in re.finditer(r'\\bly\\b', text)]\n    return adverbs, positions\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nadverbs, positions = find_adverbs(text)\nprint(\"Adverbs:\", adverbs)\nprint(\"Positions:\", positions)",
        "test": "assert find_adverbs(\"This is a test string. It ends with 'ly'.\") == (11, \"ly\")",
        "num_ids": 1067
    },
    {
        "number": 585,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the items into a heap\n    items_heap = [(item, price) for item, price in items]\n    # Use a max heap to keep track of the n most expensive items\n    heapq.heapify(items_heap)\n    # Return the n most expensive items in the heap\n    return [item for item, price in items_heap[:n]]",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 1041
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Remove all the elements except the first n elements from the list\n    new_l = l[:n]\n    # Append the new list to the original list and return it\n    return new_l + l[n:]",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]",
        "num_ids": 841
    },
    {
        "number": 587,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 385
    },
    {
        "number": 588,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def big_diff(nums):\n    # initialize variables\n    max_val = min_val = nums[0]\n\n    # iterate over the list and update max_val and min_val\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n\n    # return the difference between max_val and min_val\n    return max_val - min_val",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 634
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sum = 0\n    for i in range(a, b+1):\n        sum += i ** 2\n    return sum\n\nprint(perfect_squares(1, 5))  # Output: 25\nprint(perfect_squares(10, 20))  # Output: 225\nprint(perfect_squares(1, 10))  # Output: 31",
        "test": "assert perfect_squares(1, 1) == 1",
        "num_ids": 1035
    },
    {
        "number": 590,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    r = x\n    theta = y\n    return (r * cmath.cos(theta), r * cmath.sin(theta))",
        "test": "assert polar_rect(0,0) == (0, 0)",
        "num_ids": 533
    },
    {
        "number": 591,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # check if newList has length greater than 1\n    if len(newList) > 1:\n        # check if newList has only two elements\n        if len(newList) == 2:\n            # swap first and last elements in newList\n            newList[0], newList[-1] = newList[-1], newList[0]\n            # return newList after swapping\n            return newList\n        else:\n            # swap first and last elements in newList\n            newList[0], newList[-1] = newList[-1], newList[0]\n            # return newList after swapping\n            return newList\n    else:\n        # return newList if length is 1\n        return newList",
        "test": "assert swap_List([1,2,3]) == [3,2,1] # check if the function works correctly for an empty list",
        "num_ids": 844
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a Python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): Number of terms in the summation (should be odd)\n    k (int): Number of terms in the binomial coefficients (should be odd)\n\n    Returns:\n    float: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    if k > n:\n        return 0\n\n    # Compute the binomial coefficients\n    coeff = [1]\n    for i in range(1, n):\n        coeff.append(coeff[i-1] + coeff[i-2])\n\n    # Compute the sum of the product of consecutive binomial co-efficients\n    result = 1\n    for i in range(n):\n        result *= coeff[i]\n\n    return result",
        "test": "assert binomial_Coeff(1,0) == 1  # base case for binomial coeff",
        "num_ids": 1038
    },
    {
        "number": 593,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an ip address.\n    '''\n    # Remove all non-numeric characters from the input ip address\n    ip = re.sub('[^0-9.]', '', ip)\n    # Check if the ip address is valid (no zeroes present)\n    if len(ip) > 0:\n        return ip\n    else:\n        return None",
        "test": "assert removezero_ip(\"192.168.0.1\") == \"192.168.0.1\"",
        "num_ids": 774
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = abs(even_num - odd_num)\n    return diff\n",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 737
    },
    {
        "number": 595,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def min_Swaps(str1, str2):\n    swaps = 0\n    \n    for i in range(len(str1)):\n        if str1[i] == '1' and str2[i] == '0':\n            swaps += 1\n    \n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] == '0' and str2[i] == '1':\n            swaps += 1\n    \n    return swaps",
        "test": "assert min_Swaps(\"1010\", \"1011\") == 1",
        "num_ids": 980
    },
    {
        "number": 596,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sum(len(x) for x in tuple_list)",
        "test": "assert tuple_size(()) == 0 ",
        "num_ids": 398
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find kth element from two sorted arrays.\n    \"\"\"\n    # Check if arrays are of equal length\n    if len(arr1)!= len(arr2):\n        print(\"Arrays are of different lengths\")\n        return None\n\n    # Initialize two pointers, one for each array\n    left = 0\n    right = len(arr1) - 1\n\n    # Iterate through the arrays until the kth element is found\n    while left <= right:\n        # Calculate the middle index of the current subarray\n        mid = (left + right) // 2\n\n        # Compare the middle element of the two arrays\n        if arr1[mid] == arr2[mid]:\n            # If the middle element is equal to the kth element, return it\n            if k == mid + 1:\n                return arr1[mid]\n            # If the kth element is smaller than the middle element, search in the left subarray\n            elif k < mid + 1:\n                right = mid - 1\n            # If the kth element is larger than the middle element, search in the right subarray\n            else:\n                left = mid + 1\n        # If the middle element of the two arrays is greater, search in the left subarray\n        elif arr1[mid] > arr2[mid]:\n            right = mid - 1\n        # If the middle element of the two arrays is lesser, search in the right subarray\n        else:\n            left = mid + 1\n\n    # If the loop completes without finding the kth element, return None\n    print(\"Kth element not found\")\n    return None",
        "test": "assert find_kth([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 3) == 3",
        "num_ids": 1408
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def armstrong_number(number):\n    if number < 0:\n        return \"Cannot be negative\"\n    sum = 0\n    n = number\n    while n > 0:\n        digit = n % 10\n        sum += digit**3\n        n //= 10\n    if sum == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(1234) == False # not armstrong number",
        "num_ids": 714
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sum_average(n):\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    if count > 0:\n        return total/count\n    else:\n        return 0\n\nprint(sum_average(10))  # Output: 5.0\nprint(sum_average(5))   # Output: 5.0\nprint(sum_average(0))   # Output: 0.0\n",
        "test": "assert sum_average(0) == 0",
        "num_ids": 563
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 296
    },
    {
        "number": 602,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    # Loop through each character in the string and update its count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # Return the first character with a count of 1 in the dictionary\n    return next(iter(char_count.items()), None)[0]",
        "test": "assert first_repeated_char('abc') == 'a'",
        "num_ids": 824
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            j = 3\n            while j * j <= i:\n                if i % j == 0:\n                    break\n                j += 2\n        else:\n            j = 5\n            while j * j <= i:\n                if i % j == 0:\n                    break\n                j += 6\n        if j > i:\n            ludic.append(i)\n    return ludic",
        "test": "assert get_ludic(20) == [3, 5, 7, 11, 13, 17, 19, 23, 29]",
        "num_ids": 2755
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words using whitespace as the separator\n    words = s.split()\n\n    # reverse the words list\n    words.reverse()\n\n    # join the reversed words back into a string separated by spaces\n    reversed_s =''.join(words)\n\n    return reversed_s",
        "test": "assert reverse_words(\"this is a test string\") == \"gnit es si astr stri sht\"",
        "num_ids": 505
    },
    {
        "number": 605,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def prime_num(num):\n    '''\n    A function to check if a given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(3) == True, \"3 is a prime number\"",
        "num_ids": 492
    },
    {
        "number": 606,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Converts degrees to radians.\n    '''\n    return degree * math.pi / 180",
        "test": "assert radian_degree(360) == 2*math.pi",
        "num_ids": 395
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None\n\ntext = \"This is a sample string with 'literal' in it.\"\npattern = r'\\bliteral\\b'\nmatch = find_literals(text, pattern)\nif match:\n    print(f\"Match: '{match[0]}', Start index: {match[1]}, End index: {match[2]}\")\nelse:\n    print(\"No match found.\")",
        "test": "assert find_literals(\"Hello, World!\", r'\\b\\w+\\b') == (\"Hello, World!\", 0, 10)",
        "num_ids": 1074
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 100\n    else:\n        result = 0\n        for i in range(1, n + 1):\n            result += bell_Number(i - 1)\n        return result",
        "test": "assert bell_Number(2) == 10, \"The second bell number is 10\"",
        "num_ids": 1490
    },
    {
        "number": 610,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    # Check if k is positive integer\n    if not isinstance(L, int) or L < 1:\n        raise ValueError(\"k must be a positive integer\")\n\n    # Sort the list in ascending order\n    sorted_list = sorted(list1)\n\n    # Initialize a variable to store the index of the element to be removed\n    index = 0\n\n    # Traverse the sorted list and remove the k'th element\n    for i in range(len(sorted_list)):\n        if i == L-1:\n            index = i\n            break\n\n    # Initialize a variable to store the result list\n    result = []\n\n    # Traverse the sorted list and append the remaining elements to the result list\n    for i in range(len(sorted_list)):\n        if i!= index:\n            result.append(sorted_list[i])\n\n    return result",
        "test": "assert remove_kth_element([1,2,3,4,5], 2) == [1, 3, 4, 5]",
        "num_ids": 1156
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = test_list[0][N-1] # initial value of max_value\n    for row in test_list:\n        max_value = max(max_value, row[N-1]) # update max_value if row[N-1] is greater than current max_value\n    return max_value",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 9",
        "num_ids": 897
    },
    {
        "number": 612,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        if len(sublist) == 2:\n            result.append([sublist[0], sublist[1]])\n    return result",
        "test": "assert merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]",
        "num_ids": 690
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # convert list to tuple\n    test_tuple = tuple(test_list)\n    # create a list to store the cumulative sum\n    cumulative_sum = []\n    # add each value to the cumulative sum\n    for value in test_tuple:\n        cumulative_sum.append(cumulative_sum[-1] + value)\n    return cumulative_sum",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 687
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg_list.append(sum(tup)/len(tup))\n    return avg_list",
        "test": "assert average_tuple([]) == []",
        "num_ids": 781
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result",
        "test": "assert tuple_modulo((1, 2, 3, 4, 5), (0, 1, 2, 3, 4)) == (4, 5, 6, 7, 8)",
        "num_ids": 780
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize the count of jumps to 0\n    count = 0\n\n    # Loop through each possible step size d\n    for step in range(1, steps+1):\n\n        # If the length of the route is less than or equal to d\n        if step <= d:\n\n            # Increment the count of jumps by 1\n            count += 1\n\n    # Return the final count of jumps\n    return count",
        "test": "assert min_Jumps(4, 2) == 2, \"min_Jumps(4, 2) should return 2\"",
        "num_ids": 1387
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Create a new list to store the result\n    result = []\n\n    # Iterate through the elements of nums1\n    for num1 in nums1:\n        # Iterate through the elements of nums2 and check if the element is present in nums1\n        for num2 in nums2:\n            if num1 == num2:\n                # If the element is present in nums1, add it to the result list\n                result.append(num1)\n                break\n\n    # Return the result list\n    return result",
        "test": "assert div_list([1,2,3,4,5],[1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "num_ids": 666
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # initializing an empty string\n    new_str = \"\"\n\n    # looping through the given string\n    for char in test_str:\n\n        # checking if the character is a digit or not\n        if char.isdigit():\n\n            # appending the digit to the new string\n            new_str += char\n\n        # checking if the character is not a digit or not\n        else:\n\n            # appending the character to the new string\n            new_str += char\n\n    # returning the new string\n    return new_str",
        "test": "assert move_num(\"12345\") == \"12345\"",
        "num_ids": 809
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize an empty set to store the subsets\n    subsets = set()\n    \n    # Iterate through each element in the list\n    for num in a:\n        # Create a new subset by combining the current subset with the current element\n        new_subset = set(subsets) | {num}\n        \n        # Add the new subset to the set of subsets\n        subsets.add(new_subset)\n    \n    # Find the size of the largest subset\n    max_size = 0\n    for subset in subsets:\n        if len(subset) > max_size:\n            max_size = len(subset)\n    \n    return max_size",
        "test": "assert largest_subset([1, 2, 3, 4, 5, 6]) == 2",
        "num_ids": 1157
    },
    {
        "number": 622,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # find the middle index of the two lists\n    mid = n // 2\n    \n    # sort both lists in ascending order\n    arr1.sort()\n    arr2.sort()\n    \n    # find the median based on whether the two lists are in ascending or descending order\n    if (len(arr1) > len(arr2)):\n        # if arr1 is longer than arr2, return the median of arr1 and arr2, which is the middle index\n        return arr1[mid]\n    else:\n        # if arr2 is longer than arr1, return the median of arr2 and arr1, which is the middle index\n        return arr2[mid]\n",
        "test": "assert get_median([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 3) == 5",
        "num_ids": 1106
    },
    {
        "number": 623,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n\n    # initialize an empty list to store the results\n    results = []\n\n    # iterate over each number in the list and compute its n-th power\n    for num in nums:\n        result = num ** n\n        results.append(result)\n\n    return results",
        "test": "assert nth_nums([1, 2, 3, 4, 5], 2) == [1, 4, 9, 16, 25]",
        "num_ids": 614
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper('Hello') == 'HELLO'",
        "num_ids": 317
    },
    {
        "number": 625,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def swap_List(newList):\n    # swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # return the new list\n    return newList",
        "test": "assert swap_List([1]) == [1]",
        "num_ids": 650
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the semi-perimeter and the semi-radius of the semicircle\n    s = (2 * r) / 3\n    sr = r / 2\n    \n    # Find the area of the largest triangle that can be inscribed in the semicircle with radius r\n    if s*s <= sr*sr:\n        return 0 # base case: the semicircle is a right triangle\n    else:\n        # Find the area of the triangle with semi-perimeter s and semi-radius sr\n        area = (s*s - sr*sr) / 2\n        return area",
        "test": "assert triangle_area(10) == 31.41592653589793",
        "num_ids": 1008
    },
    {
        "number": 627,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return None\n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1\n    return None",
        "test": "assert find_First_Missing([1,2,0]) == 3",
        "num_ids": 885
    },
    {
        "number": 628,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces('Hello World') == 'Hello%20World'",
        "num_ids": 359
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def Split(lst):\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]",
        "num_ids": 529
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def adjac(ele, sub=[]):\n    if sub == []:\n        sub = [(ele[0], ele[1]), (ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1),\n               (ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n    return sub",
        "test": "assert adjac((0,0), [(0,1),(0,2),(1,1),(1,2),(2,1),(2,2)]) == [(0,1),(0,2),(1,1),(1,2),(2,1),(2,2)]",
        "num_ids": 994
    },
    {
        "number": 631,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # convert the string to a list of characters\n    text = list(text)\n\n    # iterate through each character in the list\n    for i in range(len(text)):\n        # if the character is a space, replace it with an underscore\n        if text[i] =='':\n            text[i] = '_'\n        # if the character is not a space, keep it as is\n        else:\n            text[i] = text[i]\n\n    # convert the list of characters back to a string and return it\n    return ''.join(text)",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 590
    },
    {
        "number": 632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list",
        "test": "assert move_zero([1, 0, 0, 0, 2, 0]) == [1, 2, 0, 0, 0, 0]",
        "num_ids": 751
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum",
        "test": "assert pair_xor_Sum([1, 2, 3, 4, 5], 5) == 12 # check the sum of xor of all pairs of numbers in the given list",
        "num_ids": 534
    },
    {
        "number": 635,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Sort the list using the heapq library\n    hq.heapify(iterable)\n    # Build a new list with the sorted items\n    sorted_list = []\n    while len(iterable) > 0:\n        # Extract the root node and append it to the sorted list\n        sorted_list.append(iterable[0])\n        # Remove the root node from the list\n        hq.heappop(iterable)\n    return sorted_list",
        "test": "assert heap_sort([5, 1, 3, 7, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 814
    },
    {
        "number": 637,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(3000, 1000) == False # Test case 1",
        "num_ids": 636
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(v * (9/5) + (t - 32) * 5/9)",
        "test": "assert wind_chill(30, 25) == 17 # The wind speed is 30 km/h and the temperature is 25 celsius. So, the wind chill index should be 17.",
        "num_ids": 842
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names after removing the ones that start with a lowercase letter\n    result = []\n    # loop through each name in the given list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, add the rest of the name to the result list\n            result.append(name[1:])\n        else:\n            # if it doesn't start with a lowercase letter, just add it to the result list\n            result.append(name)\n    # return the sum of the length of each name in the result list\n    return sum(len(name) for name in result)",
        "test": "assert sample_nam([\"a\", \"b\", \"c\"]) == 0 # empty list input",
        "num_ids": 842
    },
    {
        "number": 640,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    # find the opening parenthesis\n    open_index = items.find('(')\n    if open_index == -1:\n        # no parentheses found\n        return items\n    else:\n        # find the closing parenthesis\n        close_index = items.find(')', open_index+1)\n        if close_index == -1:\n            # no closing parenthesis found\n            return items\n        else:\n            # return the substring between the opening and closing parentheses\n            return items[open_index+1:close_index]",
        "test": "assert remove_parenthesis(\"()\") == \"\"",
        "num_ids": 620
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_nonagonal(n):\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 1\n    else:\n        return n + (n-1)*(n-2)//2",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 598
    },
    {
        "number": 643,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the middle of a word using regular expressions.\n    '''\n    # Define the regular expression pattern for the middle of a word\n    pattern = r'\\b[a-zA-Z]+\\b'\n    \n    # Use the re.search() method to search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # Return True if the pattern is found in the text, False otherwise\n    return bool(match)",
        "test": "assert text_match_wordz_middle('The quick brown fox jumps over the lazy dog') == True",
        "num_ids": 766
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def reverse_Array_Upto_K(input, k):\n    i = 0\n    j = len(input) - 1\n    \n    while i < j:\n        input[i], input[j] = input[j], input[i]\n        i += 1\n        j -= 1\n    \n    return input[:k]",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 6) == [5, 4, 3, 2, 1]",
        "num_ids": 960
    },
    {
        "number": 720,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup[0], *test_tup[1:], test_dict)\n    return test_tup\n",
        "test": "assert add_dict_to_tuple((1,2,3), {'a': 1, 'b': 2, 'c': 3}) == (1, 2, 3, {'a': 1, 'b': 2, 'c': 3})",
        "num_ids": 715
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # initialize variables to store max average and number of cells visited in path\n    max_avg = 0\n    num_cells = 0\n    \n    # loop through all cells in the matrix\n    for i in range(N):\n        for j in range(N):\n            # if cell is visited, ignore it\n            if cost[i][j]!= 0:\n                # compute average of path\n                avg = sum(cost[i:j+1]) / j\n                # update max average and number of cells visited in path\n                if avg > max_avg:\n                    max_avg = avg\n                    num_cells = j\n                if j == N-1:\n                    num_cells = j\n    \n    # return max average of path\n    return max_avg, num_cells",
        "test": "assert maxAverageOfPath([[1, 3, 5], [2, 4, 6], [7, 8, 9]]) == 10",
        "num_ids": 2173
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def filter_data(students, h, w):\n    result = []\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result.append(name)\n    return result",
        "test": "assert filter_data({'Alice':(160,70), 'Bob':(150,75), 'Charlie':(155,70), 'David':(160,75)}, 160, 90) == {'Alice':(160,70), 'Charlie':(155,70), 'David':(160,75)}",
        "num_ids": 1224
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [2, 2, 3, 3, 4]) == 2, \"count_same_pair([1, 2, 3, 4, 5], [2, 2, 3, 3, 4])\"",
        "num_ids": 798
    },
    {
        "number": 724,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculates the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        base //= 10\n        power -= 1\n    return result",
        "test": "assert power_base_sum(2, 1) == 2, \"The correct sum of all digits of base 2 to the power 1 is 2.\"",
        "num_ids": 816
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n\ntext1 = \"Hello, world! This is a test. It's not a quotation mark.\"\nquotations = extract_quotation(text1)\nfor quote in quotations:\n    print(quote)",
        "test": "assert extract_quotation(\"This is a test string. It contains a single quote. \") == \"This is a test string. It contains a single quote.\"",
        "num_ids": 1000
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def multiply_elements(t_1, t_2, t_3,..., t_N):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([t_i * t_i + t_i * t_i + t_i * t_i for t_i in t_1])",
        "test": "assert multiply_elements((1, 2, 3, 4, 5)) == (1*2 + 2*3 + 3*4 + 4*5, 1*3 + 2*3 + 3*4 + 4*5, 1*3 + 2*3 + 3*4 + 4*5)",
        "num_ids": 938
    },
    {
        "number": 728,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initialize a new list to store the sum of the two lists\n    result = []\n    # Iterate through both lists and add them together and append to the result list\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    # Return the result list\n    return result",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 671
    },
    {
        "number": 730,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    return list(set(nums))",
        "test": "assert consecutive_duplicates([1, 2, 3, 4, 4, 5, 6, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 812
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h\n",
        "test": "assert lateralsurface_cone(1,1) == 3.141592653589793, \"The lateral surface area of a cone with radius 1 and height 1 is incorrect. Please check the code.\"",
        "num_ids": 639
    },
    {
        "number": 732,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)\n\ntext = \"Hello, world! This is a test.\"\nprint(replace_specialchar(text))",
        "test": "assert replace_specialchar('') == ''",
        "num_ids": 514
    },
    {
        "number": 733,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(1, len(A)):\n        if A[i] == x:\n            return i\n    return -1  # x not found in A",
        "test": "assert find_first_occurrence([1,2,3,3,4,4,4,5], 6) == -1",
        "num_ids": 869
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    dp[0][0] = arr[0]\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if arr[j-1] == arr[i-1]:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    return dp[n][n]\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3,4]) == 120",
        "num_ids": 960
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the number of bits\n    num_bits = len(bin(n)[2:])\n    \n    # Toggle the bits\n    for i in range(1, num_bits-1):\n        n = n ^ (1 << (num_bits-i-1))\n    \n    # Return the modified number\n    return n",
        "test": "assert set_middle_bits(0) == 0, \"set_middle_bits(0) should return 0\"",
        "num_ids": 2075
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the correct insertion point\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            # If the element at the mid index is equal to the target value, return the mid index\n            return mid\n        elif a[mid] < x:\n            # If the element at the mid index is less than the target value, move the left boundary to mid - 1\n            left = mid + 1\n        else:\n            # If the element at the mid index is greater than the target value, move the right boundary to mid + 1\n            right = mid - 1\n    # If the target value is not found in the list, return the last index\n    return len(a) - 1",
        "test": "assert left_insertion(sorted([1, 2, 3, 4, 5]), 2) == 1",
        "num_ids": 876
    },
    {
        "number": 737,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    return match.group(0) == string\n",
        "test": "assert check_str(\"apple\") == True",
        "num_ids": 573
    },
    {
        "number": 738,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    \n    return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 490
    },
    {
        "number": 739,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    index = 1\n    while n > index:\n        n -= 1\n        index += 1\n\n    return index",
        "test": "assert find_Index(3) == 2",
        "num_ids": 791
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(len(test_tup) - 1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 864
    },
    {
        "number": 741,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == len(s):\n        return True\n    else:\n        return False",
        "test": "assert all_Characters_Same(\"abcde\") == True",
        "num_ids": 642
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    area = 0.5 * side * side * side\n    return area",
        "test": "assert area_tetrahedron(2) == 4",
        "num_ids": 428
    },
    {
        "number": 743,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def rotate_right(list, m):\n    # create a new list of n elements, by rotating the first n elements to the left\n    new_list = list[m:] + list[:m]\n    return new_list",
        "test": "assert rotate_right([1], 1) == [1]",
        "num_ids": 801
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, None)) == True",
        "num_ids": 442
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    digits = []\n\n    # Find the digits of the numbers in the range\n    for num in range(startnum, endnum+1):\n        digits.append(str(num)[0])\n\n    # Create a lambda function that checks if a number is divisible by every digit it contains\n    divisible_by_digit = lambda num: any(digit in str(num) for digit in digits)\n\n    # Find the numbers in the range that are divisible by every digit in the digits list\n    divisible_numbers = [num for num in range(startnum, endnum+1) if divisible_by_digit(num)]\n\n    # Return the list of divisible numbers\n    return divisible_numbers\n",
        "test": "assert divisible_by_digits(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 2399
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2",
        "test": "assert sector_area(4, 45) is not None # Angle is within 0-360 range",
        "num_ids": 729
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n    Parameters:\n    X, Y, Z (str): Three string sequences\n\n    Returns:\n    The longest common subsequence as a string\n\n    \"\"\"\n    m, n = len(X), len(Y)\n    if n == 0:\n        return X\n    elif m == 0:\n        return Y\n    elif X[0] == Y[0]:\n        return X[0] + lcs_of_three(X[1:], Y[1:], Z)\n    else:\n        return lcs_of_three(X[1:], Y, Z)",
        "test": "assert lcs_of_three(\"hello\", \"world\", \"programming\") == \"world\"",
        "num_ids": 1603
    },
    {
        "number": 748,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b\\w+\\b') # match one or more word characters, followed by a word boundary\n    return pattern.sub(lambda m:''*(len(m.group()) - 1) + m.group(), str1) # replace all matches with a space before and after each word",
        "test": "assert capital_words_spaces(\"hello world\") == \"hello world\"",
        "num_ids": 769
    },
    {
        "number": 749,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings in the list to numeric values\n    nums = [int(x.strip()) for x in nums_str]\n    # Sort the list numerically using the built-in sort() function\n    nums.sort()\n    # Convert the sorted list back to a string\n    sorted_str = [str(x) for x in nums]\n    return sorted_str",
        "test": "assert sort_numeric_strings(['3', '1', '4', '2', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 899
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup",
        "test": "assert add_tuple([1, 2, 3], []) == [1, 2, 3]",
        "num_ids": 625
    },
    {
        "number": 751,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Base case: if the array is empty or only one element, then it is a min heap\n    if i == len(arr):\n        return True\n\n    # Check if the left child of the current node is also a min heap\n    left_child_index = 2 * i + 1\n    if left_child_index < len(arr) and arr[left_child_index] < arr[i]:\n        # Recursively call check_min_heap_helper on the left child\n        return check_min_heap_helper(arr, left_child_index)\n\n    # Check if the current node is a min heap\n    return True\n",
        "test": "assert check_min_heap_helper([5, 3, 1, 8, 9], 0) == True",
        "num_ids": 1263
    },
    {
        "number": 752,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n\n    \"\"\"\n    # Create a list of the nth jacobsthal numbers\n    jacobsthal_list = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731]\n\n    # Return the nth jacobsthal number\n    return jacobsthal_list[n]",
        "test": "assert jacobsthal_num(0) == 0, \"The first jacobsthal number is not 0.\"",
        "num_ids": 2013
    },
    {
        "number": 753,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    # Initialize an empty list to store the minimum k records\n    min_records = []\n    \n    # Loop through the test list and append the minimum k records to the list\n    for test in test_list:\n        min_records.append(test)\n        \n        # Check if the length of the list is equal to K\n        if len(min_records) == K:\n            break\n            \n    # Return the minimum k records\n    return min_records",
        "test": "assert min_k([], 0) == []",
        "num_ids": 961
    },
    {
        "number": 754,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_elements.append(l1[i])\n\n    return common_elements",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 1027
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def second_smallest(numbers):\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # If the list has a single number, return that number\n    if len(numbers) == 1:\n        return numbers[0]\n\n    # Otherwise, return the second number in the list\n    else:\n        return numbers[1]",
        "test": "assert second_smallest([5, 2, 8, 3, 1]) == 2",
        "num_ids": 652
    },
    {
        "number": 756,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    # Use regular expression to match 'a followed by one or more 'b's\n    pattern = re.compile(r'a followed by one or more b')\n    # Find all matches of the pattern in the text\n    matches = pattern.findall(text)\n    # Return the number of matches\n    return len(matches)\n",
        "test": "assert text_match_zero_one(\"aba\") == 0",
        "num_ids": 683
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list) // 2):\n        if test_list[i] == test_list[-i - 1]:\n            count += 1\n    return count\n\ntest_list = ['hello', 'world', 'python', 'programming', 'in','reverse']\nprint(count_reverse_pairs(test_list))  # Output: 4",
        "test": "assert count_reverse_pairs([\"a\", \"b\", \"c\", \"d\", \"e\"]) == 0, \"Counting reverse pairs for ['a', 'b', 'c', 'd', 'e'] should return 0\"",
        "num_ids": 1149
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each list\n    sublist_count = {}\n\n    # Iterate over all the elements of the list\n    for element in list1:\n        # Check if the element is already in the dictionary\n        if element in sublist_count:\n            # If it is, add 1 to the count of the list\n            sublist_count[element] += 1\n        else:\n            # If it isn't, add the list to the dictionary with 1 as its count\n            sublist_count[element] = 1\n\n    # Return the dictionary containing the count of each list\n    return sublist_count",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1078
    },
    {
        "number": 759,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    try:\n        float(num)\n        if len(str(num)) > 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "test": "assert is_decimal('1.23') is True",
        "num_ids": 1731
    },
    {
        "number": 760,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Check if the list is empty\n    if not arr:\n        return True\n    \n    # Check if the list contains only one element\n    if len(arr) == 1:\n        return True\n    \n    # Create a set to store unique elements\n    unique_set = set()\n    \n    # Loop through the list and check if each element is unique in the set\n    for num in arr:\n        if num in unique_set:\n            return False\n        unique_set.add(num)\n    \n    # If all elements are unique, the list contains only one distinct element\n    return True",
        "test": "assert unique_Element([1, 2, 2, 3, 3, 4, 4, 5]) == False",
        "num_ids": 706
    },
    {
        "number": 762,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 4 == 0 and (monthnum3 % 100!= 0 or monthnum3 % 400 == 0):\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(12) == True, \"Month number 12 should contain 30 days.\"",
        "num_ids": 791
    },
    {
        "number": 763,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_min_diff(arr, n):\n    # Create a dictionary to store the difference of adjacent elements\n    diff_dict = {}\n\n    # Iterate through the array\n    for i in range(n):\n        # Calculate the minimum difference between any two elements in the array\n        min_diff = float('inf')\n\n        # Iterate through the remaining array elements\n        for j in range(i + 1, n):\n            # Calculate the difference between current elements\n            diff = abs(arr[i] - arr[j])\n\n            # Update the minimum difference if the difference is smaller than the current minimum\n            if diff < min_diff:\n                min_diff = diff\n\n        # Add the minimum difference to the dictionary\n        diff_dict[i] = min_diff\n\n    # Find the minimum difference between any two elements in the remaining array\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n\n    # Return the minimum difference\n    return min_diff\n",
        "test": "assert find_min_diff([3,4,2,5,1],3)==1, \"The minimum difference between any two elements in the given array is not 1.\"",
        "num_ids": 930
    },
    {
        "number": 764,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"1234567890\") == 10",
        "num_ids": 528
    },
    {
        "number": 765,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\n\ndef is_polite(n):\n    if n == 1:\n        return 1\n\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n\n    return n",
        "test": "assert is_polite(1) == True",
        "num_ids": 592
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n\n    # Initialize the list of pairs\n    pairs = []\n\n    # Loop through each item in the list\n    for i in range(len(l1) - 1):\n\n        # Find the index of the next item in the list\n        j = i + 1\n\n        # If the next item is also the next item plus one, add it to the list of pairs\n        if j < len(l1) and l1[j] == l1[i] + 1:\n            pairs.append((l1[i], l1[j]))\n\n        # If the next item is not the next item plus one, add the pair of the current item and the next item to the list of pairs\n        else:\n            pairs.append((l1[i], l1[j-1]))\n\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 889
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 7) == 2, \"The output should be 2, but it is {}\".format(get_pairs_count([1, 2, 3, 4, 5], 7))",
        "num_ids": 834
    },
    {
        "number": 769,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff.append(li1[i])\n    return diff",
        "test": "assert Diff([],[])==[]",
        "num_ids": 607
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i**4\n    return total_sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of the fourth power of first n odd natural numbers is:\", odd_num_sum(n))",
        "test": "assert odd_num_sum(20) == 30000",
        "num_ids": 635
    },
    {
        "number": 771,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Create a stack to store the opening parentheses\n    stack = deque()\n\n    # Iterate through each character in the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, check if the stack is empty or if the top element is not equal to the opening parenthesis\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack.pop()!= '(':\n                return False\n\n    # If the stack is empty, the expression is balanced\n    return not stack",
        "test": "assert check_expression(\"2 + 2 * 3\") == True, \"Expression should be balanced.\"",
        "num_ids": 732
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the words with length K or less\n    filtered_words = []\n    \n    # Iterate through the words and check if they have the right length\n    for word in words:\n        if len(word) >= K:\n            filtered_words.append(word)\n    \n    # Join the filtered words back into a string\n    filtered_str =''.join(filtered_words)\n    \n    # Return the filtered string\n    return filtered_str",
        "test": "assert remove_length(\"hello world\", 5) == \"helloworld\"",
        "num_ids": 658
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Function to find the occurrence and position of substrings within a string. Returns None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if not result:\n        return None\n    else:\n        return result",
        "test": "assert occurance_substring('abcdefg', 'ab') == (1, 2)",
        "num_ids": 765
    },
    {
        "number": 775,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                return False\n    return True",
        "test": "assert odd_position([1,2,3,4,5,6,7,8,9,10]) # true",
        "num_ids": 727
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            if test_str[i:j].lower() in vowels:\n                count += 1\n    return count",
        "test": "assert count_vowels(\"apple\") == 2",
        "num_ids": 720
    },
    {
        "number": 777,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty set to store the elements that have been seen\n    seen = set()\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each element in the list\n    for elem in arr:\n        # If the element is not in the set, add it to the set and add it to the sum\n        if elem not in seen:\n            seen.add(elem)\n            sum += elem\n    # Return the sum\n    return sum",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 982
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist = []\n    for element in list1:\n        if element not in sublist:\n            sublist.append(element)\n    return sublist",
        "test": "assert pack_consecutive_duplicates([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]",
        "num_ids": 905
    },
    {
        "number": 779,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count\n",
        "test": "assert unique_sublists([1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 1224
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from itertools import combinations\nimport math\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n\n    # Initialize an empty set to store combinations\n    combinations_set = set()\n\n    # Iterate over each element of the tuple list\n    for i in range(len(test_list)):\n        # Initialize a list to store tuples with the current sum\n        tuples_list = []\n\n        # Iterate over each tuple in the list\n        for j in range(i, len(test_list)):\n            # Add the tuple with the current sum to the list\n            tuples_list.append((test_list[i], test_list[j]))\n\n        # Iterate over each tuple in the list\n        for j in range(i, len(test_list)):\n            # Check if the current tuple has a sum greater than the current sum of the previous tuple\n            if test_list[j][0] <= test_list[j-1][1]:\n                # If so, add the current tuple to the set of combinations\n                combinations_set.add(tuples_list)\n\n    return combinations_set",
        "test": "assert find_combinations([1,2,3,4,5]) == [([1,2,3], [4,5]), ([1,2,4], [5]), ([1,2,5], [3]), ([1,3,4], [5]), ([1,3,5], [2])]",
        "num_ids": 1754
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns the count of divisors of n.\n    '''\n    count = 1\n    # Using a loop to calculate the number of divisors\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert count_divisors(7) == 2, \"The function should return 2 for the given value 7\"",
        "num_ids": 814
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def odd_length_sum(arr):\n    # initialize the sum to 0\n    odd_sum = 0\n\n    # iterate through the array and add the sum of odd length subarrays to the current sum\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if j - i + 1 % 2 == 1:\n                # if the length of the subarray is odd, add it to the sum\n                odd_sum += arr[j]\n\n    return odd_sum",
        "test": "assert odd_length_sum([1, 2, 3, 4]) == 0 # correct",
        "num_ids": 813
    },
    {
        "number": 783,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n    Arguments:\n    r -- red component (0-255)\n    g -- green component (0-255)\n    b -- blue component (0-255)\n\n    Returns:\n    H -- hue (0-360)\n    S -- saturation (0-1)\n    V -- value (0-1)\n\n    '''\n\n    # Calculate the max and min values of the color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # If the color has only one value, return it as-is\n    if max_val == min_val:\n        return (0, 0, max_val)\n\n    # Calculate the difference between max and min values\n    delta = max_val - min_val\n\n    # Calculate the saturation and value components\n    if max_val == r:\n        s = delta / (g - b)\n    elif max_val == g:\n        s = delta / (b - r)\n    else:\n        s = delta / (r - g)\n\n    # If the color has zero value, return the same color as before\n    if delta == 0:\n        return (0, 0, max_val)\n\n    # Calculate the hue component\n    if r == max_val:\n        h = (g - b) / delta\n    elif g == max_val:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    # Scale the hue to the range of 0-360\n    if h < 0:\n        h += 1\n    h *= 60\n\n    # Return the hue, saturation, and value components\n    return (h, s, max_val)",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0), \"rgb_to_hsv(0, 0, 0) should return (0, 0, 0)\"",
        "num_ids": 2261
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n    for num in list1:\n        if num % 2!= 0:\n            product *= num\n    return product",
        "test": "assert mul_even_odd([]) == 1",
        "num_ids": 721
    },
    {
        "number": 785,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma and space\n    split_str = test_str.split(',')\n\n    # Convert each string in the list to an integer\n    result = []\n    for s in split_str:\n        result.append(int(s))\n\n    # Return the integer tuple\n    return tuple(result)",
        "test": "assert tuple_str_int(\"123\") == (123,)",
        "num_ids": 577
    },
    {
        "number": 786,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)",
        "test": "assert right_insertion([1, 3, 4, 5], 6) == 4  # no insertion point",
        "num_ids": 637
    },
    {
        "number": 787,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b' characters.\n    It returns True if a match is found, False otherwise.\n    '''\n    pattern = re.compile(r'a(?=b{3})')\n    matches = pattern.findall(text)\n    return bool(matches)",
        "test": "assert text_match_three(\"abccbbbc\") == False",
        "num_ids": 1495
    },
    {
        "number": 788,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)",
        "test": "assert new_tuple([1, 2, 3, 4, 5], 'hello') == (1, 2, 3, 4, 5, 'hello')",
        "num_ids": 482
    },
    {
        "number": 790,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True",
        "test": "assert even_position([1, 2, 3, 4, 5]) == False",
        "num_ids": 812
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_list = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            nested_list.append(i)\n        else:\n            nested_list.append(i)\n    return tuple(nested_list)",
        "test": "assert remove_nested(tuple()) == ()",
        "num_ids": 1661
    },
    {
        "number": 792,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_list(input_list):\n    '''\n    Counts the number of lists in a given number of lists.\n    '''\n    return len(input_list)",
        "test": "assert count_list([[1,2,3],[4,5,6]]) == 2",
        "num_ids": 541
    },
    {
        "number": 793,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1  # Element not found in array",
        "test": "assert last([1, 3, 5, 7, 9], 7) == 3",
        "num_ids": 547
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None",
        "test": "assert text_starta_endb('abcb') == 'a'",
        "num_ids": 584
    },
    {
        "number": 796,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    Function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for item in dictionary:\n        sum += dictionary[item]\n    return sum",
        "test": "assert return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6",
        "num_ids": 506
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n, 0, -2):\n        if i % 2!= 0:\n            s += i\n    return s",
        "test": "assert sum_odd(0) == 0",
        "num_ids": 514
    },
    {
        "number": 798,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 416
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of times to rotate\n    rotation_count = (d % 32)\n    # Calculate the left shifted value\n    left_shift = (n << rotation_count)\n    # Return the left shifted value\n    return left_shift",
        "test": "assert left_rotate(16,1) == 32",
        "num_ids": 681
    },
    {
        "number": 800,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n\ntext = \"Hello, World!\"\nprint(remove_all_spaces(text))",
        "test": "assert remove_all_spaces(\"   hello world  \") == \"helloworld\"",
        "num_ids": 441
    },
    {
        "number": 801,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    # Check if all three integers are positive\n    if x >= 0 and y >= 0 and z >= 0:\n        # Check if at least one of the integers is equal to itself\n        if x == y and x == z:\n            return 1\n        elif y == z and y == x:\n            return 1\n        else:\n            return 0\n    else:\n        return \"The integers are not positive.\"",
        "test": "assert test_three_equal(1,1,1) == 1",
        "num_ids": 605
    },
    {
        "number": 802,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_rotation(arr):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Calculate the number of rotations required to generate a sorted array\n    rotations = 0\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] > arr[i + 1]:\n            rotations += 1\n        i += 1\n\n    return rotations",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0 # Test case 1",
        "num_ids": 1068
    },
    {
        "number": 803,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_perfect_square(n):\n    if n == int(n**0.5) * int(n**0.5):\n        return True\n    else:\n        return False",
        "test": "assert is_perfect_square(4) == True",
        "num_ids": 656
    },
    {
        "number": 804,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_product_even(arr):\n    # Initialize the result variable with 1\n    result = 1\n\n    # Iterate through the array and multiply each element with the result variable\n    for num in arr:\n        result *= num\n\n    # Check if the result is even or not\n    if result % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2, 4, 6]) == True # check if the product of 2, 4, and 6 is even",
        "num_ids": 662
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = None\n    for list in lists:\n        current_sum = sum(list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n    return max_list",
        "test": "assert max_sum_list([[1]]) == [1]",
        "num_ids": 1088
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i] == test_str[i].upper():\n            max_run += 1\n    return max_run\n\ntest_str = \"hello world\"\nprint(max_run_uppercase(test_str))  # Output: 3",
        "test": "assert max_run_uppercase(\"Hello, World!\") == 5, \"The function should return 5 for the given input string.\"",
        "num_ids": 952
    },
    {
        "number": 807,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # If no odd number is found, return None",
        "test": "assert first_odd([1]) == 1",
        "num_ids": 441
    },
    {
        "number": 808,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)-K+1):\n        if test_tup[i:i+K] == K:\n            return True\n    return False",
        "test": "assert check_K((), 0) == False",
        "num_ids": 471
    },
    {
        "number": 809,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for item in test_tup2:\n        if item in test_tup1:\n            return False\n        else:\n            continue\n    return True\n",
        "test": "assert check_smaller((1, 2, 3, 4, 5), (4, 5, 1, 2, 3)) == False",
        "num_ids": 718
    }
]