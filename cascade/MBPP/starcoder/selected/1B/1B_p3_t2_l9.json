[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Find the shared elements between the two given lists.\n    \n    Arguments:\n    test_tup1 -- a tuple of lists to be compared\n    test_tup2 -- another tuple of lists to be compared\n    \n    Returns:\n    a set of the shared elements between the two lists\n    '''\n    \n    # create sets from the lists to be compared\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # find the common elements between the two sets\n    common = set1.intersection(set2)\n    \n    # return the set of common elements\n    return common",
        "test": "assert similar_elements([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]",
        "num_ids": 480
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if (n % i) == 0:\n            return False\n    return True",
        "test": "assert is_not_prime(2) == True, \"The input 2 is not a prime number.\"",
        "num_ids": 309
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n    return [num for _ in range(n) if hq.heappop(heap) > 0]",
        "test": "assert heap_queue_largest([], 0) == []",
        "num_ids": 404
    },
    {
        "number": 6,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two(x):\n    # convert x to binary string\n    bin_x = bin(x)[2:]\n    # loop through each bit of binary string\n    for bit in bin_x:\n        # if there is only one bit left, it is a power of two\n        if len(bit) == 1:\n            return True\n    # if all bits are zero, x is a power of two\n    return False",
        "test": "assert is_Power_Of_Two(8) == True",
        "num_ids": 292
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = re.findall(r'\\b\\w{4,}\\b', text)\n    return word_list",
        "test": "assert find_char_long(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 445
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 299
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Rotations(str):\n    # Initialize variables\n    min_rotations = float('inf')\n    min_rotation_count = 0\n    # Iterate through all possible rotations of the string\n    for i in range(len(str)):\n        # Create a new string with the current rotation\n        new_str = str[:i] + str[i+1:]\n        # Check if the new string is equal to the original string\n        if new_str == str:\n            # Update the minimum rotation count and minimum rotation if necessary\n            min_rotation_count = max(min_rotation_count, i)\n            min_rotations = min(min_rotations, i+1)\n    return min_rotation_count",
        "test": "assert find_Rotations(\"\") == 0, \"find_Rotations should return 0 for an empty string\"",
        "num_ids": 625
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '', 1)  # remove first occurrence\n    s = s.replace(ch, '', -1)  # remove last occurrence\n    return s",
        "test": "assert remove_Occ(\"Hello, world!\", \"W\") == \"o, wrld\"",
        "num_ids": 379
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    rows = len(M)\n    cols = len(M[0])\n    \n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # sort the rows based on their sum\n    sorted_rows = sorted(range(rows), key=lambda i: row_sums[i])\n    \n    # transpose the rows to get the columns\n    transposed_rows = [[M[i][j] for j in range(cols)] for i in sorted_rows]\n    \n    return transposed_rows",
        "test": "assert sort_matrix([[1,2,3], [4,5,6], [7,8,9]]) == [[1,2,3], [4,5,6], [7,8,9]]",
        "num_ids": 660
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_Volume(l, b, h):\n    volume = l * b * h\n    return volume",
        "test": "assert find_Volume(1,2,3) == 6",
        "num_ids": 236
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?i)(?=[a-z])(?=[A-Z])(?=[0-9])')\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"\") == False",
        "num_ids": 399
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4",
        "test": "assert square_perimeter(7) == 49",
        "num_ids": 187
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def str_to_list(string, char_list): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for char in string:\n        if char not in char_list:\n            result.append(char)\n    return ''.join(result)\n\nstring1 = \"hello world\"\nchar_list = \"aeiou\"\nstring2 = \"aeiou\"\nresult = str_to_list(string1, char_list)\nprint(result)  # Output: \"hll wrld\"",
        "test": "assert str_to_list(\"python is awesome\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"g\", \" \", \"i\", \"s\", \" \", \"a\", \"w\", \"e\", \"s\", \"e\", \"a\", \"m\", \"e\"]",
        "num_ids": 631
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n\n    # initialize a set to store the duplicate numbers\n    duplicates = set()\n\n    # iterate through the given array of integers\n    for num in arraynums:\n        # add each element to the set\n        duplicates.add(num)\n\n    # check if the set has duplicates\n    if len(duplicates) > 1:\n        return True\n    else:\n        return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5, 5, 5]) # This will assert that the function returns False for an array with duplicate elements.",
        "num_ids": 522
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_woodall(x): \n    '''\n    This function checks if the given number is a woodball number or not. \n    It takes an integer argument 'x' and returns a boolean value indicating whether it is a woodball number or not. \n    '''\n    # Define a list of woodball numbers \n    woodball_numbers = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]\n    \n    # Check if the number is in the list of woodball numbers\n    if x in woodball_numbers:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(123) == False",
        "num_ids": 480
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 1:\n        return False\n    while num > 0:\n        num = num // 10\n    num = num * 2\n    if num == 0:\n        return True\n    else:\n        return False",
        "test": "assert rev(2) == True",
        "num_ids": 346
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Max_Num(arr) : \n    max_num = arr[0]\n    for num in arr : \n        if num > max_num : \n            max_num = num\n    return max_num",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5]) == 5",
        "num_ids": 437
    },
    {
        "number": 58,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def opposite_Signs(x, y):\n    # If the numbers are negative, they have opposite signs.\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    # If the numbers are positive or zero, they do not have opposite signs.\n    elif x == 0 or y == 0:\n        return False",
        "test": "assert opposite_Signs(10, 20) == True # positive",
        "num_ids": 341
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_octagonal(n): \n    '''\n    This function takes an integer n as input and returns True if it is an octagonal number, False otherwise. \n    '''\n    if n <= 0: \n        return False\n    elif n == 1: \n        return True\n    elif n % 2 == 1: \n        return False\n    else:\n        for i in range(2, int(n**0.5)+1): \n            if n % i == 0: \n                return False\n        else:\n            return True",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 478
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize an empty dictionary to store count of each substring\n    count = defaultdict(int)\n    \n    # Iterate through each substring of the input string\n    for i in range(len(s)):\n        # Add the length of the substring to the count dictionary\n        count[s[i:i+2]] += 1\n    \n    # Return the count of substrings with sum of digits equal to length\n    return sum(count.values())",
        "test": "assert count_Substrings(\"abccba\") == 3",
        "num_ids": 477
    },
    {
        "number": 62,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize a variable to store the smallest number\n    smallest = xs[0]\n    # loop through the list and check if the current number is smaller than the smallest number\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    # return the smallest number\n    return smallest",
        "test": "assert smallest_num([4, 2, 6, 8, 10]) == 2",
        "num_ids": 283
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 519
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sort a list of tuples based on the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks([(1, 'Math', 50), (2, 'Physics', 60), (3, 'Chemistry', 70), (4, 'Biology', 80)]) == [(2, 'Physics', 60), (1, 'Math', 50), (3, 'Chemistry', 70), (4, 'Biology', 80)]",
        "num_ids": 424
    },
    {
        "number": 65,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the last element of the list to the sum\n    return data_list[-1] + recursive_list_sum(data_list[:-1])",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 332
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1,2,3,4,5]) == 5 # expected output: 5",
        "num_ids": 300
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)",
        "test": "assert bell_number(1) == 1",
        "num_ids": 297
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    if len(A) == 1:\n        return True\n    elif len(A) == 2:\n        return A[0] == A[1]\n    elif len(A) == 3:\n        return A[0] < A[1] and A[0] < A[2]\n    else:\n        for i in range(len(A) - 1):\n            if A[i] > A[i + 1]:\n                return False\n        return True",
        "test": "assert is_Monotonic([3, 1, 4, 5, 1]) == False",
        "num_ids": 453
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # iterate through each element of the list\n    for i in range(len(l)):\n        # if the current element matches the first element of the sublist\n        if l[i] == s[0]:\n            # check if the current element matches the remaining elements of the sublist\n            if i+1 < len(s) and s[i+1] == s[i]:\n                # if so, recursively call the function on the remaining elements of the sublist\n                return is_sublist(l[i+1:], s[i+1:])\n    # if the loop completes without returning, the sublist is present in the list\n    return True",
        "test": "assert is_sublist([],[]) == True",
        "num_ids": 415
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a variable to keep track of the length of the tuples\n    length = 0\n    # Loop through each tuple in the input list\n    for t in Input:\n        # Update the length variable with the length of the current tuple\n        length = max(length, len(t))\n    # If the length of the longest tuple is equal to the sum of all tuples, return True\n    if length == sum(len(t) for t in Input):\n        return True\n    # Otherwise, return False\n    else:\n        return False",
        "test": "assert find_equal_tuple([1, 2, 3, 4, 5, 6]) == False",
        "num_ids": 484
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using the Comb-Sorting algorithm.\n    '''\n\n    # Set the length of the list\n    n = len(nums)\n\n    # Create a list of tuples to store the sublists\n    sublists = []\n\n    # Iterate over the list, creating sublists of length n\n    for i in range(n):\n        sublist = []\n        for j in range(i, n):\n            sublist.append(nums[j])\n        sublists.append(sublist)\n\n    # Perform the actual sorting using the Comb-Sorting algorithm\n    for i in range(n-1):\n        # Swap elements if they are in the wrong order\n        while sublists[i][0] > sublists[i+1][0]:\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n            # Update the sublists\n            sublists[i], sublists[i+1] = sublists[i+1], sublists[i]\n\n    return nums",
        "test": "assert comb_sort([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
        "num_ids": 762
    },
    {
        "number": 72,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def dif_Square(n):\n    '''\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 4 == 0:\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return True",
        "test": "assert dif_Square(5) == True, \"The given number can be represented as the difference of two squares.\"",
        "num_ids": 390
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(patterns)):\n        if colors[i] in patterns[i]:\n            return False\n    return True",
        "test": "assert is_samepatterns(['red', 'green', 'blue', 'yellow', 'purple'], ['red', 'green', 'blue', 'yellow', 'pink']) == False",
        "num_ids": 430
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Create an empty list to store the tuples which meet the conditions\n    result = []\n\n    # Loop through each tuple in the list\n    for t in test_list:\n        # Check if the tuple has all elements divisible by k\n        if all(t[i] % K == 0 for i in range(len(t))):\n            # If the tuple meets all conditions, add it to the result list\n            result.append(t)\n\n    # Return the result list\n    return result",
        "test": "assert find_tuples([], 5) == []",
        "num_ids": 565
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Diff(n):\n    if n < 0:\n        return False\n    for i in range(2, n+1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_Diff(11) == True",
        "num_ids": 272
    },
    {
        "number": 79,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Initialize the count variable\n    count = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Increment the count variable for each odd length word\n        if char.isalpha():\n            count += 1\n            \n    # Return the count\n    return count\n",
        "test": "assert word_len(\"cat\") == 3",
        "num_ids": 284
    },
    {
        "number": 80,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Set variables for the cube, octahedron, and dodecahedron\n    cube = 1\n    octahedron = 1\n    dodecahedron = 1\n\n    # Find the value of n by dividing it by the cube\n    n_cube = int(n / cube)\n\n    # If the value of n is evenly divisible by n^3, n^3 is the nth tetrahedral number\n    if n_cube % 2 == 0:\n        return n_cube**3\n\n    # If the value of n is oddly divisible by n^3, n^2 is the nth tetrahedral number\n    else:\n        return n_cube**2",
        "test": "assert tetrahedral_number(10) == 1010",
        "num_ids": 481
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi * r ** 3",
        "test": "assert volume_sphere(1) == 3.141592653589793",
        "num_ids": 303
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = \"\"\n    for char in strr:\n        char += chr(ord(char) + 13) # add ASCII value of the character plus 13 to make it modulo 26\n    return char",
        "test": "assert get_Char('world') == 'r'",
        "num_ids": 343
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        a, b = 0, 1 \n        for i in range(2, n+1): \n            c = a + b \n            a, b = b, c \n        return b ",
        "test": "assert sequence(0) == 0  # 0 is the first number in the sequence",
        "num_ids": 413
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi * r ** 2",
        "test": "assert surfacearea_sphere(4) == 60.383",
        "num_ids": 251
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Returns the nth centered hexagonal number using the centered hexagonal formula.\n\n    Args:\n        n (int): The number of centered hexagonal numbers to find.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    '''\n\n    if n < 1 or n > 100:\n        raise ValueError(\"Input number must be between 1 and 100.\")\n\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (1 + centered_hexagonal_number(n - 1)) // 2\n    else:\n        return centered_hexagonal_number(n - 1) + 1",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 677
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        if key in dict1 and key in dict2 and key in dict3:\n            merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n        elif key in dict1:\n            merged_dict[key] = dict1[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict",
        "test": "assert merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 721
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from collections import defaultdict\n\ndef freq_count(lst):\n    freq = defaultdict(int)\n    for item in lst:\n        freq[item] += 1\n    return freq\n\nlst1 = [1, 2, 3, 2, 1, 2, 1]\nprint(freq_count(lst1)) # Output: {'1': 3, '2': 4, '3': 1}",
        "test": "assert freq_count([1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 514
    },
    {
        "number": 89,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    for i in range(1, N+1):\n        if abs(N - i) < abs(N - min_num):\n            min_num = i\n    return min_num\n\nprint(closest_num(10))  # Output: 6\nprint(closest_num(15))  # Output: 10\nprint(closest_num(20))  # Output: 15\n",
        "test": "assert closest_num(10) == 10",
        "num_ids": 366
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Function to find the length of the longest word in the list.\n    '''\n    longest_word = \"\"\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n            longest_word = word\n    return longest_word",
        "test": "assert len_log([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == 8",
        "num_ids": 429
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring('hello world', 'world') == True # True because 'world' is a substring of 'hello world'",
        "num_ids": 437
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_undulating(n):\n    if n < 0:\n        return False\n    else:\n        return True",
        "test": "assert is_undulating(7) is True, \"The given number 7 is not undulating\"",
        "num_ids": 208
    },
    {
        "number": 93,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def power(a,b):\n    '''\n    Calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,3) == 8",
        "num_ids": 167
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) < 2:\n        return None\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "test": "assert index_minimum([(2, 4), (1, 3), (4, 5), (6, 8), (2, 2)]) == (2, 2)",
        "num_ids": 451
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3",
        "num_ids": 346
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(15) == 3, \"Test 2\"",
        "num_ids": 200
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the flattened list\n    for element in flattened_list:\n        # If the element is already in the dictionary, increment its count\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[element] = 1\n\n    # Return the frequency dictionary\n    return freq_dict",
        "test": "assert frequency_lists([1, 2, 2, 3, 3, 4, 4, 5, 5]) == {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5}",
        "num_ids": 670
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_num(numbers):\n    result = []\n    for num in numbers:\n        result.append(num * len(numbers))\n    return result",
        "test": "assert multiply_num([2, 4, 6]) == 12",
        "num_ids": 231
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary using a loop\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    \n    # Add the sign\n    if n < 0:\n        binary = '-' + binary\n    \n    return binary",
        "test": "assert decimal_to_binary(12345) == '111111111111111111111111111111111'",
        "num_ids": 394
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    This function takes an integer as input and returns the next smallest palindrome of that integer.\n\n    The function works by repeatedly dividing the input number by 10, and checking if the resulting number is a palindrome. If it is,\n    the function returns the resulting number. Otherwise, it continues dividing the input number by 10 until the resulting number is a\n    palindrome.\n\n    This algorithm has a time complexity of O(n), where n is the input number.\n    '''\n    num = str(num)\n    result = 0\n    while True:\n        result = int(num)\n        if num == str(result):\n            break\n        num = str(num / 10)\n\n    # check if the resulting number is a palindrome\n    i = 0\n    while i < len(num) // 2:\n        if num[i]!= num[len(num) - i - 1]:\n            break\n        i += 1\n\n    if i == len(num) // 2:\n        return result\n    else:\n        return None",
        "test": "assert next_smallest_palindrome(12345) == 12111",
        "num_ids": 744
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) - 1:\n        return None\n    else:\n        return arr[k - 1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1 # The first element is 1",
        "num_ids": 353
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()",
        "test": "assert snake_to_camel(\"UPPERCASE_STRING\") == \"uppercaseString\"",
        "num_ids": 331
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def eulerian_num(n, m):\n    # Function to find Eulerian number\n    def euler(n, m):\n        if n == 0 and m == 0:\n            return 1\n        elif n == 1 and m == 1:\n            return 2\n        elif n == 0 and m == 1:\n            return 3\n        else:\n            result = 1\n            for i in range(2, n + 1):\n                for j in range(2, m + 1):\n                    if i == n and j == m:\n                        result *= i + j\n                    elif i == n and j == 1:\n                        result *= i + 1\n                    elif i == 1 and j == m:\n                        result *= i + j\n                    elif i == 1 and j == 1:\n                        result *= i + 1\n            return result\n\n    # Return Eulerian number\n    return euler(n, m)",
        "test": "assert eulerian_num(10, 2) == 12, \"The correct Eulerian number for n=10 and m=2 is 12.\"",
        "num_ids": 465
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n\n    for sublist in input_list:\n        # Check if the sublist is already in the result list\n        if sublist not in result:\n            # If not, add it to the result list\n            result.append(sublist)\n\n    # Sort the result list in ascending order\n    result.sort()\n\n    return result",
        "test": "assert sort_sublists(['apple', 'banana', 'cherry', 'date', 'elderberry']) == ['apple', 'banana', 'cherry', 'date', 'elderberry']",
        "num_ids": 995
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n\nlst = [True, False, True, False, True, False, True]\nprint(count(lst)) # Output: 2",
        "test": "assert count([True, True, False, True, False]) == 3",
        "num_ids": 213
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 298
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Merges three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = 0\n    \n    while i < len(num1) and j < len(num2) and j < len(num3):\n        if num1[i] <= num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num1[i] > num3[j]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[j])\n            j += 1\n            \n    # Add any remaining elements from the non-empty list\n    merged_list.extend(num1[i:])\n    merged_list.extend(num2[j:])\n    merged_list.extend(num3[j:])\n    \n    return merged_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 1006
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def odd_Equivalent(s, n):\n    # convert string to binary\n    binary = bin(int(s, 2))[2:].zfill(n)\n    \n    # count the number of odd numbers\n    count = 0\n    for i in range(n):\n        if binary[i] == '1':\n            count += 1\n    \n    return count",
        "test": "assert odd_Equivalent('11011011',2) == 2",
        "num_ids": 480
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list of common elements.\n    '''\n\n    common_list = []\n\n    for sublist in nestedlist:\n        if len(set(sublist)) == 1:\n            common_list.append(sublist[0])\n\n    return common_list",
        "test": "assert common_in_nested_lists([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [5, 6]) == [5]",
        "num_ids": 640
    },
    {
        "number": 113,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int_num = int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer('') == False",
        "num_ids": 269
    },
    {
        "number": 115,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for item in list1:\n        if isinstance(item, dict):\n            empty = False\n            break\n    return empty",
        "test": "assert empty_dit([{}]) == False",
        "num_ids": 225
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers into a single integer.\n    '''\n    return sum(nums)",
        "test": "assert tuple_to_int((1,2,3)) == 6",
        "num_ids": 227
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def list_to_float(test_list):\n    '''\n    This function takes a list of lists as input and returns a list of floats containing all the elements in the input list that can be converted to floats.\n    '''\n    float_list = []\n    for item in test_list:\n        for value in item:\n            try:\n                float_list.append(float(value))\n            except ValueError:\n                pass\n    return float_list\n",
        "test": "assert list_to_float([[1.1, 2.2], [3.3, 4.4]]) == [1.1, 2.2, 3.3, 4.4]",
        "num_ids": 594
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"apple banana\") == [\"apple\", \"banana\"]",
        "num_ids": 192
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def search(arr):\n    \"\"\"\n    Write a Python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    count = 0\n    current = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == current:\n            count += 1\n        else:\n            if count == 1:\n                return current\n            count = 1\n            current = arr[i]\n    if count == 1:\n        return current\n    else:\n        return None",
        "test": "assert search([3, 2, 4, 2, 3]) == 2",
        "num_ids": 1519
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1] - list1[i][1]*list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([1, 2, 3, 4, 5]) == (15, 15)",
        "num_ids": 673
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        '''\n        Check if a number is amicable or not.\n        '''\n        for i in range(1, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_amicable_numbers(start, end):\n        '''\n        Sum all the amicable numbers between start and end.\n        '''\n        result = 0\n        for num in range(start, end+1):\n            if is_amicable(num):\n                result += num\n        return result\n\n    return sum_amicable_numbers(1, limit)",
        "test": "assert amicable_numbers_sum(50) == 163061",
        "num_ids": 1562
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # calculate the complex number in polar form\n    z = cmath.sqrt(a**2 + b**2)\n    theta = cmath.atan2(b, a)\n\n    # convert the polar form to degrees\n    angle = (theta*180)/cmath.pi\n\n    return angle",
        "test": "assert angle_complex(0,1) == 0.5403023058681398",
        "num_ids": 347
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_length(string):\n    # initialize variables to keep track of the number of 0s and 1s\n    zeros = 0\n    ones = 0\n\n    # loop through each character in the string\n    for char in string:\n        # if the character is '0', increment the zeros count\n        if char == '0':\n            zeros += 1\n        # if the character is '1', increment the ones count\n        elif char == '1':\n            ones += 1\n\n    # if there are no 0s or 1s in the string, return 0\n    if zeros == 0 and ones == 0:\n        return 0\n\n    # calculate the maximum difference between the number of 0s and 1s\n    max_diff = max(zeros, ones)\n\n    # if there are at least two 0s and one 1, the length of the longest sub-string is the number of 1s\n    if zeros > 0 and ones == 1:\n        max_diff += 1\n\n    # return the maximum difference\n    return max_diff",
        "test": "assert find_length(\"011001\") == 3",
        "num_ids": 1561
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum(a, b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisor = 0\n    for i in range(a, b+1):\n        if a % i == 0 and b % i == 0:\n            common_divisor += i\n    return common_divisor\n",
        "test": "assert sum(5, 10) == 10, \"The sum of common divisors of 5 and 10 should be 10.\"",
        "num_ids": 528
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def multiply_int(x, y):\n    '''\n    Multiply two integers and return the result.\n    '''\n    result = x * y\n    return result",
        "test": "assert multiply_int(3, 4) == 12, \"The result of multiplying 3 and 4 is not equal to 12.\"",
        "num_ids": 204
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()  # split the string into individual words\n    long_words = []  # create an empty list to store the long words\n    \n    for word in words:\n        if len(word) > n:  # check if the word is longer than n characters\n            long_words.append(word)  # add it to the list of long words\n            \n    return long_words  # return the list of long words",
        "test": "assert long_words(7, 'The quick brown fox jumps over the lazy dog') == []",
        "num_ids": 460
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    if rows!= len(my_matrix[0]):\n        return False\n    \n    cols = len(my_matrix[0])\n    if cols!= rows:\n        return False\n    \n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= i + j + 1:\n                return False\n            \n    return True",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 755
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Initialize a dictionary to store frequency of each item\n    freq_dict = defaultdict(int)\n\n    # Loop through the list of numbers and update the frequency of each item\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = max(freq_dict, key=freq_dict.get)\n\n    # Return the item with maximum frequency\n    return max_item",
        "test": "assert max_occurrences([1, 1, 1, 1, 1]) == 1",
        "num_ids": 462
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n\n    vowels = \"aeiouy\"\n    reversed_str = \"\"\n\n    for char in str1:\n        if char not in vowels:\n            reversed_str += char\n\n    return reversed_str",
        "test": "assert reverse_vowels(\"\") == \"\"",
        "num_ids": 317
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def tup_string(tup1):\n    '''\n    Convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string(\"hello\") == \"hello\"",
        "num_ids": 179
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            total_sum += num\n    return total_sum",
        "test": "assert sum_negativenum([-1, -2, -3, -4, -5]) == -15",
        "num_ids": 309
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def hexagonal_num(n): \n    # Function to find nth hexagonal number\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    else:\n        return (n * (n-1)) // 2 + hexagonal_num(n-1)",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 735
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create a list of tuples to store the frequency of each digit in the array\n    freq = [0] * 10\n    for num in nums:\n        for digit in str(num):\n            freq[int(digit)] += 1\n    \n    # Find the maximum frequency for each digit\n    max_freq = max(freq)\n    \n    # Initialize a counter for zeroes and a counter for ones\n    zero_count = 0\n    one_count = 0\n    \n    # Iterate over the frequency list and count the number of zeros and ones\n    for digit in range(10):\n        if freq[digit] == max_freq:\n            zero_count += freq[digit]\n        else:\n            one_count += max_freq - freq[digit]\n    \n    # Return the ratio of zeroes to ones\n    return (zero_count + one_count) / (max_freq * 2)",
        "test": "assert zero_count([1, 0, 1, 0, 0]) == 2/3",
        "num_ids": 642
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is an integer\n    if not isinstance(n, int):\n        return False\n\n    # Check if n is equal to 0\n    if n == 0:\n        return False\n\n    # Check if n is 1\n    if n == 1:\n        return True\n\n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        return True\n\n    # Check if n can be represented as sum of powers of 2\n    for i in range(32, n, 2):\n        if n % i == 0:\n            return False\n\n    return True",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 730
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference",
        "test": "assert circle_circumference(4) == 71.08169398576621, \"The correct circumference of a circle with radius 4 is 71.08169398576621.\"",
        "num_ids": 355
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = set()\n    for sublist in test_list:\n        flattened.update(sublist)\n    return flattened",
        "test": "assert extract_singly([1,2,3,4,5]) == set([1,2,3,4,5])",
        "num_ids": 426
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the smallest and largest elements in the sublist\n        left = i\n        right = n - 1\n        while left < right:\n            if nums[left] > nums[right]:\n                # swap the elements and move the right pointer to the right\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n            else:\n                right -= 1\n        # if we couldn't find a sublist of size 2 or less, we're done\n        if i!= left - 1:\n            # move the right pointer to the next index\n            right = n - 1\n\n    return nums",
        "test": "assert pancake_sort([3, 2, 1, 4]) == [1, 2, 3, 4]",
        "num_ids": 619
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([],[],[]) == 0, \"count_samepair([]) should return 0 for an empty list\"",
        "num_ids": 421
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lists(Input):\n    '''\n    Function to find number of lists present in a tuple.\n\n    Args:\n    Input: Tuple to find number of lists in.\n\n    Returns:\n    Count of lists in the tuple.\n    '''\n\n    return len(Input)",
        "test": "assert find_lists(()) == 0",
        "num_ids": 291
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_Abs_Diff(arr):\n    # sort the array in non-descending order\n    arr.sort()\n    # initialize two variables to store the maximum difference and the current difference\n    max_diff = abs(arr[1] - arr[0])\n    current_diff = abs(arr[1] - arr[0])\n\n    # iterate through the array and calculate the maximum difference\n    for i in range(1, len(arr)):\n        current_diff = max(abs(arr[i] - arr[i-1]), current_diff)\n        max_diff = max(max_diff, current_diff)\n\n    # return the maximum difference\n    return max_diff",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 2",
        "num_ids": 648
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if x and y are integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n\n    # Check if x and y are different\n    if a == b:\n        return None\n\n    # Calculate solutions\n    solutions = [(a, b), (-a, b), (a, -b), (-a, -b)]\n\n    # Find the first solution\n    for solution in solutions:\n        x, y = solution\n        if x * x + y * y == n:\n            return (x, y)\n\n    # If no solution was found, return None\n    return None",
        "test": "assert find_solution(0, 0, 0) is None",
        "num_ids": 534
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4, 6]) == [1, 3, 5]",
        "num_ids": 438
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0, n, 2):\n        if i < n-x and i > 0:\n            sum += i\n    return sum",
        "test": "assert sum_series(5) == 28",
        "num_ids": 338
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def area_polygon(s, l):\n    area = s * l * tan(pi/l)\n    return area",
        "test": "assert area_polygon(3, 5) == 12.0",
        "num_ids": 239
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return sum(divisors)",
        "test": "assert div_sum(13) == 13, \"The sum of divisors of 13 should be 13\"",
        "num_ids": 479
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_char_position(str1):\n    # Define a set of uppercase and lowercase English alphabets\n    english_alphabets = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    # Count the number of characters in the first string that occur at the same position in the English alphabet\n    char_count = 0\n    for i in range(len(str1)):\n        if str1[i] in english_alphabets:\n            char_count += 1\n    return char_count\n",
        "test": "assert count_char_position(\"hello world\") == 10",
        "num_ids": 477
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        if A[i] % 2 == 0 and A[i]!= A[i+1] % 2:\n            count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2, \"The expected output is 2\"",
        "num_ids": 412
    },
    {
        "number": 167,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n: \n        power <<= 1\n    return power",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 404
    },
    {
        "number": 168,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count",
        "test": "assert frequency(\"hello\", \"l\") == 2",
        "num_ids": 232
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize the sum to 0\n    total = 0\n    \n    # loop through the list1 starting from the mth index\n    for i in range(m):\n        # loop through the list1 starting from the (i+1)th index\n        for j in range(n):\n            # add the current element to the total\n            total += list1[i+j]\n    \n    return total",
        "test": "assert sum_range_list([], 0, 2) == 0",
        "num_ids": 405
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a * (3 * a * (3 * a - 1) + 1)) / 2",
        "test": "assert perimeter_pentagon(6) == 30",
        "num_ids": 248
    },
    {
        "number": 172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"hello world std std\") == 3",
        "num_ids": 219
    },
    {
        "number": 222,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = True\n    for i in range(len(test_tuple)):\n        if not isinstance(test_tuple[i], type(test_tuple[0])):\n            data_type = False\n            break\n    return data_type",
        "test": "assert check_type(('hello', 1, 3.14)) == False # Test case 1",
        "num_ids": 369
    },
    {
        "number": 223,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_majority(arr, n, x):\n    # Create a dictionary to store the count of each element\n    counts = {}\n    \n    # Iterate through the array and update the count of each element\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Check if the count of each element is greater than n/2\n    if len(counts) >= n//2:\n        # If yes, return True\n        return True\n    else:\n        # If no, return False\n        return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 3, 3) == True",
        "num_ids": 702
    },
    {
        "number": 224,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 269
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    '''\n    This function removes the characters which have odd index values of a given string.\n    '''\n    index = 0\n    odd_values = []\n    while index < len(str):\n        if str[index] % 2!= 0:\n            odd_values.append(str[index])\n        index += 1\n    return ''.join(odd_values)",
        "test": "assert odd_values_string(\"python\") == \"nohty\"",
        "num_ids": 352
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a, b, c):\n    # Finding the minimum of three numbers\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 289
    },
    {
        "number": 228,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:  # base case: n is 0\n        return True\n    \n    # if n is odd, then check whether the least significant bit is set or not\n    if n % 2!= 0:\n        mask = (1 << l) - 1  # bitmask of all bits that are set to 1 except for least significant bit\n        if (mask & (n >> l))!= 0:\n            return False  # if the least significant bit is set in n, then no bits are set in the range\n    \n    # if n is even, then check whether the second least significant bit is set or not\n    else:\n        mask = (1 << (l+1)) - 1  # bitmask of all bits that are set to 1 except for second least significant bit\n        if (mask & (n >> (l+1)))!= 0:\n            return False  # if the second least significant bit is set in n, then no bits are set in the range\n    \n    # recursive case: n is even or odd\n    return all_Bits_Set_In_The_Given_Range((n >> 1), l, (l+1))  # call the function recursively with n >> 1 as the argument and l+1 as the left limit\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,0,5) == False",
        "num_ids": 791
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Get the first n elements of the array\n    negative_arr = [elem for elem in arr if elem < 0]\n    positive_arr = [elem for elem in arr if elem >= 0]\n\n    # Combine the two arrays into one sorted array\n    sorted_arr = sorted(positive_arr + negative_arr)\n\n    # Rearrange the elements in the sorted array to make them appear in the desired order\n    arr = []\n    for i in range(n):\n        if i < len(sorted_arr):\n            arr.append(sorted_arr[i])\n        else:\n            arr.append(0)\n\n    # Return the modified array\n    return arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 807
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank(\"Hello World\", \" \") == \"Hello World\"",
        "num_ids": 229
    },
    {
        "number": 232,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([], 5) == []",
        "num_ids": 478
    },
    {
        "number": 233,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h",
        "test": "assert lateralsuface_cylinder(1,1) == 2",
        "num_ids": 313
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "test": "assert volume_cube(1) == 1, \"Volume of a cube with side length 1 is not 1.\"",
        "num_ids": 216
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a new number with all bits set to 0\n    new_num = 0\n\n    # Use a bitwise AND operator to set all even bits in the original number\n    new_num = n & (n - 1)\n\n    # Return the new number with all even bits set\n    return new_num",
        "test": "assert even_bit_set_number(10) == 512",
        "num_ids": 520
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a dictionary to store the counts\n    counts = Counter()\n\n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Get the first element of the tuple\n        key = tup[0]\n\n        # Increment the count for the key\n        counts[key] += 1\n\n    return counts",
        "test": "assert check_occurences([(\"apple\", 2), (\"banana\", 3), (\"apple\", 1), (\"pear\", 1), (\"banana\", 2)]) == {\"apple\": 2, \"banana\": 2, \"pear\": 1}",
        "num_ids": 552
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize count variable to zero\n    count = 0\n    \n    # Loop through each character in the string\n    for char in str:\n        # If the character is not an empty string, increment the count\n        if char!= '':\n            count += 1\n    \n    # Return the count\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 333
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(2, m+1):\n            count += i * j\n    return count",
        "test": "assert get_total_number_of_sequences(2, 3) == 0",
        "num_ids": 1031
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # check if lists are of same length\n    if len(list1)!= len(list2):\n        print(\"Error: Lists must be of same length\")\n        return\n\n    # replace last element of list1 with elements of list2\n    list1[-1] = list2[-1]",
        "test": "assert replace_list([1,2,3],[4,5]) == [1,2,3,4,5]",
        "num_ids": 572
    },
    {
        "number": 242,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)",
        "test": "assert count_charac(\"\") == 0",
        "num_ids": 201
    },
    {
        "number": 244,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Check if the number is positive\n    if N <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Initialize the upper limit for the square root\n    upper = int(math.sqrt(N))\n    # Initialize the current square root\n    current_sqrt = upper\n    \n    # Loop until the square root is greater than or equal to N\n    while current_sqrt * current_sqrt < N:\n        current_sqrt += 1\n    \n    # Return the next perfect square\n    return current_sqrt**2",
        "test": "assert next_Perfect_Square(6) == 9",
        "num_ids": 583
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum(arr): \n    # Initialize variables for bitonic sequence\n    max_bitonic = 0\n    max_sequence = []\n    \n    # Traverse through array and find max sum bitonic sequence\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Find sum of bitonic sequence ending at index i\n            bitonic_sum = sum(arr[i:j+1])\n            \n            # Check if bitonic sequence is greater than current max bitonic sequence\n            if bitonic_sum > max_bitonic:\n                max_bitonic = bitonic_sum\n                max_sequence = [arr[i]]\n            elif bitonic_sum == max_bitonic:\n                max_sequence.append(arr[i])\n    \n    # Find maximum sum of bitonic sequence\n    max_bitonic_sum = sum(max_sequence)\n    \n    return max_bitonic_sum",
        "test": "assert max_sum([1,2,3,4,5]) == 11",
        "num_ids": 632
    },
    {
        "number": 246,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while guess * guess!= number:\n        if guess * guess > number:\n            guess = guess - 1\n        else:\n            guess = guess + 1\n    return guess\n",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 759
    },
    {
        "number": 247,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Create a table to store the length of the longest palindromic subsequence ending at each position in the string.\n    lps_table = [[0]*len(str) for _ in range(len(str))]\n\n    # Initialize the length of the longest palindromic subsequence and its start position to the length of the string.\n    max_palindrome = 1\n    start_pos = 0\n\n    # Iterate through the string using dynamic programming.\n    for i in range(1, len(str)):\n        # Check if the current character is a palindrome and its position is not already in the table.\n        if str[i] == str[i-1] and i-start_pos+1 > max_palindrome:\n            max_palindrome = i-start_pos+1\n            start_pos = i-max_palindrome+1\n\n        # Update the length of the longest palindromic subsequence ending at the current position in the table.\n        lps_table[i][i] = 1\n\n        # Update the length of the longest palindromic subsequence ending at the current position and one step to the left in the table.\n        if i-1 >= start_pos:\n            lps_table[i][i-1] = 2 + lps_table[i-1][i-2]\n\n    # Return the length of the longest palindromic subsequence.\n    return max_palindrome",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 861
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def harmonic(n, a=0, b=1):\n        '''\n        Calculates the harmonic sum of n.\n        '''\n        return a + n / b\n    \n    # Calculate the harmonic sum of n-1\n    sum = 1\n    for i in range(2, n+1):\n        sum += harmonic(i)\n    \n    # Return the harmonic sum\n    return sum",
        "test": "assert harmonic_sum(10) == 55, \"harmonic_sum(10) should return 55\"",
        "num_ids": 427
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create two sets of unique numbers from the two input arrays\n    unique_nums1 = set(array_nums1)\n    unique_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = unique_nums1.intersection(unique_nums2)\n\n    # Return the intersection as a list\n    return list(intersection)",
        "test": "assert intersection_array([1,2,3,4,5],[6,7,8,9,10]) == [] # []",
        "num_ids": 496
    },
    {
        "number": 250,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert count_X((1,2,3,4,5), 3) == 1",
        "num_ids": 325
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n    result.insert(0, element)\n    return result",
        "test": "assert insert_element([],1) == [1]",
        "num_ids": 388
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_number = complex(numbers[0], numbers[1])\n    magnitude = abs(complex_number)\n    angle = cmath.angle(complex_number)\n    return (magnitude, angle)",
        "test": "assert convert(3+4j) == (3+4j, 1)",
        "num_ids": 318
    },
    {
        "number": 253,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1,2,3,4,5]) == 5",
        "num_ids": 232
    },
    {
        "number": 255,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations of the elements of a list of length n,\n    with repetition. Returns a list of tuples.\n    '''\n    combinations = []\n    for comb in combinations_with_replacement(l, n):\n        comb_tuple = tuple(comb)\n        combinations.append(comb_tuple)\n    return combinations",
        "test": "assert combinations_colors([], 2) == []",
        "num_ids": 497
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            n //= i\n    return count",
        "test": "assert count_Primes_nums(0) == 0",
        "num_ids": 437
    },
    {
        "number": 257,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 202
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # find the maximum element in the two tuples\n    max_element = max(test_tup1[0], test_tup2[0])\n    # create a new tuple with the maximum element\n    max_tuple = (max_element, test_tup1[1], test_tup2[1])\n    # return the new tuple\n    return max_tuple",
        "test": "assert maximize_elements((2, 6), (1, 3)) == (3, 6)",
        "num_ids": 596
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # List of numbers from 2 to n\n    numbers = list(range(2, n + 1))\n\n    # Iterate over all numbers and check if each is prime\n    for i in numbers:\n        # Check if i is a composite number\n        if i % 2 == 0 or i % 3 == 0:\n            continue\n        # Check if i is a prime number\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                break\n        else:\n            # i is prime, add it to the list of primes\n            primes.append(i)\n\n    # Return the nth prime number\n    return primes[n - 1]",
        "test": "assert newman_prime(2) == 3",
        "num_ids": 1337
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples do not have the same number of elements.\")\n        return\n\n    # Create a new tuple to store the division result\n    result_tup = tuple()\n\n    # Iterate over each element in the tuples and perform element-wise division\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i])\n\n    # Return the final division result\n    return result_tup",
        "test": "assert division_elements((1, 2, 3, 4), (5, 6, 7, 8)) == (0.25, 0.4, 0.5, 0.625)",
        "num_ids": 606
    },
    {
        "number": 262,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    result1 = list1[:L]\n    result2 = list1[L:]\n    return (result1, result2)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 460
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 7 - h_age",
        "test": "assert dog_age(1) == 1",
        "num_ids": 214
    },
    {
        "number": 265,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 398
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * 6",
        "test": "assert lateralsurface_cube(10) == 313.86318109333885, \"The lateral surface area of a cube with side length 10 should be approximately equal to 313.86.\"",
        "num_ids": 287
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += (i*i)\n    return total_sum",
        "test": "assert square_Sum(10) == 100  # The sum of the squares of the first 10 odd natural numbers is 100.",
        "num_ids": 341
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    else:\n        return n * (find_star_num(n-1))",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 308
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return None",
        "test": "assert ascii_value(\"a\") == 97",
        "num_ids": 622
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n            \n    return even_sum, even_index",
        "test": "assert sum_even_and_even_index([1, 2, 3, 4, 5]) == 9",
        "num_ids": 415
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize a variable to store the sum of even power sum\n    power_sum = 0\n    \n    # loop through each even natural number from 1 to n\n    for i in range(1, n+1):\n        # check if the number is even\n        if i % 2 == 0:\n            # calculate the power of the number raised to the 5th power\n            power = i**5\n            # add the power to the variable\n            power_sum += power\n    \n    # return the sum of even power sum\n    return power_sum",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 516
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list",
        "test": "assert rear_extract([]) == [] # test empty list",
        "num_ids": 371
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup",
        "test": "assert substract_elements((1, 2, 3), (2, 4, 6)) == (1, 2, 4)",
        "num_ids": 670
    },
    {
        "number": 274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize variables\n    sum = 0\n    count = 0\n    i = 1\n\n    # Calculate even index binomial coefficients\n    while i <= n:\n        if i % 2 == 0:\n            sum += i * (math.binom(n, i))\n        i += 1\n\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(10) == 60, \"The sum of even index binomial coefficients for n = 10 is incorrect. Expected: 60. Actual: {}\".format(even_binomial_Coeff_Sum(10))",
        "num_ids": 534
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (4/3) * r**3 * h\n    return volume",
        "test": "assert volume_cylinder(3,4) == 6.006900545212551, \"The volume of a cylinder with radius 3 and height 4 should be approximately 6.007.\"",
        "num_ids": 293
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n    Args:\n        dict (dict): A dictionary containing key-value pairs.\n        n (int): An integer value that must be greater than or equal to 0.\n\n    Returns:\n        A filtered dictionary containing only the entries with values greater than or equal to n.\n    \"\"\"\n    filtered = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered[key] = value\n    return filtered",
        "test": "assert dict_filter({'a':1, 'b':2, 'c':3, 'd':4, 'e':5},2) == {'a':1, 'c':3, 'e':5}",
        "num_ids": 505
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count",
        "test": "assert count_first_elements(('hello', 'world', 'python')) == 1",
        "num_ids": 445
    },
    {
        "number": 279,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n > 0:\n        for i in range(1, n+1):\n            j = 0\n            for k in range(1, i+1):\n                j += k\n            if j == n:\n                return i\n    else:\n        return None\n",
        "test": "assert is_num_decagonal(1) == 1, \"The first decagonal number is not 1.\"",
        "num_ids": 389
    },
    {
        "number": 280,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def sequential_search(dlist, item):\n    # Initialize the index variable to -1\n    index = -1\n    # Loop through the list and check if the item is equal to the current item\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            # If the item is found, return the index and True\n            index = i\n            return (True, index)\n    # If the item is not found, return the index and False\n    return (False, index)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 487
    },
    {
        "number": 281,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 371
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[2,3,4]) == [1,1,1]",
        "num_ids": 280
    },
    {
        "number": 283,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    count = [0] * 10\n    for digit in str(n):\n        count[int(digit)] += 1\n    for i in range(1, 10):\n        if count[i] > 1 or count[i] == 1 and i!= n % 10:\n            return False\n    return True",
        "test": "assert validate(123) == False",
        "num_ids": 428
    },
    {
        "number": 284,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    return False",
        "test": "assert check_element([1,2,3,4,5],6) == False",
        "num_ids": 252
    },
    {
        "number": 285,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(?=.*[ab]{2,})')\n    return pattern.match(text) is not None",
        "test": "assert text_match_two_three('abcabcbb') == True",
        "num_ids": 2313
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize max sum to negative infinity\n    max_sum = float('-inf')\n\n    # Initialize current sum to the first element of the array\n    current_sum = a[0]\n\n    # Initialize remaining array\n    remaining = a[1:]\n\n    # Iterate through remaining array\n    for i in range(k):\n        # Update current sum to the maximum of current sum and current element plus the current sum of the remaining array\n        current_sum = max(a[i], current_sum + a[i], remaining[i])\n\n        # Update max sum if current sum is greater\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, -2, 3, -1, 2, 1], 5, 3) == 6, \"Incorrect output for the given test case\"",
        "num_ids": 682
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum",
        "test": "assert square_Sum(100) == 1225 # the sum of squares of first 100 even natural numbers is 1225",
        "num_ids": 336
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length_list = []\n    for sublist in list1:\n        length = len(sublist)\n        if length > len(length_list):\n            length_list = sublist\n    return length_list",
        "test": "assert max_length([]) == []",
        "num_ids": 468
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k): \n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    ways = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            ways += i * j * (k-j) // (i-1)\n    return ways",
        "test": "assert count_no_of_ways(3, 4) == 4",
        "num_ids": 374
    },
    {
        "number": 292,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # check if m is even\n    if m % 2 == 0:\n        # calculate quotient as integer\n        quotient = int(n / m)\n        return quotient\n    else:\n        # calculate quotient as float\n        quotient = n / m\n        return round(quotient)",
        "test": "assert find(10,5) == 2",
        "num_ids": 363
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    area = w * h\n    return area",
        "test": "assert otherside_rightangle(3,4) == 12",
        "num_ids": 226
    },
    {
        "number": 294,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return max(listval)",
        "test": "assert max_val([1,2,3,4,5]) == 5",
        "num_ids": 306
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_div(number):\n    '''\n    Returns the sum of all divisors of a number,\n    using the formula: sum(i=1 to number//2:number//i)\n    '''\n    sum = 0\n    for i in range(1, number//2+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "test": "assert sum_div(9) == 30",
        "num_ids": 285
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def get_Inv_Count(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n",
        "test": "assert get_Inv_Count([1, 3, 5, 2, 4]) == 3",
        "num_ids": 442
    },
    {
        "number": 297,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def flatten_list(lst):\n    # Flatten the nested list structure\n    flattened_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_lst.extend(flatten_list(item))\n        else:\n            flattened_lst.append(item)\n    return flattened_lst",
        "test": "assert flatten_list([]) == []",
        "num_ids": 425
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the maximum aggregate values\n    max_aggregate_dict = defaultdict(int)\n\n    # Loop through each tuple in the list\n    for tup in stdata:\n        # If the value is greater than the current maximum aggregate, update it\n        if tup[1] > max_aggregate_dict[tup[0]]:\n            max_aggregate_dict[tup[0]] = tup[1]\n\n    # Return the maximum aggregate value\n    return max(max_aggregate_dict.values())",
        "test": "assert max_aggregate([(\"Alice\", 50), (\"Bob\", 30), (\"Charlie\", 20), (\"Dave\", 40), (\"Eve\", 60)]) == 60",
        "num_ids": 570
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n\n    count = 0\n    while n >= 2:\n        # count binary sequences of length n\n        for i in range(2, n+1):\n            count += 1\n        \n        # remove the first bit and add the next bit\n        n -= 1\n    \n    return count",
        "test": "assert count_binary_seq(3) == 3, \"The function should return 3 for the given input.\"",
        "num_ids": 606
    },
    {
        "number": 301,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n\n    Inputs:\n    d: a dictionary\n\n    Output:\n    An integer representing the depth of the dictionary.\n    '''\n\n    # define an empty list to store the keys\n    keys = []\n\n    # loop through each key in the dictionary\n    for key in d:\n        # if the key is a dictionary, recursively call the function on it\n        if isinstance(d[key], dict):\n            # if the current key is not in the keys list, add it\n            if key not in keys:\n                keys.append(key)\n            # recursively call the function on the current key\n            depth = dict_depth(d[key])\n            # add the current key's depth to the depth of the dictionary\n            return depth + 1\n        # if the key is not a dictionary, simply add it to the keys list\n        else:\n            keys.append(key)\n\n    # if the dictionary has no keys, return 0\n    return 0",
        "test": "assert dict_depth({}) == 0",
        "num_ids": 433
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    # find the range where element is present\n    for i in range(len(arr)):\n        if arr[i] in ranges:\n            range_index = ranges.index(arr[i])\n            rotations[index] = range_index\n            break\n    \n    # find the next element in the range\n    for i in range(len(arr)):\n        if rotations[index] < len(ranges)-1:\n            rotations[index] += 1\n            break\n        else:\n            rotations[index] = 0\n            \n    # find the element at the given index after number of rotations\n    return arr[rotations[index]]",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[1,2],[2,3],[3,4],[4,5]],[0,1,2,3,4],3) == 5, \"The element at index 3 after 3 rotations should be 5.\"",
        "num_ids": 472
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Define a pattern to match words starting with letter 'p'\n    pattern = re.compile(r'\\b[Pp][Aa][Pp]\\b')\n\n    # Find all matches of the pattern in the list of words\n    matches = re.findall(pattern, words)\n\n    # If there are any matches, return the two words\n    if matches:\n        return matches[0], matches[1]\n    else:\n        # If there are no matches, return an empty list\n        return []",
        "test": "assert start_withp(['apple', 'banana', 'date', 'pear']) == ('apple', 'pear')",
        "num_ids": 474
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize max sum and current sum to be negative infinity\n    max_sum = float('-inf')\n    current_sum = float('-inf')\n    # Initialize a list to store the sum of each element of the increasing subsequence\n    subsequence_sum = [0] * n\n    # Initialize a list to store the index of each element of the increasing subsequence\n    subsequence_index = [0] * n\n    # Initialize the maximum index i and current index j to be 0\n    max_index = 0\n    current_index = 0\n    # Iterate through the increasing subsequence from i to k - 1\n    for i in range(index, k - 1, -1):\n        # Update the current sum\n        current_sum = a[i] + current_sum\n        # Update the maximum sum and maximum index if the current sum is greater than the max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_index = i\n        # Update the subsequence_sum, subsequence_index, and current index if the current sum is less than the current sum of the current element\n        if current_sum < subsequence_sum[current_index]:\n            subsequence_sum[current_index] = current_sum\n            subsequence_index[current_index] = i\n            current_index = i\n    # Return the maximum sum of the increasing subsequence\n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4], 4, 2, 2) == 4",
        "num_ids": 1217
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    # Convert tuplex to a list of lists\n    lst = [tuplex[i][j] for i in range(m) for j in range(n)]\n    # Convert the list of lists to a colon\n    colon = ''.join(str(i) for i in lst)\n    return colon",
        "test": "assert colon_tuplex((1,2,3), 3, 2) == (1, 3)",
        "num_ids": 486
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists in descending order of length\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # calculate the product of the two largest elements in nums1 and nums2\n    product = nums1[0] * nums2[0]\n    # keep track of the largest product found so far and the index of the current element in nums1\n    largest_product = product\n    largest_index = 0\n    # iterate through the remaining elements of nums1 and nums2\n    for i in range(1, N):\n        if nums1[i] > nums1[largest_index]:\n            # if nums1[i] is greater than the current largest element, update the largest product and index\n            largest_product = nums1[i] * nums2[0]\n            largest_index = i\n        elif nums2[i] > nums1[largest_index]:\n            # if nums2[i] is greater than the current largest element, update the largest product and index\n            largest_product = nums1[0] * nums2[i]\n            largest_index = i\n        else:\n            # if the current element is the same as the largest element, update the product accordingly\n            product = product * nums1[i]\n    # return the largest product\n    return largest_product",
        "test": "assert large_product([10, 20, 30], [40, 50, 60], 3) == [1200, 1800, 2400]",
        "num_ids": 983
    },
    {
        "number": 309,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def maximum(a,b):\n    return a if a > b else b",
        "test": "assert maximum(3,5) == 5 # Test the correctness of the maximum function with the given values",
        "num_ids": 206
    },
    {
        "number": 310,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"Python\") == ('P', 'y', 't', 'h', 'o', 'n')",
        "num_ids": 258
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & (n-1):   # loop until leftmost set bit is not set\n        n = (n & n-1) + 1   # shift all bits left by 1\n    return n",
        "test": "assert set_left_most_unset_bit(13) == 4",
        "num_ids": 439
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h",
        "test": "assert volume_cone(10, 5) == 314.1592653589793, \"The volume of a cone with base radius 10 and height 5 should be approximately 314.16.\"",
        "num_ids": 345
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # If n is 1 or 2, return 1\n    if n == 1 or n == 2:\n        return n\n\n    # Initialize a variable to keep track of the highest power of 2\n    highest_power_of_2 = 1\n\n    # Loop through all the numbers from 2 to n-1\n    for i in range(2, n+1):\n        # If the current number is a power of 2 and greater than the current highest power of 2, update the highest power of 2\n        if i & (i - 1) == 0 and highest_power_of_2 < i:\n            highest_power_of_2 = i\n\n    return highest_power_of_2",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 567
    },
    {
        "number": 389,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n < 1:\n        print(\"n must be a positive integer.\")\n        return\n    \n    if n == 1 or n == 2:\n        return n\n    \n    a = 1\n    b = 1\n    for i in range(3, n+1):\n        c = a + b\n        a = b\n        b = c\n    \n    return b",
        "test": "assert find_lucas(10) == 55",
        "num_ids": 367
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    return [str(item) + string for item in list_]",
        "test": "assert add_string([], \"\") == []",
        "num_ids": 306
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    \n    # loop through the lists and convert them to nested dictionary\n    for item1 in l1:\n        for item2 in l2:\n            if isinstance(item1, dict) and isinstance(item2, dict):\n                # create a new key for the nested dictionary\n                nested_dict[item2['key']] = {'value': item2['value']}\n                \n            elif isinstance(item1, list) and isinstance(item2, list):\n                # create nested dictionary for each sublist\n                nested_dict[item2[0]] = {'value': item2[1]}\n                \n            else:\n                # add the item to the dictionary\n                nested_dict[item2] = {'value': item1}\n    \n    # return the nested dictionary\n    return nested_dict",
        "test": "assert convert_list_dictionary([1, 2, 3], ['apple', 'banana', 'cherry'], {'fruit': 'apple', 'color':'red'}) == {'apple': {'fruit': 'apple', 'color':'red'}}",
        "num_ids": 840
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    left_sum = n // 2 + get_max_sum(n // 2)\n    right_sum = n // 3 + get_max_sum(n // 3)\n    middle_sum = n // 4 + get_max_sum(n // 4)\n    return max(left_sum, right_sum, middle_sum)",
        "test": "assert get_max_sum(8) == 60",
        "num_ids": 990
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    max_length = len(input_list[0])\n    max_item = input_list[0]\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_item = item\n\n    return max_item",
        "test": "assert max_length_list([1, 2, 3, 4, 5, 6]) == [5, 6]",
        "num_ids": 416
    },
    {
        "number": 394,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_distinct(test_tup):\n    '''\n    Check if a tuple contains no duplicates.\n\n    Args:\n        test_tup (tuple): A tuple to be checked.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    '''\n    return len(set(test_tup)) == len(test_tup)",
        "test": "assert check_distinct(('a', 'b', 'c')) == True",
        "num_ids": 312
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create an empty dictionary to store the frequency of characters\n    freq = {}\n\n    # Iterate over the string and update the frequency of each character\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first non-repeating character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None",
        "test": "assert first_non_repeating_character(\"abc\") == \"a\"",
        "num_ids": 572
    },
    {
        "number": 396,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Use the regex module to match the string pattern\n    match = re.match(regex, string)\n    if match:\n        # If the match is successful, return True\n        return True\n    else:\n        # If the match is not successful, return False\n        return False",
        "test": "assert check_char('abcde') == False",
        "num_ids": 381
    },
    {
        "number": 397,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_numbers(a, b, c):\n    # create a list of the numbers\n    nums = [a, b, c]\n\n    # sort the list in ascending order\n    nums.sort()\n\n    # determine the number of elements in the list\n    n = len(nums)\n\n    # calculate the median\n    if n % 2 == 1:\n        median = nums[n // 2]\n    else:\n        median = (nums[n // 2 - 1] + nums[n // 2]) / 2\n\n    return median\n",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 552
    },
    {
        "number": 398,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 404
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Initialize variables\n    xor = 0\n\n    # Iterate over the tuples and perform the XOR operation\n    for i in range(len(test_tup1)):\n        xor |= test_tup1[i] ^ test_tup2[i]\n\n    # Return the XOR value\n    return xor",
        "test": "assert bitwise_xor((1,2), (1,4)) == (1, 4)",
        "num_ids": 424
    },
    {
        "number": 400,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)\n",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 420
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Check if the inputs are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must be of the same length.\")\n\n    # Initialize the result list with zeros\n    result_list = []\n\n    # Iterate over each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Initialize the result element with 0\n        result = 0\n\n        # Iterate over each element of the second tuple\n        for j in range(len(test_tup2)):\n            # If the corresponding elements match, add the corresponding elements to the result\n            if test_tup1[i] == test_tup2[j]:\n                result += test_tup1[i]\n            # If the corresponding elements do not match, add the corresponding elements to the result\n            else:\n                break\n\n        # Append the result element to the result list\n        result_list.append(result)\n\n    # Return the result list\n    return result_list",
        "test": "assert add_nested_tuples((1, 2, 3, 4), (5, 6, 7)) == (6, 8, 10)",
        "num_ids": 707
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(1,2) == 1 # True",
        "num_ids": 170
    },
    {
        "number": 405,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False",
        "test": "assert check_tuplex( (1,2,3,4,5), (6,2,3,4,5) ) == False",
        "num_ids": 319
    },
    {
        "number": 406,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    if x == 0:\n        return True\n    elif x % 2 == 0:\n        return find_Parity(x // 2)\n    else:\n        return find_Parity(x - 1)",
        "test": "assert find_Parity(3) == 1",
        "num_ids": 295
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n = n[::-1]  # Reverse the digits of the number\n    n = int(n)  # Convert the digits back to an integer\n    next_bigger = n + 1  # Add 1 to the next bigger number\n    return next_bigger\n",
        "test": "assert rearrange_bigger(987654321) == 123456789",
        "num_ids": 631
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # convert the list of numbers to a min heap\n    min_heap = []\n    for num in nums1 + nums2:\n        heapq.heappush(min_heap, num)\n\n    # extract k elements from the heap\n    pairs = []\n    for _ in range(k):\n        pair = heapq.heappop(min_heap)\n        pairs.append(pair)\n\n    return pairs",
        "test": "assert k_smallest_pairs([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 2) == [1, 2]",
        "num_ids": 1048
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples and returns the minimum product of the tuples.\n\n    :param list1: The list of tuples.\n    :return: The minimum product of the tuples.\n    '''\n\n    # Initialize the minimum product to be the first tuple in the list\n    min_product = list1[0]\n\n    # Loop through the list and find the minimum product of each pair of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            min_product = min(min_product, list1[i][0] * list1[j][1])\n\n    return min_product",
        "test": "assert min_product_tuple([1, 2, 3, 4, 6]) == (6, 60)",
        "num_ids": 671
    },
    {
        "number": 410,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return min(listval)",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 379
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Use regular expression to match any non-alphanumeric character or underscore in the word\n    pattern = re.compile('([A-Z][a-z]+)+')\n    # Use the match object to extract the first word\n    words = re.findall(pattern, word)\n    # Convert the first word to camel case using the re module\n    camel_case = words[0].title()\n    # Combine the first word with any subsequent words in the string using the 'and' operator\n    camel_case = camel_case.join(words[1:])\n    # Return the camel case string\n    return camel_case",
        "test": "assert snake_to_camel(\"Snake_Case\") == \"snakeCase\"",
        "num_ids": 466
    },
    {
        "number": 412,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list",
        "test": "assert remove_odd([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 331
    },
    {
        "number": 413,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extracts the nth element from a list of tuples.\n    '''\n    if n < 1 or n > len(list1):\n        raise ValueError(\"Invalid index. Index must be between 1 and the length of the list.\")\n    return list1[n - 1]",
        "test": "assert extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 3) == ('c', 3)",
        "num_ids": 556
    },
    {
        "number": 414,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3,4,5], [2,4,6,8,10]) == True",
        "num_ids": 262
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_Product(arr):\n    arr.sort()\n    max_product = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        max_product = max(max_product, arr[i] * arr[i-1])\n    return max_product\n",
        "test": "assert max_Product([1,2,3,4,5]) == 20",
        "num_ids": 383
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def group_tuples(Input):\n    # Convert the list of tuples to a dictionary with keys as the first elements of the tuples and values as lists of tuples\n    d = {}\n    for tup in Input:\n        d[tup[0]] = d.get(tup[0],[]) + [tup]\n    \n    # Find the first element of the list with the maximum count\n    max_count = 0\n    max_element = None\n    for key, value in d.items():\n        count = len(value)\n        if count > max_count:\n            max_count = count\n            max_element = key\n    \n    # Find the common elements between the first element and the max element\n    common_elements = []\n    for tup in Input:\n        if tup[0] == max_element:\n            common_elements.extend(tup)\n    \n    return common_elements",
        "test": "assert group_tuples([('apple', 'banana', 1), ('banana', 'apple', 2), ('orange', 'banana', 3)]) == ('banana', 2)",
        "num_ids": 701
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = lst[0]\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element",
        "test": "assert Find_Max([1,2,3,4,5]) == 5",
        "num_ids": 349
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    length = len(list1)\n    for num in list1:\n        num = round(num)\n        total_sum += num\n    print(\"The rounded list is:\", list1)\n    print(\"The total sum of the list is:\", total_sum)\n    print(\"The length of the list is:\", length)",
        "test": "assert round_and_sum([1, 2, 3, 4, 5]) == (30, 5), \"The function should round every number of the list and calculate the total sum.\"",
        "num_ids": 520
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1, 2):\n        result += i * i * i\n    return result",
        "test": "assert cube_Sum(1) == 1",
        "num_ids": 356
    },
    {
        "number": 421,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for item in test_tup:\n        result += item\n    return result",
        "test": "assert concatenate_tuple('test') == 'test'",
        "num_ids": 297
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n        \n    average = total/count\n    \n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1.0",
        "num_ids": 344
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return result",
        "test": "assert extract_rear(('a', 'b', 'c', 'd', 'e')) == ('e',)",
        "num_ids": 349
    },
    {
        "number": 425,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if sublist == x:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, 4, 5], 6) == 0",
        "num_ids": 369
    },
    {
        "number": 426,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert filter_oddnumbers([]) == []",
        "num_ids": 298
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_str = dt.strftime('%Y-%m-%d')\n    dt_str = re.sub(r'-+', '-', dt_str)\n    dt_str = re.sub(r'(\\d{2})-(\\d{2})-(\\d{4})', r'\\3-\\2-\\1', dt_str)\n    return dt_str",
        "test": "assert change_date_format('2022-09-21') == '21-09-22'",
        "num_ids": 560
    },
    {
        "number": 428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        # Traverse the array from gap to the end\n        for i in range(gap, n):\n            # Find the minimum element in unsorted part of array\n            min_index = i\n            for j in range(i, n):\n                if my_list[j] < my_list[min_index]:\n                    min_index = j\n            # Swap the found minimum element with the first element\n            my_list[i], my_list[min_index] = my_list[min_index], my_list[i]\n\n            # Increment the gap by 1/2 until gap is greater than 0\n            gap = int(gap / 2)\n\n        gap = n // 2  # reset gap for the next iteration\n\n    return my_list",
        "test": "assert shell_sort([5, 3, 1, 4, 2]) == [1, 2, 3, 4, 5]",
        "num_ids": 748
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n\n    Parameters:\n    - test_tup1: tuple of integers\n    - test_tup2: tuple of integers\n\n    Returns:\n    - result: tuple of tuples, each containing the elementwise and tuples from the input tuples.\n    '''\n\n    result = []\n\n    # Iterate through each tuple in test_tup1\n    for t1 in test_tup1:\n        # Iterate through each tuple in test_tup2\n        for t2 in test_tup2:\n            # If the two tuples have the same number of elements, append a tuple containing the elements and the tuples\n            if len(t1) == len(t2):\n                result.append((t1, t2))\n\n    return result",
        "test": "assert and_tuples(1, 2) == (1, 2) and and_tuples(2, 3) == (2, 3) and and_tuples(3, 4) == (3, 4) and and_tuples(1, 4) == (1, 4)",
        "num_ids": 685
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c):\n    directrix = ((b*b)-(4*a*c))/(2*a)\n    return directrix",
        "test": "assert parabola_directrix(3, 1, -2) == (1, -1, 2)",
        "num_ids": 472
    },
    {
        "number": 431,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1).intersection(list2)) > 0:\n        return True\n    else:\n        return False",
        "test": "assert common_element([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == True",
        "num_ids": 356
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 * base2) / 2\n    \n    # Calculate the length of the trapezium\n    length = (base1 + base2 + area) / 2\n    \n    # Calculate the median length\n    median = length * 0.5\n    \n    return median",
        "test": "assert median_trapezium(5, 10, 5) == 10",
        "num_ids": 650
    },
    {
        "number": 433,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3], 2) == True",
        "num_ids": 330
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba\\b'  # match one a followed by one or more b's\n    match = re.search(pattern, text)  # search for the first occurrence of the pattern in the string\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one(\"abababbb\") == False",
        "num_ids": 1312
    },
    {
        "number": 435,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 287
    },
    {
        "number": 436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]",
        "test": "assert neg_nos([1, 2, 3, 4, 5]) == [0, -1, -2, -3, -4]",
        "num_ids": 272
    },
    {
        "number": 437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the result\n    result = \"\"\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is odd\n        if char % 2!= 0:\n            # add the character to the result string\n            result += char\n    # return the result string\n    return result",
        "test": "assert remove_odd(\"hello123\") == \"hello123\"",
        "num_ids": 316
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 434
    },
    {
        "number": 439,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "test": "assert multiple_to_single([]) == 0",
        "num_ids": 314
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Find the first adverb and its position in the given sentence.\n\n    Returns:\n        a tuple of the form (position, adverb) or (None, None) if no adverb is found in the sentence\n    '''\n\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'[A-Z][a-z]*\\b(adverb|adverts|adverta|advertair|adverbial|advantage|advantages|advent|advents)\\b', text)\n\n    # If there are no adverbs, return (None, None)\n    if len(adverbs) == 0:\n        return (None, None)\n\n    # Find the first adverb\n    adverb = adverbs[0]\n\n    # Find its position in the sentence\n    positions = re.findall(r'([0-9]+)(?=[A-Z][a-z]*\\b(adverb|adverts|adverta|advertair|adverbial|advantage|advantages|advent|advents)\\b)', text)\n\n    # If there are no positions, return (None, None)\n    if len(positions) == 0:\n        return (None, None)\n\n    # Find the position of the first adverb\n    position = positions[0]\n\n    # Return the tuple of position and adverb\n    return (int(position), adverb)",
        "test": "assert find_adverb_position(\"The weather is great\") == (12, \"great\")",
        "num_ids": 1584
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l * l * l",
        "test": "assert surfacearea_cube(4) == 64",
        "num_ids": 251
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Count the number of positive integers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert positive_count([]) == 0",
        "num_ids": 395
    },
    {
        "number": 443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest",
        "test": "assert largest_neg([1, 2, 3, 4, 5]) == 5",
        "num_ids": 314
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n\n    result = []\n\n    for t in test_list:\n        if len(t) >= K:\n            result.append(t)\n\n    return result",
        "test": "assert trim_tuple([(1, 2, 3, 4, 5)], 2) == (1, 2, 3, 4, 5)",
        "num_ids": 325
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 438
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    return counter",
        "test": "assert count_Occurrence((1,2,3,4,5), [1,2,3,4,5]) == Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1})",
        "num_ids": 470
    },
    {
        "number": 447,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 289
    },
    {
        "number": 448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += 1/i\n    return sum",
        "test": "assert cal_sum(50) == 32231  # a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z",
        "num_ids": 389
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n\n    # Initialize empty list to store extracted strings\n    extracted_strings = []\n\n    # Iterate through the list of strings\n    for i in range(len(l)):\n        # Check if the length of the current string is less than or equal to the given size\n        if len(l[i]) <= l:\n            # Add the current string to the extracted strings list\n            extracted_strings.append(l[i])\n\n    # Return the extracted strings list\n    return extracted_strings\n",
        "test": "assert extract_string(\"hello world\", 5) == \"ell\"",
        "num_ids": 532
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1",
        "test": "assert remove_whitespaces(\"\") == \"\"",
        "num_ids": 248
    },
    {
        "number": 452,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount <= actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(100,50) == 50",
        "num_ids": 361
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            even_sum += i\n    return even_sum",
        "test": "assert sumofFactors(12) == 16 ",
        "num_ids": 405
    },
    {
        "number": 454,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Matches a word containing 'z' in a given text string.\n\n    Returns True if a match is found, False otherwise.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\b')\n    return bool(pattern.search(text))",
        "test": "assert text_match_wordz(\"hello world zzz\") == True",
        "num_ids": 278
    },
    {
        "number": 455,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(2) == False, \"The given month number should not contain 31 days\"",
        "num_ids": 388
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list(['hello', 'world', 'python']) == ['olleh', 'dlrow', 'nohtyp']",
        "num_ids": 372
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Find_Min(lst):\n    n = len(lst)\n    min_len = n\n    min_sublist = []\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist",
        "test": "assert Find_Min([1,2,3]) == [1,2,3]",
        "num_ids": 522
    },
    {
        "number": 458,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b",
        "test": "assert rectangle_area(5, 10) == 50",
        "num_ids": 192
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # regular expression to match uppercase characters\n    pattern = re.compile(r'[A-Z]')\n    # replace uppercase characters with an empty string\n    str2 = pattern.sub('', str1)\n    return str2",
        "test": "assert remove_uppercase(\"Hello\") == \"hll\"",
        "num_ids": 304
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n\n\nlst = [[1,2,3], [4,5,6], [7,8,9]]\nprint(Extract(lst))",
        "test": "assert Extract([]) == []",
        "num_ids": 297
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([char for char in str if char.isupper()])",
        "test": "assert upper_ctr(\"\") == 0",
        "num_ids": 210
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(i):\n            result.append((list1[j], list1[i-1-j]))\n    return result",
        "test": "assert combinations_list([1,2,3,4]) == [[1,2,3], [1,2,4], [1,3,4], [2,3,4]]",
        "num_ids": 1109
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    max_subarray_length = 0\n    max_subarray_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_subarray_product:\n            max_subarray_product = arr[i]\n            max_subarray_length = i+1\n    \n    return max_subarray_product, max_subarray_length",
        "test": "assert max_subarray_product([-2,-3,4,5,-4]) == 12",
        "num_ids": 554
    },
    {
        "number": 464,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.keys())!= len(set(dict.values())):\n        return False\n    else:\n        return True",
        "test": "assert check_value({}, 3) == True",
        "num_ids": 342
    },
    {
        "number": 465,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}",
        "test": "assert drop_empty({'a':1}) == {'a':1}",
        "num_ids": 279
    },
    {
        "number": 468,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_product(arr):\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product *= arr[i]\n    return max_product",
        "test": "assert max_product([1, 2, 3]) == 6, \"The function should return 6 for the given input array [1, 2, 3].\"",
        "num_ids": 604
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 3:\n        print(\"The list should have at least three elements\")\n        return None\n    \n    result = []\n    for i in range(1, len(test_tup)):\n        if i == len(test_tup) - 1:\n            result.append(test_tup[i])\n        else:\n            result.append(test_tup[i] + test_tup[i+1])\n    \n    return result",
        "test": "assert add_pairwise((1,2,3,4)) == (1, 3, 5, 2)",
        "num_ids": 465
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    product %= n\n    return product",
        "test": "assert find_remainder([], 1) == 0",
        "num_ids": 377
    },
    {
        "number": 472,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l):\n    if len(l) <= 1:\n        return False\n    \n    prev = l[0]\n    for num in l[1:]:\n        if num == prev + 1:\n            return True\n        prev = num\n        \n    return False",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True",
        "num_ids": 442
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1).intersection(test_list2))",
        "test": "assert tuple_intersection([1, 2, 3, 4], [1, 2, 3]) == (1, )",
        "num_ids": 511
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of a character in a string with another character.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello world\", \"l\", \"x\") == \"hallo world\"",
        "num_ids": 236
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict",
        "test": "assert sort_counter({'apple': 2, 'banana': 1, 'orange': 0.5, 'grape': 0.3}) == Counter({'apple': 2, 'banana': 1, 'grape': 0.3, 'orange': 0.5})",
        "num_ids": 393
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def big_sum(nums):\n    max_num = min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num + min_num",
        "test": "assert big_sum([-1, -2, -3, -4, -5]) == -10, \"big_sum([-1, -2, -3, -4, -5]) should return -10\"",
        "num_ids": 556
    },
    {
        "number": 477,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"hello\") == \"hello\"",
        "num_ids": 172
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string using regular expressions.\n    '''\n    pattern = re.compile(r'(?<!\\w)[a-z]+(?!\\w)')\n    return pattern.sub('', str1)",
        "test": "assert remove_lowercase(\"12345\") == \"12345\"",
        "num_ids": 274
    },
    {
        "number": 479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "",
        "test": "assert first_Digit(123) == 1",
        "num_ids": 218
    },
    {
        "number": 554,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for number in list: \n        if number % 2 == 1: \n            odd_numbers.append(number)\n    return odd_numbers ",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 242
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize variables\n    sum_cubes = 0\n    sum_numbers = 0\n    # Calculate sum of cubes of first n natural numbers\n    for i in range(1, n+1) :  \n        sum_cubes += i**3  \n    # Calculate sum of first n natural numbers\n    for i in range(1, n+1) :  \n        sum_numbers += i  \n    # Calculate difference between the two sums\n    difference = sum_cubes - sum_numbers  \n    # Return the difference\n    return difference\n",
        "test": "assert difference(10) == 55",
        "num_ids": 421
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Odd_Pair(A,N) : \n    count = 0\n    for i in range(1,N+1) : \n        xor = A[i] ^ A[i-1] \n        if xor%2!= 0 : \n            count += 1 \n    return count",
        "test": "assert find_Odd_Pair( [1,2,3,4,5], 3 ) == 3",
        "num_ids": 423
    },
    {
        "number": 557,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n\n    # initialize the result string to an empty string\n    result = ''\n\n    # loop through each character in the original string\n    for char in string:\n        # toggle the case of the current character using the isupper() method\n        # and the chr() function to convert the ASCII code of the character to a character\n        if char.isupper():\n            result += chr(ord(char) + 32) # add 32 to convert uppercase to lowercase\n        else:\n            result += char\n\n    # return the toggled string\n    return result",
        "test": "assert toggle_string('Python Programming') == 'pYNtHONpYTHING sTRIng'",
        "num_ids": 414
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Calculate the per-digit difference between two integers using only digits.\n    \n    Parameters:\n    n1 (int): First integer to find the per-digit difference for.\n    n2 (int): Second integer to find the per-digit difference for.\n    \n    Returns:\n    int: The per-digit difference between the two integers.\n    '''\n\n    # Convert both numbers to strings, and then count the number of differences between each pair of digits\n    differences = [abs(int(n1[i]) - int(n2[i])) for i in range(max(len(n1), len(n2)))]\n\n    # Return the sum of the differences\n    return sum(differences)",
        "test": "assert digit_distance_nums(777, 999) == 2",
        "num_ids": 587
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size == 1:\n        return a[0]\n\n    # Initialize the max subarray sum and its start index\n    max_sum = float('-inf')\n    max_start = 0\n\n    # Calculate the sum of each subarray\n    subarray_sum = sum(a[i:i+size])\n\n    # Loop through the remaining elements in the list\n    for i in range(size):\n        # Update the max subarray sum and its start index\n        subarray_sum += a[i]\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n            max_start = i\n\n        # Update the sum of the current subarray\n        subarray_sum = sum(a[i:i+size])\n\n    # Return the max subarray sum\n    return max_sum",
        "test": "assert max_sub_array_sum([1], 1) == 1",
        "num_ids": 592
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # create a set from the given tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # union the sets and convert to a list for sorted output\n    union_set = set1.union(set2)\n    union_list = sorted(list(union_set))\n    \n    return union_list",
        "test": "assert union_elements((), (1, 2, 3)) == sorted((1, 2, 3))",
        "num_ids": 540
    },
    {
        "number": 562,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length",
        "test": "assert Find_Max_Length([1,2,3,4,5]) == 5",
        "num_ids": 422
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n\n    :param text: The input string.\n    :return: A list of values extracted from the input string.\n    '''\n\n    # Define the pattern for finding values between quotation marks\n    pattern = r'\"([^\"]+)\"'\n\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return the list of values\n    return matches",
        "test": "assert extract_values('Hello, world! \"The quick brown fox\" goes to the moon.') == ('Hello, world! \"The quick brown fox\" goes to the moon.',)",
        "num_ids": 506
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_Pairs(arr, n):\n    pairs_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs_count += 1\n    return pairs_count",
        "test": "assert count_Pairs([1,2,3,4,5], 3) == 4",
        "num_ids": 423
    },
    {
        "number": 565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()",
        "test": "assert split(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]",
        "num_ids": 250
    },
    {
        "number": 566,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_of_digits = 0\n    while n > 0:\n        digit = n % 10\n        sum_of_digits += digit\n        n //= 10\n    return sum_of_digits",
        "test": "assert sum_digits(123) == 6 # sum of the digits is 6",
        "num_ids": 339
    },
    {
        "number": 567,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def issort_list(lst):\n    '''\n    Function to check whether a list is sorted or not.\n    '''\n    if len(lst) == 1:\n        return True\n\n    # Traverse through each element of the list\n    for i in range(1, len(lst)):\n\n        # If the current element is greater than the next element,\n        # then the list is not sorted\n        if lst[i] > lst[i - 1]:\n            return False\n\n    # If we reach here, then the list is sorted\n    return True\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == False",
        "num_ids": 542
    },
    {
        "number": 568,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 189
    },
    {
        "number": 569,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        sublist = list1[i]\n        sublists.append(sublist)\n    \n    # Sort each sublist\n    for i in range(len(sublists)):\n        for j in range(i+1, len(sublists)):\n            if len(sublists[i]) > len(sublists[j]):\n                sublists[i], sublists[j] = sublists[j], sublists[i]\n    \n    return sublists",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['date', 'elderberry', 'fig'], ['grape', 'honeydew', 'ice'], ['kiwi', 'lemon','mango']]) == [['apple', 'banana', 'cherry'], ['date', 'elderberry', 'fig'], ['grape', 'honeydew', 'ice'], ['kiwi', 'lemon','mango']]",
        "num_ids": 531
    },
    {
        "number": 572,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    return list(unique_nums)",
        "test": "assert two_unique_nums([1, 2, 3, 2, 4]) == [1, 2, 3, 4]",
        "num_ids": 533
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create an empty set to store unique numbers\n    unique_numbers = set()\n\n    # iterate through the list and add unique numbers to set\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.add(num)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 418
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = (4/3)*3.14159*r**2*h\n    return s",
        "test": "assert surfacearea_cylinder(2,3) == 6.28319",
        "num_ids": 299
    },
    {
        "number": 576,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a Python function to check whether a list is sublist of another or not.\n\n    Args:\n        A (list): List to be checked for sublist.\n        B (list): List to be checked for sublist.\n\n    Returns:\n        bool: True if A is a sublist of B, False otherwise.\n    \"\"\"\n    # Check if list B is empty\n    if len(B) == 0:\n        return True\n\n    # Check if list A has any common elements with list B\n    common = set(A).intersection(B)\n\n    # If list A and list B have any common elements, then A is a sublist of B\n    if len(common) > 0:\n        return True\n\n    # If list A has no common elements with list B, then A is not a sublist of B\n    return False",
        "test": "assert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5]) == True",
        "num_ids": 567
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    last_digit = 0\n    \n    while factorial < n:\n        factorial *= 10\n        last_digit += 1\n    \n    return last_digit",
        "test": "assert last_Digit_Factorial(12345) == 5, \"The last digit of the factorial of 12345 is 5.\"",
        "num_ids": 481
    },
    {
        "number": 578,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def interleave_lists(*args):\n    flat_list = []\n    for lst in args:\n        for item in lst:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert interleave_lists([],[],[]) == []",
        "num_ids": 516
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for tup in test_tup1:\n        if tup not in test_tup2:\n            dissimilar.append(tup)\n    for tup in test_tup2:\n        if tup not in test_tup1:\n            dissimilar.append(tup)\n    return dissimilar",
        "test": "assert find_dissimilar((1,2,3), (1,2,3)) == []",
        "num_ids": 452
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Define a function to check if an element is even\n    def is_even(x):\n        return x % 2 == 0\n    \n    # Define a function to remove uneven elements from the tuple\n    def remove_uneven(nested_tuple):\n        return [elem for elem in nested_tuple if not is_even(elem)]\n    \n    # Check if the nested tuple is empty\n    if len(test_tuple) <= 1:\n        return test_tuple\n    \n    # Get the first element of the tuple\n    first_elem = test_tuple[0]\n    \n    # Check if the first element is even\n    if is_even(first_elem):\n        # Remove the first element and the first element's nested tuple\n        return remove_uneven(test_tuple[1:])\n    \n    # If the first element is odd, return the tuple without the first element\n    else:\n        return test_tuple[1:]",
        "test": "assert even_ele((1, (2, (3, (4, (5, 6)))))), \"Test 1: Input tuple is not a nested mixed tuple\"",
        "num_ids": 937
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s",
        "test": "assert surface_Area(3,4) == 24, \"surface_Area(3,4) failed\"",
        "num_ids": 292
    },
    {
        "number": 582,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 162
    },
    {
        "number": 583,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth Catalan number.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Number must be a non-negative integer.\")\n\n    catalan = 1\n    for i in range(2, num + 1):\n        catalan *= (i - 1) / i\n\n    return catalan",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 277
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'\\bly\\b')\n    matches = pattern.finditer(text)\n    for match in matches:\n        return match.start()",
        "test": "assert find_adverbs(\"I think that the time will come when all the people who love me will have a baby.\") == (21, \"ly\")",
        "num_ids": 526
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n\n    Parameters:\n    items: list of tuples, where each tuple contains an item and its price\n    n: int, number of items to consider for the most expensive items.\n\n    Returns:\n    list of tuples, where each tuple contains an item and its price.\n    '''\n\n    # Convert the items list to a min-heap to maintain the order of items\n    min_heap = [(item, price) for item, price in items]\n    heapq.heapify(min_heap)\n\n    # Initialize an empty list to store the n most expensive items\n    most_expensive = []\n\n    # Iterate through the min-heap until the n items have been considered\n    while len(most_expensive) < n:\n        # Get the current item from the heap\n        current_item, current_price = heapq.heappop(min_heap)\n\n        # Add the current item and its price to the most expensive list\n        most_expensive.append((current_item, current_price))\n\n    # Return the most expensive items list\n    return most_expensive",
        "test": "assert expensive_items([('apple', 4), ('banana', 2), ('orange', 1)], 2) == [('apple', 4), ('orange', 1)]",
        "num_ids": 634
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    elif n >= 1:\n        return [l[0]] + split_Arr(l[1:], n-1)",
        "test": "assert split_Arr([], 2) == []",
        "num_ids": 410
    },
    {
        "number": 587,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def list_tuple(lst):\n    '''\n    Function to convert a list to a tuple.\n    '''\n    return tuple(lst)",
        "test": "assert list_tuple([]) == ()",
        "num_ids": 174
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # find the difference between the largest and smallest values\n    diff = max_val - min_val\n    \n    return diff",
        "test": "assert big_diff([1,2,3,4,5]) == 4",
        "num_ids": 358
    },
    {
        "number": 589,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    for i in range(a, b+1):\n        if i*i == i:\n            count += 1\n            print(i)\n    return count\n\nprint(perfect_squares(1, 10)) # Output: 25, 36, 49, 64, 81, 100",
        "test": "assert perfect_squares(1, 1) == 1",
        "num_ids": 430
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.atan2(y, x)\n    return r, theta",
        "test": "assert polar_rect(3,4) == (3,2)",
        "num_ids": 388
    },
    {
        "number": 591,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Check if the list has only one element\n    if len(newList) == 1:\n        return newList\n\n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 414
    },
    {
        "number": 592,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 0\n    elif k == 1:\n        return 1\n    else:\n        coeff = 1\n        prev_coeff = 1\n        for i in range(2, n+1):\n            coeff *= i\n            if i >= k:\n                coeff -= prev_coeff\n                prev_coeff = coeff / i\n        return coeff",
        "test": "assert binomial_Coeff(5, 1) == 1",
        "num_ids": 636
    },
    {
        "number": 593,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # get rid of leading zeros\n    ip = re.sub(r'^0+', '', ip)\n    return ip",
        "test": "assert removezero_ip('192.168.0.1') == '192.168.0.1'",
        "num_ids": 451
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Initialize variables to store the count of even and odd numbers in the list\n    count_even = 0\n    count_odd = 0\n\n    # Loop through each element of the list\n    for element in list1:\n\n        # If the element is even, increment the count of even numbers\n        if element % 2 == 0:\n            count_even += 1\n\n        # If the element is odd, increment the count of odd numbers\n        else:\n            count_odd += 1\n\n    # Return the difference of the two counts\n    return count_odd - count_even",
        "test": "assert diff_even_odd([]) == 0",
        "num_ids": 615
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_Swaps(str1,str2) : \n    # Count the number of swaps required to convert string1 to string2\n    swaps = 0 \n    # Loop through each character in string1\n    for i in range(len(str1)): \n        # If the character in string1 is not equal to the character in string2, increment swaps\n        if str1[i]!= str2[i]: \n            swaps += 1 \n    # Return the minimum number of swaps required to convert string1 to string2\n    return swaps ",
        "test": "assert min_Swaps(\"1001\", \"1010\") == 2",
        "num_ids": 676
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size",
        "test": "assert tuple_size(tuple_list=(1, 2, 3)) == 8 ",
        "num_ids": 337
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1.sort()\n    arr2.sort()\n\n    if k == 1:\n        return arr1[0]\n    elif k == 2:\n        return arr2[0]\n    else:\n        return arr1[k-1] + arr2[k-2]",
        "test": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5) == 6",
        "num_ids": 615
    },
    {
        "number": 598,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    This function checks whether the given number is armstrong or not.\n    '''\n    # Create a string of the given number\n    num_str = str(number)\n    \n    # Convert the string to int and then to str again to remove the sign\n    num_str = str(int(num_str))\n    \n    # Initialize the variable to hold the sum\n    sum = 0\n    \n    # Loop through each digit of the number\n    for digit in num_str:\n        # Convert the digit to int and add it to the sum\n        sum += int(digit)\n        \n    # Compare the sum of digits with the original number\n    if sum == number:\n        # The number is armstrong\n        return True\n    else:\n        # The number is not armstrong\n        return False",
        "test": "assert armstrong_number(123456789) == False",
        "num_ids": 462
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # initialize variables for sum and average\n    sum = 0\n    count = 0\n\n    # iterate over the given number of natural numbers and add them to sum\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n\n    # calculate average by dividing sum by count\n    average = sum / count\n\n    # return the sum and average of the first n natural numbers\n    return sum, average",
        "test": "assert sum_average(2) == 3",
        "num_ids": 368
    },
    {
        "number": 600,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 220
    },
    {
        "number": 602,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store the frequency of each character\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # loop through the dictionary and find the first character that has a count of 2 or more\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # if no character has a count of 2 or more, return None\n    return None",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 519
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        lucid_numbers.append(i)\n        if i % 2 == 0:\n            lucid_numbers.append(i * i)\n    return lucid_numbers",
        "test": "assert get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 529
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def reverse_words(s):\n    words = s.split()  # Split the string into a list of words\n    reversed_words = []  # Create an empty list to store the reversed words\n    for word in words[::-1]:  # Reverse the order of the words\n        reversed_words.append(word)\n    return''.join(reversed_words)  # Join the reversed words back into a string and return it\n",
        "test": "assert reverse_words(\"the quick brown fox jumps over the lazy dog\") == \"lazy dog jumps over the over fox brown the quick\"",
        "num_ids": 340
    },
    {
        "number": 605,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is 1 or less\n    if num <= 1:\n        return False\n\n    # Check if the number is 2 or less\n    elif num == 2:\n        return True\n\n    # Check if the number is odd\n    else:\n        # Check if the number is divisible by any number between 2 and the square root of the number\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        # If the number is not divisible by any number, it is a prime number\n        return True",
        "test": "assert prime_num(2) == True, \"The number 2 is not prime.\"",
        "num_ids": 432
    },
    {
        "number": 606,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)",
        "test": "assert radian_degree(0) == 0.0",
        "num_ids": 259
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npattern = r\"the|quick|brown|fox|jumps\"\nresult = find_literals(text, pattern)\nif result:\n    print(f\"Match found at index {result[1]}: {text[result[1]:result[2]]}\")\nelse:\n    print(\"Match not found\")",
        "test": "assert find_literals(\"Hello World!\", r\"world\") == (None, None, None)",
        "num_ids": 569
    },
    {
        "number": 608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n * (bell_Number(n-1) + bell_Number(n-2))\n    else:\n        return (n-1) * (bell_Number(n-1) + bell_Number(n-2))\n\nprint(bell_Number(10)) # Output: 31",
        "test": "assert bell_Number(2) == 7 # the second bell number is 7",
        "num_ids": 407
    },
    {
        "number": 610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Sort the list in descending order\n    list1.sort(reverse=True)\n    # Return a new list without the k'th element\n    return list1[L-1:]",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 3, 4]",
        "num_ids": 492
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if N < 1 or N > len(test_list[0]):\n        raise ValueError(\"N should be a positive integer less than or equal to the number of columns in the matrix.\")\n    max_value = test_list[0][-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6]], 2) == 5",
        "num_ids": 629
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) == 2:\n            result.append([sublist[0], sublist[1]])\n        else:\n            result.append(sublist)\n    return result",
        "test": "assert merge([[1,2],[3,4]]) == [[1, 2], [3, 4]]",
        "num_ids": 385
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in test_list:\n        total += i\n    return total",
        "test": "assert cummulative_sum([1,2,3,4,5]) == [1,3,6,10,15]",
        "num_ids": 362
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n\n    # Initialize an empty list to store the average values for each tuple\n    averages = []\n\n    # Iterate over each tuple in the input tuple\n    for num_tuple in nums:\n        # Initialize an empty list to store the values of the tuple\n        values = []\n\n        # Iterate over each value in the tuple\n        for num in num_tuple:\n            # Add the value to the list of values\n            values.append(num)\n\n        # Calculate and append the average value to the list of average values\n        average = sum(values) / len(values)\n        averages.append(average)\n\n    # Return the list of average values for each tuple\n    return averages",
        "test": "assert average_tuple((1,2,3),()) == [(1+2+3)/3]",
        "num_ids": 683
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # initialize the tuple of zeros\n    mod_tup = tuple([0] * len(test_tup1))\n\n    # perform element wise modulo\n    for i in range(len(test_tup1)):\n        mod_tup[i] = (test_tup1[i] % test_tup2[i])\n\n    return mod_tup\n",
        "test": "assert tuple_modulo((1,2,3,4,5), (6,7,8,9,10)) == (1, 3, 5, 7, 9)",
        "num_ids": 435
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d):\n    n = 0\n    jumps = 0\n    for i in range(steps):\n        n += 1\n        if d - i >= 0:\n            jumps += 1\n    return jumps",
        "test": "assert min_Jumps(5, 3) == 4, \"The function should return 4 for length 5 and distance 3\"",
        "num_ids": 514
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def div_list(nums1, nums2):\n    result = []\n    for i in range(len(nums1)):\n        if len(nums2) == 0:\n            return \"Empty list\"\n        else:\n            result.append(nums1[i] / nums2[0])\n            nums2 = nums2[1:]\n    return result",
        "test": "assert div_list([1,2,3,4,5], [1,2,3,4,5]) == [1,1,1,1,1]",
        "num_ids": 387
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of numbers\n    numbers = list(map(int, test_str.split()))\n    \n    # Reverse the list\n    numbers.reverse()\n    \n    # Join the numbers back into a string\n    result = ''.join(map(str, numbers))\n    \n    return result\n",
        "test": "assert move_num(\"\") == \"\"",
        "num_ids": 410
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def largest_subset(a):\n    # Create a set to store the numbers in the list\n    nums = set(a)\n\n    # Initialize variables to keep track of the largest subset and its size\n    largest = nums\n    largest_size = len(nums)\n\n    # Iterate over all pairs in the list\n    for num in a:\n        # If the number is in the set, add it to the set of numbers in the largest subset\n        if num in nums:\n            nums.remove(num)\n            # If the current largest subset is smaller, update it\n            if len(nums) > len(largest):\n                largest = nums\n                largest_size = len(nums)\n\n    # If the largest subset has fewer than two elements, it must be a single element subset\n    if len(largest) < 2:\n        return 1\n\n    # Return the size of the largest subset\n    return largest_size",
        "test": "assert largest_subset([2, 2, 3, 4, 5]) == 1 # the largest subset of [2, 2, 3, 4, 5] is {2}",
        "num_ids": 783
    },
    {
        "number": 622,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # find the midpoint of arr1 and arr2\n    mid = n // 2\n\n    # check if arr1 has more elements than arr2\n    if len(arr1) > len(arr2):\n        # if so, return the element at the midpoint of arr1\n        return arr1[mid]\n\n    # if not, return the element at the midpoint of arr2\n    return arr2[mid]\n",
        "test": "assert get_median([1], [1], 1) == 1, \"get_median([1], [1], 1) should return 1 for a list with only one element.\"",
        "num_ids": 747
    },
    {
        "number": 623,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the nth power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3,4,5],3) == [1,8,27,64,125] # nth_nums(nums, n)",
        "num_ids": 406
    },
    {
        "number": 624,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if it is in uppercase, otherwise, it returns False.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False",
        "test": "assert is_upper(\"HELLO WORLD\") == True",
        "num_ids": 177
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # get the length of the list\n    length = len(newList)\n\n    # if the list has only one element, return it\n    if length <= 1:\n        return newList\n\n    # get the first and last elements of the list\n    first_elem = newList[0]\n    last_elem = newList[length-1]\n\n    # swap the first and last elements of the list\n    newList[0] = last_elem\n    newList[length-1] = first_elem\n\n    # return the modified list\n    return newList",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 445
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef triangle_area(r):\n    area = math.pi * r * r\n    return area",
        "test": "assert triangle_area(2) == 1.0",
        "num_ids": 313
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end == None:\n        end = len(array) - 1\n    # Initialize a dictionary to store the count of each number in the array\n    count = {}\n    for i in range(start,end+1):\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    # Find the number of missing numbers in the array\n    missing_numbers = end\n    while missing_numbers in count:\n        missing_numbers += 1\n    return missing_numbers",
        "test": "assert find_First_Missing([1,2,3,4,5,6],start=1) == 1 # [1,2,3,4,5,6] has 1 missing number, but 1 is the only number in the list.",
        "num_ids": 485
    },
    {
        "number": 628,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces('Hello World') == 'Hello%20World'",
        "num_ids": 204
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Split(lst):\n    '''\n    Takes a list of numbers as input and returns a new list with even numbers.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven_numbers = Split(lst)\nprint(even_numbers)",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 421
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n        return sub\n    else:\n        sub.append(ele)\n        adj = [sub[0][0]-1, sub[0][1], sub[0][0]+1, sub[0][1], sub[0][0], sub[0][1]-1, sub[0][0], sub[0][1]+1]\n        return adj",
        "test": "assert adjac((1, 2)) == [(1, 2)]",
        "num_ids": 598
    },
    {
        "number": 631,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the text into a list of words\n    words = text.split()\n    # Join the words back into a string with underscores\n    result = '_'.join(words)\n    # Return the modified string\n    return result",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 285
    },
    {
        "number": 632,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0) # adding 0 to the end of the list\n\n    return num_list",
        "test": "assert move_zero([1, 0, 0, 0, 0]) == [1, 0, 0, 0, 0]",
        "num_ids": 496
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize a variable to store the xor of all pairs\n    xor_sum = 0\n\n    # Traverse through all pairs of numbers in the given list\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # Calculate the xor of the two numbers\n            xor = arr[i] ^ arr[j]\n            \n            # Add the xor to the sum variable\n            xor_sum += xor\n\n    # Return the xor of all pairs in the list\n    return xor_sum\n",
        "test": "assert pair_xor_Sum([1,2,3,4,5], 4) == 24 # correct result",
        "num_ids": 520
    },
    {
        "number": 635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a max heap\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n\n    # Extract elements from the heap and return them in reverse order\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result",
        "test": "assert heap_sort([5,3,1,9,8,7,6]) == [1,3,5,6,7,8,9]",
        "num_ids": 610
    },
    {
        "number": 637,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit and loss of the sale\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    # Check if the profit is greater than or equal to the loss\n    if profit >= loss:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(1000, 1500) == False # correct answer: loss",
        "num_ids": 367
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature\n    temp = (t - 32) * (9/5) + 32\n\n    # Calculate the wind chill index\n    wind_chill_index = round(9 * (v/0.621371) * (temp - 273.15) * (temp - 273.15))\n\n    # Return the wind chill index rounded to the next integer\n    return wind_chill_index",
        "test": "assert wind_chill(25, 30) == 12",
        "num_ids": 543
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create a new list that will contain the names that start with a lowercase letter\n    result = []\n    for name in sample_names:\n        if name[0].islower():\n            result.append(name)\n    # return the length of the new list\n    return len(result)\n",
        "test": "assert sample_nam([\"apple\", \"banana\", \"cherry\", \"apple\", \"orange\"]) == 4",
        "num_ids": 455
    },
    {
        "number": 640,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(|\\)|\\[|\\]|[^a-zA-Z0-9 ]+')\n    return pattern.sub('', items)\n\nitems = \"Hello (World) Python!\"\nprint(remove_parenthesis(items)) # Output: \"Hello World Python\"",
        "test": "assert remove_parenthesis('this is a string with (parenthesis) in it') == 'this is a string with parenthesis in it'",
        "num_ids": 440
    },
    {
        "number": 641,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    count = 0\n    a = 1\n    while a**2 <= n:\n        count += 1\n        a += 1\n    return n - count",
        "test": "assert is_nonagonal(2) == 1",
        "num_ids": 246
    },
    {
        "number": 643,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Remove any leading or trailing whitespace from the text\n    text = text.strip()\n    \n    # Split the text into individual words\n    words = text.split()\n    \n    # Check if the first word contains 'z'\n    if words[0] in ['z', 'Z']:\n        # If so, check if the middle word contains 'z'\n        if words[1] in ['z', 'Z']:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert text_match_wordz_middle(\"hello, world!\") == False",
        "num_ids": 570
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # create an empty list to store the reversed elements\n    reversed_list = []\n    \n    # loop through the input array from left to right\n    for i in range(len(input)-1, -1, -1):\n        # check if i is equal to k\n        if i == k:\n            break\n        # append the element to the reversed list\n        reversed_list.append(input[i])\n    \n    # return the reversed list\n    return reversed_list",
        "test": "assert reverse_Array_Upto_K([], 0) == []",
        "num_ids": 660
    },
    {
        "number": 720,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a tuple of the dictionaries\n    tuples_list = []\n    for key, value in test_dict.items():\n        tuples_list.append((key, value))\n    # Combine the key-value pairs of the dictionaries into a tuple\n    result = tuple(tuples_list)\n    # Return the result tuple\n    return result",
        "test": "assert add_dict_to_tuple(tuple(), {}) == ()",
        "num_ids": 343
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Convert the list of lists to a 2D array\n    cost_matrix = [[0 for j in range(N)] for i in range(N)]\n    for i in range(N):\n        for j in range(N):\n            cost_matrix[i][j] = cost[i][j]\n\n    # Create a helper function to calculate the sum of the cost of a given path\n    def pathSum(path, cost_matrix, i, j):\n        if len(path) == 0:\n            return 0\n        sum_cost = 0\n        for k in range(len(path)-1):\n            sum_cost += cost_matrix[path[k]][path[k+1]]\n        return sum_cost\n\n    # Create a helper function to calculate the average of the cost of a given path\n    def pathAverage(path, cost_matrix, i, j):\n        if len(path) == 0:\n            return 0\n        sum_cost = 0\n        for k in range(len(path)-1):\n            sum_cost += cost_matrix[path[k]][path[k+1]]\n        return sum_cost / len(path)\n\n    # Create a helper function to find the maximum average of all paths\n    def findMaxAverage(cost_matrix, i, j):\n        max_sum = -float('inf')\n        max_path = []\n        for k in range(N):\n            for l in range(N):\n                if k == i and l == j:\n                    continue\n                path = [k, l]\n                sum_cost = pathSum(path, cost_matrix, i, j)\n                average_cost = pathAverage(path, cost_matrix, i, j)\n                if sum_cost > max_sum:\n                    max_sum = sum_cost\n                    max_path = path\n        return max_sum, max_path\n\n    # Find the maximum average of all paths\n    max_sum, max_path = findMaxAverage(cost_matrix, 0, 0)\n    return max_sum/len(max_path)\n",
        "test": "assert maxAverageOfPath([[1, 1, 1],[1, 1, 1],[1, 1, 1]]) == 2.5",
        "num_ids": 1333
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students = []\n    \n    for name, student in students.items():\n        if student[0] > h or student[1] > w:\n            filtered_students.append(name)\n    \n    return filtered_students",
        "test": "assert filter_data({\"John\": (185, 70), \"Bob\": (175, 80), \"Mike\": (160, 90)}, 160, 90) == [{\"John\": (185, 70)}, {\"Bob\": (175, 80)}, {\"Mike\": (160, 90)}]",
        "num_ids": 870
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_count += 1\n    return same_count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) == ([0, 1, 2], [1, 2, 3, 4, 5])",
        "num_ids": 477
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        if power % 10 == 0:\n            result += 1\n        power //= 10\n    return base * result",
        "test": "assert power_base_sum(10, 2) == 100",
        "num_ids": 456
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Use regular expression to find all the quotation marks\n    quotation_marks = re.findall(r'\"', text1)\n\n    # If there are no quotation marks, return an empty list\n    if len(quotation_marks) == 0:\n        return []\n\n    # Create an empty list to store the values between quotation marks\n    values = []\n\n    # Iterate through each quotation mark and extract the values between them\n    for mark in quotation_marks:\n        # Remove the quotation marks from the original text\n        text2 = text1.replace(mark, '').strip()\n        # Use regular expression to find all the values between quotation marks\n        values.extend(re.findall(r'[^\\s\"]+', text2))\n\n    # Return the list of values between quotation marks\n    return values",
        "test": "assert extract_quotation(\"This is a test string with multiple 'quotation marks' inside.\") == \"This is a test string with multiple 'quotation marks' inside.\"",
        "num_ids": 527
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple(test_tup[0] * test_tup[i+1] for i in range(N))\n    return result_tup",
        "test": "assert multiply_elements((1, 2, 3)) == (1, 2, 6)",
        "num_ids": 493
    },
    {
        "number": 728,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n\n    # iterate over the elements of the lists and add them up\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n\n    return result\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 500
    },
    {
        "number": 730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_nums = set(nums)\n    # group the unique numbers into lists of consecutive duplicates\n    consecutive_groups = [list(group) for key, group in groupby(unique_nums)]\n    # return the final list of consecutive duplicates\n    return consecutive_groups\n",
        "test": "assert consecutive_duplicates([1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 413
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # calculate the semi-perimeter\n    s = r + h\n    \n    # calculate the area of the cylinder\n    area = math.pi * r**2 * h\n    \n    # calculate the lateral surface area\n    lateral_area = (1/2) * math.pi * r**2 * h\n    \n    return area, lateral_area",
        "test": "assert lateralsurface_cone(3,2) == 20",
        "num_ids": 354
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the patterns to match the special characters\n    patterns = re.compile('(\\s+),|\\.\\.')\n    # Replace all occurrences of the patterns with a colon\n    return re.sub(patterns, ':', text)",
        "test": "assert replace_specialchar(\"The quick brown fox jumps over the lazy dog.\") == \"The: quick brown: fox: jumps over the: lazy dog.\"",
        "num_ids": 344
    },
    {
        "number": 733,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1  # x not found in A\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 6) == -1",
        "num_ids": 538
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0]*sum_Of_Subarray_Prod(arr[1:])",
        "test": "assert sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 120",
        "num_ids": 857
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def set_middle_bits(n):  \n    # Define the mask to toggle the bits\n    mask = 1 << 2  \n    \n    # Toggle the first and last bits\n    n &= ~(mask - 1)\n    \n    return n",
        "test": "assert set_middle_bits(5) == 4",
        "num_ids": 484
    },
    {
        "number": 736,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo, hi = 0, len(a) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 5) == 2",
        "num_ids": 534
    },
    {
        "number": 737,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # Define regex pattern to check whether the string starts with a vowel or not\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    \n    # Use re.match() function to check if the string starts with a vowel\n    match = re.match(regex, string)\n    \n    # Check if the match is found or not\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_str('WORLD') == False",
        "num_ids": 362
    },
    {
        "number": 738,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 0:\n        return 1\n\n    return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(4) == 24, \"The correct sum of 4 is 24, but it is \" + str(geometric_sum(4)) + \".\"",
        "num_ids": 300
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # initialize variables\n    i = 1\n    j = 1\n    s = 0\n    \n    # iterate through the digits from right to left\n    while i <= n:\n        # calculate the sum of the right digits\n        r = sum([int(digit) for digit in str(i)])\n        \n        # check if the sum is less than or equal to the remaining triangular number\n        if r <= s:\n            # update the minimum index\n            j = i\n            s = r\n        \n        # increment i and check if the sum is less than or equal to the remaining triangular number\n        i += 1\n        if r <= s:\n            # update the minimum index\n            j = i\n            s = r\n        \n        # decrement i and check if the sum is less than or equal to the remaining triangular number\n        i -= 1\n        if r <= s:\n            # update the minimum index\n            j = i\n            s = r\n    \n    return j",
        "test": "assert find_Index(5) == 4  # Test case 2",
        "num_ids": 621
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(len(test_tup) - 1):\n        if i!= 0 and i!= len(test_tup) - 1:\n            key = test_tup[i] + test_tup[i+1]\n        else:\n            key = test_tup[i]\n        result[key] = test_tup[i+1]\n    return result",
        "test": "assert tuple_to_dict(('a', 'b', 'c', 'd', 'e')) == {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e'}",
        "num_ids": 676
    },
    {
        "number": 741,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if s.isalpha():\n        return True\n    else:\n        return False",
        "test": "assert all_Characters_Same('abc') == True",
        "num_ids": 352
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1.0 / 6) * math.sqrt(3) * side**3",
        "test": "assert area_tetrahedron(4) == 12.0",
        "num_ids": 288
    },
    {
        "number": 743,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    '''\n    Rotate a given list to the right by specified number of items.\n    '''\n    # Calculate number of items to rotate by\n    n = m % len(list)\n\n    # Rotate the list to the right by n items\n    list.append(list.pop(0))\n    for i in range(n - 1):\n        list.append(list.pop(0))\n\n    return list",
        "test": "assert rotate_right([1], 1) == [1]",
        "num_ids": 485
    },
    {
        "number": 744,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Check if the given tuple has any none value.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3, None, 4, 5)) == True",
        "num_ids": 233
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n\n    def is_divisible_by_digit(num):\n        return any(num % digit == 0 for digit in str(num))\n\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digit(num)]",
        "test": "assert divisible_by_digits(100, 900) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 758
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2\n        return area",
        "test": "assert sector_area(10, 0) == 10",
        "num_ids": 330
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    L = [[0 for j in range(n+1)] for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if L[i][j] == p:\n                print(\"Longest common subsequence of length\", L[i][j], \"is\", X[i-L[i][j]:i], Y[j-L[i][j]:j])\n    return L[m][n]",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"VZWXCAY\") == \"GXTXAYB\" # Correct lcs for all three strings",
        "num_ids": 979
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n\n    Parameters:\n    - str1 (str): A string to be processed.\n\n    Returns:\n    - str: The modified string with spaces between words starting with capital letters.\n\n    '''\n\n    # Define a regular expression pattern to match words starting with capital letters\n    pattern = re.compile(r'[A-Z][a-z]*')\n\n    # Use the pattern to find all matches in the string\n    matches = pattern.findall(str1)\n\n    # Define the default spaces between words\n    spaces ='' * (len(matches) + 1)\n\n    # Replace the matches with the default spaces and return the modified string\n    str2 = spaces.join(matches)\n\n    return str2",
        "test": "assert capital_words_spaces(\"The quick brown fox jumps over the lazy dog\") == \"The Quick Brown Fox Jumps Over The Lazy Dog\"",
        "num_ids": 522
    },
    {
        "number": 749,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    # Convert all the strings in the list to integers\n    nums_int = [int(num) for num in nums_str]\n\n    # Sort the integers in ascending order\n    nums_int.sort()\n\n    # Convert the sorted integers back to strings and return them\n    return [str(num) for num in nums_int]",
        "test": "assert sort_numeric_strings(['4', '2', '3', '1', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 634
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "test": "assert add_tuple([1,2,3],[4,5,6]) == [5, 7, 9]",
        "num_ids": 280
    },
    {
        "number": 751,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    left = 2 * i\n    right = 2 * i + 1\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return check_min_heap_helper(arr, left)\n    return True",
        "test": "assert check_min_heap_helper([1, 3, 4, 6, 5], 0) == True",
        "num_ids": 630
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Check for negative input\n        if n < 0:\n            n = abs(n)\n            n += 1\n\n        # Initialize variables\n        prev_num = 0\n        current_num = 1\n        next_num = 2\n\n        # Iterate until the next jacobsthal number is found\n        while True:\n            if next_num % n == 0:\n                return next_num\n            elif next_num % n == 1:\n                # If the next number is divisible by n, move on to the next iteration\n                next_num += 1\n            elif next_num % n == -1:\n                # If the next number is not divisible by n, move back to the previous iteration\n                next_num = prev_num\n            else:\n                # If the next number is neither divisible by n nor by n+1, the current number is the next jacobsthal number\n                return current_num\n            prev_num = current_num\n            current_num = next_num\n            next_num += 1",
        "test": "assert jacobsthal_num(0) == 0, \"Jacobsthal number 0 should be 0\"",
        "num_ids": 1119
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_k(test_list, K):\n    # Initialize min_list to store the minimum k records\n    min_list = []\n\n    # Iterate through the test_list\n    for i in range(len(test_list)):\n        # Check if the current record has a smaller distance from min_list\n        if len(min_list) < K:\n            # If it does, append it to min_list\n            min_list.append(test_list[i])\n        else:\n            # If it does not, remove the record with the smallest distance\n            if test_list[i][1] < min_list[0][1]:\n                min_list.pop(0)\n                min_list.append(test_list[i])\n\n    return min_list",
        "test": "assert min_k([], 1) == []",
        "num_ids": 679
    },
    {
        "number": 754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Initialize an empty list to store common elements\n    common = []\n\n    # Iterate over the elements of each list\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            # If an element appears in all three lists, add it to the common list\n            common.append(l1[i])\n\n    return common",
        "test": "assert extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5], [2, 3, 4, 5]) == [2, 3, 4, 5]",
        "num_ids": 654
    },
    {
        "number": 755,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf') # initializing smallest and second smallest variables\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2, \"Test 1: Second smallest is 2.\"",
        "num_ids": 551
    },
    {
        "number": 756,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b+'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"aba\") == True",
        "num_ids": 1281
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Declare an empty dictionary to store the count of reverse pairs\n    count = {}\n\n    # Loop through each string in the list\n    for string in test_list:\n        # Loop through each character in the string in reverse order\n        for i in range(len(string)-1, -1, -1):\n            # If a pair of characters is found and not already in the dictionary\n            if string[i] == string[i+1] and string[i] not in count:\n                # Add the pair to the dictionary\n                count[string[i:i+2]] = count.get(string[i:i+2], 0) + 1\n\n    # Return the dictionary of count of reverse pairs\n    return count",
        "test": "assert count_reverse_pairs(['hello', 'world', 'python', 'foo', 'bar']) == 3",
        "num_ids": 619
    },
    {
        "number": 758,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Initialize an empty dictionary\n    sublist_counts = {}\n\n    # Loop through each element in the list\n    for element in list1:\n\n        # If the element is a list, recursively call the function on it\n        if isinstance(element, list):\n            sublist_counts.update(unique_sublists(element))\n\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            sublist_counts[element] = 1\n\n    return sublist_counts",
        "test": "assert unique_sublists([1,2,3,4,5]) == {1:1, 2:1, 3:1, 4:1, 5:1}",
        "num_ids": 724
    },
    {
        "number": 759,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False",
        "test": "assert is_decimal(\"123.45\") == True",
        "num_ids": 550
    },
    {
        "number": 760,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes in a list of numbers and returns True if there is only one distinct element in the list, and False otherwise.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # Check if the set has only one element\n    return len(unique_set) == 1",
        "test": "assert unique_Element([1, 2, 3, 4, 4, 5, 5, 6]) == False",
        "num_ids": 477
    },
    {
        "number": 762,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 4 == 0 and (monthnum3 % 100!= 0 or monthnum3 % 400 == 0):\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(1) == False",
        "num_ids": 527
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_min_diff(arr, n):\n    # Create an empty dictionary to store the minimum difference\n    min_diff = {}\n\n    # Loop through each element in the array\n    for i in range(n):\n\n        # Initialize the minimum difference to the current element\n        min_diff[i] = arr[i]\n\n        # Loop through each element from i+1 to n-1\n        for j in range(i+1, n):\n\n            # Calculate the difference between the current element and the next element\n            diff = arr[j] - arr[i]\n\n            # If the difference is not already in the dictionary, add it\n            if diff not in min_diff:\n                min_diff[diff] = i+1\n\n    # Return the minimum difference value\n    return min_diff[min(min_diff.keys())]",
        "test": "assert find_min_diff([1,2,3,4,5], 5) == 1 # Test case 1",
        "num_ids": 748
    },
    {
        "number": 764,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 216
    },
    {
        "number": 765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n == 0:\n        return \"zero\"\n    elif n == 1:\n        return \"one\"\n    elif n % 10 == 1:\n        return \"eleven\"\n    elif n % 10 == 2:\n        return \"twelve\"\n    elif n % 10 == 3:\n        return \"thirteen\"\n    elif n % 10 == 4:\n        return \"fourteen\"\n    elif n % 10 == 5:\n        return \"fifteen\"\n    elif n % 10 == 6:\n        return \"sixteen\"\n    elif n % 10 == 7:\n        return \"seventeen\"\n    elif n % 10 == 8:\n        return \"eighteen\"\n    elif n % 10 == 9:\n        return \"nineteen\"\n    elif n % 100 == 11:\n        return \"twenty one\"\n    elif n % 100 == 12:\n        return \"twenty two\"\n    elif n % 100 == 13:\n        return \"twenty three\"\n    elif n % 100 == 14:\n        return \"twenty four\"\n    elif n % 100 == 15:\n        return \"twenty five\"\n    elif n % 100 == 16:\n        return \"twenty six\"\n    elif n % 100 == 17:\n        return \"twenty seven\"\n    elif n % 100 == 18:\n        return \"twenty eight\"\n    elif n % 100 == 19:\n        return \"twenty nine\"\n    else:\n        return \"not a polite number\"\n",
        "test": "assert is_polite(11) == 1",
        "num_ids": 706
    },
    {
        "number": 766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def pair_wise(l1):\n    '''\n    Return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]",
        "num_ids": 409
    },
    {
        "number": 767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in a list of numbers and a sum. It returns the number of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1,2,3,4,5], 6) == 0, \"get_pairs_count([1,2,3,4,5], 6) should return 0\"",
        "num_ids": 484
    },
    {
        "number": 769,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))",
        "test": "assert Diff([1, 2, 3], [1, 2, 3]) == []",
        "num_ids": 377
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def odd_num_sum(n):\n    # initialize the sum variable to 0\n    sum = 0\n    # iterate over the first n odd natural numbers\n    for i in range(1, n+1):\n        # check if i is an odd number\n        if i % 2!= 0:\n            # square the number and add to sum\n            sum += i**4\n    # return the sum\n    return sum",
        "test": "assert odd_num_sum(50) == 3570",
        "num_ids": 346
    },
    {
        "number": 771,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n    return len(stack) == 0",
        "test": "assert check_expression(\"()\") == True # the empty string is balanced",
        "num_ids": 277
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    words_to_remove = []\n    for word in words:\n        if len(word)!= K:\n            words_to_remove.append(word)\n    return''.join(words_to_remove)",
        "test": "assert remove_length(\"hello world\", 3) == \"helloworld\"",
        "num_ids": 401
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    # initialize a list to store the occurrences of pattern in text\n    occurrences = []\n\n    # compile the pattern to match substrings\n    pattern = re.compile(pattern)\n\n    # find all occurrences of pattern in text using the findall() method\n    match_objects = pattern.findall(text)\n\n    # iterate over all matches\n    for match_object in match_objects:\n        # get the substring from the match_object using slicing\n        substring = match_object[1:]\n\n        # check if the substring is a prefix of the pattern\n        if substring.startswith(pattern):\n            # if yes, append it to the list of occurrences and position\n            occurrences.append((substring, match_object.start()))\n\n    # if there are no occurrences of pattern, return None\n    if not occurrences:\n        return None\n\n    # if there is only one occurrence of pattern, return the position\n    if len(occurrences) == 1:\n        return occurrences[0][1]\n\n    # return a list of all occurrences of pattern in text\n    return occurrences",
        "test": "assert occurance_substring(\"Hello, World!\", \"w\") == (3, 7) # matches \"w\" in the string \"Hello, World!\" at index 3",
        "num_ids": 760
    },
    {
        "number": 775,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            count += 1\n    return count == len(nums)",
        "test": "assert odd_position([1, 2, 3, 4, 6]) == False",
        "num_ids": 387
    },
    {
        "number": 776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels('The quick brown fox jumps over the lazy dog') == 13",
        "num_ids": 465
    },
    {
        "number": 777,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # create an empty dictionary to store the counts of each element\n    count_dict = {}\n\n    # loop through the list and count the occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # create an empty list to store the unique elements\n    unique_elements = []\n\n    # loop through the dictionary and add all the unique elements to the list\n    for num in count_dict:\n        if count_dict[num] == 1:\n            unique_elements.append(num)\n\n    # return the sum of the unique elements\n    return sum(unique_elements)\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 576
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list elements by their indexes\n    grouped_list = dict(list(enumerate(list1)))\n\n    # Initialize the packing index and the packing list\n    pack_index = 0\n    pack_list = []\n\n    # Iterate over each index in the grouped list\n    for index, group in grouped_list.items():\n        # If the current group contains more than one element, add the sublist to the packing list\n        if len(group) > 1:\n            pack_list.append(group[1:])\n        # If the current group contains exactly one element, add it to the packing list\n        elif len(group) == 1:\n            pack_list.append(group[0])\n\n        # Update the packing index and check if the packing list is complete\n        if pack_index + len(pack_list) == len(list1):\n            yield pack_list\n            pack_list = []\n            pack_index = 0\n        else:\n            pack_index += 1\n\n    # If the packing list is not complete at the end of the iteration, yield it last\n    if pack_index > 0:\n        yield pack_list",
        "test": "assert pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6]) == [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]",
        "num_ids": 725
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def unique_sublists(list1):\n    # Count the number of lists in the list1\n    num_lists = len(list1)\n    # Create a dictionary to store the number of lists for each unique list\n    counts = {}\n    # Iterate over the elements of the list1\n    for element in list1:\n        # Check if the element is already in the counts dictionary\n        if element in counts:\n            # If so, increment its count\n            counts[element] += 1\n        else:\n            # If not, add it to the counts dictionary with a count of 1\n            counts[element] = 1\n    # Return the counts dictionary\n    return counts",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {((1, 2, 3), 1): 2, ((1, 2, 4), 1): 1, ((1, 2, 5), 1): 1, ((3, 4, 5), 1): 1}",
        "num_ids": 623
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    sums = set(sum(tup) for tup in test_list)\n    result = set()\n    for sum in sums:\n        for tup in combinations(test_list, len(test_list)):\n            if sum in tup:\n                result.add(tup)\n    return list(result)",
        "test": "assert find_combinations(range(1, 11)) == ((1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1), (4, 1, 3), (4, 3, 1))",
        "num_ids": 949
    },
    {
        "number": 781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef count_divisors(n) :\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            count += 1\n    return count",
        "test": "assert count_divisors(15) == 10  # Test case 2",
        "num_ids": 463
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize a variable to store the sum\n    sum = 0\n    # Loop through each element of the array\n    for i in range(n):\n        # Loop through each element after the current one\n        for j in range(i+1, n):\n            # Check if the current element is odd and its length is odd\n            if arr[i] % 2 == 1 and arr[j] % 2 == 0:\n                # If so, add the current element and its length to the sum\n                sum += arr[i] + arr[j]\n    return sum",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 621
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert a given RGB color to HSV (hue, saturation, and value) color model.\n    '''\n    # Calculate the min, max, and range of each color channel\n    min_r, max_r = min(r, g, b), max(r, g, b)\n    delta_r = max_r - min_r\n    \n    min_g, max_g = min(g, b), max(g, b)\n    delta_g = max_g - min_g\n    \n    min_b, max_b = min(b, r), max(b, r)\n    delta_b = max_b - min_b\n    \n    # Calculate the hue, saturation, and value of each color channel\n    if delta_r == 0:\n        hue = 0\n    elif delta_g == 0:\n        hue = delta_b / delta_r * 60\n    elif delta_b == 0:\n        hue = (1/3) * (delta_g + delta_r)\n    else:\n        if delta_g < delta_b:\n            delta_g, delta_b = delta_b, delta_g\n        i = delta_g.index(min_g)\n        hue = (i * 60) / delta_r + (delta_g - min_g) / 2\n        if hue < 0:\n            hue += 360\n    \n    if delta_r == 0:\n        saturation = 0\n    else:\n        saturation = delta_r / (1 - abs((2 * delta_g) - delta_b))\n    \n    if delta_b == 0:\n        value = delta_g\n    else:\n        value = (1 - abs((2 * delta_r) - delta_g)) / (1 - abs((2 * delta_b) - delta_r))\n    \n    # Round the hue and saturation to the nearest whole number\n    hue = round(hue)\n    saturation = round(saturation)\n    value = round(value)\n    \n    # Construct the HSV (hue, saturation, and value) tuple\n    return (hue, saturation, value)",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0)",
        "num_ids": 1688
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    print(\"Even product:\", even_product)\n    print(\"Odd product:\", odd_product)\n    print(\"Number of even numbers:\", even_count)\n    print(\"Number of odd numbers:\", odd_count)",
        "test": "assert mul_even_odd([2, 4, 6, 8, 10]) == 80",
        "num_ids": 439
    },
    {
        "number": 785,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # Convert the tuple string to a tuple\n    tuple_str = tuple(test_str.split(','))\n    \n    # Convert the tuple to an integer tuple\n    integer_tuple = tuple([int(num) for num in tuple_str])\n\n    return integer_tuple",
        "test": "assert tuple_str_int('123') == (123,)",
        "num_ids": 345
    },
    {
        "number": 786,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the index of the first occurrence of x in a sorted list a\n    lo = 0\n    hi = len(a) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    # x was not found in a sorted list, so return the index of the insertion point after insertion\n    lo = 0\n    hi = len(a) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return hi + 1",
        "test": "assert right_insertion([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 699
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'[ab]*b')\n    return pattern.search(text)",
        "test": "assert text_match_three('abababbabababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "num_ids": 1300
    },
    {
        "number": 788,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])",
        "test": "assert new_tuple([], 'hello') == ('hello',)",
        "num_ids": 276
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Check whether every even index in a list contains even numbers.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return True\n    return False",
        "test": "assert even_position([1, 2, 4, 6, 8]) == True",
        "num_ids": 468
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return list(set([test_tup[i] for i in range(len(test_tup)) if test_tup[i][0]!= test_tup[i][1]]))",
        "test": "assert remove_nested([]) == []",
        "num_ids": 404
    },
    {
        "number": 792,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        for j in range(i + 1, len(input_list)):\n            count += 1\n    return count",
        "test": "assert count_list([1, 2, 3]) == 3",
        "num_ids": 302
    },
    {
        "number": 793,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last(arr, x):\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1  # Element not found",
        "test": "assert last([1,2,3,4,5],3)==2",
        "num_ids": 345
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(.+?)(b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return \"No match found\"\n\n\ntext = \"abcdefgabc\"\nprint(text_starta_endb(text)) # Output: 'abcdefgabc'",
        "test": "assert text_starta_endb(\"Hello, world!\") == \"Hello, world!\"",
        "num_ids": 388
    },
    {
        "number": 796,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total",
        "test": "assert return_sum({'apple': 10, 'banana': 5, 'cherry': 8}) == 23",
        "num_ids": 312
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odds = 0\n    for i in range(n, 0, -2): \n        if i % 2!= 0: \n            sum_odds += i\n    return sum_odds",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 294
    },
    {
        "number": 798,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15, \"The sum of the array [1, 2, 3, 4, 5] should be 15\"",
        "num_ids": 252
    },
    {
        "number": 799,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d",
        "test": "assert left_rotate(0,3) == 0",
        "num_ids": 358
    },
    {
        "number": 800,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)",
        "test": "assert remove_all_spaces(\"   Hello   World  \") == \"HelloWorld\"",
        "num_ids": 248
    },
    {
        "number": 801,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(3):\n        if x == y == z == i:\n            count += 1\n    return count",
        "test": "assert test_three_equal(1,1,1) == 1",
        "num_ids": 277
    },
    {
        "number": 802,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    rotations = 0\n    # Traverse through all the elements of the array\n    for i in range(n):\n        # Traverse through all the elements of the array from i+1 to n-1\n        for j in range(i+1, n):\n            # If the array is sorted in ascending order\n            if arr[i] > arr[j]:\n                rotations += 1\n                # Swap the elements at i and j\n                arr[i], arr[j] = arr[j], arr[i]\n    return rotations",
        "test": "assert count_rotation([]) == 0",
        "num_ids": 694
    },
    {
        "number": 803,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_perfect_square(n) :\n    '''\n    This function checks whether the given number is a perfect square or not.\n    '''\n    # Base Case: If n is less than or equal to 0, it is not a perfect square\n    if n <= 0:\n        return False\n\n    # Check if n is a power of 2 or not\n    if n == 1 or n == 2:\n        return True\n\n    # Find the square root of n and check if it is a power of 2 or not\n    square_root = int(n ** 0.5)\n    if square_root ** 2 == n:\n        return True\n\n    # If n is not a perfect square, return False\n    return False",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 481
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif arr[0] == 1:\n        return False\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] * arr[i-1]!= arr[0]:\n                return False\n        return True",
        "test": "assert is_product_even([1, 2, 3]) is False  # arr = [1, 2, 3] * 2 = [2, 4, 6]",
        "num_ids": 365
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return None\n    \n    # initialize variables\n    max_sum = float('-inf')\n    highest_sum = None\n    highest_list = None\n    \n    # loop through lists\n    for list in lists:\n        # calculate sum of list\n        total_sum = sum(list)\n        \n        # update maximum sum and highest sum\n        if total_sum > max_sum:\n            max_sum = total_sum\n            highest_sum = total_sum\n            highest_list = list\n        elif total_sum == max_sum:\n            # if sum is the same as previous highest sum, add the current list to the highest list\n            highest_sum += sum(list)\n            highest_list.append(list)\n            \n    # return the highest list\n    return highest_list",
        "test": "assert max_sum_list([[-1,2,-3], [-2,1,-5], [4,1,-7], [2,-3,5], [-1,3,-5]]) == [-7, -5, -3, 4, 2]",
        "num_ids": 773
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 1\n    if curr_run > max_run:\n        max_run = curr_run\n    return max_run",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 409
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0: #check if the number is odd\n            return num #return the first odd number in the list\n    return None #return None if no odd numbers are found in the list",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 309
    },
    {
        "number": 808,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) == K:\n        return True\n    else:\n        return False",
        "test": "assert check_K([1, 2, 3, 4, 5], 6) == False",
        "num_ids": 298
    },
    {
        "number": 809,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True",
        "test": "assert check_smaller((1, 3), (3, 5)) == True",
        "num_ids": 418
    }
]