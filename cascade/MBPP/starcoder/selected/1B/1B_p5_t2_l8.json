[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    # convert test_tup1 and test_tup2 to sets to remove duplicates\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n\n    # find the intersection of the two sets\n    shared_set = test_set1.intersection(test_set2)\n\n    # convert the set back to a list and return it\n    return list(shared_set)\n",
        "test": "assert similar_elements((1,2,3), (1,2,3,4)) == [1, 2, 3]",
        "num_ids": 648
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_not_prime(1) == False, \"The first number is not prime.\"",
        "num_ids": 521
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Given a list of integers, return the n largest integers in descending order.\n    '''\n    return hq.nlargest(n, nums)",
        "test": "assert heap_queue_largest([], 0) == []",
        "num_ids": 820
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Power_Of_Two(x):\n    return x == 2**x",
        "test": "assert is_Power_Of_Two(32) == False # test if 32 is not a power of two",
        "num_ids": 483
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function uses regular expression to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words",
        "test": "assert find_char_long(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 660
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 585
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Remove spaces and punctuation from the string\n    cleaned_string = str.replace(' ', '').replace(',', '').replace('.', '').replace('!', '').replace('?', '')\n    \n    # Find the length of the string\n    length = len(cleaned_string)\n    \n    # Initialize the count variable to 1\n    count = 1\n    \n    # Loop through the cleaned string\n    for i in range(length):\n        # Check if the current character is the same as the previous character\n        if cleaned_string[i] == cleaned_string[i-1]:\n            # If the current character is the same as the previous character, increment the count\n            count += 1\n        # If the current character is different from the previous character, reset the count and start over\n        else:\n            count = 1\n            \n    return count",
        "test": "assert find_Rotations(\"hello world\") == 1, \"find_Rotations('hello world') should return 1\"",
        "num_ids": 874
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    while ch in s: # checks if the given character is present in the string\n        s = s.replace(ch,'',1) # removes first occurrence of the given character\n    while ch in s: # checks if the given character is present in the string again\n        s = s.replace(ch,'',-1) # removes last occurrence of the given character\n    return s # returns the modified string",
        "test": "assert remove_Occ(\"abcde\", \"z\") == \"abcde\"",
        "num_ids": 725
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def sort_matrix(M):\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols):\n            if M[i][j]!= 0:\n                for k in range(i+1, rows):\n                    if M[k][j]!= 0 and M[k][j] + M[i][j] < M[i][j]:\n                        M[i][j], M[k][j] = M[k][j], M[i][j]\n    return M",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1530
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Calculate the volume of a triangular prism given its length, breadth, and height.\n    '''\n    volume = l * b * h\n    return volume",
        "test": "assert find_Volume(1,2,3) == 6",
        "num_ids": 466
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # define a regular expression pattern for lowercase letters and underscores\n    pattern = re.compile(r'\\b[a-z]+_\\b')\n    # check if the pattern matches the text\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore('Hello World') == False",
        "num_ids": 701
    },
    {
        "number": 17,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def square_perimeter(a):\n    return a * a",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 289
    },
    {
        "number": 18,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = []\n    for char in string: \n        if char not in list_of_chars: \n            list_of_chars.append(char)\n    return list_of_chars",
        "test": "assert str_to_list(\"\") == []",
        "num_ids": 911
    },
    {
        "number": 19,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        if arraynums.count(arraynums[i]) > 1:\n            return True\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 769
    },
    {
        "number": 20,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_woodall(x):\n    '''\n    This function checks if the given number is woodball or not.\n    '''\n    if x % 10 == 1 or x % 10 == 5:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(2) == False # incorrect, is_woodall is implemented as a boolean variable and not a function.",
        "num_ids": 607
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def rev(num):\n    if num == 1:\n        return True\n    else:\n        if num % 2 == 0:\n            return rev(num // 2)\n        else:\n            return rev(3*num + 1)\n\nprint(rev(10)) # True\nprint(rev(2)) # True\nprint(rev(6)) # True\nprint(rev(8)) # False",
        "test": "assert rev(2) == 1",
        "num_ids": 619
    },
    {
        "number": 57,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_Max_Num(arr):\n    max_num = arr[0]\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num",
        "test": "assert find_Max_Num([1,2,3,4,5]) == 5",
        "num_ids": 553
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Check if the given two integers have opposite sign or not\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y >= 0:\n        return True\n    elif x >= 0 and y < 0:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-1,1) == True",
        "num_ids": 616
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Initialize the variables\n    a, b, c, d = 1, 1, 1, 1\n    for i in range(2, n+1): \n        # Calculate the next octagonal number\n        c = (a + b + c) // 3 \n        # Update the values of a, b, c, and d\n        a, b, d = b, c, d \n    # Return the nth octagonal number\n    return c\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1615
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s) + 1):\n            if s[i:j] in substrings:\n                substrings[s[i:j]] += 1\n    return len(substrings)",
        "test": "assert count_Substrings(\"\") == 0, \"The function should return 0 for an empty string.\"",
        "num_ids": 953
    },
    {
        "number": 62,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 662
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_difference(test_list):\n    '''\n    Finds the maximum difference between available pairs in a tuple list.\n    '''\n    if len(test_list) < 2:\n        raise ValueError('The list must have at least two elements.')\n\n    max_difference = 0\n\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_difference:\n                max_difference = diff\n\n    return max_difference",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 816
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks(['A', 65, ('B', 85), ('C', 78), ('D', 95)]) == [('A', 65), ('B', 85), ('C', 78), ('D', 95)]",
        "num_ids": 695
    },
    {
        "number": 65,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def recursive_list_sum(data_list):\n    if not data_list:  # base case\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])  # recursive case",
        "test": "assert recursive_list_sum([1]) == 1",
        "num_ids": 757
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 434
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def bell_number(n):\n    # base case\n    if n <= 1:\n        return 1\n\n    # recursive case\n    elif n == 2:\n        return 2\n\n    # recursive case\n    else:\n        return bell_number(n-1) + bell_number(n-2)",
        "test": "assert bell_number(1) == 1",
        "num_ids": 710
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Monotonic(A):\n    # Traverse through the array and compare each adjacent pair of elements\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True",
        "test": "assert is_Monotonic([4, 5, 3, 2, 1]) == False, \"The given array is not monotonic.\"",
        "num_ids": 632
    },
    {
        "number": 69,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True",
        "test": "assert is_sublist([1, 2, 3, 4, 5], [1, 2, 4, 6]) == False",
        "num_ids": 572
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True",
        "test": "assert find_equal_tuple(()) == True",
        "num_ids": 727
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def comb_sort(nums):\n    for i in range(len(nums)):\n        for j in range(0, i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums",
        "test": "assert comb_sort([2, 4, 1, 3, 5]) == [1, 2, 3, 4, 5] # Test case 1",
        "num_ids": 914
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def dif_Square(n): \n    # Check if the number is divisible by any number between 1 and n/2 (inclusive)\n    for i in range(1, n//2+1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert dif_Square(4) == 0",
        "num_ids": 712
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors.sort()\n    patterns.sort()\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True",
        "test": "assert is_samepatterns([\"red\", \"green\", \"blue\", \"yellow\"], [\"red\", \"green\", \"yellow\"]) == False",
        "num_ids": 642
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Find all tuples in a list whose elements are divisible by K.\n    \"\"\"\n    tuples = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            tuples.append(t)\n    return tuples",
        "test": "assert find_tuples([], 3) == []",
        "num_ids": 828
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(11) == True",
        "num_ids": 416
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def word_len(s):\n    words = s.split()\n    if len(words) == 1:\n        return len(s)\n    else:\n        return 0",
        "test": "assert word_len(\"apple\") == 5 # Test the length of the word \"apple\"",
        "num_ids": 435
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) / 2",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 730
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "test": "assert volume_sphere(3) == 14.605496408961033",
        "num_ids": 523
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = list(strr)\n    for i in range(len(s)):\n        if i == len(s) - 1:\n            s[i] += 1\n        else:\n            s[i] += 26 % 26\n    return ''.join(s)",
        "test": "assert get_Char(\"world\") == 101 # check if the return value is as expected",
        "num_ids": 676
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sequence_list = [1, 1]\n        for i in range(2, n):\n            sequence_list.append(sequence_list[i-1] + sequence_list[i-2])\n        return sequence_list[n-1]",
        "test": "assert sequence(0) == 0",
        "num_ids": 592
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4 * math.pi * (1 ** 2), \"The correct surface area of a sphere is approximately 4 * pi * (1 ** 2)\"",
        "num_ids": 503
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    num = 0\n    i = 1\n    \n    while i <= n:\n        num += i*i\n        i += 1\n        \n    # Return the value of num\n    return num",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 1169
    },
    {
        "number": 87,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({1:2, 3:4}, {5:6, 7:8}, {9:10}) == {1:2, 3:4, 5:6, 7:8, 9:10}",
        "num_ids": 1114
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from collections import defaultdict\n\ndef freq_count(lst):\n    freq_dict = defaultdict(int)\n    for elem in lst:\n        freq_dict[elem] += 1\n    return freq_dict",
        "test": "assert freq_count([1, 2, 3, 2, 1]) == {'1': 2, '2': 2, '3': 1}",
        "num_ids": 607
    },
    {
        "number": 89,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def closest_num(N):\n    '''\n    Function to find the closest smaller number than n.\n    '''\n    for i in range(N, 0, -1):\n        if N % i == 0:\n            return i\n    return N\n",
        "test": "assert closest_num(1) == 1",
        "num_ids": 463
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def len_log(lst):\n    \"\"\"\n    This function takes a list of strings and returns the length of the longest word.\n    \"\"\"\n    longest_word = ''\n    for word in lst:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "test": "assert len_log(['apple', 'banana', 'orange', 'apple', 'banana']) == 5",
        "num_ids": 574
    },
    {
        "number": 91,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"hello world\", \"world\") == True",
        "num_ids": 509
    },
    {
        "number": 92,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is odd or even\n    if n % 2 == 0:\n        return False\n    \n    # Check if the number is less than 1\n    if n < 1:\n        return False\n    \n    # Check if the number is a palindrome\n    if str(n) == str(n)[::-1]:\n        return False\n    \n    # If none of the above conditions are satisfied, it's undulating\n    return True",
        "test": "assert is_undulating(1234567890) == False  # A single digit number is not undulating",
        "num_ids": 497
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def power(a, b):\n    return a ** b",
        "test": "assert power(2, 3) == 8",
        "num_ids": 339
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list by second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the sorted list\n    return sorted_list[0][0]",
        "test": "assert index_minimum([(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4), (\"e\", 5)]) == (\"b\", 2)",
        "num_ids": 934
    },
    {
        "number": 95,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length",
        "test": "assert Find_Min_Length([[]]) == 0",
        "num_ids": 669
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(2) == 2, \"The number of divisors of 2 is not 2.\"",
        "num_ids": 529
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for sublist in list1:\n        for elem in sublist:\n            if elem in freq:\n                freq[elem] += 1\n            else:\n                freq[elem] = 1\n    return freq",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 1180
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += number\n    length = len(numbers)\n    result = total / length\n    return result\n",
        "test": "assert multiply_num([1, 2, 3, 4]) == [1, 2, 3, 4, 6, 9]",
        "num_ids": 517
    },
    {
        "number": 99,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 543
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the number is negative\n    if num < 0:\n        # return the negation of the next largest palindrome\n        return -next_smallest_palindrome(abs(num))\n\n    # check if the number is already a palindrome\n    if num == int(num) == num:\n        return num\n\n    # initialize variables\n    n = 0\n    current = num\n\n    # loop through each digit of the number\n    while current > 0:\n        # add the next digit to the current palindrome\n        current = current // 10\n        n += 1\n\n    # add the smallest palindrome to the next smallest palindrome\n    smallest_palindrome = current + current - 1\n\n    # find the next smallest palindrome\n    if smallest_palindrome % 2 == 0:\n        return smallest_palindrome + 1\n    else:\n        return smallest_palindrome - 1",
        "test": "assert next_smallest_palindrome(1111) == 1111",
        "num_ids": 1207
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return None\n    else:\n        return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 4) == 4",
        "num_ids": 828
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(w.title() if w!= '_' else w for w in word.split('_'))",
        "test": "assert snake_to_camel(\"hello_world\") == \"HelloWorld\"",
        "num_ids": 540
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n == m == 1: \n        return 1\n\n    result = 0\n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            result += (i - 1) * (j - 1)\n\n    return result\n",
        "test": "assert eulerian_num(4, 2) == 6",
        "num_ids": 842
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n\n    Parameters:\n    input_list (list): A list of lists representing the input data.\n\n    Returns:\n    list: A list of lists, where each sublist represents a sorted sublist of strings.\n    '''\n\n    # Create a list of lists to store the sorted sublists\n    sorted_sublists = []\n\n    # Iterate over each sublist of the input list\n    for sublist in input_list:\n        # Create a new sublist to store the sorted sublist\n        sorted_sublist = []\n\n        # Iterate over each element of the sublist\n        for element in sublist:\n            # Add the element to the new sublist\n            sorted_sublist.append(element)\n\n        # Add the new sublist to the list of sorted sublists\n        sorted_sublists.append(sorted_sublist)\n\n    # Return the list of sorted sublists\n    return sorted_sublists",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 790
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "test": "assert count([]) == 0",
        "num_ids": 507
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n\n    # We can use a list comprehension to iterate over the tuples\n    # and add the elements of the test_list to each tuple in the test_tup\n    test_tup = tuple([element + test_list[i] for i in range(len(test_list))])\n\n    return test_tup",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 540
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = k = 0\n    \n    # Merge the lists into the merged_list\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    \n    # Add any remaining elements from the remaining lists to the merged_list\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n    \n    # Sort the merged_list in ascending order\n    heapq.heapify(merged_list)\n    merged_list = list(merged_list)\n    merged_list.sort()\n    \n    return merged_list",
        "test": "assert merge_sorted_list([3,5,1,4,8], [1,2,5,7,9], [2,3,4,6,8]) == [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]",
        "num_ids": 1667
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        # print(\"s:\", s)\n        # print(\"i:\", i)\n        s = str(int(s, 2))  # convert binary string to decimal\n        # print(\"s:\", s)\n        count += int(s) % 2 # count the number of odd numbers in the string\n    return count",
        "test": "assert odd_Equivalent(b'1000000000000000000000000000000000',2) == 1 # 0000000000000000000000000000000000",
        "num_ids": 3053
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Define an empty set to store the common elements\n    common = set()\n\n    # Traverse through all elements of the nested list\n    for element in nestedlist:\n\n        # Traverse through all elements in the nested list\n        for sublist in nestedlist:\n\n            # Check if the current element is equal to the sublist element\n            if element == sublist:\n                common.add(element)\n\n    return common",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, [8, 9]]]) == [2, 4, 6, 8]",
        "num_ids": 843
    },
    {
        "number": 113,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int_num = int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer('abc') == False",
        "num_ids": 421
    },
    {
        "number": 115,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Initialize a flag to keep track of whether all dictionaries are empty\n    empty = True\n    \n    # Loop over each dictionary in the list\n    for d in list1:\n        # If the dictionary is not empty, mark it as empty and exit the loop\n        if d:\n            empty = False\n            break\n    \n    # Return the result\n    return empty",
        "test": "assert empty_dit([]) == True",
        "num_ids": 423
    },
    {
        "number": 116,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def tuple_to_int(nums):\n    '''\n    Converts a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)",
        "test": "assert tuple_to_int((1, 2, 3, 4, 5)) == 15",
        "num_ids": 478
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    float_list = []\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, (int, float)):\n                float_list.append(float(item))\n    return float_list",
        "test": "assert list_to_float([]) == []",
        "num_ids": 806
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def string_to_list(string):\n    return string.split()",
        "test": "assert string_to_list(\"apple banana carrot\") == [\"apple\", \"banana\", \"carrot\"]",
        "num_ids": 396
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize the count of elements in the array\n    count = 1\n\n    # loop through the array and check if the current element is equal to the last element in the sorted array\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n\n    # if there is no element that appears only once, return None\n    if count == len(arr):\n        return None\n\n    # return the element that appears only once in the sorted array\n    return arr[count-1]",
        "test": "assert search([1, 2, 3, 2, 1]) == 2",
        "num_ids": 891
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_product_tuple(lst):\n    '''\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(lst) < 2:\n        return None\n\n    max_product = -float('inf')\n    current_product = 1\n\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            current_product = max(current_product, abs(lst[i] * lst[j]))\n            max_product = max(max_product, current_product)\n\n    return max_product",
        "test": "assert max_product_tuple([1, 2, -3, 4, -1]) == 12",
        "num_ids": 1066
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i > 1 and i % 2 == 0:\n            continue\n\n        if i > 1 and i > 2 and i % 2 == 0 and i == i + 2:\n            continue\n\n        if i > 2 and i > 3 and i % 2 == 0 and i == i + 3:\n            continue\n\n        if i > 3 and i > 4 and i % 2 == 0 and i == i + 4:\n            continue\n\n        if i > 4 and i > 5 and i % 2 == 0 and i == i + 5:\n            continue\n\n        if i > 5 and i > 6 and i % 2 == 0 and i == i + 6:\n            continue\n\n        if i > 6 and i > 7 and i % 2 == 0 and i == i + 7:\n            continue\n\n        if i > 7 and i > 8 and i % 2 == 0 and i == i + 8:\n            continue\n\n        if i > 8 and i > 9 and i % 2 == 0 and i == i + 9:\n            continue\n\n        if i > 9 and i > 10 and i % 2 == 0 and i == i + 10:\n            continue\n\n        if i > 10 and i > 11 and i % 2 == 0 and i == i + 11:\n            continue\n\n        if i > 11 and i > 12 and i % 2 == 0 and i == i + 12:\n            continue\n\n        if i > 12 and i > 13 and i % 2 == 0 and i == i + 13:\n            continue\n\n        if i > 13 and i > 14 and i % 2 == 0 and i == i + 14:\n            continue\n\n        if i > 14 and i > 15 and i % 2 == 0 and i == i + 15:\n            continue\n\n        if i > 15 and i > 16 and i % 2 == 0 and i == i + 16:\n            continue\n\n        if i > 16 and i > 17 and i % 2 == 0 and i == i + 17:\n            continue\n\n        if i > 17 and i > 18 and i % 2 == 0 and i == i + 18:\n            continue\n\n        if i > 18 and i > 19 and i % 2 == 0 and i == i + 19:\n            continue\n\n        if i > 19 and i > 20 and i % 2 == 0 and i == i + 20:\n            continue\n\n        if i > 20 and i > 21 and i % 2 == 0 and i == i + 21:\n            continue\n\n        if i > 21 and i > 22 and i % 2 == 0 and i == i + 22:\n            continue\n\n        if i > 22 and i > 23 and i % 2 == 0 and i == i + 23:\n            continue\n\n        if i > 23 and i > 24 and i % 2 == 0 and i == i + 24:\n            continue\n\n        if i > 24 and i > 25 and i % 2 == 0 and i == i + 25:\n            continue\n\n        if i > 25 and i > 26 and i % 2 == 0 and i == i + 26:\n            continue\n\n        if i > 26 and i > 27 and i % 2 == 0 and i == i + 27:\n            continue\n\n        if i > 27 and i > 28 and i % 2 == 0 and i == i + 28:\n            continue\n\n        if i > 28 and i > 29 and i % 2 == 0 and i == i + 29:\n            continue\n\n        if i > 29 and i > 30 and i % 2 == 0 and i == i + 30:\n            continue\n\n        if i > 30 and i > 31 and i % 2 == 0 and i == i + 31:\n            continue\n\n       ",
        "test": "assert amicable_numbers_sum(10) == 41370",
        "num_ids": 1836
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a) + cmath.phase(b)",
        "test": "assert angle_complex(0, 0) == 0",
        "num_ids": 597
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_length(binary_string):\n    # convert binary string to a list of integers\n    binary_list = [int(x) for x in binary_string]\n    # initialize variables to keep track of max difference and substrings\n    max_diff = 0\n    substrings = []\n    \n    # loop through all possible substrings of the binary string\n    for i in range(len(binary_string)):\n        # if current substring has only 0s, increment max difference\n        if binary_string[i] == 0:\n            max_diff += 1\n        # if current substring has only 1s, add it to substrings list\n        else:\n            substrings.append(i)\n    \n    # find the maximum difference between number of 0s and number of 1s in substrings\n    for i in range(len(substrings)):\n        # if current substring has only 0s, increment max difference\n        if binary_list[substrings[i]] == 0:\n            max_diff += 1\n        # if current substring has only 1s, add it to substrings list\n        else:\n            substrings.append(substrings[i])\n    \n    return max_diff",
        "test": "assert find_length(\"1101\") == 1",
        "num_ids": 2140
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum(a, b):\n    # Find the sum of the divisors of a and b\n    divisors_a = sum(range(1, a+1))\n    divisors_b = sum(range(1, b+1))\n\n    # Find the sum of common divisors\n    common_divisors = divisors_a - divisors_b\n\n    # Return the sum of common divisors\n    return common_divisors",
        "test": "assert sum(25,3) == 15",
        "num_ids": 826
    },
    {
        "number": 127,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def multiply_int(x, y):\n    '''\n    Multiply two integers x and y.\n    '''\n    return x * y",
        "test": "assert multiply_int(3, 4) == 12",
        "num_ids": 252
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "test": "assert long_words(4, \"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 574
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Initialize variables to keep track of the number of rows and columns\n    row = 0\n    col = 0\n\n    # Traverse through each element of the matrix\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # Check if the element is equal to the sum of its rows and columns\n            if my_matrix[i][j] == sum(my_matrix[row][col] for row in range(len(my_matrix))) + sum(my_matrix[i][j] for j in range(len(my_matrix[0]))):\n                row = i\n                col = j\n                break\n\n    # Check if the matrix is a magic square\n    if row == len(my_matrix) and col == len(my_matrix[0]) - 1:\n        return True\n    else:\n        return False",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 1314
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item",
        "test": "assert max_occurrences([1, 2, 2, 3, 3, 3, 3, 3]) == 3",
        "num_ids": 839
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def reverse_vowels(str1):\n    '''\n    Reverses only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    str2 = \"\"\n    for char in str1:\n        if char not in vowels:\n            str2 += char\n    return str2",
        "test": "assert reverse_vowels(\"\") == \"\"",
        "num_ids": 609
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def tup_string(tup1):\n    '''\n    Convert a tuple to a string.\n    '''\n\n    # Convert the tuple to a string using the repr() method\n    return str(tup1)",
        "test": "assert tup_string(1) == '1'",
        "num_ids": 315
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sum_negativenum(nums):\n    '''\n    Calculates the sum of the negative numbers in a list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total",
        "test": "assert sum_negativenum([-5, -3, -2, -1]) == 0",
        "num_ids": 607
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (n * (2 * n - 1)) // 2 + (hexagonal_num(n-1))",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 1767
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return (zero_count/non_zero_count) if non_zero_count!= 0 else 0",
        "test": "assert zero_count([1, 2, 0, 4, 5]) == 0.25",
        "num_ids": 739
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n\n    # Initialize a variable to store the sum of powers of 2\n    power_sum = 0\n\n    # Check if the given number is negative or zero\n    if n < 0 or n == 0:\n        return False\n    \n    # Check if the given number is 1\n    if n == 1:\n        return True\n    \n    # Check if the given number is not power of 2\n    if n % 2 == 0:\n        return False\n    \n    # Check if the given number is equal to the sum of powers of 2\n    while n > 0:\n        power_sum += n % 2\n        n //= 2\n    \n    return power_sum == n",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 1196
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def circle_circumference(r):\n    '''\n    Calculate the circumference of a circle given its radius.\n    '''\n    circumference = 2 * r * math.pi\n    return circumference",
        "test": "assert circle_circumference(10) == 31.4159",
        "num_ids": 503
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result",
        "test": "assert extract_singly([]) == set()",
        "num_ids": 857
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def pancake_sort(nums):\n    # Loop through the list and partition the elements\n    for i in range(len(nums)):\n        pivot = nums[i]\n        left = []\n        right = []\n        for j in range(i+1, len(nums)):\n            if nums[j] < pivot:\n                left.append(nums[j])\n            else:\n                right.append(nums[j])\n        nums[i], nums[left[0]] = nums[left[0]], nums[i]\n        nums[i], nums[right[-1]] = nums[right[-1]], nums[i]\n\n    # Recursively sort the left and right sublists\n    return pancake_sort(left), pancake_sort(right)",
        "test": "assert pancake_sort([1, 5, 2, 3, 4, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1193
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            same_count += 1\n    return same_count\n",
        "test": "assert count_samepair([1,2,3,4,5], [2,2,3,4,5], [1,2,3,4,5]) == 2",
        "num_ids": 1159
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_lists(Input): \n    '''\n    Function to find number of lists present in the given tuple.\n    '''\n    return len(Input[0])",
        "test": "assert find_lists((1, 2, 3, 4, 5, 6)) == 2",
        "num_ids": 435
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = arr[0] - arr[1]\n\n    for i in range(2, len(arr)):\n        if abs(arr[i] - arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 1",
        "num_ids": 791
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if either a or b is 0, if so, return None\n    if a == 0 or b == 0:\n        return None\n\n    # Check if x and y are both integers\n    if not (isinstance(a, int) and isinstance(b, int)):\n        return None\n\n    # Check if either a or b is negative\n    if a < 0 or b < 0:\n        return None\n\n    # Check if the product of a and b is equal to n\n    if a * b!= n:\n        return None\n\n    # Check if the difference between a and b is equal to gcd(a, b)\n    d = gcd(abs(a), abs(b))\n    if d == 1:\n        return None\n    elif d == 0:\n        return None\n    else:\n        return (a // d, b // d)\n\n\ndef gcd(a, b):\n    '''\n    Calculate the greatest common divisor of two integers a and b.\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n",
        "test": "assert find_solution(2, 3, 5) == (1, 2)",
        "num_ids": 979
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # convert both lists to sets\n    list1_set = set(list1)\n    list2_set = set(list2)\n\n    # return a new list containing all elements from list1 that are not present in list2\n    return list(list1_set - list2_set)",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 675
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize variables\n    sum_n = 0\n    x = 1\n    \n    # loop until n-x =< 0\n    while n - x >= 0:\n        # add (n - 2*i) to the sum\n        sum_n += (n - 2*x)\n        \n        # increment x by 1\n        x += 1\n    \n    # return the sum\n    return sum_n",
        "test": "assert sum_series(1) == 1",
        "num_ids": 803
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s*(s-1)*l/2\n    return area",
        "test": "assert area_polygon(3, 5) == 35.0",
        "num_ids": 574
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div = 1\n    sum_of_div = 0\n    while div <= n:\n        if n % div == 0:\n            sum_of_div += div\n            if n // div!= div:\n                return False\n        else:\n            div += 1\n    if sum_of_div == n:\n        return True\n    else:\n        return False",
        "test": "assert div_sum(12) == 0  # Divisible by 12 but not divisible by 11",
        "num_ids": 847
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Define a string of all the lowercase English alphabet characters\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\n    # Initialize a variable to store the count of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n\n    # Iterate through each character in the string\n    for char in str1:\n\n        # Check if the character is in the English alphabet\n        if char.lower() in english_alphabet:\n\n            # Increment the count variable\n            count += 1\n\n    # Return the count of characters that occur at the same position in the string as in the English alphabet\n    return count\n",
        "test": "assert count_char_position(\"hello world\") == 10, \"count_char_position should return 10 for the string 'hello world'.\"",
        "num_ids": 1013
    },
    {
        "number": 166,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 3, 5, 7, 9]) == 4 # There are four even-numbered pairs in the list that xor to an even number.",
        "num_ids": 775
    },
    {
        "number": 167,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # check if n is positive\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # initialize power of 2 to be 1\n    power = 1\n\n    # loop while power is less than or equal to n\n    while power < n:\n        power *= 2\n\n    # return the next power of 2 greater than or equal to n\n    return power",
        "test": "assert next_power_of_2(10) == 16",
        "num_ids": 612
    },
    {
        "number": 168,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,2,1],2) == 2",
        "num_ids": 539
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_range_list(list1, m, n):\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 739
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of the sides of the pentagon\n    b = math.sqrt(3)/2  # Using Heron's formula\n    c = a/math.sqrt(3)\n    d = math.sqrt(3)/2\n\n    # Calculate the perimeter of the pentagon\n    return (a + b + c + d) / 2",
        "test": "assert perimeter_pentagon(15) == 45  # perimeter of a regular pentagon",
        "num_ids": 646
    },
    {
        "number": 172,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"hello world std\") == 1",
        "num_ids": 491
    },
    {
        "number": 222,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if all elements in tuple have same data type\n    for element in test_tuple:\n        if type(element)!= type(test_tuple[0]):\n            return False\n    return True",
        "test": "assert check_type((1, 2, 3, 4, 5)) == True",
        "num_ids": 579
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = {}\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n    majority = max(count, key=count.get)\n    return majority == x",
        "test": "assert is_majority([1, 2, 3, 4, 5], 4, 2) == False",
        "num_ids": 928
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 562
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 514
    },
    {
        "number": 227,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def min_of_three(a,b,c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < a:\n        return b\n    else:\n        return a",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 519
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through each bit in the given range\n    for bit in range(l, r+1):\n        # Check if the current bit is set in the given number\n        if (n & bit) == bit:\n            count += 1\n\n    # Check if all bits are set\n    if count == r - l + 1:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(2,0,3) == False",
        "num_ids": 1095
    },
    {
        "number": 229,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize a boolean variable to keep track of whether a number is negative or positive\n    negative = True\n    \n    # Iterate through the array and swap negative numbers with positive numbers until the array is of length n\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[-i-1] = arr[-i-1], arr[i]\n            negative = not negative\n    \n    # Reverse the array to restore its original order\n    arr = arr[::-1]\n    \n    return arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 3) == [5, 4, 3, 2, 1]",
        "num_ids": 1409
    },
    {
        "number": 230,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] =='':\n            new_str += char\n        else:\n            new_str += str1[i]\n    return new_str",
        "test": "assert replace_blank('Hello world','') == 'Hello world', \"Test case 1 failed\"",
        "num_ids": 567
    },
    {
        "number": 232,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([], 0) == []",
        "num_ids": 797
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = 2 * r * h\n    return s",
        "test": "assert lateralsuface_cylinder(3,4) == 6.0",
        "num_ids": 404
    },
    {
        "number": 234,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "test": "assert volume_cube(3) == 27",
        "num_ids": 326
    },
    {
        "number": 235,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bit_set = 0\n    while n:\n        if n & 1:\n            even_bit_set = 1 << even_bit_set\n        n >>= 1\n    return even_bit_set",
        "test": "assert even_bit_set_number(10) == 2",
        "num_ids": 732
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from collections import Counter\n\ndef check_occurrences(test_list):\n    '''\n    Given a list of tuples (e.g. [(1, 'a'), (2, 'b'), (2, 'c')], return a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)",
        "test": "assert check_occurences([[1, 2, 3], [2, 1, 3], [3, 2, 1], [1, 1, 2], [1, 2, 2]]) == { (1, 2): 3, (2, 1): 3, (3, 2): 3, (1, 1): 1, (1, 2): 1, (2, 2): 1 }",
        "num_ids": 801
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def number_of_substrings(str): \n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if j == len(str) or str[j] == str[i]:\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"abc\") == 3",
        "num_ids": 528
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def get_total_number_of_sequences(m,n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total = 0\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if j >= 2*i:\n                total += 1\n    return total",
        "test": "assert get_total_number_of_sequences(5,4) == 4, \"The correct answer is 4.\"",
        "num_ids": 820
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        print(\"The lists must have the same length.\")\n        return\n    list1.append(list2[-1])\n    list2 = list2[:-1]\n    return list1",
        "test": "assert replace_list([1], [2]) == [1, 2]",
        "num_ids": 706
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)",
        "test": "assert count_charac(\"hello world\") == 11",
        "num_ids": 324
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    while True:\n        N = int(math.sqrt(N))\n        if N * N > N:\n            return N",
        "test": "assert next_Perfect_Square(10) == 16",
        "num_ids": 780
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Initialize variables\n    max_sum = arr[0]\n    curr_sum = arr[0]\n\n    # Iterate through the rest of the array\n    for i in range(1, n):\n        curr_sum = curr_sum + arr[i]\n\n        # If the current sum is greater than the max sum so far, update the max sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum",
        "test": "assert max_sum([3,2,4,1,5]) == 15",
        "num_ids": 1233
    },
    {
        "number": 246,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 1:\n        return number\n    \n    # Base case: sqrt(1) = 1\n    if number == 2:\n        return 1\n    \n    # Recursive case: compute sqrt(number/2) + sqrt(number/2)\n    sqrt1 = babylonian_squareroot(number/2)\n    sqrt2 = babylonian_squareroot(number/2)\n    \n    # Compute the square root of the original number\n    sqrt = sqrt1 + sqrt2\n    \n    return sqrt",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 927
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    max_length = 1\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    for i in range(2, n+1):\n        for j in range(1, i):\n            if str[j-1] == str[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        max_length = max(max_length, i)\n    return max_length",
        "test": "assert lps(\"babad\") == 5 # subsequence \"bab\" of length 5",
        "num_ids": 1149
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize the variable to store the harmonic sum\n    sum = 0.0\n\n    # Loop through the integers from 1 to n\n    for i in range(1, n+1):\n\n        # Calculate the harmonic sum by adding the (i-1)th and (i)th roots to the sum\n        sum += (1.0/i)**(1.0/i-1)\n\n    # Return the harmonic sum\n    return sum",
        "test": "assert harmonic_sum(1) == 1, \"Test 1: The correct answer for n=1 is 1.\"",
        "num_ids": 759
    },
    {
        "number": 249,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Given two arrays, find the intersection.\n    '''\n    # Create a dictionary to store the frequency of elements in the array\n    freq = {}\n    for num in array_nums1:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n            \n    # Iterate over the other array and check if the element is present in the dictionary\n    for num in array_nums2:\n        if num in freq:\n            freq[num] -= 1\n            \n    # Create a list to store the elements that appear in both arrays\n    intersection = []\n    for num, count in freq.items():\n        if count > 0:\n            intersection.append(num)\n            \n    return intersection",
        "test": "assert intersection_array([1,2,3,4,5],[1,2,3,4,5]) == []",
        "num_ids": 827
    },
    {
        "number": 250,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 4, 5), 6) == 0, \"Incorrect count of 0 for (1, 2, 3, 4, 5)\"",
        "num_ids": 697
    },
    {
        "number": 251,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        if i == 0:\n            new_list.insert(0, element)\n        else:\n            new_list.insert(i, element)\n    return new_list",
        "test": "assert insert_element([1], 2) == [2, 1]",
        "num_ids": 657
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real = numbers[0]\n    imag = numbers[1]\n    angle = cmath.phase(numbers[0])\n    \n    return real, angle",
        "test": "assert convert(1-2j) == (-1.609437912514235, 3.141592653589793)",
        "num_ids": 770
    },
    {
        "number": 253,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Counts the number of integers in a list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 433
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations (with repetition) of n distinct colors from the given list l and return a list of tuples.\n    '''\n    color_combinations = combinations_with_replacement(l, n)\n    return list(zip(*color_combinations))",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 2), (1, 3), (2, 3)]",
        "num_ids": 1353
    },
    {
        "number": 256,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(10) == 5",
        "num_ids": 428
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def swap_numbers(a,b):\n    return (b,a)",
        "test": "assert swap_numbers(1,2) == (2,1), \"The function should return a tuple with the second number and then the first number.\"",
        "num_ids": 338
    },
    {
        "number": 259,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 833
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize a variable to keep track of the largest prime number found so far\n    largest_prime = 2\n\n    # Check each number from 2 to n-1\n    for i in range(2, n):\n        # If the number is prime, check if it is the largest prime we have seen so far\n        if is_prime(i):\n            if i > largest_prime:\n                largest_prime = i\n\n    # Return the largest prime number found\n    return largest_prime\n\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 968
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Initialize the result tuple\n    result = tuple(test_tup1)\n\n    # Perform mathematical division operation element-wise across the given tuples\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] / test_tup2[i]\n\n    return result",
        "test": "assert division_elements((1, 2, 3, 4, 5), (4, 1, 6, 2, 1)) == (0.25, 0.375, 0.4375, 0.5625, 0.625)",
        "num_ids": 1142
    },
    {
        "number": 262,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1.sort()\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 899
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_old = 7 - h_age\n    return years_old",
        "test": "assert dog_age(4) == 3",
        "num_ids": 429
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def list_split(S, step):\n    '''\n    Split a list into sublists of size n, where n is the given step.\n\n    Args:\n    - S: A list of elements.\n    - step: An integer representing the size of each sublist.\n\n    Returns:\n    - A list of sublists.\n    '''\n    sublists = []\n    n = len(S)\n    for i in range(0, n, step):\n        sublists.append(S[i:i+step])\n    return sublists",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e'], 2) == [['a', 'b'], ['c', 'd'], ['e']]",
        "num_ids": 726
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * l",
        "test": "assert lateralsurface_cube(5) == 125, \"The function should return the correct result for the side length of 5\"",
        "num_ids": 481
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        square = i**2\n        sum += square\n    return sum",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 454
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Use a loop to compute then'th power of 2 and then find the sum of all its digits\n    power = 1\n    digit_sum = 0\n    for i in range(1, n+1):\n        digit_sum += (i ** power)\n        power *= 2\n\n    # Return the result as then'th star number\n    return digit_sum",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 615
    },
    {
        "number": 269,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    '''\n    Function to find the ASCII value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 328
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_even_and_even_index(arr):\n    # initialize sum and index variables\n    sum = 0\n    index = 0\n    \n    # loop through the array and add even numbers to the sum\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n            index += 1\n    \n    # return the sum and index\n    return sum, index",
        "test": "assert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8]) == 10",
        "num_ids": 805
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0 and i ** 5 == n:\n            sum += i\n    return sum",
        "test": "assert even_Power_Sum(1) == 0",
        "num_ids": 682
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n\n    result = []\n\n    for tup in test_list:\n        result.append(tup[1])\n\n    return result",
        "test": "assert rear_extract([]) == []",
        "num_ids": 593
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    result_tup = tuple()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] - test_tup2[i])\n    return result_tup",
        "test": "assert substract_elements((\"a\", \"b\", \"c\", \"d\"), (\"e\", \"f\", \"g\")) == ((\"a\", \"b\", \"c\", \"d\"), (\"e\", \"f\", \"g\"))",
        "num_ids": 961
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initializing the sum of even binomial coefficients\n    even_binomial_sum = 0\n    \n    # Looping through the even index binomial coefficients from 0 to n-1\n    for i in range(2, n+1, 2):\n        even_binomial_sum += i\n    \n    return even_binomial_sum",
        "test": "assert even_binomial_Coeff_Sum(10) == 30",
        "num_ids": 772
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function calculates the volume of a cylinder given its radius and height.\n    '''\n    return (4/3) * (3.14 * r**3) * h",
        "test": "assert volume_cylinder(5, 10) == 50",
        "num_ids": 517
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, 6) == {}",
        "num_ids": 694
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if i == 0:\n            return test_tup[i]",
        "test": "assert count_first_elements((1,)) == 1 # Single-element tuple",
        "num_ids": 871
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n    \n    # Calculate the nth decagonal number\n    num = n + n * (n - 1) // 2\n    \n    # Check if the nth decagonal number is a prime number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    return True",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 818
    },
    {
        "number": 280,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 729
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n\n    Parameters:\n    test_list - A list of elements.\n\n    Returns:\n    A boolean value indicating whether all the elements of the list are unique or not.\n    '''\n\n    # Create a set to store the elements of the list\n    set_obj = set(test_list)\n\n    # Check if the set is empty or not\n    if set_obj == set(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 709
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtracts two lists element-wise and returns the result.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]",
        "test": "assert sub_list([1,2,3,4,5], [1,2,3,4,5]) == [0,0,0,0,0]",
        "num_ids": 712
    },
    {
        "number": 283,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # initialize a dictionary to keep track of frequency of each digit\n    digit_freq = {}\n\n    # convert the integer to a string\n    n_str = str(n)\n\n    # iterate through each character in the string\n    for char in n_str:\n        # check if the character is a digit\n        if char.isdigit():\n            # check if the frequency of the current digit is less than or equal to the current character\n            if char in digit_freq:\n                digit_freq[char] += 1\n            else:\n                digit_freq[char] = 1\n\n    # check if all the characters in the string have a frequency of 1\n    for freq in digit_freq.values():\n        if freq > 1:\n            return False\n\n    return True",
        "test": "assert validate(12345) is True",
        "num_ids": 710
    },
    {
        "number": 284,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    if len(list)!= len(set(list)):\n        return False\n\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n\n    return True",
        "test": "assert check_element([1,2,3,4,5],6) == False, \"The element 6 should not be present in the list.\"",
        "num_ids": 548
    },
    {
        "number": 285,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_two_three(text):\n    # Use regular expressions to match the pattern 'a*b*'\n    pattern = r'a*b*'\n    match = re.search(pattern, text)\n    if match:\n        # The pattern 'a*b*' matches the entire string, so return True\n        return True\n    else:\n        # The pattern 'a*b*' does not match the entire string, so return False\n        return False",
        "test": "assert text_match_two_three(\"aaaab\") == True",
        "num_ids": 1693
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum - k * a[i] > max_sum:\n            current_sum -= k * a[i]\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([-2, -3, -1, 2, 1], 3, 2) == 4",
        "num_ids": 1418
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def square_Sum(n):\n    # Finding the first n even natural numbers\n    first_n_even = [i for i in range(1, n+1) if i % 2 == 0]\n    \n    # Calculating the sum of squares of the first n even natural numbers\n    square_sum = sum([i**2 for i in first_n_even])\n    \n    return square_sum",
        "test": "assert square_Sum(2) == 4",
        "num_ids": 531
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_length(lst):\n    '''\n    Find the maximum length in a list of lists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length",
        "test": "assert max_length([[1, 2], [3, 4], [5, 6]]) == 6",
        "num_ids": 779
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize variables\n    num_ways = 0\n    \n    # Iterate through each possible color combination\n    for color in range(1, k+1):\n        # Iterate through each possible post number\n        for i in range(1, n+1):\n            # Calculate the number of ways to paint a fence of the given size and color combination\n            num_ways += (n - i + 1) // 2 * (k // 2 - color + 1)\n    \n    # Return the result\n    return num_ways",
        "test": "assert count_no_of_ways(n=3, k=2) == 2",
        "num_ids": 1214
    },
    {
        "number": 292,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find(n, m):\n    quotient = n / m\n    return round(quotient)",
        "test": "assert find(10, 3) == 3",
        "num_ids": 400
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w*h)/2.0",
        "test": "assert otherside_rightangle(5,6) == 15",
        "num_ids": 510
    },
    {
        "number": 294,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val",
        "test": "assert max_val([1,2,3,4,5]) == 5",
        "num_ids": 719
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "test": "assert sum_div(1) == 1, \"sum_div(1) should return 1\"",
        "num_ids": 537
    },
    {
        "number": 296,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                arr[i], arr[j] = arr[j], arr[i]\n                arr.sort() # sort the array in ascending order to find the smallest element in the array\n    return inv_count",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0, \"get_Inv_Count([1, 2, 3, 4, 5]) should return 0\"",
        "num_ids": 834
    },
    {
        "number": 297,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n",
        "test": "assert flatten_list([[1,2,3], [4,5,6]]) == [1,2,3,4,5,6]",
        "num_ids": 730
    },
    {
        "number": 299,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Create a defaultdict to store the total of each group\n    total = defaultdict(int)\n    \n    # Calculate the maximum aggregate from the list of tuples\n    for num, count in stdata:\n        total[num] += count\n    \n    # Return the maximum aggregate value\n    return max(total.values())",
        "test": "assert max_aggregate([('apple', 5), ('banana', 3), ('orange', 1), ('pear', 2)]) == 5",
        "num_ids": 769
    },
    {
        "number": 300,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_binary_seq(n):\n    # Define the first and last digits of the binary sequence\n    first_digit = bin(n)[2]\n    last_digit = bin(n)[-1]\n\n    # Define the length of the binary sequence\n    binary_seq_length = 2 * n\n\n    # Initialize the count to zero\n    count = 0\n\n    # Check all binary sequences of length 2n\n    for i in range(binary_seq_length):\n        # Generate the binary sequence by concatenating the first n digits with the last n digits\n        binary_seq = int(first_digit + last_digit, 2) + i\n\n        # If the binary sequence sums to the target sum, increment the count\n        if int(binary_seq) == n:\n            count += 1\n\n    # Return the count of binary sequences\n    return count",
        "test": "assert count_binary_seq(0) == 0",
        "num_ids": 1118
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def dict_depth(d):\n    '''\n    Find the depth of a dictionary recursively.\n    '''\n    max_depth = 0\n    current_depth = 1\n\n    for value in d.values():\n        if isinstance(value, dict):\n            new_depth = dict_depth(value)\n            if new_depth > max_depth:\n                max_depth = new_depth\n                current_depth = 1\n            else:\n                current_depth += 1\n        else:\n            if current_depth > max_depth:\n                max_depth = current_depth\n                current_depth = 1\n            else:\n                current_depth += 1\n\n    return max_depth",
        "test": "assert dict_depth({}) == 0",
        "num_ids": 592
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # convert ranges and rotations lists to tuples\n    ranges = tuple(ranges)\n    rotations = tuple(rotations)\n    # loop through the array and find the element at the given index\n    for i in range(len(arr)):\n        for j in range(index):\n            # if the number of rotations is not divisible by 4, loop again\n            if j % 4!= 0:\n                continue\n            # if the current index is not the same as the given index, loop again\n            if i == index:\n                continue\n            # if the range is not overlapping with the current rotation, loop again\n            if ranges[0] <= i < ranges[1]:\n                continue\n            # if the rotation is not divisible by 4, loop again\n            if rotations[0] <= j < rotations[1]:\n                continue\n            # if the current index is within the range and rotation range, return the element\n            return arr[i]\n    # if no element is found, return None\n    return None",
        "test": "assert find_Element([1,2,3,4,5], [0,2,4], [1,2,3,4,5], 1) == 3",
        "num_ids": 1367
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\b\\w*[Pp]\\w*\\b')\n    matches = re.findall(pattern, words)\n    if len(matches) == 0:\n        return None\n    return matches[0], matches[1]",
        "test": "assert start_withp(['elephant', 'giraffe', 'zebra', 'bat', 'goat']) == ['elephant', 'giraffe']",
        "num_ids": 761
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Check if index is greater than n or k is greater than n-index\n    if index > n or k > n-index:\n        return 0\n\n    # Initialize variables\n    max_so_far = float('-inf')\n    current_sum = 0\n\n    # Loop through the a subarray of size k\n    for i in range(index, index+k):\n        current_sum = a[i] + current_sum\n        max_so_far = max(max_so_far, current_sum)\n\n    return max_so_far\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9], 10, 2, 5) == 25",
        "num_ids": 1540
    },
    {
        "number": 307,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Function to get a colon of a tuple.\n    '''\n\n    # Copy the tuple\n    colons = deepcopy(tuplex)\n\n    # Add new colon elements\n    for i in range(m):\n        colons.append(None)\n\n    # Add colon elements to the right of the original tuple\n    for i in range(n-m):\n        for j in range(i+1, m):\n            colons[j] = colons[j-1]\n\n    return colons",
        "test": "assert colon_tuplex((),0,2) == ()",
        "num_ids": 793
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # find the product of the selected factor from each list\n    product1 = nums1[0] * nums2[0]\n    product2 = nums1[1] * nums2[1]\n    \n    # find the sum of the products of the selected factors from each list\n    product_sum = product1 + product2\n    \n    # initialize a list to store the largest product found so far\n    largest_product = []\n    \n    # loop through each element in the product_sum list\n    for i in range(len(product_sum)):\n        # if the product_sum element is greater than the current largest product, update the largest product\n        if product_sum[i] > largest_product[-1]:\n            largest_product.append(product_sum[i])\n    \n    # return the list of the largest products found\n    return largest_product",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 2) == 120",
        "num_ids": 1562
    },
    {
        "number": 309,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(1, 5) == 5",
        "num_ids": 313
    },
    {
        "number": 310,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"hello world\") == (\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\")",
        "num_ids": 445
    },
    {
        "number": 311,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def set_left_most_unset_bit(n):\n    # iterate through the binary representation of the number\n    for i in range(32):\n        # check if the bit is 1 and not already set\n        if n % 2 == 0 and n // 2!= i:\n            # set the leftmost unset bit\n            n = n - 2 ** i\n            # set the bit to 1\n            n = n | (1 << i)\n            # break out of the loop\n            break\n    # return the modified number\n    return n",
        "test": "assert set_left_most_unset_bit(1) == 1",
        "num_ids": 648
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (3.141592653589793) * (r ** 2) * h\n    return volume",
        "test": "assert volume_cone(2,1) == 12.566370614359172",
        "num_ids": 513
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    result = 1\n    while result <= n:\n        if n % result == 0:\n            return result\n        result *= 2\n    return result",
        "test": "assert highest_Power_of_2(0) == 1 # zero should have a power of 2 of 1",
        "num_ids": 709
    },
    {
        "number": 389,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_lucas(n):\n    if n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + n",
        "test": "assert find_lucas(10) == 55",
        "num_ids": 449
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] += string\n    return list_\n",
        "test": "assert add_string([], 'Hello') == ['Hello']",
        "num_ids": 1506
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    # create a dictionary to store the list items as key-value pairs\n    d = {}\n    \n    # iterate through each list and convert it to a dictionary\n    for i in range(len(l1)):\n        for j in range(len(l2[i])):\n            d[(l1[i], l2[i][j])] = l3[i][j]\n    \n    return d",
        "test": "assert convert_list_dictionary([],[],[]) == {}",
        "num_ids": 1217
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)",
        "test": "assert get_max_sum(5) == 25",
        "num_ids": 1072
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = input_list[0]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = input_list[i]\n    return max_length",
        "test": "assert max_length_list([1, 2, 3, 4, 5, 6]) == [5, 6]",
        "num_ids": 806
    },
    {
        "number": 394,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)",
        "test": "assert check_distinct(('apple', 'banana', 'cherry')) == True",
        "num_ids": 421
    },
    {
        "number": 395,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeating character in a given string.\n    '''\n\n    # initialize an empty string to store the non-repeating characters\n    non_repeating = \"\"\n\n    # iterate through each character in the string\n    for char in str1:\n        # if the character is not in the non-repeating string, add it to it\n        if char not in non_repeating:\n            non_repeating += char\n\n    # return the first non-repeating character\n    return non_repeating[0] if non_repeating else None",
        "test": "assert first_non_repeating_character(\"a\") == \"a\"",
        "num_ids": 935
    },
    {
        "number": 396,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # Check if the string matches the regex pattern\n    if re.match(regex, string): \n        return True\n    else: \n        return False",
        "test": "assert check_char(\"abc\") == False",
        "num_ids": 669
    },
    {
        "number": 397,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers\n    a_sorted = sorted([a, b, c])\n    \n    # Calculate the length of the sorted list\n    n = len(a_sorted)\n    \n    # Calculate the median\n    if n % 2 == 0:\n        # If the list has an even number of elements, the median is the average of the two middle numbers\n        median = (a_sorted[n//2] + a_sorted[n//2-1]) / 2\n    else:\n        # If the list has an odd number of elements, the median is the middle number\n        median = a_sorted[n//2]\n    \n    return median",
        "test": "assert median_numbers(1,2,3) == 2, \"Median is incorrect\"",
        "num_ids": 807
    },
    {
        "number": 398,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(map(int, str(num)))\n    return total_sum",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15, \"sum_of_digits([1, 2, 3, 4, 5]) should return 15\"",
        "num_ids": 728
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\n    Arguments:\n    test_tup1 -- a tuple containing the first element to be xor-ed with the second element\n    test_tup2 -- a tuple containing the second element to be xor-ed with the first element\n\n    Returns:\n    The result of the bitwise xor operation on the two input tuples.\n\n    Example:\n    >>> bitwise_xor((1, 2, 3), (4, 5, 6))\n    0\n    '''\n    return test_tup1[0] ^ test_tup2[1]",
        "test": "assert bitwise_xor((0, 0, 0, 0, 0), (0, 0, 0, 0, 0)) == (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)",
        "num_ids": 1088
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def extract_freq(test_list):\n    '''\n    Extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 746
    },
    {
        "number": 401,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    # Perform index wise addition of tuple elements in the given two nested tuples\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup",
        "test": "assert add_nested_tuples((1, 2), (3, 4)), (4, 6)",
        "num_ids": 931
    },
    {
        "number": 404,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a, b)",
        "test": "assert minimum(1,2) == 1",
        "num_ids": 301
    },
    {
        "number": 405,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Check whether the element in tuplex exists in tuple1.\n    '''\n    for element in tuplex:\n        if element == tuple1:\n            return True\n    return False",
        "test": "assert check_tuplex((1,2,3),(4,5,6)) == False",
        "num_ids": 499
    },
    {
        "number": 406,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Initialize a flag variable to store whether the number is even or odd\n    parity = False \n\n    # If the number is even, set the flag to True\n    if x % 2 == 0: \n        parity = True \n\n    # If the number is odd, set the flag to False\n    else: \n        parity = False \n\n    # Return the parity flag\n    return parity",
        "test": "assert find_Parity(13) == 0, \"Test 2: Odd number should return 0\"",
        "num_ids": 645
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def rearrange_bigger(n):\n    while True:\n        # Create a new number by rearranging the digits of n\n        rearranged = str(int(n) % 10) + str(int(n / 10) % 10) + str(int(n / 100) % 10)\n        # Check if the new number is greater than n\n        if int(n) > int(rearranged):\n            n = rearranged\n        else:\n            break\n    return int(n)",
        "test": "assert rearrange_bigger(10) == 10",
        "num_ids": 885
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def k_smallest_pairs(nums1, nums2, k):\n    # Create a max heap to store the numbers with their corresponding indices\n    max_heap = []\n\n    # Create a dictionary to store the numbers and their indices\n    num_dict = {}\n\n    # Iterate through the first array and add elements to the max heap\n    for i, num in enumerate(nums1):\n        heapq.heappush(max_heap, (num, i))\n\n        # If the heap size is greater than or equal to k, extract the smallest pair\n        if len(max_heap) >= k:\n            # Extract the smallest pair\n            pair = heapq.heappop(max_heap)\n\n            # Update the dictionary with the extracted pair\n            num_dict[pair[0]] = pair[1]\n\n            # If the size of the dictionary is greater than or equal to k, remove the smallest number from the max heap\n            if len(num_dict) >= k:\n                heapq.heappop(max_heap)\n\n    # Iterate through the second array and find the k smallest pairs\n    for i, num in enumerate(nums2):\n        # Check if the number exists in the dictionary\n        if num in num_dict:\n            # If it does, add it to the result list\n            result.append((num, num_dict[num]))\n\n            # If the result list has more than k pairs, remove the pair with the smallest element\n            if len(result) >= k:\n                del result[0]\n\n    return result",
        "test": "assert k_smallest_pairs([1,2,3], [4,5,6], 3) == ([1, 5], [2, 6], [3, 4])",
        "num_ids": 1842
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # initialize minimum product as negative infinity\n    min_product = float('-inf')\n\n    # iterate over each tuple in the list\n    for i in range(len(list1)):\n        # iterate over each tuple in the remaining list\n        for j in range(i + 1, len(list1)):\n            # calculate the product between the two tuples\n            product = list1[i][0] * list1[j][1]\n\n            # if the product is the minimum product, update it\n            if product < min_product:\n                min_product = product\n\n    # return the minimum product\n    return min_product",
        "test": "assert min_product_tuple([1, 2, 3, 4]) == 24",
        "num_ids": 1347
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    min_val = listval[0]\n    for num in listval:\n        if num < min_val:\n            min_val = num\n            \n    return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 728
    },
    {
        "number": 411,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Converts the given snake case string to camel case string.\n    '''\n    return re.sub(r'_(\\w)', lambda x: x.group(1).upper(), word)\n",
        "test": "assert snake_to_camel(\"snake_case_word\") == \"snakeCaseWord\"",
        "num_ids": 591
    },
    {
        "number": 412,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def remove_odd(lst):\n    return [num for num in lst if num % 2!= 0]",
        "test": "assert remove_odd([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 582
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def extract_nth_element(list1, n):\n    if n == 1:\n        return list1[0]\n    elif n > len(list1):\n        return None\n    else:\n        return list1[n-1]",
        "test": "assert extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 2) == ('b', 2)",
        "num_ids": 748
    },
    {
        "number": 414,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3,4,5], [1,2,3,4,5]) == True",
        "num_ids": 703
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n                \n    return max_product, max_pair",
        "test": "assert max_Product([1, 2, 3, 4, 5, 6]) == 120",
        "num_ids": 628
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Get the first element of the first tuple in the list\n    common_element = Input[0][0]\n    # Iterate over the remaining tuples in the list\n    for i in range(1, len(Input)):\n        # Check if the first element of the current tuple is equal to the common element\n        if Input[i][0] == common_element:\n            # If they are equal, update the common element\n            common_element = Input[i][0]\n    # Return the common first element\n    return common_element",
        "test": "assert group_tuples((1,2),(3,4),(5,6)) == (1,2)",
        "num_ids": 939
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return lst[0]",
        "test": "assert Find_Max([1]) == 1, \"The element of the list having maximum length should be 1\"",
        "num_ids": 597
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(\"Total sum:\", total * len(list1))",
        "test": "assert round_and_sum([10, 15, 20, 25, 30]) == 600",
        "num_ids": 750
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i**3\n    return cube_sum",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 595
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Create a new tuple with the desired delimiter\n    new_tup = tuple(delimiter.join(map(str, test_tup)) for delimiter in delimiters)\n    return new_tup",
        "test": "assert concatenate_tuple(('a', 'b', 'c')) == 'abcd'",
        "num_ids": 570
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    total = 0  # variable to keep track of the sum of cubes\n    count = 0  # variable to keep track of the number of cubes\n\n    # loop to find the sum of cubes of first n natural numbers\n    for i in range(1, n+1):  \n        total += i**3  # calculating sum of cube of first n natural numbers\n        count += 1  # counting number of cubes of first n natural numbers\n\n    # finding average of cubes of first n natural numbers\n    if count == 0:\n        return \"There are no natural numbers of which we can find the average.\"\n    else:\n        return total / count  # returning average of cubes of first n natural numbers\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 690
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]",
        "test": "assert extract_rear(('a', 'b', 'c', 'd', 'e', 'f')) == ('f')",
        "num_ids": 503
    },
    {
        "number": 425,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] in list1[:i]:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, 4, 5], 6) == 0",
        "num_ids": 587
    },
    {
        "number": 426,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Filter odd numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 527
    },
    {
        "number": 427,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Split the input string into year, month, and day\n    year, month, day = re.split('-', dt)\n    \n    # Format the date as dd-mm-yyyy\n    new_dt = f\"{day}-{month}-{year}\"\n    \n    return new_dt",
        "test": "assert change_date_format('2022-02-03') == '03-02-2022'",
        "num_ids": 864
    },
    {
        "number": 428,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    for gap in range(n // 2):\n        for i in range(gap, n):\n            min_idx = i\n            for j in range(i, n):\n                if my_list[j] < my_list[min_idx]:\n                    min_idx = j\n            my_list[i], my_list[min_idx] = my_list[min_idx], my_list[i]\n    return my_list",
        "test": "assert shell_sort([5, 2, 7, 1, 9]) == [1, 2, 5, 7, 9]",
        "num_ids": 1082
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Get the lengths of the tuples\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n\n    # Initialize an empty list to store the elementwise and tuples\n    result = []\n\n    # Iterate through the tuples\n    for i in range(length1):\n        # Iterate through the elements of each tuple\n        for j in range(length2):\n            # If the element at index i and j in the first tuple are equal,\n            # add them to the result list and break out of the inner loop\n            if test_tup1[i] == test_tup2[j]:\n                result.append((test_tup1[i], test_tup2[j]))\n                break\n\n    # Return the result list\n    return result",
        "test": "assert and_tuples((\"a\", \"b\", \"c\"), (\"1\", \"2\", \"3\", \"4\")) == ((\"a\", \"1\"), (\"b\", \"2\"), (\"c\", \"3\"), (\"4\", \"\"))",
        "num_ids": 1175
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola with coefficients a, b, and c.\n    \"\"\"\n    if a + b == 0:\n        # Parabola is a line\n        directrix = [0]\n    else:\n        directrix = [c/b - a/a, a/b]\n\n    return directrix",
        "test": "assert parabola_directrix(2, 3, 4) == (-3, 2)",
        "num_ids": 585
    },
    {
        "number": 431,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of elements in list1\n    set1 = set(list1)\n\n    # create a set of elements in list2\n    set2 = set(list2)\n\n    # compare the two sets\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False",
        "test": "assert common_element([1, 2, 3], [1, 2, 3]) == True",
        "num_ids": 704
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the areas of the trapezium\n    area1 = (base1 + base2) * 0.5\n    area2 = (height * 0.5) ** 2\n\n    # Calculate the median length of the trapezium\n    median_length = (area1 + area2) ** 0.5\n\n    return median_length",
        "test": "assert median_trapezium(2,3,4) == 4",
        "num_ids": 802
    },
    {
        "number": 433,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 684
    },
    {
        "number": 434,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba+'  # matches one or more a's\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one(\"aabbcb\") == True",
        "num_ids": 1597
    },
    {
        "number": 435,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(123) == 3, \"The last digit of 123 is not 3\"",
        "num_ids": 387
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i >= 0:\n            neg_list.append(i)\n    return neg_list\n",
        "test": "assert neg_nos([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4]",
        "num_ids": 521
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and returns a new string with all odd characters removed.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            result += char\n    return result",
        "test": "assert remove_odd(\"12345\") == \"12345\"",
        "num_ids": 437
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Count the number of bidirectional tuple pairs in a list.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 700
    },
    {
        "number": 439,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "test": "assert multiple_to_single([1]) == 1",
        "num_ids": 512
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the pattern to find the adverb\n    pattern = r'\\b(a|an|an\\'t|as|at|but|enough|even|for|if|in|is|its|may|might|not|of|on|onto|or|since|than|that|the|than\\'t|to|too|twas|was|were|will|with|would)\\b'\n    # Use the findall() method to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    # Loop through all the matches and add the adverbs and their positions to the list\n    for match in matches:\n        adverb = match[0]\n        position = match.start()\n        adverbs.append((adverb, position))\n    # Return the list of adverbs and their positions\n    return adverbs",
        "test": "assert find_adverb_position(\"The dog slept on the mat\") == \"The dog slept on the mat\"",
        "num_ids": 1706
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3",
        "test": "assert surfacearea_cube(3) == 27, \"The surface area of a cube of side length 3 is incorrect.\"",
        "num_ids": 371
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total_count = 0\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            total_count += 1\n            if num == 1:\n                positive_count += 1\n    if total_count == 0:\n        return 0\n    return positive_count / total_count",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1/5",
        "num_ids": 790
    },
    {
        "number": 443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')  # initializing max_neg to negative infinity\n\n    for num in list1:\n        if num < 0:\n            max_neg = max(max_neg, num)\n\n    return max_neg",
        "test": "assert largest_neg([1, 2, 3, 4, 5]) == 5",
        "num_ids": 592
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Trim each tuple in the given list by k.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list",
        "test": "assert trim_tuple([], 2) == []",
        "num_ids": 689
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i])\n    return result_tup",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (12, 22, 32)",
        "num_ids": 1364
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup).most_common(len(lst))",
        "test": "assert count_Occurrence((\"a\", \"b\"), [\"a\", \"b\", \"a\"]) == Counter([\"a\", \"b\"])  # Test case 2: All elements in list",
        "num_ids": 779
    },
    {
        "number": 447,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 534
    },
    {
        "number": 448,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum",
        "test": "assert cal_sum(1) == 1",
        "num_ids": 497
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(l) > 1:\n        l = random.sample(l, l[-1])\n    return l[-1]\n",
        "test": "assert extract_string(\"hello world\", 3) == \"he\"",
        "num_ids": 503
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_whitespaces(\"\") == \"\"",
        "num_ids": 377
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= 0:\n        return 0\n    else:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount",
        "test": "assert loss_amount(100, 100) == 0",
        "num_ids": 509
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            even_sum += i\n    return even_sum",
        "test": "assert sumofFactors(15) == 45",
        "num_ids": 683
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z][zZ]{1,}\\b')\n    matches = pattern.findall(text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nmatches = text_match_wordz(text)\nprint(matches)  # Output: ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog.']",
        "test": "assert text_match_wordz(\"Hello, world! This is a sample text that contains 'z'.\") == \"z\"",
        "num_ids": 696
    },
    {
        "number": 455,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in [2, 4, 6, 9, 11]:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(1) == False",
        "num_ids": 766
    },
    {
        "number": 456,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist) // 2):\n        stringlist[i], stringlist[len(stringlist) - 1 - i] = stringlist[len(stringlist) - 1 - i], stringlist[i]\n    return stringlist",
        "test": "assert reverse_string_list([]) == []",
        "num_ids": 594
    },
    {
        "number": 457,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    sublist = []\n    for i in range(len(lst)):\n        sublist.append(lst[i])\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return sublist",
        "test": "assert Find_Min([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 961
    },
    {
        "number": 458,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def rectangle_area(l, b):\n    area = l * b\n    return area",
        "test": "assert rectangle_area(3,7) == 21",
        "num_ids": 340
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)",
        "test": "assert remove_uppercase(\"ABCD EFG\") == \"ABCD EFG\"",
        "num_ids": 491
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n",
        "test": "assert Extract([]) == []",
        "num_ids": 412
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count",
        "test": "assert upper_ctr(\"\") == 0",
        "num_ids": 398
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    def backtrack(index, result):\n        if index == len(list1):\n            result.append(list1[:])\n            return\n        for i in range(index, len(list1)):\n            if i > index and list1[i] == list1[i-1]:\n                continue\n            list1[i], list1[index] = list1[index], list1[i]\n            backtrack(index+1, result)\n            list1[i], list1[index] = list1[index], list1[i]\n    \n    result = []\n    backtrack(0, result)\n    return result",
        "test": "assert combinations_list([1, 2, 3, 4]) == [(1, 2, 3, 4), (1, 2, 4, 3), (1, 3, 2, 4), (1, 3, 4, 2), (1, 4, 2, 3), (1, 4, 3, 2), (2, 1, 3, 4), (2, 1, 4, 3), (2, 3, 1, 4), (2, 3, 4, 1), (2, 4, 1, 3), (2, 4, 3, 1), (3, 1, 2, 4), (3, 1, 4, 2), (3, 2, 1, 4), (3, 2, 4, 1), (3, 4, 1, 2), (3, 4, 2, 1), (4, 1, 2, 3), (4, 1, 3, 2), (4, 2, 1, 3), (4, 2, 3, 1), (4, 3, 1, 2), (4, 3, 2, 1)]",
        "num_ids": 1471
    },
    {
        "number": 463,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "test": "assert max_subarray_product([-1, -2, -3, -4]) == -1",
        "num_ids": 830
    },
    {
        "number": 464,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # Check if all keys are the same\n    if set(dict.keys())!= set(dict.values()):\n        return False\n    \n    # Check if all values are of the same type\n    if all(isinstance(dict[k], v) for k, v in dict.items()):\n        return True\n    \n    # Check if all values are within the specified range\n    if not all(k <= v <= n for k, v in dict.items()):\n        return False\n    \n    return True",
        "test": "assert check_value({\"a\": 1, \"b\": 2, \"c\": 3}, 2) == False",
        "num_ids": 725
    },
    {
        "number": 465,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n\n    # create a new dictionary without empty items\n    new_dict = {k:v for k,v in dict1.items() if v}\n    \n    return new_dict",
        "test": "assert drop_empty({\"a\": 1, \"b\": 2, \"c\": 3}) == {\"a\": 1, \"b\": 2, \"c\": 3}",
        "num_ids": 568
    },
    {
        "number": 468,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    n = len(arr)\n    max_product = arr[0] * arr[1]\n\n    for i in range(2, n):\n        curr_product = arr[i] * max_product\n        if curr_product > max_product:\n            max_product = curr_product\n\n    return max_product",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 830
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(zip(test_tup, test_tup[1:]))",
        "test": "assert add_pairwise((1, 2, 3, 4)) == (1, 3, 5, 7)",
        "num_ids": 962
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result",
        "test": "assert find_remainder([1, 2, 3, 4, 5], 12) == 0",
        "num_ids": 585
    },
    {
        "number": 472,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_Consecutive(l): \n    # Initialize the flag variable to true \n    flag = True \n\n    # Traverse through the list and check if the next element is equal to the current element.\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]: \n            # If true, flag is set to false and the function returns true \n            flag = False \n            return flag \n    # If flag is still true after traversing through the entire list, flag is set to false and the function returns true \n    return flag ",
        "test": "assert check_Consecutive([1, 2, 2, 3, 4, 4]) == False",
        "num_ids": 647
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    return tuple(set(test_list1).intersection(test_list2))",
        "test": "assert tuple_intersection([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) == (2, 3, 4, 5)",
        "num_ids": 820
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Replace characters in a string with a new character.\n    '''\n    newstr = ''\n    for char in str1:\n        if char == ch:\n            newstr += newch\n        else:\n            newstr += char\n    return newstr",
        "test": "assert replace_char(\"Hello world\", \"l\", \"X\") == \"HXXXlo world\"",
        "num_ids": 620
    },
    {
        "number": 475,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 25,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {}\n    for key, value in dict1.items():\n        if key not in sorted_dict:\n            sorted_dict[key] = value\n        else:\n            sorted_dict[key] += value\n    return sorted_dict",
        "test": "assert sort_counter({}) == {}",
        "num_ids": 593
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def big_sum(nums):\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest + smallest",
        "test": "assert big_sum([-1, -2, -3, -4, -5]) == -15, \"The sum of the largest and smallest value in the array [-1, -2, -3, -4, -5] should be -15.\"",
        "num_ids": 815
    },
    {
        "number": 477,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"Hello, World!\") == \"hello, world!\"",
        "num_ids": 286
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)",
        "test": "assert remove_lowercase(\"\") == \"\"",
        "num_ids": 466
    },
    {
        "number": 479,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    digit = n % 10\n    return digit",
        "test": "assert first_Digit(9876543210) == 0 # test case 2",
        "num_ids": 557
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2 == 1:\n            result.append(num)\n    return result",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 542
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Initialize the variables\n    sum_cubes = 0\n    sum_first_n = 0\n\n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_first_n += i\n\n    # Calculate the difference between the sum of cubes and sum of the first n natural numbers\n    return sum_cubes - sum_first_n",
        "test": "assert difference(10) == 495",
        "num_ids": 784
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] == 1:\n                count += 1\n    return count ",
        "test": "assert find_Odd_Pair([1,2,3,4,5], 5) == 2, \"The number of pairs with odd xor values should be 2\"",
        "num_ids": 887
    },
    {
        "number": 557,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def toggle_string(string):\n    '''\n    Function to toggle the case of all characters in a string.\n    '''\n    return string.upper()",
        "test": "assert toggle_string(\"Python is cool\") == \"NoPthO, siOnCiOn!\"",
        "num_ids": 549
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Function to find the sum of the per-digit difference between two integers.\n\n    Args:\n        n1: The first integer.\n        n2: The second integer.\n\n    Returns:\n        The sum of the per-digit difference between the two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    n1_sum = sum(int(digit) for digit in n1_str)\n    n2_sum = sum(int(digit) for digit in n2_str)\n\n    difference = n1_sum - n2_sum\n\n    return difference\n",
        "test": "assert digit_distance_nums(999, 999) == 0",
        "num_ids": 898
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    max_ending_here = current_sum\n\n    for i in range(1, size):\n        current_sum = max(current_sum + a[i], a[i])\n        max_ending_here = max(max_ending_here, current_sum)\n        max_sum = max(max_sum, max_ending_here)\n\n    return max_sum",
        "test": "assert max_sub_array_sum([-2, -3, -1], 3) == -1",
        "num_ids": 1195
    },
    {
        "number": 560,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union = set1.union(set2)\n    sorted_union = sorted(union)\n    return sorted_union",
        "test": "assert union_elements(('a', 'b', 'c'), ('d', 'e', 'f')) == sorted(['a', 'b', 'c', 'd', 'e', 'f'])",
        "num_ids": 989
    },
    {
        "number": 562,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    \n    for element in lst:\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n            \n    return max_length",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 584
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Remove leading and trailing whitespace from the string\n    text = text.strip()\n\n    # Use a regular expression to find all values between quotation marks\n    values = re.findall(r'\\\".*\\\"', text)\n\n    return values",
        "test": "assert extract_values(\"This is a test string \\\" with quotes \\\" and an example. \") == \"with quotes\"",
        "num_ids": 668
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    if n <= 1:\n        return 0\n    else:\n        count = 0\n        for i in range(n):\n            for j in range(n-i-1):\n                if arr[j] == arr[j+1]:\n                    count += 1\n        return count",
        "test": "assert count_Pairs([1,2,3,4,5], 4) == 0, \"Test 1: Empty list returns 0.\"",
        "num_ids": 688
    },
    {
        "number": 565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()",
        "test": "assert split(\"12345\") == (\"1\", \"2\", \"3\", \"4\", \"5\")",
        "num_ids": 490
    },
    {
        "number": 566,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))",
        "test": "assert sum_digits(12345) == 1 + 2 + 3 + 4 + 5 # correct",
        "num_ids": 445
    },
    {
        "number": 567,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def issort_list(list1):\n    '''\n    Check whether a specified list is sorted in ascending or descending order.\n    '''\n    for i in range(len(list1)):\n        # Compare adjacent elements\n        if list1[i] < list1[i+1]:\n            return False\n        elif list1[i] > list1[i+1]:\n            return True\n    return True",
        "test": "assert issort_list([1, 3, 2, 5, 4, 6]) == False",
        "num_ids": 751
    },
    {
        "number": 568,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 479
    },
    {
        "number": 569,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def sort_sublists(lst):\n    for i in range(len(lst)):\n        lst[i] = sorted(lst[i])\n    return lst",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 909
    },
    {
        "number": 572,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # initialize a dictionary to store the unique numbers\n    unique_nums = {}\n    # loop through each list and add the unique numbers to the dictionary\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums[num] = 1\n    # loop through the unique numbers and add their values to a new list\n    new_nums = []\n    for key in unique_nums:\n        new_nums.append(key)\n    # return the new list of unique numbers\n    return new_nums",
        "test": "assert two_unique_nums([1, 2, 3, 2, 1]) == [1, 2, 3]",
        "num_ids": 955
    },
    {
        "number": 573,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def unique_product(list_data):\n    '''\n    Given a list of integers, return the product of their unique numbers.\n    '''\n    product = 1\n    for num in set(list_data):\n        product *= num\n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 785
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r**2*h",
        "test": "assert surfacearea_cylinder(1,1) == 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644281097566593344612847564823378678316149405070572410360714885187701372804076212021006640587496204589252846668828397224137565743692284635566256334462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428109756659334461284756482337867831614940507057241036071488518770137280407621202100664058749620458925284666882839722413756574369228463556625633446264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442810975665933446128475648233786783161494050705724103607148851877013728040762120210066405874962045892528466688283972241375657436922846355662563344626433832795",
        "num_ids": 1430
    },
    {
        "number": 576,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_Sub_Array(A,B): \n    if len(A) > len(B): \n        return False\n    elif len(A) < len(B): \n        return False\n    \n    for i in range(len(A)): \n        if A[i]!= B[i]: \n            return False\n    \n    return True",
        "test": "assert not is_Sub_Array([1,2,3,4,5], [5,5,5,5,5])",
        "num_ids": 945
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize the result to 1\n    result = 1\n    \n    # loop through the digits of the number and compute the factorial\n    while n > 0:\n        result *= n % 10\n        n //= 10\n    \n    # return the last digit of the factorial\n    return result",
        "test": "assert last_Digit_Factorial(5) == 5",
        "num_ids": 649
    },
    {
        "number": 578,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n\n    # Concatenate the lists and return the result\n    return list1 + list2 + list3",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 748
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # get the sizes of the tuples\n    size1 = len(test_tup1)\n    size2 = len(test_tup2)\n\n    # initialize an empty list to store the dissimilar elements\n    dissimilar = []\n\n    # iterate through each tuple in the two tuples\n    for i in range(size1):\n        # check if the current tuple is not in the second tuple\n        if i not in test_tup2:\n            # if it is, check if it is the same as the first tuple\n            if test_tup1[i] == test_tup2[0]:\n                # if it is, add it to the list of dissimilar elements\n                dissimilar.append(test_tup1[i])\n\n    # return the list of dissimilar elements\n    return dissimilar",
        "test": "assert find_dissimilar((1, 2), (3, 4)) == []",
        "num_ids": 998
    },
    {
        "number": 580,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Declare an empty list to store the even elements\n    even_list = []\n    # Initialize a counter variable to count the number of even elements\n    count = 0\n    # Loop through each tuple element and check if it is an odd number\n    for element in test_tuple:\n        if isinstance(element, (list, tuple)):\n            # Check if the element is a nested tuple or list\n            if isinstance(element, tuple):\n                # Recursively call the even_ele function on the nested tuple\n                result = even_ele(element, even_fnc)\n                # If the result is not None, add it to the even_list\n                if result is not None:\n                    even_list.append(result)\n            else:\n                # Recursively call the even_ele function on the nested list\n                result = even_ele(element, even_fnc)\n                # If the result is not None, add it to the even_list\n                if result is not None:\n                    even_list.append(result)\n        elif element % 2 == 0:\n            # If the element is even, add it to the even_list\n            even_list.append(element)\n        # Increment the counter variable for each even element\n        count += 1\n    # Return the even_list with uneven elements removed\n    return even_list",
        "test": "assert even_ele((1,2,3,4,5), lambda x: x % 2 == 0)",
        "num_ids": 1124
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    return area",
        "test": "assert surface_Area(2,2) == 4",
        "num_ids": 400
    },
    {
        "number": 582,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key, value in dict1.items():\n        if value is None:\n            return False\n    return True",
        "test": "assert my_dict({}) == True",
        "num_ids": 327
    },
    {
        "number": 583,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = int(num)\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    catalan = 1\n    for i in range(2, n+1):\n        catalan *= i\n    return catalan\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 445
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Function to find the first adverb ending with ly and its positions in a given string.\n\n    Args:\n        text (str): A string containing a sentence.\n\n    Returns:\n        A list of tuples containing the starting and ending positions of the adverbs.\n    '''\n\n    # Find all the adverbs in the string\n    matches = re.finditer(r'\\b(?:a\\.?)(?:ly|lys|lyve|lyves|lyd(?:e|es))\\b', text)\n\n    # Initialize the list to store the starting and ending positions of adverbs\n    adverbs = []\n\n    # Iterate over the matches and extract the starting and ending positions\n    for match in matches:\n        adverbs.append((match.start(), match.end()))\n\n    # If no adverbs were found, return an empty list\n    if len(adverbs) == 0:\n        return []\n\n    # Return the list of tuples containing the starting and ending positions of adverbs\n    return adverbs",
        "test": "assert find_adverbs(\"She is learning how to code.\") == [('ly', 5), ('ly', 11)]",
        "num_ids": 1137
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap of size n\n    max_heap = [(-item, item) for item in items]\n    heapq.heapify(max_heap)\n\n    # Find the n most expensive items\n    result = []\n    for _ in range(n):\n        # Extract the max item from the heap\n        item, price = heapq.heappop(max_heap)\n        result.append(price)\n\n    return result",
        "test": "assert expensive_items([1,2,3,4,5],1) == [5]",
        "num_ids": 1059
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # get the length of the list\n    n_list = len(l)\n    \n    # check if n is greater than the length of the list\n    if n > n_list:\n        print(\"Error: n must be less than or equal to the length of the list.\")\n        return\n\n    # create an empty list to store the first part\n    first_part = []\n\n    # loop through the list and add the first part to the end\n    for i in range(n_list):\n        if i == n-1:\n            # add the current element to the first part list\n            first_part.append(l[i])\n        else:\n            # add the current element to the list\n            first_part.append(l[i])\n    \n    # return the first part list\n    return first_part",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 2) == [1, 2, 3, 4, 5]",
        "num_ids": 851
    },
    {
        "number": 587,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 360
    },
    {
        "number": 588,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize variables\n    max_num = nums[0]\n    min_num = nums[0]\n\n    # Loop through the list and update the max and min values\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n\n    # Return the difference between the max and min values\n    return max_num - min_num",
        "test": "assert big_diff([-1, -2, -3, -4, -5]) == 4",
        "num_ids": 723
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n = (a + b) // 2\n    count = 0\n    for i in range(1, n+1):\n        if i*i > n:\n            break\n        if i*i == n:\n            count += 1\n    return count",
        "test": "assert perfect_squares(1, 1) == 1",
        "num_ids": 668
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.radians(x)\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.degrees(cmath.atan2(y,x))\n    \n    return phi, r",
        "test": "assert polar_rect(3,4) == (3,4)",
        "num_ids": 669
    },
    {
        "number": 591,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = first_element\n    return newList",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 674
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def binomial_Coeff(n, k):\n    # Calculate the binomial coefficient recursively\n    def binomial(n, k):\n        if k == 0:\n            return 1\n        if k == 1:\n            return n\n        return n * binomial(n-1, k-1)\n    \n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum(n*binomial(n, k) for n in range(1, n+1))",
        "test": "assert binomial_Coeff(5, 2) == 10",
        "num_ids": 825
    },
    {
        "number": 593,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeros from the ip address\n    ip = ip.lstrip('0')\n    # Return the ip address without leading zeros\n    return ip",
        "test": "assert removezero_ip('1.1.1.1') == '1.1.1.1'",
        "num_ids": 657
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def diff_even_odd(lst):\n    '''\n    Find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for item in lst:\n        if item % 2 == 0:\n            if even is None:\n                even = item\n            elif even!= item:\n                break\n        elif item % 2 == 1:\n            if odd is None:\n                odd = item\n            elif odd!= item:\n                break\n    return even - odd",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 945
    },
    {
        "number": 595,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Given two binary strings, count the minimum number of swaps required to convert one binary number to the other.\n    '''\n    # Initialize counters for swaps and total number of swaps\n    swaps = 0\n    total_swaps = 0\n\n    # Iterate over each character of the first string and compare it with the corresponding character in the second string\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            # If the characters are different, increment the number of swaps and count the total swaps\n            swaps += 1\n            total_swaps += 1\n\n    return total_swaps",
        "test": "assert min_Swaps(\"1000101\", \"1010110\") == 3",
        "num_ids": 973
    },
    {
        "number": 596,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Find the size of the tuple in bytes\n    size = 0\n    for elem in tuple_list:\n        size += sys.getsizeof(elem)\n\n    return size",
        "test": "assert tuple_size(()) == 0 # An empty tuple has 0 size.",
        "num_ids": 522
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Find the kth element in arr1 and arr2 sorted in ascending order.\n    '''\n\n    # If k is greater than the length of the array, return None\n    if k > len(arr1) + len(arr2):\n        return None\n\n    # Sort both arrays in ascending order\n    arr1.sort()\n    arr2.sort()\n\n    # If k is less than the length of the first array, return the first element\n    if k < len(arr1):\n        return arr1[0]\n\n    # If k is less than the length of the first array plus the second array,\n    # return the first element of the first array\n    elif k < len(arr1) + len(arr2):\n        return arr1[0]\n\n    # If k is greater than the length of the first array plus the second array,\n    # return the last element of the second array\n    else:\n        return arr2[-1]",
        "test": "assert find_kth([4, 6, 8, 10, 12], [2, 4, 6, 8, 10], 2) == 4, \"find_kth should return 4 for arr1=[4, 6, 8, 10, 12], arr2=[2, 4, 6, 8, 10], k=2\"",
        "num_ids": 1495
    },
    {
        "number": 598,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    result = 0\n    temp = number\n    while temp > 0:\n        remainder = temp % 10\n        result += remainder ** 3\n        temp //= 10\n    if number == result:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(123456789) == False # the number 123456789 is not an armstrong number",
        "num_ids": 866
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum_average(n):\n    if n == 1:\n        return 1, 1\n    \n    total = 0\n    for i in range(n):\n        total += i\n    \n    average = total / n\n    \n    return total, average",
        "test": "assert sum_average(5) == 35",
        "num_ids": 556
    },
    {
        "number": 600,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a Python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(4) == True, \"is_Even(4) should return True\"",
        "num_ids": 385
    },
    {
        "number": 602,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    max_count = 0\n    max_char = ''\n    for char in freq:\n        if freq[char] > max_count:\n            max_count = freq[char]\n            max_char = char\n    \n    return max_char",
        "test": "assert first_repeated_char(\"abcd\") == \"a\"",
        "num_ids": 658
    },
    {
        "number": 603,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            lucids.append(i)\n    return lucids",
        "test": "assert get_ludic(0) == []",
        "num_ids": 809
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def reverse_words(s):\n    # Split the string into words\n    words = s.split()\n\n    # Reverse each word and join them back together\n    reversed_words = \" \".join(words[::-1])\n\n    return reversed_words",
        "test": "assert reverse_words(\"apple banana cherry\") == \"cherry banana apple\"",
        "num_ids": 511
    },
    {
        "number": 605,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # If the number is less than 2, it's not a prime number\n    if num < 2:\n        return False\n    \n    # Loop through all the numbers from 2 to the square root of the given number\n    for i in range(2, int(num**0.5)+1):\n        # If the given number is divisible by i, it's not a prime number\n        if num % i == 0:\n            return False\n    \n    # If all the numbers above loop are not divisible by any number, the number is a prime number\n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 540
    },
    {
        "number": 606,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)",
        "test": "assert radian_degree(0) == 0.0",
        "num_ids": 430
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Search a string for a regular expression pattern and return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        match = matches[0]\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        return match, start_index, end_index\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"This is a sample string with literals\", r\"(\\w+)\")[0] == \"This\"",
        "num_ids": 985
    },
    {
        "number": 608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (n*bell_Number(n-1))\n    else:\n        return ((n+1)*bell_Number(n-1))\n",
        "test": "assert bell_Number(2) == 10",
        "num_ids": 666
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) <= L:\n        print(\"Error: List is too short to remove k'th element\")\n        return []\n\n    k = L - 1\n    result = []\n    while k >= 0:\n        if k < len(list1) - 1:\n            result.append(list1[k])\n            k -= 1\n        else:\n            break\n    return result",
        "test": "assert remove_kth_element([], 1) == []",
        "num_ids": 1358
    },
    {
        "number": 611,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_col = float('-inf')  # initialize max_col to negative infinity\n    for row in test_list:\n        col_max = max(row[i] for i in range(len(row)))  # find the max of all elements in row\n        max_col = max(max_col, col_max)  # update max_col if necessary\n    return max_col",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 3) == 9, \"max_of_nth([1,2,3],[4,5,6],[7,8,9]], 3) == 9\"",
        "num_ids": 994
    },
    {
        "number": 612,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in range(len(lst)):\n        sublist = []\n        for j in range(len(lst[i])):\n            sublist.append(lst[i][j])\n        merged.append(sublist)\n    return merged",
        "test": "assert merge([[1,2],[3,4]]) == [[1,2],[3,4]]",
        "num_ids": 935
    },
    {
        "number": 614,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = [test_list[0]]\n    for i in range(1, len(test_list)):\n        cum_sum.append(cum_sum[-1] + test_list[i])\n    return cum_sum",
        "test": "assert cummulative_sum([1]) == [1]",
        "num_ids": 853
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = sum([sum(nums[i][j]) for i in range(len(nums)) for j in range(len(nums[i]))])\n    return [sum(nums[i][j]) / len(nums[i]) for i in range(len(nums)) for j in range(len(nums[i]))]",
        "test": "assert average_tuple((1,2,3,4)) == [2.0, 2.5, 3.0, 3.5]",
        "num_ids": 1034
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples must have the same length.\"\n\n    # initialize an empty list to store the modulo results\n    modulo_results = []\n\n    # loop through each element of the first tuple and perform the modulo operation on it\n    for i in range(len(test_tup1)):\n        modulo_results.append(test_tup1[i] % test_tup2[i])\n\n    # return the modulo results as a tuple\n    return tuple(modulo_results)",
        "test": "assert tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3)",
        "num_ids": 1129
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # check if the input is valid (number of steps and distance)\n    if not isinstance(steps, int) or not isinstance(d, int):\n        print(\"Error: Both input values must be integers.\")\n        return\n\n    # check if the distance is greater than the maximum step length\n    if d > steps:\n        print(\"Error: Distance must be less than or equal to the number of steps.\")\n        return\n\n    # define the loop variables\n    i = 0\n    jumps = 0\n\n    # loop through the steps\n    while i < steps:\n        # increment the index and add 1 to the jumps counter\n        i += 1\n        jumps += 1\n\n        # check if the distance has been reached\n        if i == d:\n            break\n\n    # return the number of jumps required\n    return jumps",
        "test": "assert min_Jumps(10, 5) == 5, \"The correct answer is 5.\"",
        "num_ids": 1012
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([1,2,3,4,5], [1,2,3,4,5]) == [1,1,1,1,1] # Test case 2: Dividing two lists of different sizes",
        "num_ids": 787
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(\" \", \"\")\n    num_list = list(test_str)\n    num_list.reverse()\n    test_str = \"\".join(num_list)\n    return test_str\n",
        "test": "assert move_num('hello') == 'olleh'",
        "num_ids": 684
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def largest_subset(a):\n    n = len(a)\n    # Create a set to store the elements of the subset\n    subset = set(range(n))\n    # Initialize a variable to keep track of the size of the largest subset\n    largest_subset_size = 1\n\n    # Iterate through the list of numbers\n    for i in range(1, n):\n        # Check if the current number is divisible by any of the previous elements in the subset\n        for j in range(i):\n            if a[i] % a[j]!= 0:\n                break\n        else:\n            # If the current number is not divisible by any of the previous elements,\n            # add it to the subset and update the largest_subset_size variable\n            subset.add(a[i])\n            if len(subset) > largest_subset_size:\n                largest_subset_size = len(subset)\n\n    return largest_subset_size",
        "test": "assert largest_subset([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1254
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # sort both arrays\n    arr1.sort()\n    arr2.sort()\n    \n    # get the length of the array\n    l = len(arr1)\n    \n    # find the middle index of the arrays\n    mid = l // 2\n    \n    # check if the length of the arrays is even\n    if l % 2 == 0:\n        # if so, return the average of the middle two elements\n        return (arr1[mid - 1] + arr1[mid]) / 2\n    else:\n        # if not, return the middle element\n        return arr1[mid]\n",
        "test": "assert get_median([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 5) == 3",
        "num_ids": 1313
    },
    {
        "number": 623,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n\n    # initialize a list to store the nth powers of each number\n    nth_powers = []\n\n    # loop through each number in the list\n    for num in nums:\n\n        # compute the nth power of the number\n        nth_power = num ** n\n\n        # append the nth power to the list\n        nth_powers.append(nth_power)\n\n    # return the list of nth powers\n    return nth_powers",
        "test": "assert nth_nums([1,2,3,4,5],3) == [1, 8, 27, 64, 125]",
        "num_ids": 718
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and converts it to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"HELLO WORLD\") == \"HELLO WORLD\"",
        "num_ids": 291
    },
    {
        "number": 625,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Traverse through the list and swap the first and last elements\n    # and return the modified list\n    firstElement = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = firstElement\n    return newList",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 603
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(1, r+1):\n        area += (r*i)/2\n    return area\n",
        "test": "assert triangle_area(1) == 0.5",
        "num_ids": 668
    },
    {
        "number": 627,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] == mid + 1:\n            return mid + 1\n\n        elif array[mid] > mid + 1:\n            end = mid - 1\n\n        else:\n            start = mid + 1\n\n    return start + 1",
        "test": "assert find_First_Missing([1,2,3,4,5]) == 3",
        "num_ids": 736
    },
    {
        "number": 628,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # Replace all spaces with '%20'\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"this is a test\") == \"this%20is%20a%20test\"",
        "num_ids": 379
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1,2,3,4,5]) == [2,4]",
        "num_ids": 556
    },
    {
        "number": 630,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if len(sub) > 0:\n        return sub\n    else:\n        if ele[0] > 0:\n            sub.append((ele[0] - 1, ele[1]))\n            return adjac(sub)\n        elif ele[0] < 0:\n            sub.append((ele[0] + 1, ele[1]))\n            return adjac(sub)\n        else:\n            if ele[1] > 0:\n                sub.append((ele[0], ele[1] - 1))\n                return adjac(sub)\n            elif ele[1] < 0:\n                sub.append((ele[0], ele[1] + 1))\n                return adjac(sub)\n            else:\n                return []",
        "test": "assert adjac((0,0), sub=[(0,0)]) == [(0,0)]",
        "num_ids": 1086
    },
    {
        "number": 631,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 581
    },
    {
        "number": 632,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n    return num_list",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 790
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Create a dictionary to store the xor of each pair of numbers in the array\n    xor_dict = {}\n    for i in range(n):\n        xor_dict[arr[i]] = xor_dict.get(arr[i], 0) ^ arr[i]\n    \n    # Find the sum of xor of all pairs of numbers in the array\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum ^= xor_dict.get(arr[i+1], 0) ^ arr[i] ^ arr[i+1]\n    \n    return xor_sum",
        "test": "assert pair_xor_Sum([3, 4, 5, 6, 7], 4) == 35  # Expected output: 35",
        "num_ids": 660
    },
    {
        "number": 635,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort a list of integers using the heapsort algorithm.\n\n    Returns the sorted list.\n    '''\n\n    # Initialize an empty heap with the first element of the iterable\n    heap = [iterable[0]]\n\n    # Iterate through the rest of the iterable and insert each element into the heap\n    for element in iterable[1:]:\n        hq.heappush(heap, element)\n\n    # Convert the heap to a list and return it\n    return [hq.heappop(heap) for _ in range(len(heap))]",
        "test": "assert heap_sort([4,2,1,3,5]) == [1,2,3,4,5]",
        "num_ids": 936
    },
    {
        "number": 637,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Returns True if the given amount has no profit and no loss, and False otherwise.\n\n    Args:\n        actual_cost: The cost of the sale.\n        sale_amount: The sale amount to check.\n\n    Returns:\n        A boolean value indicating whether the given amount has no profit and no loss.\n    '''\n\n    # Calculate the difference between actual cost and sale amount\n    diff = actual_cost - sale_amount\n\n    # Check if the difference is positive\n    if diff > 0:\n        return False\n\n    # Check if the difference is negative\n    elif diff < 0:\n        return True\n\n    # If the difference is 0, then there is no profit and no loss\n    else:\n        return False",
        "test": "assert noprofit_noloss(200, 100) == False",
        "num_ids": 877
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Calculate the wind chill index\n    f = (17.62 + 0.6215*t) * (v/100) ** (0.16)\n    fc = round(f)\n\n    return fc",
        "test": "assert wind_chill(15, 32) == 28",
        "num_ids": 1303
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if not name[0].islower()])",
        "test": "assert sample_nam(['a', 'b', 'c', 'd', 'e']) == 0",
        "num_ids": 837
    },
    {
        "number": 640,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)",
        "test": "assert remove_parenthesis(\"\") == \"\"",
        "num_ids": 557
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n += 1\n    for i in range(1, n):\n        if (i * (i + 1)) % n == 0:\n            return i\n    return None",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 689
    },
    {
        "number": 643,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define the pattern to match 'z' at the start and end of the word\n    pattern = r'\\b(?:\\w\\.\\s*)?z\\b'\n    \n    # Use the re.search() function to search for the pattern in the string\n    match = re.search(pattern, text)\n    \n    # Check if the search was successful and there is a match\n    if match:\n        # Check if the match occurs at the start or end of the word\n        if match.start() == 0 or match.start() == len(text) - match.group().count('z'):\n            return True\n        else:\n            # Check if the match occurs in the middle of the word\n            if match.start() > 0 and match.start() < len(text) - match.group().count('z'):\n                return True\n            else:\n                return False\n    else:\n        return False",
        "test": "assert text_match_wordz_middle(\"This is a test\") == False",
        "num_ids": 1014
    },
    {
        "number": 644,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    reversed_Array = []\n    for i in range(n):\n        if i > k-1:\n            break\n        reversed_Array.append(input[n-i-1])\n    return reversed_Array",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 6) == [5, 4, 3, 2, 1] # incorrect reverse of array up to 6",
        "num_ids": 937
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    output_tup = test_tup + (test_dict,)\n    return output_tup",
        "test": "assert add_dict_to_tuple((1, 2), {'a': 1, 'b': 2}) == (1, 2, {'a': 1, 'b': 2})",
        "num_ids": 707
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # initialize variables\n    max_cost = 0\n    max_path = []\n    visited = set()\n\n    # explore all possible paths\n    for i in range(N):\n        for j in range(N):\n            # compute cost of moving to the current cell\n            cost = cost[i][j]\n            \n            # explore left or down cell\n            if i > 0:\n                if j > 0:\n                    # compute cost of moving to left and down cell\n                    cost += cost[i-1][j-1]\n                else:\n                    # compute cost of moving to left cell\n                    cost += cost[i-1][j]\n            else:\n                # compute cost of moving to top cell\n                cost += cost[i][j-1]\n            \n            # explore right or up cell\n            if i < N-1:\n                if j < N-1:\n                    # compute cost of moving to right and up cell\n                    cost += cost[i+1][j+1]\n                else:\n                    # compute cost of moving to right cell\n                    cost += cost[i+1][j]\n            else:\n                # compute cost of moving to bottom cell\n                cost += cost[i][j+1]\n            \n            # explore outside the grid\n            if i < 0 or i >= N or j < 0 or j >= N:\n                continue\n            \n            # skip already visited cells\n            if (i,j) in visited:\n                continue\n            \n            # keep track of visited cells\n            visited.add((i,j))\n            \n            # compute average cost of the current path\n            if (i,j) not in max_path:\n                max_path.append((i,j))\n            else:\n                if cost > max_cost:\n                    max_cost = cost\n                    max_path = [(i,j)]\n            else:\n                if cost!= max_cost:\n                    max_path.append((i,j))\n    \n    # return the maximum average cost\n    return max_cost, max_path",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 5.0",
        "num_ids": 2291
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def filter_data(students,h,w):\n    filtered_students = []\n    for student, data in students.items():\n        if data[1] > h and data[2] > w:\n            filtered_students.append(student)\n    return filtered_students\n",
        "test": "assert filter_data({\"Alice\": (175, 80), \"Bob\": (180, 70), \"Charlie\": (170, 85)}, 175, 80) == {\"Bob\": (180, 70)}",
        "num_ids": 1173
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [2, 4, 5, 6, 7]) == [1, 3]",
        "num_ids": 1060
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def power_base_sum(base, power):\n    '''\n    Calculates the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 0\n    elif power % 2 == 0:\n        # even power, add base raised to power / 2\n        power_sum = power_base_sum(base, power // 2)\n        return sum(map(int, str(base ** (power // 2)))) + power_sum\n    else:\n        # odd power, add base raised to power\n        power_sum = power_base_sum(base, power - 1)\n        return sum(map(int, str(base ** power))) + power_sum",
        "test": "assert power_base_sum(5, 2) == 10",
        "num_ids": 767
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\\b\"[^\"]*\"\\b'\n    match = re.search(pattern, text1)\n    if match:\n        return match.group().strip('\"')\n    else:\n        return None",
        "test": "assert extract_quotation(\"This is a test. This is another test.\") == \"This is a test. This is another test.\"",
        "num_ids": 776
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return \"Error: Input tuple contains duplicate elements.\"\n    else:\n        N = len(test_tup)\n        result_tup = []\n        for i in range(N):\n            result_tup.append(test_tup[i] * test_tup[i+1])\n        return result_tup",
        "test": "assert multiply_elements((1,2,3,4)) == (1,2,3,4)",
        "num_ids": 896
    },
    {
        "number": 728,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 773
    },
    {
        "number": 730,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the numbers into groups of consecutive duplicates\n    groups = list(groupby(nums, lambda x: x))\n    # Remove consecutive duplicates\n    return list(set([group[0] for group in groups]))",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 778
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi * r ** 2) * h",
        "test": "assert lateralsurface_cone(1,1) == 3.141592653589793",
        "num_ids": 599
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[., ]', ':', text)",
        "test": "assert replace_specialchar('') == ''",
        "num_ids": 425
    },
    {
        "number": 733,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(1, len(A)):\n        if A[i] == x:\n            return i\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 832
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n\n    # initialize variables\n    n = len(arr)\n    prod = 1\n\n    # loop through all possible sublists of arr\n    for i in range(n):\n        for j in range(i, n):\n            # calculate product of sublist\n            sublist_prod = arr[i] * arr[j]\n\n            # add product of sublist to sum\n            prod += sublist_prod\n\n    return prod",
        "test": "assert sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 120 ",
        "num_ids": 1147
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def set_middle_bits(n): \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. \n    '''\n    if n == 0: \n        return 0 \n    if n == 1: \n        return 1 \n\n    num_bits = len(bin(n)[2:]) \n    new_num = 0 \n\n    for i in range(num_bits): \n        if i < num_bits//2: \n            new_num = new_num + (1 << i) \n\n    return new_num ",
        "test": "assert set_middle_bits(0) == 0",
        "num_ids": 1173
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n\n    # initialize the left pointer to the first element\n    left = 0\n\n    # initialize the right pointer to the last element minus 1\n    right = len(a) - 1\n\n    # loop until the left pointer is less than the right pointer\n    while left <= right:\n        # calculate the middle index\n        mid = (left + right) // 2\n\n        # if the middle element is greater than or equal to the specified value, set the right pointer to mid - 1\n        if a[mid] >= x:\n            right = mid - 1\n        else:\n            # if the middle element is less than the specified value, set the left pointer to mid + 1\n            left = mid + 1\n\n    # return the left pointer as the left insertion point\n    return left",
        "test": "assert left_insertion([1, 3, 5, 6, 8], 5) == 2",
        "num_ids": 791
    },
    {
        "number": 737,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('world') == False",
        "num_ids": 430
    },
    {
        "number": 738,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 506
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function will find the index of the smallest triangular number with n digits.\n    '''\n    # Function to check if a number is triangular\n    def is_triangular(n):\n        if n == 0 or n == 1:\n            return True\n        elif n % 2 == 0:\n            return is_triangular(n-1)\n        else:\n            return False\n\n    # Initialize the smallest triangular number index to be n\n    min_index = n\n\n    # Iterate through the range of numbers from 2 to n\n    for i in range(2, int(math.sqrt(n))+1):\n        # Check if the number is triangular\n        if is_triangular(i):\n            # If it is, update the minimum index if necessary\n            if i < min_index:\n                min_index = i\n\n    # Return the index of the smallest triangular number with n digits\n    return min_index",
        "test": "assert find_Index(2) == 2",
        "num_ids": 835
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary to store the key-value pairs\n    dict_ = {}\n    \n    # Iterate through the elements of the tuple and add them to the dictionary\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            dict_[test_tup[i]] = test_tup[i+1]\n    \n    return dict_",
        "test": "assert tuple_to_dict((\"apple\", \"banana\")) == {\"apple\": 1, \"banana\": 2}",
        "num_ids": 822
    },
    {
        "number": 741,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # initialize an empty list to store all characters\n    same_chars = []\n    # loop through the given string\n    for char in s:\n        # if the character is already present in the same_chars list,\n        # remove it from it and add the new character to it\n        if char in same_chars:\n            same_chars.remove(char)\n        else:\n            same_chars.append(char)\n    # if all the characters in the string are same, return True\n    if len(same_chars) == len(s):\n        return True\n    else:\n        return False",
        "test": "assert all_Characters_Same(\"\") == True # empty string",
        "num_ids": 646
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Function to calculate the area of a tetrahedron.\n    '''\n\n    # calculate the semi-perimeter of the tetrahedron\n    s = (side * (side + side + side + side)) / 2.0\n\n    # calculate the area of the tetrahedron\n    area = math.sqrt(s * (s - side) * (s - side - side) * (s - side - side - side))\n\n    return area",
        "test": "assert area_tetrahedron(3) == 24, \"The area of a tetrahedron with sides of length 3 is not equal to 24.\"",
        "num_ids": 586
    },
    {
        "number": 743,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def rotate_right(list, n):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    # create a copy of the list\n    rotated_list = list.copy()\n\n    # rotate the copied list by n items to the right\n    for i in range(n, len(rotated_list)):\n        rotated_list.append(rotated_list.pop(0))\n\n    return rotated_list",
        "test": "assert rotate_right([], 0) == []",
        "num_ids": 945
    },
    {
        "number": 744,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_none(test_tup):\n    '''\n    Function to check if the given tuple has any none value or not.\n\n    Args:\n        test_tup: tuple containing elements.\n\n    Returns:\n        boolean value indicating if the given tuple has any none value or not.\n    '''\n\n    for i in range(len(test_tup)):\n        if test_tup[i] is None:\n            return True\n\n    return False\n",
        "test": "assert check_none(()) == False",
        "num_ids": 474
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # create a lambda function that takes a number and returns True if it is divisible by every digit it contains\n    divisible_by_digit = lambda num: sum(int(digit) for digit in str(num)) % 10 == 0\n    \n    # create a list of all numbers between startnum and endnum, with every digit included\n    numbers = list(range(startnum, endnum+1))\n    \n    # filter the list to include only numbers that are divisible by every digit in the list\n    filtered_numbers = [num for num in numbers if divisible_by_digit(num)]\n    \n    # return the list of filtered numbers\n    return filtered_numbers",
        "test": "assert divisible_by_digits(1234567890, 1234567890) == []",
        "num_ids": 1667
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r",
        "test": "assert sector_area(1,360)<100",
        "num_ids": 507
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # fill the dp table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # find the LCS\n    lcs = \"\"\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs",
        "test": "assert lcs_of_three(\"\", \"\", \"\") == \"\"",
        "num_ids": 1762
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Join the words back together with spaces and return the result\n    return''.join(words)",
        "test": "assert capital_words_spaces(\"the quick brown fox jumps over the lazy dog\") == \"The Quick Brown Fox Jumps Over The Lazy Dog\"",
        "num_ids": 670
    },
    {
        "number": 749,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a list of strings of numbers numerically.\n    '''\n\n    # Convert the list of strings of numbers to a list of tuples of the form (num_str, num)\n    nums = [(float(num_str), num_str) for num_str in nums_str]\n\n    # Sort the list of tuples numerically based on the first element of each tuple\n    nums.sort()\n\n    # Convert the sorted list of tuples back to a list of strings of numbers\n    nums_sorted = [num_tuple[1] for num_tuple in nums]\n\n    return nums_sorted",
        "test": "assert sort_numeric_strings(['1', '3', '2', '4', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 1295
    },
    {
        "number": 750,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list",
        "test": "assert add_tuple([], (1, 2, 3)) == []",
        "num_ids": 412
    },
    {
        "number": 751,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i == 0 or arr[i] < arr[i-1]:\n        return True\n    else:\n        return check_min_heap_helper(arr, i-1)",
        "test": "assert check_min_heap_helper([1,2,3,4,5], 0) == True",
        "num_ids": 1106
    },
    {
        "number": 752,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    # initialize variables\n    p, q = 0, 1\n    # calculate the nth jacobsthal number\n    for i in range(n):\n        # update p and q\n        p, q = q, p + q\n    # return the nth jacobsthal number\n    return p",
        "test": "assert jacobsthal_num(0) == 0, \"0 is not the correct jacobsthal number\"",
        "num_ids": 1028
    },
    {
        "number": 753,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    k = K\n    if n < k:\n        return \"Error: n should be greater than or equal to K\"\n    \n    # Sort the list in ascending order\n    sorted_list = sorted(test_list)\n\n    # Remove the first K elements from the list\n    k_indices = [i for i in range(n) if i >= n-k]\n\n    # Return the minimum element from the remaining K elements\n    return sorted_list[k_indices[0]]",
        "test": "assert min_k([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 3]",
        "num_ids": 1500
    },
    {
        "number": 754,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def extract_index_list(l1, l2, l3):\n    # Initialize a set to store common elements\n    common = set()\n    # Iterate over all elements of l1\n    for i in range(len(l1)):\n        # Check if l1[i] is common for l2 and l3\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common:\n            common.add(l1[i])\n    # Iterate over all elements of l2\n    for i in range(len(l2)):\n        # Check if l2[i] is common for l1 and l3\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common:\n            common.add(l2[i])\n    # Iterate over all elements of l3\n    for i in range(len(l3)):\n        # Check if l3[i] is common for l1 and l2\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common:\n            common.add(l3[i])\n    return list(common)",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 1244
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "test": "assert second_smallest([5, 3, 8, 2, 7]) == 3",
        "num_ids": 653
    },
    {
        "number": 756,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Match a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'^[ab]+$'\n    return bool(re.match(pattern, text))\n",
        "test": "assert text_match_zero_one(\"ababab\") == True",
        "num_ids": 1610
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize two pointers to point to the first and last character in the list\n    left, right = 0, len(test_list) - 1\n\n    # Loop through the list\n    while left < right:\n        # Check if the characters at the left and right pointers are the same\n        if test_list[left] == test_list[right]:\n            # Increment the left pointer and decrement the right pointer\n            left += 1\n            right -= 1\n        # If the characters at the left and right pointers are not the same, then the two characters\n        # are not in the same reverse order, so break the loop\n        else:\n            break\n\n    # Count the number of pairs of reverse strings\n    count = 0\n    while left < right:\n        # Check if the characters at the left and right pointers are the same\n        if test_list[left] == test_list[right]:\n            # Increment the left pointer and decrement the right pointer\n            left += 1\n            right -= 1\n            count += 1\n        # If the characters at the left and right pointers are not the same, then the two characters\n        # are not in the same reverse order, so break the loop\n        else:\n            break\n\n    return count",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 1121
    },
    {
        "number": 758,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_count[sublist] = sublist_count.get(sublist, 0) + 1\n    return sublist_count",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 988
    },
    {
        "number": 759,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check if the input is a string and has 2 characters\n    if not isinstance(num, str) or len(num)!= 2:\n        return False\n\n    # split the input string into two parts\n    decimal, fraction = num.split('.')\n\n    # check if the fraction has 2 or more characters\n    if len(fraction) > 1 and len(fraction) < 3:\n        return False\n\n    # check if the fraction contains only digits\n    for digit in fraction:\n        if not digit.isdigit():\n            return False\n\n    # check if the decimal contains only digits\n    for digit in decimal:\n        if not digit.isdigit():\n            return False\n\n    # check if the fraction has the same number of digits as the decimal\n    if len(fraction)!= len(decimal):\n        return False\n\n    # check if the decimal has a decimal point\n    if decimal.endswith('.'):\n        return False\n\n    # check if the fraction has a decimal point\n    if fraction.startswith('.'):\n        return False\n\n    return True",
        "test": "assert is_decimal(\"12.34567890\") == False",
        "num_ids": 1291
    },
    {
        "number": 760,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set of unique elements in the array\n    unique_set = set(arr)\n    # check if the set has one element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 2, 3, 3]) == False",
        "num_ids": 855
    },
    {
        "number": 762,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(2) == False, \"2 should not contain 30 days\"",
        "num_ids": 769
    },
    {
        "number": 763,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_min_diff(arr,n): \n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the minimum difference to be the distance between the first and last elements\n    min_diff = abs(arr[n-1]-arr[0])\n    # Iterate over the array from index 1 to n-2 and compare each pair of adjacent elements\n    for i in range(1,n-1):\n        # Calculate the difference between the current elements\n        diff = abs(arr[i]-arr[i+1])\n        # If the difference is smaller than the minimum difference found so far, update it\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([1, 2, 3, 4, 5], 4) == 1 # find_min_diff should return 1 for [1, 2, 3, 4, 5] and n=4",
        "num_ids": 865
    },
    {
        "number": 764,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n\n    # Initialize a counter variable to 0\n    count = 0\n\n    # Iterate through each character in the string\n    for char in str:\n\n        # Check if the character is a digit\n        if char.isdigit():\n\n            # Increment the counter variable\n            count += 1\n\n    # Return the counter variable\n    return count",
        "test": "assert number_ctr('') == 0",
        "num_ids": 423
    },
    {
        "number": 765,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import math\n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Create a boolean array of size n+1 and initialize all entries to True\n    sieve = [True] * (n+1)\n    sieve[0] = sieve[1] = False\n    \n    # Mark multiples of primes\n    for i in range(2, int(math.sqrt(n))+1):\n        if sieve[i]:\n            for j in range(i*i, n+1, i):\n                sieve[j] = False\n    \n    # Check if nth prime is polite\n    if sieve[n]:\n        return True\n    else:\n        return False",
        "test": "assert is_polite(1) == False",
        "num_ids": 836
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # Initialize empty list to store the pairs\n    pairs = []\n    # Loop through all items in the list\n    for i in range(1, len(l1)):\n        # Check if the difference between the current item and the previous item is 1\n        if abs(l1[i] - l1[i-1]) == 1:\n            # If the difference is 1, append a pair to the list\n            pairs.append((l1[i-1], l1[i]))\n    # Return the list of pairs\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 814
    },
    {
        "number": 767,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count",
        "test": "assert get_pairs_count([1, 3, 5, 7, 9], 10) == 2",
        "num_ids": 661
    },
    {
        "number": 769,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = set(li1).symmetric_difference(li2)\n    return list(diff)\n",
        "test": "assert Diff([], []) == []",
        "num_ids": 519
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += 4**(i-1)\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of fourth power of first\", n, \"odd natural numbers is:\", odd_num_sum(n))",
        "test": "assert odd_num_sum(100) == 2300, \"The sum of fourth power of first 100 odd natural numbers is not 2300.\"",
        "num_ids": 667
    },
    {
        "number": 771,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_parentheses = 0\n    \n    for char in exp:\n        if char == '(':\n            stack.append(char)\n            open_parentheses += 1\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            \n            stack.pop()\n            open_parentheses -= 1\n            \n        elif char =='':\n            if len(stack) == 0:\n                return False\n            \n            stack.append(char)\n            \n    return len(stack) == 0 and open_parentheses == 0\n",
        "test": "assert check_expression(\"1+2*3\") == True # test 1+2*3 expression",
        "num_ids": 680
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # define a set to keep track of the unique words\n    unique_words = set()\n    \n    # split the string into words\n    words = test_str.split()\n    \n    # iterate over the words and add them to the set if they are not already in the set\n    for word in words:\n        if word not in unique_words:\n            unique_words.add(word)\n    \n    # create a new string with the unique words\n    new_string =''.join(unique_words)\n    \n    # return the new string with the removed words\n    return new_string",
        "test": "assert remove_length(\"hello world\", 5) == \"helloworld\"",
        "num_ids": 646
    },
    {
        "number": 773,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None",
        "test": "assert occurance_substring(\"The quick brown fox jumps over the lazy dog\", \"quick\") is not None",
        "num_ids": 874
    },
    {
        "number": 775,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 1: #check if the index is odd\n            for j in range(i, len(nums), 2): #check if the current index contains an odd number\n                if nums[j] % 2 == 1:\n                    return False #if a number is found, the function returns False\n    return True #if no odd number is found, the function returns True\n",
        "test": "assert odd_position([1, 2, 3, 4, 5]) == True # test if odd_position returns True when given a list of odd numbers",
        "num_ids": 711
    },
    {
        "number": 776,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    vowels_count = 0\n\n    for char in test_str:\n        if char in vowels:\n            vowels_count += 1\n\n    return vowels_count",
        "test": "assert count_vowels(\"Hello, world!\") == 3",
        "num_ids": 853
    },
    {
        "number": 777,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_sum(arr):\n    # Create an empty set to store non-repeated elements\n    non_repeated = set()\n    # Loop through the list and add the elements to the set\n    for num in arr:\n        non_repeated.add(num)\n    # Return the sum of the non-repeated elements\n    return sum(non_repeated)",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 860
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(list1)\n    sublists = []\n    for key, group in grouped:\n        if key == 0:\n            sublists.append(group)\n        else:\n            sublist = []\n            for element in group:\n                sublist.append(element)\n            sublists[-1].append(sublist)\n    return sublists",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 1983
    },
    {
        "number": 779,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count",
        "test": "assert unique_sublists([1,2,3,4,5]) == {1:1, 2:1, 3:1, 4:1, 5:1}",
        "num_ids": 1169
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "from itertools import combinations\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Find all combinations of sums with tuples\n    result = []\n    for sum1, sum2 in combinations(test_list, 2):\n        if sum1 + sum2 in test_list:\n            result.append((sum1, sum2))\n\n    return result",
        "test": "assert find_combinations([1, 2, 3, 4, 5]) == [",
        "num_ids": 1192
    },
    {
        "number": 781,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to count the number of divisors of a given number n.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert count_divisors(24) == 4",
        "num_ids": 651
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] % 2!= 0 and arr[j] % 2 == 0 and len(arr[i:]) == len(arr[j]):\n                odd_sum += arr[i] + arr[j]\n    return odd_sum",
        "test": "assert odd_length_sum([1, 3, 5, 7, 9]) == 0 #fail",
        "num_ids": 970
    },
    {
        "number": 783,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color.\n    '''\n    # Convert rgb to hsv\n    h = 0\n    s = 0\n    v = max(r, g, b)\n    delta = max(r - g, r - b, g - b)\n    if delta == 0:\n        h = 0\n    elif r == v:\n        h = (g - b) / delta\n    elif g == v:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    # Convert hsv to rgb\n    if h == 0:\n        return (r, g, b)\n    if s == 0:\n        return (int(r), int(g), int(b))\n    i = int(h * 6)\n    f = h * 6 - i\n    p = v * (1 - s)\n    q = v * (1 - f * s)\n    t = v * (1 - (1 - f) * s)\n    if i == 6:\n        i = 0\n    if i == 0:\n        return (v, t, p)\n    if i == 1:\n        return (q, v, p)\n    if i == 2:\n        return (p, v, t)\n    if i == 3:\n        return (p, q, v)\n    if i == 4:\n        return (t, p, v)\n    if i == 5:\n        return (v, p, q)",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 2484
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0: # check if number is even\n            product *= num # multiply even number by product\n    for num in list1:\n        if num % 2 == 1: # check if number is odd\n            product *= num # multiply odd number by product\n    return product",
        "test": "assert mul_even_odd([1, 2, 3, 4, 5]) == 120  # correct",
        "num_ids": 690
    },
    {
        "number": 785,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        test_int_tuple = tuple(map(int, test_str.split(',')))\n        return test_int_tuple\n    except ValueError:\n        return False",
        "test": "assert tuple_str_int(\"1\") == (1,)",
        "num_ids": 509
    },
    {
        "number": 786,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    a: list of numbers\n    x: number to be inserted\n\n    Returns:\n    index of the right insertion point\n    '''\n    if not a:\n        return 0\n\n    if x == a[0]:\n        return 0\n\n    left, right = 0, len(a) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if x < a[mid]:\n            right = mid - 1\n        elif x > a[mid]:\n            left = mid + 1\n        else:\n            return mid\n\n    return left",
        "test": "assert right_insertion([1, 2, 3, 4, 5], 4) == 3",
        "num_ids": 1037
    },
    {
        "number": 787,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'[ab]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three('ababbb')",
        "num_ids": 510
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n\n    # Splitting the string into list of strings\n    str_list = test_str.split()\n\n    # Converting list of strings into list of integers\n    int_list = [int(i) for i in str_list]\n\n    # Converting list of integers into a tuple\n    return tuple(int_list)",
        "test": "assert new_tuple(\"hello\", [\"world\", \"python\"]) == (\"hello\", \"world\", \"python\")",
        "num_ids": 575
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return True\n    return False",
        "test": "assert even_position([1, 2, 3, 4, 5]) == False # wrong number of arguments",
        "num_ids": 753
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Loop through the given tuple and remove any nested tuples\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            if len(test_tup[i]) == 1:\n                test_tup.remove(test_tup[i])\n            else:\n                remove_nested(test_tup[i])\n    return test_tup",
        "test": "assert remove_nested(('a', 'b', 'c', 'd')) == ('a', 'b', 'c', 'd')",
        "num_ids": 805
    },
    {
        "number": 792,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_list = len(input_list)\n    return num_list",
        "test": "assert count_list([]) == 0",
        "num_ids": 388
    },
    {
        "number": 793,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1",
        "test": "assert last([1,2,3,4,5],3) == 2",
        "num_ids": 687
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Define a regular expression pattern that matches a string that has an 'a' followed by anything, ending in 'b'\n    pattern = r'\\ba\\w*b\\b'\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches",
        "test": "assert text_starta_endb(\"Hello World\") == True",
        "num_ids": 659
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 510
    },
    {
        "number": 797,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate through the range from l to r\n    for i in range(1, n+1): \n        # Check if the current number is odd\n        if i % 2!= 0: \n            # Add the current number to the sum\n            sum += i\n    \n    return sum",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 566
    },
    {
        "number": 798,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0  \n    for i in range(len(arr)):  \n        sum += arr[i]  \n    return sum  ",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 408
    },
    {
        "number": 799,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate the number n to the left by d bits.\n\n    Arguments:\n        n (int): A 32-bit signed integer to be rotated.\n        d (int): The number of bits to be rotated.\n\n    Returns:\n        int: The rotated number.\n    '''\n    # Compute the new value of the number by shifting the old value to the left d bits,\n    # and then ORing the bits to the left with the original value.\n    new_value = n << d | n >> (32 - d)\n    return new_value",
        "test": "assert left_rotate(32,0) == 32 # left_rotate(32,0) = 32",
        "num_ids": 598
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all whitespaces with a single space character\n    text = re.sub(r'\\s+','', text)\n    return text",
        "test": "assert remove_all_spaces(\"   Hello World  \") == \"HelloWorld\"",
        "num_ids": 452
    },
    {
        "number": 801,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x, y+1):\n        if sum([abs(i-j) for j in range(i, y+1, i)]) == 0:\n            count += 1\n    return count",
        "test": "assert test_three_equal(5,5,5) == 1",
        "num_ids": 585
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def count_rotation(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            count += 1\n    return count",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 4",
        "num_ids": 900
    },
    {
        "number": 803,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_perfect_square(n):\n    if n == 1 or n == 0:\n        return True\n    if n % 2 == 0:\n        return is_perfect_square(n // 2)\n    else:\n        return is_perfect_square(3 * n + 1)\n",
        "test": "assert is_perfect_square(9) == True",
        "num_ids": 644
    },
    {
        "number": 804,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2, 4, 6, 8, 10]) == True # correct",
        "num_ids": 592
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize variables to store the sum of elements and the current max sum\n    total_sum = 0\n    max_sum = float('-inf')\n\n    # Loop through each list of lists\n    for lst in lists:\n        # Loop through each element in the list\n        for elem in lst:\n            # Add the element to the total sum\n            total_sum += elem\n\n            # Check if the total sum is greater than the current max sum\n            if total_sum > max_sum:\n                max_sum = total_sum\n\n    # Return the list of lists with the maximum sum\n    return [[elem for elem in lst] for lst in lists]",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1231
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_length = 1\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if count == 1:\n                max_length = 1\n            else:\n                max_length += 1\n            count += 1\n        else:\n            count = 1\n    return max_length",
        "test": "assert max_run_uppercase(\"A\") == 1",
        "num_ids": 733
    },
    {
        "number": 807,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 543
    },
    {
        "number": 808,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_K(test_tup, K):\n    '''\n    Check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in range(K):\n        if test_tup[i]!= K - 1 - i:\n            return False\n    return True",
        "test": "assert check_K(('apple', 'banana', 'cherry'), 3) == False",
        "num_ids": 590
    },
    {
        "number": 809,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 2), (1, 3)) == False",
        "num_ids": 699
    }
]